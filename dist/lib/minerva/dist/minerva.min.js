function radToDegrees(t){return 180*t/Math.PI}var minerva;!function(t){t.version="0.7.6"}(minerva||(minerva={}));var minerva;!function(t){!function(t){t[t.Left=0]="Left",t[t.Center=1]="Center",t[t.Right=2]="Right",t[t.Stretch=3]="Stretch"}(t.HorizontalAlignment||(t.HorizontalAlignment={}));t.HorizontalAlignment;!function(t){t[t.Top=0]="Top",t[t.Center=1]="Center",t[t.Bottom=2]="Bottom",t[t.Stretch=3]="Stretch"}(t.VerticalAlignment||(t.VerticalAlignment={}));t.VerticalAlignment}(minerva||(minerva={}));var minerva;!function(t){var e=function(){function t(t,e,n,r){this.topLeft=null==t?0:t,this.topRight=null==e?0:e,this.bottomRight=null==n?0:n,this.bottomLeft=null==r?0:r}return t.isEmpty=function(t){return 0===t.topLeft&&0===t.topRight&&0===t.bottomRight&&0===t.bottomLeft},t.isEqual=function(t,e){return t.topLeft===e.topLeft&&t.topRight===e.topRight&&t.bottomRight===e.bottomRight&&t.bottomLeft===e.bottomLeft},t.clear=function(t){t.topLeft=t.topRight=t.bottomRight=t.bottomLeft=0},t.copyTo=function(t,e){e.topLeft=t.topLeft,e.topRight=t.topRight,e.bottomRight=t.bottomRight,e.bottomLeft=t.bottomLeft},t}();t.CornerRadius=e}(minerva||(minerva={}));var minerva;!function(t){!function(t){t[t.Horizontal=0]="Horizontal",t[t.Vertical=1]="Vertical"}(t.Orientation||(t.Orientation={}));t.Orientation;!function(t){t[t.Miter=0]="Miter",t[t.Bevel=1]="Bevel",t[t.Round=2]="Round"}(t.PenLineJoin||(t.PenLineJoin={}));t.PenLineJoin;!function(t){t[t.Flat=0]="Flat",t[t.Square=1]="Square",t[t.Round=2]="Round",t[t.Triangle=3]="Triangle"}(t.PenLineCap||(t.PenLineCap={}));t.PenLineCap;!function(t){t[t.EvenOdd=0]="EvenOdd",t[t.NonZero=1]="NonZero"}(t.FillRule||(t.FillRule={}));t.FillRule;!function(t){t[t.None=0]="None",t[t.Fill=1]="Fill",t[t.Uniform=2]="Uniform",t[t.UniformToFill=3]="UniformToFill"}(t.Stretch||(t.Stretch={}));t.Stretch;!function(t){t[t.LeftToRight=0]="LeftToRight",t[t.RightToLeft=1]="RightToLeft"}(t.FlowDirection||(t.FlowDirection={}));t.FlowDirection;!function(t){t[t.MaxHeight=0]="MaxHeight",t[t.BlockLineHeight=1]="BlockLineHeight"}(t.LineStackingStrategy||(t.LineStackingStrategy={}));t.LineStackingStrategy;!function(t){t[t.Left=0]="Left",t[t.Center=1]="Center",t[t.Right=2]="Right",t[t.Justify=3]="Justify"}(t.TextAlignment||(t.TextAlignment={}));t.TextAlignment;!function(t){t[t.None=0]="None",t[t.WordEllipsis=1]="WordEllipsis",t[t.CharacterEllipsis=2]="CharacterEllipsis"}(t.TextTrimming||(t.TextTrimming={}));t.TextTrimming;!function(t){t[t.NoWrap=0]="NoWrap",t[t.Wrap=1]="Wrap",t[t.WrapWithOverflow=2]="WrapWithOverflow"}(t.TextWrapping||(t.TextWrapping={}));t.TextWrapping;!function(t){t[t.None=0]="None",t[t.Underline=1]="Underline"}(t.TextDecorations||(t.TextDecorations={}));t.TextDecorations;!function(t){t[t.Thin=100]="Thin",t[t.ExtraLight=200]="ExtraLight",t[t.Light=300]="Light",t[t.Normal=400]="Normal",t[t.Medium=500]="Medium",t[t.SemiBold=600]="SemiBold",t[t.Bold=700]="Bold",t[t.ExtraBold=800]="ExtraBold",t[t.Black=900]="Black",t[t.ExtraBlack=950]="ExtraBlack"}(t.FontWeight||(t.FontWeight={}));t.FontWeight;!function(t){t[t.Counterclockwise=0]="Counterclockwise",t[t.Clockwise=1]="Clockwise"}(t.SweepDirection||(t.SweepDirection={}));t.SweepDirection}(minerva||(minerva={}));var minerva;!function(t){function e(e,r){n=n||new t.core.render.RenderContext(document.createElement("canvas").getContext("2d"));var i=t.mat3.inverse(r.assets.renderXform,t.mat3.create());n.save(),n.preapply(i);var a=[];return r.hitTest(e,a,n,!0),n.restore(),a}var n=null;t.findElementsInHostSpace=e}(minerva||(minerva={}));var minerva;!function(t){!function(t){t[t.Transform=1]="Transform",t[t.LocalTransform=2]="LocalTransform",t[t.Clip=8]="Clip",t[t.LocalClip=16]="LocalClip",t[t.LayoutClip=32]="LayoutClip",t[t.RenderVisibility=64]="RenderVisibility",t[t.HitTestVisibility=128]="HitTestVisibility",t[t.ImageMetrics=256]="ImageMetrics",t[t.Measure=512]="Measure",t[t.Arrange=1024]="Arrange",t[t.Bounds=1048576]="Bounds",t[t.NewBounds=2097152]="NewBounds",t[t.Invalidate=4194304]="Invalidate",t[t.InUpDirtyList=1073741824]="InUpDirtyList",t[t.InDownDirtyList=-2147483648]="InDownDirtyList",t[t.DownDirtyState=507]="DownDirtyState",t[t.UpDirtyState=7340032]="UpDirtyState",t[t.PropagateDown=225]="PropagateDown"}(t.DirtyFlags||(t.DirtyFlags={}));t.DirtyFlags;!function(t){t[t.None=0]="None",t[t.RenderVisible=2]="RenderVisible",t[t.HitTestVisible=4]="HitTestVisible",t[t.TotalRenderVisible=8]="TotalRenderVisible",t[t.TotalHitTestVisible=16]="TotalHitTestVisible",t[t.MeasureHint=2048]="MeasureHint",t[t.ArrangeHint=4096]="ArrangeHint",t[t.SizeHint=8192]="SizeHint",t[t.Hints=14336]="Hints"}(t.UIFlags||(t.UIFlags={}));t.UIFlags;!function(t){t[t.None=0]="None",t[t.Empty=1]="Empty",t[t.Normal=2]="Normal",t[t.Degenerate=4]="Degenerate",t[t.Radii=8]="Radii"}(t.ShapeFlags||(t.ShapeFlags={}));t.ShapeFlags}(minerva||(minerva={}));var minerva;!function(t){function e(t){var e="";return e+=t.style.toString()+" ",e+="normal ",e+=t.weight.toString()+" ",e+=t.size+"px ",e+=t.family.toString()}t.FontStyle={Normal:"normal",Italic:"italic",Oblique:"oblique"},t.FontStretch={UltraCondensed:"ultra-condensed",ExtraCondensed:"extra-condensed",Condensed:"condensed",SemiCondensed:"semi-condensed",Normal:"normal",SemiExpanded:"semi-expanded",Expanded:"expanded",ExtraExpanded:"extra-expanded",UltraExpanded:"ultra-expanded"};var n=function(){function n(){this.family=n.DEFAULT_FAMILY,this.size=n.DEFAULT_SIZE,this.stretch=n.DEFAULT_STRETCH,this.style=n.DEFAULT_STYLE,this.weight=n.DEFAULT_WEIGHT,this.$$cachedObj=null,this.$$cachedHeight=null}return n.mergeInto=function(t,e,n,r,i,a){var o=t.family!==e||t.size!==n||t.stretch!==r||t.style!==i||t.weight!==a;return t.family=e,t.size=n,t.stretch=r,t.style=i,t.weight=a,o&&(t.$$cachedObj=null,t.$$cachedHeight=null),o},n.prototype.toHtml5Object=function(){return this.$$cachedObj=this.$$cachedObj||e(this)},n.prototype.getHeight=function(){return null==this.$$cachedHeight&&(this.$$cachedHeight=t.fontHeight.get(this)),this.$$cachedHeight},n.prototype.getAscender=function(){return 0},n.prototype.getDescender=function(){return 0},n.DEFAULT_FAMILY="Segoe UI, Lucida Grande, Verdana",n.DEFAULT_STRETCH=t.FontStretch.Normal,n.DEFAULT_STYLE=t.FontStyle.Normal,n.DEFAULT_WEIGHT=t.FontWeight.Normal,n.DEFAULT_SIZE=14,n}();t.Font=n}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){function e(e){var i=e.toHtml5Object(),a=r[i];return null==a?(r[i]=a=n(i),t.cache.misses++):t.cache.hits++,a}function n(t){perfex.timer.start("MeasureFontHeight",t),i||(i=document.createElement("div"),i.appendChild(document.createTextNode("Hg")),document.body.appendChild(i)),i.style.display="",i.style.font=t;var e=i.offsetHeight;return i.style.display="none",perfex.timer.stop(),e}var r=[];t.cache={hits:0,misses:0},t.get=e;var i}(e=t.fontHeight||(t.fontHeight={}))}(minerva||(minerva={}));var minerva;!function(t){var e=function(){function t(t){this.raw=t}return t.prototype.isTransparent=function(){return!1},t.prototype.setupBrush=function(t,e){},t.prototype.toHtml5Object=function(){return this.raw},t}();t.FakeBrush=e}(minerva||(minerva={}));var minerva;!function(t){t.NO_SIZE_UPDATER={setActualWidth:function(t){},setActualHeight:function(t){},onSizeChanged:function(t,e){}}}(minerva||(minerva={}));var minerva;!function(t){!function(t){t[t.Forward=0]="Forward",t[t.Reverse=1]="Reverse",t[t.ZForward=2]="ZForward",t[t.ZReverse=3]="ZReverse"}(t.WalkDirection||(t.WalkDirection={}));t.WalkDirection}(minerva||(minerva={}));var minerva;!function(t){function e(e,n,r){t.errors.push({tree:e,pipedef:n,message:r})}function n(){t.errors.length=0}t.errors=[],t.layoutError=e,t.clearErrors=n}(minerva||(minerva={}));var minerva;!function(t){function e(e){var n=t.zoom.calc();return new t.Size(e.offsetWidth*n,e.offsetHeight*n)}t.getNaturalCanvasSize=e}(minerva||(minerva={}));var minerva;!function(t){var e=function(){function t(t,e){this.x=null==t?0:t,this.y=null==e?0:e}return t.isEqual=function(t,e){return t.x===e.x&&t.y===e.y},t.copyTo=function(t,e){e.x=t.x,e.y=t.y},t}();t.Point=e}(minerva||(minerva={}));var minerva;!function(t){var e;e="undefined"!=typeof Float32Array?function(t){return new Float32Array(t)}:function(t){return new Array(t)},t.vec2={create:function(t,n){var r=e(2);return r[0]=t,r[1]=n,r},init:function(t,n,r){return r||(r=e(2)),r[0]=t,r[1]=n,r}}}(minerva||(minerva={}));var vec2=minerva.vec2,minerva;!function(t){!function(t){t[t.Out=0]="Out",t[t.In=1]="In",t[t.Part=2]="Part"}(t.RectOverlap||(t.RectOverlap={}));var e=t.RectOverlap,n=t.vec2.create(0,0),r=t.vec2.create(0,0),i=t.vec2.create(0,0),a=t.vec2.create(0,0),o=function(){function o(t,e,n,r){this.x=null==t?0:t,this.y=null==e?0:e,this.width=null==n?0:n,this.height=null==r?0:r}return o.clear=function(t){t.x=t.y=t.width=t.height=0},o.getBottom=function(t){return t.y+t.height},o.getRight=function(t){return t.x+t.width},o.isEqual=function(t,e){return t.x===e.x&&t.y===e.y&&t.width===e.width&&t.height===e.height},o.isEmpty=function(t){return 0===t.width||0===t.height},o.copyTo=function(t,e){e.x=t.x,e.y=t.y,e.width=t.width,e.height=t.height},o.roundOut=function(t){var e=Math.floor(t.x),n=Math.floor(t.y);t.width=Math.ceil(t.x+t.width)-e,t.height=Math.ceil(t.y+t.height)-n,t.x=e,t.y=n},o.roundIn=function(t){var e=Math.ceil(t.x),n=Math.ceil(t.y);return t.width=Math.floor(t.x+t.width)-Math.ceil(t.x),t.height=Math.floor(t.y+t.height)-Math.ceil(t.y),t.x=e,t.y=n,t},o.intersection=function(t,e){var n=Math.max(t.x,e.x),r=Math.max(t.y,e.y);t.width=Math.max(0,Math.min(t.x+t.width,e.x+e.width)-n),t.height=Math.max(0,Math.min(t.y+t.height,e.y+e.height)-r),t.x=n,t.y=r},o.union=function(t,e){if(!(e.width<=0||e.height<=0)){if(t.width<=0||t.height<=0)return void o.copyTo(e,t);var n=Math.min(t.x,e.x),r=Math.min(t.y,e.y);t.width=Math.max(t.x+t.width,e.x+e.width)-n,t.height=Math.max(t.y+t.height,e.y+e.height)-r,t.x=n,t.y=r}},o.isContainedIn=function(t,e){var n=t.x,r=t.y,i=t.x+t.width,a=t.y+t.height,o=e.x,s=e.y,c=e.x+e.width,u=e.y+e.height;return o>n||s>r||n>c||r>u?!1:o>i||s>a||i>c||a>u?!1:!0},o.containsPoint=function(t,e){return t.x<=e.x&&t.y<=e.y&&t.x+t.width>=e.x&&t.y+t.height>=e.y},o.extendTo=function(t,e,n){var r=t.x,i=t.y,a=t.width,o=t.height;(r>e||e>r+a)&&(a=Math.max(Math.abs(e-r),Math.abs(e-r-a))),(i>n||n>i+o)&&(o=Math.max(Math.abs(n-i),Math.abs(n-i-o))),t.x=Math.min(r,e),t.y=Math.min(i,n),t.width=a,t.height=o},o.grow=function(t,e,n,r,i){return t.x-=e,t.y-=n,t.width+=e+r,t.height+=n+i,t.width<0&&(t.width=0),t.height<0&&(t.height=0),t},o.shrink=function(t,e,n,r,i){t.x+=e,t.y+=n,t.width-=e+r,t.height-=n+i,t.width<0&&(t.width=0),t.height<0&&(t.height=0)},o.rectIn=function(t,n){var r=new o;return o.copyTo(t,r),o.intersection(r,n),o.isEmpty(r)?e.Out:o.isEqual(r,n)?e.In:e.Part},o.transform=function(e,o){if(!o)return e;var s=e.x,c=e.y,u=e.width,l=e.height;t.vec2.init(s,c,n),t.vec2.init(s+u,c,r),t.vec2.init(s+u,c+l,i),t.vec2.init(s,c+l,a),t.mat3.transformVec2(o,n),t.mat3.transformVec2(o,r),t.mat3.transformVec2(o,i),t.mat3.transformVec2(o,a);var h=Math.min(n[0],r[0],i[0],a[0]),p=Math.min(n[1],r[1],i[1],a[1]),f=Math.max(n[0],r[0],i[0],a[0]),d=Math.max(n[1],r[1],i[1],a[1]);return e.x=h,e.y=p,e.width=f-h,e.height=d-p,e},o.transform4=function(t,e){},o}();t.Rect=o}(minerva||(minerva={}));var minerva;!function(t){function e(t){var e=t;return e.$$instance||Object.defineProperty(e,"$$instance",{value:new e,enumerable:!1}),e.$$instance}t.singleton=e}(minerva||(minerva={}));var minerva;!function(t){var e=function(){function t(t,e){this.width=null==t?0:t,this.height=null==e?0:e}return t.copyTo=function(t,e){e.width=t.width,e.height=t.height},t.isEqual=function(t,e){return t.width===e.width&&t.height===e.height},t.isEmpty=function(t){return 0===t.width||0===t.height},t.min=function(t,e){t.width=Math.min(t.width,e.width),t.height=Math.min(t.height,e.height)},t.isUndef=function(t){return isNaN(t.width)&&isNaN(t.height)},t.undef=function(t){t.width=NaN,t.height=NaN},t}();t.Size=e}(minerva||(minerva={}));var minerva;!function(t){var e=function(){function t(t,e,n,r){this.left=null==t?0:t,this.top=null==e?0:e,this.right=null==n?0:n,this.bottom=null==r?0:r}return t.add=function(t,e){t.left+=e.left,t.top+=e.top,t.right+=e.right,t.bottom+=e.bottom},t.copyTo=function(t,e){e.left=t.left,e.top=t.top,e.right=t.right,e.bottom=t.bottom},t.isEmpty=function(t){return 0===t.left&&0===t.top&&0===t.right&&0===t.bottom},t.isBalanced=function(t){return t.left===t.top&&t.left===t.right&&t.left===t.bottom},t.shrinkSize=function(t,e){var n=e.width,r=e.height;return n!=Number.POSITIVE_INFINITY&&(n-=t.left+t.right),r!=Number.POSITIVE_INFINITY&&(r-=t.top+t.bottom),e.width=n>0?n:0,e.height=r>0?r:0,e},t.shrinkRect=function(t,e){e.x+=t.left,e.y+=t.top,e.width-=t.left+t.right,e.height-=t.top+t.bottom,e.width<0&&(e.width=0),e.height<0&&(e.height=0)},t.shrinkCornerRadius=function(t,e){e.topLeft=Math.max(e.topLeft-.5*Math.max(t.left,t.top),0),e.topRight=Math.max(e.topRight-.5*Math.max(t.right,t.top),0),e.bottomRight=Math.max(e.bottomRight-.5*Math.max(t.right,t.bottom),0),e.bottomLeft=Math.max(e.bottomLeft-.5*Math.max(t.left,t.bottom),0)},t.growSize=function(t,e){var n=e.width,r=e.height;return n!=Number.POSITIVE_INFINITY&&(n+=t.left+t.right),r!=Number.POSITIVE_INFINITY&&(r+=t.top+t.bottom),e.width=n>0?n:0,e.height=r>0?r:0,e},t.growRect=function(t,e){e.x-=t.left,e.y-=t.top,e.width+=t.left+t.right,e.height+=t.top+t.bottom,e.width<0&&(e.width=0),e.height<0&&(e.height=0)},t.growCornerRadius=function(t,e){e.topLeft=e.topLeft?Math.max(e.topLeft+.5*Math.max(t.left,t.top),0):0,e.topRight=e.topRight?Math.max(e.topRight+.5*Math.max(t.right,t.top),0):0,e.bottomRight=e.bottomRight?Math.max(e.bottomRight+.5*Math.max(t.right,t.bottom),0):0,e.bottomLeft=e.bottomLeft?Math.max(e.bottomLeft+.5*Math.max(t.left,t.bottom),0):0},t}();t.Thickness=e}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){function e(t,e){return[t,e]}function n(t){return t[0]=-t[0],t[1]=-t[1],t}function r(t){var e=t[0],n=t[1];return t[0]=-n,t[1]=e,t}function i(t){var e=t[0],n=t[1],r=Math.sqrt(e*e+n*n);return t[0]=e/r,t[1]=n/r,t}function a(t,e){var n=Math.cos(e),r=Math.sin(e),i=t[0],a=t[1];return t[0]=i*n-a*r,t[1]=i*r+a*n,t}function o(t,e){var n=t[0],r=t[1],i=e[0],a=e[1],o=n*i+r*a,s=Math.sqrt(n*n+r*r)*Math.sqrt(i*i+a*a);return Math.acos(o/s)}function s(t,e){var n=o(t,e),r=i(t.slice(0)),s=i(e.slice(0));a(r,n);var c=Math.abs(r[0]-s[0]),l=Math.abs(r[1]-s[1]);return u>c&&u>l}function c(t,e,n,r){var i=t[0],a=t[1],o=i+e[0],s=a+e[1],c=n[0],u=n[1],l=c+r[0],h=u+r[1],p=(i-o)*(u-h)-(a-s)*(c-l);if(0===p)return null;var f=(i*s-a*o)*(c-l)-(i-o)*(c*h-u*l),d=(i*s-a*o)*(u-h)-(a-s)*(c*h-u*l);return[f/p,d/p]}var u=1e-10;t.create=e,t.reverse=n,t.orthogonal=r,t.normalize=i,t.rotate=a,t.angleBetween=o,t.isClockwiseTo=s,t.intersection=c}(e=t.Vector||(t.Vector={}))}(minerva||(minerva={}));var minerva;!function(t){!function(t){t[t.Visible=0]="Visible",t[t.Collapsed=1]="Collapsed"}(t.Visibility||(t.Visibility={}));t.Visibility}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){function e(){return function(){var t=document.frames.screen,e=t.deviceXDPI/t.systemXDPI;return Math.round(100*e)/100}}function n(){function t(){!e&&document.body&&(e=document.createElementNS("http://www.w3.org/2000/svg","svg"),e.setAttribute("xmlns","http://www.w3.org/2000/svg"),e.setAttribute("version","1.1"),document.body.appendChild(e),function(t){t.opacity="0.0",t.position="absolute",t.left="-300px"}(e.style))}var e;return function(){return t(),e?e.currentScale:1}}t.calc=function(){return document.frames?e():n()}()}(e=t.zoom||(t.zoom={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n=function(){function n(){this.$$measure=null,this.$$measureBinder=null,this.$$arrange=null,this.$$arrangeBinder=null,this.$$sizing=null,this.$$processdown=null,this.$$processup=null,this.$$render=null,this.$$hittest=null,this.$$inDownDirty=!1,this.$$inUpDirty=!1,this.$$attached={},this.$$sizeupdater=t.NO_SIZE_UPDATER,this.assets={width:NaN,height:NaN,minWidth:0,minHeight:0,maxWidth:Number.POSITIVE_INFINITY,maxHeight:Number.POSITIVE_INFINITY,useLayoutRounding:!0,margin:new t.Thickness,horizontalAlignment:t.HorizontalAlignment.Stretch,verticalAlignment:t.VerticalAlignment.Stretch,clip:null,effect:null,visibility:t.Visibility.Visible,opacity:1,isHitTestVisible:!0,renderTransform:null,renderTransformOrigin:new t.Point,effectPadding:new t.Thickness,previousConstraint:new t.Size,desiredSize:new t.Size,hiddenDesire:new t.Size(Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY),renderSize:new t.Size,visualOffset:new t.Point,lastRenderSize:void 0,layoutSlot:new t.Rect,layoutClip:new t.Rect,compositeLayoutClip:new t.Rect,breakLayoutClip:!1,actualWidth:0,actualHeight:0,z:NaN,totalIsRenderVisible:!0,totalOpacity:1,totalIsHitTestVisible:!0,extents:new t.Rect,extentsWithChildren:new t.Rect,surfaceBoundsWithChildren:new t.Rect,globalBoundsWithChildren:new t.Rect,layoutXform:t.mat3.identity(),carrierXform:null,renderXform:t.mat3.identity(),absoluteXform:t.mat3.identity(),dirtyRegion:new t.Rect,dirtyFlags:0,uiFlags:t.UIFlags.RenderVisible|t.UIFlags.HitTestVisible,forceInvalidate:!1},this.tree=null,perfex.timer.start("CreateUpdater",null),this.setMeasureBinder().setArrangeBinder().init(),perfex.timer.stop()}return n.prototype.init=function(){this.setTree(this.tree),this.$$measure||this.setMeasurePipe(),this.$$arrange||this.setArrangePipe(),this.$$sizing||this.setSizingPipe(),this.$$processdown||this.setProcessDownPipe(),this.$$processup||this.setProcessUpPipe(),this.$$render||this.setRenderPipe(),this.$$hittest||this.setHitTestPipe(),this.$$hittest.data.tree||(this.$$hittest.data.tree=this.tree)},n.prototype.setTree=function(t){return this.tree=t||new e.UpdaterTree,this},n.prototype.getAttachedValue=function(t){return this.$$attached[t]},n.prototype.setAttachedValue=function(t,e){this.$$attached[t]=e},n.prototype.onDetached=function(){e.reactTo.helpers.invalidateParent(this),this.invalidateMeasure(),this.tree.visualParent&&this.tree.visualParent.invalidateMeasure();var t=this.assets.layoutSlot;t.x=t.y=t.width=t.height=0;var n=this.assets.layoutClip;n.x=n.y=n.width=n.height=0},n.prototype.onAttached=function(){var e=this.assets;t.Size.undef(e.previousConstraint),e.dirtyFlags|=t.DirtyFlags.RenderVisibility|t.DirtyFlags.HitTestVisibility|t.DirtyFlags.LocalTransform;var r=e.layoutClip;r.x=r.y=r.width=r.height=0;var i=e.renderSize;i.width=i.height=0,this.invalidateMeasure().invalidateArrange().invalidate().updateBounds(!0),n.$$addDownDirty(this),((e.uiFlags&t.UIFlags.SizeHint)>0||void 0!==e.lastRenderSize)&&n.$$propagateUiFlagsUp(this,t.UIFlags.SizeHint)},n.prototype.setVisualParent=function(t){return!t&&this.tree.visualParent&&(this.onDetached(),this.tree.visualParent.tree.onChildDetached(this)),this.tree.visualParent=t,this.setSurface(t?t.tree.surface:void 0),t&&(t.tree.onChildAttached(this),this.onAttached()),this},n.prototype.setSurface=function(e){for(var n,r=[],i=this.walkDeep();i.step();)if(n=i.current,n.tree.surface!==e){var a=n.tree.surface;n.tree.surface=e,n.onSurfaceChanged(a,e),e&&((n.assets.dirtyFlags&t.DirtyFlags.DownDirtyState)>0&&(n.$$inDownDirty=!0,e.addDownDirty(n)),(n.assets.dirtyFlags&t.DirtyFlags.UpDirtyState)>0&&r.push(n))}else i.skipBranch();for(;null!=(n=r.pop());)n.$$inUpDirty=!0,e.addUpDirty(n);return this},n.prototype.onSurfaceChanged=function(t,e){},n.prototype.walkDeep=function(e){var n=void 0,r=[this];e=e||t.WalkDirection.Forward;var i=e===t.WalkDirection.Forward||e===t.WalkDirection.ZForward?e+1:e-1;return{current:void 0,step:function(){if(n)for(var t=n.tree.walk(i);t.step();)r.unshift(t.current);return this.current=n=r.shift(),void 0!==this.current},skipBranch:function(){n=void 0}}},n.prototype.setMeasurePipe=function(n){if(this.$$measure)return this;var r=n||new e.measure.MeasurePipeDef;return this.$$measure=t.pipe.createTriPipe(r),this},n.prototype.setMeasureBinder=function(t){return this.$$measureBinder=t||new e.measure.MeasureBinder,this},n.prototype.setArrangePipe=function(n){if(this.$$arrange)return this;var r=n||new e.arrange.ArrangePipeDef;return this.$$arrange=t.pipe.createTriPipe(r),this},n.prototype.setArrangeBinder=function(t){return this.$$arrangeBinder=t||new e.arrange.ArrangeBinder,this},n.prototype.setSizingPipe=function(n){if(this.$$sizing)return this;var r=n;return r||(r=new e.sizing.SizingPipeDef),this.$$sizing=t.pipe.createTriPipe(r),this},n.prototype.setProcessDownPipe=function(n){var r=n;return r||(r=new e.processdown.ProcessDownPipeDef),this.$$processdown=t.pipe.createTriPipe(r),this},n.prototype.setProcessUpPipe=function(n){if(this.$$processup)return this;var r=n;return r||(r=new e.processup.ProcessUpPipeDef),this.$$processup=t.pipe.createTriPipe(r),this},n.prototype.setRenderPipe=function(n){if(this.$$render)return this;var r=n||new e.render.RenderPipeDef;return this.$$render=t.pipe.createTriPipe(r),this},n.prototype.setHitTestPipe=function(n){if(this.$$hittest)return this;var r=n||new e.hittest.HitTestPipeDef;return this.$$hittest={def:r,data:{updater:this,assets:this.assets,tree:this.tree,hitChildren:!1,bounds:new t.Rect,layoutClipBounds:new t.Rect}},this},n.prototype.doMeasure=function(){this.$$measureBinder.bind(this)},n.prototype.measure=function(t){var e=this.$$measure,r=e.output,i=e.def.run(this.assets,e.state,r,this.tree,t);return r.newUpDirty&&n.$$addUpDirty(this),r.newDownDirty&&n.$$addDownDirty(this),r.newUiFlags&&n.$$propagateUiFlagsUp(this,r.newUiFlags),i},n.prototype.doArrange=function(){this.$$arrangeBinder.bind(this)},n.prototype.arrange=function(t){var e=this.$$arrange,r=e.output,i=e.def.run(this.assets,e.state,r,this.tree,t);return r.newUpDirty&&n.$$addUpDirty(this),r.newDownDirty&&n.$$addDownDirty(this),r.newUiFlags&&n.$$propagateUiFlagsUp(this,r.newUiFlags),i},n.prototype.sizing=function(e,n){var r=this.$$sizing,i=this.assets;i.lastRenderSize&&t.Size.copyTo(i.lastRenderSize,e);var a=r.def.run(i,r.state,r.output,this.tree);return t.Size.copyTo(r.output.actualSize,n),this.$$sizeupdater.setActualWidth(n.width),this.$$sizeupdater.setActualHeight(n.height),i.lastRenderSize=void 0,a},n.prototype.processDown=function(){if(this.tree.surface||(this.$$inDownDirty=!1),!this.$$inDownDirty)return!0;var t=this.tree.visualParent;if(t&&t.$$inDownDirty)return!1;var e=this.$$processdown,r=e.def.run(this.assets,e.state,e.output,t?t.assets:null,this.tree);return this.$$inDownDirty=!1,e.output.newUpDirty&&n.$$addUpDirty(this),r},n.prototype.processUp=function(){if(this.tree.surface||(this.$$inUpDirty=!1),!this.$$inUpDirty)return!0;var t=this.$$processup,e=t.def.run(this.assets,t.state,t.output,this.tree);return this.$$inUpDirty=!1,e},n.prototype.render=function(t,e){var n=this.$$render;return n.def.run(this.assets,n.state,n.output,t,e,this.tree)},n.prototype.preRender=function(){},n.prototype.hitTest=function(t,e,n,r){var i=this.$$hittest;return i.def.run(i.data,t,e,n,r===!0)},n.prototype.onSizeChanged=function(t,e){this.$$sizeupdater.onSizeChanged(t,e)},n.prototype.setSizeUpdater=function(e){this.$$sizeupdater=e||t.NO_SIZE_UPDATER},n.prototype.invalidateMeasure=function(){return this.assets.dirtyFlags|=t.DirtyFlags.Measure,n.$$propagateUiFlagsUp(this,t.UIFlags.MeasureHint),this},n.prototype.invalidateArrange=function(){return this.assets.dirtyFlags|=t.DirtyFlags.Arrange,n.$$propagateUiFlagsUp(this,t.UIFlags.ArrangeHint),this},n.prototype.updateBounds=function(e){var r=this.assets;return r.dirtyFlags|=t.DirtyFlags.Bounds,n.$$addUpDirty(this),e===!0&&(r.forceInvalidate=!0),this},n.prototype.fullInvalidate=function(e){var r=this.assets;return this.invalidate(r.surfaceBoundsWithChildren),e&&(r.dirtyFlags|=t.DirtyFlags.LocalTransform,n.$$addDownDirty(this)),this.updateBounds(!0),this},n.prototype.invalidate=function(e){var r=this.assets;return!r.totalIsRenderVisible||255*r.totalOpacity<.5?this:(r.dirtyFlags|=t.DirtyFlags.Invalidate,n.$$addUpDirty(this),e||(e=r.surfaceBoundsWithChildren),t.Rect.union(r.dirtyRegion,e),this)},n.prototype.findChildInList=function(t){for(var e=0,n=t.length;n>e;e++)if(t[e].tree.visualParent===this)return e;return-1},n.$$addUpDirty=function(t){var e=t.tree.surface;e&&!t.$$inUpDirty&&(e.addUpDirty(t),t.$$inUpDirty=!0)},n.$$addDownDirty=function(t){var e=t.tree.surface;e&&!t.$$inDownDirty&&(e.addDownDirty(t),t.$$inDownDirty=!0)},n.$$propagateUiFlagsUp=function(t,e){t.assets.uiFlags|=e;for(var n=t;null!=(n=n.tree.visualParent)&&0===(n.assets.uiFlags&e);)n.assets.uiFlags|=e},n.transformToVisual=function(e,n){if(!e.tree.surface||n&&!n.tree.surface)return null;var r=t.mat3.create(),i=e.assets.absoluteXform;if(n){var a=t.mat3.inverse(n.assets.absoluteXform,t.mat3.create());t.mat3.multiply(i,a,r)}else t.mat3.copyTo(i,r);return r},n.transformPoint=function(e,n){var r=t.mat3.inverse(e.assets.absoluteXform,t.mat3.create());if(!r)return void console.warn("Could not get inverse of Absolute Transform for UIElement.");var i=t.vec2.create(n.x,n.y);t.mat3.transformVec2(r,i),n.x=i[0],n.y=i[1]},n}();e.Updater=n}(e=t.core||(t.core={}))}(minerva||(minerva={}));var __extends=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},minerva;!function(t){var e;!function(e){var n=function(t){function n(){t.apply(this,arguments)}return __extends(n,t),n.prototype.init=function(){this.setMeasurePipe(new e.measure.AnonymousMeasurePipeDef(this)).setArrangePipe(new e.arrange.AnonymousArrangePipeDef(this)),t.prototype.init.call(this)},n.prototype.measureOverride=function(t){return t},n.prototype.arrangeOverride=function(t){return t},n}(t.core.Updater);e.AnonymousUpdater=n}(e=t.anon||(t.anon={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){function n(t,e){var n=Math.max(e.minWidth,t.width),r=Math.max(e.minHeight,t.height);isNaN(e.width)||(n=e.width),isNaN(e.height)||(r=e.height),n=Math.max(Math.min(n,e.maxWidth),e.minWidth),r=Math.max(Math.min(r,e.maxHeight),e.minHeight),e.useLayoutRounding&&(n=Math.round(n),r=Math.round(r)),t.width=n,t.height=r}function r(e,n,r,i,a,o){t.Rect.copyTo(n,e),t.Thickness.growRect(r,e),a&&t.Rect.intersection(e,a.GetBounds()),t.Rect.isEmpty(o)||t.Rect.intersection(e,o),i&&t.Rect.transform(e,i)}function i(e,n,r){var i;a.x=0,a.y=0;for(var o,s=e.raw;n&&(i=n.layoutClip,t.Rect.isEmpty(i)||(s.beginPath(),s.rect(i.x,i.y,i.width,i.height),s.clip()),!n.breakLayoutClip);){var c=n.visualOffset;if(a.x+=c.x,a.y+=c.y,e.translate(-c.x,-c.y),!r)break;o=r.visualParent,r=o?o.tree:null,n=o?o.assets:null}e.translate(a.x,a.y)}e.coerceSize=n,e.intersectBoundsWithClipPath=r;var a=new t.Point;e.renderLayoutClip=i}(n=e.helpers||(e.helpers={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(n){function r(n,r,i){n.assets.dirtyFlags|=t.DirtyFlags.HitTestVisibility,e.Updater.$$addDownDirty(n)}function i(t,e,n){t.invalidateMeasure(),t.invalidateArrange()}function a(n,r,i){n.assets.dirtyFlags|=t.DirtyFlags.RenderVisibility,e.Updater.$$addDownDirty(n),h.invalidateParent(n)}function o(n,r,i){n.assets.dirtyFlags|=t.DirtyFlags.RenderVisibility,e.Updater.$$addDownDirty(n),h.invalidateParent(n),n.invalidateMeasure();var a=n.tree.visualParent;a&&a.invalidateMeasure()}function s(n,r,i){h.invalidateParent(n);var a=i?i.GetPadding(n.assets.effectPadding):!1;a&&n.updateBounds(),r!==i&&n.tree.surface&&(n.assets.dirtyFlags|=t.DirtyFlags.LocalTransform,e.Updater.$$addDownDirty(n))}function c(n,r,i){var a=n.assets;h.invalidateParent(n),n.updateBounds(!0),a.dirtyFlags|=t.DirtyFlags.LocalClip,e.Updater.$$addDownDirty(n)}function u(n,r,i){n.assets.dirtyFlags|=t.DirtyFlags.LocalTransform,e.Updater.$$addDownDirty(n)}function l(n,r,i){n.assets.dirtyFlags|=t.DirtyFlags.LocalTransform,e.Updater.$$addDownDirty(n)}var h;!function(t){function e(t){t.tree.visualOwner.invalidate(t.assets.surfaceBoundsWithChildren)}function n(t){var e=t.tree.visualParent;e&&e.invalidateMeasure();var n=t.assets.renderTransformOrigin;t.fullInvalidate(0!==n.x||0!==n.y).invalidateMeasure().invalidateArrange()}function r(t){t.invalidateArrange(),t.fullInvalidate(!0)}t.invalidateParent=e,t.sizeChanged=n,t.alignmentChanged=r}(h=n.helpers||(n.helpers={})),n.isHitTestVisible=r,n.useLayoutRounding=i,n.opacity=a,n.visibility=o,n.effect=s,n.clip=c,n.renderTransform=u,n.renderTransformOrigin=l,n.width=h.sizeChanged,n.height=h.sizeChanged,n.minWidth=h.sizeChanged,n.minHeight=h.sizeChanged,n.maxWidth=h.sizeChanged,n.maxHeight=h.sizeChanged,n.margin=h.sizeChanged,n.flowDirection=h.sizeChanged,n.horizontalAlignment=h.alignmentChanged,n.verticalAlignment=h.alignmentChanged}(n=e.reactTo||(e.reactTo={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e={updateBounds:function(){},invalidate:function(t){}},n=function(){function t(){this.isTop=!1,this.surface=null,this.visualParent=null,this.isContainer=!1,this.isLayoutContainer=!1,this.subtree=null}return Object.defineProperty(t.prototype,"visualOwner",{get:function(){return this.visualParent?this.visualParent:this.isTop&&this.surface?this.surface:e},enumerable:!0,configurable:!0}),t.prototype.walk=function(t){var e=!1,n=this;return{current:void 0,step:function(){return e?!1:(e=!0,this.current=n.subtree,null!=this.current)}}},t.prototype.onChildAttached=function(t){this.subtree=t},t.prototype.onChildDetached=function(t){this.subtree=null},t.prototype.setTemplateApplier=function(t){this.applyTemplate=t},t.prototype.applyTemplate=function(){return!1},t}();t.UpdaterTree=n}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){function n(e,n,r){for(var i=!1,a=0,o=e.length;o>a;a++)if(r.updater=e[a],0!==(r.updater.assets.uiFlags&t.UIFlags.Hints))for(r.tree=r.updater.tree,r.assets=r.updater.assets;r.count<r.maxCount&&n.run(r);)i=!0,r.count++;return i}e.draft=n}(e=t.engine||(t.engine={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){function e(t,e){var i=t.length>0||e.length>0;return n(t),r(e),i}function n(t){for(var e;null!=(e=t[0]);)e.processDown()?t.shift():t.push(t.shift());t.length>0&&console.warn("[MINERVA] Finished DownDirty pass, not empty.")}function r(t){for(var e;null!=(e=t[0]);){var n=e.findChildInList(t);n>-1?t.splice(n+1,0,t.shift()):e.processUp()&&t.shift()}t.length>0&&console.warn("[MINERVA] Finished UpDirty pass, not empty.")}t.process=e}(e=t.engine||(t.engine={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n=null,r=null,i=function(){function i(){this.$$layout=new t.core.draft.DraftPipeDef,this.$$canvas=null,this.$$ctx=null,this.$$layers=[],this.$$prerenderhooks=[],this.$$downDirty=[],this.$$upDirty=[],this.$$dirtyRegion=null,this.$$width=0,this.$$height=0}return Object.defineProperty(i.prototype,"width",{get:function(){return this.$$width},enumerable:!0,configurable:!0}),Object.defineProperty(i.prototype,"height",{get:function(){return this.$$height},enumerable:!0,configurable:!0}),i.prototype.init=function(e){this.$$canvas=e,this.$$ctx=new t.core.render.RenderContext(e.getContext("2d",{alpha:!1}))},i.prototype.attachLayer=function(t,e){e===!0?this.$$layers.unshift(t):this.$$layers.push(t),t.tree.isTop=!0,t.invalidateMeasure(),t.fullInvalidate(),t.setSurface(this)},i.prototype.detachLayer=function(t){t.tree.isTop=!1,t.setSurface(null);var e=this.$$layers.indexOf(t);e>-1&&this.$$layers.splice(e,1),this.invalidate(t.assets.surfaceBoundsWithChildren)},i.prototype.walkLayers=function(t){var e=this.$$layers,n=-1;return t===!0?(n=e.length,{current:void 0,step:function(){return n--,this.current=e[n],void 0!==this.current}}):{current:void 0,step:function(){return n++,this.current=e[n],void 0!==this.current}}},i.prototype.updateBounds=function(){},i.prototype.invalidate=function(e){e=e||new t.Rect(0,0,this.width,this.height),this.$$dirtyRegion?t.Rect.union(this.$$dirtyRegion,e):this.$$dirtyRegion=new t.Rect(e.x,e.y,e.width,e.height)},i.prototype.render=function(){for(var e=0,n=this.$$prerenderhooks;e<n.length;e++)n[e].preRender();
var r=this.$$dirtyRegion;if(r&&!t.Rect.isEmpty(r)){this.$$dirtyRegion=null,t.Rect.roundOut(r);var i=this.$$ctx;i.size.commitResize(),i.save(),i.applyDpiRatio(),i.raw.fillStyle="#ffffff",i.raw.fillRect(r.x,r.y,r.width,r.height),i.clipRect(r);for(var a=this.$$layers,e=0,o=a.length;o>e;e++)a[e].render(i,r);i.restore()}},i.prototype.hookPrerender=function(t){this.$$prerenderhooks.push(t)},i.prototype.unhookPrerender=function(t){var e=this.$$prerenderhooks.indexOf(t);e>-1&&this.$$prerenderhooks.splice(e,1)},i.prototype.addUpDirty=function(t){this.$$upDirty.push(t)},i.prototype.addDownDirty=function(t){this.$$downDirty.push(t)},i.prototype.updateLayout=function(){for(var n={count:0,maxCount:250,updater:null,assets:null,tree:null,flag:t.UIFlags.None,measureList:[],arrangeList:[],sizingList:[],surfaceSize:new t.Size(this.width,this.height),sizingUpdates:[]},r=!1,i=!0;n.count<n.maxCount&&i;)i=e.draft(this.$$layers,this.$$layout,n),r=e.process(this.$$downDirty,this.$$upDirty)||i||r;return n.count>=n.maxCount&&console.error("[MINERVA] Aborting infinite update loop"),r},i.prototype.resize=function(e,n){if(this.$$width!==e||this.$$height!==n){var r=new t.Rect(0,0,this.$$width,this.$$height);t.Rect.union(r,new t.Rect(0,0,e,n)),t.Rect.roundOut(r),this.$$width=e,this.$$height=n,this.$$ctx.size.queueResize(e,n),this.invalidate(r);for(var i=this.$$layers,a=0;a<i.length;a++)i[a].invalidateMeasure()}},i.prototype.hitTest=function(e){if(this.$$layers.length<1)return null;r=r||new t.core.render.RenderContext(document.createElement("canvas").getContext("2d")),r.size.queueResize(this.width,this.height).commitResize();for(var n=[],i=this.$$layers,a=i.length-1;a>=0&&0===n.length;a--)i[a].hitTest(e,n,r,!1);return n},i.prototype.updateDpiRatio=function(){this.$$ctx.size.updateDpiRatio()&&this.invalidate()},i.measureWidth=function(t,e){return n=n||document.createElement("canvas").getContext("2d"),n.font=e.toHtml5Object(),n.measureText(t).width},i}();e.Surface=i}(e=t.engine||(t.engine={}))}(minerva||(minerva={}));var minerva;!function(t){function e(t,e){var n=t[0];if(Math.abs(n)<i)return null;var r=t[3];if(Math.abs(r)<i)return null;e?(e[1]=t[1],e[2]=t[2]):e=t;var a=-t[4],o=-t[5];return Math.abs(n-1)>i&&(n=1/n,a*=n),Math.abs(r-1)>i&&(r=1/r,o*=r),e[0]=n,e[3]=r,e[4]=a,e[5]=o,e}function n(t,e){e||(e=t);var n=t[0],r=t[1],i=t[2],a=t[3],o=n*a-r*i;if(0===o||!isFinite(o))return null;var s=1/o,c=t[4],u=t[5];return e[0]=a*s,e[1]=-r*s,e[2]=-i*s,e[3]=n*s,e[4]=(i*u-a*c)*s,e[5]=(r*c-n*u)*s,e}var r,i=1e-6;r="undefined"!=typeof Float32Array?function(t){return new Float32Array(t)}:function(t){return new Array(t)},t.mat3={create:function(t){var e=r(6);return t?(e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5]):e[0]=e[1]=e[2]=e[3]=e[4]=e[5]=0,e},copyTo:function(t,e){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e},init:function(t,e,n,r,i,a,o){return t[0]=e,t[1]=n,t[2]=r,t[3]=i,t[4]=a,t[5]=o,t},identity:function(e){return e||(e=t.mat3.create()),e[0]=1,e[1]=0,e[2]=0,e[3]=1,e[4]=0,e[5]=0,e},equal:function(t,e){return t===e||Math.abs(t[0]-e[0])<i&&Math.abs(t[1]-e[1])<i&&Math.abs(t[2]-e[2])<i&&Math.abs(t[3]-e[3])<i&&Math.abs(t[4]-e[4])<i&&Math.abs(t[5]-e[5])<i},multiply:function(t,e,n){n||(n=t);var r=t[0],i=t[1],a=t[2],o=t[3],s=t[4],c=t[5],u=e[0],l=e[1],h=e[2],p=e[3],f=e[4],d=e[5];return n[0]=r*u+i*h,n[1]=r*l+i*p,n[2]=a*u+o*h,n[3]=a*l+o*p,n[4]=s*u+c*h+f,n[5]=s*l+c*p+d,n},inverse:function(t,r){return Math.abs(t[1])<i&&Math.abs(t[2])<i?e(t,r):n(t,r)},transformVec2:function(t,e,n){n||(n=e);var r=e[0],i=e[1];return n[0]=t[0]*r+t[2]*i+t[4],n[1]=t[1]*r+t[3]*i+t[5],n},createTranslate:function(e,n,r){return r||(r=t.mat3.create()),r[0]=1,r[1]=0,r[2]=0,r[3]=1,r[4]=e,r[5]=n,r},translate:function(t,e,n){return t[4]+=e,t[5]+=n,t},createScale:function(e,n,r){return r||(r=t.mat3.create()),r[0]=e,r[1]=0,r[2]=0,r[3]=n,r[4]=0,r[5]=0,r},scale:function(t,e,n){return t[0]*=e,t[2]*=e,t[4]*=e,t[1]*=n,t[3]*=n,t[5]*=n,t},createRotate:function(e,n){n||(n=t.mat3.create());var r=Math.cos(e),i=Math.sin(e);return n[0]=r,n[1]=i,n[2]=-i,n[3]=r,n[4]=0,n[5]=0,n},createSkew:function(e,n,r){return r||(r=t.mat3.create()),r[0]=1,r[1]=Math.tan(n),r[2]=Math.tan(e),r[3]=1,r[4]=0,r[5]=0,r},preapply:function(e,n){return t.mat3.multiply(n,e,e)},apply:function(e,n){return t.mat3.multiply(e,n,e)}}}(minerva||(minerva={}));var mat3=minerva.mat3,minerva;!function(t){var e;!function(t){t[t.M11=0]="M11",t[t.M12=1]="M12",t[t.M13=2]="M13",t[t.M14=3]="M14",t[t.M21=4]="M21",t[t.M22=5]="M22",t[t.M23=6]="M23",t[t.M24=7]="M24",t[t.M31=8]="M31",t[t.M32=9]="M32",t[t.M33=10]="M33",t[t.M34=11]="M34",t[t.OffsetX=12]="OffsetX",t[t.OffsetY=13]="OffsetY",t[t.OffsetZ=14]="OffsetZ",t[t.M44=15]="M44"}(e||(e={}));var n,r=1e-6;n="undefined"!=typeof Float32Array?function(t){return new Float32Array(t)}:function(t){return new Array(t)},t.mat4={create:function(t){var r=n(16);return t&&(r[e.M11]=t[e.M11],r[e.M12]=t[e.M12],r[e.M13]=t[e.M13],r[e.M14]=t[e.M14],r[e.M21]=t[e.M21],r[e.M22]=t[e.M22],r[e.M23]=t[e.M23],r[e.M24]=t[e.M24],r[e.M31]=t[e.M31],r[e.M32]=t[e.M32],r[e.M33]=t[e.M33],r[e.M34]=t[e.M34],r[e.OffsetX]=t[e.OffsetX],r[e.OffsetY]=t[e.OffsetY],r[e.OffsetZ]=t[e.OffsetZ],r[e.M44]=t[e.M44]),r},copyTo:function(t,n){return n[e.M11]=t[e.M11],n[e.M12]=t[e.M12],n[e.M13]=t[e.M13],n[e.M14]=t[e.M14],n[e.M21]=t[e.M21],n[e.M22]=t[e.M22],n[e.M23]=t[e.M23],n[e.M24]=t[e.M24],n[e.M31]=t[e.M31],n[e.M32]=t[e.M32],n[e.M33]=t[e.M33],n[e.M34]=t[e.M34],n[e.OffsetX]=t[e.OffsetX],n[e.OffsetY]=t[e.OffsetY],n[e.OffsetZ]=t[e.OffsetZ],n[e.M44]=t[e.M44],n},identity:function(n){return n||(n=t.mat4.create()),n[e.M11]=1,n[e.M12]=0,n[e.M13]=0,n[e.M14]=0,n[e.M21]=0,n[e.M22]=1,n[e.M23]=0,n[e.M24]=0,n[e.M31]=0,n[e.M32]=0,n[e.M33]=1,n[e.M34]=0,n[e.OffsetX]=0,n[e.OffsetY]=0,n[e.OffsetZ]=0,n[e.M44]=1,n},equal:function(t,n){return t===n||Math.abs(t[e.M11]-n[e.M11])<r&&Math.abs(t[e.M12]-n[e.M12])<r&&Math.abs(t[e.M13]-n[e.M13])<r&&Math.abs(t[e.M14]-n[e.M14])<r&&Math.abs(t[e.M21]-n[e.M21])<r&&Math.abs(t[e.M22]-n[e.M22])<r&&Math.abs(t[e.M23]-n[e.M23])<r&&Math.abs(t[e.M24]-n[e.M24])<r&&Math.abs(t[e.M31]-n[e.M31])<r&&Math.abs(t[e.M32]-n[e.M32])<r&&Math.abs(t[e.M33]-n[e.M33])<r&&Math.abs(t[e.M34]-n[e.M34])<r&&Math.abs(t[e.OffsetX]-n[e.OffsetX])<r&&Math.abs(t[e.OffsetY]-n[e.OffsetY])<r&&Math.abs(t[e.OffsetZ]-n[e.OffsetZ])<r&&Math.abs(t[e.M44]-n[e.M44])<r},multiply:function(t,n,r){r||(r=t);var i=t[e.M11],a=t[e.M12],o=t[e.M13],s=t[e.M14],c=t[e.M21],u=t[e.M22],l=t[e.M23],h=t[e.M24],p=t[e.M31],f=t[e.M32],d=t[e.M33],v=t[e.M34],m=t[e.OffsetX],g=t[e.OffsetY],y=t[e.OffsetZ],x=t[e.M44],w=n[e.M11],T=n[e.M12],S=n[e.M13],M=n[e.M14],b=n[e.M21],P=n[e.M22],R=n[e.M23],D=n[e.M24],z=n[e.M31],$=n[e.M32],C=n[e.M33],F=n[e.M34],O=n[e.OffsetX],I=n[e.OffsetY],k=n[e.OffsetZ],A=n[e.M44];return r[e.M11]=i*w+a*b+o*z+s*O,r[e.M12]=i*T+a*P+o*$+s*I,r[e.M13]=i*S+a*R+o*C+s*k,r[e.M14]=i*M+a*D+o*F+s*A,r[e.M21]=c*w+u*b+l*z+h*O,r[e.M22]=c*T+u*P+l*$+h*I,r[e.M23]=c*S+u*R+l*C+h*k,r[e.M24]=c*M+u*D+l*F+h*A,r[e.M31]=p*w+f*b+d*z+v*O,r[e.M32]=p*T+f*P+d*$+v*I,r[e.M33]=p*S+f*R+d*C+v*k,r[e.M34]=p*M+f*D+d*F+v*A,r[e.OffsetX]=m*w+g*b+y*z+x*O,r[e.OffsetY]=m*T+g*P+y*$+x*I,r[e.OffsetZ]=m*S+g*R+y*C+x*k,r[e.M44]=m*M+g*D+y*F+x*A,r},inverse:function(t,n){n||(n=t);var r=t[e.M11],i=t[e.M12],a=t[e.M13],o=t[e.M14],s=t[e.M21],c=t[e.M22],u=t[e.M23],l=t[e.M24],h=t[e.M31],p=t[e.M32],f=t[e.M33],d=t[e.M34],v=t[e.OffsetX],m=t[e.OffsetY],g=t[e.OffsetZ],y=t[e.M44],x=r*c-i*s,w=r*u-a*s,T=r*l-o*s,S=i*u-a*c,M=i*l-o*c,b=a*l-o*u,P=h*m-p*v,R=h*g-f*v,D=h*y-d*v,z=p*g-f*m,$=p*y-d*m,C=f*y-d*g,F=x*C-w*$+T*z+S*D-M*R+b*P;if(!isFinite(F)||!F)return null;var O=1/F;return n[e.M11]=(c*C-u*$+l*z)*O,n[e.M12]=(-i*C+a*$-o*z)*O,n[e.M13]=(m*b-g*M+y*S)*O,n[e.M14]=(-p*b+f*M-d*S)*O,n[e.M21]=(-s*C+u*D-l*R)*O,n[e.M22]=(r*C-a*D+o*R)*O,n[e.M23]=(-v*b+g*T-y*w)*O,n[e.M24]=(h*b-f*T+d*w)*O,n[e.M31]=(s*$-c*D+l*P)*O,n[e.M32]=(-r*$+i*D-o*P)*O,n[e.M33]=(v*M-m*T+y*x)*O,n[e.M34]=(-h*M+p*T-d*x)*O,n[e.OffsetX]=(-s*z+c*R-u*P)*O,n[e.OffsetY]=(r*z-i*R+a*P)*O,n[e.OffsetZ]=(-v*S+m*w-g*x)*O,n[e.M44]=(h*S-p*w+f*x)*O,n},transpose:function(t,n){n||(n=t);var r=t[e.M11],i=t[e.M12],a=t[e.M13],o=t[e.M14],s=t[e.M21],c=t[e.M22],u=t[e.M23],l=t[e.M24],h=t[e.M31],p=t[e.M32],f=t[e.M33],d=t[e.M34],v=t[e.OffsetX],m=t[e.OffsetY],g=t[e.OffsetZ],y=t[e.M44];return n[e.M11]=r,n[e.M21]=i,n[e.M31]=a,n[e.OffsetX]=o,n[e.M12]=s,n[e.M22]=c,n[e.M32]=u,n[e.OffsetY]=l,n[e.M13]=h,n[e.M23]=p,n[e.M33]=f,n[e.OffsetZ]=d,n[e.M14]=v,n[e.M24]=m,n[e.M34]=g,n[e.M44]=y,n},transformVec4:function(t,n,r){r||(r=n);var i=n[0],a=n[1],o=n[2],s=n[3],c=t[e.M11],u=t[e.M12],l=t[e.M13],h=t[e.M14],p=t[e.M21],f=t[e.M22],d=t[e.M23],v=t[e.M24],m=t[e.M31],g=t[e.M32],y=t[e.M33],x=t[e.M34],w=t[e.OffsetX],T=t[e.OffsetY],S=t[e.OffsetZ],M=t[e.M44];return r[0]=c*i+u*a+l*o+h*s,r[1]=p*i+f*a+d*o+v*s,r[2]=m*i+g*a+y*o+x*s,r[3]=w*i+T*a+S*o+M*s,r},createTranslate:function(n,r,i,a){return a||(a=t.mat4.create()),a[e.M11]=1,a[e.M12]=0,a[e.M13]=0,a[e.M14]=0,a[e.M21]=0,a[e.M22]=1,a[e.M23]=0,a[e.M24]=0,a[e.M31]=0,a[e.M32]=0,a[e.M33]=1,a[e.M34]=0,a[e.OffsetX]=n,a[e.OffsetY]=r,a[e.OffsetZ]=i,a[e.M44]=1,a},createScale:function(n,r,i,a){return a||(a=t.mat4.create()),a[e.M11]=n,a[e.M12]=0,a[e.M13]=0,a[e.M14]=0,a[e.M11]=0,a[e.M12]=r,a[e.M13]=0,a[e.M14]=0,a[e.M31]=0,a[e.M32]=0,a[e.M33]=i,a[e.M34]=0,a[e.OffsetX]=0,a[e.OffsetY]=0,a[e.OffsetZ]=0,a[e.M44]=1,a},createRotateX:function(n,r){r||(r=t.mat4.create());var i=Math.sin(n),a=Math.cos(n);return r[e.M11]=1,r[e.M12]=0,r[e.M13]=0,r[e.M14]=0,r[e.M21]=0,r[e.M22]=a,r[e.M23]=i,r[e.M24]=0,r[e.M31]=0,r[e.M32]=-i,r[e.M33]=a,r[e.M34]=0,r[e.OffsetX]=0,r[e.OffsetY]=0,r[e.OffsetZ]=0,r[e.M44]=1,r},createRotateY:function(n,r){r||(r=t.mat4.create());var i=Math.sin(n),a=Math.cos(n);return r[e.M11]=a,r[e.M12]=0,r[e.M13]=-i,r[e.M14]=0,r[e.M21]=0,r[e.M22]=1,r[e.M23]=0,r[e.M24]=0,r[e.M31]=i,r[e.M32]=0,r[e.M33]=a,r[e.M34]=0,r[e.OffsetX]=0,r[e.OffsetY]=0,r[e.OffsetZ]=0,r[e.M44]=1,r},createRotateZ:function(n,r){r||(r=t.mat4.create());var i=Math.sin(n),a=Math.cos(n);return r[e.M11]=a,r[e.M12]=i,r[e.M13]=0,r[e.M14]=0,r[e.M21]=-i,r[e.M22]=a,r[e.M23]=0,r[e.M24]=0,r[e.M31]=0,r[e.M32]=0,r[e.M33]=1,r[e.M34]=0,r[e.OffsetX]=0,r[e.OffsetY]=0,r[e.OffsetZ]=0,r[e.M44]=1,r},createPerspective:function(n,r,i,a,o){o||(o=t.mat4.create());var s=1/Math.tan(n/2),c=s/r,u=i-a;return o[e.M11]=c,o[e.M12]=0,o[e.M13]=0,o[e.M14]=0,o[e.M21]=0,o[e.M22]=s,o[e.M23]=0,o[e.M24]=0,o[e.M31]=0,o[e.M32]=0,o[e.M33]=a/u,o[e.M34]=-1,o[e.OffsetX]=0,o[e.OffsetY]=0,o[e.OffsetZ]=i*a/u,o[e.M44]=0,o},createViewport:function(n,r,i){return i||(i=t.mat4.create()),i[e.M11]=n/2,i[e.M12]=0,i[e.M13]=0,i[e.M14]=0,i[e.M21]=0,i[e.M22]=-r/2,i[e.M23]=0,i[e.M24]=0,i[e.M31]=0,i[e.M32]=0,i[e.M33]=1,i[e.M34]=0,i[e.OffsetX]=n/2,i[e.OffsetY]=r/2,i[e.OffsetZ]=0,i[e.M44]=1,i}}}(minerva||(minerva={}));var mat4=minerva.mat4,minerva;!function(t){t.Rect.transform4=function(t,e){console.warn("[Rect.transform4] Not implemented")}}(minerva||(minerva={}));var minerva;!function(t){var e;e="undefined"!=typeof Float32Array?function(t){return new Float32Array(t)}:function(t){return new Array(t)},t.vec4={create:function(t,n,r,i){var a=e(4);return a[0]=t,a[1]=n,a[2]=r,a[3]=i,a},init:function(t,n,r,i,a){return a||(a=e(4)),a[0]=t,a[1]=n,a[2]=r,a[3]=i,a}}}(minerva||(minerva={}));var vec4=minerva.vec4,minerva;!function(t){var e;!function(e){function n(e,n,r){var i,a=r.strokeThickness/2,o=r.strokeStartLineCap||r.strokeEndLineCap||0;switch(o){case t.PenLineCap.Round:e.l=Math.min(e.l,n.sx-a),e.r=Math.max(e.r,n.sx+a),e.t=Math.min(e.t,n.sy-a),e.b=Math.max(e.b,n.sy+a);break;case t.PenLineCap.Square:if(!(i=n.getStartVector()))return;if(!i[0]||!i[1])return;var s=t.Vector.reverse(t.Vector.normalize(i.slice(0))),c=t.Vector.orthogonal(s.slice(0)),u=n.sx+a*(s[0]+c[0]),l=n.sx+a*(s[0]-c[0]),h=n.sy+a*(s[1]+c[1]),p=n.sy+a*(s[1]-c[1]);e.l=Math.min(e.l,u,l),e.r=Math.max(e.r,u,l),e.t=Math.min(e.t,h,p),e.b=Math.max(e.b,h,p);break;case t.PenLineCap.Flat:default:if(!(i=n.getStartVector()))return;if(!i[0]||!i[1])return;var c=t.Vector.orthogonal(t.Vector.normalize(i.slice(0))),u=n.sx+a*c[0],l=n.sx+a*-c[0],h=n.sy+a*c[1],p=n.sy+a*-c[1];e.l=Math.min(e.l,u,l),e.r=Math.max(e.r,u,l),e.t=Math.min(e.t,h,p),e.b=Math.max(e.b,h,p)}}function r(e,n,r){var i,a=n.ex,o=n.ey,s=r.strokeThickness/2,c=r.strokeStartLineCap||r.strokeEndLineCap||0;switch(c){case t.PenLineCap.Round:e.l=Math.min(e.l,a-s),e.r=Math.max(e.r,a+s),e.t=Math.min(e.t,o-s),e.b=Math.max(e.b,o+s);break;case t.PenLineCap.Square:if(!(i=n.getEndVector()))return;if(!i[0]||!i[1])return;var u=t.Vector.normalize(i.slice(0)),l=t.Vector.orthogonal(u.slice(0)),h=a+s*(u[0]+l[0]),p=a+s*(u[0]-l[0]),f=o+s*(u[1]+l[1]),d=o+s*(u[1]-l[1]);e.l=Math.min(e.l,h,p),e.r=Math.max(e.r,h,p),e.t=Math.min(e.t,f,d),e.b=Math.max(e.b,f,d);break;case t.PenLineCap.Flat:default:if(!(i=n.getEndVector()))return;if(!i[0]||!i[1])return;var l=t.Vector.orthogonal(t.Vector.normalize(i.slice(0))),h=a+s*l[0],p=a+s*-l[0],f=o+s*l[1],d=o+s*-l[1];e.l=Math.min(e.l,h,p),e.r=Math.max(e.r,h,p),e.t=Math.min(e.t,f,d),e.b=Math.max(e.b,f,d)}}function i(e,n,r,i){var a=i.strokeThickness/2;i.strokeLineJoin===t.PenLineJoin.Round&&(e.l=Math.min(e.l,r.sx-a),e.r=Math.max(e.r,r.sx+a),e.t=Math.min(e.t,r.sy-a),e.b=Math.max(e.b,r.sy+a));var c=i.strokeLineJoin===t.PenLineJoin.Miter?o(n,r,a,i.strokeMiterLimit):s(n,r,a);if(c){var u=c[0].x,l=c[1].x,h=c[0].y,p=c[1].y;e.l=Math.min(e.l,u,l),e.r=Math.max(e.r,u,l),e.t=Math.min(e.t,h,p),e.b=Math.max(e.b,h,p)}}function a(t,e,a){function o(e,r){e.sx=u,e.sy=l,e.isSingle||(!e.isMove&&f&&(h=e.sx,p=e.sy,n(t,e,a)),!f&&r>0&&i(t,c,e,a)),e.extendStrokeBox(t,a),u=e.ex||0,l=e.ey||0,f=!!e.isMove,c=e}for(var s=e.length,c=null,u=null,l=null,h=null,p=null,f=!1,d=0;s>d;d++)o(e[d],d);var v=e[s-1];v&&!v.isSingle&&r(t,v,a)}function o(e,n,r,i){var a=n.sx,o=n.sy,c=e.getEndVector(),u=n.getStartVector();if(!c||!u)return null;t.Vector.reverse(c);var l=t.Vector.angleBetween(c,u)/2;if(isNaN(l))return null;var h=1/Math.sin(l);if(h>i)return s(e,n,r);var p=t.Vector.isClockwiseTo(c,u)?c.slice(0):u.slice(0);t.Vector.normalize(t.Vector.reverse(t.Vector.rotate(p,l)));var f=r*h,d={x:a+f*p[0],y:o+f*p[1]};return[d,d]}function s(e,n,r){var i=n.sx,a=n.sy,o=e.getEndVector(),s=n.getStartVector();if(o&&s){t.Vector.normalize(t.Vector.reverse(o)),t.Vector.normalize(s);var c,u;return t.Vector.isClockwiseTo(o,s)?(c=t.Vector.orthogonal(o.slice(0)),u=t.Vector.reverse(t.Vector.orthogonal(s.slice(0)))):(c=t.Vector.reverse(t.Vector.orthogonal(o.slice(0))),u=t.Vector.orthogonal(s.slice(0))),[{x:i-r*c[0],y:a-r*c[1]},{x:i-r*u[0],y:a-r*u[1]}]}}var c=function(){function n(){this.$$entries=[],this.$$endX=0,this.$$endY=0}return Object.defineProperty(n.prototype,"endX",{get:function(){return this.$$endX},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"endY",{get:function(){return this.$$endY},enumerable:!0,configurable:!0}),n.prototype.reset=function(){this.$$entries.length=0,this.$$endX=0,this.$$endY=0},n.prototype.move=function(t,n){this.$$entries.push(e.segments.move(t,n)),this.$$endX=t,this.$$endY=n},n.prototype.line=function(t,n){this.$$entries.push(e.segments.line(t,n)),this.$$endX=t,this.$$endY=n},n.prototype.quadraticBezier=function(t,n,r,i){this.$$entries.push(e.segments.quadraticBezier(t,n,r,i)),this.$$endX=r,this.$$endY=i},n.prototype.cubicBezier=function(t,n,r,i,a,o){this.$$entries.push(e.segments.cubicBezier(t,n,r,i,a,o)),this.$$endX=a,this.$$endY=o},n.prototype.ellipse=function(t,n,r,i){this.$$entries.push(e.segments.ellipse(t,n,r,i)),this.$$endX=t,this.$$endY=n},n.prototype.ellipticalArc=function(t,n,r,i,a,o,s){this.$$entries.push(e.segments.ellipticalArc(t,n,r,i,a,o,s)),this.$$endX=o,this.$$endY=s},n.prototype.arc=function(t,n,r,i,a,o){this.$$entries.push(e.segments.arc(t,n,r,i,a,o))},n.prototype.arcTo=function(t,n,r,i,a){var o=e.segments.arcTo(t,n,r,i,a);this.$$entries.push(o),this.$$endX=o.ex,this.$$endY=o.ey},n.prototype.rect=function(t,n,r,i){this.$$entries.push(e.segments.rect(t,n,r,i))},n.prototype.roundedRect=function(t,n,r,i,a,o){this.$$entries.push(e.segments.roundedRect(t,n,r,i,a,o)),this.$$endX=t,this.$$endY=n},n.prototype.close=function(){this.$$entries.push(e.segments.close())},n.prototype.draw=function(t){t.beginPath();for(var e=this.$$entries,n=e.length,r=0;n>r;r++)e[r].draw(t)},n.prototype.calcBounds=function(e){if(this.$$entries.length<=0)return new t.Rect;var n=e&&e.strokeThickness>1?this.$$calcStrokeBox(e):this.$$calcFillBox();return new t.Rect(n.l,n.t,Math.max(0,n.r-n.l),Math.max(0,n.b-n.t))},n.prototype.$$calcFillBox=function(){for(var t,e=this.$$entries,n=e.length,r={l:Number.POSITIVE_INFINITY,r:Number.NEGATIVE_INFINITY,t:Number.POSITIVE_INFINITY,b:Number.NEGATIVE_INFINITY},i=null,a=null,o=0;n>o;o++)t=e[o],t.sx=i,t.sy=a,t.extendFillBox(r),i=t.ex||0,a=t.ey||0;return r},n.prototype.$$calcStrokeBox=function(t){var e={l:Number.POSITIVE_INFINITY,r:Number.NEGATIVE_INFINITY,t:Number.POSITIVE_INFINITY,b:Number.NEGATIVE_INFINITY};return a(e,this.$$entries,t),e},n.Merge=function(t,e){t.$$entries.push.apply(t.$$entries,e.$$entries),t.$$endX+=e.$$endX,t.$$endY+=e.$$endY},n.prototype.Serialize=function(){for(var t=this.$$entries,e=t.length,n="",r=0;e>r;r++)r>0&&(n+=" "),n+=t[r].toString();return n},n}();e.Path=c,e.findMiterTips=o,e.findBevelTips=s}(e=t.path||(t.path={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){function e(t){return{def:t,state:t.createState(),output:t.createOutput()}}var n=function(){function t(){}return t}();t.ITriPipe=n,t.createTriPipe=e}(e=t.pipe||(t.pipe={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e=function(){function t(){this.$$names=[],this.$$tapins=[]}return t.prototype.addTapin=function(t,e){return this.$$names.push(t),this.$$tapins.push(e),this},t.prototype.addTapinBefore=function(t,e,n){var r=this.$$names,i=this.$$tapins,a=t?r.indexOf(t):-1;return-1===a?(r.unshift(e),i.unshift(n)):(r.splice(a,0,e),i.splice(a,0,n)),this},t.prototype.addTapinAfter=function(t,e,n){var r=this.$$names,i=this.$$tapins,a=t?r.indexOf(t):-1;return-1===a||a===r.length-1?(r.push(e),i.push(n)):(r.splice(a+1,0,e),i.splice(a+1,0,n)),this},t.prototype.replaceTapin=function(t,e){var n=this.$$names,r=this.$$tapins,i=n.indexOf(t);if(-1===i)throw new Error("Could not replace pipe tap-in. No pipe tap-in named `"+t+"`.");return r[i]=e,this},t.prototype.removeTapin=function(t){var e=this.$$names,n=e.indexOf(t);if(-1===n)throw new Error("Could not replace pipe tap-in. No pipe tap-in named `"+t+"`.");return e.splice(n,1),this.$$tapins.splice(n,1),this},t.prototype.run=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];e.unshift(t),this.prepare.apply(this,e);for(var r=!0,i=0,a=this.$$tapins,o=a.length;o>i;i++)if(!a[i].apply(this,e)){r=!1;break}return this.flush.apply(this,e),r},t.prototype.prepare=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n]},t.prototype.flush=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n]},t}();t.PipeDef=e}(e=t.pipe||(t.pipe={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e=function(){function t(){this.$$names=[],this.$$tapins=[]}return t.prototype.addTapin=function(t,e){return this.$$names.push(t),this.$$tapins.push(e),this},t.prototype.addTapinBefore=function(t,e,n){var r=this.$$names,i=this.$$tapins,a=t?r.indexOf(t):-1;return-1===a?(r.unshift(e),i.unshift(n)):(r.splice(a,0,e),i.splice(a,0,n)),this},t.prototype.addTapinAfter=function(t,e,n){var r=this.$$names,i=this.$$tapins,a=t?r.indexOf(t):-1;return-1===a||a===r.length-1?(r.push(e),i.push(n)):(r.splice(a+1,0,e),i.splice(a+1,0,n)),this},t.prototype.replaceTapin=function(t,e){var n=this.$$names,r=this.$$tapins,i=n.indexOf(t);if(-1===i)throw new Error("Could not replace pipe tap-in. No pipe tap-in named `"+t+"`.");return r[i]=e,this},t.prototype.removeTapin=function(t){var e=this.$$names,n=e.indexOf(t);if(-1===n)throw new Error("Could not replace pipe tap-in. No pipe tap-in named `"+t+"`.");return e.splice(n,1),this.$$tapins.splice(n,1),this},t.prototype.run=function(t,e,n){for(var r=[],i=3;i<arguments.length;i++)r[i-3]=arguments[i];r.unshift(n),r.unshift(e),r.unshift(t),this.prepare.apply(this,r);for(var a=!0,o=0,s=this.$$tapins,c=s.length;c>o;o++)if(!s[o].apply(this,r)){a=!1;break}return this.flush.apply(this,r),a},t.prototype.createState=function(){return null},t.prototype.createOutput=function(){return null},t.prototype.prepare=function(t,e,n){for(var r=[],i=3;i<arguments.length;i++)r[i-3]=arguments[i]},t.prototype.flush=function(t,e,n){for(var r=[],i=3;i<arguments.length;i++)r[i-3]=arguments[i]},t}();t.TriPipeDef=e}(e=t.pipe||(t.pipe={}))}(minerva||(minerva={})),function(t){t.perfex||(t.perfex={}),t.perfex.timer||(t.perfex.timer={all:[],reset:function(){},start:function(t){},stop:function(){}}),t.perfex.phases||(t.perfex.phases={current:null,all:[],start:function(t){}})}(window);var minerva;!function(t){var e;!function(e){function n(t){return isFinite(t.availableWidth)?t.availableWidth:isFinite(t.maxWidth)?Math.min(t.actualWidth,t.maxWidth):t.actualWidth}var r=function(){function r(){}return r.prototype.createAssets=function(){return{availableWidth:Number.POSITIVE_INFINITY,actualWidth:NaN,actualHeight:NaN,maxWidth:Number.POSITIVE_INFINITY,maxHeight:Number.POSITIVE_INFINITY,lines:[],selCached:!1}},r.prototype.setMaxWidth=function(t,e,n){return e.maxWidth===n?!1:(e.maxWidth=n,e.actualWidth=NaN,e.actualHeight=NaN,!0)},r.prototype.layout=function(t,e,n,r){if(!isNaN(e.actualWidth))return!1;e.maxWidth=n.width,e.actualWidth=0,e.actualHeight=0,e.lines=[];for(var i=0;r.step();)i+=r.current.layout(t,e);return!0},r.prototype.render=function(t,n,r){var i=this;this.splitSelection(n,r),t.save(),r.lines.forEach(function(a){var o=i.getHorizontalAlignmentX(n,r,a.width);t.translate(o,0),a.runs.forEach(function(n){n.pre&&(e.layout.Cluster.render(n.pre,n.attrs,t),t.translate(n.pre.width,0)),n.sel&&(e.layout.Cluster.render(n.sel,n.attrs,t),t.translate(n.sel.width,0)),n.post&&(e.layout.Cluster.render(n.post,n.attrs,t),t.translate(n.post.width,0))}),t.translate(-a.width-o,a.height)}),t.restore()},r.prototype.getCursorFromPoint=function(t,e,n){var r=n.lines[0];if(!r)return 0;var i=0;if(t.y>0)for(var a=0,o=n.lines,s=0,c=o.length;c>s&&(r=o[s],!(t.y<=a+r.height));s++)i+=r.runs.reduce(function(t,e){return t+e.length},0),a+=r.height;var u=t.x-this.getHorizontalAlignmentX(e,n,r.width);if(0>u)return i;for(var l=0,s=0,h=r.runs,c=h.length;c>s;s++){var p=h[s];if(u<=l+p.width)break;i+=p.length,l+=p.width}var p=h[s];if(!p)return i;for(var f,d=Math.max(0,Math.min(p.text.length,Math.ceil((u-l)/p.width*p.text.length))),v=p.text.substr(0,d);d>0&&(f=this.measureTextWidth(v,p.attrs.font))>u;)d--,v=p.text.substr(0,d);for(var m=d;d<p.text.length&&(f=this.measureTextWidth(v,p.attrs.font))<u;)m=d,d++,v=p.text.substr(0,d);return i+m},r.prototype.getCaretFromCursor=function(e,n){for(var r=e.selectionStart,i=0,a=new t.Rect(0,0,1,0),o=0,s=n.lines,c=0,u=s.length;u>c;c++){var l=s[c];a.x=this.getHorizontalAlignmentX(e,n,l.width),a.height=l.height;for(var h=l.runs,p=0,f=h.length;f>p;p++){var d=h[p];if(i+d.length>r)return a.x+=this.measureTextWidth(d.text.substr(0,r-i),d.attrs.font),a;i+=d.length,a.x+=l.width}a.y+=l.height,o=l.height}return a.y-=o,a},r.prototype.splitSelection=function(t,n){var r=this;if(!n.selCached){var i=t.selectionStart;n.lines.forEach(function(n){return n.runs.forEach(function(n){e.layout.Run.splitSelection(n,i,i+t.selectionLength,function(t,e){return r.measureTextWidth(t,e.font)}),i-=n.length})}),n.selCached=!0}},r.prototype.getHorizontalAlignmentX=function(e,r,i){if(e.textAlignment===t.TextAlignment.Left||e.textAlignment===t.TextAlignment.Justify||e.textWrapping===t.TextWrapping.NoWrap&&e.textTrimming!==t.TextTrimming.None)return 0;var a=n(r);return i>=a?0:e.textAlignment===t.TextAlignment.Center?(a-i)/2:a-i},r.prototype.measureTextWidth=function(e,n){return t.engine.Surface.measureWidth(e,n)},r}();e.DocumentLayoutDef=r}(e=t.text||(t.text={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){function e(t){return{def:t,assets:t.createAssets()}}t.createDocumentLayout=e}(e=t.text||(t.text={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n=function(){function n(){this.assets={fontFamily:t.Font.DEFAULT_FAMILY,fontSize:t.Font.DEFAULT_SIZE,fontStretch:t.Font.DEFAULT_STRETCH,fontStyle:t.Font.DEFAULT_STYLE,fontWeight:t.Font.DEFAULT_WEIGHT,textDecorations:t.TextDecorations.None,language:"",background:null,selectionBackground:null,foreground:null,selectionForeground:null,isUnderlined:!1,font:new t.Font,text:""},this.init()}return n.prototype.init=function(){this.setTextLayout()},n.prototype.setTextLayout=function(t){return this.$$textlayout?this:(this.$$textlayout=t||new e.run.RunLayoutDef,this)},n.prototype.layout=function(t,e){return this.$$textlayout.layout(t,e,this.assets),this.assets.text.length},n.prototype.invalidateFont=function(){var e=this.assets;return t.Font.mergeInto(e.font,e.fontFamily,e.fontSize,e.fontStretch,e.fontStyle,e.fontWeight)},n}();e.TextUpdater=n}(e=t.text||(t.text={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n=function(n){function r(){n.call(this),this.addTapin("validateFinalRect",e.tapins.validateFinalRect).addTapin("applyRounding",e.tapins.applyRounding).addTapin("validateVisibility",e.tapins.validateVisibility).addTapin("checkNeedArrange",e.tapins.checkNeedArrange).addTapin("invalidateFuture",e.tapins.invalidateFuture).addTapin("calcStretched",e.tapins.calcStretched).addTapin("prepareOverride",e.tapins.prepareOverride).addTapin("doOverride",e.tapins.doOverride).addTapin("completeOverride",e.tapins.completeOverride).addTapin("calcFlip",e.tapins.calcFlip).addTapin("calcVisualOffset",e.tapins.calcVisualOffset).addTapin("buildLayoutClip",e.tapins.buildLayoutClip).addTapin("buildLayoutXform",e.tapins.buildLayoutXform).addTapin("buildRenderSize",e.tapins.buildRenderSize)}return __extends(r,n),r.prototype.createState=function(){return{arrangedSize:new t.Size,finalRect:new t.Rect,finalSize:new t.Size,childRect:new t.Rect,framework:new t.Size,stretched:new t.Size,constrained:new t.Size,flipHorizontal:!1}},r.prototype.createOutput=function(){return{dirtyFlags:0,uiFlags:0,layoutSlot:new t.Rect,layoutXform:t.mat3.identity(),layoutClip:new t.Rect,renderSize:new t.Size,lastRenderSize:void 0,visualOffset:new t.Point,origDirtyFlags:0,origUiFlags:0,newUpDirty:0,newDownDirty:0,newUiFlags:0}},r.prototype.prepare=function(e,n,r){r.origDirtyFlags=r.dirtyFlags=e.dirtyFlags,r.origUiFlags=r.uiFlags=e.uiFlags,t.Rect.copyTo(e.layoutSlot,r.layoutSlot),t.Rect.copyTo(e.layoutClip,r.layoutClip),t.Size.copyTo(e.renderSize,r.renderSize),r.lastRenderSize=e.lastRenderSize,t.mat3.copyTo(e.layoutXform,r.layoutXform),t.Point.copyTo(e.visualOffset,r.visualOffset)},r.prototype.flush=function(e,n,r){var i=(r.dirtyFlags|e.dirtyFlags)&~r.origDirtyFlags;r.newUpDirty=i&t.DirtyFlags.UpDirtyState,r.newDownDirty=i&t.DirtyFlags.DownDirtyState,r.newUiFlags=(r.uiFlags|e.uiFlags)&~r.origUiFlags,e.dirtyFlags=r.dirtyFlags,e.uiFlags=r.uiFlags,t.Rect.copyTo(r.layoutSlot,e.layoutSlot),t.Rect.copyTo(r.layoutClip,e.layoutClip),t.Size.copyTo(r.renderSize,e.renderSize),e.lastRenderSize=r.lastRenderSize,t.mat3.copyTo(r.layoutXform,e.layoutXform),t.Point.copyTo(r.visualOffset,e.visualOffset)},r}(t.pipe.TriPipeDef);e.ArrangePipeDef=n}(n=e.arrange||(e.arrange={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n=function(e){function n(n){e.call(this),this.replaceTapin("doOverride",function(e,r,i,a,o){var s=new t.Size;t.Size.copyTo(r.finalSize,s);var c=n.arrangeOverride(s);return t.Size.copyTo(c,r.arrangedSize),!0})}return __extends(n,e),n}(t.core.arrange.ArrangePipeDef);e.AnonymousArrangePipeDef=n}(n=e.arrange||(e.arrange={}))}(e=t.anon||(t.anon={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n=function(n){function r(){n.call(this),this.addTapin("validate",e.tapins.validate).addTapin("validateVisibility",e.tapins.validateVisibility).addTapin("applyTemplate",e.tapins.applyTemplate).addTapin("checkNeedMeasure",e.tapins.checkNeedMeasure).addTapin("invalidateFuture",e.tapins.invalidateFuture).addTapin("prepareOverride",e.tapins.prepareOverride).addTapin("doOverride",e.tapins.doOverride).addTapin("completeOverride",e.tapins.completeOverride).addTapin("finishDesired",e.tapins.finishDesired)}return __extends(r,n),r.prototype.createState=function(){return{availableSize:new t.Size}},r.prototype.createOutput=function(){return{previousConstraint:new t.Size,desiredSize:new t.Size,hiddenDesire:new t.Size,dirtyFlags:0,uiFlags:0,origDirtyFlags:0,origUiFlags:0,newUpDirty:0,newDownDirty:0,newUiFlags:0}},r.prototype.prepare=function(e,n,r){t.Size.copyTo(e.previousConstraint,r.previousConstraint),t.Size.copyTo(e.desiredSize,r.desiredSize),t.Size.copyTo(e.hiddenDesire,r.hiddenDesire),r.origDirtyFlags=r.dirtyFlags=e.dirtyFlags,r.origUiFlags=r.uiFlags=e.uiFlags},r.prototype.flush=function(e,n,r){var i=(r.dirtyFlags|e.dirtyFlags)&~r.origDirtyFlags;r.newUpDirty=i&t.DirtyFlags.UpDirtyState,r.newDownDirty=i&t.DirtyFlags.DownDirtyState,r.newUiFlags=(r.uiFlags|e.uiFlags)&~r.origUiFlags,e.dirtyFlags=r.dirtyFlags,e.uiFlags=r.uiFlags,t.Size.copyTo(r.previousConstraint,e.previousConstraint),t.Size.copyTo(r.hiddenDesire,e.hiddenDesire),t.Size.copyTo(r.desiredSize,e.desiredSize)},r}(t.pipe.TriPipeDef);e.MeasurePipeDef=n}(n=e.measure||(e.measure={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n=function(e){function n(n){e.call(this),this.replaceTapin("doOverride",function(e,r,i,a,o){var o=new t.Size;t.Size.copyTo(r.availableSize,o);var s=n.measureOverride(o);return t.Size.copyTo(s,i.desiredSize),!0})}return __extends(n,e),n}(t.core.measure.MeasurePipeDef);e.AnonymousMeasurePipeDef=n}(n=e.measure||(e.measure={}))}(e=t.anon||(t.anon={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n=function(n){function r(){n.apply(this,arguments)}return __extends(r,n),r.prototype.init=function(){this.setTree(new e.BorderUpdaterTree).setMeasurePipe(t.singleton(e.measure.BorderMeasurePipeDef)).setArrangePipe(t.singleton(e.arrange.BorderArrangePipeDef)).setRenderPipe(t.singleton(t.core.render.RenderContext.hasFillRule?e.render.BorderRenderPipeDef:e.render.ShimBorderRenderPipeDef)).setHitTestPipe(t.singleton(e.hittest.BorderHitTestPipeDef));var r=this.assets;r.padding=new t.Thickness,r.borderThickness=new t.Thickness,r.cornerRadius=new t.CornerRadius,n.prototype.init.call(this)},r}(t.core.Updater);e.BorderUpdater=n}(n=e.border||(e.border={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n=function(t){function e(){t.apply(this,arguments),this.isLayoutContainer=!0,this.isContainer=!0}return __extends(e,t),e.prototype.walk=function(t){var e=!1,n=this;return{current:void 0,step:function(){return this.current=e?void 0:n.subtree,e=!0,null!=this.current}}},e}(t.core.UpdaterTree);e.BorderUpdaterTree=n}(n=e.border||(e.border={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n=function(n){function r(){n.apply(this,arguments)}return __extends(r,n),r.prototype.init=function(){var r=this.assets;r.background=null,this.setTree(new e.PanelUpdaterTree).setMeasurePipe(t.singleton(e.measure.PanelMeasurePipeDef)).setArrangePipe(t.singleton(e.arrange.PanelArrangePipeDef)).setProcessUpPipe(t.singleton(e.processup.PanelProcessUpPipeDef)).setRenderPipe(t.singleton(e.render.PanelRenderPipeDef)).setHitTestPipe(t.singleton(e.hittest.PanelHitTestPipeDef)),n.prototype.init.call(this)},r.prototype.setChildren=function(t){return this.tree.children=t,this},r}(t.core.Updater);e.PanelUpdater=n;var r;!function(t){function e(t,e,n){var r=t.tree.visualParent;r&&(r.tree.zSorted=null)}t.zIndex=e}(r=e.reactTo||(e.reactTo={}))}(n=e.panel||(e.panel={}))}(e=t.controls||(t.controls={}));
}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(n){var r=function(e){function r(){e.apply(this,arguments)}return __extends(r,e),r.prototype.init=function(){this.setMeasurePipe(t.singleton(n.measure.CanvasMeasurePipeDef)).setArrangePipe(t.singleton(n.arrange.CanvasArrangePipeDef)).setProcessDownPipe(t.singleton(n.processdown.CanvasProcessDownPipeDef)).setProcessUpPipe(t.singleton(n.processup.CanvasProcessUpPipeDef));var r=this.assets;r.breakLayoutClip=!0,e.prototype.init.call(this)},r}(e.panel.PanelUpdater);n.CanvasUpdater=r;var i;!function(e){function n(t,e,n){a(t)}function i(t,e,n){a(t)}function a(e){var n=e.tree.visualParent;if(e instanceof r&&!n&&(e.assets.dirtyFlags|=t.DirtyFlags.LocalTransform,t.core.Updater.$$addDownDirty(e),e.invalidateArrange()),n instanceof r){var i=e.assets.layoutSlot;t.Size.copyTo(e.assets.desiredSize,i),i.x=e.getAttachedValue("Canvas.Left")||0,i.y=e.getAttachedValue("Canvas.Top")||0,e.assets.useLayoutRounding&&(i.x=Math.round(i.x),i.y=Math.round(i.y),i.width=Math.round(i.width),i.height=Math.round(i.height)),e.invalidateArrange()}}e.left=n,e.top=i}(i=n.reactTo||(n.reactTo={}))}(n=e.canvas||(e.canvas={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n=function(n){function r(){n.apply(this,arguments)}return __extends(r,n),r.prototype.init=function(){this.setTree(new e.ControlUpdaterTree).setHitTestPipe(t.singleton(e.hittest.ControlHitTestPipeDef)),this.assets.isEnabled=!0,n.prototype.init.call(this)},r}(t.core.Updater);e.ControlUpdater=n}(n=e.control||(e.control={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n=function(t){function e(){t.call(this),this.isContainer=!0,this.isLayoutContainer=!0}return __extends(e,t),e}(t.core.UpdaterTree);e.ControlUpdaterTree=n}(n=e.control||(e.control={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){!function(t){t[t.Auto=0]="Auto",t[t.Pixel=1]="Pixel",t[t.Star=2]="Star"}(t.GridUnitType||(t.GridUnitType={}));t.GridUnitType}(e=t.grid||(t.grid={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(n){var r=function(e){function r(){e.apply(this,arguments)}return __extends(r,e),r.prototype.init=function(){this.setMeasurePipe(t.singleton(n.measure.GridMeasurePipeDef)).setArrangePipe(t.singleton(n.arrange.GridArrangePipeDef)).setProcessUpPipe(t.singleton(n.processup.GridProcessUpPipeDef)).setRenderPipe(t.singleton(n.render.GridRenderPipeDef));var r=this.assets;r.showGridLines=!1,r.columnDefinitions=[],r.rowDefinitions=[],r.gridState=n.createGridState(),e.prototype.init.call(this)},r}(e.panel.PanelUpdater);n.GridUpdater=r;var i;!function(t){function e(t){var e=t.tree.visualParent;e instanceof r&&e.invalidateMeasure(),t.invalidateMeasure()}function n(t,e,n){t.invalidateMeasure(),t.invalidate()}function i(t,n,r){e(t)}function a(t,n,r){e(t)}function o(t,n,r){e(t)}function s(t,n,r){e(t)}t.showGridLines=n,t.column=i,t.columnSpan=a,t.row=o,t.rowSpan=s}(i=n.reactTo||(n.reactTo={}))}(n=e.grid||(e.grid={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){function e(){return{rowMatrix:[],colMatrix:[]}}t.createGridState=e}(e=t.grid||(t.grid={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){var e=function(){function e(){this.desired=0,this.offered=0,this.original=0,this.min=0,this.max=Number.POSITIVE_INFINITY,this.stars=0,this.type=t.GridUnitType.Pixel}return e.prototype.clamp=function(t){return t<this.min?this.min:t>this.max?this.max:t},e.init=function(e,n,r,i,a){return e.desired=0,e.stars=0,e.offered=n||0,e.min=r||0,e.max=null!=i?i:Number.POSITIVE_INFINITY,e.type=null!=a?a:t.GridUnitType.Pixel,e.offered<r?e.offered=r:e.offered>i&&(e.offered=i),e},e}();t.Segment=e}(e=t.grid||(t.grid={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n=function(n){function r(){n.apply(this,arguments)}return __extends(r,n),r.prototype.init=function(){this.setMeasurePipe(t.singleton(e.measure.ImageMeasurePipeDef)).setArrangePipe(t.singleton(e.arrange.ImageArrangePipeDef)).setProcessDownPipe(t.singleton(e.processdown.ImageProcessDownPipeDef)).setRenderPipe(t.singleton(e.render.ImageRenderPipeDef)).setHitTestPipe(t.singleton(e.hittest.ImageHitTestPipeDef));var r=this.assets;r.source=null,r.stretch=t.Stretch.Uniform,r.overlap=t.RectOverlap.In,r.imgXform=t.mat3.identity(),n.prototype.init.call(this)},r.prototype.invalidateMetrics=function(){return this.assets.dirtyFlags|=t.DirtyFlags.ImageMetrics,t.core.Updater.$$addDownDirty(this),this},r}(t.core.Updater);e.ImageUpdater=n}(n=e.image||(e.image={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n=function(n){function r(){n.apply(this,arguments)}return __extends(r,n),r.prototype.init=function(){this.setTree(new e.OverlayUpdaterTree).setProcessUpPipe(t.singleton(e.processup.OverlayProcessUpPipeDef)).setHitTestPipe(t.singleton(e.hittest.OverlayHitTestPipeDef));var r=this.assets;r.isVisible=!1,r.isOpen=!1,n.prototype.init.call(this)},r.prototype.setInitiator=function(t){this.tree.initiatorSurface=t.tree.surface},r.prototype.setLayer=function(t){this.hide(),this.tree.layer=t,this.assets.isOpen&&this.show()},r.prototype.hide=function(){var t=this.tree.layer;if(!this.assets.isVisible||!t)return!1;this.assets.isVisible=!1;var e=this.tree.initiatorSurface;return e?(e.detachLayer(t),!0):!1},r.prototype.show=function(){var t=this.tree.layer;if(this.assets.isVisible||!t)return!1;this.assets.isVisible=!0;var e=this.tree.initiatorSurface;return e?(e.attachLayer(t),!0):!1},r}(t.core.Updater);e.OverlayUpdater=n;var r;!function(t){function e(t,e,n){n===!0?t.show():t.hide()}t.isOpen=e}(r=e.reactTo||(e.reactTo={}))}(n=e.overlay||(e.overlay={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n=function(t){function e(){t.apply(this,arguments),this.layer=void 0,this.initiatorSurface=void 0}return __extends(e,t),e}(t.core.UpdaterTree);e.OverlayUpdaterTree=n}(n=e.overlay||(e.overlay={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){function n(t,e){var n,r=t.length,i={step:void 0,current:void 0};return e?(n=r,i.step=function(){return n--,0>n?(i.current=void 0,!1):(i.current=t[n],!0)}):(n=-1,i.step=function(){return n++,n>=r?(i.current=void 0,!1):(i.current=t[n],!0)}),i}function r(t,e){var n=t.getAttachedValue("Panel.ZIndex"),r=e.getAttachedValue("Panel.ZIndex");if(null==n&&null==r)n=t.getAttachedValue("Panel.Index"),r=e.getAttachedValue("Panel.Index");else{if(null==n)return r>0?-1:1;if(null==r)return n>0?1:-1}return n===r?0:r>n?-1:1}var i=function(e){function i(){e.call(this),this.children=null,this.zSorted=null,this.isContainer=!0,this.isLayoutContainer=!0}return __extends(i,e),i.prototype.walk=function(e){return e===t.WalkDirection.ZForward||e===t.WalkDirection.ZReverse?(this.zSort(),n(this.zSorted,e===t.WalkDirection.ZReverse)):n(this.children,e===t.WalkDirection.Reverse)},i.prototype.zSort=function(){var t=this.zSorted;if(!t){t=this.zSorted=[];for(var e=0,n=this.walk();n.step();e++){var i=n.current;i.setAttachedValue("Panel.Index",e),t.push(i)}t.sort(r)}},i.prototype.onChildAttached=function(t){this.zSorted=null},i.prototype.onChildDetached=function(t){this.zSorted=null},i}(t.core.UpdaterTree);e.PanelUpdaterTree=i}(n=e.panel||(e.panel={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n=function(n){function r(){n.apply(this,arguments)}return __extends(r,n),r.prototype.init=function(){this.setTree(new e.PopupUpdaterTree).setProcessDownPipe(t.singleton(e.processdown.PopupProcessDownPipeDef)).setProcessUpPipe(t.singleton(e.processup.PopupProcessUpPipeDef)).setHitTestPipe(t.singleton(e.hittest.PopupHitTestPipeDef));var r=this.assets;r.horizontalOffset=0,r.verticalOffset=0,r.isVisible=!1,r.isOpen=!1,n.prototype.init.call(this)},r.prototype.setInitiator=function(t){this.tree.initiatorSurface=t.tree.surface},r.prototype.setChild=function(e){var n=this.tree.popupChild;n&&(n.assets.carrierXform=null),this.tree.popupChild=e,e&&(e.assets.carrierXform=t.mat3.identity())},r.prototype.setLayer=function(t){this.hide(),this.tree.layer=t,this.assets.isOpen&&this.show()},r.prototype.hide=function(){var t=this.tree.layer;if(!this.assets.isVisible||!t)return!1;this.assets.isVisible=!1;var e=this.tree.initiatorSurface;return e?(e.detachLayer(t),!0):!1},r.prototype.show=function(){var t=this.tree.layer;if(this.assets.isVisible||!t)return!1;this.assets.isVisible=!0;var e=this.tree.initiatorSurface;return e?(e.attachLayer(t),!0):!1},r}(t.core.Updater);e.PopupUpdater=n;var r;!function(e){function n(t,e,n){n===!0?t.show():t.hide()}function r(t,e,n){var r=t.tree,i=r.popupChild;if(i){var o=n-e;0!==o&&(a(i,o,0),r.layer&&r.layer.invalidateMeasure())}}function i(t,e,n){var r=t.tree,i=r.popupChild;if(i){var o=n-e;0!==o&&(a(i,0,o),r.layer&&r.layer.invalidateMeasure())}}function a(e,n,r){e.assets.carrierXform&&t.mat3.translate(e.assets.carrierXform,n,r)}e.isOpen=n,e.horizontalOffset=r,e.verticalOffset=i}(r=e.reactTo||(e.reactTo={}))}(n=e.popup||(e.popup={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n=function(t){function e(){t.apply(this,arguments),this.popupChild=void 0,this.layer=void 0,this.initiatorSurface=void 0}return __extends(e,t),e}(t.core.UpdaterTree);e.PopupUpdaterTree=n}(n=e.popup||(e.popup={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){function e(t){var e=!1,a=n(t,t.cachedOffsetX);i(a,t.offsetX)||(t.offsetX=a,e=!0);var o=r(t,t.cachedOffsetY);return i(o,t.offsetY)||(t.offsetY=o,e=!0),e}function n(t,e){return t.canHorizontallyScroll?Math.max(0,Math.min(e,t.extentWidth-t.viewportWidth)):0}function r(t,e){return t.canVerticallyScroll?Math.max(0,Math.min(e,t.extentHeight-t.viewportHeight)):0}function i(t,e){if(t===e)return!0;var n=(Math.abs(t)+Math.abs(e)+o)*a,r=t-e;return r>-n&&n>r}t.clampOffsets=e;var a=1.192093e-7,o=10}(e=t.helpers||(t.helpers={}))}(e=t.scrollcontentpresenter||(t.scrollcontentpresenter={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n=function(n){function r(){n.apply(this,arguments)}return __extends(r,n),r.prototype.init=function(){this.setMeasurePipe(t.singleton(e.measure.ScrollContentPresenterMeasurePipeDef)).setArrangePipe(t.singleton(e.arrange.ScrollContentPresenterArrangePipeDef)).setRenderPipe(t.singleton(e.render.ScrollContentPresenterRenderPipeDef));var r=this.assets;r.internalClip=new t.Rect,r.scrollData={canHorizontallyScroll:!1,canVerticallyScroll:!1,offsetX:0,offsetY:0,cachedOffsetX:0,cachedOffsetY:0,viewportWidth:0,viewportHeight:0,extentWidth:0,extentHeight:0,maxDesiredWidth:0,maxDesiredHeight:0,invalidate:function(){}},n.prototype.init.call(this)},r}(t.core.Updater);e.ScrollContentPresenterUpdater=n}(n=e.scrollcontentpresenter||(e.scrollcontentpresenter={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(n){var r=function(e){function r(){e.apply(this,arguments)}return __extends(r,e),r.prototype.init=function(){this.setMeasurePipe(t.singleton(n.measure.StackPanelMeasurePipeDef)).setArrangePipe(t.singleton(n.arrange.StackPanelArrangePipeDef)),this.assets.orientation=t.Orientation.Vertical,e.prototype.init.call(this)},r}(e.panel.PanelUpdater);n.StackPanelUpdater=r}(n=e.stackpanel||(e.stackpanel={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n=function(n){function r(){n.apply(this,arguments)}return __extends(r,n),r.prototype.init=function(){this.setTree(new e.TextBlockUpdaterTree).setMeasurePipe(t.singleton(e.measure.TextBlockMeasurePipeDef)).setArrangePipe(t.singleton(e.arrange.TextBlockArrangePipeDef)).setProcessUpPipe(t.singleton(e.processup.TextBlockProcessUpPipeDef)).setRenderPipe(t.singleton(e.render.TextBlockRenderPipeDef)).setHitTestPipe(t.singleton(e.hittest.TextBlockHitTestPipeDef)),this.setDocument();var r=this.assets;r.padding=new t.Thickness,r.selectionStart=0,r.selectionLength=0,r.textWrapping=t.TextWrapping.NoWrap,r.textAlignment=t.TextAlignment.Left,r.textTrimming=t.TextTrimming.None,r.lineStackingStrategy=t.LineStackingStrategy.MaxHeight,r.lineHeight=NaN,n.prototype.init.call(this)},r.prototype.setDocument=function(e){return this.tree.doc?this:(this.tree.doc=t.text.createDocumentLayout(e||new t.text.DocumentLayoutDef),this)},r.prototype.invalidateFont=function(t){t===!0&&(this.invalidateMeasure(),this.invalidateArrange(),this.updateBounds(!0)),this.invalidate()},r.prototype.invalidateTextMetrics=function(){this.invalidateMeasure(),this.invalidateArrange(),this.updateBounds(!0),this.invalidate();var t=this.tree.doc.assets;t.actualWidth=NaN,t.actualHeight=NaN},r}(t.core.Updater);e.TextBlockUpdater=n}(n=e.textblock||(e.textblock={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n=function(e){function n(){e.apply(this,arguments),this.children=[]}return __extends(n,e),n.prototype.setMaxWidth=function(t,e){return this.doc.def.setMaxWidth(e,this.doc.assets,t)},n.prototype.layout=function(e,n){var r=this.doc;return r.def.layout(n,r.assets,e,this.walkText()),new t.Size(r.assets.actualWidth,r.assets.actualHeight)},n.prototype.render=function(t,e){var n=this.doc;n.def.render(t,e,n.assets)},n.prototype.setAvailableWidth=function(t){this.doc.assets.availableWidth=t},n.prototype.getHorizontalOffset=function(t){var e=this.doc;return e.def.getHorizontalAlignmentX(t,e.assets,e.assets.actualWidth)},n.prototype.clearText=function(){this.children.length=0},n.prototype.walkText=function(){var t=-1,e=this.children;return{current:void 0,step:function(){return t++,this.current=e[t],void 0!==this.current}}},n.prototype.onTextAttached=function(t,e){null==e||0>e||e>=this.children.length?this.children.push(t):this.children.splice(e,0,t)},n.prototype.onTextDetached=function(t){var e=this.children.indexOf(t);e>-1&&this.children.splice(e,1)},n}(t.core.UpdaterTree);e.TextBlockUpdaterTree=n}(n=e.textblock||(e.textblock={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){var e=3,n=2,r=3,i=4,a=900,o=function(){function t(t){this.isEnabled=!0,this.isVisible=!1,this.$$blink_delay=a,this.$$timeout=0,this.$$onChange=t}return t.prototype.delay=function(){this.$disconnect(),this.$connect(r),this.$show()},t.prototype.begin=function(){0===this.$$timeout&&(this.$connect(i),this.$show())},t.prototype.end=function(){this.$disconnect(),this.$hide()},t.prototype.$connect=function(t){var n=this,r=this.$$blink_delay*t/e;this.$$timeout=window.setTimeout(function(){return n.$blink()},r)},t.prototype.$disconnect=function(){0!==this.$$timeout&&(window.clearTimeout(this.$$timeout),this.$$timeout=0)},t.prototype.$blink=function(){this.isVisible?(this.$hide(),this.$connect(n)):(this.$show(),this.$connect(i))},t.prototype.$show=function(){this.isVisible||(this.isVisible=!0,this.$$onChange&&this.$$onChange(!0))},t.prototype.$hide=function(){this.isVisible&&(this.isVisible=!1,this.$$onChange&&this.$$onChange(!1))},t}();t.Blinker=o}(e=t.textboxview||(t.textboxview={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n=function(n){function r(){n.apply(this,arguments)}return __extends(r,n),r.prototype.init=function(){var r=this;this.setTree(new e.TextBoxViewUpdaterTree).setMeasurePipe(t.singleton(e.measure.TextBoxViewMeasurePipeDef)).setArrangePipe(t.singleton(e.arrange.TextBoxViewArrangePipeDef)).setProcessUpPipe(t.singleton(e.processup.TextBoxViewProcessUpPipeDef)).setRenderPipe(t.singleton(e.render.TextBoxViewRenderPipeDef)).setHitTestPipe(t.singleton(e.hittest.TextBoxViewHitTestPipeDef)),this.setDocument();var i=this.assets;i.selectionStart=0,i.selectionLength=0,i.textWrapping=t.TextWrapping.NoWrap,i.textAlignment=t.TextAlignment.Left,i.lineStackingStrategy=t.LineStackingStrategy.MaxHeight,i.lineHeight=NaN,i.isCaretVisible=!1,i.caretBrush=null,i.caretRegion=new t.Rect,i.isReadOnly=!1,this.blinker=new e.Blinker(function(t){r.assets.isCaretVisible=t,r.invalidateCaret()}),n.prototype.init.call(this)},r.prototype.setDocument=function(e){return this.tree.doc?this:(this.tree.doc=t.text.createDocumentLayout(e||new t.text.DocumentLayoutDef),this)},r.prototype.getCursorFromPoint=function(t){var e=this.tree.doc;return e.def.getCursorFromPoint(t,this.assets,e.assets)},r.prototype.invalidateFont=function(t){t===!0&&(this.invalidateMeasure(),this.invalidateArrange(),this.updateBounds(!0)),this.invalidate()},r.prototype.invalidateTextMetrics=function(){return this.invalidateMeasure().invalidateArrange().updateBounds(!0).invalidate(),this},r.prototype.invalidateMeasure=function(){n.prototype.invalidateMeasure.call(this);var t=this.tree.doc.assets;return t.actualWidth=NaN,t.actualHeight=NaN,this},r.prototype.invalidateCaret=function(){var e=this.assets,n=new t.Rect;t.Rect.copyTo(e.caretRegion,n),t.Rect.transform(n,e.absoluteXform),this.invalidate(n)},r.prototype.invalidateSelectionStart=function(){this.tree.doc.assets.selCached=!1,this.invalidateCaretRegion(),this.resetCaretBlinker(!0)},r.prototype.invalidateSelectionLength=function(t){this.tree.doc.assets.selCached=!1,this.invalidate(),this.resetCaretBlinker(t),t&&this.invalidateCaretRegion()},r.prototype.invalidateCaretRegion=function(){this.invalidateCaret();var t=this.assets.caretRegion;t.x=t.y=t.width=t.height=0},r.prototype.resetCaretBlinker=function(t){var e=this.assets,n=this.blinker;return e.selectionLength>0||e.isReadOnly||!e.isFocused?n.end():t?n.delay():n.begin()},r}(t.core.Updater);e.TextBoxViewUpdater=n}(n=e.textboxview||(e.textboxview={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n=function(e){function n(){e.apply(this,arguments),this.children=[]}return __extends(n,e),n.prototype.setMaxWidth=function(t,e){return this.doc.def.setMaxWidth(e,this.doc.assets,t)},n.prototype.layout=function(e,n){var r=this.doc;return r.def.layout(n,r.assets,e,this.walkText()),new t.Size(r.assets.actualWidth,r.assets.actualHeight)},n.prototype.render=function(t,e){var n=this.doc;n.def.render(t,e,n.assets)},n.prototype.setAvailableWidth=function(t){this.doc.assets.availableWidth=t},n.prototype.getHorizontalOffset=function(t){var e=this.doc;return e.def.getHorizontalAlignmentX(t,e.assets,e.assets.actualWidth)},n.prototype.getCaretRegion=function(t){var e=this.doc;return e.def.getCaretFromCursor(t,e.assets)},n.prototype.clearText=function(){this.children.length=0},n.prototype.walkText=function(){var t=-1,e=this.children;return{current:void 0,step:function(){return t++,this.current=e[t],void 0!==this.current}}},n.prototype.onTextAttached=function(t,e){null==e||0>e||e>=this.children.length?this.children.push(t):this.children.splice(e,0,t)},n.prototype.onTextDetached=function(t){var e=this.children.indexOf(t);e>-1&&this.children.splice(e,1)},n}(t.core.UpdaterTree);e.TextBoxViewUpdaterTree=n}(n=e.textboxview||(e.textboxview={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(n){var r=function(e){function r(){e.apply(this,arguments)}return __extends(r,e),r.prototype.init=function(){this.setMeasurePipe(t.singleton(n.measure.UserControlMeasurePipeDef)).setArrangePipe(t.singleton(n.arrange.UserControlArrangePipeDef)).setProcessDownPipe(t.singleton(n.processdown.UserControlProcessDownPipeDef));var r=this.assets;r.breakLayoutClip=!0,r.padding=new t.Thickness,r.borderThickness=new t.Thickness,e.prototype.init.call(this)},r}(e.control.ControlUpdater);n.UserControlUpdater=r}(n=e.usercontrol||(e.usercontrol={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(e){var n=function(t){function e(){t.apply(this,arguments)}return __extends(e,t),e.prototype.onSurfaceChanged=function(t,e){t&&t.unhookPrerender(this),e&&e.hookPrerender(this)},e.prototype.preRender=function(){var t=this.assets;t.source&&t.source.getIsPlaying()&&this.invalidate()},e}(t.image.ImageUpdater);e.VideoUpdater=n}(e=t.video||(t.video={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(e){var n=function(t){function n(){t.apply(this,arguments)}return __extends(n,t),n.prototype.init=function(){this.setTree(new e.VirtualizingPanelUpdaterTree),t.prototype.init.call(this)},n}(t.panel.PanelUpdater);e.VirtualizingPanelUpdater=n}(e=t.virtualizingpanel||(t.virtualizingpanel={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(e){e.NO_CONTAINER_OWNER={itemCount:0,createGenerator:function(){return{current:void 0,generate:function(){return!1}}},remove:function(t,e){}};var n=function(t){function n(){t.apply(this,arguments),this.containerOwner=e.NO_CONTAINER_OWNER}return __extends(n,t),n}(t.panel.PanelUpdaterTree);e.VirtualizingPanelUpdaterTree=n}(e=t.virtualizingpanel||(t.virtualizingpanel={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(n){var r=function(e){function r(){e.apply(this,arguments)}return __extends(r,e),r.prototype.init=function(){this.setMeasurePipe(t.singleton(n.measure.VirtualizingStackPanelMeasurePipeDef)).setArrangePipe(t.singleton(n.arrange.VirtualizingStackPanelArrangePipeDef));var r=this.assets;r.orientation=t.Orientation.Vertical,r.scrollData={canHorizontallyScroll:!1,canVerticallyScroll:!1,offsetX:0,offsetY:0,cachedOffsetX:0,cachedOffsetY:0,viewportWidth:0,viewportHeight:0,extentWidth:0,extentHeight:0,maxDesiredWidth:0,maxDesiredHeight:0,invalidate:function(){}},e.prototype.init.call(this)},r}(e.virtualizingpanel.VirtualizingPanelUpdater);n.VirtualizingStackPanelUpdater=r}(n=e.virtualizingstackpanel||(e.virtualizingstackpanel={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n=function(){function e(){}return e.prototype.bind=function(e){var n=e.assets,r=e.tree,i=n.layoutSlot||void 0;return r.visualParent||(i=new t.Rect,this.expandViewport(i,n,r),this.shiftViewport(i,e)),i?e.arrange(i):(r.visualParent&&r.visualParent.invalidateArrange(),!1)},e.prototype.expandViewport=function(e,n,r){if(r.isLayoutContainer){if(t.Size.copyTo(n.desiredSize,e),r.surface){var i=n.previousConstraint;t.Size.isUndef(i)?(e.width=r.surface.width,e.height=r.surface.height):(e.width=Math.max(e.width,i.width),e.height=Math.max(e.height,i.height))}}else e.width=n.actualWidth,e.height=n.actualHeight},e.prototype.shiftViewport=function(t,e){t.x=e.getAttachedValue("Canvas.Left")||0,t.y=e.getAttachedValue("Canvas.Top")||0},e}();e.ArrangeBinder=n}(n=e.arrange||(e.arrange={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n=function(t){function n(){t.call(this),this.addTapin("flushPrevious",e.tapins.flushPrevious).addTapin("determinePhase",e.tapins.determinePhase).addTapin("prepareMeasure",e.tapins.prepareMeasure).addTapin("measure",e.tapins.measure).addTapin("prepareArrange",e.tapins.prepareArrange).addTapin("arrange",e.tapins.arrange).addTapin("prepareSizing",e.tapins.prepareSizing).addTapin("sizing",e.tapins.sizing).addTapin("notifyResize",e.tapins.notifyResize)}return __extends(n,t),n.prototype.prepare=function(t){},n.prototype.flush=function(t){},n}(t.pipe.PipeDef);e.DraftPipeDef=n}(n=e.draft||(e.draft={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n=function(t){function n(){t.call(this),this.addTapin("canHit",e.tapins.canHit).addTapin("prepareCtx",e.tapins.prepareCtx).addTapin("insideClip",e.tapins.insideClip).addTapin("insideChildren",e.tapins.insideChildren).addTapin("canHitInside",e.tapins.canHitInside).addTapin("insideObject",e.tapins.insideObject).addTapin("insideLayoutClip",e.tapins.insideLayoutClip).addTapin("completeCtx",e.tapins.completeCtx)}return __extends(n,t),n}(t.pipe.PipeDef);e.HitTestPipeDef=n}(n=e.hittest||(e.hittest={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n=function(){function e(){}return e.prototype.bind=function(e){var n=e.assets,r=n.previousConstraint,i=new t.Size,a=e.tree;!a.surface&&t.Size.isUndef(r)&&!a.visualParent&&a.isLayoutContainer&&(r.width=r.height=Number.POSITIVE_INFINITY);var o=!1;return!t.Size.isUndef(r)&&(t.Size.copyTo(n.desiredSize,i),o=e.measure(r),t.Size.isEqual(i,n.desiredSize))?o:(a.visualParent&&a.visualParent.invalidateMeasure(),n.dirtyFlags&=~t.DirtyFlags.Measure,o)},e}();e.MeasureBinder=n}(n=e.measure||(e.measure={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n=function(n){function r(){n.call(this),this.addTapin("processRenderVisibility",e.tapins.processRenderVisibility).addTapin("processHitTestVisibility",e.tapins.processHitTestVisibility).addTapin("calcXformOrigin",e.tapins.calcXformOrigin).addTapin("processLocalXform",e.tapins.processLocalXform).addTapin("calcRenderXform",e.tapins.calcRenderXform).addTapin("calcAbsoluteXform",e.tapins.calcAbsoluteXform).addTapin("processXform",e.tapins.processXform).addTapin("processLayoutClip",e.tapins.processLayoutClip).addTapin("propagateDirtyToChildren",e.tapins.propagateDirtyToChildren)}return __extends(r,n),r.prototype.createState=function(){return{xformOrigin:new t.Point,localXform:t.mat3.identity(),subtreeDownDirty:0}},r.prototype.createOutput=function(){return{totalIsRenderVisible:!1,totalOpacity:1,totalIsHitTestVisible:!1,z:NaN,compositeLayoutClip:new t.Rect,renderXform:t.mat3.identity(),absoluteXform:t.mat3.identity(),dirtyFlags:0,newUpDirty:0}},r.prototype.prepare=function(e,n,r,i,a){(e.dirtyFlags&t.DirtyFlags.LocalTransform)>0&&(e.dirtyFlags|=t.DirtyFlags.Transform),r.dirtyFlags=e.dirtyFlags,r.totalIsRenderVisible=e.totalIsRenderVisible,r.totalOpacity=e.totalOpacity,r.totalIsHitTestVisible=e.totalIsHitTestVisible,r.z=e.z,t.Rect.copyTo(e.compositeLayoutClip,r.compositeLayoutClip),t.mat3.copyTo(e.renderXform,r.renderXform),t.mat3.copyTo(e.absoluteXform,r.absoluteXform),n.subtreeDownDirty=0},r.prototype.flush=function(e,n,r,i,a){r.newUpDirty=r.dirtyFlags&~e.dirtyFlags&t.DirtyFlags.UpDirtyState,e.dirtyFlags=r.dirtyFlags&~t.DirtyFlags.DownDirtyState,e.totalIsRenderVisible=r.totalIsRenderVisible,e.totalOpacity=r.totalOpacity,e.totalIsHitTestVisible=r.totalIsHitTestVisible,e.z=r.z,t.Rect.copyTo(r.compositeLayoutClip,e.compositeLayoutClip),t.mat3.copyTo(r.renderXform,e.renderXform),t.mat3.copyTo(r.absoluteXform,e.absoluteXform)},r}(t.pipe.TriPipeDef);e.ProcessDownPipeDef=n}(n=e.processdown||(e.processdown={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n=function(n){function r(){n.call(this),this.addTapin("calcActualSize",e.tapins.calcActualSize).addTapin("calcExtents",e.tapins.calcExtents).addTapin("calcPaintBounds",e.tapins.calcPaintBounds).addTapin("processBounds",e.tapins.processBounds).addTapin("processNewBounds",e.tapins.processNewBounds).addTapin("processInvalidate",e.tapins.processInvalidate)}return __extends(r,n),r.prototype.createState=function(){return{invalidateSubtreePaint:!1,actualSize:new t.Size,hasNewBounds:!1,hasInvalidate:!1}},r.prototype.createOutput=function(){return{extents:new t.Rect,extentsWithChildren:new t.Rect,globalBoundsWithChildren:new t.Rect,surfaceBoundsWithChildren:new t.Rect,dirtyFlags:0,dirtyRegion:new t.Rect,forceInvalidate:!1}},r.prototype.prepare=function(e,n,r){r.dirtyFlags=e.dirtyFlags,t.Rect.copyTo(e.extents,r.extents),t.Rect.copyTo(e.extentsWithChildren,r.extentsWithChildren),t.Rect.copyTo(e.globalBoundsWithChildren,r.globalBoundsWithChildren),t.Rect.copyTo(e.surfaceBoundsWithChildren,r.surfaceBoundsWithChildren),t.Rect.copyTo(e.dirtyRegion,r.dirtyRegion),r.forceInvalidate=e.forceInvalidate},r.prototype.flush=function(e,n,r){e.dirtyFlags=r.dirtyFlags&~t.DirtyFlags.UpDirtyState,t.Rect.copyTo(r.extents,e.extents),t.Rect.copyTo(r.extentsWithChildren,e.extentsWithChildren),t.Rect.copyTo(r.globalBoundsWithChildren,e.globalBoundsWithChildren),t.Rect.copyTo(r.surfaceBoundsWithChildren,e.surfaceBoundsWithChildren),t.Rect.copyTo(r.dirtyRegion,e.dirtyRegion),e.forceInvalidate=r.forceInvalidate},r}(t.pipe.TriPipeDef);e.ProcessUpPipeDef=n}(n=e.processup||(e.processup={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){function n(){var t=new RegExp("MSIE ([0-9]{1,}[.0-9]{0,})");return null!=t.exec(navigator.userAgent)?parseFloat(RegExp.$1):-1}var r=["butt","square","round","butt"],i=["miter","bevel","round"],a=function(){function a(n){this.$$transforms=[],this.currentTransform=t.mat3.identity(),Object.defineProperties(this,{raw:{value:n,writable:!1},currentTransform:{value:t.mat3.identity(),writable:!1},hasFillRule:{value:a.hasFillRule,writable:!1},size:{value:new e.RenderContextSize,writable:!1}}),this.size.init(n)}return Object.defineProperty(a,"hasFillRule",{get:function(){if("Microsoft Internet Explorer"===navigator.appName){var t=n();return 0>t||t>10}return!0},enumerable:!0,configurable:!0}),a.prototype.applyDpiRatio=function(){var t=this.size.dpiRatio;this.scale(t,t)},a.prototype.save=function(){this.$$transforms.push(t.mat3.create(this.currentTransform)),this.raw.save()},a.prototype.restore=function(){var e=this.$$transforms.pop();e&&t.mat3.copyTo(e,this.currentTransform),this.raw.restore()},a.prototype.setTransform=function(e,n,r,i,a,o){t.mat3.copyTo([e,n,r,i,a,o],this.currentTransform),this.raw.setTransform(e,n,r,i,a,o)},a.prototype.resetTransform=function(){t.mat3.identity(this.currentTransform);var e=this.raw;e.resetTransform&&e.resetTransform()},a.prototype.transform=function(e,n,r,i,a,o){var s=this.currentTransform;t.mat3.multiply(s,t.mat3.create([e,n,r,i,a,o]),s),this.raw.transform(e,n,r,i,a,o)},a.prototype.scale=function(e,n){t.mat3.scale(this.currentTransform,e,n),this.raw.scale(e,n)},a.prototype.rotate=function(e){var n=this.currentTransform,r=t.mat3.createRotate(e);t.mat3.multiply(n,r,n),this.raw.rotate(e)},a.prototype.translate=function(e,n){t.mat3.translate(this.currentTransform,e,n),this.raw.translate(e,n)},a.prototype.apply=function(e){var n=t.mat3.apply(this.currentTransform,e);this.raw.setTransform(n[0],n[1],n[2],n[3],n[4],n[5])},a.prototype.preapply=function(e){var n=t.mat3.preapply(this.currentTransform,e);this.raw.setTransform(n[0],n[1],n[2],n[3],n[4],n[5])},a.prototype.clipGeometry=function(t){t.Draw(this),this.raw.clip()},a.prototype.clipRect=function(t){var e=this.raw;e.beginPath(),e.rect(t.x,t.y,t.width,t.height),e.clip()},a.prototype.fillEx=function(e,n,r){var i=this.raw;if(e.setupBrush(i,n),i.fillStyle=e.toHtml5Object(),null==r)i.fillRule=i.msFillRule="nonzero",i.fill();else{var a=r===t.FillRule.EvenOdd?"evenodd":"nonzero";i.fillRule=i.msFillRule=a,i.fill(a)}},a.prototype.isPointInStrokeEx=function(t,e,n){var a=this.raw;return a.lineWidth=t.strokeThickness,a.lineCap=r[t.strokeStartLineCap||t.strokeEndLineCap||0]||r[0],a.lineJoin=i[t.strokeLineJoin||0]||i[0],a.miterLimit=t.strokeMiterLimit,
a.isPointInStroke(e,n)},a}();e.RenderContext=a}(n=e.render||(e.render={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n=1e-10,r=function(){function e(){this.$$ctx=null,this.$$desiredWidth=0,this.$$desiredHeight=0,this.$$changed=null,this.$$lastDpiRatio=1}return Object.defineProperty(e.prototype,"desiredWidth",{get:function(){return this.$$desiredWidth},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"desiredHeight",{get:function(){return this.$$desiredHeight},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"paintWidth",{get:function(){return this.$$desiredWidth*this.dpiRatio},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"paintHeight",{get:function(){return this.$$desiredHeight*this.dpiRatio},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"dpiRatio",{get:function(){return(window.devicePixelRatio||1)/this.$$ctx.backingStorePixelRatio},enumerable:!0,configurable:!0}),e.prototype.init=function(e){this.$$ctx=e;var n=t.getNaturalCanvasSize(e.canvas);this.$$desiredWidth=n.width,this.$$desiredHeight=n.height,this.$adjustCanvas()},e.prototype.queueResize=function(t,e){return this.$$changed?(this.$$changed.width=t,this.$$changed.height=e):this.$$changed={width:t,height:e},this},e.prototype.commitResize=function(){if(this.$$changed){if(Math.abs(this.$$changed.width-this.$$desiredWidth)<n&&Math.abs(this.$$changed.height-this.$$desiredHeight)<n)return;this.$$desiredWidth=this.$$changed.width,this.$$desiredHeight=this.$$changed.height,this.$$changed=null,this.$adjustCanvas()}return this},e.prototype.updateDpiRatio=function(){return this.$$lastDpiRatio===this.dpiRatio?!1:(this.$adjustCanvas(),!0)},e.prototype.$adjustCanvas=function(){var t=this.$$ctx.canvas,e=this.dpiRatio;Math.abs(e-1)<n?(t.width=this.desiredWidth,t.height=this.desiredHeight):(t.width=this.paintWidth,t.height=this.paintHeight,t.style.width=this.desiredWidth.toString()+"px",t.style.height=this.desiredHeight.toString()+"px"),this.$$lastDpiRatio=e},e}();e.RenderContextSize=r}(n=e.render||(e.render={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n=function(n){function r(){n.call(this),this.addTapin("validate",e.tapins.validate).addTapin("validateRegion",e.tapins.validateRegion).addTapin("prepareContext",e.tapins.prepareContext).addTapin("applyClip",e.tapins.applyClip).addTapin("preRender",e.tapins.preRender).addTapin("doRender",e.tapins.doRender).addTapin("postRender",e.tapins.postRender).addTapin("renderChildren",e.tapins.renderChildren).addTapin("restoreContext",e.tapins.restoreContext)}return __extends(r,n),r.prototype.createState=function(){return{renderRegion:new t.Rect}},r.prototype.createOutput=function(){return{}},r}(t.pipe.TriPipeDef);e.RenderPipeDef=n}(n=e.render||(e.render={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n=function(n){function r(){n.call(this),this.addTapin("calcUseRender",e.tapins.calcUseRender).addTapin("computeActual",e.tapins.computeActual)}return __extends(r,n),r.prototype.createState=function(){return{useRender:!1}},r.prototype.createOutput=function(){return{actualSize:new t.Size}},r.prototype.prepare=function(t,e,n,r){},r.prototype.flush=function(t,e,n,r){var i=n.actualSize;t.actualWidth=i.width,t.actualHeight=i.height},r}(t.pipe.TriPipeDef);e.SizingPipeDef=n}(n=e.sizing||(e.sizing={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){function n(t,e,n,a,o,s){function c(){T||(u=t+n*Math.cos(a),l=e+n*Math.sin(a),h=t+n*Math.cos(o),p=e+n*Math.sin(o),f=t-n,g=r(u,l,h,p,f,e,s),d=t+n,y=r(u,l,h,p,d,e,s),v=e-n,x=r(u,l,h,p,t,v,s),m=e+n,w=r(u,l,h,p,t,m,s),T=!0)}var u,l,h,p,f,d,v,m,g,y,x,w,T=!1;return{sx:null,sy:null,isSingle:!0,x:t,y:e,ex:t,ey:e,radius:n,sAngle:a,eAngle:o,aClockwise:s,draw:function(r){r.arc(t,e,n,a,o,s)},extendFillBox:function(t){o!==a&&(c(),this.ex=h,this.ey=p,t.l=Math.min(t.l,u,h),t.r=Math.max(t.r,u,h),t.t=Math.min(t.t,l,p),t.b=Math.max(t.b,l,p),g&&(t.l=Math.min(t.l,f)),y&&(t.r=Math.max(t.r,d)),x&&(t.t=Math.min(t.t,v)),w&&(t.b=Math.max(t.b,m)))},extendStrokeBox:function(t,e){if(o!==a){c(),this.ex=h,this.ey=p,t.l=Math.min(t.l,u,h),t.r=Math.max(t.r,u,h),t.t=Math.min(t.t,l,p),t.b=Math.max(t.b,l,p);var n=e.strokeThickness/2;g&&(t.l=Math.min(t.l,f-n)),y&&(t.r=Math.max(t.r,d+n)),x&&(t.t=Math.min(t.t,v-n)),w&&(t.b=Math.max(t.b,m+n));var r=e.strokeStartLineCap||e.strokeEndLineCap||0,s=this.getStartVector();s[0]=-s[0],s[1]=-s[1];var T=i(u,l,e.strokeThickness,r,s),S=this.getEndVector(),M=i(h,p,e.strokeThickness,r,S);t.l=Math.min(t.l,T.x1,T.x2,M.x1,M.x2),t.r=Math.max(t.r,T.x1,T.x2,M.x1,M.x2),t.t=Math.min(t.t,T.y1,T.y2,M.y1,M.y2),t.b=Math.max(t.b,T.y1,T.y2,M.y1,M.y2)}},toString:function(){return""},getStartVector:function(){var n=[u-t,l-e];return s?[n[1],-n[0]]:[-n[1],n[0]]},getEndVector:function(){var n=[h-t,p-e];return s?[n[1],-n[0]]:[-n[1],n[0]]}}}function r(t,e,n,r,i,a,o){var s=(n-t)*(a-e)-(i-t)*(r-e);return 0===s?!0:s>0&&o?!0:0>s&&!o?!0:!1}function i(e,n,r,i,s){var c=r/2;switch(i){case t.PenLineCap.Round:return{x1:e-c,x2:e+c,y1:n-c,y2:n+c};case t.PenLineCap.Square:var u=a(s),l=o(u);return{x1:e+c*(u[0]+l[0]),x2:e+c*(u[0]-l[0]),y1:n+c*(u[1]+l[1]),y2:n+c*(u[1]-l[1])};case t.PenLineCap.Flat:default:var u=a(s),l=o(u);return{x1:e+c*l[0],x2:e+c*-l[0],y1:n+c*l[1],y2:n+c*-l[1]}}}function a(t){var e=Math.sqrt(t[0]*t[0]+t[1]*t[1]);return[t[0]/e,t[1]/e]}function o(t){return[-t[1],t[0]]}e.arc=n}(n=e.segments||(e.segments={}))}(e=t.path||(t.path={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){function n(n,a,o,s,c){function u(u,f){if(!p){if(l&&h)return h;var d=[n-u,a-f],v=[o-n,s-a],m=Math.PI-t.Vector.angleBetween(d,v),g=r(m,c,[u,f],d,!0),y=r(m,c,[n,a],v,!1),x=i(g,d,y,v),w=!t.Vector.isClockwiseTo(d,v),T=Math.atan2(g[1]-x[1],g[0]-x[0]);0>T&&(T=2*Math.PI+T);var S=Math.atan2(y[1]-x[1],y[0]-x[0]);0>S&&(S=2*Math.PI+S),l=e.line(g[0],g[1]),l.sx=u,l.sy=f,h=e.arc(x[0],x[1],c,T,S,w),p=!0}}var l,h,p=!1;return{sx:null,sy:null,isSingle:!1,cpx:n,cpy:a,x:o,y:s,ex:o,ey:s,radius:c,draw:function(t){t.arcTo(n,a,o,s,c)},extendFillBox:function(t){u(this.sx,this.sy),this.ex=h.ex,this.ey=h.ey,t.l=Math.min(t.l,this.sx),t.r=Math.max(t.r,this.sx),t.t=Math.min(t.t,this.sy),t.b=Math.max(t.b,this.sy),l.extendFillBox(t),h.extendFillBox(t)},extendStrokeBox:function(t,e){u(this.sx,this.sy),this.ex=h.ex,this.ey=h.ey;var n=e.strokeThickness/2;t.l=Math.min(t.l,this.sx-n),t.r=Math.max(t.r,this.sx+n),t.t=Math.min(t.t,this.sy-n),t.b=Math.max(t.b,this.sy+n),l.extendStrokeBox(t,e),h.extendStrokeBox(t,e)},toString:function(){return""},getStartVector:function(){return u(this.sx,this.sy),l.getStartVector()},getEndVector:function(){return h.getEndVector()}}}function r(t,e,n,r,i){var a=Math.sqrt(r[0]*r[0]+r[1]*r[1]),o=e/Math.tan(t/2),s=o/a;return i&&(s=1-s),[n[0]+s*r[0],n[1]+s*r[1]]}function i(e,n,r,i){return t.Vector.intersection(e,t.Vector.orthogonal(n.slice(0)),r,t.Vector.orthogonal(i.slice(0)))}e.arcTo=n}(n=e.segments||(e.segments={}))}(e=t.path||(t.path={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){function e(){return{sx:null,sy:null,ex:null,ey:null,isSingle:!1,isClose:!0,draw:function(t){t.closePath()},extendFillBox:function(t){},extendStrokeBox:function(t,e){},toString:function(){return"Z"},getStartVector:function(){return null},getEndVector:function(){return null}}}t.close=e}(e=t.segments||(t.segments={}))}(e=t.path||(t.path={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){function e(t,e,r,i,a,o){return{sx:null,sy:null,ex:a,ey:o,isSingle:!1,cp1x:t,cp1y:e,cp2x:r,cp2y:i,x:a,y:o,draw:function(n){n.bezierCurveTo(t,e,r,i,a,o)},extendFillBox:function(s){var c=n(this.sx,t,r,a,this.sy,e,i,o);null!=c.x[0]&&(s.l=Math.min(s.l,c.x[0]),s.r=Math.max(s.r,c.x[0])),null!=c.x[1]&&(s.l=Math.min(s.l,c.x[1]),s.r=Math.max(s.r,c.x[1])),null!=c.y[0]&&(s.t=Math.min(s.t,c.y[0]),s.b=Math.max(s.b,c.y[0])),null!=c.y[1]&&(s.t=Math.min(s.t,c.y[1]),s.b=Math.max(s.b,c.y[1])),s.l=Math.min(s.l,a),s.r=Math.max(s.r,a),s.t=Math.min(s.t,o),s.b=Math.max(s.b,o)},extendStrokeBox:function(s,c){var u=c.strokeThickness/2,l=n(this.sx,t,r,a,this.sy,e,i,o);null!=l.x[0]&&(s.l=Math.min(s.l,l.x[0]-u),s.r=Math.max(s.r,l.x[0]+u)),null!=l.x[1]&&(s.l=Math.min(s.l,l.x[1]-u),s.r=Math.max(s.r,l.x[1]+u)),null!=l.y[0]&&(s.t=Math.min(s.t,l.y[0]-u),s.b=Math.max(s.b,l.y[0]+u)),null!=l.y[1]&&(s.t=Math.min(s.t,l.y[1]-u),s.b=Math.max(s.b,l.y[1]+u)),s.l=Math.min(s.l,a),s.r=Math.max(s.r,a),s.t=Math.min(s.t,o),s.b=Math.max(s.b,o)},toString:function(){return"C"+t.toString()+","+e.toString()+" "+r.toString()+","+i.toString()+" "+a.toString()+","+o.toString()},getStartVector:function(){return[3*(t-this.sx),3*(e-this.sy)]},getEndVector:function(){return[3*(a-r),3*(o-i)]}}}function n(t,e,n,i,a,o,s,c){return{x:r(t,e,n,i),y:r(a,o,s,c)}}function r(t,e,n,r){var i=2*t-4*e+2*n,a=e-t,o=-t+3*e+r-3*n,s=Math.sqrt(i*i-4*a*o),c=[null,null];if(isNaN(s))return c;var u,l;return u=(-i+s)/(2*o),u>=0&&1>=u&&(l=1-u,c[0]=t*l*l*l+3*e*u*l*l+3*n*l*u*u+r*u*u*u),u=(-i-s)/(2*o),u>=0&&1>=u&&(l=1-u,c[1]=t*l*l*l+3*e*u*l*l+3*n*l*u*u+r*u*u*u),c}t.cubicBezier=e}(e=t.segments||(t.segments={}))}(e=t.path||(t.path={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){function e(t,e,n,r){var i=n/2,a=r/2,o=t+n,s=e+r,c=t+i,u=e+a;return{sx:null,sy:null,ex:t,ey:e,isSingle:!0,x:t,y:e,width:n,height:r,draw:function(l){if(l.beginPath(),n===r)return void l.arc(c,u,i,0,2*Math.PI,!1);var h=.5522848,p=i*h,f=a*h;l.moveTo(t,u),l.bezierCurveTo(t,u-f,c-p,e,c,e),l.bezierCurveTo(c+p,e,o,u-f,o,u),l.bezierCurveTo(o,u+f,c+p,s,c,s),l.bezierCurveTo(c-p,s,t,u+f,t,u),l.closePath()},extendFillBox:function(i){i.l=Math.min(i.l,t),i.r=Math.max(i.r,t+n),i.t=Math.min(i.t,e),i.b=Math.max(i.b,e+r)},extendStrokeBox:function(i,a){var o=a.strokeThickness/2;i.l=Math.min(i.l,t-o),i.r=Math.max(i.r,t+n+o),i.t=Math.min(i.t,e-o),i.b=Math.max(i.b,e+r+o)},getStartVector:function(){return null},getEndVector:function(){return null}}}t.ellipse=e}(e=t.segments||(t.segments={}))}(e=t.path||(t.path={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){function n(t,e,n,i,a,o,s){return{sx:null,sy:null,isSingle:!1,rx:t,ry:e,rotationAngle:n,isLargeArcFlag:i,sweepDirectionFlag:a,ex:o,ey:s,sub:null,draw:function(t){this.sub=this.sub||r(this);for(var e=0,n=this.sub,i=n.length;i>e;e++)n[e].draw(t)},extendFillBox:function(t){this.sub=this.sub||r(this);for(var e=0,n=this.sub,i=n.length;i>e;e++)n[e].extendFillBox(t)},extendStrokeBox:function(t,e){this.sub=this.sub||r(this);for(var n=0,i=this.sub,a=i.length;a>n;n++)i[n].extendStrokeBox(t,e)},toString:function(){return"A"+t.toString()+","+e.toString()+" "+n.toString()+" "+i.toString()+" "+a.toString()+" "+o.toString()+","+s.toString()},getStartVector:function(){this.sub=this.sub||r(this);var t=this.sub[0];return t?t.getStartVector():[0,0]},getEndVector:function(){this.sub=this.sub||r(this);var t=this.sub[this.sub.length-1];return t?t.getEndVector():[0,0]}}}function r(n){var r=[],s=n.sx,c=n.sy,u=n.ex,l=n.ey,h=n.rx,p=n.ry;if(Math.abs(u-s)<i&&Math.abs(l-c)<i)return r;if(Math.abs(h)<a||Math.abs(p)<a)return r.push(e.line(u,l)),r;if(Math.abs(h)<o||Math.abs(p)<o)return r;h=Math.abs(h),p=Math.abs(p);var f=n.rotationAngle*Math.PI/180,d=Math.cos(f),v=Math.sin(f),m=(s-u)/2,g=(c-l)/2,y=d*m+v*g,x=d*g-v*m,w=y*y,T=x*x,S=h*h,M=p*p,b=w/S+T/M;if(b>1){var P=Math.sqrt(b);h*=P,p*=P,S=h*h,M=p*p}var R,D,z,$,C=S*M-S*T-M*w,F=n.isLargeArcFlag===!0,O=n.sweepDirectionFlag===t.SweepDirection.Clockwise;if(0>C){var I=Math.sqrt(1-C/(S*M));h*=I,p*=I,S=h*h,M=p*p,R=0,D=0,z=0,$=0}else C=Math.sqrt(C/(S*T+M*w)),F===O&&(C=-C),R=C*(h*x/p),D=C*(-p*y/h),z=d*R-v*D,$=v*R+d*D;z+=(s+u)/2,$+=(c+l)/2;var k=Math.atan2((x-D)/p,(y-R)/h),A=0>k?2*Math.PI+k:k,B=Math.atan2((-x-D)/p,(-y-R)/h),N=k>B?2*Math.PI-k+B:B-k;O?0>N&&(N+=2*Math.PI):N>0&&(N-=2*Math.PI);for(var U=Math.floor(Math.abs(N/(Math.PI/2)))+1,V=N/U,H=4/3*(1-Math.cos(V/2))/Math.sin(V/2),L=d*h,E=d*p,_=v*h,W=v*p,X=Math.cos(A),Y=Math.sin(A),G=0;U>G;++G){var q=A+V,Z=Math.cos(q),j=Math.sin(q),J=s-H*(L*Y+W*X),Q=c+H*(E*X-_*Y),K=z+(L*Z-W*j),tt=$+(_*Z+E*j),et=K+H*(L*j+W*Z),nt=tt+H*(_*j-E*Z);r.push(e.cubicBezier(J,Q,et,nt,K,tt)),s=K,c=tt,A=q,X=Z,Y=j}return r}e.ellipticalArc=n;var i=2e-6,a=19e-6,o=117e-6}(n=e.segments||(e.segments={}))}(e=t.path||(t.path={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){function e(t,e){return{isSingle:!1,sx:null,sy:null,x:t,y:e,ex:t,ey:e,draw:function(n){n.lineTo(t,e)},extendFillBox:function(n){n.l=Math.min(n.l,t),n.r=Math.max(n.r,t),n.t=Math.min(n.t,e),n.b=Math.max(n.b,e)},extendStrokeBox:function(t,e){this.extendFillBox(t)},toString:function(){return"L"+t.toString()+","+e.toString()},getStartVector:function(){return[t-this.sx,e-this.sy]},getEndVector:function(){return[t-this.sx,e-this.sy]}}}t.line=e}(e=t.segments||(t.segments={}))}(e=t.path||(t.path={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){function e(t,e){return{sx:null,sy:null,ex:t,ey:e,isSingle:!1,isMove:!0,x:t,y:e,draw:function(n){n.moveTo(t,e)},extendFillBox:function(n){n.l=Math.min(n.l,t),n.r=Math.max(n.r,t),n.t=Math.min(n.t,e),n.b=Math.max(n.b,e)},extendStrokeBox:function(t,e){this.extendFillBox(t)},toString:function(){return"M"+t.toString()+","+e.toString()},getStartVector:function(){return null},getEndVector:function(){return null}}}t.move=e}(e=t.segments||(t.segments={}))}(e=t.path||(t.path={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){function e(t,e,r,i){return{sx:null,sy:null,ex:r,ey:i,isSingle:!1,cpx:t,cpy:e,x:r,y:i,draw:function(n){n.quadraticCurveTo(t,e,r,i)},extendFillBox:function(a){var o=n(this.sx,t,r,this.sy,e,i);null!=o.x&&(a.l=Math.min(a.l,o.x),a.r=Math.max(a.r,o.x)),null!=o.y&&(a.t=Math.min(a.t,o.y),a.b=Math.max(a.b,o.y)),a.l=Math.min(a.l,r),a.r=Math.max(a.r,r),a.t=Math.min(a.t,i),a.b=Math.max(a.b,i)},extendStrokeBox:function(a,o){var s=o.strokeThickness/2,c=n(this.sx,t,r,this.sy,e,i);c.x&&(a.l=Math.min(a.l,c.x-s),a.r=Math.max(a.r,c.x+s)),c.y&&(a.t=Math.min(a.t,c.y-s),a.b=Math.max(a.b,c.y+s)),a.l=Math.min(a.l,r),a.r=Math.max(a.r,r),a.t=Math.min(a.t,i),a.b=Math.max(a.b,i)},toString:function(){return"Q"+t.toString()+","+e.toString()+" "+r.toString()+","+i.toString()},getStartVector:function(){return[2*(t-this.sx),2*(e-this.sy)]},getEndVector:function(){return[2*(r-t),2*(i-e)]}}}function n(t,e,n,i,a,o){return{x:r(t,e,n),y:r(i,a,o)}}function r(t,e,n){var r=(t-e)/(t-2*e+n);return 0>r||r>1?null:t*Math.pow(1-r,2)+2*e*(1-r)*r+n*Math.pow(r,2)}t.quadraticBezier=e}(e=t.segments||(t.segments={}))}(e=t.path||(t.path={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){function e(t,e,n,r){return{sx:null,sy:null,isSingle:!0,x:t,y:e,ex:t,ey:e,width:n,height:r,draw:function(i){i.rect(t,e,n,r)},extendFillBox:function(i){i.l=Math.min(i.l,t),i.r=Math.max(i.r,t+n),i.t=Math.min(i.t,e),i.b=Math.max(i.b,e+r)},extendStrokeBox:function(i,a){var o=a.strokeThickness/2;i.l=Math.min(i.l,t-o),i.r=Math.max(i.r,t+n+o),i.t=Math.min(i.t,e-o),i.b=Math.max(i.b,e+r+o)},getStartVector:function(){return null},getEndVector:function(){return null}}}t.rect=e}(e=t.segments||(t.segments={}))}(e=t.path||(t.path={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){function n(n,r,i,a,o,s){return 0===o&&0===s?e.rect(n,r,i,a):{sx:null,sy:null,ex:n,ey:r,isSingle:!0,x:n,y:r,width:i,height:a,radiusX:o,radiusY:s,draw:function(e){t.shapes.rectangle.helpers.draw(e,n,r,i,a,o,s)},extendFillBox:function(t){t.l=Math.min(t.l,n),t.r=Math.max(t.r,n+i),t.t=Math.min(t.t,r),t.b=Math.max(t.b,r+a)},extendStrokeBox:function(t,e){var o=e.strokeThickness/2;t.l=Math.min(t.l,n-o),t.r=Math.max(t.r,n+i+o),t.t=Math.min(t.t,r-o),t.b=Math.max(t.b,r+a+o)},getStartVector:function(){return null},getEndVector:function(){return null}}}e.roundedRect=n}(n=e.segments||(e.segments={}))}(e=t.path||(t.path={}))}(minerva||(minerva={})),CanvasRenderingContext2D.prototype.hasOwnProperty("backingStorePixelRatio")||Object.defineProperty(CanvasRenderingContext2D.prototype,"backingStorePixelRatio",{get:function(){var t=this;return t.webkitBackingStorePixelRatio||t.mozBackingStorePixelRatio||t.msBackingStorePixelRatio||t.oBackingStorePixelRatio||1}}),CanvasRenderingContext2D.prototype.ellipse||(CanvasRenderingContext2D.prototype.ellipse=function(t,e,n,r,i,a,o,s){this.save(),this.translate(t,e),this.rotate(i),this.scale(n,r),this.arc(0,0,1,a,o,s),this.restore()}),CanvasRenderingContext2D.prototype.isPointInStroke||(CanvasRenderingContext2D.prototype.isPointInStroke=function(t,e){return!1});var minerva;!function(t){var e;!function(e){var n;!function(e){var n=function(n){function r(){n.apply(this,arguments)}return __extends(r,n),r.prototype.init=function(){this.setMeasurePipe(t.singleton(e.measure.ShapeMeasurePipeDef)).setArrangePipe(t.singleton(e.arrange.ShapeArrangePipeDef)).setRenderPipe(t.singleton(e.render.ShapeRenderPipeDef)).setProcessUpPipe(t.singleton(e.processup.ShapeProcessUpPipeDef)).setHitTestPipe(t.singleton(e.hittest.ShapeHitTestPipeDef));var r=this.assets;r.naturalBounds=new t.Rect,r.shapeFlags=t.ShapeFlags.None,r.shapeRect=new t.Rect,r.fill=null,r.stretch=t.Stretch.None,r.stroke=null,r.strokeThickness=1,r.strokeDashArray=[],r.strokeDashCap=t.PenLineCap.Flat,r.strokeDashOffset=0,r.strokeStartLineCap=t.PenLineCap.Flat,r.strokeEndLineCap=t.PenLineCap.Flat,r.strokeLineJoin=t.PenLineJoin.Miter,r.strokeMiterLimit=10,n.prototype.init.call(this)},r.prototype.invalidateNaturalBounds=function(){var t=this.assets.naturalBounds;t.x=t.y=t.width=t.height=0,this.invalidateMeasure(),this.updateBounds(!0)},r}(t.core.Updater);e.ShapeUpdater=n}(n=e.shape||(e.shape={}))}(e=t.shapes||(t.shapes={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(n){var r=function(e){function r(){e.apply(this,arguments)}return __extends(r,e),r.prototype.init=function(){this.setMeasurePipe(t.singleton(n.measure.EllipseMeasurePipeDef)).setRenderPipe(t.singleton(n.render.EllipseRenderPipeDef)).setHitTestPipe(t.singleton(n.hittest.EllipseHitTestPipeDef));var r=this.assets;r.stretch=t.Stretch.Fill,e.prototype.init.call(this)},r}(e.shape.ShapeUpdater);n.EllipseUpdater=r}(n=e.ellipse||(e.ellipse={}))}(e=t.shapes||(t.shapes={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(n){var r=function(e){function r(){e.apply(this,arguments)}return __extends(r,e),r.prototype.init=function(){this.setMeasurePipe(t.singleton(n.measure.PathMeasurePipeDef)).setProcessUpPipe(t.singleton(n.processup.PathProcessUpPipeDef)).setRenderPipe(t.singleton(n.render.PathRenderPipeDef)).setHitTestPipe(t.singleton(n.hittest.PathHitTestPipeDef));var r=this.assets;r.stretch=t.Stretch.None,r.stretchXform=t.mat3.identity(),e.prototype.init.call(this)},r}(e.shape.ShapeUpdater);n.PathUpdater=r}(n=e.path||(e.path={}))}(e=t.shapes||(t.shapes={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(n){var r=function(r){function i(){r.apply(this,arguments)}return __extends(i,r),i.prototype.init=function(){this.setMeasurePipe(t.singleton(n.measure.LineMeasurePipeDef));var i=this.assets;i.x1=0,i.y1=0,i.x2=0,i.y2=0,i.data=new e.path.AnonPathGeometry,r.prototype.init.call(this)},i.prototype.invalidatePath=function(){this.assets.data.old=!0,this.invalidateNaturalBounds()},i}(e.path.PathUpdater);n.LineUpdater=r}(n=e.line||(e.line={}))}(e=t.shapes||(t.shapes={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n=function(){function e(){this.old=!0,this.path=new t.path.Path,this.fillRule=t.FillRule.EvenOdd}return e.prototype.Draw=function(t){this.path.draw(t.raw)},e.prototype.GetBounds=function(t){return this.path.calcBounds(t)},e}();e.AnonPathGeometry=n}(n=e.path||(e.path={}))}(e=t.shapes||(t.shapes={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(n){var r=function(r){function i(){r.apply(this,arguments)}return __extends(i,r),i.prototype.init=function(){this.setMeasurePipe(t.singleton(n.measure.PolylineMeasurePipeDef));var i=this.assets;i.data=new e.path.AnonPathGeometry,i.isClosed=!1,r.prototype.init.call(this)},i.prototype.invalidateFillRule=function(){this.assets.data.fillRule=this.assets.fillRule,this.invalidate()},i.prototype.invalidatePath=function(){this.assets.data.old=!0,this.invalidateNaturalBounds()},i}(e.path.PathUpdater);n.PolylineUpdater=r}(n=e.polyline||(e.polyline={}))}(e=t.shapes||(t.shapes={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(e){var n=function(t){function e(){t.apply(this,arguments)}return __extends(e,t),e.prototype.init=function(){t.prototype.init.call(this),this.assets.isClosed=!0},e}(t.polyline.PolylineUpdater);e.PolygonUpdater=n}(e=t.polygon||(t.polygon={}))}(e=t.shapes||(t.shapes={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(n){var r=function(e){function r(){e.apply(this,arguments)}return __extends(r,e),r.prototype.init=function(){this.setMeasurePipe(t.singleton(n.measure.RectangleMeasurePipeDef)).setRenderPipe(t.singleton(n.render.RectangleRenderPipeDef)).setHitTestPipe(t.singleton(n.hittest.RectangleHitTestPipeDef));var r=this.assets;r.stretch=t.Stretch.Fill,r.radiusX=0,r.radiusY=0,e.prototype.init.call(this)},r}(e.shape.ShapeUpdater);n.RectangleUpdater=r}(n=e.rectangle||(e.rectangle={}))}(e=t.shapes||(t.shapes={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n=/firefox/i.test(navigator.userAgent),r=function(){function e(){this.isSelected=!1,this.text=null,this.width=0}return e.render=function(r,i,a){var o=i.font.getHeight(),s=new t.Rect(0,0,r.width,o),c=a.raw,u=r.isSelected?i.selectionBackground||e.DEFAULT_SELECTION_BG:i.background;u&&(c.beginPath(),c.rect(s.x,s.y,s.width,s.height),a.fillEx(u,s));var l=r.isSelected?i.selectionForeground||e.DEFAULT_SELECTION_FG:i.foreground,h="#000000";l&&(l.setupBrush(c,s),h=l.toHtml5Object()),c.fillStyle=h,c.font=i.font.toHtml5Object(),c.textAlign="left",n?(c.textBaseline="bottom",c.fillText(r.text,0,o)):(c.textBaseline="top",c.fillText(r.text,0,0)),i.isUnderlined&&(c.beginPath(),c.moveTo(0,o),c.lineTo(r.width,o),c.lineWidth=2,c.strokeStyle=h,c.stroke())},e.DEFAULT_SELECTION_BG=new t.FakeBrush("#444444"),e.DEFAULT_SELECTION_FG=new t.FakeBrush("#FFFFFF"),e}();e.Cluster=r}(n=e.layout||(e.layout={}))}(e=t.text||(t.text={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n=function(){function n(){this.runs=[],this.width=0,this.height=0}return n.getLineFromY=function(t,e){for(var n,r=0,i=0;r<t.length;r++)if(n=t[r],i+=n.height,i>e)return n;return t[t.length-1]},n.elliptify=function(n,r,i,a){if(n.textTrimming===t.TextTrimming.None||n.textWrapping!==t.TextWrapping.NoWrap||i.width<=r.maxWidth)return!1;for(var o=[],s=i.runs,c=0,u=0;u<s.length;u++){var l=s[u];if(c+=l.width,o.push(l),c>=r.maxWidth){c-=l.width,e.Run.elliptify(l,r.maxWidth-c,n.textTrimming,a),i.width=c+l.width;break}}return i.runs=o,!0},n}();e.Line=n}(n=e.layout||(e.layout={}))}(e=t.text||(t.text={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){function n(t,e,n){if(e>0){for(var r=t.text.length,i=0,a=0;(i=a)<r&&-1!==(a=t.text.indexOf(" ",i+1));)if(n(a)>e){t.text=t.text.substr(0,i);break}if(r===t.text.length)return}else t.text="";t.text+="...",t.length=t.text.length,t.width=n(t.length)}function r(t,e,n){if(e>0){for(var r=t.text.length,i=0,a=r,o=Math.ceil(i+(a-i)/2),s=0;a-i>1&&1e3>s;o=Math.ceil(i+(a-i)/2),s++)n(o)>e?a=o:i=o;if(t.text=t.text.substr(0,i),r===t.text.length)return}else t.text="";t.text+="...",t.length=t.text.length,t.width=n(t.length)}var i=function(){function i(){this.text="",this.start=0,this.length=0,this.width=0}return i.splitSelection=function(t,n,r,i){t.pre=t.sel=t.post=null;var a=t.start,o=a+t.length,s=Math.min(t.length,Math.max(0,n-a));if(s>0){var c=t.pre=new e.Cluster;c.text=t.text.substr(0,s),c.width=i(c.text,t.attrs)}var u=Math.min(t.length,Math.max(0,o-r));if(u>0){var l=t.post=new e.Cluster;l.text=t.text.substr(t.length-u),l.width=i(l.text,t.attrs)}var h=Math.min(o,Math.max(a,n)),p=Math.max(a,Math.min(o,r)),f=Math.max(0,p-h);if(f>0){var d=t.sel=new e.Cluster;d.isSelected=!0,d.text=t.text.substr(h-a,f),d.width=i(d.text,t.attrs)}},i.elliptify=function(e,i,a,o){if(!(e.width<i)){var s=e.text,c=e.attrs.font,u=function(t){return o(s.substr(0,t),c)};a===t.TextTrimming.WordEllipsis?n(e,i-o("...",c),u):r(e,i-o("...",c),u)}},i}();e.Run=i}(n=e.layout||(e.layout={}))}(e=t.text||(t.text={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(n){function r(t,n,r){var o={text:r.text,index:0,max:r.text.length},s=r.font,c=new e.layout.Line;c.height=s.getHeight(),n.actualHeight+=c.height,n.lines.push(c);var u=new e.layout.Run;for(u.attrs=r,c.runs.push(u);o.index<o.max;){var l=i(u,o,s);l&&(n.actualWidth=Math.max(n.actualWidth,u.width),c.width=u.width,c=new e.layout.Line,c.height=s.getHeight(),n.actualHeight+=c.height,n.lines.push(c),u=new e.layout.Run,u.attrs=r,c.runs.push(u))}c.width=u.width,e.layout.Line.elliptify(t,n,c,a),n.actualWidth=Math.max(n.actualWidth,u.width)}function i(t,e,n){var r=e.text.substr(e.index),i=r.indexOf("\r"),o=r.indexOf("\n");return 0>i&&0>o?(t.length=r.length,t.text=r,t.width=a(t.text,n),e.index+=t.length,!1):i>-1&&i+1===o?(t.length=o+1,t.text=r.substr(0,t.length),t.width=a(t.text,n),e.index+=t.length,!0):i>-1&&o>i?(t.length=i+1,t.text=r.substr(0,t.length),t.width=a(t.text,n),e.index+=t.length,!0):(t.length=o+1,t.text=r.substr(0,t.length),t.width=a(t.text,n),e.index+=t.length,!0)}function a(e,n){return t.engine.Surface.measureWidth(e,n)}n.doLayoutNoWrap=r}(n=e.run||(e.run={}))}(e=t.text||(t.text={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(n){function r(t,n,r){var o={text:r.text,index:0,max:r.text.length},s=r.font,c=new e.layout.Line;c.height=s.getHeight(),n.actualHeight+=c.height,n.lines.push(c);var u=new e.layout.Run;for(u.attrs=r,c.runs.push(u);o.index<o.max;){var l=isFinite(n.maxWidth)?a(u,o,s,n.maxWidth):i(u,o,s);l&&(n.actualWidth=Math.max(n.actualWidth,u.width),c.width=u.width,c=new e.layout.Line,c.height=s.getHeight(),n.actualHeight+=c.height,n.lines.push(c),u=new e.layout.Run,u.attrs=r,c.runs.push(u))}c.width=u.width,n.actualWidth=Math.max(n.actualWidth,u.width)}function i(t,e,n){var r=e.text.substr(e.index),i=r.indexOf("\r"),a=r.indexOf("\n");return 0>i&&0>a?(t.length=r.length,t.text=r,t.width=o(t.text,n),e.index+=t.length,!1):i>-1&&i+1===a?(t.length=a+1,t.text=r.substr(0,t.length),t.width=o(t.text,n),e.index+=t.length,!0):i>-1&&a>i?(t.length=i+1,t.text=r.substr(0,t.length),t.width=o(t.text,n),e.index+=t.length,!0):(t.length=a+1,t.text=r.substr(0,t.length),t.width=o(t.text,n),e.index+=t.length,!0)}function a(t,e,n,r){for(var i,a=e.text,s=e.index,c=-1,u="",l=0;e.index<e.max;){if(i=a.charAt(e.index),u+=i,l=o(u,n),"\n"===i)return t.length=e.index-s+1,t.text=a.substr(s,t.length),t.width=o(t.text,n),e.index++,!0;if("\r"===i)return t.length=e.index-s+1,e.index++,"\n"===a.charAt(e.index)&&(t.length++,e.index++),t.text=a.substr(s,t.length),t.width=o(t.text,n),!0;if(l>r){var h=c>-1?c+1:e.index;return t.length=h-s||1,t.text=a.substr(s,t.length),t.width=o(t.text,n),e.index=s+t.length,e.index<e.max}" "===i&&(c=e.index),e.index++}return t.text=a.substr(s),t.length=t.text.length,t.width=o(t.text,n),!1}function o(e,n){return t.engine.Surface.measureWidth(e,n)}n.doLayoutWrap=r}(n=e.run||(e.run={}))}(e=t.text||(t.text={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(n){var r=function(){function r(){}return r.prototype.layout=function(r,i,a){var o=a.text;if(!o){var s=new e.layout.Line;s.height=a.font.getHeight(),i.lines.push(s);var c=new e.layout.Run;return c.attrs=a,s.runs.push(c),i.actualHeight=s.height,!1}return r.textWrapping===t.TextWrapping.NoWrap?n.doLayoutNoWrap(r,i,a):n.doLayoutWrap(r,i,a),i.selCached=!1,!0},r}();n.RunLayoutDef=r}(n=e.run||(e.run={}))}(e=t.text||(t.text={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){function n(e,n,r,i,a){if(!i.subtree)return!0;var o=n.totalBorder;t.Thickness.copyTo(e.padding,o),t.Thickness.add(o,e.borderThickness);var s=n.childRect;return s.x=s.y=0,t.Size.copyTo(n.finalSize,s),t.Thickness.shrinkRect(o,s),!0}function r(e,n,r,i,a){return i.subtree&&i.subtree.arrange(n.childRect),t.Size.copyTo(n.finalSize,n.arrangedSize),!0}var i=function(e){function i(){e.call(this),this.addTapinBefore("doOverride","preOverride",n).replaceTapin("doOverride",r)}return __extends(i,e),i.prototype.createState=function(){var n=e.prototype.createState.call(this);return n.totalBorder=new t.Thickness,n},i}(t.core.arrange.ArrangePipeDef);e.BorderArrangePipeDef=i,e.preOverride=n,e.doOverride=r}(n=e.arrange||(e.arrange={}))}(n=e.border||(e.border={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n=function(t){function e(){t.call(this),this.replaceTapin("canHitInside",r.canHitInside)}return __extends(e,t),e}(t.core.hittest.HitTestPipeDef);e.BorderHitTestPipeDef=n;var r;!function(t){function e(t,e,n,r){return t.hitChildren?!0:t.assets.background||t.assets.borderBrush?!0:(n.shift(),r.restore(),!1)}t.canHitInside=e}(r=e.tapins||(e.tapins={}))}(n=e.hittest||(e.hittest={}))}(n=e.border||(e.border={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){function n(e,n,r,i,a){var o=n.totalBorder;return t.Thickness.copyTo(e.padding,o),t.Thickness.add(o,e.borderThickness),t.Thickness.shrinkSize(o,n.availableSize),!0}function r(e,n,r,i,a){var o=r.desiredSize;return i.subtree&&(i.subtree.measure(n.availableSize),t.Size.copyTo(i.subtree.assets.desiredSize,o)),!0}function i(e,n,r,i,a){return t.Thickness.growSize(n.totalBorder,r.desiredSize),t.Size.min(r.desiredSize,n.availableSize),!0}var a=function(e){function a(){e.call(this),this.addTapinBefore("doOverride","preOverride",n).replaceTapin("doOverride",r).addTapinAfter("doOverride","postOverride",i)}return __extends(a,e),a.prototype.createState=function(){var n=e.prototype.createState.call(this);return n.totalBorder=new t.Thickness,n},a}(t.core.measure.MeasurePipeDef);e.BorderMeasurePipeDef=a,e.preOverride=n,e.doOverride=r,e.postOverride=i}(n=e.measure||(e.measure={}))}(n=e.border||(e.border={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n=function(n){function r(){n.call(this),this.addTapinBefore("doRender","calcShouldRender",e.tapins.calcShouldRender).addTapinBefore("doRender","calcInnerOuter",e.tapins.calcInnerOuter).replaceTapin("doRender",e.tapins.doRender)}return __extends(r,n),r.prototype.createState=function(){var e=n.prototype.createState.call(this);return e.fillExtents=new t.Rect,e.innerCornerRadius=new t.CornerRadius,e.outerCornerRadius=new t.CornerRadius,e},r}(t.core.render.RenderPipeDef);e.BorderRenderPipeDef=n}(n=e.render||(e.render={}))}(n=e.border||(e.border={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n=function(n){function r(){n.call(this),this.addTapinBefore("doRender","calcBalanced",e.tapins.shim.calcBalanced).addTapinBefore("doRender","invalidatePattern",e.tapins.shim.invalidatePattern).addTapinBefore("doRender","createPattern",e.tapins.shim.createPattern).replaceTapin("doRender",e.tapins.shim.doRender)}return __extends(r,n),
r.prototype.createState=function(){var e=n.prototype.createState.call(this);return e.middleCornerRadius=new t.CornerRadius,e.strokeExtents=new t.Rect,e.pattern=null,e.oldMetrics=null,e},r}(e.BorderRenderPipeDef);e.ShimBorderRenderPipeDef=n}(n=e.render||(e.render={}))}(n=e.border||(e.border={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n=function(t){function n(){t.call(this),this.replaceTapin("doOverride",e.tapins.doOverride)}return __extends(n,t),n}(t.core.arrange.ArrangePipeDef);e.PanelArrangePipeDef=n}(n=e.arrange||(e.arrange={}))}(n=e.panel||(e.panel={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(e){var n;!function(e){var n=function(t){function n(){t.call(this),this.replaceTapin("doOverride",e.tapins.doOverride).replaceTapin("buildLayoutClip",e.tapins.buildLayoutClip)}return __extends(n,t),n}(t.panel.arrange.PanelArrangePipeDef);e.CanvasArrangePipeDef=n}(n=e.arrange||(e.arrange={}))}(e=t.canvas||(t.canvas={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){function n(t,e,n,r,i){var a=n.desiredSize;a.width=a.height=0;for(var o=r.walk();o.step();){o.current.measure(e.availableSize);var s=o.current.assets.desiredSize;a.width=Math.max(a.width,s.width),a.height=Math.max(a.height,s.height)}return!0}var r=function(t){function e(){t.call(this),this.replaceTapin("doOverride",n)}return __extends(e,t),e}(t.core.measure.MeasurePipeDef);e.PanelMeasurePipeDef=r}(n=e.measure||(e.measure={}))}(n=e.panel||(e.panel={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(e){var n;!function(e){var n=function(t){function n(){t.call(this),this.replaceTapin("doOverride",e.tapins.doOverride)}return __extends(n,t),n}(t.panel.measure.PanelMeasurePipeDef);e.CanvasMeasurePipeDef=n}(n=e.measure||(e.measure={}))}(e=t.canvas||(t.canvas={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n=function(t){function e(){t.call(this),this.replaceTapin("processLayoutClip",r.processLayoutClip)}return __extends(e,t),e}(t.core.processdown.ProcessDownPipeDef);e.CanvasProcessDownPipeDef=n;var r;!function(e){function n(e,n,r,i,a){if(0===(e.dirtyFlags&t.DirtyFlags.LayoutClip))return!0;var o=e.compositeLayoutClip;return o.x=o.y=o.width=o.height,!0}e.processLayoutClip=n}(r=e.tapins||(e.tapins={}))}(n=e.processdown||(e.processdown={}))}(n=e.canvas||(e.canvas={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n=function(t){function n(){t.call(this),this.replaceTapin("calcPaintBounds",e.tapins.calcPaintBounds)}return __extends(n,t),n}(t.core.processup.ProcessUpPipeDef);e.CanvasProcessUpPipeDef=n}(n=e.processup||(e.processup={}))}(n=e.canvas||(e.canvas={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n=function(t){function e(){t.call(this),this.addTapinBefore("canHit","shouldSkip",r.shouldSkip).replaceTapin("canHitInside",r.canHitInside)}return __extends(e,t),e}(t.core.hittest.HitTestPipeDef);e.ControlHitTestPipeDef=n;var r;!function(t){function e(t,e,n,r){return!!t.assets.isEnabled}function n(t,e,n,r){return t.hitChildren?!0:(n.shift(),r.restore(),!1)}t.shouldSkip=e,t.canHitInside=n}(r=e.tapins||(e.tapins={}))}(n=e.hittest||(e.hittest={}))}(n=e.control||(e.control={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(n){var r;!function(n){var r=function(e){function r(){e.call(this),this.addTapinBefore("doOverride","restoreMeasureResults",n.tapins.restoreMeasureResults).addTapinBefore("doOverride","calcConsumed",n.tapins.calcConsumed).addTapinBefore("doOverride","setActuals",n.tapins.setActuals).replaceTapin("doOverride",n.tapins.doOverride)}return __extends(r,e),r.prototype.createState=function(){var n=e.prototype.createState.call(this);return n.consumed=new t.Size,n},r}(e.panel.arrange.PanelArrangePipeDef);n.GridArrangePipeDef=r}(r=n.arrange||(n.arrange={}))}(n=e.grid||(e.grid={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){var e;!function(e){function n(n,r){for(var i=0;2>i;i++)for(var a=0===i?n:r,o=a.length,s=o-1;s>=0;s--)for(var c=s;c>=0;c--){for(var u=!1,l=s;l>=c;l--)u=u||a[l][l].type===t.GridUnitType.Star;for(var h=a[s][c].desired,p=0,f=s;f>=c;f--)p+=a[f][f].desired;if(h>p){var d=h-p;u?d=e.assignSize(a,c,s,d,t.GridUnitType.Star,!0):(d=e.assignSize(a,c,s,d,t.GridUnitType.Pixel,!0),d=e.assignSize(a,c,s,d,t.GridUnitType.Auto,!0))}}for(var i=0;i<n.length;i++)n[i][i].offered=n[i][i].desired;for(var i=0;i<a.length;i++)r[i][i].offered=r[i][i].desired}e.allocateDesiredSize=n}(e=t.helpers||(t.helpers={}))}(e=t.grid||(t.grid={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){var e;!function(e){function n(e,n,r,i,a,o){for(var s=0,c=!1,u=0,l=n;r>=l;l++){var h=e[l][l];u=o?h.desired:h.offered,u<h.max&&(s+=a===t.GridUnitType.Star?h.stars:1)}do{c=!1;var p=i/s;for(l=n;r>=l;l++)if(h=e[l][l],u=o?h.desired:h.offered,h.type===a&&u<h.max){var f=u;f+=p*(a===t.GridUnitType.Star?h.stars:1),f=Math.min(f,h.max),c=c||f>u,i-=f-u,o?h.desired=f:h.offered=f}}while(c);return i}e.assignSize=n}(e=t.helpers||(t.helpers={}))}(e=t.grid||(t.grid={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){var e;!function(e){function n(n,r,i){for(var a=i.width,o=0;o<n.length;o++){var s=n[o][o];s.type===t.GridUnitType.Star?s.offered=0:a=Math.max(a-s.offered,0)}a=e.assignSize(n,0,n.length-1,a,t.GridUnitType.Star,!1);for(var o=0;o<r.length;o++){var s=n[o][o];s.type===t.GridUnitType.Star&&r[o].setActualWidth(s.offered)}}e.expandStarCols=n}(e=t.helpers||(t.helpers={}))}(e=t.grid||(t.grid={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){var e;!function(e){function n(n,r,i){for(var a=i.height,o=0;o<n.length;o++){var s=n[o][o];s.type===t.GridUnitType.Star?s.offered=0:a=Math.max(a-s.offered,0)}a=e.assignSize(n,0,n.length-1,a,t.GridUnitType.Star,!1);for(var o=0;o<r.length;o++){var s=n[o][o];s.type===t.GridUnitType.Star&&r[o].setActualHeight(s.offered)}}e.expandStarRows=n}(e=t.helpers||(t.helpers={}))}(e=t.grid||(t.grid={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){var e=function(){function t(t,e,n,r){this.matrix=t,this.row=e,this.col=n,this.size=r}return t.row=function(e,n,r){return new t(e,n.row+n.rowspan-1,n.row,r.assets.desiredSize.height)},t.col=function(e,n,r){return new t(e,n.col+n.colspan-1,n.col,r.assets.desiredSize.width)},t}();t.GridChildPlacement=e}(e=t.measure||(t.measure={}))}(e=t.grid||(t.grid={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){var e;!function(e){!function(t){t[t.AutoAuto=0]="AutoAuto",t[t.StarAuto=1]="StarAuto",t[t.AutoStar=2]="AutoStar",t[t.StarAutoAgain=3]="StarAutoAgain",t[t.NonStar=4]="NonStar",t[t.RemainingStar=5]="RemainingStar"}(e.OverridePass||(e.OverridePass={}));var n=e.OverridePass,r=function(){function e(){}return e.prototype.init=function(e,n,r){var i=this.col=Math.min(e.getAttachedValue("Grid.Column"),r.length-1);isNaN(i)&&(this.col=i=0);var a=this.row=Math.min(e.getAttachedValue("Grid.Row"),n.length-1);isNaN(a)&&(this.row=a=0);var o=this.colspan=Math.min(e.getAttachedValue("Grid.ColumnSpan"),r.length-i);isNaN(o)&&(this.colspan=o=1);var s=this.rowspan=Math.min(e.getAttachedValue("Grid.RowSpan"),n.length-a);isNaN(s)&&(this.rowspan=s=1),this.starRow=this.autoRow=this.starCol=this.autoCol=!1;for(var c=a;a+s>c;c++)this.starRow=this.starRow||n[c][c].type===t.GridUnitType.Star,this.autoRow=this.autoRow||n[c][c].type===t.GridUnitType.Auto;for(var c=i;i+o>c;c++)this.starCol=this.starCol||r[c][c].type===t.GridUnitType.Star,this.autoCol=this.autoCol||r[c][c].type===t.GridUnitType.Auto;return this},e.prototype.shouldMeasurePass=function(t,e,r){return e.width=e.height=0,this.autoRow&&this.autoCol&&!this.starRow&&!this.starCol?r!==n.AutoAuto?!1:(e.width=Number.POSITIVE_INFINITY,e.height=Number.POSITIVE_INFINITY,!0):this.starRow&&this.autoCol&&!this.starCol?r!==n.StarAuto&&r!==n.StarAutoAgain?!1:(r===n.AutoAuto&&t.hasAutoStar&&(e.height=Number.POSITIVE_INFINITY),e.width=Number.POSITIVE_INFINITY,!0):this.autoRow&&this.starCol&&!this.starRow?r!==n.AutoStar?!1:(e.height=Number.POSITIVE_INFINITY,!0):!this.autoRow&&!this.autoCol||this.starRow||this.starCol?this.starRow||this.starCol?r===n.RemainingStar:r===n.NonStar:r!==n.NonStar?!1:(this.autoRow&&(e.height=Number.POSITIVE_INFINITY),this.autoCol&&(e.width=Number.POSITIVE_INFINITY),!0)},e.prototype.size=function(t,e,n){for(var r=this.row;r<this.row+this.rowspan;r++)t.height+=e[r][r].offered;for(var r=this.col;r<this.col+this.colspan;r++)t.width+=n[r][r].offered},e}();e.GridChildShape=r}(e=t.measure||(t.measure={}))}(e=t.grid||(t.grid={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(n){var r;!function(n){var r=function(e){function r(){e.call(this),this.addTapinBefore("doOverride","ensureRowMatrix",n.tapins.ensureRowMatrix).addTapinBefore("doOverride","prepareRowMatrix",n.tapins.prepareRowMatrix).addTapinBefore("doOverride","ensureColMatrix",n.tapins.ensureColMatrix).addTapinBefore("doOverride","prepareColMatrix",n.tapins.prepareColMatrix).addTapinBefore("doOverride","buildShape",n.tapins.buildShape).addTapinBefore("doOverride","doOverrideAutoAuto",n.tapins.createDoOverridePass(n.OverridePass.AutoAuto)).addTapinBefore("doOverride","doOverrideStarAuto",n.tapins.createDoOverridePass(n.OverridePass.StarAuto)).addTapinBefore("doOverride","doOverrideAutoStar",n.tapins.createDoOverridePass(n.OverridePass.AutoStar)).addTapinBefore("doOverride","doOverrideStarAutoAgain",n.tapins.createDoOverridePass(n.OverridePass.StarAutoAgain)).addTapinBefore("doOverride","doOverrideNonStar",n.tapins.createDoOverridePass(n.OverridePass.NonStar)).addTapinBefore("doOverride","doOverrideRemainingStar",n.tapins.createDoOverridePass(n.OverridePass.RemainingStar)).replaceTapin("doOverride",n.tapins.doOverride).addTapinAfter("doOverride","saveMeasureResults",n.tapins.saveMeasureResults)}return __extends(r,e),r.prototype.createState=function(){var r=e.prototype.createState.call(this);return r.totalStars=new t.Size,r.gridShape=new n.GridShape,r.childShapes=[],r.childSize=new t.Size,r.placements=[],r.placementIndex=0,r},r}(e.panel.measure.PanelMeasurePipeDef);n.GridMeasurePipeDef=r}(r=n.measure||(n.measure={}))}(n=e.grid||(e.grid={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){var e=function(){function t(){this.hasAutoAuto=!1,this.hasStarAuto=!1,this.hasAutoStar=!1}return t.prototype.init=function(t){this.hasAutoAuto=this.hasStarAuto=this.hasAutoStar=!1;for(var e=0;e<t.length;e++){var n=t[e];this.hasAutoAuto=this.hasAutoAuto||n.autoRow&&n.autoCol&&!n.starRow&&!n.starCol,this.hasStarAuto=this.hasStarAuto||n.starRow&&n.autoCol,this.hasAutoStar=this.hasAutoStar||n.autoRow&&n.starCol}},t}();t.GridShape=e}(e=t.measure||(t.measure={}))}(e=t.grid||(t.grid={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n=function(t){function n(){t.call(this),this.addTapinBefore("calcExtents","preCalcExtents",e.tapins.preCalcExtents)}return __extends(n,t),n}(t.core.processup.ProcessUpPipeDef);e.PanelProcessUpPipeDef=n}(n=e.processup||(e.processup={}))}(n=e.panel||(e.panel={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(e){var n;!function(e){var n=function(t){function n(){t.call(this),this.replaceTapin("preCalcExtents",e.tapins.preCalcExtents).replaceTapin("calcExtents",e.tapins.calcExtents)}return __extends(n,t),n}(t.panel.processup.PanelProcessUpPipeDef);e.GridProcessUpPipeDef=n}(n=e.processup||(e.processup={}))}(e=t.grid||(t.grid={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){function n(e,n,r,i,a,o){var s=e.background;if(!s||s.isTransparent())return!0;var c=e.extents;if(t.Rect.isEmpty(c))return!0;i.save(),t.core.helpers.renderLayoutClip(i,e,o);var u=i.raw;return u.beginPath(),u.rect(c.x,c.y,c.width,c.height),i.fillEx(s,c),i.restore(),!0}var r=function(t){function e(){t.call(this),this.replaceTapin("doRender",n)}return __extends(e,t),e}(t.core.render.RenderPipeDef);e.PanelRenderPipeDef=r}(n=e.render||(e.render={}))}(n=e.panel||(e.panel={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(n){var r;!function(n){var r=function(e){function n(){e.call(this),this.addTapinAfter("doRender","renderGridLines",i.renderGridLines)}return __extends(n,e),n.prototype.createState=function(){var n=e.prototype.createState.call(this);return n.framework=new t.Size,n},n}(e.panel.render.PanelRenderPipeDef);n.GridRenderPipeDef=r;var i;!function(e){function n(e,n,r,i,a,o){if(!e.showGridLines)return!0;var s=n.framework;s.width=e.actualWidth,s.height=e.actualHeight,t.core.helpers.coerceSize(s,e);var c=i.raw;c.save();for(var u=e.columnDefinitions,l=0,h=0;l<u.length;l++)h+=u[l].ActualWidth,c.beginPath(),c.setLineDash([5]),c.moveTo(h,0),c.lineTo(h,s.height),c.stroke();for(var p=e.rowDefinitions,l=0,f=0;l<p.length;l++)f+=p[l].ActualHeight,c.beginPath(),c.setLineDash([5]),c.moveTo(0,f),c.lineTo(s.width,f),c.stroke();return c.restore(),!0}e.renderGridLines=n}(i=n.tapins||(n.tapins={}))}(r=n.render||(n.render={}))}(n=e.grid||(e.grid={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n=function(n){function r(){n.call(this),this.addTapinAfter("invalidateFuture","invalidateMetrics",e.tapins.invalidateMetrics).addTapinBefore("doOverride","calcImageBounds",e.tapins.calcImageBounds).addTapinBefore("doOverride","calcStretch",e.tapins.calcStretch).replaceTapin("doOverride",e.tapins.doOverride)}return __extends(r,n),r.prototype.createState=function(){var e=n.prototype.createState.call(this);return e.imageBounds=new t.Rect,e.stretchX=0,e.stretchY=0,e},r}(t.core.arrange.ArrangePipeDef);e.ImageArrangePipeDef=n}(n=e.arrange||(e.arrange={}))}(n=e.image||(e.image={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n=function(n){function r(){n.call(this),this.replaceTapin("insideChildren",e.tapins.insideChildren).replaceTapin("canHitInside",e.tapins.canHitInside).addTapinAfter("insideObject","insideStretch",e.tapins.insideStretch)}return __extends(r,n),r.prototype.prepare=function(e){e.imgRect=e.imgRect||new t.Rect},r}(t.core.hittest.HitTestPipeDef);e.ImageHitTestPipeDef=n}(n=e.hittest||(e.hittest={}))}(n=e.image||(e.image={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n=function(n){function r(){n.call(this),this.addTapinBefore("doOverride","calcImageBounds",e.tapins.calcImageBounds).addTapinBefore("doOverride","calcStretch",e.tapins.calcStretch).replaceTapin("doOverride",e.tapins.doOverride)}return __extends(r,n),r.prototype.createState=function(){var e=n.prototype.createState.call(this);return e.imageBounds=new t.Rect,e.stretchX=0,e.stretchY=0,e},r}(t.core.measure.MeasurePipeDef);e.ImageMeasurePipeDef=n}(n=e.measure||(e.measure={}))}(n=e.image||(e.image={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n=function(n){function r(){n.call(this),this.addTapinBefore("processLayoutClip","checkNeedImageMetrics",e.tapins.checkNeedImageMetrics).addTapinAfter("checkNeedImageMetrics","prepareImageMetrics",e.tapins.prepareImageMetrics).addTapinAfter("prepareImageMetrics","calcImageTransform",e.tapins.calcImageTransform).addTapinAfter("calcImageTransform","calcOverlap",e.tapins.calcOverlap)}return __extends(r,n),r.prototype.createState=function(){var e=n.prototype.createState.call(this);return e.imgRect=new t.Rect,e.paintRect=new t.Rect,e.calcImageMetrics=!1,e.imgAdjust=!1,e},r.prototype.createOutput=function(){var e=n.prototype.createOutput.call(this);return e.imgXform=t.mat3.identity(),e.overlap=t.RectOverlap.In,e},r.prototype.prepare=function(e,r,i,a,o){n.prototype.prepare.call(this,e,r,i,a,o),i.overlap=e.overlap,t.mat3.copyTo(e.imgXform,i.imgXform)},r.prototype.flush=function(e,r,i,a,o){n.prototype.flush.call(this,e,r,i,a,o),e.overlap=i.overlap,t.mat3.copyTo(i.imgXform,e.imgXform)},r}(t.core.processdown.ProcessDownPipeDef);e.ImageProcessDownPipeDef=n}(n=e.processdown||(e.processdown={}))}(n=e.image||(e.image={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n=function(t){function n(){t.call(this),this.replaceTapin("doRender",e.tapins.doRender)}return __extends(n,t),n}(t.core.render.RenderPipeDef);e.ImageRenderPipeDef=n}(n=e.render||(e.render={}))}(n=e.image||(e.image={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n=function(t){function e(){t.call(this),this.addTapinBefore("canHit","shouldSkip",r.shouldSkip)}return __extends(e,t),e}(t.core.hittest.HitTestPipeDef);e.OverlayHitTestPipeDef=n;var r;!function(t){function e(t,e,n,r){return!!t.assets.isVisible}t.shouldSkip=e}(r=e.tapins||(e.tapins={}))}(n=e.hittest||(e.hittest={}))}(n=e.overlay||(e.overlay={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n=function(t){function e(){t.call(this),this.removeTapin("calcActualSize").removeTapin("calcExtents").removeTapin("calcPaintBounds")}return __extends(e,t),e}(t.core.processup.ProcessUpPipeDef);e.OverlayProcessUpPipeDef=n}(n=e.processup||(e.processup={}))}(n=e.overlay||(e.overlay={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n=function(t){function e(){t.call(this),this.replaceTapin("canHitInside",r.canHitInside)}return __extends(e,t),e}(t.core.hittest.HitTestPipeDef);e.PanelHitTestPipeDef=n;var r;!function(t){function e(t,e,n,r){return t.hitChildren?!0:t.assets.background?!0:(n.shift(),r.restore(),!1)}t.canHitInside=e}(r=e.tapins||(e.tapins={}))}(n=e.hittest||(e.hittest={}))}(n=e.panel||(e.panel={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n=function(t){function e(){t.call(this),this.addTapinBefore("canHit","shouldSkip",r.shouldSkip)}return __extends(e,t),e}(t.core.hittest.HitTestPipeDef);e.PopupHitTestPipeDef=n;var r;!function(t){function e(t,e,n,r){return!!t.assets.isVisible}t.shouldSkip=e}(r=e.tapins||(e.tapins={}))}(n=e.hittest||(e.hittest={}))}(n=e.popup||(e.popup={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n=function(t){function n(){t.call(this),this.addTapinBefore("processXform","preProcessXform",e.tapins.preProcessXform).addTapinAfter("processXform","postProcessXform",e.tapins.postProcessXform)}return __extends(n,t),n}(t.core.processdown.ProcessDownPipeDef);e.PopupProcessDownPipeDef=n}(n=e.processdown||(e.processdown={}))}(n=e.popup||(e.popup={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n=function(t){function e(){t.call(this),this.removeTapin("calcActualSize").removeTapin("calcExtents").removeTapin("calcPaintBounds")}return __extends(e,t),e}(t.core.processup.ProcessUpPipeDef);e.PopupProcessUpPipeDef=n}(n=e.processup||(e.processup={}))}(n=e.popup||(e.popup={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n=function(n){function r(){n.call(this),this.replaceTapin("doOverride",e.tapins.doOverride).addTapinAfter("completeOverride","updateClip",e.tapins.updateClip).addTapinAfter("updateClip","updateExtents",e.tapins.updateExtents)}return __extends(r,n),r.prototype.createOutput=function(){var e=n.prototype.createOutput.call(this);return e.internalClip=new t.Rect,e},r.prototype.prepare=function(e,r,i){t.Rect.copyTo(e.internalClip,i.internalClip),n.prototype.prepare.call(this,e,r,i)},r.prototype.flush=function(e,r,i){n.prototype.flush.call(this,e,r,i),t.Rect.copyTo(i.internalClip,e.internalClip)},r}(t.core.arrange.ArrangePipeDef);e.ScrollContentPresenterArrangePipeDef=n}(n=e.arrange||(e.arrange={}))}(n=e.scrollcontentpresenter||(e.scrollcontentpresenter={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n=function(n){function r(){n.call(this),this.replaceTapin("doOverride",e.tapins.doOverride).addTapinAfter("doOverride","updateExtents",e.tapins.updateExtents).addTapinAfter("updateExtents","finishDoOverride",e.tapins.finishDoOverride)}return __extends(r,n),r.prototype.createState=function(){var e=n.prototype.createState.call(this);return e.idealSize=new t.Size,e},r}(t.core.measure.MeasurePipeDef);e.ScrollContentPresenterMeasurePipeDef=n}(n=e.measure||(e.measure={}))}(n=e.scrollcontentpresenter||(e.scrollcontentpresenter={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n=function(t){function e(){t.call(this),this.addTapinAfter("applyClip","applyInternalClip",r.applyInternalClip)}return __extends(e,t),e}(t.core.render.RenderPipeDef);e.ScrollContentPresenterRenderPipeDef=n;var r;!function(e){function n(e,n,r,i,a,o){return t.Rect.isEmpty(e.internalClip)?!0:(i.clipRect(e.internalClip),!0)}e.applyInternalClip=n}(r=e.tapins||(e.tapins={}))}(n=e.render||(e.render={}))}(n=e.scrollcontentpresenter||(e.scrollcontentpresenter={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(e){var n;!function(e){var n=function(t){function n(){t.call(this),this.replaceTapin("doOverride",e.tapins.doOverride).addTapinAfter("doOverride","doHorizontal",e.tapins.doHorizontal).addTapinAfter("doOverride","doVertical",e.tapins.doVertical)}return __extends(n,t),n}(t.panel.arrange.PanelArrangePipeDef);e.StackPanelArrangePipeDef=n}(n=e.arrange||(e.arrange={}))}(e=t.stackpanel||(t.stackpanel={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(n){var r;!function(n){var r=function(e){function r(){e.call(this),this.replaceTapin("doOverride",n.tapins.doOverride).addTapinAfter("doOverride","doHorizontal",n.tapins.doHorizontal).addTapinAfter("doOverride","doVertical",n.tapins.doVertical)}return __extends(r,e),r.prototype.createState=function(){var n=e.prototype.createState.call(this);return n.childAvailable=new t.Size,n},r}(e.panel.measure.PanelMeasurePipeDef);n.StackPanelMeasurePipeDef=r}(r=n.measure||(n.measure={}))}(n=e.stackpanel||(e.stackpanel={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n=function(t){function e(){t.call(this),this.replaceTapin("doOverride",r.doOverride)}return __extends(e,t),e}(t.core.arrange.ArrangePipeDef);e.TextBlockArrangePipeDef=n;var r;!function(e){function n(e,n,r,i,a){var o=n.finalSize,s=n.arrangedSize;return t.Thickness.shrinkSize(e.padding,o),t.Size.copyTo(i.layout(o,e),s),s.width=Math.max(s.width,o.width),s.height=Math.max(s.height,o.height),i.setAvailableWidth(o.width),t.Thickness.growSize(e.padding,s),!0}e.doOverride=n}(r=e.tapins||(e.tapins={}))}(n=e.arrange||(e.arrange={}))}(n=e.textblock||(e.textblock={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n=function(t){function e(){t.call(this),this.replaceTapin("canHitInside",r.canHitInside)}return __extends(e,t),e}(t.core.hittest.HitTestPipeDef);e.TextBlockHitTestPipeDef=n;var r;!function(t){function e(t,e,n,r){return!0}t.canHitInside=e}(r=e.tapins||(e.tapins={}))}(n=e.hittest||(e.hittest={}))}(n=e.textblock||(e.textblock={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n=function(t){function e(){t.call(this),this.replaceTapin("doOverride",r.doOverride)}return __extends(e,t),e}(t.core.measure.MeasurePipeDef);e.TextBlockMeasurePipeDef=n;var r;!function(e){function n(e,n,r,i,a){var o=r.desiredSize;return t.Thickness.shrinkSize(e.padding,n.availableSize),i.setMaxWidth(n.availableSize.width,e),t.Size.copyTo(i.layout(n.availableSize,e),o),t.Thickness.growSize(e.padding,o),!0}e.doOverride=n}(r=e.tapins||(e.tapins={}))}(n=e.measure||(e.measure={}))}(n=e.textblock||(e.textblock={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n=function(t){function e(){t.call(this),this.replaceTapin("calcActualSize",r.calcActualSize).replaceTapin("calcExtents",r.calcExtents)}return __extends(e,t),e}(t.core.processup.ProcessUpPipeDef);e.TextBlockProcessUpPipeDef=n;var r;!function(e){function n(e,n,r,i){if(0===(e.dirtyFlags&t.DirtyFlags.Bounds))return!0;var a=n.actualSize;return a.width=Number.POSITIVE_INFINITY,a.height=Number.POSITIVE_INFINITY,t.core.helpers.coerceSize(a,e),t.Thickness.shrinkSize(e.padding,a),t.Size.copyTo(i.layout(a,e),a),t.Thickness.growSize(e.padding,a),!0}function r(e,n,r,i){if(0===(e.dirtyFlags&t.DirtyFlags.Bounds))return!0;var a=r.extents;a.x=i.getHorizontalOffset(e),a.y=0,t.Size.copyTo(n.actualSize,a);var o=e.padding;return a.x+=o.left,a.y+=o.top,t.Rect.copyTo(a,r.extentsWithChildren),!0}e.calcActualSize=n,e.calcExtents=r}(r=e.tapins||(e.tapins={}))}(n=e.processup||(e.processup={}))}(n=e.textblock||(e.textblock={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n=function(t){function e(){t.call(this),this.replaceTapin("doRender",r.doRender)}return __extends(e,t),e}(t.core.render.RenderPipeDef);e.TextBlockRenderPipeDef=n;var r;!function(e){function n(e,n,r,i,a,o){i.save(),t.core.helpers.renderLayoutClip(i,e,o);var s=e.padding;return s&&i.translate(s.left,s.top),o.render(i,e),i.restore(),!0}e.doRender=n}(r=e.tapins||(e.tapins={}))}(n=e.render||(e.render={}))}(n=e.textblock||(e.textblock={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n=function(t){function e(){t.call(this),this.replaceTapin("doOverride",r.doOverride)}return __extends(e,t),e}(t.core.arrange.ArrangePipeDef);e.TextBoxViewArrangePipeDef=n;var r;!function(e){function n(e,n,r,i,a){var o=n.finalSize,s=n.arrangedSize;return t.Size.copyTo(i.layout(o,e),s),s.width=Math.max(s.width,o.width),s.height=Math.max(s.height,o.height),i.setAvailableWidth(o.width),!0}e.doOverride=n}(r=e.tapins||(e.tapins={}))}(n=e.arrange||(e.arrange={}))}(n=e.textboxview||(e.textboxview={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n=function(t){function e(){t.call(this),this.replaceTapin("canHitInside",r.canHitInside)}return __extends(e,t),e}(t.core.hittest.HitTestPipeDef);e.TextBoxViewHitTestPipeDef=n;var r;!function(t){function e(t,e,n,r){return!0}t.canHitInside=e}(r=e.tapins||(e.tapins={}))}(n=e.hittest||(e.hittest={}))}(n=e.textboxview||(e.textboxview={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n=function(t){function e(){t.call(this),this.replaceTapin("doOverride",r.doOverride)}return __extends(e,t),e}(t.core.measure.MeasurePipeDef);e.TextBoxViewMeasurePipeDef=n;var r;!function(e){function n(e,n,r,i,a){var o=r.desiredSize,s=n.availableSize;return i.setMaxWidth(s.width,e),t.Size.copyTo(i.layout(s,e),o),isFinite(s.width)||(o.width=Math.max(o.width,11)),o.width=Math.min(o.width,s.width),o.height=Math.min(o.height,s.height),!0}e.doOverride=n}(r=e.tapins||(e.tapins={}))}(n=e.measure||(e.measure={}))}(n=e.textboxview||(e.textboxview={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n=function(t){function e(){t.call(this),this.replaceTapin("calcActualSize",r.calcActualSize).replaceTapin("calcExtents",r.calcExtents)}return __extends(e,t),e}(t.core.processup.ProcessUpPipeDef);e.TextBoxViewProcessUpPipeDef=n;var r;!function(e){function n(e,n,r,i){if(0===(e.dirtyFlags&t.DirtyFlags.Bounds))return!0;var a=n.actualSize;return a.width=Number.POSITIVE_INFINITY,a.height=Number.POSITIVE_INFINITY,t.core.helpers.coerceSize(a,e),t.Size.copyTo(i.layout(a,e),a),!0}function r(e,n,r,i){if(0===(e.dirtyFlags&t.DirtyFlags.Bounds))return!0;var a=r.extents;return a.x=a.y=0,t.Size.copyTo(n.actualSize,a),t.Rect.copyTo(a,r.extentsWithChildren),r.extentsWithChildren.width++,!0}e.calcActualSize=n,e.calcExtents=r}(r=e.tapins||(e.tapins={}))}(n=e.processup||(e.processup={}))}(n=e.textboxview||(e.textboxview={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n=function(e){function n(){e.call(this),this.replaceTapin("doRender",r.doRender).addTapinAfter("doRender","calcCaretRegion",r.calcCaretRegion).addTapinAfter("calcCaretRegion","renderCaret",r.renderCaret)}return __extends(n,e),n.prototype.createOutput=function(){var n=e.prototype.createOutput.call(this);return n.caretRegion=new t.Rect,n},n.prototype.prepare=function(n,r,i){t.Rect.copyTo(n.caretRegion,i.caretRegion),e.prototype.prepare.call(this,n,r,i)},n.prototype.flush=function(n,r,i){e.prototype.flush.call(this,n,r,i),t.Rect.copyTo(i.caretRegion,n.caretRegion)},n}(t.core.render.RenderPipeDef);e.TextBoxViewRenderPipeDef=n;var r;!function(e){function n(e,n,r,i,a,o){return i.save(),t.core.helpers.renderLayoutClip(i,e,o),o.render(i,e),i.restore(),!0}function r(e,n,r,i,a,o){return!t.Rect.isEmpty(r.caretRegion)||e.selectionLength>0?!0:(t.Rect.copyTo(o.getCaretRegion(e),r.caretRegion),!0)}function i(t,e,n,r,i,a){if(!t.isCaretVisible||t.selectionLength>0)return!0;var i=n.caretRegion,o=t.caretBrush,s=r.raw;return s.beginPath(),s.moveTo(i.x+.5,i.y),s.lineTo(i.x+.5,i.y+i.height),s.lineWidth=1,o?(o.setupBrush(s,i),s.strokeStyle=o.toHtml5Object()):s.strokeStyle="#000000",s.stroke(),!0}e.doRender=n,e.calcCaretRegion=r,e.renderCaret=i}(r=e.tapins||(e.tapins={}))}(n=e.render||(e.render={}))}(n=e.textboxview||(e.textboxview={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n=function(n){function r(){n.call(this),this.addTapinBefore("doOverride","preOverride",e.tapins.preOverride).replaceTapin("doOverride",e.tapins.doOverride)}return __extends(r,n),r.prototype.createState=function(){
var e=n.prototype.createState.call(this);return e.totalBorder=new t.Thickness,e},r}(t.core.arrange.ArrangePipeDef);e.UserControlArrangePipeDef=n}(n=e.arrange||(e.arrange={}))}(n=e.usercontrol||(e.usercontrol={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n=function(n){function r(){n.call(this),this.addTapinBefore("doOverride","preOverride",e.tapins.preOverride).replaceTapin("doOverride",e.tapins.doOverride).addTapinAfter("doOverride","postOverride",e.tapins.postOverride)}return __extends(r,n),r.prototype.createState=function(){var e=n.prototype.createState.call(this);return e.totalBorder=new t.Thickness,e},r}(t.core.measure.MeasurePipeDef);e.UserControlMeasurePipeDef=n}(n=e.measure||(e.measure={}))}(n=e.usercontrol||(e.usercontrol={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n=function(t){function e(){t.call(this),this.replaceTapin("processLayoutClip",r.processLayoutClip)}return __extends(e,t),e}(t.core.processdown.ProcessDownPipeDef);e.UserControlProcessDownPipeDef=n;var r;!function(e){function n(e,n,r,i,a){if(0===(e.dirtyFlags&t.DirtyFlags.LayoutClip))return!0;var o=e.compositeLayoutClip;return o.x=o.y=o.width=o.height,!0}e.processLayoutClip=n}(r=e.tapins||(e.tapins={}))}(n=e.processdown||(e.processdown={}))}(n=e.usercontrol||(e.usercontrol={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(e){var n;!function(e){var n=function(t){function n(){t.call(this),this.replaceTapin("doOverride",e.tapins.doOverride).addTapinAfter("doOverride","doHorizontal",e.tapins.doHorizontal).addTapinAfter("doOverride","doVertical",e.tapins.doVertical)}return __extends(n,t),n}(t.panel.arrange.PanelArrangePipeDef);e.VirtualizingStackPanelArrangePipeDef=n}(n=e.arrange||(e.arrange={}))}(e=t.virtualizingstackpanel||(t.virtualizingstackpanel={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(n){var r;!function(n){var r=function(e){function r(){e.call(this),this.replaceTapin("doOverride",n.tapins.doOverride).addTapinAfter("doOverride","doHorizontal",n.tapins.doHorizontal).addTapinAfter("doOverride","doVertical",n.tapins.doVertical)}return __extends(r,e),r.prototype.createState=function(){var n=e.prototype.createState.call(this);return n.childAvailable=new t.Size,n},r}(e.panel.measure.PanelMeasurePipeDef);n.VirtualizingStackPanelMeasurePipeDef=r}(r=n.measure||(n.measure={}))}(n=e.virtualizingstackpanel||(e.virtualizingstackpanel={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){e.applyRounding=function(e,n,r,i,a){var o=n.finalRect;return e.useLayoutRounding?(o.x=Math.round(a.x),o.y=Math.round(a.y),o.width=Math.round(a.width),o.height=Math.round(a.height)):t.Rect.copyTo(a,o),!0}}(n=e.tapins||(e.tapins={}))}(n=e.arrange||(e.arrange={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(n){var r;!function(n){var r=new t.Rect,i=new t.Rect;n.buildLayoutClip=function(n,a,o,s,c){var u=o.layoutClip;t.Rect.copyTo(a.finalRect,u);var l=o.visualOffset;u.x=Math.max(u.x-l.x,0),u.y=Math.max(u.y-l.y,0),n.useLayoutRounding&&(u.x=Math.round(u.x),u.y=Math.round(u.y)),r.x=r.y=0;var h=a.arrangedSize;return t.Size.copyTo(h,r),(s.isTop||t.Rect.isContainedIn(r,u))&&t.Size.isEqual(a.constrained,h)?u.x=u.y=u.width=u.height=0:(i.x=i.y=0,i.width=i.height=Number.POSITIVE_INFINITY,e.helpers.coerceSize(i,n),t.Rect.intersection(u,i)),t.Rect.isEqual(o.layoutClip,n.layoutClip)||(o.dirtyFlags|=t.DirtyFlags.LayoutClip),!0}}(r=n.tapins||(n.tapins={}))}(n=e.arrange||(e.arrange={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){e.buildLayoutXform=function(e,n,r,i,a){var o=r.visualOffset,s=t.mat3.createTranslate(o.x,o.y,r.layoutXform);return n.flipHorizontal&&(t.mat3.translate(s,n.arrangedSize.width,0),t.mat3.scale(s,-1,1)),t.mat3.equal(e.layoutXform,r.layoutXform)||(r.dirtyFlags|=t.DirtyFlags.LocalTransform),!0}}(n=e.tapins||(e.tapins={}))}(n=e.arrange||(e.arrange={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){e.buildRenderSize=function(e,n,r,i,a){return t.Size.copyTo(n.arrangedSize,r.renderSize),t.Size.isEqual(e.renderSize,r.renderSize)||r.lastRenderSize||(r.lastRenderSize=r.renderSize,r.uiFlags|=t.UIFlags.SizeHint),!0}}(n=e.tapins||(e.tapins={}))}(n=e.arrange||(e.arrange={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){t.calcFlip=function(t,e,n,r,i){return e.flipHorizontal=!1,!0}}(e=t.tapins||(t.tapins={}))}(e=t.arrange||(t.arrange={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(n){var r;!function(n){n.calcStretched=function(n,r,i,a,o){t.Rect.copyTo(o,i.layoutSlot);var s=r.finalRect;t.Thickness.shrinkRect(n.margin,s);var c=r.stretched;return c.width=s.width,c.height=s.height,e.helpers.coerceSize(c,n),!0}}(r=n.tapins||(n.tapins={}))}(n=e.arrange||(e.arrange={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){e.calcVisualOffset=function(e,n,r,i,a){var o=r.visualOffset,s=n.finalRect,c=n.constrained;if(o.x=s.x,o.y=s.y,!i.isTop){switch(e.horizontalAlignment){case t.HorizontalAlignment.Left:break;case t.HorizontalAlignment.Right:o.x+=s.width-c.width;break;case t.HorizontalAlignment.Center:o.x+=.5*(s.width-c.width);break;default:o.x+=Math.max(.5*(s.width-c.width),0)}switch(e.verticalAlignment){case t.VerticalAlignment.Top:break;case t.VerticalAlignment.Bottom:o.y+=s.height-c.height;break;case t.VerticalAlignment.Center:o.y+=.5*(s.height-c.height);break;default:o.y+=Math.max(.5*(s.height-c.height),0)}}return e.useLayoutRounding&&(o.x=Math.round(o.x),o.y=Math.round(o.y)),!0}}(n=e.tapins||(e.tapins={}))}(n=e.arrange||(e.arrange={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){e.checkNeedArrange=function(e,n,r,i,a){return(e.dirtyFlags&t.DirtyFlags.Arrange)>0?!0:!t.Rect.isEqual(r.layoutSlot,n.finalRect)}}(n=e.tapins||(e.tapins={}))}(n=e.arrange||(e.arrange={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(n){var r;!function(n){n.completeOverride=function(n,r,i,a,o){i.dirtyFlags&=~t.DirtyFlags.Arrange;var s=r.arrangedSize;n.horizontalAlignment===t.HorizontalAlignment.Stretch&&(s.width=Math.max(s.width,r.framework.width)),n.verticalAlignment===t.VerticalAlignment.Stretch&&(s.height=Math.max(s.height,r.framework.height)),n.useLayoutRounding&&(s.width=Math.round(s.width),s.height=Math.round(s.height));var c=r.constrained;return t.Size.copyTo(s,c),e.helpers.coerceSize(c,n),c.width=Math.min(c.width,s.width),c.height=Math.min(c.height,s.height),!0}}(r=n.tapins||(n.tapins={}))}(n=e.arrange||(e.arrange={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){e.doOverride=function(e,n,r,i,a){var o=n.childRect;o.x=o.y=0,t.Size.copyTo(n.finalSize,o);for(var s=i.walk();s.step();){var c=s.current;c.arrange(n.childRect)}return t.Size.copyTo(o,n.arrangedSize),!0}}(n=e.tapins||(e.tapins={}))}(n=e.arrange||(e.arrange={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){e.invalidateFuture=function(e,n,r,i,a){var o=r.layoutClip;return o.x=o.y=o.width=o.height=0,r.dirtyFlags|=t.DirtyFlags.LocalTransform,r.dirtyFlags|=t.DirtyFlags.Bounds,!0}}(n=e.tapins||(e.tapins={}))}(n=e.arrange||(e.arrange={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(n){var r;!function(n){n.prepareOverride=function(n,r,i,a,o){var s=r.framework;s.width=0,s.height=0,e.helpers.coerceSize(s,n),n.horizontalAlignment===t.HorizontalAlignment.Stretch&&(s.width=Math.max(s.width,r.stretched.width)),n.verticalAlignment===t.VerticalAlignment.Stretch&&(s.height=Math.max(s.height,r.stretched.height));var c=r.finalSize,u=n.hiddenDesire;return c.width=Math.max(u.width,s.width),c.height=Math.max(u.height,s.height),!0}}(r=n.tapins||(n.tapins={}))}(n=e.arrange||(e.arrange={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){e.validateFinalRect=function(e,n,r,i,a){return a.width<0||a.height<0||!isFinite(a.width)||!isFinite(a.height)||isNaN(a.x)||isNaN(a.y)||isNaN(a.width)||isNaN(a.height)?(t.layoutError(i,this,"Invalid arguments to Arrange."),!1):!0}}(n=e.tapins||(e.tapins={}))}(n=e.arrange||(e.arrange={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){e.validateVisibility=function(e,n,r,i,a){return e.visibility!==t.Visibility.Visible?(t.Rect.copyTo(n.finalRect,r.layoutSlot),!1):!0}}(n=e.tapins||(e.tapins={}))}(n=e.arrange||(e.arrange={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){e.arrange=function(e){if(e.flag!==t.UIFlags.ArrangeHint)return!0;if(e.arrangeList.length<=0)return!1;for(var n;null!=(n=e.arrangeList.shift());)n.doArrange();return!0}}(n=e.tapins||(e.tapins={}))}(n=e.draft||(e.draft={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){e.determinePhase=function(e){e.flag=t.UIFlags.None;var n=e.assets;if(n.visibility!==t.Visibility.Visible)return!0;if((n.uiFlags&t.UIFlags.MeasureHint)>0)e.flag=t.UIFlags.MeasureHint;else if((n.uiFlags&t.UIFlags.ArrangeHint)>0)e.flag=t.UIFlags.ArrangeHint;else{if(!((n.uiFlags&t.UIFlags.SizeHint)>0))return!1;e.flag=t.UIFlags.SizeHint}return!0}}(n=e.tapins||(e.tapins={}))}(n=e.draft||(e.draft={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(n){var r;!function(n){n.flushPrevious=function(n){for(var r;null!=(r=n.arrangeList.shift());)e.Updater.$$propagateUiFlagsUp(r,t.UIFlags.ArrangeHint);for(;null!=(r=n.sizingList.shift());)e.Updater.$$propagateUiFlagsUp(r,t.UIFlags.SizeHint);return!0}}(r=n.tapins||(n.tapins={}))}(n=e.draft||(e.draft={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){e.measure=function(e){if(e.flag!==t.UIFlags.MeasureHint)return!0;if(e.measureList.length<=0)return!1;for(var n;null!=(n=e.measureList.shift());)n.doMeasure();return!0}}(n=e.tapins||(e.tapins={}))}(n=e.draft||(e.draft={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){e.notifyResize=function(e){if(e.flag!==t.UIFlags.SizeHint)return!0;if(e.sizingUpdates.length<=0)return!0;for(var n;null!=(n=e.sizingUpdates.pop());)n.updater.onSizeChanged(n.oldSize,n.newSize);return!0}}(n=e.tapins||(e.tapins={}))}(n=e.draft||(e.draft={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){e.prepareArrange=function(e){if(e.flag!==t.UIFlags.ArrangeHint)return!0;for(var n=e.updater.walkDeep();n.step();){var r=n.current.assets;r.visibility===t.Visibility.Visible&&0!==(r.uiFlags&t.UIFlags.ArrangeHint)?(r.uiFlags&=~t.UIFlags.ArrangeHint,(r.dirtyFlags&t.DirtyFlags.Arrange)>0&&e.arrangeList.push(n.current)):n.skipBranch()}return!0}}(n=e.tapins||(e.tapins={}))}(n=e.draft||(e.draft={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){e.prepareMeasure=function(e){if(e.flag!==t.UIFlags.MeasureHint)return!0;var n=e.assets.previousConstraint;!e.tree.isContainer||!t.Size.isUndef(n)&&t.Size.isEqual(n,e.surfaceSize)||(e.assets.dirtyFlags|=t.DirtyFlags.Measure,t.Size.copyTo(e.surfaceSize,e.assets.previousConstraint));for(var r=e.updater.walkDeep();r.step();){var i=r.current.assets;i.visibility===t.Visibility.Visible&&0!==(i.uiFlags&t.UIFlags.MeasureHint)?(i.uiFlags&=~t.UIFlags.MeasureHint,(i.dirtyFlags&t.DirtyFlags.Measure)>0&&e.measureList.push(r.current)):r.skipBranch()}return!0}}(n=e.tapins||(e.tapins={}))}(n=e.draft||(e.draft={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){e.prepareSizing=function(e){if(e.flag!==t.UIFlags.SizeHint)return!0;for(var n=e.updater.walkDeep();n.step();){var r=n.current.assets;r.visibility===t.Visibility.Visible&&0!==(r.uiFlags&t.UIFlags.SizeHint)?(r.uiFlags&=~t.UIFlags.SizeHint,void 0!==r.lastRenderSize&&e.sizingList.push(n.current)):n.skipBranch()}return!0}}(n=e.tapins||(e.tapins={}))}(n=e.draft||(e.draft={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){e.sizing=function(e){if(e.flag!==t.UIFlags.SizeHint)return!0;if(e.sizingList.length<=0)return!1;for(var n,r=new t.Size,i=new t.Size;null!=(n=e.sizingList.pop());)n.sizing(r,i),t.Size.isEqual(r,new t.Size)||(e.sizingUpdates.push({updater:n,oldSize:r,newSize:i}),r=new t.Size,i=new t.Size);return!0}}(n=e.tapins||(e.tapins={}))}(n=e.draft||(e.draft={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){function e(t,e,n,r,i){var a=t.assets;return!!a.totalIsRenderVisible&&!!a.totalIsHitTestVisible}t.canHit=e}(e=t.tapins||(t.tapins={}))}(e=t.hittest||(t.hittest={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){function e(t,e,n,r,i){return t.hitChildren?!0:(n.shift(),r.restore(),!1)}t.canHitInside=e}(e=t.tapins||(t.tapins={}))}(e=t.hittest||(t.hittest={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){function e(t,e,n,r,i){return r.restore(),!0}t.completeCtx=e}(e=t.tapins||(t.tapins={}))}(e=t.hittest||(t.hittest={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){function n(e,n,r,i,a){r.unshift(e.updater);for(var o=!1,s=e.tree.walk(t.WalkDirection.ZReverse);s.step()&&(o=s.current.hitTest(n,r,i,a)||o,!o||a););return e.hitChildren=o,!0}e.insideChildren=n}(n=e.tapins||(e.tapins={}))}(n=e.hittest||(e.hittest={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){function n(e,n,r,i,a){var o=e.assets.clip;if(!o)return!0;var s=o.GetBounds();return t.Rect.transform(s,i.currentTransform),t.Rect.containsPoint(s,n)?(o.Draw(i),i.raw.isPointInPath(n.x,n.y)?!0:(i.restore(),!1)):(i.restore(),!1)}e.insideClip=n}(n=e.tapins||(e.tapins={}))}(n=e.hittest||(e.hittest={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){function n(e,n,r,i,a){if(e.hitChildren)return!0;var o=e.assets.compositeLayoutClip;if(!o||t.Rect.isEmpty(o))return!0;var s=e.layoutClipBounds;return t.Rect.copyTo(o,s),t.Rect.transform(s,i.currentTransform),t.Rect.containsPoint(s,n)?!0:(r.shift(),i.restore(),!1)}e.insideLayoutClip=n}(n=e.tapins||(e.tapins={}))}(n=e.hittest||(e.hittest={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){function n(e,n,r,i,a){if(e.hitChildren)return!0;var o=e.bounds;return t.Rect.copyTo(e.assets.extents,o),t.Rect.transform(o,i.currentTransform),t.Rect.containsPoint(o,n)?!0:(r.shift(),i.restore(),!1)}e.insideObject=n}(n=e.tapins||(e.tapins={}))}(n=e.hittest||(e.hittest={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){function e(t,e,n,r,i){return r.save(),r.preapply(t.assets.renderXform),!0}t.prepareCtx=e}(e=t.tapins||(t.tapins={}))}(e=t.hittest||(t.hittest={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){t.applyTemplate=function(t,e,n,r,i){return r.applyTemplate(),!0}}(e=t.tapins||(t.tapins={}))}(e=t.measure||(t.measure={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){e.checkNeedMeasure=function(e,n,r,i,a){if((e.dirtyFlags&t.DirtyFlags.Measure)>0)return!0;var o=e.previousConstraint;return t.Size.isUndef(o)||o.width!==a.width||o.height!==a.height?(t.Size.copyTo(a,r.previousConstraint),!0):!1}}(n=e.tapins||(e.tapins={}))}(n=e.measure||(e.measure={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){e.completeOverride=function(e,n,r,i,a){return r.dirtyFlags&=~t.DirtyFlags.Measure,t.Size.copyTo(r.desiredSize,r.hiddenDesire),!0}}(n=e.tapins||(e.tapins={}))}(n=e.measure||(e.measure={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){e.doOverride=function(e,n,r,i,a){var o=r.desiredSize;o.width=o.height=0;for(var s=i.walk();s.step();){var c=s.current;c.measure(n.availableSize),t.Size.copyTo(c.assets.desiredSize,o)}return!0}}(n=e.tapins||(e.tapins={}))}(n=e.measure||(e.measure={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(n){var r;!function(n){n.finishDesired=function(n,r,i,a,o){var s=i.desiredSize;return e.helpers.coerceSize(s,n),t.Thickness.growSize(n.margin,s),s.width=Math.min(s.width,o.width),s.height=Math.min(s.height,o.height),n.useLayoutRounding&&(s.width=Math.round(s.width),s.height=Math.round(s.height)),!0}}(r=n.tapins||(n.tapins={}))}(n=e.measure||(e.measure={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){e.invalidateFuture=function(e,n,r,i,a){return r.dirtyFlags|=t.DirtyFlags.Arrange,r.uiFlags|=t.UIFlags.ArrangeHint,r.dirtyFlags|=t.DirtyFlags.Bounds,!0}}(n=e.tapins||(e.tapins={}))}(n=e.measure||(e.measure={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(n){var r;!function(n){n.prepareOverride=function(n,r,i,a,o){return t.Size.copyTo(o,r.availableSize),t.Thickness.shrinkSize(n.margin,r.availableSize),e.helpers.coerceSize(r.availableSize,n),!0}}(r=n.tapins||(n.tapins={}))}(n=e.measure||(e.measure={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){e.validate=function(e,n,r,i,a){return isNaN(a.width)||isNaN(a.height)?(t.layoutError(i,this,"Cannot call Measure using a size with NaN values."),!1):!0}}(n=e.tapins||(e.tapins={}))}(n=e.measure||(e.measure={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){e.validateVisibility=function(e,n,r,i,a){if(e.visibility!==t.Visibility.Visible){t.Size.copyTo(a,r.previousConstraint);var o=r.desiredSize;return o.width=o.height=0,!1}return!0}}(n=e.tapins||(e.tapins={}))}(n=e.measure||(e.measure={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){e.calcAbsoluteXform=function(e,n,r,i,a){if(0===(e.dirtyFlags&t.DirtyFlags.Transform))return!0;var o=r.absoluteXform;return t.mat3.copyTo(r.renderXform,o),i&&t.mat3.apply(o,i.absoluteXform),!0}}(n=e.tapins||(e.tapins={}))}(n=e.processdown||(e.processdown={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){e.calcRenderXform=function(e,n,r,i,a){if(0===(e.dirtyFlags&t.DirtyFlags.Transform))return!0;var o=r.renderXform;return t.mat3.copyTo(n.localXform,o),t.mat3.apply(o,e.layoutXform),e.carrierXform&&t.mat3.apply(o,e.carrierXform),!0}}(n=e.tapins||(e.tapins={}))}(n=e.processdown||(e.processdown={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){t.calcXformOrigin=function(t,e,n,r,i){var a=e.xformOrigin,o=t.renderTransformOrigin;return o?(a.x=t.actualWidth*o.x,a.y=t.actualHeight*o.y):(a.x=0,a.y=0),!0}}(e=t.tapins||(t.tapins={}))}(e=t.processdown||(t.processdown={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){e.processHitTestVisibility=function(e,n,r,i,a){return 0===(e.dirtyFlags&t.DirtyFlags.HitTestVisibility)?!0:(i?r.totalIsHitTestVisible=i.totalIsHitTestVisible&&e.isHitTestVisible:r.totalIsHitTestVisible=e.isHitTestVisible,r.totalIsHitTestVisible!==e.totalIsHitTestVisible&&(n.subtreeDownDirty|=t.DirtyFlags.HitTestVisibility),!0)}}(n=e.tapins||(e.tapins={}))}(n=e.processdown||(e.processdown={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){e.processLayoutClip=function(e,n,r,i,a){if(0===(e.dirtyFlags&t.DirtyFlags.LayoutClip))return!0;var o=e.layoutClip,s=r.compositeLayoutClip;return!i||t.Rect.isEmpty(i.compositeLayoutClip)?t.Rect.copyTo(o,s):(t.Rect.copyTo(i.compositeLayoutClip,s),t.Rect.isEmpty(o)||t.Rect.intersection(s,o)),t.Rect.isEqual(e.compositeLayoutClip,r.compositeLayoutClip)||(n.subtreeDownDirty|=t.DirtyFlags.LayoutClip),!0}}(n=e.tapins||(e.tapins={}))}(n=e.processdown||(e.processdown={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){e.processLocalXform=function(e,n,r,i,a){if(0===(e.dirtyFlags&t.DirtyFlags.LocalTransform))return!0;var o=t.mat3.identity(n.localXform),s=e.renderTransform;if(!s)return!0;var c=n.xformOrigin;return t.mat3.translate(o,-c.x,-c.y),t.mat3.apply(o,s.getRaw()),t.mat3.translate(o,c.x,c.y),!0}}(n=e.tapins||(e.tapins={}))}(n=e.processdown||(e.processdown={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){e.processRenderVisibility=function(e,n,r,i,a){return 0===(e.dirtyFlags&t.DirtyFlags.RenderVisibility)?!0:(r.dirtyFlags|=t.DirtyFlags.Bounds,i?(r.totalOpacity=i.totalOpacity*e.opacity,r.totalIsRenderVisible=i.totalIsRenderVisible&&e.visibility===t.Visibility.Visible):(r.totalOpacity=e.opacity,r.totalIsRenderVisible=e.visibility===t.Visibility.Visible),e.totalIsRenderVisible!==r.totalIsRenderVisible&&(r.dirtyFlags|=t.DirtyFlags.NewBounds,n.subtreeDownDirty|=t.DirtyFlags.RenderVisibility),e.totalOpacity!==r.totalOpacity&&(n.subtreeDownDirty|=t.DirtyFlags.RenderVisibility),!0)}}(n=e.tapins||(e.tapins={}))}(n=e.processdown||(e.processdown={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){e.processXform=function(e,n,r,i,a){return 0===(e.dirtyFlags&t.DirtyFlags.Transform)?!0:(t.mat3.equal(e.renderXform,r.renderXform)?t.mat3.equal(e.absoluteXform,r.absoluteXform)||(n.subtreeDownDirty|=t.DirtyFlags.Transform):(r.dirtyFlags|=t.DirtyFlags.NewBounds,n.subtreeDownDirty|=t.DirtyFlags.Transform),r.dirtyFlags|=t.DirtyFlags.Bounds,!0)}}(n=e.tapins||(e.tapins={}))}(n=e.processdown||(e.processdown={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(n){var r;!function(n){n.propagateDirtyToChildren=function(n,r,i,a,o){var s=r.subtreeDownDirty&t.DirtyFlags.PropagateDown;if(0===s)return!0;for(var c=o.walk();c.step();)c.current.assets.dirtyFlags|=s,e.Updater.$$addDownDirty(c.current);return!0}}(r=n.tapins||(n.tapins={}))}(n=e.processdown||(e.processdown={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(n){var r;!function(n){n.calcActualSize=function(n,r,i,a){if(0===(n.dirtyFlags&t.DirtyFlags.Bounds))return!0;var o=r.actualSize;return o.width=n.actualWidth,o.height=n.actualHeight,e.helpers.coerceSize(o,n),isNaN(o.width)&&(o.width=0),isNaN(o.height)&&(o.height=0),!0}}(r=n.tapins||(n.tapins={}))}(n=e.processup||(e.processup={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){e.calcExtents=function(e,n,r,i){if(0===(e.dirtyFlags&t.DirtyFlags.Bounds))return!0;var a=r.extents,o=r.extentsWithChildren;a.x=o.x=0,a.y=o.y=0;var s=n.actualSize;a.width=o.width=s.width,a.height=o.height=s.height;for(var c,u=i.walk();u.step();)c=u.current.assets,c.totalIsRenderVisible&&t.Rect.union(o,c.globalBoundsWithChildren);return!0}}(n=e.tapins||(e.tapins={}))}(n=e.processup||(e.processup={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(n){var r;!function(n){n.calcPaintBounds=function(n,r,i,a){return 0===(n.dirtyFlags&t.DirtyFlags.Bounds)?!0:(e.helpers.intersectBoundsWithClipPath(i.globalBoundsWithChildren,i.extentsWithChildren,n.effectPadding,n.renderXform,n.clip,n.layoutClip),e.helpers.intersectBoundsWithClipPath(i.surfaceBoundsWithChildren,i.extentsWithChildren,n.effectPadding,n.absoluteXform,n.clip,n.layoutClip),!0)}}(r=n.tapins||(n.tapins={}))}(n=e.processup||(e.processup={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){e.processBounds=function(e,n,r,i){if(0===(e.dirtyFlags&t.DirtyFlags.Bounds))return!0;if(n.hasNewBounds=!1,t.Rect.isEqual(e.globalBoundsWithChildren,r.globalBoundsWithChildren))(!t.Rect.isEqual(e.extentsWithChildren,r.extentsWithChildren)||e.forceInvalidate)&&(n.hasNewBounds=!0);else{var a=i.visualOwner;a.updateBounds(),a.invalidate(e.surfaceBoundsWithChildren),n.hasNewBounds=!0}return r.forceInvalidate=!1,!0}}(n=e.tapins||(e.tapins={}))}(n=e.processup||(e.processup={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){e.processInvalidate=function(e,n,r,i){if(0===(e.dirtyFlags&t.DirtyFlags.Invalidate)&&!n.hasInvalidate)return!0;var a=r.dirtyRegion;return i.visualOwner.invalidate(a),a.x=a.y=a.width=a.height=0,!0}}(n=e.tapins||(e.tapins={}))}(n=e.processup||(e.processup={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){e.processNewBounds=function(e,n,r,i){return 0!==(e.dirtyFlags&t.DirtyFlags.NewBounds)||n.hasNewBounds?(r.dirtyFlags|=t.DirtyFlags.Invalidate,n.hasInvalidate=!0,t.Rect.union(r.dirtyRegion,r.surfaceBoundsWithChildren),!0):!0}}(n=e.tapins||(e.tapins={}))}(n=e.processup||(e.processup={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){t.applyClip=function(t,e,n,r,i,a){var o=t.clip;return o&&r.clipGeometry(o),!0}}(e=t.tapins||(t.tapins={}))}(e=t.render||(t.render={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){t.doRender=function(t,e,n,r,i,a){return!0}}(e=t.tapins||(t.tapins={}))}(e=t.render||(t.render={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){t.postRender=function(t,e,n,r,i,a){var o=t.effect;return o?(o.PostRender(r),r.restore(),!0):!0}}(e=t.tapins||(t.tapins={}))}(e=t.render||(t.render={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){t.prepareContext=function(t,e,n,r,i,a){return r.save(),r.preapply(t.renderXform),r.raw.globalAlpha=t.totalOpacity,!0}}(e=t.tapins||(t.tapins={}))}(e=t.render||(t.render={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){t.preRender=function(t,e,n,r,i,a){var o=t.effect;return o?(r.save(),o.PreRender(r),!0):!0}}(e=t.tapins||(t.tapins={}))}(e=t.render||(t.render={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){e.renderChildren=function(e,n,r,i,a,o){for(var s=o.walk(t.WalkDirection.ZForward);s.step();)s.current.render(i,n.renderRegion);return!0}}(n=e.tapins||(e.tapins={}))}(n=e.render||(e.render={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){t.restoreContext=function(t,e,n,r,i,a){return r.restore(),!0}}(e=t.tapins||(t.tapins={}))}(e=t.render||(t.render={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){t.validate=function(t,e,n,r,i,a){return!!t.totalIsRenderVisible&&255*t.totalOpacity>=.5}}(e=t.tapins||(t.tapins={}))}(e=t.render||(t.render={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){e.validateRegion=function(e,n,r,i,a,o){var s=n.renderRegion;return t.Rect.copyTo(e.surfaceBoundsWithChildren,s),t.Rect.roundOut(s),t.Rect.intersection(s,a),s.width>0&&s.height>0}}(n=e.tapins||(e.tapins={}))}(n=e.render||(e.render={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){t.calcUseRender=function(t,e,n,r){return e.useRender=!0,!0}}(e=t.tapins||(t.tapins={}))}(e=t.sizing||(t.sizing={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(n){var r;!function(n){n.computeActual=function(n,r,i,a){var o=i.actualSize;return o.width=o.height=0,n.visibility!==t.Visibility.Visible?!0:r.useRender?(t.Size.copyTo(n.renderSize,o),!0):(e.helpers.coerceSize(o,n),!0)}}(r=n.tapins||(n.tapins={}))}(n=e.sizing||(e.sizing={}))}(e=t.core||(t.core={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){function e(t,e,n,r,i){var a=r/2,o=i/2,s=e+r,c=n+i,u=e+a,l=n+o;if(t.beginPath(),r===i)return void t.arc(u,l,a,0,2*Math.PI,!1);var h=.5522848,p=a*h,f=o*h;t.moveTo(e,l),t.bezierCurveTo(e,l-f,u-p,n,u,n),t.bezierCurveTo(u+p,n,s,l-f,s,l),t.bezierCurveTo(s,l+f,u+p,c,u,c),t.bezierCurveTo(u-p,c,e,l+f,e,l),t.closePath()}t.draw=e}(e=t.helpers||(t.helpers={}))}(e=t.ellipse||(t.ellipse={}))}(e=t.shapes||(t.shapes={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n=function(t){function n(){t.call(this),this.replaceTapin("canHitInside",e.tapins.canHitInside).replaceTapin("insideChildren",e.tapins.insideChildren).addTapinAfter("insideObject","canHitShape",e.tapins.canHitShape).addTapinAfter("canHitShape","prepareShape",e.tapins.prepareShape).addTapinAfter("prepareShape","drawShape",e.tapins.drawShape).addTapinAfter("drawShape","finishShape",e.tapins.finishShape)}return __extends(n,t),n}(t.core.hittest.HitTestPipeDef);e.ShapeHitTestPipeDef=n}(n=e.hittest||(e.hittest={}))}(n=e.shape||(e.shape={}))}(e=t.shapes||(t.shapes={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(e){var n;!function(n){var r=function(t){function e(){t.call(this),this.replaceTapin("drawShape",i.drawShape)}return __extends(e,t),e}(t.shape.hittest.ShapeHitTestPipeDef);n.EllipseHitTestPipeDef=r;var i;!function(t){function n(t,n,r,i){var a=t.assets.shapeRect;return e.helpers.draw(i.raw,a.x,a.y,a.width,a.height),!0}t.drawShape=n}(i=n.tapins||(n.tapins={}))}(n=e.hittest||(e.hittest={}));
}(e=t.ellipse||(t.ellipse={}))}(e=t.shapes||(t.shapes={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n=function(n){function r(){n.call(this),this.addTapinBefore("doOverride","calcNaturalBounds",e.tapins.calcNaturalBounds).replaceTapin("doOverride",e.tapins.doOverride)}return __extends(r,n),r.prototype.createOutput=function(){var e=n.prototype.createOutput.call(this);return e.naturalBounds=new t.Rect,e},r.prototype.prepare=function(e,r,i){t.Rect.copyTo(e.naturalBounds,i.naturalBounds),n.prototype.prepare.call(this,e,r,i)},r.prototype.flush=function(e,r,i){n.prototype.flush.call(this,e,r,i),t.Rect.copyTo(i.naturalBounds,e.naturalBounds)},r}(t.core.measure.MeasurePipeDef);e.ShapeMeasurePipeDef=n}(n=e.measure||(e.measure={}))}(n=e.shape||(e.shape={}))}(e=t.shapes||(t.shapes={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(e){var n;!function(e){var n=function(t){function e(){t.call(this),this.addTapinBefore("doOverride","shrinkAvailable",r.shrinkAvailable)}return __extends(e,t),e}(t.shape.measure.ShapeMeasurePipeDef);e.EllipseMeasurePipeDef=n;var r;!function(t){function e(t,e,n,r){var i=e.availableSize;return i.width=i.height=0,!0}t.shrinkAvailable=e}(r=e.tapins||(e.tapins={}))}(n=e.measure||(e.measure={}))}(e=t.ellipse||(t.ellipse={}))}(e=t.shapes||(t.shapes={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n=function(t){function n(){t.call(this),this.addTapinBefore("doRender","calcShouldDraw",e.tapins.calcShouldDraw).addTapinBefore("doRender","prepareDraw",e.tapins.prepareDraw).replaceTapin("doRender",e.tapins.doRender).addTapinAfter("doRender","fill",e.tapins.fill).addTapinAfter("fill","finishDraw",e.tapins.finishDraw).addTapinAfter("finishDraw","stroke",e.tapins.stroke)}return __extends(n,t),n.prototype.createState=function(){var e=t.prototype.createState.call(this);return e.shouldDraw=!1,e},n}(t.core.render.RenderPipeDef);e.ShapeRenderPipeDef=n}(n=e.render||(e.render={}))}(n=e.shape||(e.shape={}))}(e=t.shapes||(t.shapes={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(e){var n;!function(n){var r=function(t){function e(){t.call(this),this.replaceTapin("doRender",i.doRender)}return __extends(e,t),e}(t.shape.render.ShapeRenderPipeDef);n.EllipseRenderPipeDef=r;var i;!function(t){function n(t,n,r,i,a){if(!n.shouldDraw)return!0;var o=t.shapeRect;return e.helpers.draw(i.raw,o.x,o.y,o.width,o.height),!0}t.doRender=n}(i=n.tapins||(n.tapins={}))}(n=e.render||(e.render={}))}(e=t.ellipse||(t.ellipse={}))}(e=t.shapes||(t.shapes={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(n){var r;!function(n){var r=function(t){function e(){t.call(this),this.addTapinBefore("calcNaturalBounds","buildPath",i.buildPath).replaceTapin("calcNaturalBounds",i.calcNaturalBounds)}return __extends(e,t),e}(e.shape.measure.ShapeMeasurePipeDef);n.PathMeasurePipeDef=r;var i;!function(e){function n(t,e,n,r){return!0}function r(e,n,r,i){var a=r.naturalBounds;if(a.x=a.y=a.width=a.height=0,e.data){var o=e.data.GetBounds(e);t.Rect.copyTo(o,a)}return!0}e.buildPath=n,e.calcNaturalBounds=r}(i=n.tapins||(n.tapins={}))}(r=n.measure||(n.measure={}))}(n=e.path||(e.path={}))}(e=t.shapes||(t.shapes={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(e){var n;!function(e){var n=function(t){function e(){t.call(this),this.replaceTapin("buildPath",r.buildPath)}return __extends(e,t),e}(t.path.measure.PathMeasurePipeDef);e.LineMeasurePipeDef=n;var r;!function(t){function e(t,e,n,r){if(!t.data.old)return!0;var i=t.data.path;return i.reset(),i.move(t.x1,t.y1),i.line(t.x2,t.y2),t.data.old=!1,!0}t.buildPath=e}(r=e.tapins||(e.tapins={}))}(n=e.measure||(e.measure={}))}(e=t.line||(t.line={}))}(e=t.shapes||(t.shapes={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(e){var n;!function(e){var n=function(t){function e(){t.call(this),this.replaceTapin("drawShape",r.drawShape)}return __extends(e,t),e}(t.shape.hittest.ShapeHitTestPipeDef);e.PathHitTestPipeDef=n;var r;!function(t){function e(t,e,n,r){var i=t.assets;return r.preapply(i.stretchXform),i.data.Draw(r),!0}t.drawShape=e}(r=e.tapins||(e.tapins={}))}(n=e.hittest||(e.hittest={}))}(e=t.path||(t.path={}))}(e=t.shapes||(t.shapes={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n=function(n){function r(){n.call(this),this.addTapinBefore("calcExtents","calcShapeRect",e.tapins.calcShapeRect).replaceTapin("calcExtents",e.tapins.calcExtents)}return __extends(r,n),r.prototype.createOutput=function(){var e=n.prototype.createOutput.call(this);return e.shapeFlags=t.ShapeFlags.None,e.shapeRect=new t.Rect,e},r.prototype.prepare=function(e,r,i){i.shapeFlags=e.shapeFlags,t.Rect.copyTo(e.shapeRect,i.shapeRect),n.prototype.prepare.call(this,e,r,i)},r.prototype.flush=function(e,r,i){n.prototype.flush.call(this,e,r,i),t.Rect.copyTo(i.shapeRect,e.shapeRect),e.shapeFlags=i.shapeFlags},r}(t.core.processup.ProcessUpPipeDef);e.ShapeProcessUpPipeDef=n}(n=e.processup||(e.processup={}))}(n=e.shape||(e.shape={}))}(e=t.shapes||(t.shapes={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(n){var r;!function(n){var r=function(e){function r(){e.call(this),this.replaceTapin("calcActualSize",n.tapins.calcActualSize).replaceTapin("calcShapeRect",n.tapins.calcShapeRect).addTapinBefore("calcExtents","calcStretch",n.tapins.calcStretch).replaceTapin("calcExtents",n.tapins.calcExtents)}return __extends(r,e),r.prototype.createOutput=function(){var n=e.prototype.createOutput.call(this);return n.stretchXform=t.mat3.identity(),n},r.prototype.prepare=function(n,r,i){t.mat3.copyTo(n.stretchXform,i.stretchXform),e.prototype.prepare.call(this,n,r,i)},r.prototype.flush=function(n,r,i){e.prototype.flush.call(this,n,r,i),t.mat3.copyTo(i.stretchXform,n.stretchXform)},r}(e.shape.processup.ShapeProcessUpPipeDef);n.PathProcessUpPipeDef=r}(r=n.processup||(n.processup={}))}(n=e.path||(e.path={}))}(e=t.shapes||(t.shapes={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(e){var n;!function(e){var n=function(t){function n(){t.call(this),this.replaceTapin("doRender",e.tapins.doRender).replaceTapin("fill",e.tapins.fill)}return __extends(n,t),n}(t.shape.render.ShapeRenderPipeDef);e.PathRenderPipeDef=n}(n=e.render||(e.render={}))}(e=t.path||(t.path={}))}(e=t.shapes||(t.shapes={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(e){var n;!function(e){var n=function(t){function e(){t.call(this),this.replaceTapin("buildPath",r.buildPath)}return __extends(e,t),e}(t.path.measure.PathMeasurePipeDef);e.PolylineMeasurePipeDef=n;var r;!function(t){function e(t,e,r,i){if(!t.data.old)return!0;var a=t.data.path;a.reset();var o=t.points;if(o.length<2)return!0;var s=o[0],c=o[1];if(2===o.length)n(s,c,t.strokeThickness),a.move(s.x,s.y),a.line(c.x,c.y);else{a.move(s.x,s.y);for(var u=1;u<o.length;u++){var c=o[u];a.line(c.x,c.y)}}return t.isClosed&&a.close(),t.data.old=!1,!0}function n(t,e,n){var r=5*n,i=t.x-e.x,a=t.y-e.y;if(0===a)r-=n/2,i>0?(t.x+=r,e.x-=r):(t.x-=r,e.x+=r);else if(0===i)r-=n/2,a>0?(t.y+=r,e.y-=r):(t.y-=r,e.y+=r);else{var o=Math.atan2(a,i),s=Math.abs(Math.sin(o)*r);i>0?(t.x+=s,e.x-=s):(t.x-=s,e.x+=s);var c=Math.abs(Math.sin(Math.PI/2-o))*r;a>0?(t.y+=c,e.y-=c):(t.y-=c,e.y+=c)}}t.buildPath=e}(r=e.tapins||(e.tapins={}))}(n=e.measure||(e.measure={}))}(e=t.polyline||(t.polyline={}))}(e=t.shapes||(t.shapes={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){function e(t,e,n,r,i,a,o){var s=e+r,c=n+i;a||o||(t.beginPath(),t.rect(e,n,s-e,c-n)),t.beginPath(),t.moveTo(e+a,n),t.lineTo(s-a,n),t.ellipse(s-a,n+o,a,o,0,3*Math.PI/2,2*Math.PI),t.lineTo(s,c-o),t.ellipse(s-a,c-o,a,o,0,0,Math.PI/2),t.lineTo(e+a,c),t.ellipse(e+a,c-o,a,o,0,Math.PI/2,Math.PI),t.lineTo(e,n+o),t.ellipse(e+a,n+o,a,o,0,Math.PI,3*Math.PI/2),t.closePath()}t.draw=e}(e=t.helpers||(t.helpers={}))}(e=t.rectangle||(t.rectangle={}))}(e=t.shapes||(t.shapes={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(e){var n;!function(n){var r=function(t){function e(){t.call(this),this.replaceTapin("drawShape",i.drawShape)}return __extends(e,t),e}(t.shape.hittest.ShapeHitTestPipeDef);n.RectangleHitTestPipeDef=r;var i;!function(t){function n(t,n,r,i){var a=t.assets,o=a.shapeRect,s=Math.min(Math.abs(a.radiusX),o.width/2);isNaN(s)&&(s=0);var c=Math.min(Math.abs(a.radiusY),o.height/2);return isNaN(c)&&(c=0),e.helpers.draw(i.raw,o.x,o.y,o.width,o.height,s,c),!0}t.drawShape=n}(i=n.tapins||(n.tapins={}))}(n=e.hittest||(e.hittest={}))}(e=t.rectangle||(t.rectangle={}))}(e=t.shapes||(t.shapes={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(e){var n;!function(e){var n=function(t){function e(){t.call(this),this.addTapinBefore("doOverride","shrinkAvailable",r.shrinkAvailable)}return __extends(e,t),e}(t.shape.measure.ShapeMeasurePipeDef);e.RectangleMeasurePipeDef=n;var r;!function(t){function e(t,e,n,r){var i=e.availableSize;return i.width=i.height=0,!0}t.shrinkAvailable=e}(r=e.tapins||(e.tapins={}))}(n=e.measure||(e.measure={}))}(e=t.rectangle||(t.rectangle={}))}(e=t.shapes||(t.shapes={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(e){var n;!function(n){var r=function(t){function e(){t.call(this),this.replaceTapin("doRender",i.doRender)}return __extends(e,t),e}(t.shape.render.ShapeRenderPipeDef);n.RectangleRenderPipeDef=r;var i;!function(t){function n(t,n,r,i,a){if(!n.shouldDraw)return!0;var o=t.shapeRect,s=Math.min(Math.max(0,t.radiusX),o.width/2);isNaN(s)&&(s=0);var c=Math.min(Math.max(0,t.radiusY),o.height/2);return isNaN(c)&&(c=0),e.helpers.draw(i.raw,o.x,o.y,o.width,o.height,s,c),!0}t.doRender=n}(i=n.tapins||(n.tapins={}))}(n=e.render||(e.render={}))}(e=t.rectangle||(t.rectangle={}))}(e=t.shapes||(t.shapes={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n=function(t){function n(){t.call(this),this.replaceTapin("doOverride",e.tapins.doOverride)}return __extends(n,t),n}(t.core.arrange.ArrangePipeDef);e.ShapeArrangePipeDef=n}(n=e.arrange||(e.arrange={}))}(n=e.shape||(e.shape={}))}(e=t.shapes||(t.shapes={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n;!function(e){function n(e,n,i){if(!i||t.CornerRadius.isEmpty(i))return void e.rect(n.x,n.y,n.width,n.height);var a=Math.max(i.topLeft+i.topRight-n.width,0)/2,o=Math.max(i.bottomLeft+i.bottomRight-n.width,0)/2,s=Math.max(i.topLeft+i.bottomLeft-n.height,0)/2,c=Math.max(i.topRight+i.bottomRight-n.height,0)/2,u=i.topLeft-a;e.moveTo(n.x+u,n.y);var l=i.topRight-a,h=i.topRight-c;e.lineTo(n.x+n.width-l,n.y),e.bezierCurveTo(n.x+n.width-l+l*r,n.y,n.x+n.width,n.y+h-h*r,n.x+n.width,n.y+h);var p=i.bottomRight-c,f=i.bottomRight-o;e.lineTo(n.x+n.width,n.y+n.height-p),e.bezierCurveTo(n.x+n.width,n.y+n.height-p+p*r,n.x+n.width+f*r-f,n.y+n.height,n.x+n.width-f,n.y+n.height);var d=i.bottomLeft-o,v=i.bottomLeft-s;e.lineTo(n.x+d,n.y+n.height),e.bezierCurveTo(n.x+d-d*r,n.y+n.height,n.x,n.y+n.height-v+v*r,n.x,n.y+n.height-v);var m=i.topLeft-s;e.lineTo(n.x,n.y+m),e.bezierCurveTo(n.x,n.y+m-m*r,n.x+u-u*r,n.y,n.x+u,n.y)}var r=.55228475;e.drawBorderRect=n}(n=e.helpers||(e.helpers={}))}(n=e.render||(e.render={}))}(n=e.border||(e.border={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n;!function(e){function n(e,n,r,i,a,o){if(!n.shouldRender)return!0;t.Rect.copyTo(e.extents,n.fillExtents);var s=e.borderThickness;t.Thickness.shrinkRect(s,n.fillExtents);var c=n.innerCornerRadius;t.CornerRadius.copyTo(e.cornerRadius,c),t.Thickness.shrinkCornerRadius(s,c);var u=n.outerCornerRadius;return t.CornerRadius.copyTo(e.cornerRadius,u),t.Thickness.growCornerRadius(s,u),!0}e.calcInnerOuter=n}(n=e.tapins||(e.tapins={}))}(n=e.render||(e.render={}))}(n=e.border||(e.border={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n;!function(e){function n(e,n,r,i,a,o){if(n.shouldRender=!1,!e.background&&!e.borderBrush)return!0;if(t.Rect.isEmpty(e.extents))return!0;var s=!e.borderBrush||!e.borderThickness||t.Thickness.isEmpty(e.borderThickness);return s&&!e.background?!0:(n.shouldRender=!0,!0)}e.calcShouldRender=n}(n=e.tapins||(e.tapins={}))}(n=e.render||(e.render={}))}(n=e.border||(e.border={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n;!function(n){function r(n,r,i,a,o,s){if(!r.shouldRender)return!0;a.save(),t.core.helpers.renderLayoutClip(a,n,s);var c=n.borderBrush,u=n.extents,l=r.fillExtents,h=a.raw;c&&!t.Rect.isEmpty(u)&&(h.beginPath(),e.helpers.drawBorderRect(h,u,r.outerCornerRadius),e.helpers.drawBorderRect(h,l,r.innerCornerRadius),a.fillEx(c,u,t.FillRule.EvenOdd));var p=n.background;return p&&!t.Rect.isEmpty(l)&&(h.beginPath(),e.helpers.drawBorderRect(h,l,r.innerCornerRadius),a.fillEx(p,l)),a.restore(),!0}n.doRender=r}(n=e.tapins||(e.tapins={}))}(n=e.render||(e.render={}))}(n=e.border||(e.border={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){function e(t,e,n,r,i){var a=n.layoutClip;return a.x=a.y=a.width=a.height=0,!0}t.buildLayoutClip=e}(e=t.tapins||(t.tapins={}))}(e=t.arrange||(t.arrange={}))}(e=t.canvas||(t.canvas={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n;!function(e){function n(e,n,r,i,a){for(var o,s=n.childRect,c=i.walk();c.step();)o=c.current,t.Size.copyTo(o.assets.desiredSize,s),s.x=o.getAttachedValue("Canvas.Left")||0,s.y=o.getAttachedValue("Canvas.Top")||0,o.arrange(s);return t.Size.copyTo(n.finalSize,n.arrangedSize),!0}e.doOverride=n}(n=e.tapins||(e.tapins={}))}(n=e.arrange||(e.arrange={}))}(n=e.canvas||(e.canvas={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){function e(t,e,n,r,i){var a=e.availableSize;a.width=a.height=Number.POSITIVE_INFINITY;for(var o=r.walk();o.step();)o.current.measure(a);var s=n.desiredSize;return s.width=s.height=0,!0}t.doOverride=e}(e=t.tapins||(t.tapins={}))}(e=t.measure||(t.measure={}))}(e=t.canvas||(t.canvas={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n;!function(e){e.calcPaintBounds=function(e,n,r,i){if(0===(e.dirtyFlags&t.DirtyFlags.Bounds))return!0;t.core.helpers.intersectBoundsWithClipPath(r.globalBoundsWithChildren,r.extentsWithChildren,e.effectPadding,e.renderXform,e.clip,e.layoutClip);var a=r.surfaceBoundsWithChildren,o=i.surface;return o&&i.isTop?(a.x=a.y=0,a.width=o.width,a.height=o.height):t.core.helpers.intersectBoundsWithClipPath(a,r.extentsWithChildren,e.effectPadding,e.absoluteXform,e.clip,e.layoutClip),!0}}(n=e.tapins||(e.tapins={}))}(n=e.processup||(e.processup={}))}(n=e.canvas||(e.canvas={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){var e;!function(e){var n;!function(e){function n(e,n,r,i,a){var o=n.consumed;o.width=o.height=0;for(var s=n.finalSize,c=e.gridState.colMatrix,u=0;u<c.length;u++)o.width+=c[u][u].offered=c[u][u].desired;for(var l=e.gridState.rowMatrix,u=0;u<l.length;u++)o.height+=l[u][u].offered=l[u][u].desired;return o.width!==s.width&&t.helpers.expandStarCols(c,e.columnDefinitions,s),o.height!==s.height&&t.helpers.expandStarRows(l,e.rowDefinitions,s),!0}e.calcConsumed=n}(n=e.tapins||(e.tapins={}))}(e=t.arrange||(t.arrange={}))}(e=t.grid||(t.grid={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n;!function(e){function n(e,n,r,i,a){for(var o=n.childRect,s=e.gridState.rowMatrix,c=e.gridState.colMatrix,u=i.walk();u.step();){var l=u.current,h=Math.min(l.getAttachedValue("Grid.Column"),c.length-1);isNaN(h)&&(h=0);var p=Math.min(l.getAttachedValue("Grid.Row"),s.length-1);isNaN(p)&&(p=0);var f=Math.min(l.getAttachedValue("Grid.ColumnSpan"),c.length-h);isNaN(f)&&(f=1);var d=Math.min(l.getAttachedValue("Grid.RowSpan"),s.length-p);isNaN(d)&&(d=1),o.x=o.y=o.width=o.height=0;for(var v=0;h>v;v++)o.x+=c[v][v].offered;for(var v=h;h+f>v;v++)o.width+=c[v][v].offered;for(var v=0;p>v;v++)o.y+=s[v][v].offered;for(var v=p;p+d>v;v++)o.height+=s[v][v].offered;l.arrange(o)}return t.Size.copyTo(n.finalSize,n.arrangedSize),!0}e.doOverride=n}(n=e.tapins||(e.tapins={}))}(n=e.arrange||(e.arrange={}))}(n=e.grid||(e.grid={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){function e(t,e,n,r,i){for(var a=t.gridState.rowMatrix,o=0;o<a.length;o++)for(var s=0;o>=s;s++)a[o][s].offered=a[o][s].original;for(var c=t.gridState.colMatrix,o=0;o<c.length;o++)for(var s=0;o>=s;s++)c[o][s].offered=c[o][s].original;return!0}t.restoreMeasureResults=e}(e=t.tapins||(t.tapins={}))}(e=t.arrange||(t.arrange={}))}(e=t.grid||(t.grid={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){function e(t,e,n,r,i){for(var a=t.columnDefinitions,o=t.gridState.colMatrix,s=0;s<a.length;s++)a[s].setActualWidth(o[s][s].offered);for(var c=t.rowDefinitions,u=t.gridState.rowMatrix,s=0;s<c.length;s++)c[s].setActualHeight(u[s][s].offered);return!0}t.setActuals=e}(e=t.tapins||(t.tapins={}))}(e=t.arrange||(t.arrange={}))}(e=t.grid||(t.grid={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){var e;!function(e){function n(e,n,r,i,a){for(var o=n.childShapes,s=e.gridState.colMatrix,c=e.gridState.rowMatrix,u=i.walk(),l=0;u.step();l++)l>o.length?o.push((new t.GridChildShape).init(u.current,c,s)):(o[l]=o[l]||new t.GridChildShape).init(u.current,c,s);return l<o.length&&o.slice(l,o.length-l),n.gridShape.init(n.childShapes),n.placements.length=0,n.placements.push(new t.GridChildPlacement(null,0,0,0)),n.placementIndex=0,!0}e.buildShape=n}(e=t.tapins||(t.tapins={}))}(e=t.measure||(t.measure={}))}(e=t.grid||(t.grid={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){var e;!function(e){var n;!function(n){function r(n){return function(r,i,a,o,s){var c=r.gridState.rowMatrix,u=r.gridState.colMatrix;o.children.length>0&&(t.helpers.expandStarCols(u,r.columnDefinitions,i.availableSize),t.helpers.expandStarRows(c,r.rowDefinitions,i.availableSize));for(var l,h=i.placements,p=h[0],f=i.childShapes,d=i.childSize,v=o.walk(),m=0;v.step();m++){var g=v.current,y=f[m];y.shouldMeasurePass(i.gridShape,d,n)&&(y.size(d,c,u),g.measure(d),n!==e.OverridePass.StarAuto&&(l=e.GridChildPlacement.row(c,y,g),l.row===l.col?h.splice(i.placementIndex+1,0,l):(h.splice(i.placementIndex,0,l),i.placementIndex++)),l=e.GridChildPlacement.col(u,y,g),l.row===l.col?h.splice(i.placementIndex+1,0,l):(h.splice(i.placementIndex,0,l),i.placementIndex++))}for(h.splice(i.placementIndex,1),i.placementIndex=-1;l=h.pop();){var x=l.matrix[l.row][l.col];x.desired=Math.max(x.desired,l.size),t.helpers.allocateDesiredSize(c,u)}return i.placementIndex=h.push(p)-1,!0}}n.createDoOverridePass=r}(n=e.tapins||(e.tapins={}))}(e=t.measure||(t.measure={}))}(e=t.grid||(t.grid={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){function e(t,e,n,r,i){var a=n.desiredSize;a.width=a.height=0;for(var o=t.gridState.colMatrix,s=0;s<o.length;s++)a.width+=o[s][s].desired;for(var c=t.gridState.rowMatrix,s=0;s<c.length;s++)a.height+=c[s][s].desired;return!0}t.doOverride=e}(e=t.tapins||(t.tapins={}))}(e=t.measure||(t.measure={}))}(e=t.grid||(t.grid={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){var e;!function(e){var n;!function(e){function n(e,n,r,i,a){var o=e.columnDefinitions.length||1,s=e.gridState.colMatrix;s.length>o&&s.splice(o,s.length-o);for(var c=0;o>c;c++){s.length<=c&&s.push([]);var u=s[c];u.length>c&&u.splice(c,u.length-c);for(var l=0;c>=l;l++)u.length<=l?u.push(new t.Segment):t.Segment.init(u[l])}return!0}e.ensureColMatrix=n}(n=e.tapins||(e.tapins={}))}(e=t.measure||(t.measure={}))}(e=t.grid||(t.grid={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){var e;!function(e){var n;!function(e){function n(e,n,r,i,a){var o=e.rowDefinitions.length||1,s=e.gridState.rowMatrix;s.length>o&&s.splice(o,s.length-o);for(var c=0;o>c;c++){s.length<=c&&s.push([]);var u=s[c];u.length>c+1&&u.splice(c,u.length-c-1);for(var l=0;c>=l;l++)u.length<=l?u.push(new t.Segment):t.Segment.init(u[l])}return!0}e.ensureRowMatrix=n}(n=e.tapins||(e.tapins={}))}(e=t.measure||(t.measure={}))}(e=t.grid||(t.grid={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){var e;!function(e){var n;!function(e){function n(e,n,i,a,o){var s=e.columnDefinitions,c=e.gridState.colMatrix,u=n.totalStars;if(u.width=0,0===s.length){var l=c[0][0];return l.type=t.GridUnitType.Star,l.stars=1,u.width+=1,!0}for(var h=0;h<s.length;h++){var p=s[h],f=p.Width||r;p.setActualWidth(Number.POSITIVE_INFINITY);var d=t.Segment.init(c[h][h],0,p.MinWidth,p.MaxWidth,f.Type);f.Type===t.GridUnitType.Pixel?(d.desired=d.offered=d.clamp(f.Value),p.setActualWidth(d.desired)):f.Type===t.GridUnitType.Star?(d.stars=f.Value,u.width+=f.Value):f.Type===t.GridUnitType.Auto&&(d.desired=d.offered=d.clamp(0))}return!0}var r={Value:1,Type:t.GridUnitType.Star};e.prepareColMatrix=n}(n=e.tapins||(e.tapins={}))}(e=t.measure||(t.measure={}))}(e=t.grid||(t.grid={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){var e;!function(e){var n;!function(e){function n(e,n,i,a,o){var s=e.rowDefinitions,c=e.gridState.rowMatrix,u=n.totalStars;if(u.height=0,0===s.length){var l=c[0][0];return l.type=t.GridUnitType.Star,l.stars=1,u.height+=1,!0}for(var h=0;h<s.length;h++){var p=s[h],f=p.Height||r;p.setActualHeight(Number.POSITIVE_INFINITY);var d=t.Segment.init(c[h][h],0,p.MinHeight,p.MaxHeight,f.Type);f.Type===t.GridUnitType.Pixel?(d.desired=d.offered=d.clamp(f.Value),p.setActualHeight(d.desired)):f.Type===t.GridUnitType.Star?(d.stars=f.Value,u.height+=f.Value):f.Type===t.GridUnitType.Auto&&(d.desired=d.offered=d.clamp(0))}return!0}var r={Value:1,Type:t.GridUnitType.Star};e.prepareRowMatrix=n}(n=e.tapins||(e.tapins={}))}(e=t.measure||(t.measure={}))}(e=t.grid||(t.grid={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){function e(t,e,n,r,i){for(var a=t.gridState.rowMatrix,o=0;o<a.length;o++)for(var s=0;o>=s;s++)a[o][s].original=a[o][s].offered;for(var c=t.gridState.colMatrix,o=0;o<c.length;o++)for(s=0;o>=s;s++)c[o][s].original=c[o][s].offered;return!0}t.saveMeasureResults=e}(e=t.tapins||(t.tapins={}))}(e=t.measure||(t.measure={}))}(e=t.grid||(t.grid={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n;!function(e){function n(e,n,r,i){if(0===(e.dirtyFlags&t.DirtyFlags.Bounds))return!0;var a=r.extents,o=r.extentsWithChildren;a.x=o.x=0,a.y=o.y=0;var s=n.actualSize;if(a.width=o.width=s.width,a.height=o.height=s.height,e.showGridLines)return!0;for(var c,u=i.walk();u.step();)c=u.current.assets,c.totalIsRenderVisible&&t.Rect.union(o,c.globalBoundsWithChildren);return!0}e.calcExtents=n}(n=e.tapins||(e.tapins={}))}(n=e.processup||(e.processup={}))}(n=e.grid||(e.grid={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n;!function(e){function n(e,n,r,i){if(0===(e.dirtyFlags&t.DirtyFlags.Bounds))return!0;if(!e.background&&!e.showGridLines){var a=n.actualSize;a.width=a.height=0}return!0}e.preCalcExtents=n}(n=e.tapins||(e.tapins={}))}(n=e.processup||(e.processup={}))}(n=e.grid||(e.grid={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){function e(t,e,n,r,i){var a=e.imageBounds;a.x=a.y=a.width=a.height=0,t.source&&(a.width=t.source.pixelWidth,a.height=t.source.pixelHeight);var o=e.finalSize;return 0===a.width&&(a.width=o.width),0===a.height&&(a.height=o.height),!0}t.calcImageBounds=e}(e=t.tapins||(t.tapins={}))}(e=t.arrange||(t.arrange={}))}(e=t.image||(t.image={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n;!function(e){function n(e,n,r,i,a){var o=n.imageBounds,s=1,c=1,u=n.finalSize;switch(o.width!==u.width&&(s=u.width/o.width),o.height!==u.height&&(c=u.height/o.height),e.stretch){case t.Stretch.Uniform:s=c=Math.min(s,c);break;case t.Stretch.UniformToFill:s=c=Math.max(s,c);break;case t.Stretch.None:s=c=1;break;case t.Stretch.Fill:}return n.stretchX=s,n.stretchY=c,!0}e.calcStretch=n}(n=e.tapins||(e.tapins={}))}(n=e.arrange||(e.arrange={}))}(n=e.image||(e.image={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){function e(t,e,n,r,i){var a=e.arrangedSize;return a.width=e.imageBounds.width*e.stretchX,a.height=e.imageBounds.height*e.stretchY,!0}t.doOverride=e}(e=t.tapins||(t.tapins={}))}(e=t.arrange||(t.arrange={}))}(e=t.image||(t.image={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n;!function(e){function n(e,n,r,i,a){return r.dirtyFlags|=t.DirtyFlags.ImageMetrics,!0}e.invalidateMetrics=n}(n=e.tapins||(e.tapins={}))}(n=e.arrange||(e.arrange={}))}(n=e.image||(e.image={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){function e(t,e,n,r){return!0}t.canHitInside=e}(e=t.tapins||(t.tapins={}))}(e=t.hittest||(t.hittest={}))}(e=t.image||(t.image={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){function e(t,e,n,r){return n.unshift(t.updater),t.hitChildren=!1,!0}t.insideChildren=e}(e=t.tapins||(t.tapins={}))}(e=t.hittest||(t.hittest={}))}(e=t.image||(t.image={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n;!function(e){function n(e,n,r,i){var a=e.assets.source;if(!a||0===a.pixelWidth||0===a.pixelHeight)return r.shift(),i.restore(),!1;var o=e.assets.stretch;if(o===t.Stretch.Fill||o===t.Stretch.UniformToFill)return!0;var s=e.imgRect;return s.x=s.y=0,s.width=a.pixelWidth,s.height=a.pixelHeight,t.Rect.transform(s,e.assets.imgXform),t.Rect.transform(s,i.currentTransform),t.Rect.containsPoint(s,n)?!0:(r.shift(),i.restore(),!1)}e.insideStretch=n}(n=e.tapins||(e.tapins={}))}(n=e.hittest||(e.hittest={}))}(n=e.image||(e.image={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){function e(t,e,n,r,i){var a=e.imageBounds;return a.x=a.y=a.width=a.height=0,t.source?(a.width=t.source.pixelWidth,a.height=t.source.pixelHeight,!0):!0}t.calcImageBounds=e}(e=t.tapins||(t.tapins={}))}(e=t.measure||(t.measure={}))}(e=t.image||(t.image={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n;!function(e){function n(e,n,r,i,a){var o=n.availableSize,s=o.width,c=o.height,u=n.imageBounds;isFinite(s)||(s=u.width),isFinite(c)||(c=u.height);var l=0,h=0;switch(u.width>0&&(l=s/u.width),u.height>0&&(h=c/u.height),isFinite(o.width)||(l=h),isFinite(o.height)||(h=l),e.stretch){default:case t.Stretch.Uniform:l=h=Math.min(l,h);break;case t.Stretch.UniformToFill:l=h=Math.max(l,h);break;case t.Stretch.Fill:isFinite(o.width)||(l=h),isFinite(o.height)||(h=l);break;case t.Stretch.None:l=h=1}return n.stretchX=l,n.stretchY=h,!0}e.calcStretch=n}(n=e.tapins||(e.tapins={}))}(n=e.measure||(e.measure={}))}(n=e.image||(e.image={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){function e(t,e,n,r,i){var a=n.desiredSize;return a.width=e.imageBounds.width*e.stretchX,a.height=e.imageBounds.height*e.stretchY,!0}t.doOverride=e}(e=t.tapins||(t.tapins={}))}(e=t.measure||(t.measure={}))}(e=t.image||(t.image={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n;!function(e){function n(e,n,r,i,a){if(!n.calcImageMetrics)return!0;var o=n.paintRect.width,s=n.paintRect.height,c=n.imgRect.width,u=n.imgRect.height,l=o/c,h=s/u;0===o&&(l=1),0===s&&(h=1);var p=r.imgXform;if(e.stretch===t.Stretch.Fill)return t.mat3.createScale(l,h,p),!0;var f=1;switch(e.stretch){case t.Stretch.Uniform:f=h>l?l:h;break;case t.Stretch.UniformToFill:f=h>l?h:l;break;case t.Stretch.None:}var d=(o-f*c)/2,v=(s-f*u)/2;return t.mat3.createScale(f,f,p),t.mat3.translate(p,d,v),!0}e.calcImageTransform=n}(n=e.tapins||(e.tapins={}))}(n=e.processdown||(e.processdown={}))}(n=e.image||(e.image={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n;!function(e){function n(e,n,r,i,a){if(!n.calcImageMetrics)return!0;if(e.stretch===t.Stretch.UniformToFill||n.imgAdjust){var o=n.paintRect;t.Rect.roundOut(o);var s=n.imgRect;t.Rect.transform(s,r.imgXform),t.Rect.roundIn(s),r.overlap=t.Rect.rectIn(o,s)}return!0}e.calcOverlap=n}(n=e.tapins||(e.tapins={}))}(n=e.processdown||(e.processdown={}))}(n=e.image||(e.image={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n;!function(e){function n(e,n,r,i,a){if(n.calcImageMetrics=!1,0===(e.dirtyFlags&t.DirtyFlags.ImageMetrics))return!0;t.mat3.identity(r.imgXform),r.overlap=t.RectOverlap.In;var o=n.imgRect;return o.x=o.y=o.width=o.height=0,n.calcImageMetrics=!!e.source,!0}e.checkNeedImageMetrics=n}(n=e.tapins||(e.tapins={}))}(n=e.processdown||(e.processdown={}))}(n=e.image||(e.image={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n;!function(e){function n(e,n,r,i,a){if(!n.calcImageMetrics)return!0;var o=n.imgRect;o.x=o.y=0;var s=e.source;o.width=s.pixelWidth,o.height=s.pixelHeight;var c=n.paintRect;return c.x=c.y=0,c.width=e.actualWidth,c.height=e.actualHeight,n.imgAdjust=!t.Size.isEqual(c,e.renderSize),e.stretch===t.Stretch.None&&t.Rect.union(c,o),!0}e.prepareImageMetrics=n}(n=e.tapins||(e.tapins={}))}(n=e.processdown||(e.processdown={}))}(n=e.image||(e.image={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){
var n;!function(e){var n;!function(e){var n;!function(e){function n(e,n,r,i,a,o){var s=e.source;return s&&0!==s.pixelWidth&&0!==s.pixelHeight?(i.save(),t.core.helpers.renderLayoutClip(i,e,o),i.preapply(e.imgXform),s.draw(i.raw),i.restore(),!0):!0}e.doRender=n}(n=e.tapins||(e.tapins={}))}(n=e.render||(e.render={}))}(n=e.image||(e.image={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n;!function(e){function n(e,n,r,i,a){var o=n.childRect;o.x=o.y=0,t.Size.copyTo(n.finalSize,o);for(var s=i.walk();s.step();)s.current.arrange(o);return t.Size.copyTo(n.finalSize,n.arrangedSize),!0}e.doOverride=n}(n=e.tapins||(e.tapins={}))}(n=e.arrange||(e.arrange={}))}(n=e.panel||(e.panel={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n;!function(e){function n(e,n,r,i){if(0===(e.dirtyFlags&t.DirtyFlags.Bounds))return!0;if(!e.background){var a=n.actualSize;a.width=a.height=0}return!0}e.preCalcExtents=n}(n=e.tapins||(e.tapins={}))}(n=e.processup||(e.processup={}))}(n=e.panel||(e.panel={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n;!function(e){e.postProcessXform=function(e,n,r,i,a){if(0===(e.dirtyFlags&t.DirtyFlags.Transform))return!0;var o=a.popupChild;if(!o)return!0;o.assets.dirtyFlags|=t.DirtyFlags.LocalTransform;var s=o.assets.carrierXform;return s||(s=o.assets.carrierXform||t.mat3.create()),t.mat3.copyTo(r.absoluteXform,s),t.mat3.translate(s,e.horizontalOffset,e.verticalOffset),t.core.Updater.$$addDownDirty(o),!0}}(n=e.tapins||(e.tapins={}))}(n=e.processdown||(e.processdown={}))}(n=e.popup||(e.popup={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n;!function(e){e.preProcessXform=function(e,n,r,i,a){if(0===(e.dirtyFlags&t.DirtyFlags.Transform))return!0;var o=a.popupChild;return o&&(o.assets.dirtyFlags|=t.DirtyFlags.LocalTransform,t.core.Updater.$$addDownDirty(o)),!0}}(n=e.tapins||(e.tapins={}))}(n=e.processdown||(e.processdown={}))}(n=e.popup||(e.popup={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){var e;!function(e){var n;!function(e){function n(e,n,r,i,a){var o=n.arrangedSize;if(!i.subtree)return o.width=o.height=0,!0;var s=e.scrollData;t.helpers.clampOffsets(s)&&s.invalidate();var c=i.subtree.assets.desiredSize,u=n.childRect;return u.x=-s.offsetX,u.y=-s.offsetY,u.width=Math.max(n.finalSize.width,c.width),u.height=Math.max(n.finalSize.height,c.height),i.subtree.arrange(u),!0}e.doOverride=n}(n=e.tapins||(e.tapins={}))}(e=t.arrange||(t.arrange={}))}(e=t.scrollcontentpresenter||(t.scrollcontentpresenter={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n;!function(e){function n(e,n,r,i,a){var o=r.internalClip;return o.x=o.y=0,t.Size.copyTo(n.arrangedSize,o),!0}e.updateClip=n}(n=e.tapins||(e.tapins={}))}(n=e.arrange||(e.arrange={}))}(n=e.scrollcontentpresenter||(e.scrollcontentpresenter={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){var e;!function(e){var n;!function(e){function n(e,n,r,i,a){var o=e.scrollData,s=n.finalSize,c=o.viewportWidth!==s.width||o.viewportHeight!==s.height;return o.viewportWidth=s.width,o.viewportHeight=s.height,(t.helpers.clampOffsets(o)||c)&&o.invalidate(),!0}e.updateExtents=n}(n=e.tapins||(e.tapins={}))}(e=t.arrange||(t.arrange={}))}(e=t.scrollcontentpresenter||(t.scrollcontentpresenter={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){t.doOverride=function(t,e,n,r,i){var a=n.desiredSize;if(a.width=a.height=0,!r.subtree)return!0;var o=t.scrollData,s=e.idealSize;return s.width=o.canHorizontallyScroll?Number.POSITIVE_INFINITY:e.availableSize.width,s.height=o.canVerticallyScroll?Number.POSITIVE_INFINITY:e.availableSize.height,r.subtree.measure(s),!0}}(e=t.tapins||(t.tapins={}))}(e=t.measure||(t.measure={}))}(e=t.scrollcontentpresenter||(t.scrollcontentpresenter={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n;!function(e){function n(e,n,r,i,a){var o=r.desiredSize,s=e.scrollData;return t.Size.copyTo(n.availableSize,o),o.width=Math.min(o.width,s.extentWidth),o.height=Math.min(o.height,s.extentHeight),!0}e.finishDoOverride=n}(n=e.tapins||(e.tapins={}))}(n=e.measure||(e.measure={}))}(n=e.scrollcontentpresenter||(e.scrollcontentpresenter={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){var e;!function(e){var n;!function(e){function n(e,n,r,i,a){var o=e.scrollData,s=n.availableSize,c=i.subtree.assets.desiredSize,u=o.viewportWidth!==s.width||o.viewportHeight!==s.height||o.extentWidth!==c.width||o.extentHeight!==c.height;return o.viewportWidth=s.width,o.viewportHeight=s.height,o.extentWidth=c.width,o.extentHeight=c.height,(t.helpers.clampOffsets(o)||u)&&o.invalidate(),!0}e.updateExtents=n}(n=e.tapins||(e.tapins={}))}(e=t.measure||(t.measure={}))}(e=t.scrollcontentpresenter||(t.scrollcontentpresenter={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n;!function(e){function n(e,n,r,i,a){if(e.orientation!==t.Orientation.Horizontal)return!0;var o=n.finalSize,s=n.arrangedSize;s.width=0;for(var c,u,l=n.childRect,h=i.walk();h.step();)c=h.current,u=c.assets.desiredSize,u.height=o.height,t.Size.copyTo(u,l),l.x=s.width,t.Rect.isEmpty(l)&&(l.x=l.y=l.width=l.height=0),c.arrange(l),s.width+=u.width,s.height=Math.max(s.height,u.height);return s.width=Math.max(s.width,n.finalSize.width),!0}e.doHorizontal=n}(n=e.tapins||(e.tapins={}))}(n=e.arrange||(e.arrange={}))}(n=e.stackpanel||(e.stackpanel={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n;!function(e){function n(e,n,r,i,a){var o=n.childRect;return o.x=o.y=0,t.Size.copyTo(n.finalSize,o),t.Size.copyTo(n.finalSize,n.arrangedSize),!0}e.doOverride=n}(n=e.tapins||(e.tapins={}))}(n=e.arrange||(e.arrange={}))}(n=e.stackpanel||(e.stackpanel={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n;!function(e){function n(e,n,r,i,a){if(e.orientation!==t.Orientation.Vertical)return!0;var o=n.finalSize,s=n.arrangedSize;s.height=0;for(var c,u,l=n.childRect,h=i.walk();h.step();)c=h.current,u=c.assets.desiredSize,u.width=o.width,t.Size.copyTo(u,l),l.y=s.height,t.Rect.isEmpty(l)&&(l.x=l.y=l.width=l.height=0),c.arrange(l),s.width=Math.max(s.width,u.width),s.height+=u.height;return s.height=Math.max(s.height,n.finalSize.height),!0}e.doVertical=n}(n=e.tapins||(e.tapins={}))}(n=e.arrange||(e.arrange={}))}(n=e.stackpanel||(e.stackpanel={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n;!function(e){function n(e,n,r,i,a){if(e.orientation!==t.Orientation.Horizontal)return!0;var o=n.childAvailable;o.height=n.availableSize.height;var s=e.height;isNaN(s)||(o.height=s),o.height=Math.max(Math.min(o.height,e.maxHeight),e.minHeight);for(var c,u,l=r.desiredSize,h=i.walk();h.step();)c=h.current,c.measure(o),u=c.assets.desiredSize,l.width+=u.width,l.height=Math.max(l.height,u.height);return!0}e.doHorizontal=n}(n=e.tapins||(e.tapins={}))}(n=e.measure||(e.measure={}))}(n=e.stackpanel||(e.stackpanel={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){function e(t,e,n,r,i){var a=e.childAvailable;a.width=a.height=Number.POSITIVE_INFINITY;var o=n.desiredSize;return o.width=o.height=0,!0}t.doOverride=e}(e=t.tapins||(t.tapins={}))}(e=t.measure||(t.measure={}))}(e=t.stackpanel||(t.stackpanel={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n;!function(e){function n(e,n,r,i,a){if(e.orientation!==t.Orientation.Vertical)return!0;var o=n.childAvailable;o.width=n.availableSize.width;var s=e.width;isNaN(s)||(o.width=s),o.width=Math.max(Math.min(o.width,e.maxWidth),e.minWidth);for(var c,u,l=r.desiredSize,h=i.walk();h.step();)c=h.current,c.measure(o),u=c.assets.desiredSize,l.height+=u.height,l.width=Math.max(l.width,u.width);return!0}e.doVertical=n}(n=e.tapins||(e.tapins={}))}(n=e.measure||(e.measure={}))}(n=e.stackpanel||(e.stackpanel={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n;!function(e){function n(e,n,r,i,a){return i.subtree&&i.subtree.arrange(n.childRect),t.Size.copyTo(n.finalSize,n.arrangedSize),!0}e.doOverride=n}(n=e.tapins||(e.tapins={}))}(n=e.arrange||(e.arrange={}))}(n=e.usercontrol||(e.usercontrol={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n;!function(e){function n(e,n,r,i,a){if(!i.subtree)return!0;var o=n.totalBorder;t.Thickness.copyTo(e.padding,o),t.Thickness.add(o,e.borderThickness);var s=n.childRect;return s.x=s.y=0,t.Size.copyTo(n.finalSize,s),t.Thickness.shrinkSize(o,s),!0}e.preOverride=n}(n=e.tapins||(e.tapins={}))}(n=e.arrange||(e.arrange={}))}(n=e.usercontrol||(e.usercontrol={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n;!function(e){function n(e,n,r,i,a){var o=r.desiredSize,s=i.subtree;return s&&(s.measure(n.availableSize),t.Size.copyTo(s.assets.desiredSize,o)),!0}e.doOverride=n}(n=e.tapins||(e.tapins={}))}(n=e.measure||(e.measure={}))}(n=e.usercontrol||(e.usercontrol={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n;!function(e){function n(e,n,r,i,a){return t.Thickness.growSize(n.totalBorder,r.desiredSize),t.Size.min(r.desiredSize,n.availableSize),!0}e.postOverride=n}(n=e.tapins||(e.tapins={}))}(n=e.measure||(e.measure={}))}(n=e.usercontrol||(e.usercontrol={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n;!function(e){function n(e,n,r,i,a){var o=n.totalBorder;return t.Thickness.copyTo(e.padding,o),t.Thickness.add(o,e.borderThickness),t.Thickness.shrinkSize(o,n.availableSize),!0}e.preOverride=n}(n=e.tapins||(e.tapins={}))}(n=e.measure||(e.measure={}))}(n=e.usercontrol||(e.usercontrol={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n;!function(e){function n(e,n,r,i,a){if(e.orientation!==t.Orientation.Horizontal)return!0;var o=n.finalSize,s=n.arrangedSize;s.width=0;for(var c,u,l=n.childRect,h=e.scrollData,p=i.walk();p.step();)c=p.current,u=c.assets.desiredSize,u.height=o.height,t.Size.copyTo(u,l),l.x=s.width,l.y=-h.offsetY,t.Rect.isEmpty(l)&&(l.x=l.y=l.width=l.height=0),c.arrange(l),s.width+=u.width,s.height=Math.max(s.height,u.height);return s.width=Math.max(s.width,o.width),!0}e.doHorizontal=n}(n=e.tapins||(e.tapins={}))}(n=e.arrange||(e.arrange={}))}(n=e.virtualizingstackpanel||(e.virtualizingstackpanel={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n;!function(e){function n(e,n,r,i,a){var o=n.childRect;return o.x=o.y=0,t.Size.copyTo(n.finalSize,o),t.Size.copyTo(n.finalSize,n.arrangedSize),!0}e.doOverride=n}(n=e.tapins||(e.tapins={}))}(n=e.arrange||(e.arrange={}))}(n=e.virtualizingstackpanel||(e.virtualizingstackpanel={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n;!function(e){function n(e,n,r,i,a){if(e.orientation!==t.Orientation.Vertical)return!0;var o=n.finalSize,s=n.arrangedSize;s.height=0;for(var c,u,l=n.childRect,h=e.scrollData,p=i.walk();p.step();)c=p.current,u=c.assets.desiredSize,u.width=o.width,t.Size.copyTo(u,l),l.x=-h.offsetX,l.y=s.height,t.Rect.isEmpty(l)&&(l.x=l.y=l.width=l.height=0),c.arrange(l),s.width=Math.max(s.width,u.width),s.height+=u.height;return s.height=Math.max(s.height,o.height),!0}e.doVertical=n}(n=e.tapins||(e.tapins={}))}(n=e.arrange||(e.arrange={}))}(n=e.virtualizingstackpanel||(e.virtualizingstackpanel={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n;!function(e){function n(e,n,r,i,a){if(e.orientation!==t.Orientation.Horizontal)return!0;var o=n.childAvailable,s=e.scrollData;s.canVerticallyScroll&&(o.height=Number.POSITIVE_INFINITY);var c=Math.floor(s.offsetX),u=i.containerOwner.itemCount;i.containerOwner.remove(0,c);for(var l=0,h=r.desiredSize,p=i.containerOwner.createGenerator(c,u);p.generate();){l++;var f=p.current;f.measure(o);var d=f.assets.desiredSize;if(h.height=Math.max(h.height,d.height),h.width+=d.width,h.width>o.width)break}i.containerOwner.remove(c+l,u-(c+l));var v=s.extentHeight!==h.height||s.extentWidth!==u||s.viewportHeight!==o.height||s.viewportWidth!==l;return s.extentHeight=h.height,s.extentWidth=u,s.viewportHeight=o.height,s.viewportWidth=l,v&&s.invalidate(),!0}e.doHorizontal=n}(n=e.tapins||(e.tapins={}))}(n=e.measure||(e.measure={}))}(n=e.virtualizingstackpanel||(e.virtualizingstackpanel={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n;!function(e){function n(e,n,r,i,a){var o=n.childAvailable;t.Size.copyTo(n.availableSize,o);var s=r.desiredSize;return s.width=s.height=0,!0}e.doOverride=n}(n=e.tapins||(e.tapins={}))}(n=e.measure||(e.measure={}))}(n=e.virtualizingstackpanel||(e.virtualizingstackpanel={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n;!function(e){function n(e,n,r,i,a){if(e.orientation!==t.Orientation.Vertical)return!0;var o=n.childAvailable,s=e.scrollData;s.canHorizontallyScroll&&(o.width=Number.POSITIVE_INFINITY);var c=Math.floor(s.offsetY),u=i.containerOwner.itemCount;i.containerOwner.remove(0,c);for(var l=0,h=r.desiredSize,p=i.containerOwner.createGenerator(c,u);p.generate();){l++;var f=p.current;f.measure(o);var d=f.assets.desiredSize;if(h.width=Math.max(h.width,d.width),h.height+=d.height,h.height>o.height)break}i.containerOwner.remove(c+l,u-(c+l));var v=s.extentHeight!==u||s.extentWidth!==h.width||s.viewportHeight!==l||s.viewportWidth!==o.width;return s.extentHeight=u,s.extentWidth=h.width,s.viewportHeight=l,s.viewportWidth=o.width,v&&s.invalidate(),!0}e.doVertical=n}(n=e.tapins||(e.tapins={}))}(n=e.measure||(e.measure={}))}(n=e.virtualizingstackpanel||(e.virtualizingstackpanel={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n;!function(e){function n(e,n,r,i){if(0===(e.dirtyFlags&t.DirtyFlags.Bounds))return!0;var a=n.actualSize;a.width=e.actualWidth,a.height=e.actualHeight;var o=e.naturalBounds;return o.width<=0||o.height<=0||e.width<=0||e.height<=0?(a.width=0,a.height=0,!0):(i.visualParent instanceof t.controls.canvas.CanvasUpdater&&(a.width=0===a.width?o.width:a.width,a.height=0===a.height?o.height:a.height,isNaN(e.width)||(a.width=e.width),isNaN(e.height)||(a.height=e.height)),!0)}e.calcActualSize=n}(n=e.tapins||(e.tapins={}))}(n=e.processup||(e.processup={}))}(n=e.path||(e.path={}))}(e=t.shapes||(t.shapes={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n;!function(e){function n(e,n,r,i){return 0===(e.dirtyFlags&t.DirtyFlags.Bounds)?!0:(t.Size.isEmpty(n.actualSize)?t.Rect.clear(r.extents):(t.Rect.copyTo(r.shapeRect,r.extents),t.Rect.transform(r.extents,r.stretchXform)),t.Rect.copyTo(r.extents,r.extentsWithChildren),!0)}e.calcExtents=n}(n=e.tapins||(e.tapins={}))}(n=e.processup||(e.processup={}))}(n=e.path||(e.path={}))}(e=t.shapes||(t.shapes={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n;!function(e){function n(e,n,r,i){return 0===(e.dirtyFlags&t.DirtyFlags.Bounds)?!0:(t.Rect.copyTo(e.naturalBounds,r.shapeRect),!0)}e.calcShapeRect=n}(n=e.tapins||(e.tapins={}))}(n=e.processup||(e.processup={}))}(n=e.path||(e.path={}))}(e=t.shapes||(t.shapes={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n;!function(e){function n(e,n,r,i){if(0===(e.dirtyFlags&t.DirtyFlags.Bounds))return!0;var a=t.mat3.identity(r.stretchXform),o=n.actualSize;if(t.Size.isEmpty(o)||e.stretch===t.Stretch.None)return!0;var s=r.shapeRect,c=o.width/s.width,u=o.height/s.height,l=0,h=0;switch(e.stretch){case t.Stretch.Uniform:c=u=Math.min(c,u),l=(o.width-s.width*c)/2,h=(o.height-s.height*u)/2;break;case t.Stretch.UniformToFill:c=u=Math.max(c,u)}return t.mat3.translate(a,-s.x,-s.y),t.mat3.scale(a,c,u),t.mat3.translate(a,l,h),!0}e.calcStretch=n}(n=e.tapins||(e.tapins={}))}(n=e.processup||(e.processup={}))}(n=e.path||(e.path={}))}(e=t.shapes||(t.shapes={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){function e(t,e,n,r,i){return e.shouldDraw?(r.preapply(t.stretchXform),t.data.Draw(r),!0):!0}t.doRender=e}(e=t.tapins||(t.tapins={}))}(e=t.render||(t.render={}))}(e=t.path||(t.path={}))}(e=t.shapes||(t.shapes={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n;!function(e){function n(e,n,r,i,a){return n.shouldDraw?(e.fill&&i.fillEx(e.fill,e.shapeRect,e.data?e.data.fillRule:t.FillRule.EvenOdd),!0):!0}e.fill=n}(n=e.tapins||(e.tapins={}))}(n=e.render||(e.render={}))}(n=e.path||(e.path={}))}(e=t.shapes||(t.shapes={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n;!function(e){function n(e,n,r,i){var a=n.arrangedSize;t.Size.copyTo(n.finalSize,a);var o=e.naturalBounds;if(e.stretch===t.Stretch.None)return a.width=Math.max(a.width,o.x+o.width),a.height=Math.max(a.height,o.y+o.height),!0;0===o.width&&(o.width=a.width),0===o.height&&(o.height=a.height);var s=1,c=1;switch(o.width!==a.width&&(s=a.width/o.width),o.height!==a.height&&(c=a.height/o.height),e.stretch){case t.Stretch.Uniform:s=c=Math.min(s,c);break;case t.Stretch.UniformToFill:s=c=Math.max(s,c)}return a.width=o.width*s||0,a.height=o.height*c||0,!0}e.doOverride=n}(n=e.tapins||(e.tapins={}))}(n=e.arrange||(e.arrange={}))}(n=e.shape||(e.shape={}))}(e=t.shapes||(t.shapes={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){function e(t,e,n,r){return t.assets.fill||t.assets.stroke?!0:(n.shift(),r.restore(),!1)}t.canHitInside=e}(e=t.tapins||(t.tapins={}))}(e=t.hittest||(t.hittest={}))}(e=t.shape||(t.shape={}))}(e=t.shapes||(t.shapes={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n;!function(e){function n(e,n,r,i){return(e.assets.shapeFlags&t.ShapeFlags.Empty)===t.ShapeFlags.Empty?(r.shift(),i.restore(),!1):!0}e.canHitShape=n}(n=e.tapins||(e.tapins={}))}(n=e.hittest||(e.hittest={}))}(n=e.shape||(e.shape={}))}(e=t.shapes||(t.shapes={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){function e(t,e,n,r){return!0}t.drawShape=e}(e=t.tapins||(t.tapins={}))}(e=t.hittest||(t.hittest={}))}(e=t.shape||(t.shape={}))}(e=t.shapes||(t.shapes={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){function e(t,e,n,r){var i=t.assets,a=!!i.fill&&r.raw.isPointInPath(e.x,e.y)||!!i.stroke&&r.isPointInStrokeEx(i,e.x,e.y);return r.restore(),a?!0:(n.shift(),r.restore(),!1)}t.finishShape=e}(e=t.tapins||(t.tapins={}))}(e=t.hittest||(t.hittest={}))}(e=t.shape||(t.shape={}))}(e=t.shapes||(t.shapes={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){function e(t,e,n,r){return n.unshift(t.updater),t.hitChildren=!1,!0}t.insideChildren=e}(e=t.tapins||(t.tapins={}))}(e=t.hittest||(t.hittest={}))}(e=t.shape||(t.shape={}))}(e=t.shapes||(t.shapes={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){function e(t,e,n,r){return r.save(),!0}t.prepareShape=e}(e=t.tapins||(t.tapins={}))}(e=t.hittest||(t.hittest={}))}(e=t.shape||(t.shape={}))}(e=t.shapes||(t.shapes={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){function e(t,e,n,r){var i=n.naturalBounds;return i.x=i.y=0,i.width=i.height=1,!0}t.calcNaturalBounds=e}(e=t.tapins||(t.tapins={}))}(e=t.measure||(t.measure={}))}(e=t.shape||(t.shape={}))}(e=t.shapes||(t.shapes={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n;!function(e){function n(e,n,r,i){var a=r.desiredSize,o=r.naturalBounds;if(e.stretch===t.Stretch.None)return a.width=o.x+o.width,a.height=o.y+o.height,!0;var s=n.availableSize;t.Size.copyTo(s,a),isFinite(s.width)||(a.width=o.width),isFinite(s.height)||(a.height=o.height);var c=0,u=0;switch(o.width>0&&(c=a.width/o.width),o.height>0&&(u=a.height/o.height),isFinite(s.width)||(c=u),isFinite(s.height)||(u=c),e.stretch){case t.Stretch.Uniform:c=u=Math.min(c,u);break;case t.Stretch.UniformToFill:c=u=Math.max(c,u);break;case t.Stretch.Fill:isFinite(s.width)||(c=1),isFinite(s.height)||(u=1)}return a.width=o.width*c,a.height=o.height*u,!0}e.doOverride=n}(n=e.tapins||(e.tapins={}))}(n=e.measure||(e.measure={}))}(n=e.shape||(e.shape={}))}(e=t.shapes||(t.shapes={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n;!function(e){function n(e,n,r,i){return 0===(e.dirtyFlags&t.DirtyFlags.Bounds)?!0:(r.extents.x=r.extents.y=0,t.Size.copyTo(n.actualSize,r.extents),t.Rect.copyTo(r.extents,r.extentsWithChildren),!0)}e.calcExtents=n}(n=e.tapins||(e.tapins={}))}(n=e.processup||(e.processup={}))}(n=e.shape||(e.shape={}))}(e=t.shapes||(t.shapes={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n;!function(e){function n(e,n,r,i){if(0===(e.dirtyFlags&t.DirtyFlags.Bounds))return!0;var a=r.shapeRect;if(a.x=a.y=0,t.Size.copyTo(n.actualSize,a),r.shapeFlags=t.ShapeFlags.Empty,t.Rect.isEmpty(a))return!0;var o=e.stroke?e.strokeThickness:0;o>=a.width||o>=a.height?(a.width=Math.max(a.width,o+.001*o),a.height=Math.max(a.height,o+.001*o),r.shapeFlags=t.ShapeFlags.Degenerate):r.shapeFlags=t.ShapeFlags.Normal;var s=o/2;return t.Rect.shrink(a,s,s,s,s),!0}e.calcShapeRect=n}(n=e.tapins||(e.tapins={}))}(n=e.processup||(e.processup={}))}(n=e.shape||(e.shape={}))}(e=t.shapes||(t.shapes={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n;!function(e){function n(e,n,r,i,a){return n.shouldDraw=!1,e.shapeFlags===t.ShapeFlags.Empty?!0:e.fill||e.stroke?(n.shouldDraw=!0,!0):!0}e.calcShouldDraw=n}(n=e.tapins||(e.tapins={}))}(n=e.render||(e.render={}))}(n=e.shape||(e.shape={}))}(e=t.shapes||(t.shapes={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){function e(t,e,n,r,i){return e.shouldDraw?!0:!0}t.doRender=e}(e=t.tapins||(t.tapins={}))}(e=t.render||(t.render={}))}(e=t.shape||(t.shape={}))}(e=t.shapes||(t.shapes={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){function e(t,e,n,r,i){return e.shouldDraw?(t.fill&&r.fillEx(t.fill,t.shapeRect,t.fillRule),!0):!0}t.fill=e}(e=t.tapins||(t.tapins={}))}(e=t.render||(t.render={}))}(e=t.shape||(t.shape={}))}(e=t.shapes||(t.shapes={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){function e(t,e,n,r,i){return e.shouldDraw?(r.restore(),!0):!0}t.finishDraw=e}(e=t.tapins||(t.tapins={}))}(e=t.render||(t.render={}))}(e=t.shape||(t.shape={}))}(e=t.shapes||(t.shapes={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n;!function(e){function n(e,n,r,i,a,o){return n.shouldDraw?(i.save(),t.core.helpers.renderLayoutClip(i,e,o),!0):!0}e.prepareDraw=n}(n=e.tapins||(e.tapins={}))}(n=e.render||(e.render={}))}(n=e.shape||(e.shape={}))}(e=t.shapes||(t.shapes={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){var e;!function(t){function e(t,e,i,a,o){if(!e.shouldDraw)return!0;var s=t.stroke;if(!(s&&t.strokeThickness>0))return!0;var c=a.raw;return c.lineWidth=t.strokeThickness,c.lineCap=n[t.strokeStartLineCap||t.strokeEndLineCap||0]||n[0],c.lineJoin=r[t.strokeLineJoin||0]||r[0],c.miterLimit=t.strokeMiterLimit,s.setupBrush(c,t.shapeRect),c.strokeStyle=s.toHtml5Object(),c.stroke(),!0}var n=["butt","square","round","butt"],r=["miter","bevel","round"];t.stroke=e}(e=t.tapins||(t.tapins={}))}(e=t.render||(t.render={}))}(e=t.shape||(t.shape={}))}(e=t.shapes||(t.shapes={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n;!function(e){var n;!function(e){function n(e,n,r,i,a,o){if(!n.shouldRender||t.Thickness.isEmpty(e.borderThickness))return!0;if(t.Thickness.isBalanced(e.borderThickness)){var s=n.innerCornerRadius,c=n.outerCornerRadius,u=n.middleCornerRadius;u.topLeft=(s.topLeft+c.topLeft)/2,u.topRight=(s.topRight+c.topRight)/2,u.bottomRight=(s.bottomRight+c.bottomRight)/2,u.bottomLeft=(s.bottomLeft+c.bottomLeft)/2,t.Rect.copyTo(e.extents,n.strokeExtents);var l=e.borderThickness;t.Rect.shrink(n.strokeExtents,l.left/2,l.top/2,l.right/2,l.bottom/2)}return!0}e.calcBalanced=n}(n=e.shim||(e.shim={}))}(n=e.tapins||(e.tapins={}))}(n=e.render||(e.render={}))}(n=e.border||(e.border={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n;!function(n){var r;!function(n){function r(e,n,r,a,o,s){return!n.shouldRender||t.Thickness.isBalanced(e.borderThickness)?!0:(n.pattern||(n.pattern=i(e.borderBrush,e.extents,n.fillExtents,n.outerCornerRadius,n.innerCornerRadius)),!0)}function i(n,r,i,o,s){a=a||new t.core.render.RenderContext(document.createElement("canvas").getContext("2d"));var c=a.raw;return t.Size.copyTo(r,c.canvas),c.beginPath(),e.helpers.drawBorderRect(c,r,o),a.fillEx(n,r),c.globalCompositeOperation="xor",c.beginPath(),e.helpers.drawBorderRect(c,i,s),c.fill(),c.createPattern(c.canvas,"no-repeat")}n.createPattern=r;var a}(r=n.shim||(n.shim={}))}(n=e.tapins||(e.tapins={}))}(n=e.render||(e.render={}))}(n=e.border||(e.border={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n;!function(n){var r;!function(n){function r(e,n,r,s,c,u){return n.shouldRender?(s.save(),t.core.helpers.renderLayoutClip(s,e,u),e.background&&a(s,e,n),n.pattern?i(s,e,n):e.borderBrush&&o(s,e,n),s.restore(),!0):!0}function i(t,n,r){var i=t.raw;i.beginPath(),i.fillStyle=r.pattern,e.helpers.drawBorderRect(i,n.extents,r.outerCornerRadius),i.fill()}function a(t,n,r){t.raw.beginPath(),e.helpers.drawBorderRect(t.raw,r.fillExtents,r.innerCornerRadius),t.fillEx(n.background,r.fillExtents)}function o(t,n,r){var i=t.raw;i.beginPath(),e.helpers.drawBorderRect(i,r.strokeExtents,r.middleCornerRadius),i.lineWidth=n.borderThickness.left,i.lineCap="butt",i.lineJoin="miter",i.miterLimit=0,n.borderBrush.setupBrush(i,r.strokeExtents),i.strokeStyle=n.borderBrush.toHtml5Object(),i.stroke()}n.doRender=r}(r=n.shim||(n.shim={}))}(n=e.tapins||(e.tapins={}))}(n=e.render||(e.render={}))}(n=e.border||(e.border={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));var minerva;!function(t){var e;!function(e){var n;!function(e){var n;!function(e){var n;!function(e){var n;!function(e){function n(e,n,a,o,s,c){return n.shouldRender?t.Thickness.isEmpty(e.borderThickness)?(n.pattern=null,!0):n.oldMetrics?(i(e,n,n.oldMetrics)&&(n.pattern=null),r(e,n,n.oldMetrics),!0):(n.oldMetrics={},r(e,n,n.oldMetrics),n.pattern=null,!0):!0}function r(t,e,n){n.borderBrush=t.borderBrush,n.borderThickness=t.borderThickness,n.extents=t.extents,n.fillExtents=e.fillExtents,n.outerCornerRadius=e.outerCornerRadius,n.innerCornerRadius=e.innerCornerRadius}function i(e,n,r){return!(r.borderBrush===e.borderBrush&&t.Rect.isEqual(r.extents,e.extents)&&t.Rect.isEqual(r.fillExtents,n.fillExtents)&&t.CornerRadius.isEqual(r.outerCornerRadius,n.outerCornerRadius)&&t.CornerRadius.isEqual(r.innerCornerRadius,n.innerCornerRadius))}e.invalidatePattern=n}(n=e.shim||(e.shim={}))}(n=e.tapins||(e.tapins={}))}(n=e.render||(e.render={}))}(n=e.border||(e.border={}))}(e=t.controls||(t.controls={}))}(minerva||(minerva={}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhdGgvc2VnbWVudHMvYXJjVG8udHMiLCJfVmVyc2lvbi50cyIsIkFsaWdubWVudC50cyIsIkNvcm5lclJhZGl1cy50cyIsIkVudW1zLnRzIiwiZmluZEVsZW1lbnRzSW5Ib3N0U3BhY2UudHMiLCJGbGFncy50cyIsIkZvbnQudHMiLCJGb250SGVpZ2h0LnRzIiwiSUJydXNoLnRzIiwiSVNpemVVcGRhdGVyLnRzIiwiSVdhbGtlci50cyIsImxheW91dEVycm9yLnRzIiwibmF0dXJhbC50cyIsIlBvaW50LnRzIiwibWF0L3ZlYzIudHMiLCJSZWN0LnRzIiwic2luZ2xldG9uLnRzIiwiU2l6ZS50cyIsIlRoaWNrbmVzcy50cyIsIlZlY3Rvci50cyIsIlZpc2liaWxpdHkudHMiLCJ6b29tLnRzIiwiY29yZS9VcGRhdGVyLnRzIiwibWluZXJ2YS5qcyIsImFub24vQW5vbnltb3VzVXBkYXRlci50cyIsImNvcmUvaGVscGVycy50cyIsImNvcmUvcmVhY3QudHMiLCJjb3JlL1VwZGF0ZXJUcmVlLnRzIiwiZW5naW5lL2RyYWZ0LnRzIiwiZW5naW5lL3Byb2Nlc3MudHMiLCJlbmdpbmUvU3VyZmFjZS50cyIsIm1hdC9tYXQzLnRzIiwibWF0L21hdDQudHMiLCJtYXQvdHJhbnNmb3JtNC50cyIsIm1hdC92ZWM0LnRzIiwicGF0aC9QYXRoLnRzIiwicGlwZS9JVHJpUGlwZS50cyIsInBpcGUvUGlwZURlZi50cyIsInBpcGUvVHJpUGlwZURlZi50cyIsInBvbHlmaWxsL3BlcmZleC50cyIsInRleHQvRG9jdW1lbnRMYXlvdXREZWYudHMiLCJ0ZXh0L0lEb2N1bWVudExheW91dC50cyIsInRleHQvVGV4dFVwZGF0ZXIudHMiLCJjb3JlL2FycmFuZ2UvQXJyYW5nZVBpcGVEZWYudHMiLCJhbm9uL2FycmFuZ2UvQW5vbnltb3VzQXJyYW5nZVBpcGVEZWYudHMiLCJjb3JlL21lYXN1cmUvTWVhc3VyZVBpcGVEZWYudHMiLCJhbm9uL21lYXN1cmUvQW5vbnltb3VzTWVhc3VyZVBpcGVEZWYudHMiLCJjb250cm9scy9ib3JkZXIvQm9yZGVyVXBkYXRlci50cyIsImNvbnRyb2xzL2JvcmRlci9Cb3JkZXJVcGRhdGVyVHJlZS50cyIsImNvbnRyb2xzL3BhbmVsL1BhbmVsVXBkYXRlci50cyIsImNvbnRyb2xzL2NhbnZhcy9DYW52YXNVcGRhdGVyLnRzIiwiY29udHJvbHMvY29udHJvbC9Db250cm9sVXBkYXRlci50cyIsImNvbnRyb2xzL2NvbnRyb2wvQ29udHJvbFVwZGF0ZXJUcmVlLnRzIiwiY29udHJvbHMvZ3JpZC9HcmlkVW5pdFR5cGUudHMiLCJjb250cm9scy9ncmlkL0dyaWRVcGRhdGVyLnRzIiwiY29udHJvbHMvZ3JpZC9JR3JpZFN0YXRlLnRzIiwiY29udHJvbHMvZ3JpZC9TZWdtZW50LnRzIiwiY29udHJvbHMvaW1hZ2UvSW1hZ2VVcGRhdGVyLnRzIiwiY29udHJvbHMvb3ZlcmxheS9PdmVybGF5VXBkYXRlci50cyIsImNvbnRyb2xzL292ZXJsYXkvT3ZlcmxheVVwZGF0ZXJUcmVlLnRzIiwiY29udHJvbHMvcGFuZWwvUGFuZWxVcGRhdGVyVHJlZS50cyIsImNvbnRyb2xzL3BvcHVwL1BvcHVwVXBkYXRlci50cyIsImNvbnRyb2xzL3BvcHVwL1BvcHVwVXBkYXRlclRyZWUudHMiLCJjb250cm9scy9zY3JvbGxjb250ZW50cHJlc2VudGVyL2hlbHBlcnMudHMiLCJjb250cm9scy9zY3JvbGxjb250ZW50cHJlc2VudGVyL1Njcm9sbENvbnRlbnRQcmVzZW50ZXJVcGRhdGVyLnRzIiwiY29udHJvbHMvc3RhY2twYW5lbC9TdGFja1BhbmVsVXBkYXRlci50cyIsImNvbnRyb2xzL3RleHRibG9jay9UZXh0QmxvY2tVcGRhdGVyLnRzIiwiY29udHJvbHMvdGV4dGJsb2NrL1RleHRCbG9ja1VwZGF0ZXJUcmVlLnRzIiwiY29udHJvbHMvdGV4dGJveHZpZXcvQmxpbmtlci50cyIsImNvbnRyb2xzL3RleHRib3h2aWV3L1RleHRCb3hWaWV3VXBkYXRlci50cyIsImNvbnRyb2xzL3RleHRib3h2aWV3L1RleHRCb3hWaWV3VXBkYXRlclRyZWUudHMiLCJjb250cm9scy91c2VyY29udHJvbC9Vc2VyQ29udHJvbFVwZGF0ZXIudHMiLCJjb250cm9scy92aWRlby9WaWRlb1VwZGF0ZXIudHMiLCJjb250cm9scy92aXJ0dWFsaXppbmdwYW5lbC9WaXJ0dWFsaXppbmdQYW5lbFVwZGF0ZXIudHMiLCJjb250cm9scy92aXJ0dWFsaXppbmdwYW5lbC9WaXJ0dWFsaXppbmdQYW5lbFVwZGF0ZXJUcmVlLnRzIiwiY29udHJvbHMvdmlydHVhbGl6aW5nc3RhY2twYW5lbC9WaXJ0dWFsaXppbmdTdGFja1BhbmVsVXBkYXRlci50cyIsImNvcmUvYXJyYW5nZS9BcnJhbmdlQmluZGVyLnRzIiwiY29yZS9kcmFmdC9EcmFmdFBpcGVEZWYudHMiLCJjb3JlL2hpdHRlc3QvSGl0VGVzdFBpcGVEZWYudHMiLCJjb3JlL21lYXN1cmUvTWVhc3VyZUJpbmRlci50cyIsImNvcmUvcHJvY2Vzc2Rvd24vUHJvY2Vzc0Rvd25QaXBlRGVmLnRzIiwiY29yZS9wcm9jZXNzdXAvUHJvY2Vzc1VwUGlwZURlZi50cyIsImNvcmUvcmVuZGVyL1JlbmRlckNvbnRleHQudHMiLCJjb3JlL3JlbmRlci9SZW5kZXJDb250ZXh0U2l6ZS50cyIsImNvcmUvcmVuZGVyL1JlbmRlclBpcGVEZWYudHMiLCJjb3JlL3NpemluZy9TaXppbmdQaXBlRGVmLnRzIiwicGF0aC9zZWdtZW50cy9hcmMudHMiLCJwYXRoL3NlZ21lbnRzL2Nsb3NlLnRzIiwicGF0aC9zZWdtZW50cy9jdWJpY0Jlemllci50cyIsInBhdGgvc2VnbWVudHMvZWxsaXBzZS50cyIsInBhdGgvc2VnbWVudHMvZWxsaXB0aWNhbEFyYy50cyIsInBhdGgvc2VnbWVudHMvbGluZS50cyIsInBhdGgvc2VnbWVudHMvbW92ZS50cyIsInBhdGgvc2VnbWVudHMvcXVhZHJhdGljQmV6aWVyLnRzIiwicGF0aC9zZWdtZW50cy9yZWN0LnRzIiwicGF0aC9zZWdtZW50cy9yb3VuZGVkUmVjdC50cyIsInBvbHlmaWxsL0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRC9iYWNraW5nU3RvcmVQaXhlbFJhdGlvLnRzIiwicG9seWZpbGwvQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEL2VsbGlwc2UudHMiLCJwb2x5ZmlsbC9DYW52YXNSZW5kZXJpbmdDb250ZXh0MkQvaXNQb2ludEluU3Ryb2tlLnRzIiwic2hhcGVzL3NoYXBlL1NoYXBlVXBkYXRlci50cyIsInNoYXBlcy9lbGxpcHNlL0VsbGlwc2VVcGRhdGVyLnRzIiwic2hhcGVzL3BhdGgvUGF0aFVwZGF0ZXIudHMiLCJzaGFwZXMvbGluZS9MaW5lVXBkYXRlci50cyIsInNoYXBlcy9wYXRoL0Fub25QYXRoR2VvbWV0cnkudHMiLCJzaGFwZXMvcG9seWxpbmUvUG9seWxpbmVVcGRhdGVyLnRzIiwic2hhcGVzL3BvbHlnb24vUG9seWdvblVwZGF0ZXIudHMiLCJzaGFwZXMvcmVjdGFuZ2xlL1JlY3RhbmdsZVVwZGF0ZXIudHMiLCJ0ZXh0L2xheW91dC9DbHVzdGVyLnRzIiwidGV4dC9sYXlvdXQvTGluZS50cyIsInRleHQvbGF5b3V0L1J1bi50cyIsInRleHQvcnVuL2RvTGF5b3V0Tm9XcmFwLnRzIiwidGV4dC9ydW4vZG9MYXlvdXRXcmFwLnRzIiwidGV4dC9ydW4vUnVuTGF5b3V0RGVmLnRzIiwiY29udHJvbHMvYm9yZGVyL2FycmFuZ2UvQm9yZGVyQXJyYW5nZVBpcGVEZWYudHMiLCJjb250cm9scy9ib3JkZXIvaGl0dGVzdC9Cb3JkZXJIaXRUZXN0UGlwZURlZi50cyIsImNvbnRyb2xzL2JvcmRlci9tZWFzdXJlL0JvcmRlck1lYXN1cmVQaXBlRGVmLnRzIiwiY29udHJvbHMvYm9yZGVyL3JlbmRlci9Cb3JkZXJSZW5kZXJQaXBlRGVmLnRzIiwiY29udHJvbHMvYm9yZGVyL3JlbmRlci9TaGltQm9yZGVyUmVuZGVyUGlwZURlZi50cyIsImNvbnRyb2xzL3BhbmVsL2FycmFuZ2UvUGFuZWxBcnJhbmdlUGlwZURlZi50cyIsImNvbnRyb2xzL2NhbnZhcy9hcnJhbmdlL0NhbnZhc0FycmFuZ2VQaXBlRGVmLnRzIiwiY29udHJvbHMvcGFuZWwvbWVhc3VyZS9QYW5lbE1lYXN1cmVQaXBlRGVmLnRzIiwiY29udHJvbHMvY2FudmFzL21lYXN1cmUvQ2FudmFzTWVhc3VyZVBpcGVEZWYudHMiLCJjb250cm9scy9jYW52YXMvcHJvY2Vzc2Rvd24vQ2FudmFzUHJvY2Vzc0Rvd25QaXBlRGVmLnRzIiwiY29udHJvbHMvY2FudmFzL3Byb2Nlc3N1cC9DYW52YXNQcm9jZXNzVXBQaXBlRGVmLnRzIiwiY29udHJvbHMvY29udHJvbC9oaXR0ZXN0L0NvbnRyb2xIaXRUZXN0UGlwZURlZi50cyIsImNvbnRyb2xzL2dyaWQvYXJyYW5nZS9HcmlkQXJyYW5nZVBpcGVEZWYudHMiLCJjb250cm9scy9ncmlkL2hlbHBlcnMvYWxsb2NhdGVEZXNpcmVkU2l6ZS50cyIsImNvbnRyb2xzL2dyaWQvaGVscGVycy9hc3NpZ25TaXplLnRzIiwiY29udHJvbHMvZ3JpZC9oZWxwZXJzL2V4cGFuZFN0YXJDb2xzLnRzIiwiY29udHJvbHMvZ3JpZC9oZWxwZXJzL2V4cGFuZFN0YXJSb3dzLnRzIiwiY29udHJvbHMvZ3JpZC9tZWFzdXJlL0dyaWRDaGlsZFBsYWNlbWVudC50cyIsImNvbnRyb2xzL2dyaWQvbWVhc3VyZS9HcmlkQ2hpbGRTaGFwZS50cyIsImNvbnRyb2xzL2dyaWQvbWVhc3VyZS9HcmlkTWVhc3VyZVBpcGVEZWYudHMiLCJjb250cm9scy9ncmlkL21lYXN1cmUvR3JpZFNoYXBlLnRzIiwiY29udHJvbHMvcGFuZWwvcHJvY2Vzc3VwL1BhbmVsUHJvY2Vzc1VwUGlwZURlZi50cyIsImNvbnRyb2xzL2dyaWQvcHJvY2Vzc3VwL0dyaWRQcm9jZXNzVXBQaXBlRGVmLnRzIiwiY29udHJvbHMvcGFuZWwvcmVuZGVyL1BhbmVsUmVuZGVyUGlwZURlZi50cyIsImNvbnRyb2xzL2dyaWQvcmVuZGVyL0dyaWRSZW5kZXJQaXBlRGVmLnRzIiwiY29udHJvbHMvaW1hZ2UvYXJyYW5nZS9JbWFnZUFycmFuZ2VQaXBlRGVmLnRzIiwiY29udHJvbHMvaW1hZ2UvaGl0dGVzdC9JbWFnZUhpdFRlc3RQaXBlRGVmLnRzIiwiY29udHJvbHMvaW1hZ2UvbWVhc3VyZS9JbWFnZU1lYXN1cmVQaXBlRGVmLnRzIiwiY29udHJvbHMvaW1hZ2UvcHJvY2Vzc2Rvd24vSW1hZ2VQcm9jZXNzRG93blBpcGVEZWYudHMiLCJjb250cm9scy9pbWFnZS9yZW5kZXIvSW1hZ2VSZW5kZXJQaXBlRGVmLnRzIiwiY29udHJvbHMvb3ZlcmxheS9oaXR0ZXN0L092ZXJsYXlIaXRUZXN0UGlwZURlZi50cyIsImNvbnRyb2xzL292ZXJsYXkvcHJvY2Vzc3VwL092ZXJsYXlQcm9jZXNzVXBQaXBlRGVmLnRzIiwiY29udHJvbHMvcGFuZWwvaGl0dGVzdC9QYW5lbEhpdFRlc3RQaXBlRGVmLnRzIiwiY29udHJvbHMvcG9wdXAvaGl0dGVzdC9Qb3B1cEhpdFRlc3RQaXBlRGVmLnRzIiwiY29udHJvbHMvcG9wdXAvcHJvY2Vzc2Rvd24vUG9wdXBQcm9jZXNzRG93blBpcGVEZWYudHMiLCJjb250cm9scy9wb3B1cC9wcm9jZXNzdXAvUG9wdXBQcm9jZXNzVXBQaXBlRGVmLnRzIiwiY29udHJvbHMvc2Nyb2xsY29udGVudHByZXNlbnRlci9hcnJhbmdlL1Njcm9sbENvbnRlbnRQcmVzZW50ZXJBcnJhbmdlUGlwZURlZi50cyIsImNvbnRyb2xzL3Njcm9sbGNvbnRlbnRwcmVzZW50ZXIvbWVhc3VyZS9TY3JvbGxDb250ZW50UHJlc2VudGVyTWVhc3VyZVBpcGVEZWYudHMiLCJjb250cm9scy9zY3JvbGxjb250ZW50cHJlc2VudGVyL3JlbmRlci9TY3JvbGxDb250ZW50UHJlc2VudGVyUmVuZGVyUGlwZURlZi50cyIsImNvbnRyb2xzL3N0YWNrcGFuZWwvYXJyYW5nZS9TdGFja1BhbmVsQXJyYW5nZVBpcGVEZWYudHMiLCJjb250cm9scy9zdGFja3BhbmVsL21lYXN1cmUvU3RhY2tQYW5lbE1lYXN1cmVQaXBlRGVmLnRzIiwiY29udHJvbHMvdGV4dGJsb2NrL2FycmFuZ2UvVGV4dEJsb2NrQXJyYW5nZVBpcGVEZWYudHMiLCJjb250cm9scy90ZXh0YmxvY2svaGl0dGVzdC9UZXh0QmxvY2tIaXRUZXN0UGlwZURlZi50cyIsImNvbnRyb2xzL3RleHRibG9jay9tZWFzdXJlL1RleHRCbG9ja01lYXN1cmVQaXBlRGVmLnRzIiwiY29udHJvbHMvdGV4dGJsb2NrL3Byb2Nlc3N1cC9UZXh0QmxvY2tQcm9jZXNzVXBQaXBlRGVmLnRzIiwiY29udHJvbHMvdGV4dGJsb2NrL3JlbmRlci9UZXh0QmxvY2tSZW5kZXJQaXBlRGVmLnRzIiwiY29udHJvbHMvdGV4dGJveHZpZXcvYXJyYW5nZS9UZXh0Qm94Vmlld0FycmFuZ2VQaXBlRGVmLnRzIiwiY29udHJvbHMvdGV4dGJveHZpZXcvaGl0dGVzdC9UZXh0Qm94Vmlld0hpdFRlc3RQaXBlRGVmLnRzIiwiY29udHJvbHMvdGV4dGJveHZpZXcvbWVhc3VyZS9UZXh0Qm94Vmlld01lYXN1cmVQaXBlRGVmLnRzIiwiY29udHJvbHMvdGV4dGJveHZpZXcvcHJvY2Vzc3VwL1RleHRCb3hWaWV3UHJvY2Vzc1VwUGlwZURlZi50cyIsImNvbnRyb2xzL3RleHRib3h2aWV3L3JlbmRlci9UZXh0Qm94Vmlld1JlbmRlclBpcGVEZWYudHMiLCJjb250cm9scy91c2VyY29udHJvbC9hcnJhbmdlL1VzZXJDb250cm9sQXJyYW5nZVBpcGVEZWYudHMiLCJjb250cm9scy91c2VyY29udHJvbC9tZWFzdXJlL1VzZXJDb250cm9sTWVhc3VyZVBpcGVEZWYudHMiLCJjb250cm9scy91c2VyY29udHJvbC9wcm9jZXNzZG93bi9Vc2VyQ29udHJvbFByb2Nlc3NEb3duUGlwZURlZi50cyIsImNvbnRyb2xzL3ZpcnR1YWxpemluZ3N0YWNrcGFuZWwvYXJyYW5nZS9WaXJ0dWFsaXppbmdTdGFja1BhbmVsQXJyYW5nZVBpcGVEZWYudHMiLCJjb250cm9scy92aXJ0dWFsaXppbmdzdGFja3BhbmVsL21lYXN1cmUvVmlydHVhbGl6aW5nU3RhY2tQYW5lbE1lYXN1cmVQaXBlRGVmLnRzIiwiY29yZS9hcnJhbmdlL3RhcGlucy9hcHBseVJvdW5kaW5nLnRzIiwiY29yZS9hcnJhbmdlL3RhcGlucy9idWlsZExheW91dENsaXAudHMiLCJjb3JlL2FycmFuZ2UvdGFwaW5zL2J1aWxkTGF5b3V0WGZvcm0udHMiLCJjb3JlL2FycmFuZ2UvdGFwaW5zL2J1aWxkUmVuZGVyU2l6ZS50cyIsImNvcmUvYXJyYW5nZS90YXBpbnMvY2FsY0ZsaXAudHMiLCJjb3JlL2FycmFuZ2UvdGFwaW5zL2NhbGNTdHJldGNoZWQudHMiLCJjb3JlL2FycmFuZ2UvdGFwaW5zL2NhbGNWaXN1YWxPZmZzZXQudHMiLCJjb3JlL2FycmFuZ2UvdGFwaW5zL2NoZWNrTmVlZEFycmFuZ2UudHMiLCJjb3JlL2FycmFuZ2UvdGFwaW5zL2NvbXBsZXRlT3ZlcnJpZGUudHMiLCJjb3JlL2FycmFuZ2UvdGFwaW5zL2RvT3ZlcnJpZGUudHMiLCJjb3JlL2FycmFuZ2UvdGFwaW5zL2ludmFsaWRhdGVGdXR1cmUudHMiLCJjb3JlL2FycmFuZ2UvdGFwaW5zL3ByZXBhcmVPdmVycmlkZS50cyIsImNvcmUvYXJyYW5nZS90YXBpbnMvdmFsaWRhdGVGaW5hbFJlY3QudHMiLCJjb3JlL2FycmFuZ2UvdGFwaW5zL3ZhbGlkYXRlVmlzaWJpbGl0eS50cyIsImNvcmUvZHJhZnQvdGFwaW5zL2FycmFuZ2UudHMiLCJjb3JlL2RyYWZ0L3RhcGlucy9kZXRlcm1pbmVQaGFzZS50cyIsImNvcmUvZHJhZnQvdGFwaW5zL2ZsdXNoUHJldmlvdXMudHMiLCJjb3JlL2RyYWZ0L3RhcGlucy9tZWFzdXJlLnRzIiwiY29yZS9kcmFmdC90YXBpbnMvbm90aWZ5UmVzaXplLnRzIiwiY29yZS9kcmFmdC90YXBpbnMvcHJlcGFyZUFycmFuZ2UudHMiLCJjb3JlL2RyYWZ0L3RhcGlucy9wcmVwYXJlTWVhc3VyZS50cyIsImNvcmUvZHJhZnQvdGFwaW5zL3ByZXBhcmVTaXppbmcudHMiLCJjb3JlL2RyYWZ0L3RhcGlucy9zaXppbmcudHMiLCJjb3JlL2hpdHRlc3QvdGFwaW5zL2NhbkhpdC50cyIsImNvcmUvaGl0dGVzdC90YXBpbnMvY2FuSGl0SW5zaWRlLnRzIiwiY29yZS9oaXR0ZXN0L3RhcGlucy9jb21wbGV0ZUN0eC50cyIsImNvcmUvaGl0dGVzdC90YXBpbnMvaW5zaWRlQ2hpbGRyZW4udHMiLCJjb3JlL2hpdHRlc3QvdGFwaW5zL2luc2lkZUNsaXAudHMiLCJjb3JlL2hpdHRlc3QvdGFwaW5zL2luc2lkZUxheW91dENsaXAudHMiLCJjb3JlL2hpdHRlc3QvdGFwaW5zL2luc2lkZU9iamVjdC50cyIsImNvcmUvaGl0dGVzdC90YXBpbnMvcHJlcGFyZUN0eC50cyIsImNvcmUvbWVhc3VyZS90YXBpbnMvYXBwbHlUZW1wbGF0ZS50cyIsImNvcmUvbWVhc3VyZS90YXBpbnMvY2hlY2tOZWVkTWVhc3VyZS50cyIsImNvcmUvbWVhc3VyZS90YXBpbnMvY29tcGxldGVPdmVycmlkZS50cyIsImNvcmUvbWVhc3VyZS90YXBpbnMvZG9PdmVycmlkZS50cyIsImNvcmUvbWVhc3VyZS90YXBpbnMvZmluaXNoRGVzaXJlZC50cyIsImNvcmUvbWVhc3VyZS90YXBpbnMvaW52YWxpZGF0ZUZ1dHVyZS50cyIsImNvcmUvbWVhc3VyZS90YXBpbnMvcHJlcGFyZU92ZXJyaWRlLnRzIiwiY29yZS9tZWFzdXJlL3RhcGlucy92YWxpZGF0ZS50cyIsImNvcmUvbWVhc3VyZS90YXBpbnMvdmFsaWRhdGVWaXNpYmlsaXR5LnRzIiwiY29yZS9wcm9jZXNzZG93bi90YXBpbnMvY2FsY0Fic29sdXRlWGZvcm0udHMiLCJjb3JlL3Byb2Nlc3Nkb3duL3RhcGlucy9jYWxjUmVuZGVyWGZvcm0udHMiLCJjb3JlL3Byb2Nlc3Nkb3duL3RhcGlucy9jYWxjWGZvcm1PcmlnaW4udHMiLCJjb3JlL3Byb2Nlc3Nkb3duL3RhcGlucy9wcm9jZXNzSGl0VGVzdFZpc2liaWxpdHkudHMiLCJjb3JlL3Byb2Nlc3Nkb3duL3RhcGlucy9wcm9jZXNzTGF5b3V0Q2xpcC50cyIsImNvcmUvcHJvY2Vzc2Rvd24vdGFwaW5zL3Byb2Nlc3NMb2NhbFhmb3JtLnRzIiwiY29yZS9wcm9jZXNzZG93bi90YXBpbnMvcHJvY2Vzc1JlbmRlclZpc2liaWxpdHkudHMiLCJjb3JlL3Byb2Nlc3Nkb3duL3RhcGlucy9wcm9jZXNzWGZvcm0udHMiLCJjb3JlL3Byb2Nlc3Nkb3duL3RhcGlucy9wcm9wYWdhdGVEaXJ0eVRvQ2hpbGRyZW4udHMiLCJjb3JlL3Byb2Nlc3N1cC90YXBpbnMvY2FsY0FjdHVhbFNpemUudHMiLCJjb3JlL3Byb2Nlc3N1cC90YXBpbnMvY2FsY0V4dGVudHMudHMiLCJjb3JlL3Byb2Nlc3N1cC90YXBpbnMvY2FsY1BhaW50Qm91bmRzLnRzIiwiY29yZS9wcm9jZXNzdXAvdGFwaW5zL3Byb2Nlc3NCb3VuZHMudHMiLCJjb3JlL3Byb2Nlc3N1cC90YXBpbnMvcHJvY2Vzc0ludmFsaWRhdGUudHMiLCJjb3JlL3Byb2Nlc3N1cC90YXBpbnMvcHJvY2Vzc05ld0JvdW5kcy50cyIsImNvcmUvcmVuZGVyL3RhcGlucy9hcHBseUNsaXAudHMiLCJjb3JlL3JlbmRlci90YXBpbnMvZG9SZW5kZXIudHMiLCJjb3JlL3JlbmRlci90YXBpbnMvcG9zdFJlbmRlci50cyIsImNvcmUvcmVuZGVyL3RhcGlucy9wcmVwYXJlQ29udGV4dC50cyIsImNvcmUvcmVuZGVyL3RhcGlucy9wcmVSZW5kZXIudHMiLCJjb3JlL3JlbmRlci90YXBpbnMvcmVuZGVyQ2hpbGRyZW4udHMiLCJjb3JlL3JlbmRlci90YXBpbnMvcmVzdG9yZUNvbnRleHQudHMiLCJjb3JlL3JlbmRlci90YXBpbnMvdmFsaWRhdGUudHMiLCJjb3JlL3JlbmRlci90YXBpbnMvdmFsaWRhdGVSZWdpb24udHMiLCJjb3JlL3NpemluZy90YXBpbnMvY2FsY1VzZVJlbmRlci50cyIsImNvcmUvc2l6aW5nL3RhcGlucy9jb21wdXRlQWN0dWFsLnRzIiwic2hhcGVzL2VsbGlwc2UvaGVscGVycy9kcmF3LnRzIiwic2hhcGVzL3NoYXBlL2hpdHRlc3QvU2hhcGVIaXRUZXN0UGlwZURlZi50cyIsInNoYXBlcy9lbGxpcHNlL2hpdHRlc3QvRWxsaXBzZUhpdFRlc3RQaXBlRGVmLnRzIiwic2hhcGVzL3NoYXBlL21lYXN1cmUvU2hhcGVNZWFzdXJlUGlwZURlZi50cyIsInNoYXBlcy9lbGxpcHNlL21lYXN1cmUvRWxsaXBzZU1lYXN1cmVQaXBlRGVmLnRzIiwic2hhcGVzL3NoYXBlL3JlbmRlci9TaGFwZVJlbmRlclBpcGVEZWYudHMiLCJzaGFwZXMvZWxsaXBzZS9yZW5kZXIvRWxsaXBzZVJlbmRlclBpcGVEZWYudHMiLCJzaGFwZXMvcGF0aC9tZWFzdXJlL1BhdGhNZWFzdXJlUGlwZURlZi50cyIsInNoYXBlcy9saW5lL21lYXN1cmUvTGluZU1lYXN1cmVQaXBlRGVmLnRzIiwic2hhcGVzL3BhdGgvaGl0dGVzdC9QYXRoSGl0VGVzdFBpcGVEZWYudHMiLCJzaGFwZXMvc2hhcGUvcHJvY2Vzc3VwL1NoYXBlUHJvY2Vzc1VwUGlwZURlZi50cyIsInNoYXBlcy9wYXRoL3Byb2Nlc3N1cC9QYXRoUHJvY2Vzc1VwUGlwZURlZi50cyIsInNoYXBlcy9wYXRoL3JlbmRlci9QYXRoUmVuZGVyUGlwZURlZi50cyIsInNoYXBlcy9wb2x5bGluZS9tZWFzdXJlL1BvbHlsaW5lTWVhc3VyZVBpcGVEZWYudHMiLCJzaGFwZXMvcmVjdGFuZ2xlL2hlbHBlcnMvZHJhdy50cyIsInNoYXBlcy9yZWN0YW5nbGUvaGl0dGVzdC9SZWN0YW5nbGVIaXRUZXN0UGlwZURlZi50cyIsInNoYXBlcy9yZWN0YW5nbGUvbWVhc3VyZS9SZWN0YW5nbGVNZWFzdXJlUGlwZURlZi50cyIsInNoYXBlcy9yZWN0YW5nbGUvcmVuZGVyL1JlY3RhbmdsZVJlbmRlclBpcGVEZWYudHMiLCJzaGFwZXMvc2hhcGUvYXJyYW5nZS9TaGFwZUFycmFuZ2VQaXBlRGVmLnRzIiwiY29udHJvbHMvYm9yZGVyL3JlbmRlci9oZWxwZXJzL2RyYXdCb3JkZXJSZWN0LnRzIiwiY29udHJvbHMvYm9yZGVyL3JlbmRlci90YXBpbnMvY2FsY0lubmVyT3V0ZXIudHMiLCJjb250cm9scy9ib3JkZXIvcmVuZGVyL3RhcGlucy9jYWxjU2hvdWxkUmVuZGVyLnRzIiwiY29udHJvbHMvYm9yZGVyL3JlbmRlci90YXBpbnMvZG9SZW5kZXIudHMiLCJjb250cm9scy9jYW52YXMvYXJyYW5nZS90YXBpbnMvYnVpbGRMYXlvdXRDbGlwLnRzIiwiY29udHJvbHMvY2FudmFzL2FycmFuZ2UvdGFwaW5zL2RvT3ZlcnJpZGUudHMiLCJjb250cm9scy9jYW52YXMvbWVhc3VyZS90YXBpbnMvZG9PdmVycmlkZS50cyIsImNvbnRyb2xzL2NhbnZhcy9wcm9jZXNzdXAvdGFwaW5zL2NhbGNQYWludEJvdW5kcy50cyIsImNvbnRyb2xzL2dyaWQvYXJyYW5nZS90YXBpbnMvY2FsY0NvbnN1bWVkLnRzIiwiY29udHJvbHMvZ3JpZC9hcnJhbmdlL3RhcGlucy9kb092ZXJyaWRlLnRzIiwiY29udHJvbHMvZ3JpZC9hcnJhbmdlL3RhcGlucy9yZXN0b3JlTWVhc3VyZVJlc3VsdHMudHMiLCJjb250cm9scy9ncmlkL2FycmFuZ2UvdGFwaW5zL3NldEFjdHVhbHMudHMiLCJjb250cm9scy9ncmlkL21lYXN1cmUvdGFwaW5zL2J1aWxkU2hhcGUudHMiLCJjb250cm9scy9ncmlkL21lYXN1cmUvdGFwaW5zL2NyZWF0ZURvT3ZlcnJpZGVQYXNzLnRzIiwiY29udHJvbHMvZ3JpZC9tZWFzdXJlL3RhcGlucy9kb092ZXJyaWRlLnRzIiwiY29udHJvbHMvZ3JpZC9tZWFzdXJlL3RhcGlucy9lbnN1cmVDb2xNYXRyaXgudHMiLCJjb250cm9scy9ncmlkL21lYXN1cmUvdGFwaW5zL2Vuc3VyZVJvd01hdHJpeC50cyIsImNvbnRyb2xzL2dyaWQvbWVhc3VyZS90YXBpbnMvcHJlcGFyZUNvbE1hdHJpeC50cyIsImNvbnRyb2xzL2dyaWQvbWVhc3VyZS90YXBpbnMvcHJlcGFyZVJvd01hdHJpeC50cyIsImNvbnRyb2xzL2dyaWQvbWVhc3VyZS90YXBpbnMvc2F2ZU1lYXN1cmVSZXN1bHRzLnRzIiwiY29udHJvbHMvZ3JpZC9wcm9jZXNzdXAvdGFwaW5zL2NhbGNFeHRlbnRzLnRzIiwiY29udHJvbHMvZ3JpZC9wcm9jZXNzdXAvdGFwaW5zL3ByZUNhbGNFeHRlbnRzLnRzIiwiY29udHJvbHMvaW1hZ2UvYXJyYW5nZS90YXBpbnMvY2FsY0ltYWdlQm91bmRzLnRzIiwiY29udHJvbHMvaW1hZ2UvYXJyYW5nZS90YXBpbnMvY2FsY1N0cmV0Y2gudHMiLCJjb250cm9scy9pbWFnZS9hcnJhbmdlL3RhcGlucy9kb092ZXJyaWRlLnRzIiwiY29udHJvbHMvaW1hZ2UvYXJyYW5nZS90YXBpbnMvaW52YWxpZGF0ZU1ldHJpY3MudHMiLCJjb250cm9scy9pbWFnZS9oaXR0ZXN0L3RhcGlucy9jYW5IaXRJbnNpZGUudHMiLCJjb250cm9scy9pbWFnZS9oaXR0ZXN0L3RhcGlucy9pbnNpZGVDaGlsZHJlbi50cyIsImNvbnRyb2xzL2ltYWdlL2hpdHRlc3QvdGFwaW5zL2luc2lkZVN0cmV0Y2gudHMiLCJjb250cm9scy9pbWFnZS9tZWFzdXJlL3RhcGlucy9jYWxjSW1hZ2VCb3VuZHMudHMiLCJjb250cm9scy9pbWFnZS9tZWFzdXJlL3RhcGlucy9jYWxjU3RyZXRjaC50cyIsImNvbnRyb2xzL2ltYWdlL21lYXN1cmUvdGFwaW5zL2RvT3ZlcnJpZGUudHMiLCJjb250cm9scy9pbWFnZS9wcm9jZXNzZG93bi90YXBpbnMvY2FsY0ltYWdlVHJhbnNmb3JtLnRzIiwiY29udHJvbHMvaW1hZ2UvcHJvY2Vzc2Rvd24vdGFwaW5zL2NhbGNPdmVybGFwLnRzIiwiY29udHJvbHMvaW1hZ2UvcHJvY2Vzc2Rvd24vdGFwaW5zL2NoZWNrTmVlZEltYWdlTWV0cmljcy50cyIsImNvbnRyb2xzL2ltYWdlL3Byb2Nlc3Nkb3duL3RhcGlucy9wcmVwYXJlSW1hZ2VNZXRyaWNzLnRzIiwiY29udHJvbHMvaW1hZ2UvcmVuZGVyL3RhcGlucy9kb1JlbmRlci50cyIsImNvbnRyb2xzL3BhbmVsL2FycmFuZ2UvdGFwaW5zL2RvT3ZlcnJpZGUudHMiLCJjb250cm9scy9wYW5lbC9wcm9jZXNzdXAvdGFwaW5zL3ByZUNhbGNFeHRlbnRzLnRzIiwiY29udHJvbHMvcG9wdXAvcHJvY2Vzc2Rvd24vdGFwaW5zL3Bvc3RQcm9jZXNzWGZvcm0udHMiLCJjb250cm9scy9wb3B1cC9wcm9jZXNzZG93bi90YXBpbnMvcHJlUHJvY2Vzc1hmb3JtLnRzIiwiY29udHJvbHMvc2Nyb2xsY29udGVudHByZXNlbnRlci9hcnJhbmdlL3RhcGlucy9kb092ZXJyaWRlLnRzIiwiY29udHJvbHMvc2Nyb2xsY29udGVudHByZXNlbnRlci9hcnJhbmdlL3RhcGlucy91cGRhdGVDbGlwLnRzIiwiY29udHJvbHMvc2Nyb2xsY29udGVudHByZXNlbnRlci9hcnJhbmdlL3RhcGlucy91cGRhdGVFeHRlbnRzLnRzIiwiY29udHJvbHMvc2Nyb2xsY29udGVudHByZXNlbnRlci9tZWFzdXJlL3RhcGlucy9kb092ZXJyaWRlLnRzIiwiY29udHJvbHMvc2Nyb2xsY29udGVudHByZXNlbnRlci9tZWFzdXJlL3RhcGlucy9maW5pc2hEb092ZXJyaWRlLnRzIiwiY29udHJvbHMvc2Nyb2xsY29udGVudHByZXNlbnRlci9tZWFzdXJlL3RhcGlucy91cGRhdGVFeHRlbnRzLnRzIiwiY29udHJvbHMvc3RhY2twYW5lbC9hcnJhbmdlL3RhcGlucy9kb0hvcml6b250YWwudHMiLCJjb250cm9scy9zdGFja3BhbmVsL2FycmFuZ2UvdGFwaW5zL2RvT3ZlcnJpZGUudHMiLCJjb250cm9scy9zdGFja3BhbmVsL2FycmFuZ2UvdGFwaW5zL2RvVmVydGljYWwudHMiLCJjb250cm9scy9zdGFja3BhbmVsL21lYXN1cmUvdGFwaW5zL2RvSG9yaXpvbnRhbC50cyIsImNvbnRyb2xzL3N0YWNrcGFuZWwvbWVhc3VyZS90YXBpbnMvZG9PdmVycmlkZS50cyIsImNvbnRyb2xzL3N0YWNrcGFuZWwvbWVhc3VyZS90YXBpbnMvZG9WZXJ0aWNhbC50cyIsImNvbnRyb2xzL3VzZXJjb250cm9sL2FycmFuZ2UvdGFwaW5zL2RvT3ZlcnJpZGUudHMiLCJjb250cm9scy91c2VyY29udHJvbC9hcnJhbmdlL3RhcGlucy9wcmVPdmVycmlkZS50cyIsImNvbnRyb2xzL3VzZXJjb250cm9sL21lYXN1cmUvdGFwaW5zL2RvT3ZlcnJpZGUudHMiLCJjb250cm9scy91c2VyY29udHJvbC9tZWFzdXJlL3RhcGlucy9wb3N0T3ZlcnJpZGUudHMiLCJjb250cm9scy91c2VyY29udHJvbC9tZWFzdXJlL3RhcGlucy9wcmVPdmVycmlkZS50cyIsImNvbnRyb2xzL3ZpcnR1YWxpemluZ3N0YWNrcGFuZWwvYXJyYW5nZS90YXBpbnMvZG9Ib3Jpem9udGFsLnRzIiwiY29udHJvbHMvdmlydHVhbGl6aW5nc3RhY2twYW5lbC9hcnJhbmdlL3RhcGlucy9kb092ZXJyaWRlLnRzIiwiY29udHJvbHMvdmlydHVhbGl6aW5nc3RhY2twYW5lbC9hcnJhbmdlL3RhcGlucy9kb1ZlcnRpY2FsLnRzIiwiY29udHJvbHMvdmlydHVhbGl6aW5nc3RhY2twYW5lbC9tZWFzdXJlL3RhcGlucy9kb0hvcml6b250YWwudHMiLCJjb250cm9scy92aXJ0dWFsaXppbmdzdGFja3BhbmVsL21lYXN1cmUvdGFwaW5zL2RvT3ZlcnJpZGUudHMiLCJjb250cm9scy92aXJ0dWFsaXppbmdzdGFja3BhbmVsL21lYXN1cmUvdGFwaW5zL2RvVmVydGljYWwudHMiLCJzaGFwZXMvcGF0aC9wcm9jZXNzdXAvdGFwaW5zL2NhbGNBY3R1YWxTaXplLnRzIiwic2hhcGVzL3BhdGgvcHJvY2Vzc3VwL3RhcGlucy9jYWxjRXh0ZW50cy50cyIsInNoYXBlcy9wYXRoL3Byb2Nlc3N1cC90YXBpbnMvY2FsY1NoYXBlUmVjdC50cyIsInNoYXBlcy9wYXRoL3Byb2Nlc3N1cC90YXBpbnMvY2FsY1N0cmV0Y2gudHMiLCJzaGFwZXMvcGF0aC9yZW5kZXIvdGFwaW5zL2RvUmVuZGVyLnRzIiwic2hhcGVzL3BhdGgvcmVuZGVyL3RhcGlucy9maWxsLnRzIiwic2hhcGVzL3NoYXBlL2FycmFuZ2UvdGFwaW5zL2RvT3ZlcnJpZGUudHMiLCJzaGFwZXMvc2hhcGUvaGl0dGVzdC90YXBpbnMvY2FuSGl0SW5zaWRlLnRzIiwic2hhcGVzL3NoYXBlL2hpdHRlc3QvdGFwaW5zL2NhbkhpdFNoYXBlLnRzIiwic2hhcGVzL3NoYXBlL2hpdHRlc3QvdGFwaW5zL2RyYXdTaGFwZS50cyIsInNoYXBlcy9zaGFwZS9oaXR0ZXN0L3RhcGlucy9maW5pc2hTaGFwZS50cyIsInNoYXBlcy9zaGFwZS9oaXR0ZXN0L3RhcGlucy9pbnNpZGVDaGlsZHJlbi50cyIsInNoYXBlcy9zaGFwZS9oaXR0ZXN0L3RhcGlucy9wcmVwYXJlU2hhcGUudHMiLCJzaGFwZXMvc2hhcGUvbWVhc3VyZS90YXBpbnMvY2FsY05hdHVyYWxCb3VuZHMudHMiLCJzaGFwZXMvc2hhcGUvbWVhc3VyZS90YXBpbnMvZG9PdmVycmlkZS50cyIsInNoYXBlcy9zaGFwZS9wcm9jZXNzdXAvdGFwaW5zL2NhbGNFeHRlbnRzLnRzIiwic2hhcGVzL3NoYXBlL3Byb2Nlc3N1cC90YXBpbnMvY2FsY1NoYXBlUmVjdC50cyIsInNoYXBlcy9zaGFwZS9yZW5kZXIvdGFwaW5zL2NhbGNTaG91bGREcmF3LnRzIiwic2hhcGVzL3NoYXBlL3JlbmRlci90YXBpbnMvZG9SZW5kZXIudHMiLCJzaGFwZXMvc2hhcGUvcmVuZGVyL3RhcGlucy9maWxsLnRzIiwic2hhcGVzL3NoYXBlL3JlbmRlci90YXBpbnMvZmluaXNoRHJhdy50cyIsInNoYXBlcy9zaGFwZS9yZW5kZXIvdGFwaW5zL3ByZXBhcmVEcmF3LnRzIiwic2hhcGVzL3NoYXBlL3JlbmRlci90YXBpbnMvc3Ryb2tlLnRzIiwiY29udHJvbHMvYm9yZGVyL3JlbmRlci90YXBpbnMvc2hpbXMvY2FsY0JhbGFuY2VkLnRzIiwiY29udHJvbHMvYm9yZGVyL3JlbmRlci90YXBpbnMvc2hpbXMvY3JlYXRlUGF0dGVybi50cyIsImNvbnRyb2xzL2JvcmRlci9yZW5kZXIvdGFwaW5zL3NoaW1zL2RvUmVuZGVyLnRzIiwiY29udHJvbHMvYm9yZGVyL3JlbmRlci90YXBpbnMvc2hpbXMvaW52YWxpZGF0ZVBhdHRlcm4udHMiXSwibmFtZXMiOlsicmFkVG9EZWdyZWVzIiwicmFkIiwibWluZXJ2YSIsIm1pbmVydmEuSG9yaXpvbnRhbEFsaWdubWVudCIsIm1pbmVydmEuVmVydGljYWxBbGlnbm1lbnQiLCJtaW5lcnZhLkNvcm5lclJhZGl1cyIsIm1pbmVydmEuQ29ybmVyUmFkaXVzLmNvbnN0cnVjdG9yIiwibWluZXJ2YS5Db3JuZXJSYWRpdXMuaXNFbXB0eSIsIm1pbmVydmEuQ29ybmVyUmFkaXVzLmlzRXF1YWwiLCJtaW5lcnZhLkNvcm5lclJhZGl1cy5jbGVhciIsIm1pbmVydmEuQ29ybmVyUmFkaXVzLmNvcHlUbyIsIm1pbmVydmEuT3JpZW50YXRpb24iLCJtaW5lcnZhLlBlbkxpbmVKb2luIiwibWluZXJ2YS5QZW5MaW5lQ2FwIiwibWluZXJ2YS5GaWxsUnVsZSIsIm1pbmVydmEuU3RyZXRjaCIsIm1pbmVydmEuRmxvd0RpcmVjdGlvbiIsIm1pbmVydmEuTGluZVN0YWNraW5nU3RyYXRlZ3kiLCJtaW5lcnZhLlRleHRBbGlnbm1lbnQiLCJtaW5lcnZhLlRleHRUcmltbWluZyIsIm1pbmVydmEuVGV4dFdyYXBwaW5nIiwibWluZXJ2YS5UZXh0RGVjb3JhdGlvbnMiLCJtaW5lcnZhLkZvbnRXZWlnaHQiLCJtaW5lcnZhLlN3ZWVwRGlyZWN0aW9uIiwibWluZXJ2YS5maW5kRWxlbWVudHNJbkhvc3RTcGFjZSIsIm1pbmVydmEuRGlydHlGbGFncyIsIm1pbmVydmEuVUlGbGFncyIsIm1pbmVydmEuU2hhcGVGbGFncyIsIm1pbmVydmEudHJhbnNsYXRlRm9udCIsIm1pbmVydmEuRm9udCIsIm1pbmVydmEuRm9udC5jb25zdHJ1Y3RvciIsIm1pbmVydmEuRm9udC5tZXJnZUludG8iLCJtaW5lcnZhLkZvbnQudG9IdG1sNU9iamVjdCIsIm1pbmVydmEuRm9udC5nZXRIZWlnaHQiLCJtaW5lcnZhLkZvbnQuZ2V0QXNjZW5kZXIiLCJtaW5lcnZhLkZvbnQuZ2V0RGVzY2VuZGVyIiwibWluZXJ2YS5mb250SGVpZ2h0IiwibWluZXJ2YS5mb250SGVpZ2h0LmdldCIsIm1pbmVydmEuZm9udEhlaWdodC5tZWFzdXJlIiwibWluZXJ2YS5GYWtlQnJ1c2giLCJtaW5lcnZhLkZha2VCcnVzaC5jb25zdHJ1Y3RvciIsIm1pbmVydmEuRmFrZUJydXNoLmlzVHJhbnNwYXJlbnQiLCJtaW5lcnZhLkZha2VCcnVzaC50b0h0bWw1T2JqZWN0IiwibWluZXJ2YS5XYWxrRGlyZWN0aW9uIiwibWluZXJ2YS5sYXlvdXRFcnJvciIsIm1pbmVydmEuY2xlYXJFcnJvcnMiLCJtaW5lcnZhLmdldE5hdHVyYWxDYW52YXNTaXplIiwibWluZXJ2YS5Qb2ludCIsIm1pbmVydmEuUG9pbnQuY29uc3RydWN0b3IiLCJtaW5lcnZhLlBvaW50LmlzRXF1YWwiLCJtaW5lcnZhLlBvaW50LmNvcHlUbyIsIkZsb2F0MzJBcnJheSIsImxlbmd0aCIsIkFycmF5IiwibWluZXJ2YS5jcmVhdGUiLCJtaW5lcnZhLmluaXQiLCJ2ZWMyIiwibWluZXJ2YS5SZWN0T3ZlcmxhcCIsIm1pbmVydmEuUmVjdCIsIm1pbmVydmEuUmVjdC5jb25zdHJ1Y3RvciIsIm1pbmVydmEuUmVjdC5jbGVhciIsIm1pbmVydmEuUmVjdC5nZXRCb3R0b20iLCJtaW5lcnZhLlJlY3QuZ2V0UmlnaHQiLCJtaW5lcnZhLlJlY3QuaXNFcXVhbCIsIm1pbmVydmEuUmVjdC5pc0VtcHR5IiwibWluZXJ2YS5SZWN0LmNvcHlUbyIsIm1pbmVydmEuUmVjdC5yb3VuZE91dCIsIm1pbmVydmEuUmVjdC5yb3VuZEluIiwibWluZXJ2YS5SZWN0LmludGVyc2VjdGlvbiIsIm1pbmVydmEuUmVjdC51bmlvbiIsIm1pbmVydmEuUmVjdC5pc0NvbnRhaW5lZEluIiwibWluZXJ2YS5SZWN0LmNvbnRhaW5zUG9pbnQiLCJtaW5lcnZhLlJlY3QuZXh0ZW5kVG8iLCJtaW5lcnZhLlJlY3QuZ3JvdyIsIm1pbmVydmEuUmVjdC5zaHJpbmsiLCJtaW5lcnZhLlJlY3QucmVjdEluIiwibWluZXJ2YS5SZWN0LnRyYW5zZm9ybSIsIm1pbmVydmEuc2luZ2xldG9uIiwibWluZXJ2YS5TaXplIiwibWluZXJ2YS5TaXplLmNvbnN0cnVjdG9yIiwibWluZXJ2YS5TaXplLmNvcHlUbyIsIm1pbmVydmEuU2l6ZS5pc0VxdWFsIiwibWluZXJ2YS5TaXplLmlzRW1wdHkiLCJtaW5lcnZhLlNpemUubWluIiwibWluZXJ2YS5TaXplLmlzVW5kZWYiLCJtaW5lcnZhLlNpemUudW5kZWYiLCJtaW5lcnZhLlRoaWNrbmVzcyIsIm1pbmVydmEuVGhpY2tuZXNzLmNvbnN0cnVjdG9yIiwibWluZXJ2YS5UaGlja25lc3MuYWRkIiwibWluZXJ2YS5UaGlja25lc3MuY29weVRvIiwibWluZXJ2YS5UaGlja25lc3MuaXNFbXB0eSIsIm1pbmVydmEuVGhpY2tuZXNzLmlzQmFsYW5jZWQiLCJtaW5lcnZhLlRoaWNrbmVzcy5zaHJpbmtTaXplIiwibWluZXJ2YS5UaGlja25lc3Muc2hyaW5rUmVjdCIsIm1pbmVydmEuVGhpY2tuZXNzLnNocmlua0Nvcm5lclJhZGl1cyIsIm1pbmVydmEuVGhpY2tuZXNzLmdyb3dTaXplIiwibWluZXJ2YS5UaGlja25lc3MuZ3Jvd1JlY3QiLCJtaW5lcnZhLlRoaWNrbmVzcy5ncm93Q29ybmVyUmFkaXVzIiwibWluZXJ2YS5WZWN0b3IiLCJtaW5lcnZhLlZlY3Rvci5jcmVhdGUiLCJtaW5lcnZhLlZlY3Rvci5yZXZlcnNlIiwibWluZXJ2YS5WZWN0b3Iub3J0aG9nb25hbCIsIm1pbmVydmEuVmVjdG9yLm5vcm1hbGl6ZSIsIm1pbmVydmEuVmVjdG9yLnJvdGF0ZSIsIm1pbmVydmEuVmVjdG9yLmFuZ2xlQmV0d2VlbiIsIm1pbmVydmEuVmVjdG9yLmlzQ2xvY2t3aXNlVG8iLCJtaW5lcnZhLlZlY3Rvci5pbnRlcnNlY3Rpb24iLCJtaW5lcnZhLlZpc2liaWxpdHkiLCJtaW5lcnZhLnpvb20iLCJtaW5lcnZhLnpvb20uaWUiLCJtaW5lcnZhLnpvb20uY2hyb21lIiwibWluZXJ2YS56b29tLmNocm9tZS5tZW1vaXplU3ZnIiwibWluZXJ2YS5jb3JlIiwibWluZXJ2YS5jb3JlLlVwZGF0ZXIiLCJtaW5lcnZhLmNvcmUuVXBkYXRlci5jb25zdHJ1Y3RvciIsIm1pbmVydmEuY29yZS5VcGRhdGVyLmluaXQiLCJtaW5lcnZhLmNvcmUuVXBkYXRlci5zZXRUcmVlIiwibWluZXJ2YS5jb3JlLlVwZGF0ZXIuZ2V0QXR0YWNoZWRWYWx1ZSIsIm1pbmVydmEuY29yZS5VcGRhdGVyLnNldEF0dGFjaGVkVmFsdWUiLCJtaW5lcnZhLmNvcmUuVXBkYXRlci5vbkRldGFjaGVkIiwibWluZXJ2YS5jb3JlLlVwZGF0ZXIub25BdHRhY2hlZCIsIm1pbmVydmEuY29yZS5VcGRhdGVyLnNldFZpc3VhbFBhcmVudCIsIm1pbmVydmEuY29yZS5VcGRhdGVyLnNldFN1cmZhY2UiLCJtaW5lcnZhLmNvcmUuVXBkYXRlci53YWxrRGVlcCIsImxhc3QiLCJzdWJ3YWxrZXIiLCJ0cmVlIiwid2FsayIsInJldmRpciIsInN0ZXAiLCJ3YWxrTGlzdCIsInVuc2hpZnQiLCJjdXJyZW50IiwidGhpcyIsInNoaWZ0IiwidW5kZWZpbmVkIiwibWluZXJ2YS5jb3JlLlVwZGF0ZXIuc2V0TWVhc3VyZVBpcGUiLCJtaW5lcnZhLmNvcmUuVXBkYXRlci5zZXRNZWFzdXJlQmluZGVyIiwibWluZXJ2YS5jb3JlLlVwZGF0ZXIuc2V0QXJyYW5nZVBpcGUiLCJtaW5lcnZhLmNvcmUuVXBkYXRlci5zZXRBcnJhbmdlQmluZGVyIiwibWluZXJ2YS5jb3JlLlVwZGF0ZXIuc2V0U2l6aW5nUGlwZSIsIm1pbmVydmEuY29yZS5VcGRhdGVyLnNldFByb2Nlc3NEb3duUGlwZSIsIm1pbmVydmEuY29yZS5VcGRhdGVyLnNldFByb2Nlc3NVcFBpcGUiLCJtaW5lcnZhLmNvcmUuVXBkYXRlci5zZXRSZW5kZXJQaXBlIiwibWluZXJ2YS5jb3JlLlVwZGF0ZXIuc2V0SGl0VGVzdFBpcGUiLCJtaW5lcnZhLmNvcmUuVXBkYXRlci5kb01lYXN1cmUiLCJtaW5lcnZhLmNvcmUuVXBkYXRlci5tZWFzdXJlIiwibWluZXJ2YS5jb3JlLlVwZGF0ZXIuZG9BcnJhbmdlIiwibWluZXJ2YS5jb3JlLlVwZGF0ZXIuYXJyYW5nZSIsIm1pbmVydmEuY29yZS5VcGRhdGVyLnNpemluZyIsIm1pbmVydmEuY29yZS5VcGRhdGVyLnByb2Nlc3NEb3duIiwibWluZXJ2YS5jb3JlLlVwZGF0ZXIucHJvY2Vzc1VwIiwibWluZXJ2YS5jb3JlLlVwZGF0ZXIucmVuZGVyIiwibWluZXJ2YS5jb3JlLlVwZGF0ZXIuaGl0VGVzdCIsIm1pbmVydmEuY29yZS5VcGRhdGVyLm9uU2l6ZUNoYW5nZWQiLCJtaW5lcnZhLmNvcmUuVXBkYXRlci5zZXRTaXplVXBkYXRlciIsIm1pbmVydmEuY29yZS5VcGRhdGVyLmludmFsaWRhdGVNZWFzdXJlIiwibWluZXJ2YS5jb3JlLlVwZGF0ZXIuaW52YWxpZGF0ZUFycmFuZ2UiLCJtaW5lcnZhLmNvcmUuVXBkYXRlci51cGRhdGVCb3VuZHMiLCJtaW5lcnZhLmNvcmUuVXBkYXRlci5mdWxsSW52YWxpZGF0ZSIsIm1pbmVydmEuY29yZS5VcGRhdGVyLmludmFsaWRhdGUiLCJtaW5lcnZhLmNvcmUuVXBkYXRlci5maW5kQ2hpbGRJbkxpc3QiLCJtaW5lcnZhLmNvcmUuVXBkYXRlci4kJGFkZFVwRGlydHkiLCJtaW5lcnZhLmNvcmUuVXBkYXRlci4kJGFkZERvd25EaXJ0eSIsIm1pbmVydmEuY29yZS5VcGRhdGVyLiQkcHJvcGFnYXRlVWlGbGFnc1VwIiwibWluZXJ2YS5jb3JlLlVwZGF0ZXIudHJhbnNmb3JtVG9WaXN1YWwiLCJtaW5lcnZhLmNvcmUuVXBkYXRlci50cmFuc2Zvcm1Qb2ludCIsIl9fZXh0ZW5kcyIsImQiLCJiIiwiX18iLCJjb25zdHJ1Y3RvciIsInAiLCJoYXNPd25Qcm9wZXJ0eSIsInByb3RvdHlwZSIsIk9iamVjdCIsImNyZWF0ZSIsIm1pbmVydmEuYW5vbiIsIm1pbmVydmEuYW5vbi5Bbm9ueW1vdXNVcGRhdGVyIiwibWluZXJ2YS5hbm9uLkFub255bW91c1VwZGF0ZXIuY29uc3RydWN0b3IiLCJtaW5lcnZhLmFub24uQW5vbnltb3VzVXBkYXRlci5pbml0IiwibWluZXJ2YS5hbm9uLkFub255bW91c1VwZGF0ZXIubWVhc3VyZU92ZXJyaWRlIiwibWluZXJ2YS5hbm9uLkFub255bW91c1VwZGF0ZXIuYXJyYW5nZU92ZXJyaWRlIiwibWluZXJ2YS5jb3JlLmhlbHBlcnMiLCJtaW5lcnZhLmNvcmUuaGVscGVycy5jb2VyY2VTaXplIiwibWluZXJ2YS5jb3JlLmhlbHBlcnMuaW50ZXJzZWN0Qm91bmRzV2l0aENsaXBQYXRoIiwibWluZXJ2YS5jb3JlLmhlbHBlcnMucmVuZGVyTGF5b3V0Q2xpcCIsIm1pbmVydmEuY29yZS5yZWFjdFRvIiwibWluZXJ2YS5jb3JlLnJlYWN0VG8uaXNIaXRUZXN0VmlzaWJsZSIsIm1pbmVydmEuY29yZS5yZWFjdFRvLnVzZUxheW91dFJvdW5kaW5nIiwibWluZXJ2YS5jb3JlLnJlYWN0VG8ub3BhY2l0eSIsIm1pbmVydmEuY29yZS5yZWFjdFRvLnZpc2liaWxpdHkiLCJtaW5lcnZhLmNvcmUucmVhY3RUby5lZmZlY3QiLCJtaW5lcnZhLmNvcmUucmVhY3RUby5jbGlwIiwibWluZXJ2YS5jb3JlLnJlYWN0VG8ucmVuZGVyVHJhbnNmb3JtIiwibWluZXJ2YS5jb3JlLnJlYWN0VG8ucmVuZGVyVHJhbnNmb3JtT3JpZ2luIiwibWluZXJ2YS5jb3JlLnJlYWN0VG8uaGVscGVycyIsIm1pbmVydmEuY29yZS5yZWFjdFRvLmhlbHBlcnMuaW52YWxpZGF0ZVBhcmVudCIsIm1pbmVydmEuY29yZS5yZWFjdFRvLmhlbHBlcnMuc2l6ZUNoYW5nZWQiLCJtaW5lcnZhLmNvcmUucmVhY3RUby5oZWxwZXJzLmFsaWdubWVudENoYW5nZWQiLCJtaW5lcnZhLmNvcmUuVXBkYXRlclRyZWUiLCJtaW5lcnZhLmNvcmUuVXBkYXRlclRyZWUuY29uc3RydWN0b3IiLCJnZXQiLCJtaW5lcnZhLmNvcmUuVXBkYXRlclRyZWUudmlzdWFsT3duZXIiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwibWluZXJ2YS5jb3JlLlVwZGF0ZXJUcmVlLndhbGsiLCJ2aXNpdGVkIiwiX3RoaXMiLCJzdWJ0cmVlIiwibWluZXJ2YS5jb3JlLlVwZGF0ZXJUcmVlLm9uQ2hpbGRBdHRhY2hlZCIsIm1pbmVydmEuY29yZS5VcGRhdGVyVHJlZS5vbkNoaWxkRGV0YWNoZWQiLCJtaW5lcnZhLmNvcmUuVXBkYXRlclRyZWUuc2V0VGVtcGxhdGVBcHBsaWVyIiwibWluZXJ2YS5jb3JlLlVwZGF0ZXJUcmVlLmFwcGx5VGVtcGxhdGUiLCJtaW5lcnZhLmVuZ2luZSIsIm1pbmVydmEuZW5naW5lLmRyYWZ0IiwibWluZXJ2YS5lbmdpbmUucHJvY2VzcyIsIm1pbmVydmEuZW5naW5lLnByb2Nlc3NEb3duIiwibWluZXJ2YS5lbmdpbmUucHJvY2Vzc1VwIiwibWluZXJ2YS5lbmdpbmUuU3VyZmFjZSIsIm1pbmVydmEuZW5naW5lLlN1cmZhY2UuY29uc3RydWN0b3IiLCJtaW5lcnZhLmVuZ2luZS5TdXJmYWNlLndpZHRoIiwibWluZXJ2YS5lbmdpbmUuU3VyZmFjZS5oZWlnaHQiLCJtaW5lcnZhLmVuZ2luZS5TdXJmYWNlLmluaXQiLCJtaW5lcnZhLmVuZ2luZS5TdXJmYWNlLmF0dGFjaExheWVyIiwibWluZXJ2YS5lbmdpbmUuU3VyZmFjZS5kZXRhY2hMYXllciIsIm1pbmVydmEuZW5naW5lLlN1cmZhY2Uud2Fsa0xheWVycyIsImkiLCJsYXllcnMiLCJtaW5lcnZhLmVuZ2luZS5TdXJmYWNlLmludmFsaWRhdGUiLCJtaW5lcnZhLmVuZ2luZS5TdXJmYWNlLnJlbmRlciIsIm1pbmVydmEuZW5naW5lLlN1cmZhY2UuaG9va1ByZXJlbmRlciIsIm1pbmVydmEuZW5naW5lLlN1cmZhY2UudW5ob29rUHJlcmVuZGVyIiwibWluZXJ2YS5lbmdpbmUuU3VyZmFjZS5hZGRVcERpcnR5IiwibWluZXJ2YS5lbmdpbmUuU3VyZmFjZS5hZGREb3duRGlydHkiLCJtaW5lcnZhLmVuZ2luZS5TdXJmYWNlLnVwZGF0ZUxheW91dCIsIm1pbmVydmEuZW5naW5lLlN1cmZhY2UucmVzaXplIiwibWluZXJ2YS5lbmdpbmUuU3VyZmFjZS5oaXRUZXN0IiwibWluZXJ2YS5lbmdpbmUuU3VyZmFjZS51cGRhdGVEcGlSYXRpbyIsIm1pbmVydmEuZW5naW5lLlN1cmZhY2UubWVhc3VyZVdpZHRoIiwibWluZXJ2YS5zaW1wbGVfaW52ZXJzZSIsIm1pbmVydmEuY29tcGxleF9pbnZlcnNlIiwibWluZXJ2YS5jb3B5VG8iLCJtaW5lcnZhLmlkZW50aXR5IiwibWluZXJ2YS5lcXVhbCIsIm1pbmVydmEubXVsdGlwbHkiLCJtaW5lcnZhLmludmVyc2UiLCJtaW5lcnZhLnRyYW5zZm9ybVZlYzIiLCJtaW5lcnZhLmNyZWF0ZVRyYW5zbGF0ZSIsIm1pbmVydmEudHJhbnNsYXRlIiwibWluZXJ2YS5jcmVhdGVTY2FsZSIsIm1pbmVydmEuc2NhbGUiLCJtaW5lcnZhLmNyZWF0ZVJvdGF0ZSIsIm1pbmVydmEuY3JlYXRlU2tldyIsIm1pbmVydmEucHJlYXBwbHkiLCJtaW5lcnZhLmFwcGx5IiwibWF0MyIsIm1pbmVydmEuSW5kZXhlcyIsIm1pbmVydmEudHJhbnNwb3NlIiwibWluZXJ2YS50cmFuc2Zvcm1WZWM0IiwibWluZXJ2YS5jcmVhdGVSb3RhdGVYIiwibWluZXJ2YS5jcmVhdGVSb3RhdGVZIiwibWluZXJ2YS5jcmVhdGVSb3RhdGVaIiwibWluZXJ2YS5jcmVhdGVQZXJzcGVjdGl2ZSIsIm1pbmVydmEuY3JlYXRlVmlld3BvcnQiLCJtYXQ0IiwiY29uc29sZSIsIndhcm4iLCJ2ZWM0IiwibWluZXJ2YS5wYXRoIiwibWluZXJ2YS5wYXRoLmV4cGFuZFN0YXJ0Q2FwIiwibWluZXJ2YS5wYXRoLmV4cGFuZEVuZENhcCIsIm1pbmVydmEucGF0aC5leHBhbmRMaW5lSm9pbiIsIm1pbmVydmEucGF0aC5wcm9jZXNzU3Ryb2tlZEJvdW5kcyIsIm1pbmVydmEucGF0aC5wcm9jZXNzU3Ryb2tlZEJvdW5kcy5wcm9jZXNzRW50cnkiLCJtaW5lcnZhLnBhdGguZmluZE1pdGVyVGlwcyIsIm1pbmVydmEucGF0aC5maW5kQmV2ZWxUaXBzIiwibWluZXJ2YS5wYXRoLlBhdGgiLCJtaW5lcnZhLnBhdGguUGF0aC5jb25zdHJ1Y3RvciIsIm1pbmVydmEucGF0aC5QYXRoLmVuZFgiLCJtaW5lcnZhLnBhdGguUGF0aC5lbmRZIiwibWluZXJ2YS5wYXRoLlBhdGgucmVzZXQiLCJtaW5lcnZhLnBhdGguUGF0aC5tb3ZlIiwibWluZXJ2YS5wYXRoLlBhdGgubGluZSIsIm1pbmVydmEucGF0aC5QYXRoLnF1YWRyYXRpY0JlemllciIsIm1pbmVydmEucGF0aC5QYXRoLmN1YmljQmV6aWVyIiwibWluZXJ2YS5wYXRoLlBhdGguZWxsaXBzZSIsIm1pbmVydmEucGF0aC5QYXRoLmVsbGlwdGljYWxBcmMiLCJtaW5lcnZhLnBhdGguUGF0aC5hcmMiLCJtaW5lcnZhLnBhdGguUGF0aC5hcmNUbyIsIm1pbmVydmEucGF0aC5QYXRoLnJlY3QiLCJtaW5lcnZhLnBhdGguUGF0aC5yb3VuZGVkUmVjdCIsIm1pbmVydmEucGF0aC5QYXRoLmNsb3NlIiwibWluZXJ2YS5wYXRoLlBhdGguZHJhdyIsIm1pbmVydmEucGF0aC5QYXRoLmNhbGNCb3VuZHMiLCJtaW5lcnZhLnBhdGguUGF0aC4kJGNhbGNGaWxsQm94IiwibWluZXJ2YS5wYXRoLlBhdGguJCRjYWxjU3Ryb2tlQm94IiwibWluZXJ2YS5wYXRoLlBhdGguTWVyZ2UiLCJtaW5lcnZhLnBhdGguUGF0aC5TZXJpYWxpemUiLCJtaW5lcnZhLnBpcGUiLCJtaW5lcnZhLnBpcGUuY3JlYXRlVHJpUGlwZSIsIm1pbmVydmEucGlwZS5JVHJpUGlwZSIsIm1pbmVydmEucGlwZS5QaXBlRGVmIiwibWluZXJ2YS5waXBlLlBpcGVEZWYuY29uc3RydWN0b3IiLCJtaW5lcnZhLnBpcGUuUGlwZURlZi5hZGRUYXBpbiIsIm1pbmVydmEucGlwZS5QaXBlRGVmLmFkZFRhcGluQmVmb3JlIiwibWluZXJ2YS5waXBlLlBpcGVEZWYuYWRkVGFwaW5BZnRlciIsIm1pbmVydmEucGlwZS5QaXBlRGVmLnJlcGxhY2VUYXBpbiIsIm1pbmVydmEucGlwZS5QaXBlRGVmLnJlbW92ZVRhcGluIiwibWluZXJ2YS5waXBlLlBpcGVEZWYucnVuIiwibWluZXJ2YS5waXBlLlBpcGVEZWYucHJlcGFyZSIsIm1pbmVydmEucGlwZS5QaXBlRGVmLmZsdXNoIiwibWluZXJ2YS5waXBlLlRyaVBpcGVEZWYiLCJtaW5lcnZhLnBpcGUuVHJpUGlwZURlZi5jb25zdHJ1Y3RvciIsIm1pbmVydmEucGlwZS5UcmlQaXBlRGVmLmFkZFRhcGluIiwibWluZXJ2YS5waXBlLlRyaVBpcGVEZWYuYWRkVGFwaW5CZWZvcmUiLCJtaW5lcnZhLnBpcGUuVHJpUGlwZURlZi5hZGRUYXBpbkFmdGVyIiwibWluZXJ2YS5waXBlLlRyaVBpcGVEZWYucmVwbGFjZVRhcGluIiwibWluZXJ2YS5waXBlLlRyaVBpcGVEZWYucmVtb3ZlVGFwaW4iLCJtaW5lcnZhLnBpcGUuVHJpUGlwZURlZi5ydW4iLCJtaW5lcnZhLnBpcGUuVHJpUGlwZURlZi5jcmVhdGVTdGF0ZSIsIm1pbmVydmEucGlwZS5UcmlQaXBlRGVmLmNyZWF0ZU91dHB1dCIsIm1pbmVydmEucGlwZS5UcmlQaXBlRGVmLnByZXBhcmUiLCJtaW5lcnZhLnBpcGUuVHJpUGlwZURlZi5mbHVzaCIsImNvbnRleHQiLCJwZXJmZXgiLCJ0aW1lciIsImFsbCIsInJlc2V0Iiwic3RhcnQiLCJ0YWciLCJzdG9wIiwicGhhc2VzIiwid2luZG93IiwibWluZXJ2YS50ZXh0IiwibWluZXJ2YS50ZXh0LmdldFdpZHRoQ29uc3RyYWludCIsIm1pbmVydmEudGV4dC5Eb2N1bWVudExheW91dERlZiIsIm1pbmVydmEudGV4dC5Eb2N1bWVudExheW91dERlZi5jcmVhdGVBc3NldHMiLCJtaW5lcnZhLnRleHQuRG9jdW1lbnRMYXlvdXREZWYuc2V0TWF4V2lkdGgiLCJtaW5lcnZhLnRleHQuRG9jdW1lbnRMYXlvdXREZWYubGF5b3V0IiwibWluZXJ2YS50ZXh0LkRvY3VtZW50TGF5b3V0RGVmLnJlbmRlciIsIm1pbmVydmEudGV4dC5Eb2N1bWVudExheW91dERlZi5nZXRDdXJzb3JGcm9tUG9pbnQiLCJtaW5lcnZhLnRleHQuRG9jdW1lbnRMYXlvdXREZWYuZ2V0Q2FyZXRGcm9tQ3Vyc29yIiwibWluZXJ2YS50ZXh0LkRvY3VtZW50TGF5b3V0RGVmLnNwbGl0U2VsZWN0aW9uIiwibWluZXJ2YS50ZXh0LkRvY3VtZW50TGF5b3V0RGVmLmdldEhvcml6b250YWxBbGlnbm1lbnRYIiwibWluZXJ2YS50ZXh0LkRvY3VtZW50TGF5b3V0RGVmLm1lYXN1cmVUZXh0V2lkdGgiLCJtaW5lcnZhLnRleHQuY3JlYXRlRG9jdW1lbnRMYXlvdXQiLCJtaW5lcnZhLnRleHQuVGV4dFVwZGF0ZXIiLCJtaW5lcnZhLnRleHQuVGV4dFVwZGF0ZXIuY29uc3RydWN0b3IiLCJtaW5lcnZhLnRleHQuVGV4dFVwZGF0ZXIuaW5pdCIsIm1pbmVydmEudGV4dC5UZXh0VXBkYXRlci5zZXRUZXh0TGF5b3V0IiwibWluZXJ2YS50ZXh0LlRleHRVcGRhdGVyLmxheW91dCIsIm1pbmVydmEudGV4dC5UZXh0VXBkYXRlci5pbnZhbGlkYXRlRm9udCIsIm1pbmVydmEuY29yZS5hcnJhbmdlIiwibWluZXJ2YS5jb3JlLmFycmFuZ2UuQXJyYW5nZVBpcGVEZWYiLCJtaW5lcnZhLmNvcmUuYXJyYW5nZS5BcnJhbmdlUGlwZURlZi5jb25zdHJ1Y3RvciIsIm1pbmVydmEuY29yZS5hcnJhbmdlLkFycmFuZ2VQaXBlRGVmLmNyZWF0ZVN0YXRlIiwibWluZXJ2YS5jb3JlLmFycmFuZ2UuQXJyYW5nZVBpcGVEZWYuY3JlYXRlT3V0cHV0IiwibWluZXJ2YS5jb3JlLmFycmFuZ2UuQXJyYW5nZVBpcGVEZWYucHJlcGFyZSIsIm1pbmVydmEuY29yZS5hcnJhbmdlLkFycmFuZ2VQaXBlRGVmLmZsdXNoIiwibWluZXJ2YS5hbm9uLmFycmFuZ2UiLCJtaW5lcnZhLmFub24uYXJyYW5nZS5Bbm9ueW1vdXNBcnJhbmdlUGlwZURlZiIsIm1pbmVydmEuYW5vbi5hcnJhbmdlLkFub255bW91c0FycmFuZ2VQaXBlRGVmLmNvbnN0cnVjdG9yIiwibWluZXJ2YS5jb3JlLm1lYXN1cmUiLCJtaW5lcnZhLmNvcmUubWVhc3VyZS5NZWFzdXJlUGlwZURlZiIsIm1pbmVydmEuY29yZS5tZWFzdXJlLk1lYXN1cmVQaXBlRGVmLmNvbnN0cnVjdG9yIiwibWluZXJ2YS5jb3JlLm1lYXN1cmUuTWVhc3VyZVBpcGVEZWYuY3JlYXRlU3RhdGUiLCJtaW5lcnZhLmNvcmUubWVhc3VyZS5NZWFzdXJlUGlwZURlZi5jcmVhdGVPdXRwdXQiLCJtaW5lcnZhLmNvcmUubWVhc3VyZS5NZWFzdXJlUGlwZURlZi5wcmVwYXJlIiwibWluZXJ2YS5jb3JlLm1lYXN1cmUuTWVhc3VyZVBpcGVEZWYuZmx1c2giLCJtaW5lcnZhLmFub24ubWVhc3VyZSIsIm1pbmVydmEuYW5vbi5tZWFzdXJlLkFub255bW91c01lYXN1cmVQaXBlRGVmIiwibWluZXJ2YS5hbm9uLm1lYXN1cmUuQW5vbnltb3VzTWVhc3VyZVBpcGVEZWYuY29uc3RydWN0b3IiLCJtaW5lcnZhLmNvbnRyb2xzIiwibWluZXJ2YS5jb250cm9scy5ib3JkZXIiLCJtaW5lcnZhLmNvbnRyb2xzLmJvcmRlci5Cb3JkZXJVcGRhdGVyIiwibWluZXJ2YS5jb250cm9scy5ib3JkZXIuQm9yZGVyVXBkYXRlci5jb25zdHJ1Y3RvciIsIm1pbmVydmEuY29udHJvbHMuYm9yZGVyLkJvcmRlclVwZGF0ZXIuaW5pdCIsIm1pbmVydmEuY29udHJvbHMuYm9yZGVyLkJvcmRlclVwZGF0ZXJUcmVlIiwibWluZXJ2YS5jb250cm9scy5ib3JkZXIuQm9yZGVyVXBkYXRlclRyZWUuY29uc3RydWN0b3IiLCJtaW5lcnZhLmNvbnRyb2xzLmJvcmRlci5Cb3JkZXJVcGRhdGVyVHJlZS53YWxrIiwibWluZXJ2YS5jb250cm9scy5wYW5lbCIsIm1pbmVydmEuY29udHJvbHMucGFuZWwuUGFuZWxVcGRhdGVyIiwibWluZXJ2YS5jb250cm9scy5wYW5lbC5QYW5lbFVwZGF0ZXIuY29uc3RydWN0b3IiLCJtaW5lcnZhLmNvbnRyb2xzLnBhbmVsLlBhbmVsVXBkYXRlci5pbml0IiwibWluZXJ2YS5jb250cm9scy5wYW5lbC5QYW5lbFVwZGF0ZXIuc2V0Q2hpbGRyZW4iLCJtaW5lcnZhLmNvbnRyb2xzLnBhbmVsLnJlYWN0VG8iLCJtaW5lcnZhLmNvbnRyb2xzLnBhbmVsLnJlYWN0VG8uekluZGV4IiwibWluZXJ2YS5jb250cm9scy5jYW52YXMiLCJtaW5lcnZhLmNvbnRyb2xzLmNhbnZhcy5DYW52YXNVcGRhdGVyIiwibWluZXJ2YS5jb250cm9scy5jYW52YXMuQ2FudmFzVXBkYXRlci5jb25zdHJ1Y3RvciIsIm1pbmVydmEuY29udHJvbHMuY2FudmFzLkNhbnZhc1VwZGF0ZXIuaW5pdCIsIm1pbmVydmEuY29udHJvbHMuY2FudmFzLnJlYWN0VG8iLCJtaW5lcnZhLmNvbnRyb2xzLmNhbnZhcy5yZWFjdFRvLmxlZnQiLCJtaW5lcnZhLmNvbnRyb2xzLmNhbnZhcy5yZWFjdFRvLnRvcCIsIm1pbmVydmEuY29udHJvbHMuY2FudmFzLnJlYWN0VG8uaW52YWxpZGF0ZVRvcExlZnQiLCJtaW5lcnZhLmNvbnRyb2xzLmNvbnRyb2wiLCJtaW5lcnZhLmNvbnRyb2xzLmNvbnRyb2wuQ29udHJvbFVwZGF0ZXIiLCJtaW5lcnZhLmNvbnRyb2xzLmNvbnRyb2wuQ29udHJvbFVwZGF0ZXIuY29uc3RydWN0b3IiLCJtaW5lcnZhLmNvbnRyb2xzLmNvbnRyb2wuQ29udHJvbFVwZGF0ZXIuaW5pdCIsIm1pbmVydmEuY29udHJvbHMuY29udHJvbC5Db250cm9sVXBkYXRlclRyZWUiLCJtaW5lcnZhLmNvbnRyb2xzLmNvbnRyb2wuQ29udHJvbFVwZGF0ZXJUcmVlLmNvbnN0cnVjdG9yIiwibWluZXJ2YS5jb250cm9scy5ncmlkIiwibWluZXJ2YS5jb250cm9scy5ncmlkLkdyaWRVbml0VHlwZSIsIm1pbmVydmEuY29udHJvbHMuZ3JpZC5HcmlkVXBkYXRlciIsIm1pbmVydmEuY29udHJvbHMuZ3JpZC5HcmlkVXBkYXRlci5jb25zdHJ1Y3RvciIsIm1pbmVydmEuY29udHJvbHMuZ3JpZC5HcmlkVXBkYXRlci5pbml0IiwibWluZXJ2YS5jb250cm9scy5ncmlkLnJlYWN0VG8iLCJtaW5lcnZhLmNvbnRyb2xzLmdyaWQucmVhY3RUby5pbnZhbGlkYXRlQ2VsbCIsIm1pbmVydmEuY29udHJvbHMuZ3JpZC5yZWFjdFRvLnNob3dHcmlkTGluZXMiLCJtaW5lcnZhLmNvbnRyb2xzLmdyaWQucmVhY3RUby5jb2x1bW4iLCJtaW5lcnZhLmNvbnRyb2xzLmdyaWQucmVhY3RUby5jb2x1bW5TcGFuIiwibWluZXJ2YS5jb250cm9scy5ncmlkLnJlYWN0VG8ucm93IiwibWluZXJ2YS5jb250cm9scy5ncmlkLnJlYWN0VG8ucm93U3BhbiIsIm1pbmVydmEuY29udHJvbHMuZ3JpZC5jcmVhdGVHcmlkU3RhdGUiLCJtaW5lcnZhLmNvbnRyb2xzLmdyaWQuU2VnbWVudCIsIm1pbmVydmEuY29udHJvbHMuZ3JpZC5TZWdtZW50LmNvbnN0cnVjdG9yIiwibWluZXJ2YS5jb250cm9scy5ncmlkLlNlZ21lbnQuY2xhbXAiLCJtaW5lcnZhLmNvbnRyb2xzLmdyaWQuU2VnbWVudC5pbml0IiwibWluZXJ2YS5jb250cm9scy5pbWFnZSIsIm1pbmVydmEuY29udHJvbHMuaW1hZ2UuSW1hZ2VVcGRhdGVyIiwibWluZXJ2YS5jb250cm9scy5pbWFnZS5JbWFnZVVwZGF0ZXIuY29uc3RydWN0b3IiLCJtaW5lcnZhLmNvbnRyb2xzLmltYWdlLkltYWdlVXBkYXRlci5pbml0IiwibWluZXJ2YS5jb250cm9scy5pbWFnZS5JbWFnZVVwZGF0ZXIuaW52YWxpZGF0ZU1ldHJpY3MiLCJtaW5lcnZhLmNvbnRyb2xzLm92ZXJsYXkiLCJtaW5lcnZhLmNvbnRyb2xzLm92ZXJsYXkuT3ZlcmxheVVwZGF0ZXIiLCJtaW5lcnZhLmNvbnRyb2xzLm92ZXJsYXkuT3ZlcmxheVVwZGF0ZXIuY29uc3RydWN0b3IiLCJtaW5lcnZhLmNvbnRyb2xzLm92ZXJsYXkuT3ZlcmxheVVwZGF0ZXIuaW5pdCIsIm1pbmVydmEuY29udHJvbHMub3ZlcmxheS5PdmVybGF5VXBkYXRlci5zZXRJbml0aWF0b3IiLCJtaW5lcnZhLmNvbnRyb2xzLm92ZXJsYXkuT3ZlcmxheVVwZGF0ZXIuc2V0TGF5ZXIiLCJtaW5lcnZhLmNvbnRyb2xzLm92ZXJsYXkuT3ZlcmxheVVwZGF0ZXIuaGlkZSIsIm1pbmVydmEuY29udHJvbHMub3ZlcmxheS5PdmVybGF5VXBkYXRlci5zaG93IiwibWluZXJ2YS5jb250cm9scy5vdmVybGF5LnJlYWN0VG8iLCJtaW5lcnZhLmNvbnRyb2xzLm92ZXJsYXkucmVhY3RUby5pc09wZW4iLCJtaW5lcnZhLmNvbnRyb2xzLm92ZXJsYXkuT3ZlcmxheVVwZGF0ZXJUcmVlIiwibWluZXJ2YS5jb250cm9scy5vdmVybGF5Lk92ZXJsYXlVcGRhdGVyVHJlZS5jb25zdHJ1Y3RvciIsIm1pbmVydmEuY29udHJvbHMucGFuZWwud2Fsa0FycmF5IiwiaW5kZXgiLCJlIiwiYXJyIiwibGVuIiwibWluZXJ2YS5jb250cm9scy5wYW5lbC56SW5kZXhDb21wYXJlciIsIm1pbmVydmEuY29udHJvbHMucGFuZWwuUGFuZWxVcGRhdGVyVHJlZSIsIm1pbmVydmEuY29udHJvbHMucGFuZWwuUGFuZWxVcGRhdGVyVHJlZS5jb25zdHJ1Y3RvciIsIm1pbmVydmEuY29udHJvbHMucGFuZWwuUGFuZWxVcGRhdGVyVHJlZS53YWxrIiwibWluZXJ2YS5jb250cm9scy5wYW5lbC5QYW5lbFVwZGF0ZXJUcmVlLnpTb3J0IiwibWluZXJ2YS5jb250cm9scy5wYW5lbC5QYW5lbFVwZGF0ZXJUcmVlLm9uQ2hpbGRBdHRhY2hlZCIsIm1pbmVydmEuY29udHJvbHMucGFuZWwuUGFuZWxVcGRhdGVyVHJlZS5vbkNoaWxkRGV0YWNoZWQiLCJtaW5lcnZhLmNvbnRyb2xzLnBvcHVwIiwibWluZXJ2YS5jb250cm9scy5wb3B1cC5Qb3B1cFVwZGF0ZXIiLCJtaW5lcnZhLmNvbnRyb2xzLnBvcHVwLlBvcHVwVXBkYXRlci5jb25zdHJ1Y3RvciIsIm1pbmVydmEuY29udHJvbHMucG9wdXAuUG9wdXBVcGRhdGVyLmluaXQiLCJtaW5lcnZhLmNvbnRyb2xzLnBvcHVwLlBvcHVwVXBkYXRlci5zZXRJbml0aWF0b3IiLCJtaW5lcnZhLmNvbnRyb2xzLnBvcHVwLlBvcHVwVXBkYXRlci5zZXRDaGlsZCIsIm1pbmVydmEuY29udHJvbHMucG9wdXAuUG9wdXBVcGRhdGVyLnNldExheWVyIiwibWluZXJ2YS5jb250cm9scy5wb3B1cC5Qb3B1cFVwZGF0ZXIuaGlkZSIsIm1pbmVydmEuY29udHJvbHMucG9wdXAuUG9wdXBVcGRhdGVyLnNob3ciLCJtaW5lcnZhLmNvbnRyb2xzLnBvcHVwLnJlYWN0VG8iLCJtaW5lcnZhLmNvbnRyb2xzLnBvcHVwLnJlYWN0VG8uaXNPcGVuIiwibWluZXJ2YS5jb250cm9scy5wb3B1cC5yZWFjdFRvLmhvcml6b250YWxPZmZzZXQiLCJtaW5lcnZhLmNvbnRyb2xzLnBvcHVwLnJlYWN0VG8udmVydGljYWxPZmZzZXQiLCJtaW5lcnZhLmNvbnRyb2xzLnBvcHVwLnJlYWN0VG8udHdlZW5PZmZzZXQiLCJtaW5lcnZhLmNvbnRyb2xzLnBvcHVwLlBvcHVwVXBkYXRlclRyZWUiLCJtaW5lcnZhLmNvbnRyb2xzLnBvcHVwLlBvcHVwVXBkYXRlclRyZWUuY29uc3RydWN0b3IiLCJtaW5lcnZhLmNvbnRyb2xzLnNjcm9sbGNvbnRlbnRwcmVzZW50ZXIiLCJtaW5lcnZhLmNvbnRyb2xzLnNjcm9sbGNvbnRlbnRwcmVzZW50ZXIuaGVscGVycyIsIm1pbmVydmEuY29udHJvbHMuc2Nyb2xsY29udGVudHByZXNlbnRlci5oZWxwZXJzLmNsYW1wT2Zmc2V0cyIsIm1pbmVydmEuY29udHJvbHMuc2Nyb2xsY29udGVudHByZXNlbnRlci5oZWxwZXJzLmNsYW1wSG9yaXpvbnRhbCIsIm1pbmVydmEuY29udHJvbHMuc2Nyb2xsY29udGVudHByZXNlbnRlci5oZWxwZXJzLmNsYW1wVmVydGljYWwiLCJtaW5lcnZhLmNvbnRyb2xzLnNjcm9sbGNvbnRlbnRwcmVzZW50ZXIuaGVscGVycy5hcmVDbG9zZSIsIm1pbmVydmEuY29udHJvbHMuc2Nyb2xsY29udGVudHByZXNlbnRlci5TY3JvbGxDb250ZW50UHJlc2VudGVyVXBkYXRlciIsIm1pbmVydmEuY29udHJvbHMuc2Nyb2xsY29udGVudHByZXNlbnRlci5TY3JvbGxDb250ZW50UHJlc2VudGVyVXBkYXRlci5jb25zdHJ1Y3RvciIsIm1pbmVydmEuY29udHJvbHMuc2Nyb2xsY29udGVudHByZXNlbnRlci5TY3JvbGxDb250ZW50UHJlc2VudGVyVXBkYXRlci5pbml0IiwibWluZXJ2YS5jb250cm9scy5zdGFja3BhbmVsIiwibWluZXJ2YS5jb250cm9scy5zdGFja3BhbmVsLlN0YWNrUGFuZWxVcGRhdGVyIiwibWluZXJ2YS5jb250cm9scy5zdGFja3BhbmVsLlN0YWNrUGFuZWxVcGRhdGVyLmNvbnN0cnVjdG9yIiwibWluZXJ2YS5jb250cm9scy5zdGFja3BhbmVsLlN0YWNrUGFuZWxVcGRhdGVyLmluaXQiLCJtaW5lcnZhLmNvbnRyb2xzLnRleHRibG9jayIsIm1pbmVydmEuY29udHJvbHMudGV4dGJsb2NrLlRleHRCbG9ja1VwZGF0ZXIiLCJtaW5lcnZhLmNvbnRyb2xzLnRleHRibG9jay5UZXh0QmxvY2tVcGRhdGVyLmNvbnN0cnVjdG9yIiwibWluZXJ2YS5jb250cm9scy50ZXh0YmxvY2suVGV4dEJsb2NrVXBkYXRlci5pbml0IiwibWluZXJ2YS5jb250cm9scy50ZXh0YmxvY2suVGV4dEJsb2NrVXBkYXRlci5zZXREb2N1bWVudCIsIm1pbmVydmEuY29udHJvbHMudGV4dGJsb2NrLlRleHRCbG9ja1VwZGF0ZXIuaW52YWxpZGF0ZUZvbnQiLCJtaW5lcnZhLmNvbnRyb2xzLnRleHRibG9jay5UZXh0QmxvY2tVcGRhdGVyLmludmFsaWRhdGVUZXh0TWV0cmljcyIsIm1pbmVydmEuY29udHJvbHMudGV4dGJsb2NrLlRleHRCbG9ja1VwZGF0ZXJUcmVlIiwibWluZXJ2YS5jb250cm9scy50ZXh0YmxvY2suVGV4dEJsb2NrVXBkYXRlclRyZWUuY29uc3RydWN0b3IiLCJtaW5lcnZhLmNvbnRyb2xzLnRleHRibG9jay5UZXh0QmxvY2tVcGRhdGVyVHJlZS5zZXRNYXhXaWR0aCIsIm1pbmVydmEuY29udHJvbHMudGV4dGJsb2NrLlRleHRCbG9ja1VwZGF0ZXJUcmVlLmxheW91dCIsIm1pbmVydmEuY29udHJvbHMudGV4dGJsb2NrLlRleHRCbG9ja1VwZGF0ZXJUcmVlLnJlbmRlciIsIm1pbmVydmEuY29udHJvbHMudGV4dGJsb2NrLlRleHRCbG9ja1VwZGF0ZXJUcmVlLnNldEF2YWlsYWJsZVdpZHRoIiwibWluZXJ2YS5jb250cm9scy50ZXh0YmxvY2suVGV4dEJsb2NrVXBkYXRlclRyZWUuZ2V0SG9yaXpvbnRhbE9mZnNldCIsIm1pbmVydmEuY29udHJvbHMudGV4dGJsb2NrLlRleHRCbG9ja1VwZGF0ZXJUcmVlLmNsZWFyVGV4dCIsIm1pbmVydmEuY29udHJvbHMudGV4dGJsb2NrLlRleHRCbG9ja1VwZGF0ZXJUcmVlLndhbGtUZXh0IiwiY2hpbGRyZW4iLCJtaW5lcnZhLmNvbnRyb2xzLnRleHRibG9jay5UZXh0QmxvY2tVcGRhdGVyVHJlZS5vblRleHRBdHRhY2hlZCIsIm1pbmVydmEuY29udHJvbHMudGV4dGJsb2NrLlRleHRCbG9ja1VwZGF0ZXJUcmVlLm9uVGV4dERldGFjaGVkIiwibWluZXJ2YS5jb250cm9scy50ZXh0Ym94dmlldyIsIm1pbmVydmEuY29udHJvbHMudGV4dGJveHZpZXcuQmxpbmtlciIsIm1pbmVydmEuY29udHJvbHMudGV4dGJveHZpZXcuQmxpbmtlci5jb25zdHJ1Y3RvciIsIm1pbmVydmEuY29udHJvbHMudGV4dGJveHZpZXcuQmxpbmtlci5kZWxheSIsIm1pbmVydmEuY29udHJvbHMudGV4dGJveHZpZXcuQmxpbmtlci5iZWdpbiIsIm1pbmVydmEuY29udHJvbHMudGV4dGJveHZpZXcuQmxpbmtlci5lbmQiLCJtaW5lcnZhLmNvbnRyb2xzLnRleHRib3h2aWV3LkJsaW5rZXIuJGNvbm5lY3QiLCJtaW5lcnZhLmNvbnRyb2xzLnRleHRib3h2aWV3LkJsaW5rZXIuJGRpc2Nvbm5lY3QiLCJtaW5lcnZhLmNvbnRyb2xzLnRleHRib3h2aWV3LkJsaW5rZXIuJGJsaW5rIiwibWluZXJ2YS5jb250cm9scy50ZXh0Ym94dmlldy5CbGlua2VyLiRzaG93IiwibWluZXJ2YS5jb250cm9scy50ZXh0Ym94dmlldy5CbGlua2VyLiRoaWRlIiwibWluZXJ2YS5jb250cm9scy50ZXh0Ym94dmlldy5UZXh0Qm94Vmlld1VwZGF0ZXIiLCJtaW5lcnZhLmNvbnRyb2xzLnRleHRib3h2aWV3LlRleHRCb3hWaWV3VXBkYXRlci5jb25zdHJ1Y3RvciIsIm1pbmVydmEuY29udHJvbHMudGV4dGJveHZpZXcuVGV4dEJveFZpZXdVcGRhdGVyLmluaXQiLCJtaW5lcnZhLmNvbnRyb2xzLnRleHRib3h2aWV3LlRleHRCb3hWaWV3VXBkYXRlci5zZXREb2N1bWVudCIsIm1pbmVydmEuY29udHJvbHMudGV4dGJveHZpZXcuVGV4dEJveFZpZXdVcGRhdGVyLmdldEN1cnNvckZyb21Qb2ludCIsIm1pbmVydmEuY29udHJvbHMudGV4dGJveHZpZXcuVGV4dEJveFZpZXdVcGRhdGVyLmludmFsaWRhdGVGb250IiwibWluZXJ2YS5jb250cm9scy50ZXh0Ym94dmlldy5UZXh0Qm94Vmlld1VwZGF0ZXIuaW52YWxpZGF0ZVRleHRNZXRyaWNzIiwibWluZXJ2YS5jb250cm9scy50ZXh0Ym94dmlldy5UZXh0Qm94Vmlld1VwZGF0ZXIuaW52YWxpZGF0ZU1lYXN1cmUiLCJtaW5lcnZhLmNvbnRyb2xzLnRleHRib3h2aWV3LlRleHRCb3hWaWV3VXBkYXRlci5pbnZhbGlkYXRlQ2FyZXQiLCJtaW5lcnZhLmNvbnRyb2xzLnRleHRib3h2aWV3LlRleHRCb3hWaWV3VXBkYXRlci5pbnZhbGlkYXRlU2VsZWN0aW9uU3RhcnQiLCJtaW5lcnZhLmNvbnRyb2xzLnRleHRib3h2aWV3LlRleHRCb3hWaWV3VXBkYXRlci5pbnZhbGlkYXRlU2VsZWN0aW9uTGVuZ3RoIiwibWluZXJ2YS5jb250cm9scy50ZXh0Ym94dmlldy5UZXh0Qm94Vmlld1VwZGF0ZXIuaW52YWxpZGF0ZUNhcmV0UmVnaW9uIiwibWluZXJ2YS5jb250cm9scy50ZXh0Ym94dmlldy5UZXh0Qm94Vmlld1VwZGF0ZXIucmVzZXRDYXJldEJsaW5rZXIiLCJtaW5lcnZhLmNvbnRyb2xzLnRleHRib3h2aWV3LlRleHRCb3hWaWV3VXBkYXRlclRyZWUiLCJtaW5lcnZhLmNvbnRyb2xzLnRleHRib3h2aWV3LlRleHRCb3hWaWV3VXBkYXRlclRyZWUuY29uc3RydWN0b3IiLCJtaW5lcnZhLmNvbnRyb2xzLnRleHRib3h2aWV3LlRleHRCb3hWaWV3VXBkYXRlclRyZWUuc2V0TWF4V2lkdGgiLCJtaW5lcnZhLmNvbnRyb2xzLnRleHRib3h2aWV3LlRleHRCb3hWaWV3VXBkYXRlclRyZWUubGF5b3V0IiwibWluZXJ2YS5jb250cm9scy50ZXh0Ym94dmlldy5UZXh0Qm94Vmlld1VwZGF0ZXJUcmVlLnJlbmRlciIsIm1pbmVydmEuY29udHJvbHMudGV4dGJveHZpZXcuVGV4dEJveFZpZXdVcGRhdGVyVHJlZS5zZXRBdmFpbGFibGVXaWR0aCIsIm1pbmVydmEuY29udHJvbHMudGV4dGJveHZpZXcuVGV4dEJveFZpZXdVcGRhdGVyVHJlZS5nZXRIb3Jpem9udGFsT2Zmc2V0IiwibWluZXJ2YS5jb250cm9scy50ZXh0Ym94dmlldy5UZXh0Qm94Vmlld1VwZGF0ZXJUcmVlLmdldENhcmV0UmVnaW9uIiwibWluZXJ2YS5jb250cm9scy50ZXh0Ym94dmlldy5UZXh0Qm94Vmlld1VwZGF0ZXJUcmVlLmNsZWFyVGV4dCIsIm1pbmVydmEuY29udHJvbHMudGV4dGJveHZpZXcuVGV4dEJveFZpZXdVcGRhdGVyVHJlZS53YWxrVGV4dCIsIm1pbmVydmEuY29udHJvbHMudGV4dGJveHZpZXcuVGV4dEJveFZpZXdVcGRhdGVyVHJlZS5vblRleHRBdHRhY2hlZCIsIm1pbmVydmEuY29udHJvbHMudGV4dGJveHZpZXcuVGV4dEJveFZpZXdVcGRhdGVyVHJlZS5vblRleHREZXRhY2hlZCIsIm1pbmVydmEuY29udHJvbHMudXNlcmNvbnRyb2wiLCJtaW5lcnZhLmNvbnRyb2xzLnVzZXJjb250cm9sLlVzZXJDb250cm9sVXBkYXRlciIsIm1pbmVydmEuY29udHJvbHMudXNlcmNvbnRyb2wuVXNlckNvbnRyb2xVcGRhdGVyLmNvbnN0cnVjdG9yIiwibWluZXJ2YS5jb250cm9scy51c2VyY29udHJvbC5Vc2VyQ29udHJvbFVwZGF0ZXIuaW5pdCIsIm1pbmVydmEuY29udHJvbHMudmlkZW8iLCJtaW5lcnZhLmNvbnRyb2xzLnZpZGVvLlZpZGVvVXBkYXRlciIsIm1pbmVydmEuY29udHJvbHMudmlkZW8uVmlkZW9VcGRhdGVyLmNvbnN0cnVjdG9yIiwibWluZXJ2YS5jb250cm9scy52aWRlby5WaWRlb1VwZGF0ZXIub25TdXJmYWNlQ2hhbmdlZCIsIm1pbmVydmEuY29udHJvbHMudmlkZW8uVmlkZW9VcGRhdGVyLnByZVJlbmRlciIsIm1pbmVydmEuY29udHJvbHMudmlydHVhbGl6aW5ncGFuZWwiLCJtaW5lcnZhLmNvbnRyb2xzLnZpcnR1YWxpemluZ3BhbmVsLlZpcnR1YWxpemluZ1BhbmVsVXBkYXRlciIsIm1pbmVydmEuY29udHJvbHMudmlydHVhbGl6aW5ncGFuZWwuVmlydHVhbGl6aW5nUGFuZWxVcGRhdGVyLmNvbnN0cnVjdG9yIiwibWluZXJ2YS5jb250cm9scy52aXJ0dWFsaXppbmdwYW5lbC5WaXJ0dWFsaXppbmdQYW5lbFVwZGF0ZXIuaW5pdCIsImdlbmVyYXRlIiwibWluZXJ2YS5jb250cm9scy52aXJ0dWFsaXppbmdwYW5lbC5WaXJ0dWFsaXppbmdQYW5lbFVwZGF0ZXJUcmVlIiwibWluZXJ2YS5jb250cm9scy52aXJ0dWFsaXppbmdwYW5lbC5WaXJ0dWFsaXppbmdQYW5lbFVwZGF0ZXJUcmVlLmNvbnN0cnVjdG9yIiwibWluZXJ2YS5jb250cm9scy52aXJ0dWFsaXppbmdzdGFja3BhbmVsIiwibWluZXJ2YS5jb250cm9scy52aXJ0dWFsaXppbmdzdGFja3BhbmVsLlZpcnR1YWxpemluZ1N0YWNrUGFuZWxVcGRhdGVyIiwibWluZXJ2YS5jb250cm9scy52aXJ0dWFsaXppbmdzdGFja3BhbmVsLlZpcnR1YWxpemluZ1N0YWNrUGFuZWxVcGRhdGVyLmNvbnN0cnVjdG9yIiwibWluZXJ2YS5jb250cm9scy52aXJ0dWFsaXppbmdzdGFja3BhbmVsLlZpcnR1YWxpemluZ1N0YWNrUGFuZWxVcGRhdGVyLmluaXQiLCJtaW5lcnZhLmNvcmUuYXJyYW5nZS5BcnJhbmdlQmluZGVyIiwibWluZXJ2YS5jb3JlLmFycmFuZ2UuQXJyYW5nZUJpbmRlci5iaW5kIiwibWluZXJ2YS5jb3JlLmFycmFuZ2UuQXJyYW5nZUJpbmRlci5leHBhbmRWaWV3cG9ydCIsIm1pbmVydmEuY29yZS5hcnJhbmdlLkFycmFuZ2VCaW5kZXIuc2hpZnRWaWV3cG9ydCIsIm1pbmVydmEuY29yZS5kcmFmdCIsIm1pbmVydmEuY29yZS5kcmFmdC5EcmFmdFBpcGVEZWYiLCJtaW5lcnZhLmNvcmUuZHJhZnQuRHJhZnRQaXBlRGVmLmNvbnN0cnVjdG9yIiwibWluZXJ2YS5jb3JlLmhpdHRlc3QiLCJtaW5lcnZhLmNvcmUuaGl0dGVzdC5IaXRUZXN0UGlwZURlZiIsIm1pbmVydmEuY29yZS5oaXR0ZXN0LkhpdFRlc3RQaXBlRGVmLmNvbnN0cnVjdG9yIiwibWluZXJ2YS5jb3JlLm1lYXN1cmUuTWVhc3VyZUJpbmRlciIsIm1pbmVydmEuY29yZS5tZWFzdXJlLk1lYXN1cmVCaW5kZXIuYmluZCIsIm1pbmVydmEuY29yZS5wcm9jZXNzZG93biIsIm1pbmVydmEuY29yZS5wcm9jZXNzZG93bi5Qcm9jZXNzRG93blBpcGVEZWYiLCJtaW5lcnZhLmNvcmUucHJvY2Vzc2Rvd24uUHJvY2Vzc0Rvd25QaXBlRGVmLmNvbnN0cnVjdG9yIiwibWluZXJ2YS5jb3JlLnByb2Nlc3Nkb3duLlByb2Nlc3NEb3duUGlwZURlZi5jcmVhdGVTdGF0ZSIsIm1pbmVydmEuY29yZS5wcm9jZXNzZG93bi5Qcm9jZXNzRG93blBpcGVEZWYuY3JlYXRlT3V0cHV0IiwibWluZXJ2YS5jb3JlLnByb2Nlc3Nkb3duLlByb2Nlc3NEb3duUGlwZURlZi5wcmVwYXJlIiwibWluZXJ2YS5jb3JlLnByb2Nlc3Nkb3duLlByb2Nlc3NEb3duUGlwZURlZi5mbHVzaCIsIm1pbmVydmEuY29yZS5wcm9jZXNzdXAiLCJtaW5lcnZhLmNvcmUucHJvY2Vzc3VwLlByb2Nlc3NVcFBpcGVEZWYiLCJtaW5lcnZhLmNvcmUucHJvY2Vzc3VwLlByb2Nlc3NVcFBpcGVEZWYuY29uc3RydWN0b3IiLCJtaW5lcnZhLmNvcmUucHJvY2Vzc3VwLlByb2Nlc3NVcFBpcGVEZWYuY3JlYXRlU3RhdGUiLCJtaW5lcnZhLmNvcmUucHJvY2Vzc3VwLlByb2Nlc3NVcFBpcGVEZWYuY3JlYXRlT3V0cHV0IiwibWluZXJ2YS5jb3JlLnByb2Nlc3N1cC5Qcm9jZXNzVXBQaXBlRGVmLnByZXBhcmUiLCJtaW5lcnZhLmNvcmUucHJvY2Vzc3VwLlByb2Nlc3NVcFBpcGVEZWYuZmx1c2giLCJtaW5lcnZhLmNvcmUucmVuZGVyIiwibWluZXJ2YS5jb3JlLnJlbmRlci5nZXRJRVZlcnNpb24iLCJtaW5lcnZhLmNvcmUucmVuZGVyLlJlbmRlckNvbnRleHQiLCJtaW5lcnZhLmNvcmUucmVuZGVyLlJlbmRlckNvbnRleHQuY29uc3RydWN0b3IiLCJtaW5lcnZhLmNvcmUucmVuZGVyLlJlbmRlckNvbnRleHQuaGFzRmlsbFJ1bGUiLCJtaW5lcnZhLmNvcmUucmVuZGVyLlJlbmRlckNvbnRleHQuYXBwbHlEcGlSYXRpbyIsIm1pbmVydmEuY29yZS5yZW5kZXIuUmVuZGVyQ29udGV4dC5zYXZlIiwibWluZXJ2YS5jb3JlLnJlbmRlci5SZW5kZXJDb250ZXh0LnJlc3RvcmUiLCJtaW5lcnZhLmNvcmUucmVuZGVyLlJlbmRlckNvbnRleHQuc2V0VHJhbnNmb3JtIiwibWluZXJ2YS5jb3JlLnJlbmRlci5SZW5kZXJDb250ZXh0LnJlc2V0VHJhbnNmb3JtIiwibWluZXJ2YS5jb3JlLnJlbmRlci5SZW5kZXJDb250ZXh0LnRyYW5zZm9ybSIsIm1pbmVydmEuY29yZS5yZW5kZXIuUmVuZGVyQ29udGV4dC5zY2FsZSIsIm1pbmVydmEuY29yZS5yZW5kZXIuUmVuZGVyQ29udGV4dC5yb3RhdGUiLCJtaW5lcnZhLmNvcmUucmVuZGVyLlJlbmRlckNvbnRleHQudHJhbnNsYXRlIiwibWluZXJ2YS5jb3JlLnJlbmRlci5SZW5kZXJDb250ZXh0LmFwcGx5IiwibWluZXJ2YS5jb3JlLnJlbmRlci5SZW5kZXJDb250ZXh0LnByZWFwcGx5IiwibWluZXJ2YS5jb3JlLnJlbmRlci5SZW5kZXJDb250ZXh0LmNsaXBHZW9tZXRyeSIsIm1pbmVydmEuY29yZS5yZW5kZXIuUmVuZGVyQ29udGV4dC5jbGlwUmVjdCIsIm1pbmVydmEuY29yZS5yZW5kZXIuUmVuZGVyQ29udGV4dC5maWxsRXgiLCJtaW5lcnZhLmNvcmUucmVuZGVyLlJlbmRlckNvbnRleHQuaXNQb2ludEluU3Ryb2tlRXgiLCJtaW5lcnZhLmNvcmUucmVuZGVyLlJlbmRlckNvbnRleHRTaXplIiwibWluZXJ2YS5jb3JlLnJlbmRlci5SZW5kZXJDb250ZXh0U2l6ZS5jb25zdHJ1Y3RvciIsIm1pbmVydmEuY29yZS5yZW5kZXIuUmVuZGVyQ29udGV4dFNpemUuZGVzaXJlZFdpZHRoIiwibWluZXJ2YS5jb3JlLnJlbmRlci5SZW5kZXJDb250ZXh0U2l6ZS5kZXNpcmVkSGVpZ2h0IiwibWluZXJ2YS5jb3JlLnJlbmRlci5SZW5kZXJDb250ZXh0U2l6ZS5wYWludFdpZHRoIiwibWluZXJ2YS5jb3JlLnJlbmRlci5SZW5kZXJDb250ZXh0U2l6ZS5wYWludEhlaWdodCIsIm1pbmVydmEuY29yZS5yZW5kZXIuUmVuZGVyQ29udGV4dFNpemUuZHBpUmF0aW8iLCJtaW5lcnZhLmNvcmUucmVuZGVyLlJlbmRlckNvbnRleHRTaXplLmluaXQiLCJtaW5lcnZhLmNvcmUucmVuZGVyLlJlbmRlckNvbnRleHRTaXplLnF1ZXVlUmVzaXplIiwibWluZXJ2YS5jb3JlLnJlbmRlci5SZW5kZXJDb250ZXh0U2l6ZS5jb21taXRSZXNpemUiLCJtaW5lcnZhLmNvcmUucmVuZGVyLlJlbmRlckNvbnRleHRTaXplLnVwZGF0ZURwaVJhdGlvIiwibWluZXJ2YS5jb3JlLnJlbmRlci5SZW5kZXJDb250ZXh0U2l6ZS4kYWRqdXN0Q2FudmFzIiwibWluZXJ2YS5jb3JlLnJlbmRlci5SZW5kZXJQaXBlRGVmIiwibWluZXJ2YS5jb3JlLnJlbmRlci5SZW5kZXJQaXBlRGVmLmNvbnN0cnVjdG9yIiwibWluZXJ2YS5jb3JlLnJlbmRlci5SZW5kZXJQaXBlRGVmLmNyZWF0ZVN0YXRlIiwibWluZXJ2YS5jb3JlLnJlbmRlci5SZW5kZXJQaXBlRGVmLmNyZWF0ZU91dHB1dCIsIm1pbmVydmEuY29yZS5zaXppbmciLCJtaW5lcnZhLmNvcmUuc2l6aW5nLlNpemluZ1BpcGVEZWYiLCJtaW5lcnZhLmNvcmUuc2l6aW5nLlNpemluZ1BpcGVEZWYuY29uc3RydWN0b3IiLCJtaW5lcnZhLmNvcmUuc2l6aW5nLlNpemluZ1BpcGVEZWYuY3JlYXRlU3RhdGUiLCJtaW5lcnZhLmNvcmUuc2l6aW5nLlNpemluZ1BpcGVEZWYuY3JlYXRlT3V0cHV0IiwibWluZXJ2YS5jb3JlLnNpemluZy5TaXppbmdQaXBlRGVmLmZsdXNoIiwibWluZXJ2YS5wYXRoLnNlZ21lbnRzIiwibWluZXJ2YS5wYXRoLnNlZ21lbnRzLmFyYyIsIm1pbmVydmEucGF0aC5zZWdtZW50cy5hcmMuaW5pdCIsImN0eCIsImFyYyIsIngiLCJ5IiwicmFkaXVzIiwic2EiLCJlYSIsImNjIiwiaW5pdCIsImV4IiwiZXkiLCJib3giLCJsIiwiTWF0aCIsIm1pbiIsInN4IiwiciIsIm1heCIsInQiLCJzeSIsImNsIiwiY3IiLCJjdCIsImNiIiwiaHMiLCJwYXJzIiwic3Ryb2tlVGhpY2tuZXNzIiwiY2FwIiwic3Ryb2tlU3RhcnRMaW5lQ2FwIiwic3Ryb2tlRW5kTGluZUNhcCIsInN2IiwiZ2V0U3RhcnRWZWN0b3IiLCJzcyIsImdldENhcFNwcmVhZCIsImV2IiwiZ2V0RW5kVmVjdG9yIiwiZXMiLCJ4MSIsIngyIiwieTEiLCJ5MiIsInJ2IiwibWluZXJ2YS5wYXRoLnNlZ21lbnRzLmFyY0NvbnRhaW5zUG9pbnQiLCJtaW5lcnZhLnBhdGguc2VnbWVudHMuZ2V0Q2FwU3ByZWFkIiwibWluZXJ2YS5wYXRoLnNlZ21lbnRzLm5vcm1hbGl6ZVZlY3RvciIsIm1pbmVydmEucGF0aC5zZWdtZW50cy5wZXJwZW5kaWN1bGFyVmVjdG9yIiwibWluZXJ2YS5wYXRoLnNlZ21lbnRzLmFyY1RvIiwibWluZXJ2YS5wYXRoLnNlZ21lbnRzLmFyY1RvLmluaXQiLCJhcmNUbyIsImNweCIsImNweSIsImxpbmUiLCJleHRlbmRGaWxsQm94IiwiZXh0ZW5kU3Ryb2tlQm94IiwibWluZXJ2YS5wYXRoLnNlZ21lbnRzLmdldFRhbmdlbnRQb2ludCIsIm1pbmVydmEucGF0aC5zZWdtZW50cy5nZXRQZXJwZW5kaWN1bGFySW50ZXJzZWN0aW9ucyIsIm1pbmVydmEucGF0aC5zZWdtZW50cy5jbG9zZSIsImNsb3NlUGF0aCIsIm1pbmVydmEucGF0aC5zZWdtZW50cy5jdWJpY0JlemllciIsImJlemllckN1cnZlVG8iLCJjcDF4IiwiY3AxeSIsImNwMngiLCJjcDJ5IiwibSIsImdldE1heGltYSIsInRvU3RyaW5nIiwibWluZXJ2YS5wYXRoLnNlZ21lbnRzLmdldE1heGltYSIsIm1pbmVydmEucGF0aC5zZWdtZW50cy5jb2QiLCJtaW5lcnZhLnBhdGguc2VnbWVudHMuZWxsaXBzZSIsImJlZ2luUGF0aCIsIndpZHRoIiwiaGVpZ2h0IiwiY2VudGVyWCIsImNlbnRlclkiLCJyYWRpdXNYIiwiUEkiLCJrYXBwYSIsIm94Iiwib3kiLCJyYWRpdXNZIiwibW92ZVRvIiwicmlnaHQiLCJib3R0b20iLCJtaW5lcnZhLnBhdGguc2VnbWVudHMuZWxsaXB0aWNhbEFyYyIsInN1YiIsImJ1aWxkU2VnbWVudHMiLCJkcmF3IiwicngiLCJyeSIsInJvdGF0aW9uQW5nbGUiLCJpc0xhcmdlQXJjRmxhZyIsInN3ZWVwRGlyZWN0aW9uRmxhZyIsIm1pbmVydmEucGF0aC5zZWdtZW50cy5idWlsZFNlZ21lbnRzIiwibWluZXJ2YS5wYXRoLnNlZ21lbnRzLmxpbmUiLCJsaW5lVG8iLCJtaW5lcnZhLnBhdGguc2VnbWVudHMubW92ZSIsIm1pbmVydmEucGF0aC5zZWdtZW50cy5xdWFkcmF0aWNCZXppZXIiLCJxdWFkcmF0aWNDdXJ2ZVRvIiwibWluZXJ2YS5wYXRoLnNlZ21lbnRzLnJlY3QiLCJyZWN0IiwibWluZXJ2YS5wYXRoLnNlZ21lbnRzLnJvdW5kZWRSZWN0Iiwic2hhcGVzIiwicmVjdGFuZ2xlIiwiaGVscGVycyIsIkNhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCIsImRlZmluZVByb3BlcnR5Iiwid2Via2l0QmFja2luZ1N0b3JlUGl4ZWxSYXRpbyIsIm1vekJhY2tpbmdTdG9yZVBpeGVsUmF0aW8iLCJtc0JhY2tpbmdTdG9yZVBpeGVsUmF0aW8iLCJvQmFja2luZ1N0b3JlUGl4ZWxSYXRpbyIsImVsbGlwc2UiLCJyb3RhdGlvbiIsInN0YXJ0QW5nbGUiLCJlbmRBbmdsZSIsImFudGlDbG9ja3dpc2UiLCJzYXZlIiwidHJhbnNsYXRlIiwicm90YXRlIiwic2NhbGUiLCJyZXN0b3JlIiwiaXNQb2ludEluU3Ryb2tlIiwibWluZXJ2YS5zaGFwZXMiLCJtaW5lcnZhLnNoYXBlcy5zaGFwZSIsIm1pbmVydmEuc2hhcGVzLnNoYXBlLlNoYXBlVXBkYXRlciIsIm1pbmVydmEuc2hhcGVzLnNoYXBlLlNoYXBlVXBkYXRlci5jb25zdHJ1Y3RvciIsIm1pbmVydmEuc2hhcGVzLnNoYXBlLlNoYXBlVXBkYXRlci5pbml0IiwibWluZXJ2YS5zaGFwZXMuc2hhcGUuU2hhcGVVcGRhdGVyLmludmFsaWRhdGVOYXR1cmFsQm91bmRzIiwibWluZXJ2YS5zaGFwZXMuZWxsaXBzZSIsIm1pbmVydmEuc2hhcGVzLmVsbGlwc2UuRWxsaXBzZVVwZGF0ZXIiLCJtaW5lcnZhLnNoYXBlcy5lbGxpcHNlLkVsbGlwc2VVcGRhdGVyLmNvbnN0cnVjdG9yIiwibWluZXJ2YS5zaGFwZXMuZWxsaXBzZS5FbGxpcHNlVXBkYXRlci5pbml0IiwibWluZXJ2YS5zaGFwZXMucGF0aCIsIm1pbmVydmEuc2hhcGVzLnBhdGguUGF0aFVwZGF0ZXIiLCJtaW5lcnZhLnNoYXBlcy5wYXRoLlBhdGhVcGRhdGVyLmNvbnN0cnVjdG9yIiwibWluZXJ2YS5zaGFwZXMucGF0aC5QYXRoVXBkYXRlci5pbml0IiwibWluZXJ2YS5zaGFwZXMubGluZSIsIm1pbmVydmEuc2hhcGVzLmxpbmUuTGluZVVwZGF0ZXIiLCJtaW5lcnZhLnNoYXBlcy5saW5lLkxpbmVVcGRhdGVyLmNvbnN0cnVjdG9yIiwibWluZXJ2YS5zaGFwZXMubGluZS5MaW5lVXBkYXRlci5pbml0IiwibWluZXJ2YS5zaGFwZXMubGluZS5MaW5lVXBkYXRlci5pbnZhbGlkYXRlUGF0aCIsIm1pbmVydmEuc2hhcGVzLnBhdGguQW5vblBhdGhHZW9tZXRyeSIsIm1pbmVydmEuc2hhcGVzLnBhdGguQW5vblBhdGhHZW9tZXRyeS5jb25zdHJ1Y3RvciIsIm1pbmVydmEuc2hhcGVzLnBhdGguQW5vblBhdGhHZW9tZXRyeS5EcmF3IiwibWluZXJ2YS5zaGFwZXMucGF0aC5Bbm9uUGF0aEdlb21ldHJ5LkdldEJvdW5kcyIsIm1pbmVydmEuc2hhcGVzLnBvbHlsaW5lIiwibWluZXJ2YS5zaGFwZXMucG9seWxpbmUuUG9seWxpbmVVcGRhdGVyIiwibWluZXJ2YS5zaGFwZXMucG9seWxpbmUuUG9seWxpbmVVcGRhdGVyLmNvbnN0cnVjdG9yIiwibWluZXJ2YS5zaGFwZXMucG9seWxpbmUuUG9seWxpbmVVcGRhdGVyLmluaXQiLCJtaW5lcnZhLnNoYXBlcy5wb2x5bGluZS5Qb2x5bGluZVVwZGF0ZXIuaW52YWxpZGF0ZUZpbGxSdWxlIiwibWluZXJ2YS5zaGFwZXMucG9seWxpbmUuUG9seWxpbmVVcGRhdGVyLmludmFsaWRhdGVQYXRoIiwibWluZXJ2YS5zaGFwZXMucG9seWdvbiIsIm1pbmVydmEuc2hhcGVzLnBvbHlnb24uUG9seWdvblVwZGF0ZXIiLCJtaW5lcnZhLnNoYXBlcy5wb2x5Z29uLlBvbHlnb25VcGRhdGVyLmNvbnN0cnVjdG9yIiwibWluZXJ2YS5zaGFwZXMucG9seWdvbi5Qb2x5Z29uVXBkYXRlci5pbml0IiwibWluZXJ2YS5zaGFwZXMucmVjdGFuZ2xlIiwibWluZXJ2YS5zaGFwZXMucmVjdGFuZ2xlLlJlY3RhbmdsZVVwZGF0ZXIiLCJtaW5lcnZhLnNoYXBlcy5yZWN0YW5nbGUuUmVjdGFuZ2xlVXBkYXRlci5jb25zdHJ1Y3RvciIsIm1pbmVydmEuc2hhcGVzLnJlY3RhbmdsZS5SZWN0YW5nbGVVcGRhdGVyLmluaXQiLCJtaW5lcnZhLnRleHQubGF5b3V0IiwibWluZXJ2YS50ZXh0LmxheW91dC5DbHVzdGVyIiwibWluZXJ2YS50ZXh0LmxheW91dC5DbHVzdGVyLmNvbnN0cnVjdG9yIiwibWluZXJ2YS50ZXh0LmxheW91dC5DbHVzdGVyLnJlbmRlciIsIm1pbmVydmEudGV4dC5sYXlvdXQuTGluZSIsIm1pbmVydmEudGV4dC5sYXlvdXQuTGluZS5jb25zdHJ1Y3RvciIsIm1pbmVydmEudGV4dC5sYXlvdXQuTGluZS5nZXRMaW5lRnJvbVkiLCJtaW5lcnZhLnRleHQubGF5b3V0LkxpbmUuZWxsaXB0aWZ5IiwibWluZXJ2YS50ZXh0LmxheW91dC5zaG9ydGVuV29yZCIsIm1pbmVydmEudGV4dC5sYXlvdXQuc2hvcnRlbkNoYXIiLCJtaW5lcnZhLnRleHQubGF5b3V0LlJ1biIsIm1pbmVydmEudGV4dC5sYXlvdXQuUnVuLmNvbnN0cnVjdG9yIiwibWluZXJ2YS50ZXh0LmxheW91dC5SdW4uc3BsaXRTZWxlY3Rpb24iLCJtaW5lcnZhLnRleHQubGF5b3V0LlJ1bi5lbGxpcHRpZnkiLCJtaW5lcnZhLnRleHQucnVuIiwibWluZXJ2YS50ZXh0LnJ1bi5kb0xheW91dE5vV3JhcCIsIm1pbmVydmEudGV4dC5ydW4uYWR2YW5jZSIsIm1pbmVydmEudGV4dC5ydW4ubWVhc3VyZVRleHRXaWR0aCIsIm1pbmVydmEudGV4dC5ydW4uZG9MYXlvdXRXcmFwIiwibWluZXJ2YS50ZXh0LnJ1bi5hZHZhbmNlSW5maW5pdGUiLCJtaW5lcnZhLnRleHQucnVuLmFkdmFuY2VGaW5pdGUiLCJtaW5lcnZhLnRleHQucnVuLlJ1bkxheW91dERlZiIsIm1pbmVydmEudGV4dC5ydW4uUnVuTGF5b3V0RGVmLmxheW91dCIsIm1pbmVydmEuY29udHJvbHMuYm9yZGVyLmFycmFuZ2UiLCJtaW5lcnZhLmNvbnRyb2xzLmJvcmRlci5hcnJhbmdlLnByZU92ZXJyaWRlIiwibWluZXJ2YS5jb250cm9scy5ib3JkZXIuYXJyYW5nZS5kb092ZXJyaWRlIiwibWluZXJ2YS5jb250cm9scy5ib3JkZXIuYXJyYW5nZS5Cb3JkZXJBcnJhbmdlUGlwZURlZiIsIm1pbmVydmEuY29udHJvbHMuYm9yZGVyLmFycmFuZ2UuQm9yZGVyQXJyYW5nZVBpcGVEZWYuY29uc3RydWN0b3IiLCJtaW5lcnZhLmNvbnRyb2xzLmJvcmRlci5hcnJhbmdlLkJvcmRlckFycmFuZ2VQaXBlRGVmLmNyZWF0ZVN0YXRlIiwibWluZXJ2YS5jb250cm9scy5ib3JkZXIuaGl0dGVzdCIsIm1pbmVydmEuY29udHJvbHMuYm9yZGVyLmhpdHRlc3QuQm9yZGVySGl0VGVzdFBpcGVEZWYiLCJtaW5lcnZhLmNvbnRyb2xzLmJvcmRlci5oaXR0ZXN0LkJvcmRlckhpdFRlc3RQaXBlRGVmLmNvbnN0cnVjdG9yIiwibWluZXJ2YS5jb250cm9scy5ib3JkZXIuaGl0dGVzdC50YXBpbnMiLCJtaW5lcnZhLmNvbnRyb2xzLmJvcmRlci5oaXR0ZXN0LnRhcGlucy5jYW5IaXRJbnNpZGUiLCJtaW5lcnZhLmNvbnRyb2xzLmJvcmRlci5tZWFzdXJlIiwibWluZXJ2YS5jb250cm9scy5ib3JkZXIubWVhc3VyZS5wcmVPdmVycmlkZSIsIm1pbmVydmEuY29udHJvbHMuYm9yZGVyLm1lYXN1cmUuZG9PdmVycmlkZSIsIm1pbmVydmEuY29udHJvbHMuYm9yZGVyLm1lYXN1cmUucG9zdE92ZXJyaWRlIiwibWluZXJ2YS5jb250cm9scy5ib3JkZXIubWVhc3VyZS5Cb3JkZXJNZWFzdXJlUGlwZURlZiIsIm1pbmVydmEuY29udHJvbHMuYm9yZGVyLm1lYXN1cmUuQm9yZGVyTWVhc3VyZVBpcGVEZWYuY29uc3RydWN0b3IiLCJtaW5lcnZhLmNvbnRyb2xzLmJvcmRlci5tZWFzdXJlLkJvcmRlck1lYXN1cmVQaXBlRGVmLmNyZWF0ZVN0YXRlIiwibWluZXJ2YS5jb250cm9scy5ib3JkZXIucmVuZGVyIiwibWluZXJ2YS5jb250cm9scy5ib3JkZXIucmVuZGVyLkJvcmRlclJlbmRlclBpcGVEZWYiLCJtaW5lcnZhLmNvbnRyb2xzLmJvcmRlci5yZW5kZXIuQm9yZGVyUmVuZGVyUGlwZURlZi5jb25zdHJ1Y3RvciIsIm1pbmVydmEuY29udHJvbHMuYm9yZGVyLnJlbmRlci5Cb3JkZXJSZW5kZXJQaXBlRGVmLmNyZWF0ZVN0YXRlIiwibWluZXJ2YS5jb250cm9scy5ib3JkZXIucmVuZGVyLlNoaW1Cb3JkZXJSZW5kZXJQaXBlRGVmIiwibWluZXJ2YS5jb250cm9scy5ib3JkZXIucmVuZGVyLlNoaW1Cb3JkZXJSZW5kZXJQaXBlRGVmLmNvbnN0cnVjdG9yIiwibWluZXJ2YS5jb250cm9scy5ib3JkZXIucmVuZGVyLlNoaW1Cb3JkZXJSZW5kZXJQaXBlRGVmLmNyZWF0ZVN0YXRlIiwibWluZXJ2YS5jb250cm9scy5wYW5lbC5hcnJhbmdlIiwibWluZXJ2YS5jb250cm9scy5wYW5lbC5hcnJhbmdlLlBhbmVsQXJyYW5nZVBpcGVEZWYiLCJtaW5lcnZhLmNvbnRyb2xzLnBhbmVsLmFycmFuZ2UuUGFuZWxBcnJhbmdlUGlwZURlZi5jb25zdHJ1Y3RvciIsIm1pbmVydmEuY29udHJvbHMuY2FudmFzLmFycmFuZ2UiLCJtaW5lcnZhLmNvbnRyb2xzLmNhbnZhcy5hcnJhbmdlLkNhbnZhc0FycmFuZ2VQaXBlRGVmIiwibWluZXJ2YS5jb250cm9scy5jYW52YXMuYXJyYW5nZS5DYW52YXNBcnJhbmdlUGlwZURlZi5jb25zdHJ1Y3RvciIsIm1pbmVydmEuY29udHJvbHMucGFuZWwubWVhc3VyZSIsIm1pbmVydmEuY29udHJvbHMucGFuZWwubWVhc3VyZS5kb092ZXJyaWRlIiwibWluZXJ2YS5jb250cm9scy5wYW5lbC5tZWFzdXJlLlBhbmVsTWVhc3VyZVBpcGVEZWYiLCJtaW5lcnZhLmNvbnRyb2xzLnBhbmVsLm1lYXN1cmUuUGFuZWxNZWFzdXJlUGlwZURlZi5jb25zdHJ1Y3RvciIsIm1pbmVydmEuY29udHJvbHMuY2FudmFzLm1lYXN1cmUiLCJtaW5lcnZhLmNvbnRyb2xzLmNhbnZhcy5tZWFzdXJlLkNhbnZhc01lYXN1cmVQaXBlRGVmIiwibWluZXJ2YS5jb250cm9scy5jYW52YXMubWVhc3VyZS5DYW52YXNNZWFzdXJlUGlwZURlZi5jb25zdHJ1Y3RvciIsIm1pbmVydmEuY29udHJvbHMuY2FudmFzLnByb2Nlc3Nkb3duIiwibWluZXJ2YS5jb250cm9scy5jYW52YXMucHJvY2Vzc2Rvd24uQ2FudmFzUHJvY2Vzc0Rvd25QaXBlRGVmIiwibWluZXJ2YS5jb250cm9scy5jYW52YXMucHJvY2Vzc2Rvd24uQ2FudmFzUHJvY2Vzc0Rvd25QaXBlRGVmLmNvbnN0cnVjdG9yIiwibWluZXJ2YS5jb250cm9scy5jYW52YXMucHJvY2Vzc2Rvd24udGFwaW5zIiwibWluZXJ2YS5jb250cm9scy5jYW52YXMucHJvY2Vzc2Rvd24udGFwaW5zLnByb2Nlc3NMYXlvdXRDbGlwIiwibWluZXJ2YS5jb250cm9scy5jYW52YXMucHJvY2Vzc3VwIiwibWluZXJ2YS5jb250cm9scy5jYW52YXMucHJvY2Vzc3VwLkNhbnZhc1Byb2Nlc3NVcFBpcGVEZWYiLCJtaW5lcnZhLmNvbnRyb2xzLmNhbnZhcy5wcm9jZXNzdXAuQ2FudmFzUHJvY2Vzc1VwUGlwZURlZi5jb25zdHJ1Y3RvciIsIm1pbmVydmEuY29udHJvbHMuY29udHJvbC5oaXR0ZXN0IiwibWluZXJ2YS5jb250cm9scy5jb250cm9sLmhpdHRlc3QuQ29udHJvbEhpdFRlc3RQaXBlRGVmIiwibWluZXJ2YS5jb250cm9scy5jb250cm9sLmhpdHRlc3QuQ29udHJvbEhpdFRlc3RQaXBlRGVmLmNvbnN0cnVjdG9yIiwibWluZXJ2YS5jb250cm9scy5jb250cm9sLmhpdHRlc3QudGFwaW5zIiwibWluZXJ2YS5jb250cm9scy5jb250cm9sLmhpdHRlc3QudGFwaW5zLnNob3VsZFNraXAiLCJtaW5lcnZhLmNvbnRyb2xzLmNvbnRyb2wuaGl0dGVzdC50YXBpbnMuY2FuSGl0SW5zaWRlIiwibWluZXJ2YS5jb250cm9scy5ncmlkLmFycmFuZ2UiLCJtaW5lcnZhLmNvbnRyb2xzLmdyaWQuYXJyYW5nZS5HcmlkQXJyYW5nZVBpcGVEZWYiLCJtaW5lcnZhLmNvbnRyb2xzLmdyaWQuYXJyYW5nZS5HcmlkQXJyYW5nZVBpcGVEZWYuY29uc3RydWN0b3IiLCJtaW5lcnZhLmNvbnRyb2xzLmdyaWQuYXJyYW5nZS5HcmlkQXJyYW5nZVBpcGVEZWYuY3JlYXRlU3RhdGUiLCJtaW5lcnZhLmNvbnRyb2xzLmdyaWQuaGVscGVycyIsIm1pbmVydmEuY29udHJvbHMuZ3JpZC5oZWxwZXJzLmFsbG9jYXRlRGVzaXJlZFNpemUiLCJtaW5lcnZhLmNvbnRyb2xzLmdyaWQuaGVscGVycy5hc3NpZ25TaXplIiwibWluZXJ2YS5jb250cm9scy5ncmlkLmhlbHBlcnMuZXhwYW5kU3RhckNvbHMiLCJtaW5lcnZhLmNvbnRyb2xzLmdyaWQuaGVscGVycy5leHBhbmRTdGFyUm93cyIsIm1pbmVydmEuY29udHJvbHMuZ3JpZC5tZWFzdXJlIiwibWluZXJ2YS5jb250cm9scy5ncmlkLm1lYXN1cmUuR3JpZENoaWxkUGxhY2VtZW50IiwibWluZXJ2YS5jb250cm9scy5ncmlkLm1lYXN1cmUuR3JpZENoaWxkUGxhY2VtZW50LmNvbnN0cnVjdG9yIiwibWluZXJ2YS5jb250cm9scy5ncmlkLm1lYXN1cmUuR3JpZENoaWxkUGxhY2VtZW50LnJvdyIsIm1pbmVydmEuY29udHJvbHMuZ3JpZC5tZWFzdXJlLkdyaWRDaGlsZFBsYWNlbWVudC5jb2wiLCJtaW5lcnZhLmNvbnRyb2xzLmdyaWQubWVhc3VyZS5PdmVycmlkZVBhc3MiLCJtaW5lcnZhLmNvbnRyb2xzLmdyaWQubWVhc3VyZS5HcmlkQ2hpbGRTaGFwZSIsIm1pbmVydmEuY29udHJvbHMuZ3JpZC5tZWFzdXJlLkdyaWRDaGlsZFNoYXBlLmluaXQiLCJtaW5lcnZhLmNvbnRyb2xzLmdyaWQubWVhc3VyZS5HcmlkQ2hpbGRTaGFwZS5zaG91bGRNZWFzdXJlUGFzcyIsIm1pbmVydmEuY29udHJvbHMuZ3JpZC5tZWFzdXJlLkdyaWRDaGlsZFNoYXBlLnNpemUiLCJtaW5lcnZhLmNvbnRyb2xzLmdyaWQubWVhc3VyZS5HcmlkTWVhc3VyZVBpcGVEZWYiLCJtaW5lcnZhLmNvbnRyb2xzLmdyaWQubWVhc3VyZS5HcmlkTWVhc3VyZVBpcGVEZWYuY29uc3RydWN0b3IiLCJtaW5lcnZhLmNvbnRyb2xzLmdyaWQubWVhc3VyZS5HcmlkTWVhc3VyZVBpcGVEZWYuY3JlYXRlU3RhdGUiLCJtaW5lcnZhLmNvbnRyb2xzLmdyaWQubWVhc3VyZS5HcmlkU2hhcGUiLCJtaW5lcnZhLmNvbnRyb2xzLmdyaWQubWVhc3VyZS5HcmlkU2hhcGUuY29uc3RydWN0b3IiLCJtaW5lcnZhLmNvbnRyb2xzLmdyaWQubWVhc3VyZS5HcmlkU2hhcGUuaW5pdCIsIm1pbmVydmEuY29udHJvbHMucGFuZWwucHJvY2Vzc3VwIiwibWluZXJ2YS5jb250cm9scy5wYW5lbC5wcm9jZXNzdXAuUGFuZWxQcm9jZXNzVXBQaXBlRGVmIiwibWluZXJ2YS5jb250cm9scy5wYW5lbC5wcm9jZXNzdXAuUGFuZWxQcm9jZXNzVXBQaXBlRGVmLmNvbnN0cnVjdG9yIiwibWluZXJ2YS5jb250cm9scy5ncmlkLnByb2Nlc3N1cCIsIm1pbmVydmEuY29udHJvbHMuZ3JpZC5wcm9jZXNzdXAuR3JpZFByb2Nlc3NVcFBpcGVEZWYiLCJtaW5lcnZhLmNvbnRyb2xzLmdyaWQucHJvY2Vzc3VwLkdyaWRQcm9jZXNzVXBQaXBlRGVmLmNvbnN0cnVjdG9yIiwibWluZXJ2YS5jb250cm9scy5wYW5lbC5yZW5kZXIiLCJtaW5lcnZhLmNvbnRyb2xzLnBhbmVsLnJlbmRlci5kb1JlbmRlciIsIm1pbmVydmEuY29udHJvbHMucGFuZWwucmVuZGVyLlBhbmVsUmVuZGVyUGlwZURlZiIsIm1pbmVydmEuY29udHJvbHMucGFuZWwucmVuZGVyLlBhbmVsUmVuZGVyUGlwZURlZi5jb25zdHJ1Y3RvciIsIm1pbmVydmEuY29udHJvbHMuZ3JpZC5yZW5kZXIiLCJtaW5lcnZhLmNvbnRyb2xzLmdyaWQucmVuZGVyLkdyaWRSZW5kZXJQaXBlRGVmIiwibWluZXJ2YS5jb250cm9scy5ncmlkLnJlbmRlci5HcmlkUmVuZGVyUGlwZURlZi5jb25zdHJ1Y3RvciIsIm1pbmVydmEuY29udHJvbHMuZ3JpZC5yZW5kZXIuR3JpZFJlbmRlclBpcGVEZWYuY3JlYXRlU3RhdGUiLCJtaW5lcnZhLmNvbnRyb2xzLmdyaWQucmVuZGVyLnRhcGlucyIsIm1pbmVydmEuY29udHJvbHMuZ3JpZC5yZW5kZXIudGFwaW5zLnJlbmRlckdyaWRMaW5lcyIsIm1pbmVydmEuY29udHJvbHMuaW1hZ2UuYXJyYW5nZSIsIm1pbmVydmEuY29udHJvbHMuaW1hZ2UuYXJyYW5nZS5JbWFnZUFycmFuZ2VQaXBlRGVmIiwibWluZXJ2YS5jb250cm9scy5pbWFnZS5hcnJhbmdlLkltYWdlQXJyYW5nZVBpcGVEZWYuY29uc3RydWN0b3IiLCJtaW5lcnZhLmNvbnRyb2xzLmltYWdlLmFycmFuZ2UuSW1hZ2VBcnJhbmdlUGlwZURlZi5jcmVhdGVTdGF0ZSIsIm1pbmVydmEuY29udHJvbHMuaW1hZ2UuaGl0dGVzdCIsIm1pbmVydmEuY29udHJvbHMuaW1hZ2UuaGl0dGVzdC5JbWFnZUhpdFRlc3RQaXBlRGVmIiwibWluZXJ2YS5jb250cm9scy5pbWFnZS5oaXR0ZXN0LkltYWdlSGl0VGVzdFBpcGVEZWYuY29uc3RydWN0b3IiLCJtaW5lcnZhLmNvbnRyb2xzLmltYWdlLmhpdHRlc3QuSW1hZ2VIaXRUZXN0UGlwZURlZi5wcmVwYXJlIiwibWluZXJ2YS5jb250cm9scy5pbWFnZS5tZWFzdXJlIiwibWluZXJ2YS5jb250cm9scy5pbWFnZS5tZWFzdXJlLkltYWdlTWVhc3VyZVBpcGVEZWYiLCJtaW5lcnZhLmNvbnRyb2xzLmltYWdlLm1lYXN1cmUuSW1hZ2VNZWFzdXJlUGlwZURlZi5jb25zdHJ1Y3RvciIsIm1pbmVydmEuY29udHJvbHMuaW1hZ2UubWVhc3VyZS5JbWFnZU1lYXN1cmVQaXBlRGVmLmNyZWF0ZVN0YXRlIiwibWluZXJ2YS5jb250cm9scy5pbWFnZS5wcm9jZXNzZG93biIsIm1pbmVydmEuY29udHJvbHMuaW1hZ2UucHJvY2Vzc2Rvd24uSW1hZ2VQcm9jZXNzRG93blBpcGVEZWYiLCJtaW5lcnZhLmNvbnRyb2xzLmltYWdlLnByb2Nlc3Nkb3duLkltYWdlUHJvY2Vzc0Rvd25QaXBlRGVmLmNvbnN0cnVjdG9yIiwibWluZXJ2YS5jb250cm9scy5pbWFnZS5wcm9jZXNzZG93bi5JbWFnZVByb2Nlc3NEb3duUGlwZURlZi5jcmVhdGVTdGF0ZSIsIm1pbmVydmEuY29udHJvbHMuaW1hZ2UucHJvY2Vzc2Rvd24uSW1hZ2VQcm9jZXNzRG93blBpcGVEZWYuY3JlYXRlT3V0cHV0IiwibWluZXJ2YS5jb250cm9scy5pbWFnZS5wcm9jZXNzZG93bi5JbWFnZVByb2Nlc3NEb3duUGlwZURlZi5wcmVwYXJlIiwibWluZXJ2YS5jb250cm9scy5pbWFnZS5wcm9jZXNzZG93bi5JbWFnZVByb2Nlc3NEb3duUGlwZURlZi5mbHVzaCIsIm1pbmVydmEuY29udHJvbHMuaW1hZ2UucmVuZGVyIiwibWluZXJ2YS5jb250cm9scy5pbWFnZS5yZW5kZXIuSW1hZ2VSZW5kZXJQaXBlRGVmIiwibWluZXJ2YS5jb250cm9scy5pbWFnZS5yZW5kZXIuSW1hZ2VSZW5kZXJQaXBlRGVmLmNvbnN0cnVjdG9yIiwibWluZXJ2YS5jb250cm9scy5vdmVybGF5LmhpdHRlc3QiLCJtaW5lcnZhLmNvbnRyb2xzLm92ZXJsYXkuaGl0dGVzdC5PdmVybGF5SGl0VGVzdFBpcGVEZWYiLCJtaW5lcnZhLmNvbnRyb2xzLm92ZXJsYXkuaGl0dGVzdC5PdmVybGF5SGl0VGVzdFBpcGVEZWYuY29uc3RydWN0b3IiLCJtaW5lcnZhLmNvbnRyb2xzLm92ZXJsYXkuaGl0dGVzdC50YXBpbnMiLCJtaW5lcnZhLmNvbnRyb2xzLm92ZXJsYXkuaGl0dGVzdC50YXBpbnMuc2hvdWxkU2tpcCIsIm1pbmVydmEuY29udHJvbHMub3ZlcmxheS5wcm9jZXNzdXAiLCJtaW5lcnZhLmNvbnRyb2xzLm92ZXJsYXkucHJvY2Vzc3VwLk92ZXJsYXlQcm9jZXNzVXBQaXBlRGVmIiwibWluZXJ2YS5jb250cm9scy5vdmVybGF5LnByb2Nlc3N1cC5PdmVybGF5UHJvY2Vzc1VwUGlwZURlZi5jb25zdHJ1Y3RvciIsIm1pbmVydmEuY29udHJvbHMucGFuZWwuaGl0dGVzdCIsIm1pbmVydmEuY29udHJvbHMucGFuZWwuaGl0dGVzdC5QYW5lbEhpdFRlc3RQaXBlRGVmIiwibWluZXJ2YS5jb250cm9scy5wYW5lbC5oaXR0ZXN0LlBhbmVsSGl0VGVzdFBpcGVEZWYuY29uc3RydWN0b3IiLCJtaW5lcnZhLmNvbnRyb2xzLnBhbmVsLmhpdHRlc3QudGFwaW5zIiwibWluZXJ2YS5jb250cm9scy5wYW5lbC5oaXR0ZXN0LnRhcGlucy5jYW5IaXRJbnNpZGUiLCJtaW5lcnZhLmNvbnRyb2xzLnBvcHVwLmhpdHRlc3QiLCJtaW5lcnZhLmNvbnRyb2xzLnBvcHVwLmhpdHRlc3QuUG9wdXBIaXRUZXN0UGlwZURlZiIsIm1pbmVydmEuY29udHJvbHMucG9wdXAuaGl0dGVzdC5Qb3B1cEhpdFRlc3RQaXBlRGVmLmNvbnN0cnVjdG9yIiwibWluZXJ2YS5jb250cm9scy5wb3B1cC5oaXR0ZXN0LnRhcGlucyIsIm1pbmVydmEuY29udHJvbHMucG9wdXAuaGl0dGVzdC50YXBpbnMuc2hvdWxkU2tpcCIsIm1pbmVydmEuY29udHJvbHMucG9wdXAucHJvY2Vzc2Rvd24iLCJtaW5lcnZhLmNvbnRyb2xzLnBvcHVwLnByb2Nlc3Nkb3duLlBvcHVwUHJvY2Vzc0Rvd25QaXBlRGVmIiwibWluZXJ2YS5jb250cm9scy5wb3B1cC5wcm9jZXNzZG93bi5Qb3B1cFByb2Nlc3NEb3duUGlwZURlZi5jb25zdHJ1Y3RvciIsIm1pbmVydmEuY29udHJvbHMucG9wdXAucHJvY2Vzc3VwIiwibWluZXJ2YS5jb250cm9scy5wb3B1cC5wcm9jZXNzdXAuUG9wdXBQcm9jZXNzVXBQaXBlRGVmIiwibWluZXJ2YS5jb250cm9scy5wb3B1cC5wcm9jZXNzdXAuUG9wdXBQcm9jZXNzVXBQaXBlRGVmLmNvbnN0cnVjdG9yIiwibWluZXJ2YS5jb250cm9scy5zY3JvbGxjb250ZW50cHJlc2VudGVyLmFycmFuZ2UiLCJtaW5lcnZhLmNvbnRyb2xzLnNjcm9sbGNvbnRlbnRwcmVzZW50ZXIuYXJyYW5nZS5TY3JvbGxDb250ZW50UHJlc2VudGVyQXJyYW5nZVBpcGVEZWYiLCJtaW5lcnZhLmNvbnRyb2xzLnNjcm9sbGNvbnRlbnRwcmVzZW50ZXIuYXJyYW5nZS5TY3JvbGxDb250ZW50UHJlc2VudGVyQXJyYW5nZVBpcGVEZWYuY29uc3RydWN0b3IiLCJtaW5lcnZhLmNvbnRyb2xzLnNjcm9sbGNvbnRlbnRwcmVzZW50ZXIuYXJyYW5nZS5TY3JvbGxDb250ZW50UHJlc2VudGVyQXJyYW5nZVBpcGVEZWYuY3JlYXRlT3V0cHV0IiwibWluZXJ2YS5jb250cm9scy5zY3JvbGxjb250ZW50cHJlc2VudGVyLmFycmFuZ2UuU2Nyb2xsQ29udGVudFByZXNlbnRlckFycmFuZ2VQaXBlRGVmLnByZXBhcmUiLCJtaW5lcnZhLmNvbnRyb2xzLnNjcm9sbGNvbnRlbnRwcmVzZW50ZXIuYXJyYW5nZS5TY3JvbGxDb250ZW50UHJlc2VudGVyQXJyYW5nZVBpcGVEZWYuZmx1c2giLCJtaW5lcnZhLmNvbnRyb2xzLnNjcm9sbGNvbnRlbnRwcmVzZW50ZXIubWVhc3VyZSIsIm1pbmVydmEuY29udHJvbHMuc2Nyb2xsY29udGVudHByZXNlbnRlci5tZWFzdXJlLlNjcm9sbENvbnRlbnRQcmVzZW50ZXJNZWFzdXJlUGlwZURlZiIsIm1pbmVydmEuY29udHJvbHMuc2Nyb2xsY29udGVudHByZXNlbnRlci5tZWFzdXJlLlNjcm9sbENvbnRlbnRQcmVzZW50ZXJNZWFzdXJlUGlwZURlZi5jb25zdHJ1Y3RvciIsIm1pbmVydmEuY29udHJvbHMuc2Nyb2xsY29udGVudHByZXNlbnRlci5tZWFzdXJlLlNjcm9sbENvbnRlbnRQcmVzZW50ZXJNZWFzdXJlUGlwZURlZi5jcmVhdGVTdGF0ZSIsIm1pbmVydmEuY29udHJvbHMuc2Nyb2xsY29udGVudHByZXNlbnRlci5yZW5kZXIiLCJtaW5lcnZhLmNvbnRyb2xzLnNjcm9sbGNvbnRlbnRwcmVzZW50ZXIucmVuZGVyLlNjcm9sbENvbnRlbnRQcmVzZW50ZXJSZW5kZXJQaXBlRGVmIiwibWluZXJ2YS5jb250cm9scy5zY3JvbGxjb250ZW50cHJlc2VudGVyLnJlbmRlci5TY3JvbGxDb250ZW50UHJlc2VudGVyUmVuZGVyUGlwZURlZi5jb25zdHJ1Y3RvciIsIm1pbmVydmEuY29udHJvbHMuc2Nyb2xsY29udGVudHByZXNlbnRlci5yZW5kZXIudGFwaW5zIiwibWluZXJ2YS5jb250cm9scy5zY3JvbGxjb250ZW50cHJlc2VudGVyLnJlbmRlci50YXBpbnMuYXBwbHlJbnRlcm5hbENsaXAiLCJtaW5lcnZhLmNvbnRyb2xzLnN0YWNrcGFuZWwuYXJyYW5nZSIsIm1pbmVydmEuY29udHJvbHMuc3RhY2twYW5lbC5hcnJhbmdlLlN0YWNrUGFuZWxBcnJhbmdlUGlwZURlZiIsIm1pbmVydmEuY29udHJvbHMuc3RhY2twYW5lbC5hcnJhbmdlLlN0YWNrUGFuZWxBcnJhbmdlUGlwZURlZi5jb25zdHJ1Y3RvciIsIm1pbmVydmEuY29udHJvbHMuc3RhY2twYW5lbC5tZWFzdXJlIiwibWluZXJ2YS5jb250cm9scy5zdGFja3BhbmVsLm1lYXN1cmUuU3RhY2tQYW5lbE1lYXN1cmVQaXBlRGVmIiwibWluZXJ2YS5jb250cm9scy5zdGFja3BhbmVsLm1lYXN1cmUuU3RhY2tQYW5lbE1lYXN1cmVQaXBlRGVmLmNvbnN0cnVjdG9yIiwibWluZXJ2YS5jb250cm9scy5zdGFja3BhbmVsLm1lYXN1cmUuU3RhY2tQYW5lbE1lYXN1cmVQaXBlRGVmLmNyZWF0ZVN0YXRlIiwibWluZXJ2YS5jb250cm9scy50ZXh0YmxvY2suYXJyYW5nZSIsIm1pbmVydmEuY29udHJvbHMudGV4dGJsb2NrLmFycmFuZ2UuVGV4dEJsb2NrQXJyYW5nZVBpcGVEZWYiLCJtaW5lcnZhLmNvbnRyb2xzLnRleHRibG9jay5hcnJhbmdlLlRleHRCbG9ja0FycmFuZ2VQaXBlRGVmLmNvbnN0cnVjdG9yIiwibWluZXJ2YS5jb250cm9scy50ZXh0YmxvY2suYXJyYW5nZS50YXBpbnMiLCJtaW5lcnZhLmNvbnRyb2xzLnRleHRibG9jay5hcnJhbmdlLnRhcGlucy5kb092ZXJyaWRlIiwibWluZXJ2YS5jb250cm9scy50ZXh0YmxvY2suaGl0dGVzdCIsIm1pbmVydmEuY29udHJvbHMudGV4dGJsb2NrLmhpdHRlc3QuVGV4dEJsb2NrSGl0VGVzdFBpcGVEZWYiLCJtaW5lcnZhLmNvbnRyb2xzLnRleHRibG9jay5oaXR0ZXN0LlRleHRCbG9ja0hpdFRlc3RQaXBlRGVmLmNvbnN0cnVjdG9yIiwibWluZXJ2YS5jb250cm9scy50ZXh0YmxvY2suaGl0dGVzdC50YXBpbnMiLCJtaW5lcnZhLmNvbnRyb2xzLnRleHRibG9jay5oaXR0ZXN0LnRhcGlucy5jYW5IaXRJbnNpZGUiLCJtaW5lcnZhLmNvbnRyb2xzLnRleHRibG9jay5tZWFzdXJlIiwibWluZXJ2YS5jb250cm9scy50ZXh0YmxvY2subWVhc3VyZS5UZXh0QmxvY2tNZWFzdXJlUGlwZURlZiIsIm1pbmVydmEuY29udHJvbHMudGV4dGJsb2NrLm1lYXN1cmUuVGV4dEJsb2NrTWVhc3VyZVBpcGVEZWYuY29uc3RydWN0b3IiLCJtaW5lcnZhLmNvbnRyb2xzLnRleHRibG9jay5tZWFzdXJlLnRhcGlucyIsIm1pbmVydmEuY29udHJvbHMudGV4dGJsb2NrLm1lYXN1cmUudGFwaW5zLmRvT3ZlcnJpZGUiLCJtaW5lcnZhLmNvbnRyb2xzLnRleHRibG9jay5wcm9jZXNzdXAiLCJtaW5lcnZhLmNvbnRyb2xzLnRleHRibG9jay5wcm9jZXNzdXAuVGV4dEJsb2NrUHJvY2Vzc1VwUGlwZURlZiIsIm1pbmVydmEuY29udHJvbHMudGV4dGJsb2NrLnByb2Nlc3N1cC5UZXh0QmxvY2tQcm9jZXNzVXBQaXBlRGVmLmNvbnN0cnVjdG9yIiwibWluZXJ2YS5jb250cm9scy50ZXh0YmxvY2sucHJvY2Vzc3VwLnRhcGlucyIsIm1pbmVydmEuY29udHJvbHMudGV4dGJsb2NrLnByb2Nlc3N1cC50YXBpbnMuY2FsY0FjdHVhbFNpemUiLCJtaW5lcnZhLmNvbnRyb2xzLnRleHRibG9jay5wcm9jZXNzdXAudGFwaW5zLmNhbGNFeHRlbnRzIiwibWluZXJ2YS5jb250cm9scy50ZXh0YmxvY2sucmVuZGVyIiwibWluZXJ2YS5jb250cm9scy50ZXh0YmxvY2sucmVuZGVyLlRleHRCbG9ja1JlbmRlclBpcGVEZWYiLCJtaW5lcnZhLmNvbnRyb2xzLnRleHRibG9jay5yZW5kZXIuVGV4dEJsb2NrUmVuZGVyUGlwZURlZi5jb25zdHJ1Y3RvciIsIm1pbmVydmEuY29udHJvbHMudGV4dGJsb2NrLnJlbmRlci50YXBpbnMiLCJtaW5lcnZhLmNvbnRyb2xzLnRleHRibG9jay5yZW5kZXIudGFwaW5zLmRvUmVuZGVyIiwibWluZXJ2YS5jb250cm9scy50ZXh0Ym94dmlldy5hcnJhbmdlIiwibWluZXJ2YS5jb250cm9scy50ZXh0Ym94dmlldy5hcnJhbmdlLlRleHRCb3hWaWV3QXJyYW5nZVBpcGVEZWYiLCJtaW5lcnZhLmNvbnRyb2xzLnRleHRib3h2aWV3LmFycmFuZ2UuVGV4dEJveFZpZXdBcnJhbmdlUGlwZURlZi5jb25zdHJ1Y3RvciIsIm1pbmVydmEuY29udHJvbHMudGV4dGJveHZpZXcuYXJyYW5nZS50YXBpbnMiLCJtaW5lcnZhLmNvbnRyb2xzLnRleHRib3h2aWV3LmFycmFuZ2UudGFwaW5zLmRvT3ZlcnJpZGUiLCJtaW5lcnZhLmNvbnRyb2xzLnRleHRib3h2aWV3LmhpdHRlc3QiLCJtaW5lcnZhLmNvbnRyb2xzLnRleHRib3h2aWV3LmhpdHRlc3QuVGV4dEJveFZpZXdIaXRUZXN0UGlwZURlZiIsIm1pbmVydmEuY29udHJvbHMudGV4dGJveHZpZXcuaGl0dGVzdC5UZXh0Qm94Vmlld0hpdFRlc3RQaXBlRGVmLmNvbnN0cnVjdG9yIiwibWluZXJ2YS5jb250cm9scy50ZXh0Ym94dmlldy5oaXR0ZXN0LnRhcGlucyIsIm1pbmVydmEuY29udHJvbHMudGV4dGJveHZpZXcuaGl0dGVzdC50YXBpbnMuY2FuSGl0SW5zaWRlIiwibWluZXJ2YS5jb250cm9scy50ZXh0Ym94dmlldy5tZWFzdXJlIiwibWluZXJ2YS5jb250cm9scy50ZXh0Ym94dmlldy5tZWFzdXJlLlRleHRCb3hWaWV3TWVhc3VyZVBpcGVEZWYiLCJtaW5lcnZhLmNvbnRyb2xzLnRleHRib3h2aWV3Lm1lYXN1cmUuVGV4dEJveFZpZXdNZWFzdXJlUGlwZURlZi5jb25zdHJ1Y3RvciIsIm1pbmVydmEuY29udHJvbHMudGV4dGJveHZpZXcubWVhc3VyZS50YXBpbnMiLCJtaW5lcnZhLmNvbnRyb2xzLnRleHRib3h2aWV3Lm1lYXN1cmUudGFwaW5zLmRvT3ZlcnJpZGUiLCJtaW5lcnZhLmNvbnRyb2xzLnRleHRib3h2aWV3LnByb2Nlc3N1cCIsIm1pbmVydmEuY29udHJvbHMudGV4dGJveHZpZXcucHJvY2Vzc3VwLlRleHRCb3hWaWV3UHJvY2Vzc1VwUGlwZURlZiIsIm1pbmVydmEuY29udHJvbHMudGV4dGJveHZpZXcucHJvY2Vzc3VwLlRleHRCb3hWaWV3UHJvY2Vzc1VwUGlwZURlZi5jb25zdHJ1Y3RvciIsIm1pbmVydmEuY29udHJvbHMudGV4dGJveHZpZXcucHJvY2Vzc3VwLnRhcGlucyIsIm1pbmVydmEuY29udHJvbHMudGV4dGJveHZpZXcucHJvY2Vzc3VwLnRhcGlucy5jYWxjQWN0dWFsU2l6ZSIsIm1pbmVydmEuY29udHJvbHMudGV4dGJveHZpZXcucHJvY2Vzc3VwLnRhcGlucy5jYWxjRXh0ZW50cyIsIm1pbmVydmEuY29udHJvbHMudGV4dGJveHZpZXcucmVuZGVyIiwibWluZXJ2YS5jb250cm9scy50ZXh0Ym94dmlldy5yZW5kZXIuVGV4dEJveFZpZXdSZW5kZXJQaXBlRGVmIiwibWluZXJ2YS5jb250cm9scy50ZXh0Ym94dmlldy5yZW5kZXIuVGV4dEJveFZpZXdSZW5kZXJQaXBlRGVmLmNvbnN0cnVjdG9yIiwibWluZXJ2YS5jb250cm9scy50ZXh0Ym94dmlldy5yZW5kZXIuVGV4dEJveFZpZXdSZW5kZXJQaXBlRGVmLmNyZWF0ZU91dHB1dCIsIm1pbmVydmEuY29udHJvbHMudGV4dGJveHZpZXcucmVuZGVyLlRleHRCb3hWaWV3UmVuZGVyUGlwZURlZi5wcmVwYXJlIiwibWluZXJ2YS5jb250cm9scy50ZXh0Ym94dmlldy5yZW5kZXIuVGV4dEJveFZpZXdSZW5kZXJQaXBlRGVmLmZsdXNoIiwibWluZXJ2YS5jb250cm9scy50ZXh0Ym94dmlldy5yZW5kZXIudGFwaW5zIiwibWluZXJ2YS5jb250cm9scy50ZXh0Ym94dmlldy5yZW5kZXIudGFwaW5zLmRvUmVuZGVyIiwibWluZXJ2YS5jb250cm9scy50ZXh0Ym94dmlldy5yZW5kZXIudGFwaW5zLmNhbGNDYXJldFJlZ2lvbiIsIm1pbmVydmEuY29udHJvbHMudGV4dGJveHZpZXcucmVuZGVyLnRhcGlucy5yZW5kZXJDYXJldCIsIm1pbmVydmEuY29udHJvbHMudXNlcmNvbnRyb2wuYXJyYW5nZSIsIm1pbmVydmEuY29udHJvbHMudXNlcmNvbnRyb2wuYXJyYW5nZS5Vc2VyQ29udHJvbEFycmFuZ2VQaXBlRGVmIiwibWluZXJ2YS5jb250cm9scy51c2VyY29udHJvbC5hcnJhbmdlLlVzZXJDb250cm9sQXJyYW5nZVBpcGVEZWYuY29uc3RydWN0b3IiLCJtaW5lcnZhLmNvbnRyb2xzLnVzZXJjb250cm9sLmFycmFuZ2UuVXNlckNvbnRyb2xBcnJhbmdlUGlwZURlZi5jcmVhdGVTdGF0ZSIsIm1pbmVydmEuY29udHJvbHMudXNlcmNvbnRyb2wubWVhc3VyZSIsIm1pbmVydmEuY29udHJvbHMudXNlcmNvbnRyb2wubWVhc3VyZS5Vc2VyQ29udHJvbE1lYXN1cmVQaXBlRGVmIiwibWluZXJ2YS5jb250cm9scy51c2VyY29udHJvbC5tZWFzdXJlLlVzZXJDb250cm9sTWVhc3VyZVBpcGVEZWYuY29uc3RydWN0b3IiLCJtaW5lcnZhLmNvbnRyb2xzLnVzZXJjb250cm9sLm1lYXN1cmUuVXNlckNvbnRyb2xNZWFzdXJlUGlwZURlZi5jcmVhdGVTdGF0ZSIsIm1pbmVydmEuY29udHJvbHMudXNlcmNvbnRyb2wucHJvY2Vzc2Rvd24iLCJtaW5lcnZhLmNvbnRyb2xzLnVzZXJjb250cm9sLnByb2Nlc3Nkb3duLlVzZXJDb250cm9sUHJvY2Vzc0Rvd25QaXBlRGVmIiwibWluZXJ2YS5jb250cm9scy51c2VyY29udHJvbC5wcm9jZXNzZG93bi5Vc2VyQ29udHJvbFByb2Nlc3NEb3duUGlwZURlZi5jb25zdHJ1Y3RvciIsIm1pbmVydmEuY29udHJvbHMudXNlcmNvbnRyb2wucHJvY2Vzc2Rvd24udGFwaW5zIiwibWluZXJ2YS5jb250cm9scy51c2VyY29udHJvbC5wcm9jZXNzZG93bi50YXBpbnMucHJvY2Vzc0xheW91dENsaXAiLCJtaW5lcnZhLmNvbnRyb2xzLnZpcnR1YWxpemluZ3N0YWNrcGFuZWwuYXJyYW5nZSIsIm1pbmVydmEuY29udHJvbHMudmlydHVhbGl6aW5nc3RhY2twYW5lbC5hcnJhbmdlLlZpcnR1YWxpemluZ1N0YWNrUGFuZWxBcnJhbmdlUGlwZURlZiIsIm1pbmVydmEuY29udHJvbHMudmlydHVhbGl6aW5nc3RhY2twYW5lbC5hcnJhbmdlLlZpcnR1YWxpemluZ1N0YWNrUGFuZWxBcnJhbmdlUGlwZURlZi5jb25zdHJ1Y3RvciIsIm1pbmVydmEuY29udHJvbHMudmlydHVhbGl6aW5nc3RhY2twYW5lbC5tZWFzdXJlIiwibWluZXJ2YS5jb250cm9scy52aXJ0dWFsaXppbmdzdGFja3BhbmVsLm1lYXN1cmUuVmlydHVhbGl6aW5nU3RhY2tQYW5lbE1lYXN1cmVQaXBlRGVmIiwibWluZXJ2YS5jb250cm9scy52aXJ0dWFsaXppbmdzdGFja3BhbmVsLm1lYXN1cmUuVmlydHVhbGl6aW5nU3RhY2tQYW5lbE1lYXN1cmVQaXBlRGVmLmNvbnN0cnVjdG9yIiwibWluZXJ2YS5jb250cm9scy52aXJ0dWFsaXppbmdzdGFja3BhbmVsLm1lYXN1cmUuVmlydHVhbGl6aW5nU3RhY2tQYW5lbE1lYXN1cmVQaXBlRGVmLmNyZWF0ZVN0YXRlIiwibWluZXJ2YS5jb3JlLmFycmFuZ2UudGFwaW5zIiwiZnIiLCJzdGF0ZSIsImZpbmFsUmVjdCIsImlucHV0IiwidXNlTGF5b3V0Um91bmRpbmciLCJyb3VuZCIsIlJlY3QiLCJjb3B5VG8iLCJsYyIsIm91dHB1dCIsImxheW91dENsaXAiLCJ2byIsInZpc3VhbE9mZnNldCIsInRlc3RSZWN0IiwiYXMiLCJhcnJhbmdlZFNpemUiLCJTaXplIiwiaXNUb3AiLCJpc0NvbnRhaW5lZEluIiwiaXNFcXVhbCIsImNvbnN0cmFpbmVkIiwiZndDbGlwIiwiTnVtYmVyIiwiUE9TSVRJVkVfSU5GSU5JVFkiLCJjb3JlIiwiY29lcmNlU2l6ZSIsImludGVyc2VjdGlvbiIsImRpcnR5RmxhZ3MiLCJEaXJ0eUZsYWdzIiwiTGF5b3V0Q2xpcCIsImxheW91dFhmb3JtIiwiY3JlYXRlVHJhbnNsYXRlIiwiZmxpcEhvcml6b250YWwiLCJlcXVhbCIsIkxvY2FsVHJhbnNmb3JtIiwicmVuZGVyU2l6ZSIsImxhc3RSZW5kZXJTaXplIiwidWlGbGFncyIsIlVJRmxhZ3MiLCJTaXplSGludCIsImxheW91dFNsb3QiLCJUaGlja25lc3MiLCJzaHJpbmtSZWN0IiwibWFyZ2luIiwic3RyZXRjaGVkIiwiaG9yaXpvbnRhbEFsaWdubWVudCIsIkhvcml6b250YWxBbGlnbm1lbnQiLCJMZWZ0IiwiUmlnaHQiLCJDZW50ZXIiLCJ2ZXJ0aWNhbEFsaWdubWVudCIsIlZlcnRpY2FsQWxpZ25tZW50IiwiVG9wIiwiQm90dG9tIiwiQXJyYW5nZSIsIlN0cmV0Y2giLCJmcmFtZXdvcmsiLCJjaGlsZFJlY3QiLCJmaW5hbFNpemUiLCJ3YWxrZXIiLCJjaGlsZCIsImFycmFuZ2UiLCJCb3VuZHMiLCJmcyIsImhkIiwiaGlkZGVuRGVzaXJlIiwiaXNGaW5pdGUiLCJpc05hTiIsImxheW91dEVycm9yIiwidmlzaWJpbGl0eSIsIlZpc2liaWxpdHkiLCJWaXNpYmxlIiwibWluZXJ2YS5jb3JlLmRyYWZ0LnRhcGlucyIsImRhdGEiLCJmbGFnIiwiQXJyYW5nZUhpbnQiLCJhcnJhbmdlTGlzdCIsInVwZGF0ZXIiLCJkb0FycmFuZ2UiLCJOb25lIiwiYXNzZXRzIiwiTWVhc3VyZUhpbnQiLCJVcGRhdGVyIiwiJCRwcm9wYWdhdGVVaUZsYWdzVXAiLCJzaXppbmdMaXN0IiwibWVhc3VyZUxpc3QiLCJkb01lYXN1cmUiLCJzaXppbmdVcGRhdGVzIiwidXBkYXRlIiwicG9wIiwib25TaXplQ2hhbmdlZCIsIm9sZFNpemUiLCJuZXdTaXplIiwid2Fsa0RlZXAiLCJwdXNoIiwic2tpcEJyYW5jaCIsInByZXZpb3VzQ29uc3RyYWludCIsImlzQ29udGFpbmVyIiwiaXNVbmRlZiIsInN1cmZhY2VTaXplIiwiTWVhc3VyZSIsInNpemluZyIsIm1pbmVydmEuY29yZS5oaXR0ZXN0LnRhcGlucyIsIm1pbmVydmEuY29yZS5oaXR0ZXN0LnRhcGlucy5jYW5IaXQiLCJtaW5lcnZhLmNvcmUuaGl0dGVzdC50YXBpbnMuY2FuSGl0SW5zaWRlIiwibWluZXJ2YS5jb3JlLmhpdHRlc3QudGFwaW5zLmNvbXBsZXRlQ3R4IiwibWluZXJ2YS5jb3JlLmhpdHRlc3QudGFwaW5zLmluc2lkZUNoaWxkcmVuIiwibWluZXJ2YS5jb3JlLmhpdHRlc3QudGFwaW5zLmluc2lkZUNsaXAiLCJtaW5lcnZhLmNvcmUuaGl0dGVzdC50YXBpbnMuaW5zaWRlTGF5b3V0Q2xpcCIsIm1pbmVydmEuY29yZS5oaXR0ZXN0LnRhcGlucy5pbnNpZGVPYmplY3QiLCJtaW5lcnZhLmNvcmUuaGl0dGVzdC50YXBpbnMucHJlcGFyZUN0eCIsIm1pbmVydmEuY29yZS5tZWFzdXJlLnRhcGlucyIsImFwcGx5VGVtcGxhdGUiLCJwYyIsImF2YWlsYWJsZVNpemUiLCJkZXNpcmVkU2l6ZSIsImRzIiwibWVhc3VyZSIsImdyb3dTaXplIiwic2hyaW5rU2l6ZSIsIm1pbmVydmEuY29yZS5wcm9jZXNzZG93bi50YXBpbnMiLCJUcmFuc2Zvcm0iLCJheCIsImFic29sdXRlWGZvcm0iLCJyZW5kZXJYZm9ybSIsInZwaW5wdXQiLCJhcHBseSIsImxvY2FsWGZvcm0iLCJjYXJyaWVyWGZvcm0iLCJ4byIsInhmb3JtT3JpZ2luIiwidXNlcnhvIiwicmVuZGVyVHJhbnNmb3JtT3JpZ2luIiwiYWN0dWFsV2lkdGgiLCJhY3R1YWxIZWlnaHQiLCJIaXRUZXN0VmlzaWJpbGl0eSIsInRvdGFsSXNIaXRUZXN0VmlzaWJsZSIsImlzSGl0VGVzdFZpc2libGUiLCJzdWJ0cmVlRG93bkRpcnR5IiwiY2xjIiwiY29tcG9zaXRlTGF5b3V0Q2xpcCIsImlzRW1wdHkiLCJsb2NhbCIsImlkZW50aXR5IiwicmVuZGVyIiwicmVuZGVyVHJhbnNmb3JtIiwib3JpZ2luIiwiZ2V0UmF3IiwiUmVuZGVyVmlzaWJpbGl0eSIsInRvdGFsT3BhY2l0eSIsIm9wYWNpdHkiLCJ0b3RhbElzUmVuZGVyVmlzaWJsZSIsIk5ld0JvdW5kcyIsIm5ld0Rvd25EaXJ0eSIsIlByb3BhZ2F0ZURvd24iLCIkJGFkZERvd25EaXJ0eSIsIm1pbmVydmEuY29yZS5wcm9jZXNzdXAudGFwaW5zIiwiYWN0dWFsIiwiYWN0dWFsU2l6ZSIsImV4dGVudHMiLCJld2MiLCJleHRlbnRzV2l0aENoaWxkcmVuIiwidW5pb24iLCJnbG9iYWxCb3VuZHNXaXRoQ2hpbGRyZW4iLCJpbnRlcnNlY3RCb3VuZHNXaXRoQ2xpcFBhdGgiLCJlZmZlY3RQYWRkaW5nIiwiY2xpcCIsInN1cmZhY2VCb3VuZHNXaXRoQ2hpbGRyZW4iLCJoYXNOZXdCb3VuZHMiLCJmb3JjZUludmFsaWRhdGUiLCJ2aXN1YWxPd25lciIsInVwZGF0ZUJvdW5kcyIsImludmFsaWRhdGUiLCJJbnZhbGlkYXRlIiwiaGFzSW52YWxpZGF0ZSIsImRpcnR5IiwiZGlydHlSZWdpb24iLCJtaW5lcnZhLmNvcmUucmVuZGVyLnRhcGlucyIsImNsaXBHZW9tZXRyeSIsImVmZmVjdCIsIlBvc3RSZW5kZXIiLCJwcmVhcHBseSIsInJhdyIsImdsb2JhbEFscGhhIiwiUHJlUmVuZGVyIiwiV2Fsa0RpcmVjdGlvbiIsIlpGb3J3YXJkIiwicmVuZGVyUmVnaW9uIiwicm91bmRPdXQiLCJyZWdpb24iLCJtaW5lcnZhLmNvcmUuc2l6aW5nLnRhcGlucyIsInVzZVJlbmRlciIsIm1pbmVydmEuc2hhcGVzLmVsbGlwc2UuaGVscGVycyIsIm1pbmVydmEuc2hhcGVzLmVsbGlwc2UuaGVscGVycy5kcmF3IiwibWluZXJ2YS5zaGFwZXMuc2hhcGUuaGl0dGVzdCIsIm1pbmVydmEuc2hhcGVzLnNoYXBlLmhpdHRlc3QuU2hhcGVIaXRUZXN0UGlwZURlZiIsIm1pbmVydmEuc2hhcGVzLnNoYXBlLmhpdHRlc3QuU2hhcGVIaXRUZXN0UGlwZURlZi5jb25zdHJ1Y3RvciIsIm1pbmVydmEuc2hhcGVzLmVsbGlwc2UuaGl0dGVzdCIsIm1pbmVydmEuc2hhcGVzLmVsbGlwc2UuaGl0dGVzdC5FbGxpcHNlSGl0VGVzdFBpcGVEZWYiLCJtaW5lcnZhLnNoYXBlcy5lbGxpcHNlLmhpdHRlc3QuRWxsaXBzZUhpdFRlc3RQaXBlRGVmLmNvbnN0cnVjdG9yIiwibWluZXJ2YS5zaGFwZXMuZWxsaXBzZS5oaXR0ZXN0LnRhcGlucyIsIm1pbmVydmEuc2hhcGVzLmVsbGlwc2UuaGl0dGVzdC50YXBpbnMuZHJhd1NoYXBlIiwibWluZXJ2YS5zaGFwZXMuc2hhcGUubWVhc3VyZSIsIm1pbmVydmEuc2hhcGVzLnNoYXBlLm1lYXN1cmUuU2hhcGVNZWFzdXJlUGlwZURlZiIsIm1pbmVydmEuc2hhcGVzLnNoYXBlLm1lYXN1cmUuU2hhcGVNZWFzdXJlUGlwZURlZi5jb25zdHJ1Y3RvciIsIm1pbmVydmEuc2hhcGVzLnNoYXBlLm1lYXN1cmUuU2hhcGVNZWFzdXJlUGlwZURlZi5jcmVhdGVPdXRwdXQiLCJtaW5lcnZhLnNoYXBlcy5zaGFwZS5tZWFzdXJlLlNoYXBlTWVhc3VyZVBpcGVEZWYucHJlcGFyZSIsIm1pbmVydmEuc2hhcGVzLnNoYXBlLm1lYXN1cmUuU2hhcGVNZWFzdXJlUGlwZURlZi5mbHVzaCIsIm1pbmVydmEuc2hhcGVzLmVsbGlwc2UubWVhc3VyZSIsIm1pbmVydmEuc2hhcGVzLmVsbGlwc2UubWVhc3VyZS5FbGxpcHNlTWVhc3VyZVBpcGVEZWYiLCJtaW5lcnZhLnNoYXBlcy5lbGxpcHNlLm1lYXN1cmUuRWxsaXBzZU1lYXN1cmVQaXBlRGVmLmNvbnN0cnVjdG9yIiwibWluZXJ2YS5zaGFwZXMuZWxsaXBzZS5tZWFzdXJlLnRhcGlucyIsIm1pbmVydmEuc2hhcGVzLmVsbGlwc2UubWVhc3VyZS50YXBpbnMuc2hyaW5rQXZhaWxhYmxlIiwibWluZXJ2YS5zaGFwZXMuc2hhcGUucmVuZGVyIiwibWluZXJ2YS5zaGFwZXMuc2hhcGUucmVuZGVyLlNoYXBlUmVuZGVyUGlwZURlZiIsIm1pbmVydmEuc2hhcGVzLnNoYXBlLnJlbmRlci5TaGFwZVJlbmRlclBpcGVEZWYuY29uc3RydWN0b3IiLCJtaW5lcnZhLnNoYXBlcy5zaGFwZS5yZW5kZXIuU2hhcGVSZW5kZXJQaXBlRGVmLmNyZWF0ZVN0YXRlIiwibWluZXJ2YS5zaGFwZXMuZWxsaXBzZS5yZW5kZXIiLCJtaW5lcnZhLnNoYXBlcy5lbGxpcHNlLnJlbmRlci5FbGxpcHNlUmVuZGVyUGlwZURlZiIsIm1pbmVydmEuc2hhcGVzLmVsbGlwc2UucmVuZGVyLkVsbGlwc2VSZW5kZXJQaXBlRGVmLmNvbnN0cnVjdG9yIiwibWluZXJ2YS5zaGFwZXMuZWxsaXBzZS5yZW5kZXIudGFwaW5zIiwibWluZXJ2YS5zaGFwZXMuZWxsaXBzZS5yZW5kZXIudGFwaW5zLmRvUmVuZGVyIiwibWluZXJ2YS5zaGFwZXMucGF0aC5tZWFzdXJlIiwibWluZXJ2YS5zaGFwZXMucGF0aC5tZWFzdXJlLlBhdGhNZWFzdXJlUGlwZURlZiIsIm1pbmVydmEuc2hhcGVzLnBhdGgubWVhc3VyZS5QYXRoTWVhc3VyZVBpcGVEZWYuY29uc3RydWN0b3IiLCJtaW5lcnZhLnNoYXBlcy5wYXRoLm1lYXN1cmUudGFwaW5zIiwibWluZXJ2YS5zaGFwZXMucGF0aC5tZWFzdXJlLnRhcGlucy5idWlsZFBhdGgiLCJtaW5lcnZhLnNoYXBlcy5wYXRoLm1lYXN1cmUudGFwaW5zLmNhbGNOYXR1cmFsQm91bmRzIiwibWluZXJ2YS5zaGFwZXMubGluZS5tZWFzdXJlIiwibWluZXJ2YS5zaGFwZXMubGluZS5tZWFzdXJlLkxpbmVNZWFzdXJlUGlwZURlZiIsIm1pbmVydmEuc2hhcGVzLmxpbmUubWVhc3VyZS5MaW5lTWVhc3VyZVBpcGVEZWYuY29uc3RydWN0b3IiLCJtaW5lcnZhLnNoYXBlcy5saW5lLm1lYXN1cmUudGFwaW5zIiwibWluZXJ2YS5zaGFwZXMubGluZS5tZWFzdXJlLnRhcGlucy5idWlsZFBhdGgiLCJtaW5lcnZhLnNoYXBlcy5wYXRoLmhpdHRlc3QiLCJtaW5lcnZhLnNoYXBlcy5wYXRoLmhpdHRlc3QuUGF0aEhpdFRlc3RQaXBlRGVmIiwibWluZXJ2YS5zaGFwZXMucGF0aC5oaXR0ZXN0LlBhdGhIaXRUZXN0UGlwZURlZi5jb25zdHJ1Y3RvciIsIm1pbmVydmEuc2hhcGVzLnBhdGguaGl0dGVzdC50YXBpbnMiLCJtaW5lcnZhLnNoYXBlcy5wYXRoLmhpdHRlc3QudGFwaW5zLmRyYXdTaGFwZSIsIm1pbmVydmEuc2hhcGVzLnNoYXBlLnByb2Nlc3N1cCIsIm1pbmVydmEuc2hhcGVzLnNoYXBlLnByb2Nlc3N1cC5TaGFwZVByb2Nlc3NVcFBpcGVEZWYiLCJtaW5lcnZhLnNoYXBlcy5zaGFwZS5wcm9jZXNzdXAuU2hhcGVQcm9jZXNzVXBQaXBlRGVmLmNvbnN0cnVjdG9yIiwibWluZXJ2YS5zaGFwZXMuc2hhcGUucHJvY2Vzc3VwLlNoYXBlUHJvY2Vzc1VwUGlwZURlZi5jcmVhdGVPdXRwdXQiLCJtaW5lcnZhLnNoYXBlcy5zaGFwZS5wcm9jZXNzdXAuU2hhcGVQcm9jZXNzVXBQaXBlRGVmLnByZXBhcmUiLCJtaW5lcnZhLnNoYXBlcy5zaGFwZS5wcm9jZXNzdXAuU2hhcGVQcm9jZXNzVXBQaXBlRGVmLmZsdXNoIiwibWluZXJ2YS5zaGFwZXMucGF0aC5wcm9jZXNzdXAiLCJtaW5lcnZhLnNoYXBlcy5wYXRoLnByb2Nlc3N1cC5QYXRoUHJvY2Vzc1VwUGlwZURlZiIsIm1pbmVydmEuc2hhcGVzLnBhdGgucHJvY2Vzc3VwLlBhdGhQcm9jZXNzVXBQaXBlRGVmLmNvbnN0cnVjdG9yIiwibWluZXJ2YS5zaGFwZXMucGF0aC5wcm9jZXNzdXAuUGF0aFByb2Nlc3NVcFBpcGVEZWYuY3JlYXRlT3V0cHV0IiwibWluZXJ2YS5zaGFwZXMucGF0aC5wcm9jZXNzdXAuUGF0aFByb2Nlc3NVcFBpcGVEZWYucHJlcGFyZSIsIm1pbmVydmEuc2hhcGVzLnBhdGgucHJvY2Vzc3VwLlBhdGhQcm9jZXNzVXBQaXBlRGVmLmZsdXNoIiwibWluZXJ2YS5zaGFwZXMucGF0aC5yZW5kZXIiLCJtaW5lcnZhLnNoYXBlcy5wYXRoLnJlbmRlci5QYXRoUmVuZGVyUGlwZURlZiIsIm1pbmVydmEuc2hhcGVzLnBhdGgucmVuZGVyLlBhdGhSZW5kZXJQaXBlRGVmLmNvbnN0cnVjdG9yIiwibWluZXJ2YS5zaGFwZXMucG9seWxpbmUubWVhc3VyZSIsIm1pbmVydmEuc2hhcGVzLnBvbHlsaW5lLm1lYXN1cmUuUG9seWxpbmVNZWFzdXJlUGlwZURlZiIsIm1pbmVydmEuc2hhcGVzLnBvbHlsaW5lLm1lYXN1cmUuUG9seWxpbmVNZWFzdXJlUGlwZURlZi5jb25zdHJ1Y3RvciIsIm1pbmVydmEuc2hhcGVzLnBvbHlsaW5lLm1lYXN1cmUudGFwaW5zIiwibWluZXJ2YS5zaGFwZXMucG9seWxpbmUubWVhc3VyZS50YXBpbnMuYnVpbGRQYXRoIiwibWluZXJ2YS5zaGFwZXMucG9seWxpbmUubWVhc3VyZS50YXBpbnMuZXh0ZW5kTGluZSIsIm1pbmVydmEuc2hhcGVzLnJlY3RhbmdsZS5oZWxwZXJzIiwibWluZXJ2YS5zaGFwZXMucmVjdGFuZ2xlLmhlbHBlcnMuZHJhdyIsIm1pbmVydmEuc2hhcGVzLnJlY3RhbmdsZS5oaXR0ZXN0IiwibWluZXJ2YS5zaGFwZXMucmVjdGFuZ2xlLmhpdHRlc3QuUmVjdGFuZ2xlSGl0VGVzdFBpcGVEZWYiLCJtaW5lcnZhLnNoYXBlcy5yZWN0YW5nbGUuaGl0dGVzdC5SZWN0YW5nbGVIaXRUZXN0UGlwZURlZi5jb25zdHJ1Y3RvciIsIm1pbmVydmEuc2hhcGVzLnJlY3RhbmdsZS5oaXR0ZXN0LnRhcGlucyIsIm1pbmVydmEuc2hhcGVzLnJlY3RhbmdsZS5oaXR0ZXN0LnRhcGlucy5kcmF3U2hhcGUiLCJtaW5lcnZhLnNoYXBlcy5yZWN0YW5nbGUubWVhc3VyZSIsIm1pbmVydmEuc2hhcGVzLnJlY3RhbmdsZS5tZWFzdXJlLlJlY3RhbmdsZU1lYXN1cmVQaXBlRGVmIiwibWluZXJ2YS5zaGFwZXMucmVjdGFuZ2xlLm1lYXN1cmUuUmVjdGFuZ2xlTWVhc3VyZVBpcGVEZWYuY29uc3RydWN0b3IiLCJtaW5lcnZhLnNoYXBlcy5yZWN0YW5nbGUubWVhc3VyZS50YXBpbnMiLCJtaW5lcnZhLnNoYXBlcy5yZWN0YW5nbGUubWVhc3VyZS50YXBpbnMuc2hyaW5rQXZhaWxhYmxlIiwibWluZXJ2YS5zaGFwZXMucmVjdGFuZ2xlLnJlbmRlciIsIm1pbmVydmEuc2hhcGVzLnJlY3RhbmdsZS5yZW5kZXIuUmVjdGFuZ2xlUmVuZGVyUGlwZURlZiIsIm1pbmVydmEuc2hhcGVzLnJlY3RhbmdsZS5yZW5kZXIuUmVjdGFuZ2xlUmVuZGVyUGlwZURlZi5jb25zdHJ1Y3RvciIsIm1pbmVydmEuc2hhcGVzLnJlY3RhbmdsZS5yZW5kZXIudGFwaW5zIiwibWluZXJ2YS5zaGFwZXMucmVjdGFuZ2xlLnJlbmRlci50YXBpbnMuZG9SZW5kZXIiLCJtaW5lcnZhLnNoYXBlcy5zaGFwZS5hcnJhbmdlIiwibWluZXJ2YS5zaGFwZXMuc2hhcGUuYXJyYW5nZS5TaGFwZUFycmFuZ2VQaXBlRGVmIiwibWluZXJ2YS5zaGFwZXMuc2hhcGUuYXJyYW5nZS5TaGFwZUFycmFuZ2VQaXBlRGVmLmNvbnN0cnVjdG9yIiwibWluZXJ2YS5jb250cm9scy5ib3JkZXIucmVuZGVyLmhlbHBlcnMiLCJtaW5lcnZhLmNvbnRyb2xzLmJvcmRlci5yZW5kZXIuaGVscGVycy5kcmF3Qm9yZGVyUmVjdCIsIm1pbmVydmEuY29udHJvbHMuYm9yZGVyLnJlbmRlci50YXBpbnMiLCJtaW5lcnZhLmNvbnRyb2xzLmJvcmRlci5yZW5kZXIudGFwaW5zLmNhbGNJbm5lck91dGVyIiwibWluZXJ2YS5jb250cm9scy5ib3JkZXIucmVuZGVyLnRhcGlucy5jYWxjU2hvdWxkUmVuZGVyIiwibWluZXJ2YS5jb250cm9scy5ib3JkZXIucmVuZGVyLnRhcGlucy5kb1JlbmRlciIsIm1pbmVydmEuY29udHJvbHMuY2FudmFzLmFycmFuZ2UudGFwaW5zIiwibWluZXJ2YS5jb250cm9scy5jYW52YXMuYXJyYW5nZS50YXBpbnMuYnVpbGRMYXlvdXRDbGlwIiwibWluZXJ2YS5jb250cm9scy5jYW52YXMuYXJyYW5nZS50YXBpbnMuZG9PdmVycmlkZSIsIm1pbmVydmEuY29udHJvbHMuY2FudmFzLm1lYXN1cmUudGFwaW5zIiwibWluZXJ2YS5jb250cm9scy5jYW52YXMubWVhc3VyZS50YXBpbnMuZG9PdmVycmlkZSIsIm1pbmVydmEuY29udHJvbHMuY2FudmFzLnByb2Nlc3N1cC50YXBpbnMiLCJzYndjIiwic3VyZmFjZSIsIm1pbmVydmEuY29udHJvbHMuZ3JpZC5hcnJhbmdlLnRhcGlucyIsIm1pbmVydmEuY29udHJvbHMuZ3JpZC5hcnJhbmdlLnRhcGlucy5jYWxjQ29uc3VtZWQiLCJtaW5lcnZhLmNvbnRyb2xzLmdyaWQuYXJyYW5nZS50YXBpbnMuZG9PdmVycmlkZSIsIm1pbmVydmEuY29udHJvbHMuZ3JpZC5hcnJhbmdlLnRhcGlucy5yZXN0b3JlTWVhc3VyZVJlc3VsdHMiLCJtaW5lcnZhLmNvbnRyb2xzLmdyaWQuYXJyYW5nZS50YXBpbnMuc2V0QWN0dWFscyIsIm1pbmVydmEuY29udHJvbHMuZ3JpZC5tZWFzdXJlLnRhcGlucyIsIm1pbmVydmEuY29udHJvbHMuZ3JpZC5tZWFzdXJlLnRhcGlucy5idWlsZFNoYXBlIiwibWluZXJ2YS5jb250cm9scy5ncmlkLm1lYXN1cmUudGFwaW5zLmNyZWF0ZURvT3ZlcnJpZGVQYXNzIiwibWluZXJ2YS5jb250cm9scy5ncmlkLm1lYXN1cmUudGFwaW5zLmNyZWF0ZURvT3ZlcnJpZGVQYXNzLmRvT3ZlcnJpZGVQYXNzIiwibWluZXJ2YS5jb250cm9scy5ncmlkLm1lYXN1cmUudGFwaW5zLmRvT3ZlcnJpZGUiLCJtaW5lcnZhLmNvbnRyb2xzLmdyaWQubWVhc3VyZS50YXBpbnMuZW5zdXJlQ29sTWF0cml4IiwibWluZXJ2YS5jb250cm9scy5ncmlkLm1lYXN1cmUudGFwaW5zLmVuc3VyZVJvd01hdHJpeCIsIm1pbmVydmEuY29udHJvbHMuZ3JpZC5tZWFzdXJlLnRhcGlucy5wcmVwYXJlQ29sTWF0cml4IiwibWluZXJ2YS5jb250cm9scy5ncmlkLm1lYXN1cmUudGFwaW5zLnByZXBhcmVSb3dNYXRyaXgiLCJtaW5lcnZhLmNvbnRyb2xzLmdyaWQubWVhc3VyZS50YXBpbnMuc2F2ZU1lYXN1cmVSZXN1bHRzIiwibWluZXJ2YS5jb250cm9scy5ncmlkLnByb2Nlc3N1cC50YXBpbnMiLCJtaW5lcnZhLmNvbnRyb2xzLmdyaWQucHJvY2Vzc3VwLnRhcGlucy5jYWxjRXh0ZW50cyIsIm1pbmVydmEuY29udHJvbHMuZ3JpZC5wcm9jZXNzdXAudGFwaW5zLnByZUNhbGNFeHRlbnRzIiwibWluZXJ2YS5jb250cm9scy5pbWFnZS5hcnJhbmdlLnRhcGlucyIsIm1pbmVydmEuY29udHJvbHMuaW1hZ2UuYXJyYW5nZS50YXBpbnMuY2FsY0ltYWdlQm91bmRzIiwibWluZXJ2YS5jb250cm9scy5pbWFnZS5hcnJhbmdlLnRhcGlucy5jYWxjU3RyZXRjaCIsIm1pbmVydmEuY29udHJvbHMuaW1hZ2UuYXJyYW5nZS50YXBpbnMuZG9PdmVycmlkZSIsIm1pbmVydmEuY29udHJvbHMuaW1hZ2UuYXJyYW5nZS50YXBpbnMuaW52YWxpZGF0ZU1ldHJpY3MiLCJtaW5lcnZhLmNvbnRyb2xzLmltYWdlLmhpdHRlc3QudGFwaW5zIiwibWluZXJ2YS5jb250cm9scy5pbWFnZS5oaXR0ZXN0LnRhcGlucy5jYW5IaXRJbnNpZGUiLCJtaW5lcnZhLmNvbnRyb2xzLmltYWdlLmhpdHRlc3QudGFwaW5zLmluc2lkZUNoaWxkcmVuIiwibWluZXJ2YS5jb250cm9scy5pbWFnZS5oaXR0ZXN0LnRhcGlucy5pbnNpZGVTdHJldGNoIiwibWluZXJ2YS5jb250cm9scy5pbWFnZS5tZWFzdXJlLnRhcGlucyIsIm1pbmVydmEuY29udHJvbHMuaW1hZ2UubWVhc3VyZS50YXBpbnMuY2FsY0ltYWdlQm91bmRzIiwibWluZXJ2YS5jb250cm9scy5pbWFnZS5tZWFzdXJlLnRhcGlucy5jYWxjU3RyZXRjaCIsIm1pbmVydmEuY29udHJvbHMuaW1hZ2UubWVhc3VyZS50YXBpbnMuZG9PdmVycmlkZSIsIm1pbmVydmEuY29udHJvbHMuaW1hZ2UucHJvY2Vzc2Rvd24udGFwaW5zIiwibWluZXJ2YS5jb250cm9scy5pbWFnZS5wcm9jZXNzZG93bi50YXBpbnMuY2FsY0ltYWdlVHJhbnNmb3JtIiwibWluZXJ2YS5jb250cm9scy5pbWFnZS5wcm9jZXNzZG93bi50YXBpbnMuY2FsY092ZXJsYXAiLCJtaW5lcnZhLmNvbnRyb2xzLmltYWdlLnByb2Nlc3Nkb3duLnRhcGlucy5jaGVja05lZWRJbWFnZU1ldHJpY3MiLCJtaW5lcnZhLmNvbnRyb2xzLmltYWdlLnByb2Nlc3Nkb3duLnRhcGlucy5wcmVwYXJlSW1hZ2VNZXRyaWNzIiwibWluZXJ2YS5jb250cm9scy5pbWFnZS5yZW5kZXIudGFwaW5zIiwibWluZXJ2YS5jb250cm9scy5pbWFnZS5yZW5kZXIudGFwaW5zLmRvUmVuZGVyIiwibWluZXJ2YS5jb250cm9scy5wYW5lbC5hcnJhbmdlLnRhcGlucyIsIm1pbmVydmEuY29udHJvbHMucGFuZWwuYXJyYW5nZS50YXBpbnMuZG9PdmVycmlkZSIsIm1pbmVydmEuY29udHJvbHMucGFuZWwucHJvY2Vzc3VwLnRhcGlucyIsIm1pbmVydmEuY29udHJvbHMucGFuZWwucHJvY2Vzc3VwLnRhcGlucy5wcmVDYWxjRXh0ZW50cyIsIm1pbmVydmEuY29udHJvbHMucG9wdXAucHJvY2Vzc2Rvd24udGFwaW5zIiwicG9wdXBDaGlsZCIsImNhcnJpZXIiLCJob3Jpem9udGFsT2Zmc2V0IiwidmVydGljYWxPZmZzZXQiLCJtaW5lcnZhLmNvbnRyb2xzLnNjcm9sbGNvbnRlbnRwcmVzZW50ZXIuYXJyYW5nZS50YXBpbnMiLCJtaW5lcnZhLmNvbnRyb2xzLnNjcm9sbGNvbnRlbnRwcmVzZW50ZXIuYXJyYW5nZS50YXBpbnMuZG9PdmVycmlkZSIsIm1pbmVydmEuY29udHJvbHMuc2Nyb2xsY29udGVudHByZXNlbnRlci5hcnJhbmdlLnRhcGlucy51cGRhdGVDbGlwIiwibWluZXJ2YS5jb250cm9scy5zY3JvbGxjb250ZW50cHJlc2VudGVyLmFycmFuZ2UudGFwaW5zLnVwZGF0ZUV4dGVudHMiLCJtaW5lcnZhLmNvbnRyb2xzLnNjcm9sbGNvbnRlbnRwcmVzZW50ZXIubWVhc3VyZS50YXBpbnMiLCJzZCIsInNjcm9sbERhdGEiLCJpZGVhbCIsImlkZWFsU2l6ZSIsImNhbkhvcml6b250YWxseVNjcm9sbCIsImNhblZlcnRpY2FsbHlTY3JvbGwiLCJtaW5lcnZhLmNvbnRyb2xzLnNjcm9sbGNvbnRlbnRwcmVzZW50ZXIubWVhc3VyZS50YXBpbnMuZmluaXNoRG9PdmVycmlkZSIsIm1pbmVydmEuY29udHJvbHMuc2Nyb2xsY29udGVudHByZXNlbnRlci5tZWFzdXJlLnRhcGlucy51cGRhdGVFeHRlbnRzIiwibWluZXJ2YS5jb250cm9scy5zdGFja3BhbmVsLmFycmFuZ2UudGFwaW5zIiwibWluZXJ2YS5jb250cm9scy5zdGFja3BhbmVsLmFycmFuZ2UudGFwaW5zLmRvSG9yaXpvbnRhbCIsIm1pbmVydmEuY29udHJvbHMuc3RhY2twYW5lbC5hcnJhbmdlLnRhcGlucy5kb092ZXJyaWRlIiwibWluZXJ2YS5jb250cm9scy5zdGFja3BhbmVsLmFycmFuZ2UudGFwaW5zLmRvVmVydGljYWwiLCJtaW5lcnZhLmNvbnRyb2xzLnN0YWNrcGFuZWwubWVhc3VyZS50YXBpbnMiLCJtaW5lcnZhLmNvbnRyb2xzLnN0YWNrcGFuZWwubWVhc3VyZS50YXBpbnMuZG9Ib3Jpem9udGFsIiwibWluZXJ2YS5jb250cm9scy5zdGFja3BhbmVsLm1lYXN1cmUudGFwaW5zLmRvT3ZlcnJpZGUiLCJtaW5lcnZhLmNvbnRyb2xzLnN0YWNrcGFuZWwubWVhc3VyZS50YXBpbnMuZG9WZXJ0aWNhbCIsIm1pbmVydmEuY29udHJvbHMudXNlcmNvbnRyb2wuYXJyYW5nZS50YXBpbnMiLCJtaW5lcnZhLmNvbnRyb2xzLnVzZXJjb250cm9sLmFycmFuZ2UudGFwaW5zLmRvT3ZlcnJpZGUiLCJtaW5lcnZhLmNvbnRyb2xzLnVzZXJjb250cm9sLmFycmFuZ2UudGFwaW5zLnByZU92ZXJyaWRlIiwibWluZXJ2YS5jb250cm9scy51c2VyY29udHJvbC5tZWFzdXJlLnRhcGlucyIsIm1pbmVydmEuY29udHJvbHMudXNlcmNvbnRyb2wubWVhc3VyZS50YXBpbnMuZG9PdmVycmlkZSIsIm1pbmVydmEuY29udHJvbHMudXNlcmNvbnRyb2wubWVhc3VyZS50YXBpbnMucG9zdE92ZXJyaWRlIiwibWluZXJ2YS5jb250cm9scy51c2VyY29udHJvbC5tZWFzdXJlLnRhcGlucy5wcmVPdmVycmlkZSIsIm1pbmVydmEuY29udHJvbHMudmlydHVhbGl6aW5nc3RhY2twYW5lbC5hcnJhbmdlLnRhcGlucyIsIm1pbmVydmEuY29udHJvbHMudmlydHVhbGl6aW5nc3RhY2twYW5lbC5hcnJhbmdlLnRhcGlucy5kb0hvcml6b250YWwiLCJtaW5lcnZhLmNvbnRyb2xzLnZpcnR1YWxpemluZ3N0YWNrcGFuZWwuYXJyYW5nZS50YXBpbnMuZG9PdmVycmlkZSIsIm1pbmVydmEuY29udHJvbHMudmlydHVhbGl6aW5nc3RhY2twYW5lbC5hcnJhbmdlLnRhcGlucy5kb1ZlcnRpY2FsIiwibWluZXJ2YS5jb250cm9scy52aXJ0dWFsaXppbmdzdGFja3BhbmVsLm1lYXN1cmUudGFwaW5zIiwibWluZXJ2YS5jb250cm9scy52aXJ0dWFsaXppbmdzdGFja3BhbmVsLm1lYXN1cmUudGFwaW5zLmRvSG9yaXpvbnRhbCIsIm1pbmVydmEuY29udHJvbHMudmlydHVhbGl6aW5nc3RhY2twYW5lbC5tZWFzdXJlLnRhcGlucy5kb092ZXJyaWRlIiwibWluZXJ2YS5jb250cm9scy52aXJ0dWFsaXppbmdzdGFja3BhbmVsLm1lYXN1cmUudGFwaW5zLmRvVmVydGljYWwiLCJtaW5lcnZhLnNoYXBlcy5wYXRoLnByb2Nlc3N1cC50YXBpbnMiLCJtaW5lcnZhLnNoYXBlcy5wYXRoLnByb2Nlc3N1cC50YXBpbnMuY2FsY0FjdHVhbFNpemUiLCJtaW5lcnZhLnNoYXBlcy5wYXRoLnByb2Nlc3N1cC50YXBpbnMuY2FsY0V4dGVudHMiLCJtaW5lcnZhLnNoYXBlcy5wYXRoLnByb2Nlc3N1cC50YXBpbnMuY2FsY1NoYXBlUmVjdCIsIm1pbmVydmEuc2hhcGVzLnBhdGgucHJvY2Vzc3VwLnRhcGlucy5jYWxjU3RyZXRjaCIsIm1pbmVydmEuc2hhcGVzLnBhdGgucmVuZGVyLnRhcGlucyIsIm1pbmVydmEuc2hhcGVzLnBhdGgucmVuZGVyLnRhcGlucy5kb1JlbmRlciIsIm1pbmVydmEuc2hhcGVzLnBhdGgucmVuZGVyLnRhcGlucy5maWxsIiwibWluZXJ2YS5zaGFwZXMuc2hhcGUuYXJyYW5nZS50YXBpbnMiLCJtaW5lcnZhLnNoYXBlcy5zaGFwZS5hcnJhbmdlLnRhcGlucy5kb092ZXJyaWRlIiwibWluZXJ2YS5zaGFwZXMuc2hhcGUuaGl0dGVzdC50YXBpbnMiLCJtaW5lcnZhLnNoYXBlcy5zaGFwZS5oaXR0ZXN0LnRhcGlucy5jYW5IaXRJbnNpZGUiLCJtaW5lcnZhLnNoYXBlcy5zaGFwZS5oaXR0ZXN0LnRhcGlucy5jYW5IaXRTaGFwZSIsIm1pbmVydmEuc2hhcGVzLnNoYXBlLmhpdHRlc3QudGFwaW5zLmRyYXdTaGFwZSIsIm1pbmVydmEuc2hhcGVzLnNoYXBlLmhpdHRlc3QudGFwaW5zLmZpbmlzaFNoYXBlIiwibWluZXJ2YS5zaGFwZXMuc2hhcGUuaGl0dGVzdC50YXBpbnMuaW5zaWRlQ2hpbGRyZW4iLCJtaW5lcnZhLnNoYXBlcy5zaGFwZS5oaXR0ZXN0LnRhcGlucy5wcmVwYXJlU2hhcGUiLCJtaW5lcnZhLnNoYXBlcy5zaGFwZS5tZWFzdXJlLnRhcGlucyIsIm1pbmVydmEuc2hhcGVzLnNoYXBlLm1lYXN1cmUudGFwaW5zLmNhbGNOYXR1cmFsQm91bmRzIiwibWluZXJ2YS5zaGFwZXMuc2hhcGUubWVhc3VyZS50YXBpbnMuZG9PdmVycmlkZSIsIm1pbmVydmEuc2hhcGVzLnNoYXBlLnByb2Nlc3N1cC50YXBpbnMiLCJtaW5lcnZhLnNoYXBlcy5zaGFwZS5wcm9jZXNzdXAudGFwaW5zLmNhbGNFeHRlbnRzIiwibWluZXJ2YS5zaGFwZXMuc2hhcGUucHJvY2Vzc3VwLnRhcGlucy5jYWxjU2hhcGVSZWN0IiwibWluZXJ2YS5zaGFwZXMuc2hhcGUucmVuZGVyLnRhcGlucyIsIm1pbmVydmEuc2hhcGVzLnNoYXBlLnJlbmRlci50YXBpbnMuY2FsY1Nob3VsZERyYXciLCJtaW5lcnZhLnNoYXBlcy5zaGFwZS5yZW5kZXIudGFwaW5zLmRvUmVuZGVyIiwibWluZXJ2YS5zaGFwZXMuc2hhcGUucmVuZGVyLnRhcGlucy5maWxsIiwibWluZXJ2YS5zaGFwZXMuc2hhcGUucmVuZGVyLnRhcGlucy5maW5pc2hEcmF3IiwibWluZXJ2YS5zaGFwZXMuc2hhcGUucmVuZGVyLnRhcGlucy5wcmVwYXJlRHJhdyIsIm1pbmVydmEuc2hhcGVzLnNoYXBlLnJlbmRlci50YXBpbnMuc3Ryb2tlIiwibWluZXJ2YS5jb250cm9scy5ib3JkZXIucmVuZGVyLnRhcGlucy5zaGltIiwibWluZXJ2YS5jb250cm9scy5ib3JkZXIucmVuZGVyLnRhcGlucy5zaGltLmNhbGNCYWxhbmNlZCIsIm1pbmVydmEuY29udHJvbHMuYm9yZGVyLnJlbmRlci50YXBpbnMuc2hpbS5jcmVhdGVQYXR0ZXJuIiwibWluZXJ2YS5jb250cm9scy5ib3JkZXIucmVuZGVyLnRhcGlucy5zaGltLmNyZWF0ZUJvcmRlclBhdHRlcm4iLCJtaW5lcnZhLmNvbnRyb2xzLmJvcmRlci5yZW5kZXIudGFwaW5zLnNoaW0uZG9SZW5kZXIiLCJtaW5lcnZhLmNvbnRyb2xzLmJvcmRlci5yZW5kZXIudGFwaW5zLnNoaW0ucmVuZGVyUGF0dGVybiIsIm1pbmVydmEuY29udHJvbHMuYm9yZGVyLnJlbmRlci50YXBpbnMuc2hpbS5yZW5kZXJCYWNrZ3JvdW5kIiwibWluZXJ2YS5jb250cm9scy5ib3JkZXIucmVuZGVyLnRhcGlucy5zaGltLnJlbmRlckJvcmRlciIsIm1pbmVydmEuY29udHJvbHMuYm9yZGVyLnJlbmRlci50YXBpbnMuc2hpbS5pbnZhbGlkYXRlUGF0dGVybiIsIm1pbmVydmEuY29udHJvbHMuYm9yZGVyLnJlbmRlci50YXBpbnMuc2hpbS5zZXRPbGRNZXRyaWNzIiwibWluZXJ2YS5jb250cm9scy5ib3JkZXIucmVuZGVyLnRhcGlucy5zaGltLmRpZE1ldHJpY3NDaGFuZ2UiXSwibWFwcGluZ3MiOiJBQUFBLFFBQUFBLGNBQXNCQyxHQUNs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QUFFQSxFQUFRQSxLQUFPQSxFQUFFQSxFQUFRQSxNQUFRQSxHQUM1Q0EsS0FBS0EsSUFBSUEsRUFBRUEsRUFBUUEsS0FBT0EsRUFBRUEsRUFBUUEsTUFBUUEsR0FDNUNBLEtBQUtBLElBQUlBLEVBQUVBLEVBQVFBLEtBQU9BLEVBQUVBLEVBQVFBLE1BQVFBLEdBQzVDQSxLQUFLQSxJQUFJQSxFQUFFQSxFQUFRQSxLQUFPQSxFQUFFQSxFQUFRQSxNQUFRQSxHQUM1Q0EsS0FBS0EsSUFBSUEsRUFBRUEsRUFBUUEsS0FBT0EsRUFBRUEsRUFBUUEsTUFBUUEsR0FDNUNBLEtBQUtBLElBQUlBLEVBQUVBLEVBQVFBLEtBQU9BLEVBQUVBLEVBQVFBLE1BQVFBLEdBQzVDQSxLQUFLQSxJQUFJQSxFQUFFQSxFQUFRQSxLQUFPQSxFQUFFQSxFQUFRQSxNQUFRQSxHQUM1Q0EsS0FBS0EsSUFBSUEsRUFBRUEsRUFBUUEsS0FBT0EsRUFBRUEsRUFBUUEsTUFBUUEsR0FDNUNBLEtBQUtBLElBQUlBLEVBQUVBLEVBQVFBLFNBQVdBLEVBQUVBLEVBQVFBLFVBQVlBLEdBQ3BEQSxLQUFLQSxJQUFJQSxFQUFFQSxFQUFRQSxTQUFXQSxFQUFFQSxFQUFRQSxVQUFZQSxHQUNwREEsS0FBS0EsSUFBSUEsRUFBRUEsRUFBUUEsU0FBV0EsRUFBRUEsRUFBUUEsVUFBWUEsR0FDcERBLEtBQUtBLElBQUlBLEVBQUVBLEVBQVFBLEtBQU9BLEVBQUVBLEVBQVFBLE1BQVFBLEdBR3BEbFAsU0FBUUEsU0FBRUEsRUFBYUEsRUFBYUEsR0FDM0JtUCxJQUFNQSxFQUFPQSxFQUNsQkEsSUFBSUEsR0FBTUEsRUFBRUEsRUFBUUEsS0FBTUEsRUFBTUEsRUFBRUEsRUFBUUEsS0FBTUEsRUFBTUEsRUFBRUEsRUFBUUEsS0FBTUEsRUFBTUEsRUFBRUEsRUFBUUEsS0FDbEZBLEVBQU1BLEVBQUVBLEVBQVFBLEtBQU1BLEVBQU1BLEVBQUVBLEVBQVFBLEtBQU1BLEVBQU1BLEVBQUVBLEVBQVFBLEtBQU1BLEVBQU1BLEVBQUVBLEVBQVFBLEtBQ2xGQSxFQUFNQSxFQUFFQSxFQUFRQSxLQUFNQSxFQUFNQSxFQUFFQSxFQUFRQSxLQUFNQSxFQUFNQSxFQUFFQSxFQUFRQSxLQUFNQSxFQUFNQSxFQUFFQSxFQUFRQSxLQUNsRkEsRUFBTUEsRUFBRUEsRUFBUUEsU0FBVUEsRUFBTUEsRUFBRUEsRUFBUUEsU0FBVUEsRUFBTUEsRUFBRUEsRUFBUUEsU0FBVUEsRUFBTUEsRUFBRUEsRUFBUUEsS0FFOUZBLEVBQU1BLEVBQUVBLEVBQVFBLEtBQU1BLEVBQU1BLEVBQUVBLEVBQVFBLEtBQU1BLEVBQU1BLEVBQUVBLEVBQVFBLEtBQU1BLEVBQU1BLEVBQUVBLEVBQVFBLEtBQ2xGQSxFQUFNQSxFQUFFQSxFQUFRQSxLQUFNQSxFQUFNQSxFQUFFQSxFQUFRQSxLQUFNQSxFQUFNQSxFQUFFQSxFQUFRQSxLQUFNQSxFQUFNQSxFQUFFQSxFQUFRQSxLQUNsRkEsRUFBTUEsRUFBRUEsRUFBUUEsS0FBTUEsRUFBTUEsRUFBRUEsRUFBUUEsS0FBTUEsRUFBTUEsRUFBRUEsRUFBUUEsS0FBTUEsRUFBTUEsRUFBRUEsRUFBUUEsS0FDbEZBLEVBQU1BLEVBQUVBLEVBQVFBLFNBQVVBLEVBQU1BLEVBQUVBLEVBQVFBLFNBQVVBLEVBQU1BLEVBQUVBLEVBQVFBLFNBQVVBLEVBQU1BLEVBQUVBLEVBQVFBLElBa0JsR0EsT0FoQkFBLEdBQUtBLEVBQVFBLEtBQU9BLEVBQU1BLEVBQU1BLEVBQU1BLEVBQU1BLEVBQU1BLEVBQU1BLEVBQU1BLEVBQzlEQSxFQUFLQSxFQUFRQSxLQUFPQSxFQUFNQSxFQUFNQSxFQUFNQSxFQUFNQSxFQUFNQSxFQUFNQSxFQUFNQSxFQUM5REEsRUFBS0EsRUFBUUEsS0FBT0EsRUFBTUEsRUFBTUEsRUFBTUEsRUFBTUEsRUFBTUEsRUFBTUEsRUFBTUEsRUFDOURBLEVBQUtBLEVBQVFBLEtBQU9BLEVBQU1BLEVBQU1BLEVBQU1BLEVBQU1BLEVBQU1BLEVBQU1BLEVBQU1BLEVBQzlEQSxFQUFLQSxFQUFRQSxLQUFPQSxFQUFNQSxFQUFNQSxFQUFNQSxFQUFNQSxFQUFNQSxFQUFNQSxFQUFNQSxFQUM5REEsRUFBS0EsRUFBUUEsS0FBT0EsRUFBTUEsRUFBTUEsRUFBTUEsRUFBTUEsRUFBTUEsRUFBTUEsRUFBTUEsRUFDOURBLEVBQUtBLEVBQVFBLEtBQU9BLEVBQU1BLEVBQU1BLEVBQU1BLEVBQU1BLEVBQU1BLEVBQU1BLEVBQU1BLEVBQzlEQSxFQUFLQSxFQUFRQSxLQUFPQSxFQUFNQSxFQUFNQSxFQUFNQSxFQUFNQSxFQUFNQSxFQUFNQSxFQUFNQSxFQUM5REEsRUFBS0EsRUFBUUEsS0FBT0EsRUFBTUEsRUFBTUEsRUFBTUEsRUFBTUEsRUFBTUEsRUFBTUEsRUFBTUEsRUFDOURBLEVBQUtBLEVBQVFBLEtBQU9BLEVBQU1BLEVBQU1BLEVBQU1BLEVBQU1BLEVBQU1BLEVBQU1BLEVBQU1BLEVBQzlEQSxFQUFLQSxFQUFRQSxLQUFPQSxFQUFNQSxFQUFNQSxFQUFNQSxFQUFNQSxFQUFNQSxFQUFNQSxFQUFNQSxFQUM5REEsRUFBS0EsRUFBUUEsS0FBT0EsRUFBTUEsRUFBTUEsRUFBTUEsRUFBTUEsRUFBTUEsRUFBTUEsRUFBTUEsRUFDOURBLEVBQUtBLEVBQVFBLFNBQVdBLEVBQU1BLEVBQU1BLEVBQU1BLEVBQU1BLEVBQU1BLEVBQU1BLEVBQU1BLEVBQ2xFQSxFQUFLQSxFQUFRQSxTQUFXQSxFQUFNQSxFQUFNQSxFQUFNQSxFQUFNQSxFQUFNQSxFQUFNQSxFQUFNQSxFQUNsRUEsRUFBS0EsRUFBUUEsU0FBV0EsRUFBTUEsRUFBTUEsRUFBTUEsRUFBTUEsRUFBTUEsRUFBTUEsRUFBTUEsRUFDbEVBLEVBQUtBLEVBQVFBLEtBQU9BLEVBQU1BLEVBQU1BLEVBQU1BLEVBQU1BLEVBQU1BLEVBQU1BLEVBQU1BLEVBQ3ZEQSxHQUVYblAsUUFBT0EsU0FBRUEsRUFBZUEsR0FDZm9QLElBQU1BLEVBQU9BLEVBR2xCQSxJQUFJQSxHQUFNQSxFQUFJQSxFQUFRQSxLQUFNQSxFQUFNQSxFQUFJQSxFQUFRQSxLQUFNQSxFQUFNQSxFQUFJQSxFQUFRQSxLQUFNQSxFQUFNQSxFQUFJQSxFQUFRQSxLQUMxRkEsRUFBTUEsRUFBSUEsRUFBUUEsS0FBTUEsRUFBTUEsRUFBSUEsRUFBUUEsS0FBTUEsRUFBTUEsRUFBSUEsRUFBUUEsS0FBTUEsRUFBTUEsRUFBSUEsRUFBUUEsS0FDMUZBLEVBQU1BLEVBQUlBLEVBQVFBLEtBQU1BLEVBQU1BLEVBQUlBLEVBQVFBLEtBQU1BLEVBQU1BLEVBQUlBLEVBQVFBLEtBQU1BLEVBQU1BLEVBQUlBLEVBQVFBLEtBQzFGQSxFQUFNQSxFQUFJQSxFQUFRQSxTQUFVQSxFQUFNQSxFQUFJQSxFQUFRQSxTQUFVQSxFQUFNQSxFQUFJQSxFQUFRQSxTQUFVQSxFQUFNQSxFQUFJQSxFQUFRQSxLQUV0R0EsRUFBTUEsRUFBTUEsRUFBTUEsRUFBTUEsRUFDeEJBLEVBQU1BLEVBQU1BLEVBQU1BLEVBQU1BLEVBQ3hCQSxFQUFNQSxFQUFNQSxFQUFNQSxFQUFNQSxFQUN4QkEsRUFBTUEsRUFBTUEsRUFBTUEsRUFBTUEsRUFDeEJBLEVBQU1BLEVBQU1BLEVBQU1BLEVBQU1BLEVBQ3hCQSxFQUFNQSxFQUFNQSxFQUFNQSxFQUFNQSxFQUN4QkEsRUFBTUEsRUFBTUEsRUFBTUEsRUFBTUEsRUFDeEJBLEVBQU1BLEVBQU1BLEVBQU1BLEVBQU1BLEVBQ3hCQSxFQUFNQSxFQUFNQSxFQUFNQSxFQUFNQSxFQUN4QkEsRUFBTUEsRUFBTUEsRUFBTUEsRUFBTUEsRUFDeEJBLEVBQU1BLEVBQU1BLEVBQU1BLEVBQU1BLEVBQ3hCQSxFQUFNQSxFQUFNQSxFQUFNQSxFQUFNQSxFQUV4QkEsRUFBS0EsRUFBTUEsRUFBTUEsRUFBTUEsRUFBTUEsRUFBTUEsRUFBTUEsRUFBTUEsRUFBTUEsRUFBTUEsRUFBTUEsRUFBTUEsQ0FDM0VBLEtBQUtBLFNBQVNBLEtBQU9BLEVBQ2pCQSxNQUFPQSxLQUNYQSxJQUFJQSxHQUFLQSxFQUFJQSxDQW1CYkEsT0FqQkFBLEdBQUtBLEVBQVFBLE1BQVFBLEVBQU1BLEVBQU1BLEVBQU1BLEVBQU1BLEVBQU1BLEdBQU9BLEVBQzFEQSxFQUFLQSxFQUFRQSxPQUFTQSxFQUFNQSxFQUFNQSxFQUFNQSxFQUFNQSxFQUFNQSxHQUFPQSxFQUMzREEsRUFBS0EsRUFBUUEsTUFBUUEsRUFBTUEsRUFBTUEsRUFBTUEsRUFBTUEsRUFBTUEsR0FBT0EsRUFDMURBLEVBQUtBLEVBQVFBLE9BQVNBLEVBQU1BLEVBQU1BLEVBQU1BLEVBQU1BLEVBQU1BLEdBQU9BLEVBQzNEQSxFQUFLQSxFQUFRQSxPQUFTQSxFQUFNQSxFQUFNQSxFQUFNQSxFQUFNQSxFQUFNQSxHQUFPQSxFQUMzREEsRUFBS0EsRUFBUUEsTUFBUUEsRUFBTUEsRUFBTUEsRUFBTUEsRUFBTUEsRUFBTUEsR0FBT0EsRUFDMURBLEVBQUtBLEVBQVFBLE9BQVNBLEVBQU1BLEVBQU1BLEVBQU1BLEVBQU1BLEVBQU1BLEdBQU9BLEVBQzNEQSxFQUFLQSxFQUFRQSxNQUFRQSxFQUFNQSxFQUFNQSxFQUFNQSxFQUFNQSxFQUFNQSxHQUFPQSxFQUMxREEsRUFBS0EsRUFBUUEsTUFBUUEsRUFBTUEsRUFBTUEsRUFBTUEsRUFBTUEsRUFBTUEsR0FBT0EsRUFDMURBLEVBQUtBLEVBQVFBLE9BQVNBLEVBQU1BLEVBQU1BLEVBQU1BLEVBQU1BLEVBQU1BLEdBQU9BLEVBQzNEQSxFQUFLQSxFQUFRQSxNQUFRQSxFQUFNQSxFQUFNQSxFQUFNQSxFQUFNQSxFQUFNQSxHQUFPQSxFQUMxREEsRUFBS0EsRUFBUUEsT0FBU0EsRUFBTUEsRUFBTUEsRUFBTUEsRUFBTUEsRUFBTUEsR0FBT0EsRUFDM0RBLEVBQUtBLEVBQVFBLFdBQWFBLEVBQU1BLEVBQU1BLEVBQU1BLEVBQU1BLEVBQU1BLEdBQU9BLEVBQy9EQSxFQUFLQSxFQUFRQSxVQUFZQSxFQUFNQSxFQUFNQSxFQUFNQSxFQUFNQSxFQUFNQSxHQUFPQSxFQUM5REEsRUFBS0EsRUFBUUEsV0FBYUEsRUFBTUEsRUFBTUEsRUFBTUEsRUFBTUEsRUFBTUEsR0FBT0EsRUFDL0RBLEVBQUtBLEVBQVFBLE1BQVFBLEVBQU1BLEVBQU1BLEVBQU1BLEVBQU1BLEVBQU1BLEdBQU9BLEVBRW5EQSxHQUVYcFAsVUFBU0EsU0FBRUEsRUFBZUEsR0FDakJnUSxJQUFNQSxFQUFPQSxFQUVsQkEsSUFBSUEsR0FBTUEsRUFBSUEsRUFBUUEsS0FBTUEsRUFBTUEsRUFBSUEsRUFBUUEsS0FBTUEsRUFBTUEsRUFBSUEsRUFBUUEsS0FBTUEsRUFBTUEsRUFBSUEsRUFBUUEsS0FDMUZBLEVBQU1BLEVBQUlBLEVBQVFBLEtBQU1BLEVBQU1BLEVBQUlBLEVBQVFBLEtBQU1BLEVBQU1BLEVBQUlBLEVBQVFBLEtBQU1BLEVBQU1BLEVBQUlBLEVBQVFBLEtBQzFGQSxFQUFNQSxFQUFJQSxFQUFRQSxLQUFNQSxFQUFNQSxFQUFJQSxFQUFRQSxLQUFNQSxFQUFNQSxFQUFJQSxFQUFRQSxLQUFNQSxFQUFNQSxFQUFJQSxFQUFRQSxLQUMxRkEsRUFBTUEsRUFBSUEsRUFBUUEsU0FBVUEsRUFBTUEsRUFBSUEsRUFBUUEsU0FBVUEsRUFBTUEsRUFBSUEsRUFBUUEsU0FBVUEsRUFBTUEsRUFBSUEsRUFBUUEsSUFPMUdBLE9BTEFBLEdBQUtBLEVBQVFBLEtBQU9BLEVBQUtBLEVBQUtBLEVBQVFBLEtBQU9BLEVBQUtBLEVBQUtBLEVBQVFBLEtBQU9BLEVBQUtBLEVBQUtBLEVBQVFBLFNBQVdBLEVBQ25HQSxFQUFLQSxFQUFRQSxLQUFPQSxFQUFLQSxFQUFLQSxFQUFRQSxLQUFPQSxFQUFLQSxFQUFLQSxFQUFRQSxLQUFPQSxFQUFLQSxFQUFLQSxFQUFRQSxTQUFXQSxFQUNuR0EsRUFBS0EsRUFBUUEsS0FBT0EsRUFBS0EsRUFBS0EsRUFBUUEsS0FBT0EsRUFBS0EsRUFBS0EsRUFBUUEsS0FBT0EsRUFBS0EsRUFBS0EsRUFBUUEsU0FBV0EsRUFDbkdBLEVBQUtBLEVBQVFBLEtBQU9BLEVBQUtBLEVBQUtBLEVBQVFBLEtBQU9BLEVBQUtBLEVBQUtBLEVBQVFBLEtBQU9BLEVBQUtBLEVBQUtBLEVBQVFBLEtBQU9BLEVBRXhGQSxHQUVYaFEsY0FBYUEsU0FBRUEsRUFBZUEsRUFBZUEsR0FDcENpUSxJQUFNQSxFQUFPQSxFQUVsQkEsSUFBSUEsR0FBSUEsRUFBSUEsR0FBSUEsRUFBSUEsRUFBSUEsR0FBSUEsRUFBSUEsRUFBSUEsR0FBSUEsRUFBSUEsRUFBSUEsR0FFNUNBLEVBQU1BLEVBQUlBLEVBQVFBLEtBQU1BLEVBQU1BLEVBQUlBLEVBQVFBLEtBQU1BLEVBQU1BLEVBQUlBLEVBQVFBLEtBQU1BLEVBQU1BLEVBQUlBLEVBQVFBLEtBQzFGQSxFQUFNQSxFQUFJQSxFQUFRQSxLQUFNQSxFQUFNQSxFQUFJQSxFQUFRQSxLQUFNQSxFQUFNQSxFQUFJQSxFQUFRQSxLQUFNQSxFQUFNQSxFQUFJQSxFQUFRQSxLQUMxRkEsRUFBTUEsRUFBSUEsRUFBUUEsS0FBTUEsRUFBTUEsRUFBSUEsRUFBUUEsS0FBTUEsRUFBTUEsRUFBSUEsRUFBUUEsS0FBTUEsRUFBTUEsRUFBSUEsRUFBUUEsS0FDMUZBLEVBQU1BLEVBQUlBLEVBQVFBLFNBQVVBLEVBQU1BLEVBQUlBLEVBQVFBLFNBQVVBLEVBQU1BLEVBQUlBLEVBQVFBLFNBQVVBLEVBQU1BLEVBQUlBLEVBQVFBLElBTzFHQSxPQUxBQSxHQUFLQSxHQUFLQSxFQUFNQSxFQUFJQSxFQUFNQSxFQUFJQSxFQUFNQSxFQUFJQSxFQUFNQSxFQUM5Q0EsRUFBS0EsR0FBS0EsRUFBTUEsRUFBSUEsRUFBTUEsRUFBSUEsRUFBTUEsRUFBSUEsRUFBTUEsRUFDOUNBLEVBQUtBLEdBQUtBLEVBQU1BLEVBQUlBLEVBQU1BLEVBQUlBLEVBQU1BLEVBQUlBLEVBQU1BLEVBQzlDQSxFQUFLQSxHQUFLQSxFQUFNQSxFQUFJQSxFQUFNQSxFQUFJQSxFQUFNQSxFQUFJQSxFQUFNQSxFQUV2Q0EsR0FHWGpRLGdCQUFlQSxTQUFFQSxFQUFXQSxFQUFXQSxFQUFXQSxHQXVCOUNzUCxNQXRCS0EsS0FBTUEsRUFBT0EsRUFBQUEsS0FBS0EsVUFFdkJBLEVBQUtBLEVBQVFBLEtBQU9BLEVBQ3BCQSxFQUFLQSxFQUFRQSxLQUFPQSxFQUNwQkEsRUFBS0EsRUFBUUEsS0FBT0EsRUFDcEJBLEVBQUtBLEVBQVFBLEtBQU9BLEVBRXBCQSxFQUFLQSxFQUFRQSxLQUFPQSxFQUNwQkEsRUFBS0EsRUFBUUEsS0FBT0EsRUFDcEJBLEVBQUtBLEVBQVFBLEtBQU9BLEVBQ3BCQSxFQUFLQSxFQUFRQSxLQUFPQSxFQUVwQkEsRUFBS0EsRUFBUUEsS0FBT0EsRUFDcEJBLEVBQUtBLEVBQVFBLEtBQU9BLEVBQ3BCQSxFQUFLQSxFQUFRQSxLQUFPQSxFQUNwQkEsRUFBS0EsRUFBUUEsS0FBT0EsRUFFcEJBLEVBQUtBLEVBQVFBLFNBQVdBLEVBQ3hCQSxFQUFLQSxFQUFRQSxTQUFXQSxFQUN4QkEsRUFBS0EsRUFBUUEsU0FBV0EsRUFDeEJBLEVBQUtBLEVBQVFBLEtBQU9BLEVBRWJBLEdBRVh0UCxZQUFXQSxTQUFFQSxFQUFXQSxFQUFXQSxFQUFXQSxHQXVCMUN3UCxNQXRCS0EsS0FBTUEsRUFBT0EsRUFBQUEsS0FBS0EsVUFFdkJBLEVBQUtBLEVBQVFBLEtBQU9BLEVBQ3BCQSxFQUFLQSxFQUFRQSxLQUFPQSxFQUNwQkEsRUFBS0EsRUFBUUEsS0FBT0EsRUFDcEJBLEVBQUtBLEVBQVFBLEtBQU9BLEVBRXBCQSxFQUFLQSxFQUFRQSxLQUFPQSxFQUNwQkEsRUFBS0EsRUFBUUEsS0FBT0EsRUFDcEJBLEVBQUtBLEVBQVFBLEtBQU9BLEVBQ3BCQSxFQUFLQSxFQUFRQSxLQUFPQSxFQUVwQkEsRUFBS0EsRUFBUUEsS0FBT0EsRUFDcEJBLEVBQUtBLEVBQVFBLEtBQU9BLEVBQ3BCQSxFQUFLQSxFQUFRQSxLQUFPQSxFQUNwQkEsRUFBS0EsRUFBUUEsS0FBT0EsRUFFcEJBLEVBQUtBLEVBQVFBLFNBQVdBLEVBQ3hCQSxFQUFLQSxFQUFRQSxTQUFXQSxFQUN4QkEsRUFBS0EsRUFBUUEsU0FBV0EsRUFDeEJBLEVBQUtBLEVBQVFBLEtBQU9BLEVBRWJBLEdBRVh4UCxjQUFhQSxTQUFFQSxFQUFlQSxHQUNyQmtRLElBQU1BLEVBQU9BLEVBQUFBLEtBQUtBLFNBRXZCQSxJQUFJQSxHQUFJQSxLQUFLQSxJQUFJQSxHQUNiQSxFQUFJQSxLQUFLQSxJQUFJQSxFQXNCakJBLE9BcEJBQSxHQUFLQSxFQUFRQSxLQUFPQSxFQUNwQkEsRUFBS0EsRUFBUUEsS0FBT0EsRUFDcEJBLEVBQUtBLEVBQVFBLEtBQU9BLEVBQ3BCQSxFQUFLQSxFQUFRQSxLQUFPQSxFQUVwQkEsRUFBS0EsRUFBUUEsS0FBT0EsRUFDcEJBLEVBQUtBLEVBQVFBLEtBQU9BLEVBQ3BCQSxFQUFLQSxFQUFRQSxLQUFPQSxFQUNwQkEsRUFBS0EsRUFBUUEsS0FBT0EsRUFFcEJBLEVBQUtBLEVBQVFBLEtBQU9BLEVBQ3BCQSxFQUFLQSxFQUFRQSxNQUFRQSxFQUNyQkEsRUFBS0EsRUFBUUEsS0FBT0EsRUFDcEJBLEVBQUtBLEVBQVFBLEtBQU9BLEVBRXBCQSxFQUFLQSxFQUFRQSxTQUFXQSxFQUN4QkEsRUFBS0EsRUFBUUEsU0FBV0EsRUFDeEJBLEVBQUtBLEVBQVFBLFNBQVdBLEVBQ3hCQSxFQUFLQSxFQUFRQSxLQUFPQSxFQUViQSxHQUVYbFEsY0FBYUEsU0FBRUEsRUFBZUEsR0FDckJtUSxJQUFNQSxFQUFPQSxFQUFBQSxLQUFLQSxTQUV2QkEsSUFBSUEsR0FBSUEsS0FBS0EsSUFBSUEsR0FDYkEsRUFBSUEsS0FBS0EsSUFBSUEsRUFzQmpCQSxPQXBCQUEsR0FBS0EsRUFBUUEsS0FBT0EsRUFDcEJBLEVBQUtBLEVBQVFBLEtBQU9BLEVBQ3BCQSxFQUFLQSxFQUFRQSxNQUFRQSxFQUNyQkEsRUFBS0EsRUFBUUEsS0FBT0EsRUFFcEJBLEVBQUtBLEVBQVFBLEtBQU9BLEVBQ3BCQSxFQUFLQSxFQUFRQSxLQUFPQSxFQUNwQkEsRUFBS0EsRUFBUUEsS0FBT0EsRUFDcEJBLEVBQUtBLEVBQVFBLEtBQU9BLEVBRXBCQSxFQUFLQSxFQUFRQSxLQUFPQSxFQUNwQkEsRUFBS0EsRUFBUUEsS0FBT0EsRUFDcEJBLEVBQUtBLEVBQVFBLEtBQU9BLEVBQ3BCQSxFQUFLQSxFQUFRQSxLQUFPQSxFQUVwQkEsRUFBS0EsRUFBUUEsU0FBV0EsRUFDeEJBLEVBQUtBLEVBQVFBLFNBQVdBLEVBQ3hCQSxFQUFLQSxFQUFRQSxTQUFXQSxFQUN4QkEsRUFBS0EsRUFBUUEsS0FBT0EsRUFFYkEsR0FFWG5RLGNBQWFBLFNBQUVBLEVBQWVBLEdBQ3JCb1EsSUFBTUEsRUFBT0EsRUFBQUEsS0FBS0EsU0FFdkJBLElBQUlBLEdBQUlBLEtBQUtBLElBQUlBLEdBQ2JBLEVBQUlBLEtBQUtBLElBQUlBLEVBc0JqQkEsT0FwQkFBLEdBQUtBLEVBQVFBLEtBQU9BLEVBQ3BCQSxFQUFLQSxFQUFRQSxLQUFPQSxFQUNwQkEsRUFBS0EsRUFBUUEsS0FBT0EsRUFDcEJBLEVBQUtBLEVBQVFBLEtBQU9BLEVBRXBCQSxFQUFLQSxFQUFRQSxNQUFRQSxFQUNyQkEsRUFBS0EsRUFBUUEsS0FBT0EsRUFDcEJBLEVBQUtBLEVBQVFBLEtBQU9BLEVBQ3BCQSxFQUFLQSxFQUFRQSxLQUFPQSxFQUVwQkEsRUFBS0EsRUFBUUEsS0FBT0EsRUFDcEJBLEVBQUtBLEVBQVFBLEtBQU9BLEVBQ3BCQSxFQUFLQSxFQUFRQSxLQUFPQSxFQUNwQkEsRUFBS0EsRUFBUUEsS0FBT0EsRUFFcEJBLEVBQUtBLEVBQVFBLFNBQVdBLEVBQ3hCQSxFQUFLQSxFQUFRQSxTQUFXQSxFQUN4QkEsRUFBS0EsRUFBUUEsU0FBV0EsRUFDeEJBLEVBQUtBLEVBQVFBLEtBQU9BLEVBRWJBLEdBR1hwUSxrQkFBaUJBLFNBQUVBLEVBQXNCQSxFQUFxQkEsRUFBb0JBLEVBQW1CQSxHQUM1RnFRLElBQU1BLEVBQU9BLEVBQUFBLEtBQUtBLFNBRXZCQSxJQUFJQSxHQUFTQSxFQUFNQSxLQUFLQSxJQUFJQSxFQUFlQSxHQUN2Q0EsRUFBUUEsRUFBU0EsRUFDakJBLEVBQUlBLEVBQWFBLENBc0JyQkEsT0FwQkFBLEdBQUtBLEVBQVFBLEtBQU9BLEVBQ3BCQSxFQUFLQSxFQUFRQSxLQUFPQSxFQUNwQkEsRUFBS0EsRUFBUUEsS0FBT0EsRUFDcEJBLEVBQUtBLEVBQVFBLEtBQU9BLEVBRXBCQSxFQUFLQSxFQUFRQSxLQUFPQSxFQUNwQkEsRUFBS0EsRUFBUUEsS0FBT0EsRUFDcEJBLEVBQUtBLEVBQVFBLEtBQU9BLEVBQ3BCQSxFQUFLQSxFQUFRQSxLQUFPQSxFQUVwQkEsRUFBS0EsRUFBUUEsS0FBT0EsRUFDcEJBLEVBQUtBLEVBQVFBLEtBQU9BLEVBQ3BCQSxFQUFLQSxFQUFRQSxLQUFPQSxFQUFZQSxFQUNoQ0EsRUFBS0EsRUFBUUEsS0FBT0EsR0FFcEJBLEVBQUtBLEVBQVFBLFNBQVdBLEVBQ3hCQSxFQUFLQSxFQUFRQSxTQUFXQSxFQUN4QkEsRUFBS0EsRUFBUUEsU0FBV0EsRUFBYUEsRUFBWUEsRUFDakRBLEVBQUtBLEVBQVFBLEtBQU9BLEVBRWJBLEdBRVhyUSxlQUFjQSxTQUFFQSxFQUFlQSxFQUFnQkEsR0F1QjNDc1EsTUF0QktBLEtBQU1BLEVBQU9BLEVBQUFBLEtBQUtBLFVBRXZCQSxFQUFLQSxFQUFRQSxLQUFPQSxFQUFRQSxFQUM1QkEsRUFBS0EsRUFBUUEsS0FBT0EsRUFDcEJBLEVBQUtBLEVBQVFBLEtBQU9BLEVBQ3BCQSxFQUFLQSxFQUFRQSxLQUFPQSxFQUVwQkEsRUFBS0EsRUFBUUEsS0FBT0EsRUFDcEJBLEVBQUtBLEVBQVFBLE1BQVFBLEVBQVNBLEVBQzlCQSxFQUFLQSxFQUFRQSxLQUFPQSxFQUNwQkEsRUFBS0EsRUFBUUEsS0FBT0EsRUFFcEJBLEVBQUtBLEVBQVFBLEtBQU9BLEVBQ3BCQSxFQUFLQSxFQUFRQSxLQUFPQSxFQUNwQkEsRUFBS0EsRUFBUUEsS0FBT0EsRUFDcEJBLEVBQUtBLEVBQVFBLEtBQU9BLEVBRXBCQSxFQUFLQSxFQUFRQSxTQUFXQSxFQUFRQSxFQUNoQ0EsRUFBS0EsRUFBUUEsU0FBV0EsRUFBU0EsRUFDakNBLEVBQUtBLEVBQVFBLFNBQVdBLEVBQ3hCQSxFQUFLQSxFQUFRQSxLQUFPQSxFQUViQSxLQTdaWnRRLFVBQUFBLFlBa2FQLElBQUl1USxNQUFPdlEsUUFBUXVRLEtDbmJadlEsU0FBUCxTQUFPQSxHQUNIQSxFQUFBQSxLQUFLQSxXQUFhQSxTQUFVQSxFQUFZQSxHQUNwQ3dRLFFBQVFDLEtBQUssdUNBRmR6USxVQUFBQSxZQ0VQLElBQU9BLFVBQVAsU0FBT0EsR0FDSEEsR0FBSUEsRUFHQUEsR0FEd0JBLG1CQUFqQkEsY0FDWUEsU0FBVUEsR0FDekIsTUFBc0IsSUFBSWlELGNBQWFDLElBR3hCbEQsU0FBVUEsR0FDekIsTUFBaUIsSUFBSW1ELE9BQU1ELElBSXhCbEQsRUFBQUEsTUFDUEEsT0FBTUEsU0FBRUEsRUFBV0EsRUFBV0EsRUFBV0EsR0FDckNvRCxHQUFJQSxHQUFPQSxFQUFpQkEsRUFLNUJBLE9BSkFBLEdBQUtBLEdBQUtBLEVBQ1ZBLEVBQUtBLEdBQUtBLEVBQ1ZBLEVBQUtBLEdBQUtBLEVBQ1ZBLEVBQUtBLEdBQUtBLEVBQ0hBLEdBRVhwRCxLQUFJQSxTQUFFQSxFQUFXQSxFQUFXQSxFQUFXQSxFQUFXQSxHQU05Q3FELE1BTEtBLEtBQU1BLEVBQU9BLEVBQWlCQSxJQUNuQ0EsRUFBS0EsR0FBS0EsRUFDVkEsRUFBS0EsR0FBS0EsRUFDVkEsRUFBS0EsR0FBS0EsRUFDVkEsRUFBS0EsR0FBS0EsRUFDSEEsS0E1QlpyRCxVQUFBQSxZQWlDUCxJQUFJMFEsTUFBTzFRLFFBQVEwUSxLQ3JDWjFRLFNBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0F1SlgyUSxRQUFBQSxHQUF5QkEsRUFBbUJBLEVBQXFCQSxHQUM3REMsR0FBSUEsR0FDQUEsRUFBS0EsRUFBS0EsZ0JBQWtCQSxFQUM1QkEsRUFBTUEsRUFBS0Esb0JBQXNCQSxFQUFLQSxrQkFBb0JBLENBQzlEQSxRQUFRQSxHQUNKQSxJQUFLQSxHQUFBQSxXQUFXQSxNQUNaQSxFQUFJQSxFQUFJQSxLQUFLQSxJQUFJQSxFQUFJQSxFQUFHQSxFQUFNQSxHQUFLQSxHQUNuQ0EsRUFBSUEsRUFBSUEsS0FBS0EsSUFBSUEsRUFBSUEsRUFBR0EsRUFBTUEsR0FBS0EsR0FDbkNBLEVBQUlBLEVBQUlBLEtBQUtBLElBQUlBLEVBQUlBLEVBQUdBLEVBQU1BLEdBQUtBLEdBQ25DQSxFQUFJQSxFQUFJQSxLQUFLQSxJQUFJQSxFQUFJQSxFQUFHQSxFQUFNQSxHQUFLQSxFQUNuQ0EsTUFDSkEsS0FBS0EsR0FBQUEsV0FBV0EsT0FDWkEsS0FBTUEsRUFBSUEsRUFBTUEsa0JBQW1CQSxNQUNuQ0EsS0FBS0EsRUFBRUEsS0FBT0EsRUFBRUEsR0FBSUEsTUFDcEJBLElBQUlBLEdBQUtBLEVBQUFBLE9BQU9BLFFBQVFBLEVBQUFBLE9BQU9BLFVBQVVBLEVBQUVBLE1BQU1BLEtBQzdDQSxFQUFNQSxFQUFBQSxPQUFPQSxXQUFXQSxFQUFHQSxNQUFNQSxJQUVqQ0EsRUFBS0EsRUFBTUEsR0FBS0EsR0FBTUEsRUFBR0EsR0FBS0EsRUFBSUEsSUFDbENBLEVBQUtBLEVBQU1BLEdBQUtBLEdBQU1BLEVBQUdBLEdBQUtBLEVBQUlBLElBQ2xDQSxFQUFLQSxFQUFNQSxHQUFLQSxHQUFNQSxFQUFHQSxHQUFLQSxFQUFJQSxJQUNsQ0EsRUFBS0EsRUFBTUEsR0FBS0EsR0FBTUEsRUFBR0EsR0FBS0EsRUFBSUEsR0FFdENBLEdBQUlBLEVBQUlBLEtBQUtBLElBQUlBLEVBQUlBLEVBQUdBLEVBQUlBLEdBQzVCQSxFQUFJQSxFQUFJQSxLQUFLQSxJQUFJQSxFQUFJQSxFQUFHQSxFQUFJQSxHQUM1QkEsRUFBSUEsRUFBSUEsS0FBS0EsSUFBSUEsRUFBSUEsRUFBR0EsRUFBSUEsR0FDNUJBLEVBQUlBLEVBQUlBLEtBQUtBLElBQUlBLEVBQUlBLEVBQUdBLEVBQUlBLEVBQzVCQSxNQUNKQSxLQUFLQSxHQUFBQSxXQUFXQSxLQUNoQkEsUUFDSUEsS0FBTUEsRUFBSUEsRUFBTUEsa0JBQW1CQSxNQUNuQ0EsS0FBS0EsRUFBRUEsS0FBT0EsRUFBRUEsR0FBSUEsTUFDcEJBLElBQUlBLEdBQU1BLEVBQUFBLE9BQU9BLFdBQVdBLEVBQUFBLE9BQU9BLFVBQVVBLEVBQUVBLE1BQU1BLEtBRWpEQSxFQUFLQSxFQUFNQSxHQUFLQSxFQUFLQSxFQUFJQSxHQUN6QkEsRUFBS0EsRUFBTUEsR0FBS0EsR0FBTUEsRUFBSUEsR0FDMUJBLEVBQUtBLEVBQU1BLEdBQUtBLEVBQUtBLEVBQUlBLEdBQ3pCQSxFQUFLQSxFQUFNQSxHQUFLQSxHQUFNQSxFQUFJQSxFQUU5QkEsR0FBSUEsRUFBSUEsS0FBS0EsSUFBSUEsRUFBSUEsRUFBR0EsRUFBSUEsR0FDNUJBLEVBQUlBLEVBQUlBLEtBQUtBLElBQUlBLEVBQUlBLEVBQUdBLEVBQUlBLEdBQzVCQSxFQUFJQSxFQUFJQSxLQUFLQSxJQUFJQSxFQUFJQSxFQUFHQSxFQUFJQSxHQUM1QkEsRUFBSUEsRUFBSUEsS0FBS0EsSUFBSUEsRUFBSUEsRUFBR0EsRUFBSUEsSUFLeENELFFBQUFBLEdBQXVCQSxFQUFtQkEsRUFBcUJBLEdBQzNERSxHQUdJQSxHQUhBQSxFQUFLQSxFQUFNQSxHQUNYQSxFQUFLQSxFQUFNQSxHQUdYQSxFQUFLQSxFQUFLQSxnQkFBa0JBLEVBQzVCQSxFQUFNQSxFQUFLQSxvQkFBc0JBLEVBQUtBLGtCQUFvQkEsQ0FDOURBLFFBQVFBLEdBQ0pBLElBQUtBLEdBQUFBLFdBQVdBLE1BQ1pBLEVBQUlBLEVBQUlBLEtBQUtBLElBQUlBLEVBQUlBLEVBQUdBLEVBQUtBLEdBQzdCQSxFQUFJQSxFQUFJQSxLQUFLQSxJQUFJQSxFQUFJQSxFQUFHQSxFQUFLQSxHQUM3QkEsRUFBSUEsRUFBSUEsS0FBS0EsSUFBSUEsRUFBSUEsRUFBR0EsRUFBS0EsR0FDN0JBLEVBQUlBLEVBQUlBLEtBQUtBLElBQUlBLEVBQUlBLEVBQUdBLEVBQUtBLEVBQzdCQSxNQUNKQSxLQUFLQSxHQUFBQSxXQUFXQSxPQUNaQSxLQUFNQSxFQUFJQSxFQUFNQSxnQkFBaUJBLE1BQ2pDQSxLQUFLQSxFQUFFQSxLQUFPQSxFQUFFQSxHQUFJQSxNQUNwQkEsSUFBSUEsR0FBS0EsRUFBQUEsT0FBT0EsVUFBVUEsRUFBRUEsTUFBTUEsSUFDOUJBLEVBQU1BLEVBQUFBLE9BQU9BLFdBQVdBLEVBQUdBLE1BQU1BLElBRWpDQSxFQUFLQSxFQUFLQSxHQUFNQSxFQUFHQSxHQUFLQSxFQUFJQSxJQUM1QkEsRUFBS0EsRUFBS0EsR0FBTUEsRUFBR0EsR0FBS0EsRUFBSUEsSUFDNUJBLEVBQUtBLEVBQUtBLEdBQU1BLEVBQUdBLEdBQUtBLEVBQUlBLElBQzVCQSxFQUFLQSxFQUFLQSxHQUFNQSxFQUFHQSxHQUFLQSxFQUFJQSxHQUVoQ0EsR0FBSUEsRUFBSUEsS0FBS0EsSUFBSUEsRUFBSUEsRUFBR0EsRUFBSUEsR0FDNUJBLEVBQUlBLEVBQUlBLEtBQUtBLElBQUlBLEVBQUlBLEVBQUdBLEVBQUlBLEdBQzVCQSxFQUFJQSxFQUFJQSxLQUFLQSxJQUFJQSxFQUFJQSxFQUFHQSxFQUFJQSxHQUM1QkEsRUFBSUEsRUFBSUEsS0FBS0EsSUFBSUEsRUFBSUEsRUFBR0EsRUFBSUEsRUFDNUJBLE1BQ0pBLEtBQUtBLEdBQUFBLFdBQVdBLEtBQ2hCQSxRQUNJQSxLQUFNQSxFQUFJQSxFQUFNQSxnQkFBaUJBLE1BQ2pDQSxLQUFLQSxFQUFFQSxLQUFPQSxFQUFFQSxHQUFJQSxNQUNwQkEsSUFBSUEsR0FBTUEsRUFBQUEsT0FBT0EsV0FBV0EsRUFBQUEsT0FBT0EsVUFBVUEsRUFBRUEsTUFBTUEsS0FFakRBLEVBQUtBLEVBQUtBLEVBQUtBLEVBQUlBLEdBQ25CQSxFQUFLQSxFQUFLQSxHQUFNQSxFQUFJQSxHQUNwQkEsRUFBS0EsRUFBS0EsRUFBS0EsRUFBSUEsR0FDbkJBLEVBQUtBLEVBQUtBLEdBQU1BLEVBQUlBLEVBRXhCQSxHQUFJQSxFQUFJQSxLQUFLQSxJQUFJQSxFQUFJQSxFQUFHQSxFQUFJQSxHQUM1QkEsRUFBSUEsRUFBSUEsS0FBS0EsSUFBSUEsRUFBSUEsRUFBR0EsRUFBSUEsR0FDNUJBLEVBQUlBLEVBQUlBLEtBQUtBLElBQUlBLEVBQUlBLEVBQUdBLEVBQUlBLEdBQzVCQSxFQUFJQSxFQUFJQSxLQUFLQSxJQUFJQSxFQUFJQSxFQUFHQSxFQUFJQSxJQUt4Q0YsUUFBQUEsR0FBeUJBLEVBQW1CQSxFQUF3QkEsRUFBcUJBLEdBQ3JGRyxHQUFJQSxHQUFLQSxFQUFLQSxnQkFBa0JBLENBQzVCQSxHQUFLQSxpQkFBbUJBLEVBQUFBLFlBQVlBLFFBQ3BDQSxFQUFJQSxFQUFJQSxLQUFLQSxJQUFJQSxFQUFJQSxFQUFHQSxFQUFNQSxHQUFLQSxHQUNuQ0EsRUFBSUEsRUFBSUEsS0FBS0EsSUFBSUEsRUFBSUEsRUFBR0EsRUFBTUEsR0FBS0EsR0FDbkNBLEVBQUlBLEVBQUlBLEtBQUtBLElBQUlBLEVBQUlBLEVBQUdBLEVBQU1BLEdBQUtBLEdBQ25DQSxFQUFJQSxFQUFJQSxLQUFLQSxJQUFJQSxFQUFJQSxFQUFHQSxFQUFNQSxHQUFLQSxHQUV2Q0EsSUFBSUEsR0FBUUEsRUFBS0EsaUJBQW1CQSxFQUFBQSxZQUFZQSxNQUFTQSxFQUFjQSxFQUFVQSxFQUFPQSxFQUFJQSxFQUFLQSxrQkFBb0JBLEVBQWNBLEVBQVVBLEVBQU9BLEVBQ3BKQSxJQUFLQSxFQUFMQSxDQUVBQSxHQUFJQSxHQUFLQSxFQUFLQSxHQUFHQSxFQUNiQSxFQUFLQSxFQUFLQSxHQUFHQSxFQUNiQSxFQUFLQSxFQUFLQSxHQUFHQSxFQUNiQSxFQUFLQSxFQUFLQSxHQUFHQSxDQUNqQkEsR0FBSUEsRUFBSUEsS0FBS0EsSUFBSUEsRUFBSUEsRUFBR0EsRUFBSUEsR0FDNUJBLEVBQUlBLEVBQUlBLEtBQUtBLElBQUlBLEVBQUlBLEVBQUdBLEVBQUlBLEdBQzVCQSxFQUFJQSxFQUFJQSxLQUFLQSxJQUFJQSxFQUFJQSxFQUFHQSxFQUFJQSxHQUM1QkEsRUFBSUEsRUFBSUEsS0FBS0EsSUFBSUEsRUFBSUEsRUFBR0EsRUFBSUEsSUFHaENILFFBQUFBLEdBQStCQSxFQUFtQkEsRUFBc0JBLEdBVXBFSSxRQUFBQSxHQUF1QkEsRUFBcUJBLEdBQ3hDQyxFQUFNQSxHQUFLQSxFQUNYQSxFQUFNQSxHQUFLQSxFQUVOQSxFQUFNQSxZQUNlQSxFQUFPQSxRQUFVQSxJQUNuQ0EsRUFBS0EsRUFBTUEsR0FDWEEsRUFBS0EsRUFBTUEsR0FDWEEsRUFBZUEsRUFBS0EsRUFBT0EsS0FFMUJBLEdBQW1CQSxFQUFJQSxHQUN4QkEsRUFBZUEsRUFBS0EsRUFBTUEsRUFBT0EsSUFHekNBLEVBQU1BLGdCQUFnQkEsRUFBS0EsR0FFM0JBLEVBQU9BLEVBQU1BLElBQU1BLEVBQ25CQSxFQUFPQSxFQUFNQSxJQUFNQSxFQUNuQkEsSUFBcUNBLEVBQU9BLE9BQzVDQSxFQUFPQSxFQUdYRCxJQUFLQSxHQS9CREEsR0FBTUEsRUFBS0EsT0FDWEEsRUFBcUJBLEtBQ3JCQSxFQUFlQSxLQUNmQSxFQUFlQSxLQUNmQSxFQUFhQSxLQUNiQSxFQUFhQSxLQUViQSxHQUFrQkEsRUF3QmJBLEVBQUlBLEVBQU9BLEVBQUpBLEVBQVNBLElBQ3JCQSxFQUFhQSxFQUFLQSxHQUFJQSxFQUUxQkEsSUFBSUEsR0FBTUEsRUFBS0EsRUFBTUEsRUFDakJBLEtBQVFBLEVBQUlBLFVBQ1pBLEVBQWFBLEVBQUtBLEVBQUtBLEdBRy9CSixRQUFBQSxHQUErQkEsRUFBd0JBLEVBQXFCQSxFQUFZQSxHQUNwRk0sR0FBSUEsR0FBSUEsRUFBTUEsR0FDVkEsRUFBSUEsRUFBTUEsR0FFVkEsRUFBS0EsRUFBU0EsZUFDZEEsRUFBS0EsRUFBTUEsZ0JBQ2ZBLEtBQUtBLElBQU9BLEVBQ1JBLE1BQU9BLEtBQ1hBLEdBQUFBLE9BQU9BLFFBQVFBLEVBQ2ZBLElBQUlBLEdBQU1BLEVBQUFBLE9BQU9BLGFBQWFBLEVBQUlBLEdBQU1BLENBQ3hDQSxJQUFJQSxNQUFNQSxHQUNOQSxNQUFPQSxLQUVYQSxJQUFJQSxHQUFhQSxFQUFJQSxLQUFLQSxJQUFJQSxFQUM5QkEsSUFBSUEsRUFBYUEsRUFDYkEsTUFBT0EsR0FBY0EsRUFBVUEsRUFBT0EsRUFHMUNBLElBQUlBLEdBQUtBLEVBQUFBLE9BQU9BLGNBQWNBLEVBQUlBLEdBQU1BLEVBQUdBLE1BQU1BLEdBQUtBLEVBQUdBLE1BQU1BLEVBQy9EQSxHQUFBQSxPQUFPQSxVQUFVQSxFQUFBQSxPQUFPQSxRQUFRQSxFQUFBQSxPQUFPQSxPQUFPQSxFQUFJQSxJQUdsREEsSUFBSUEsR0FBV0EsRUFBS0EsRUFFaEJBLEdBQU9BLEVBQUdBLEVBQUlBLEVBQVdBLEVBQUdBLEdBQUlBLEVBQUdBLEVBQUlBLEVBQVdBLEVBQUdBLEdBQ3pEQSxRQUNJQSxFQUNBQSxHQUlSTixRQUFBQSxHQUErQkEsRUFBd0JBLEVBQXFCQSxHQUN4RU8sR0FBSUEsR0FBSUEsRUFBTUEsR0FDVkEsRUFBSUEsRUFBTUEsR0FFVkEsRUFBS0EsRUFBU0EsZUFDZEEsRUFBS0EsRUFBTUEsZ0JBQ2ZBLElBQUtBLEdBQU9BLEVBQVpBLENBRUFBLEVBQUFBLE9BQU9BLFVBQVVBLEVBQUFBLE9BQU9BLFFBQVFBLElBQ2hDQSxFQUFBQSxPQUFPQSxVQUFVQSxFQUNqQkEsSUFBSUEsR0FDQUEsQ0FTSkEsT0FSSUEsR0FBQUEsT0FBT0EsY0FBY0EsRUFBSUEsSUFDekJBLEVBQU1BLEVBQUFBLE9BQU9BLFdBQVdBLEVBQUdBLE1BQU1BLElBQ2pDQSxFQUFNQSxFQUFBQSxPQUFPQSxRQUFRQSxFQUFBQSxPQUFPQSxXQUFXQSxFQUFHQSxNQUFNQSxPQUVoREEsRUFBTUEsRUFBQUEsT0FBT0EsUUFBUUEsRUFBQUEsT0FBT0EsV0FBV0EsRUFBR0EsTUFBTUEsS0FDaERBLEVBQU1BLEVBQUFBLE9BQU9BLFdBQVdBLEVBQUdBLE1BQU1BLE9BSWhDQSxFQUFHQSxFQUFJQSxFQUFLQSxFQUFJQSxHQUFJQSxFQUFHQSxFQUFJQSxFQUFLQSxFQUFJQSxLQUNwQ0EsRUFBR0EsRUFBSUEsRUFBS0EsRUFBSUEsR0FBSUEsRUFBR0EsRUFBSUEsRUFBS0EsRUFBSUEsTUF0VzdDUCxHQUFBQSxHQUFBQSxXQUFBUSxRQUFBQSxLQUNZQyxLQUFBQSxhQUNBQSxLQUFBQSxPQUFTQSxFQUNUQSxLQUFBQSxPQUFTQSxFQWlKckJELE1BL0lJQSxRQUFBQSxlQUFJQSxFQUFBQSxVQUFBQSxRWnk0RUkzRSxJWXo0RVIyRSxXQUNJRSxNQUFPQSxNQUFLQSxRWjI0RVIzRSxZQUFZLEVBQ1pDLGNBQWMsSVl6NEV0QndFLE9BQUFBLGVBQUlBLEVBQUFBLFVBQUFBLFFaNDRFSTNFLElZNTRFUjJFLFdBQ0lHLE1BQU9BLE1BQUtBLFFaODRFUjVFLFlBQVksRUFDWkMsY0FBYyxJWTU0RXRCd0UsRUFBQUEsVUFBQUEsTUFBQUEsV0FDSUksS0FBS0EsVUFBVUEsT0FBU0EsRUFDeEJBLEtBQUtBLE9BQVNBLEVBQ2RBLEtBQUtBLE9BQVNBLEdBR2xCSixFQUFBQSxVQUFBQSxLQUFBQSxTQUFNQSxFQUFXQSxHQUNiSyxLQUFLQSxVQUFVQSxLQUFLQSxFQUFBQSxTQUFTQSxLQUFLQSxFQUFHQSxJQUNyQ0EsS0FBS0EsT0FBU0EsRUFDZEEsS0FBS0EsT0FBU0EsR0FHbEJMLEVBQUFBLFVBQUFBLEtBQUFBLFNBQU1BLEVBQVdBLEdBQ2JNLEtBQUtBLFVBQVVBLEtBQUtBLEVBQUFBLFNBQVNBLEtBQUtBLEVBQUdBLElBQ3JDQSxLQUFLQSxPQUFTQSxFQUNkQSxLQUFLQSxPQUFTQSxHQUdsQk4sRUFBQUEsVUFBQUEsZ0JBQUFBLFNBQWlCQSxFQUFhQSxFQUFhQSxFQUFXQSxHQUNsRE8sS0FBS0EsVUFBVUEsS0FBS0EsRUFBQUEsU0FBU0EsZ0JBQWdCQSxFQUFLQSxFQUFLQSxFQUFHQSxJQUMxREEsS0FBS0EsT0FBU0EsRUFDZEEsS0FBS0EsT0FBU0EsR0FHbEJQLEVBQUFBLFVBQUFBLFlBQUFBLFNBQWFBLEVBQWNBLEVBQWNBLEVBQWNBLEVBQWNBLEVBQVdBLEdBQzVFUSxLQUFLQSxVQUFVQSxLQUFLQSxFQUFBQSxTQUFTQSxZQUFZQSxFQUFNQSxFQUFNQSxFQUFNQSxFQUFNQSxFQUFHQSxJQUNwRUEsS0FBS0EsT0FBU0EsRUFDZEEsS0FBS0EsT0FBU0EsR0FHbEJSLEVBQUFBLFVBQUFBLFFBQUFBLFNBQVNBLEVBQVdBLEVBQVdBLEVBQWVBLEdBQzFDUyxLQUFLQSxVQUFVQSxLQUFLQSxFQUFBQSxTQUFTQSxRQUFRQSxFQUFHQSxFQUFHQSxFQUFPQSxJQUNsREEsS0FBS0EsT0FBU0EsRUFDZEEsS0FBS0EsT0FBU0EsR0FHbEJULEVBQUFBLFVBQUFBLGNBQUFBLFNBQWVBLEVBQVlBLEVBQVlBLEVBQXVCQSxFQUF5QkEsRUFBb0NBLEVBQVlBLEdBQ25JVSxLQUFLQSxVQUFVQSxLQUFLQSxFQUFBQSxTQUFTQSxjQUFjQSxFQUFJQSxFQUFJQSxFQUFlQSxFQUFnQkEsRUFBb0JBLEVBQUlBLElBQzFHQSxLQUFLQSxPQUFTQSxFQUNkQSxLQUFLQSxPQUFTQSxHQUdsQlYsRUFBQUEsVUFBQUEsSUFBQUEsU0FBS0EsRUFBV0EsRUFBV0EsRUFBV0EsRUFBZ0JBLEVBQWdCQSxHQUNsRVcsS0FBS0EsVUFBVUEsS0FBS0EsRUFBQUEsU0FBU0EsSUFBSUEsRUFBR0EsRUFBR0EsRUFBR0EsRUFBUUEsRUFBUUEsS0FHOURYLEVBQUFBLFVBQUFBLE1BQUFBLFNBQU9BLEVBQWFBLEVBQWFBLEVBQVdBLEVBQVdBLEdBQ25EWSxHQUFJQSxHQUFRQSxFQUFBQSxTQUFTQSxNQUFNQSxFQUFLQSxFQUFLQSxFQUFHQSxFQUFHQSxFQUMzQ0EsTUFBS0EsVUFBVUEsS0FBS0EsR0FDcEJBLEtBQUtBLE9BQVNBLEVBQU1BLEdBQ3BCQSxLQUFLQSxPQUFTQSxFQUFNQSxJQUd4QlosRUFBQUEsVUFBQUEsS0FBQUEsU0FBTUEsRUFBV0EsRUFBV0EsRUFBZUEsR0FDdkNhLEtBQUtBLFVBQVVBLEtBQUtBLEVBQUFBLFNBQVNBLEtBQUtBLEVBQUdBLEVBQUdBLEVBQU9BLEtBR25EYixFQUFBQSxVQUFBQSxZQUFBQSxTQUFhQSxFQUFXQSxFQUFXQSxFQUFlQSxFQUFnQkEsRUFBaUJBLEdBQy9FYyxLQUFLQSxVQUFVQSxLQUFLQSxFQUFBQSxTQUFTQSxZQUFZQSxFQUFHQSxFQUFHQSxFQUFPQSxFQUFRQSxFQUFTQSxJQUN2RUEsS0FBS0EsT0FBU0EsRUFDZEEsS0FBS0EsT0FBU0EsR0FHbEJkLEVBQUFBLFVBQUFBLE1BQUFBLFdBQ0llLEtBQUtBLFVBQVVBLEtBQUtBLEVBQUFBLFNBQVNBLFVBR2pDZixFQUFBQSxVQUFBQSxLQUFBQSxTQUFNQSxHQUNGZ0IsRUFBSUEsV0FHSkEsS0FBS0EsR0FGREEsR0FBT0EsS0FBS0EsVUFDWkEsRUFBTUEsRUFBS0EsT0FDTkEsRUFBSUEsRUFBT0EsRUFBSkEsRUFBU0EsSUFDckJBLEVBQUtBLEdBQUdBLEtBQUtBLElBSXJCaEIsRUFBQUEsVUFBQUEsV0FBQUEsU0FBWUEsR0FDUmlCLEdBQUlBLEtBQUtBLFVBQVVBLFFBQVVBLEVBQ3pCQSxNQUFPQSxJQUFJQSxHQUFBQSxJQUNmQSxJQUFJQSxHQUFNQSxHQUFRQSxFQUFLQSxnQkFBa0JBLEVBQUlBLEtBQUtBLGdCQUFnQkEsR0FBUUEsS0FBS0EsZUFDL0VBLE9BQU9BLElBQUlBLEdBQUFBLEtBQUtBLEVBQUlBLEVBQUdBLEVBQUlBLEVBQUdBLEtBQUtBLElBQUlBLEVBQUdBLEVBQUlBLEVBQUlBLEVBQUlBLEdBQUlBLEtBQUtBLElBQUlBLEVBQUdBLEVBQUlBLEVBQUlBLEVBQUlBLEtBRzlFakIsRUFBQUEsVUFBQUEsY0FBUkEsV0FZSWtCLElBQUtBLEdBRERBLEdBVkFBLEVBQU9BLEtBQUtBLFVBQ1pBLEVBQU1BLEVBQUtBLE9BQ1hBLEdBQ0FBLEVBQUdBLE9BQU9BLGtCQUNWQSxFQUFHQSxPQUFPQSxrQkFDVkEsRUFBR0EsT0FBT0Esa0JBQ1ZBLEVBQUdBLE9BQU9BLG1CQUVWQSxFQUFPQSxLQUNQQSxFQUFPQSxLQUVGQSxFQUFJQSxFQUFPQSxFQUFKQSxFQUFTQSxJQUNyQkEsRUFBUUEsRUFBS0EsR0FDYkEsRUFBTUEsR0FBS0EsRUFDWEEsRUFBTUEsR0FBS0EsRUFFWEEsRUFBTUEsY0FBY0EsR0FFcEJBLEVBQU9BLEVBQU1BLElBQU1BLEVBQ25CQSxFQUFPQSxFQUFNQSxJQUFNQSxDQUV2QkEsT0FBT0EsSUFHSGxCLEVBQUFBLFVBQUFBLGdCQUFSQSxTQUF5QkEsR0FDckJtQixHQUFJQSxJQUNBQSxFQUFHQSxPQUFPQSxrQkFDVkEsRUFBR0EsT0FBT0Esa0JBQ1ZBLEVBQUdBLE9BQU9BLGtCQUNWQSxFQUFHQSxPQUFPQSxrQkFHZEEsT0FEQUEsR0FBcUJBLEVBQUtBLEtBQUtBLFVBQVdBLEdBQ25DQSxHQUdKbkIsRUFBQUEsTUFBUEEsU0FBY0EsRUFBYUEsR0FDdkJvQixFQUFNQSxVQUFVQSxLQUFLQSxNQUFNQSxFQUFNQSxVQUFXQSxFQUFNQSxXQUNsREEsRUFBTUEsUUFBVUEsRUFBTUEsT0FDdEJBLEVBQU1BLFFBQVVBLEVBQU1BLFFBRzFCcEIsRUFBQUEsVUFBQUEsVUFBQUEsV0FJSXFCLElBQUtBLEdBSERBLEdBQU9BLEtBQUtBLFVBQ1pBLEVBQU1BLEVBQUtBLE9BQ1hBLEVBQUlBLEdBQ0NBLEVBQUlBLEVBQU9BLEVBQUpBLEVBQVNBLElBQ2pCQSxFQUFJQSxJQUFHQSxHQUFLQSxLQUNoQkEsR0FBS0EsRUFBS0EsR0FBR0EsVUFFakJBLE9BQU9BLElBRWZyQixJQXBKYVIsR0FBQUEsS0FBSUEsRUFpVERBLEVBQUFBLGNBQWFBLEVBK0JiQSxFQUFBQSxjQUFhQSxHQWxWbEIzUSxFQUFBQSxFQUFBQSxPQUFBQSxFQUFBQSxXQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FPWHlTLFFBQUFBLEdBQWlIQSxHQUM3R0MsT0FDSUEsSUFBS0EsRUFDTEEsTUFBT0EsRUFBUUEsY0FDZkEsT0FBUUEsRUFBUUEsZ0JBVnhCRCxHQUFBQSxHQUFBQSxXQUFBRSxRQUFBQSxNQUlBQSxNQUFBQSxLQUphRixHQUFBQSxTQUFRQSxFQU1MQSxFQUFBQSxjQUFhQSxHQVBsQnpTLEVBQUFBLEVBQUFBLE9BQUFBLEVBQUFBLFdBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUtYeVMsR0FBQUEsR0FBQUEsV0FBQUcsUUFBQUEsS0FDWUMsS0FBQUEsV0FDQUEsS0FBQUEsWUErRVpELE1BN0VJQSxHQUFBQSxVQUFBQSxTQUFBQSxTQUFVQSxFQUFjQSxHQUdwQkUsTUFGQUEsTUFBS0EsUUFBUUEsS0FBS0EsR0FDbEJBLEtBQUtBLFNBQVNBLEtBQUtBLEdBQ1pBLE1BR1hGLEVBQUFBLFVBQUFBLGVBQUFBLFNBQWdCQSxFQUFnQkEsRUFBY0EsR0FDMUNHLEdBQUlBLEdBQVFBLEtBQUtBLFFBQ2JBLEVBQVNBLEtBQUtBLFNBQ2RBLEVBQVNBLEVBQWNBLEVBQU1BLFFBQVFBLEdBQW5CQSxFQVF0QkEsT0FQY0EsS0FBVkEsR0FDQUEsRUFBTUEsUUFBUUEsR0FDZEEsRUFBT0EsUUFBUUEsS0FFZkEsRUFBTUEsT0FBT0EsRUFBT0EsRUFBR0EsR0FDdkJBLEVBQU9BLE9BQU9BLEVBQU9BLEVBQUdBLElBRXJCQSxNQUdYSCxFQUFBQSxVQUFBQSxjQUFBQSxTQUFlQSxFQUFlQSxFQUFjQSxHQUN4Q0ksR0FBSUEsR0FBUUEsS0FBS0EsUUFDYkEsRUFBU0EsS0FBS0EsU0FDZEEsRUFBU0EsRUFBYUEsRUFBTUEsUUFBUUEsR0FBbkJBLEVBUXJCQSxPQVBjQSxLQUFWQSxHQUFnQkEsSUFBVUEsRUFBTUEsT0FBU0EsR0FDekNBLEVBQU1BLEtBQUtBLEdBQ1hBLEVBQU9BLEtBQUtBLEtBRVpBLEVBQU1BLE9BQU9BLEVBQVFBLEVBQUdBLEVBQUdBLEdBQzNCQSxFQUFPQSxPQUFPQSxFQUFRQSxFQUFHQSxFQUFHQSxJQUV6QkEsTUFHWEosRUFBQUEsVUFBQUEsYUFBQUEsU0FBY0EsRUFBY0EsR0FDeEJLLEdBQUlBLEdBQVFBLEtBQUtBLFFBQ2JBLEVBQVNBLEtBQUtBLFNBQ2RBLEVBQVFBLEVBQU1BLFFBQVFBLEVBQzFCQSxJQUFjQSxLQUFWQSxFQUNBQSxLQUFNQSxJQUFJQSxPQUFNQSx3REFBMERBLEVBQU9BLEtBRXJGQSxPQURBQSxHQUFPQSxHQUFTQSxFQUNUQSxNQUdYTCxFQUFBQSxVQUFBQSxZQUFBQSxTQUFhQSxHQUNUTSxHQUFJQSxHQUFRQSxLQUFLQSxRQUNiQSxFQUFRQSxFQUFNQSxRQUFRQSxFQUMxQkEsSUFBY0EsS0FBVkEsRUFDQUEsS0FBTUEsSUFBSUEsT0FBTUEsd0RBQTBEQSxFQUFPQSxLQUdyRkEsT0FGQUEsR0FBTUEsT0FBT0EsRUFBT0EsR0FDcEJBLEtBQUtBLFNBQVNBLE9BQU9BLEVBQU9BLEdBQ3JCQSxNQUdYTixFQUFBQSxVQUFBQSxJQUFBQSxTQUFLQSxHZDJ1RkcsSWMzdUZVTyxHQUFBQSxNQUFBQSxFQUFBQSxFQUFBQSxFQUFBQSxVQUFBQSxPQUFBQSxJQUFBQSxFQUFBQSxFQUFBQSxHQUFBQSxVQUFBQSxFQUNkQSxHQUFTQSxRQUFRQSxHQUVqQkEsS0FBS0EsUUFBUUEsTUFBTUEsS0FBTUEsRUFHekJBLEtBQUtBLEdBRERBLElBQU9BLEVBQ0ZBLEVBQUlBLEVBQUdBLEVBQVNBLEtBQUtBLFNBQVVBLEVBQU1BLEVBQU9BLE9BQVlBLEVBQUpBLEVBQVNBLElBQ2xFQSxJQUFLQSxFQUFPQSxHQUFHQSxNQUFNQSxLQUFNQSxHQUFXQSxDQUNsQ0EsR0FBT0EsQ0FDUEEsT0FNUkEsTUFGQUEsTUFBS0EsTUFBTUEsTUFBTUEsS0FBTUEsR0FFaEJBLEdBR1hQLEVBQUFBLFVBQUFBLFFBQUFBLFNBQVNBLEdkMHVGRCxJYzF1RmNRLEdBQUFBLE1BQUFBLEVBQUFBLEVBQUFBLEVBQUFBLFVBQUFBLE9BQUFBLElBQUFBLEVBQUFBLEVBQUFBLEdBQUFBLFVBQUFBLElBR3RCUixFQUFBQSxVQUFBQSxNQUFBQSxTQUFPQSxHZDZ1RkMsSWM3dUZZUyxHQUFBQSxNQUFBQSxFQUFBQSxFQUFBQSxFQUFBQSxVQUFBQSxPQUFBQSxJQUFBQSxFQUFBQSxFQUFBQSxHQUFBQSxVQUFBQSxJQUV4QlQsSUFqRmFILEdBQUFBLFFBQU9BLEdBTFR6UyxFQUFBQSxFQUFBQSxPQUFBQSxFQUFBQSxXQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FLWHlTLEdBQUFBLEdBQUFBLFdBQUFhLFFBQUFBLEtBQ1lDLEtBQUFBLFdBQ0FBLEtBQUFBLFlBMkZaRCxNQXpGSUEsR0FBQUEsVUFBQUEsU0FBQUEsU0FBVUEsRUFBY0EsR0FHcEJFLE1BRkFBLE1BQUtBLFFBQVFBLEtBQUtBLEdBQ2xCQSxLQUFLQSxTQUFTQSxLQUFLQSxHQUNaQSxNQUdYRixFQUFBQSxVQUFBQSxlQUFBQSxTQUFnQkEsRUFBZ0JBLEVBQWNBLEdBQzFDRyxHQUFJQSxHQUFRQSxLQUFLQSxRQUNiQSxFQUFTQSxLQUFLQSxTQUNkQSxFQUFTQSxFQUFjQSxFQUFNQSxRQUFRQSxHQUFuQkEsRUFRdEJBLE9BUGNBLEtBQVZBLEdBQ0FBLEVBQU1BLFFBQVFBLEdBQ2RBLEVBQU9BLFFBQVFBLEtBRWZBLEVBQU1BLE9BQU9BLEVBQU9BLEVBQUdBLEdBQ3ZCQSxFQUFPQSxPQUFPQSxFQUFPQSxFQUFHQSxJQUVyQkEsTUFHWEgsRUFBQUEsVUFBQUEsY0FBQUEsU0FBZUEsRUFBZUEsRUFBY0EsR0FDeENJLEdBQUlBLEdBQVFBLEtBQUtBLFFBQ2JBLEVBQVNBLEtBQUtBLFNBQ2RBLEVBQVNBLEVBQWFBLEVBQU1BLFFBQVFBLEdBQW5CQSxFQVFyQkEsT0FQY0EsS0FBVkEsR0FBZ0JBLElBQVVBLEVBQU1BLE9BQVNBLEdBQ3pDQSxFQUFNQSxLQUFLQSxHQUNYQSxFQUFPQSxLQUFLQSxLQUVaQSxFQUFNQSxPQUFPQSxFQUFRQSxFQUFHQSxFQUFHQSxHQUMzQkEsRUFBT0EsT0FBT0EsRUFBUUEsRUFBR0EsRUFBR0EsSUFFekJBLE1BR1hKLEVBQUFBLFVBQUFBLGFBQUFBLFNBQWNBLEVBQWNBLEdBQ3hCSyxHQUFJQSxHQUFRQSxLQUFLQSxRQUNiQSxFQUFTQSxLQUFLQSxTQUNkQSxFQUFRQSxFQUFNQSxRQUFRQSxFQUMxQkEsSUFBY0EsS0FBVkEsRUFDQUEsS0FBTUEsSUFBSUEsT0FBTUEsd0RBQTBEQSxFQUFPQSxLQUVyRkEsT0FEQUEsR0FBT0EsR0FBU0EsRUFDVEEsTUFHWEwsRUFBQUEsVUFBQUEsWUFBQUEsU0FBYUEsR0FDVE0sR0FBSUEsR0FBUUEsS0FBS0EsUUFDYkEsRUFBUUEsRUFBTUEsUUFBUUEsRUFDMUJBLElBQWNBLEtBQVZBLEVBQ0FBLEtBQU1BLElBQUlBLE9BQU1BLHdEQUEwREEsRUFBT0EsS0FHckZBLE9BRkFBLEdBQU1BLE9BQU9BLEVBQU9BLEdBQ3BCQSxLQUFLQSxTQUFTQSxPQUFPQSxFQUFPQSxHQUNyQkEsTUFHWE4sRUFBQUEsVUFBQUEsSUFBQUEsU0FBS0EsRUFBZUEsRUFBZUEsR2Z5MEYzQixJZXowRjRDTyxHQUFBQSxNQUFBQSxFQUFBQSxFQUFBQSxFQUFBQSxVQUFBQSxPQUFBQSxJQUFBQSxFQUFBQSxFQUFBQSxHQUFBQSxVQUFBQSxFQUNoREEsR0FBU0EsUUFBUUEsR0FDakJBLEVBQVNBLFFBQVFBLEdBQ2pCQSxFQUFTQSxRQUFRQSxHQUVqQkEsS0FBS0EsUUFBUUEsTUFBTUEsS0FBTUEsRUFHekJBLEtBQUtBLEdBRERBLElBQU9BLEVBQ0ZBLEVBQUlBLEVBQUdBLEVBQVNBLEtBQUtBLFNBQVVBLEVBQU1BLEVBQU9BLE9BQVlBLEVBQUpBLEVBQVNBLElBQ2xFQSxJQUFLQSxFQUFPQSxHQUFHQSxNQUFNQSxLQUFNQSxHQUFXQSxDQUNsQ0EsR0FBT0EsQ0FDUEEsT0FNUkEsTUFGQUEsTUFBS0EsTUFBTUEsTUFBTUEsS0FBTUEsR0FFaEJBLEdBR1hQLEVBQUFBLFVBQUFBLFlBQUFBLFdBQ0lRLE1BQU9BLE9BR1hSLEVBQUFBLFVBQUFBLGFBQUFBLFdBQ0lTLE1BQU9BLE9BR1hULEVBQUFBLFVBQUFBLFFBQUFBLFNBQVNBLEVBQWVBLEVBQWVBLEdmczBGL0IsSWV0MEZnRFUsR0FBQUEsTUFBQUEsRUFBQUEsRUFBQUEsRUFBQUEsVUFBQUEsT0FBQUEsSUFBQUEsRUFBQUEsRUFBQUEsR0FBQUEsVUFBQUEsSUFJeERWLEVBQUFBLFVBQUFBLE1BQUFBLFNBQU9BLEVBQWVBLEVBQWVBLEdmdzBGN0IsSWV4MEY4Q1csR0FBQUEsTUFBQUEsRUFBQUEsRUFBQUEsRUFBQUEsVUFBQUEsT0FBQUEsSUFBQUEsRUFBQUEsRUFBQUEsR0FBQUEsVUFBQUEsSUFHMURYLElBN0ZhYixHQUFBQSxXQUFVQSxHQUxaelMsRUFBQUEsRUFBQUEsT0FBQUEsRUFBQUEsV0FBUkEsVUFBQUEsYUNBUCxTQUFXa1UsR0FDRkEsRUFBUUMsU0FDVEQsRUFBUUMsV0FFUEQsRUFBUUMsT0FBT0MsUUFDaEJGLEVBQVFDLE9BQU9DLE9BQ1hDLE9BQ0FDLE1BQUssYUFFTEMsTUFBSyxTQUFFQyxLQUVQQyxLQUFJLGVBSVBQLEVBQVFDLE9BQU9PLFNBQ2hCUixFQUFRQyxPQUFPTyxRQUNYeE0sUUFBUyxLQUNUbU0sT0FDQUUsTUFBSyxTQUFFQyxRQUloQkcsT0N2QkgsSUFBTzNVLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0F5TVg0VSxRQUFBQSxHQUE2QkEsR0FDekJDLE1BQUlBLFVBQVNBLEVBQU9BLGdCQUNUQSxFQUFPQSxlQUNiQSxTQUFTQSxFQUFPQSxVQUVkQSxLQUFLQSxJQUFJQSxFQUFPQSxZQUFhQSxFQUFPQSxVQURoQ0EsRUFBT0EsWUEvS3RCRCxHQUFBQSxHQUFBQSxXQUFBRSxRQUFBQSxNQXlLQUEsTUF4S0lBLEdBQUFBLFVBQUFBLGFBQUFBLFdBQ0lDLE9BQ0lBLGVBQWdCQSxPQUFPQSxrQkFDdkJBLFlBQWFBLElBQ2JBLGFBQWNBLElBQ2RBLFNBQVVBLE9BQU9BLGtCQUNqQkEsVUFBV0EsT0FBT0Esa0JBQ2xCQSxTQUNBQSxXQUFXQSxJQUluQkQsRUFBQUEsVUFBQUEsWUFBQUEsU0FBYUEsRUFBMEJBLEVBQTRCQSxHQUMvREUsTUFBSUEsR0FBVUEsV0FBYUEsR0FDaEJBLEdBQ1hBLEVBQVVBLFNBQVdBLEVBQ3JCQSxFQUFVQSxZQUFjQSxJQUN4QkEsRUFBVUEsYUFBZUEsS0FDbEJBLElBR1hGLEVBQUFBLFVBQUFBLE9BQUFBLFNBQVFBLEVBQTBCQSxFQUE0QkEsRUFBa0JBLEdBQzVFRyxJQUFLQSxNQUFNQSxFQUFVQSxhQUNqQkEsT0FBT0EsQ0FDWEEsR0FBVUEsU0FBV0EsRUFBV0EsTUFFaENBLEVBQVVBLFlBQWNBLEVBQ3hCQSxFQUFVQSxhQUFlQSxFQUN6QkEsRUFBVUEsUUFDVkEsS0FBS0EsR0FBSUEsR0FBU0EsRUFBR0EsRUFBT0EsUUFDeEJBLEdBQVVBLEVBQU9BLFFBQVFBLE9BQU9BLEVBQVFBLEVBRTVDQSxRQUFPQSxHQUdYSCxFQUFBQSxVQUFBQSxPQUFBQSxTQUFRQSxFQUFnQ0EsRUFBMEJBLEdBQWxFSSxHQUFBQSxHQUFBQSxJQUNJQSxNQUFLQSxlQUFlQSxFQUFRQSxHQUU1QkEsRUFBSUEsT0FDSkEsRUFBVUEsTUFBTUEsUUFBUUEsU0FBQUEsR0FDcEJBLEdBQUlBLEdBQVNBLEVBQUtBLHdCQUF3QkEsRUFBUUEsRUFBV0EsRUFBS0EsTUFDbEVBLEdBQUlBLFVBQVVBLEVBQVFBLEdBQ3RCQSxFQUFLQSxLQUFLQSxRQUFRQSxTQUFBQSxHQUNWQSxFQUFJQSxNQUNKQSxFQUFBQSxPQUFPQSxRQUFRQSxPQUFPQSxFQUFJQSxJQUFLQSxFQUFJQSxNQUFPQSxHQUMxQ0EsRUFBSUEsVUFBVUEsRUFBSUEsSUFBSUEsTUFBT0EsSUFFN0JBLEVBQUlBLE1BQ0pBLEVBQUFBLE9BQU9BLFFBQVFBLE9BQU9BLEVBQUlBLElBQUtBLEVBQUlBLE1BQU9BLEdBQzFDQSxFQUFJQSxVQUFVQSxFQUFJQSxJQUFJQSxNQUFPQSxJQUU3QkEsRUFBSUEsT0FDSkEsRUFBQUEsT0FBT0EsUUFBUUEsT0FBT0EsRUFBSUEsS0FBTUEsRUFBSUEsTUFBT0EsR0FDM0NBLEVBQUlBLFVBQVVBLEVBQUlBLEtBQUtBLE1BQU9BLE1BR3RDQSxFQUFJQSxXQUFXQSxFQUFLQSxNQUFRQSxFQUFRQSxFQUFLQSxVQUU3Q0EsRUFBSUEsV0FHUkosRUFBQUEsVUFBQUEsbUJBQUFBLFNBQW9CQSxFQUFlQSxFQUEwQkEsR0FDekRLLEdBQUlBLEdBQU9BLEVBQVVBLE1BQU1BLEVBQzNCQSxLQUFLQSxFQUNEQSxNQUFPQSxFQUdYQSxJQUFJQSxHQUFVQSxDQUNkQSxJQUFJQSxFQUFNQSxFQUFJQSxFQUNWQSxJQUFLQSxHQUFJQSxHQUFPQSxFQUFHQSxFQUFRQSxFQUFVQSxNQUFPQSxFQUFJQSxFQUFHQSxFQUFNQSxFQUFNQSxPQUFZQSxFQUFKQSxJQUNuRUEsRUFBT0EsRUFBTUEsS0FDVEEsRUFBTUEsR0FBTUEsRUFBT0EsRUFBS0EsU0FGZ0RBLElBSTVFQSxHQUFXQSxFQUFLQSxLQUFLQSxPQUFlQSxTQUFDQSxFQUFLQSxHQUFNQSxNQUFBQSxHQUFNQSxFQUFFQSxRQUFRQSxHQUNoRUEsR0FBUUEsRUFBS0EsTUFJckJBLElBQUlBLEdBQUtBLEVBQU1BLEVBQUlBLEtBQUtBLHdCQUF3QkEsRUFBUUEsRUFBV0EsRUFBS0EsTUFDeEVBLElBQVNBLEVBQUxBLEVBQ0FBLE1BQU9BLEVBS1hBLEtBQUtBLEdBRkRBLEdBQU9BLEVBQ1BBLEVBQUlBLEVBQ0NBLEVBQU9BLEVBQUtBLEtBQU1BLEVBQU1BLEVBQUtBLE9BQVlBLEVBQUpBLEVBQVNBLElBQUtBLENBQ3hEQSxHQUFJQSxHQUFNQSxFQUFLQSxFQUNmQSxJQUFJQSxHQUFPQSxFQUFPQSxFQUFJQSxNQUNsQkEsS0FDSkEsSUFBV0EsRUFBSUEsT0FDZkEsR0FBUUEsRUFBSUEsTUFFaEJBLEdBQUlBLEdBQU1BLEVBQUtBLEVBQ2ZBLEtBQUtBLEVBQ0RBLE1BQU9BLEVBT1hBLEtBSkFBLEdBR0lBLEdBSEFBLEVBQU1BLEtBQUtBLElBQUlBLEVBQUdBLEtBQUtBLElBQUlBLEVBQUlBLEtBQUtBLE9BQVFBLEtBQUtBLE1BQU1BLEVBQUtBLEdBQVFBLEVBQUlBLE1BQVFBLEVBQUlBLEtBQUtBLFVBQ3pGQSxFQUFXQSxFQUFJQSxLQUFLQSxPQUFPQSxFQUFHQSxHQUczQkEsRUFBTUEsSUFBTUEsRUFBUUEsS0FBS0EsaUJBQWlCQSxFQUFVQSxFQUFJQSxNQUFNQSxPQUFTQSxHQUMxRUEsSUFDQUEsRUFBV0EsRUFBSUEsS0FBS0EsT0FBT0EsRUFBR0EsRUFJbENBLEtBREFBLEdBQUlBLEdBQVVBLEVBQ1BBLEVBQU1BLEVBQUlBLEtBQUtBLFNBQVdBLEVBQVFBLEtBQUtBLGlCQUFpQkEsRUFBVUEsRUFBSUEsTUFBTUEsT0FBU0EsR0FDeEZBLEVBQVVBLEVBQ1ZBLElBQ0FBLEVBQVdBLEVBQUlBLEtBQUtBLE9BQU9BLEVBQUdBLEVBR2xDQSxPQUFPQSxHQUFVQSxHQUdyQkwsRUFBQUEsVUFBQUEsbUJBQUFBLFNBQW9CQSxFQUEwQkEsR0FLMUNNLElBQUtBLEdBSkRBLEdBQVNBLEVBQU9BLGVBQ2hCQSxFQUFVQSxFQUNWQSxFQUFLQSxHQUFJQSxHQUFBQSxLQUFLQSxFQUFHQSxFQUFHQSxFQUFHQSxHQUN2QkEsRUFBaUJBLEVBQ1pBLEVBQVFBLEVBQVVBLE1BQU9BLEVBQUlBLEVBQUdBLEVBQU1BLEVBQU1BLE9BQVlBLEVBQUpBLEVBQVNBLElBQUtBLENBQ3ZFQSxHQUFJQSxHQUFPQSxFQUFNQSxFQUNqQkEsR0FBR0EsRUFBSUEsS0FBS0Esd0JBQXdCQSxFQUFRQSxFQUFXQSxFQUFLQSxPQUM1REEsRUFBR0EsT0FBU0EsRUFBS0EsTUFDakJBLEtBQUtBLEdBQUlBLEdBQU9BLEVBQUtBLEtBQU1BLEVBQUlBLEVBQUdBLEVBQU9BLEVBQUtBLE9BQVlBLEVBQUpBLEVBQVVBLElBQUtBLENBQ2pFQSxHQUFJQSxHQUFNQSxFQUFLQSxFQUNmQSxJQUFLQSxFQUFVQSxFQUFJQSxPQUFVQSxFQUV6QkEsTUFEQUEsR0FBR0EsR0FBS0EsS0FBS0EsaUJBQWlCQSxFQUFJQSxLQUFLQSxPQUFPQSxFQUFHQSxFQUFTQSxHQUFVQSxFQUFJQSxNQUFNQSxNQUN2RUEsQ0FFWEEsSUFBV0EsRUFBSUEsT0FDZkEsRUFBR0EsR0FBS0EsRUFBS0EsTUFFakJBLEVBQUdBLEdBQUtBLEVBQUtBLE9BQ2JBLEVBQWlCQSxFQUFLQSxPQUcxQkEsTUFEQUEsR0FBR0EsR0FBS0EsRUFDREEsR0FHWE4sRUFBQUEsVUFBQUEsZUFBQUEsU0FBZ0JBLEVBQTBCQSxHQUExQ08sR0FBQUEsR0FBQUEsSUFDSUEsS0FBSUEsRUFBT0EsVUFBWEEsQ0FFQUEsR0FBSUEsR0FBUUEsRUFBT0EsY0FDbkJBLEdBQU9BLE1BQU1BLFFBQVFBLFNBQUFBLEdqQmk2RmIsTWlCaDZGSkEsR0FBS0EsS0FBS0EsUUFBUUEsU0FBQUEsR0FDZEEsRUFBQUEsT0FBT0EsSUFBSUEsZUFBZUEsRUFBS0EsRUFBT0EsRUFBUUEsRUFBT0EsZ0JBQWlCQSxTQUFDQSxFQUFNQSxHQUFVQSxNQUFBQSxHQUFLQSxpQkFBaUJBLEVBQU1BLEVBQU1BLFFBQ3pIQSxHQUFTQSxFQUFJQSxXQUVyQkEsRUFBT0EsV0FBWUEsSUFHdkJQLEVBQUFBLFVBQUFBLHdCQUFBQSxTQUF5QkEsRUFBMEJBLEVBQXlCQSxHQUN4RVEsR0FBSUEsRUFBT0EsZ0JBQWtCQSxFQUFBQSxjQUFjQSxNQUFRQSxFQUFPQSxnQkFBa0JBLEVBQUFBLGNBQWNBLFNBQ2xGQSxFQUFPQSxlQUFpQkEsRUFBQUEsYUFBYUEsUUFBVUEsRUFBT0EsZUFBaUJBLEVBQUFBLGFBQWFBLEtBQ3hGQSxNQUFPQSxFQUNYQSxJQUFJQSxHQUFRQSxFQUFtQkEsRUFDL0JBLE9BQUlBLElBQWFBLEVBQ05BLEVBQ1BBLEVBQU9BLGdCQUFrQkEsRUFBQUEsY0FBY0EsUUFDL0JBLEVBQVFBLEdBQWFBLEVBQzFCQSxFQUFRQSxHQUduQlIsRUFBQUEsVUFBQUEsaUJBQUFBLFNBQWtCQSxFQUFjQSxHQUM1QlMsTUFBT0EsR0FBQUEsT0FBT0EsUUFBUUEsYUFBYUEsRUFBTUEsSUFFakRULElBekthRixHQUFBQSxrQkFBaUJBLEdBOUJuQjVVLEVBQUFBLEVBQUFBLE9BQUFBLEVBQUFBLFdBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQU1YNFUsUUFBQUEsR0FBcUdBLEdBQ2pHWSxPQUNJQSxJQUFLQSxFQUNMQSxPQUFpQkEsRUFBSUEsZ0JBSGJaLEVBQUFBLHFCQUFvQkEsR0FOekI1VSxFQUFBQSxFQUFBQSxPQUFBQSxFQUFBQSxXQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FXWDRVLEdBQUFBLEdBQUFBLFdBb0JJYSxRQUFBQSxLQW5CQUMsS0FBQUEsUUFDSUEsV0FBWUEsRUFBQUEsS0FBS0EsZUFDakJBLFNBQVVBLEVBQUFBLEtBQUtBLGFBQ2ZBLFlBQWFBLEVBQUFBLEtBQUtBLGdCQUNsQkEsVUFBV0EsRUFBQUEsS0FBS0EsY0FDaEJBLFdBQVlBLEVBQUFBLEtBQUtBLGVBQ2pCQSxnQkFBaUJBLEVBQUFBLGdCQUFnQkEsS0FDakNBLFNBQVVBLEdBQ1ZBLFdBQVlBLEtBQ1pBLG9CQUFxQkEsS0FDckJBLFdBQVlBLEtBQ1pBLG9CQUFxQkEsS0FDckJBLGNBQWNBLEVBQ2RBLEtBQU1BLEdBQUlBLEdBQUFBLEtBQ1ZBLEtBQU1BLElBTU5BLEtBQUtBLE9BMkJiRCxNQXhCSUEsR0FBQUEsVUFBQUEsS0FBQUEsV0FDSUUsS0FBS0EsaUJBS1RGLEVBQUFBLFVBQUFBLGNBQUFBLFNBQWVBLEdBQ1hHLE1BQUlBLE1BQUtBLGFBQ0VBLE1BQ1hBLEtBQUtBLGFBQWVBLEdBQVNBLEdBQUlBLEdBQUFBLElBQUlBLGFBQzlCQSxPQUtYSCxFQUFBQSxVQUFBQSxPQUFBQSxTQUFRQSxFQUEwQkEsR0FFOUJJLE1BREFBLE1BQUtBLGFBQWFBLE9BQU9BLEVBQVFBLEVBQVdBLEtBQUtBLFFBQzFDQSxLQUFLQSxPQUFPQSxLQUFLQSxRQUc1QkosRUFBQUEsVUFBQUEsZUFBQUEsV0FDSUssR0FBSUEsR0FBU0EsS0FBS0EsTUFDbEJBLE9BQU9BLEdBQUFBLEtBQUtBLFVBQVVBLEVBQU9BLEtBQU1BLEVBQU9BLFdBQVlBLEVBQU9BLFNBQVVBLEVBQU9BLFlBQWFBLEVBQU9BLFVBQVdBLEVBQU9BLGFBRTVITCxJQWhEYWIsR0FBQUEsWUFBV0EsR0FYYjVVLEVBQUFBLEVBQUFBLE9BQUFBLEVBQUFBLFdBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFLOEcsR0FBQUEsSUFBQUEsU0FBQUEsR0E2Q2hCaVAsR0FBQUEsR0FBQUEsU0FBQUEsR0FDSUMsUUFBQUEsS0FDSUMsRUFBQUEsS0FBQUEsTUFDQUEsS0FBS0EsU0FBU0Esb0JBQXFCQSxFQUFBQSxPQUFPQSxtQkFDckNBLFNBQVNBLGdCQUFpQkEsRUFBQUEsT0FBT0EsZUFDakNBLFNBQVNBLHFCQUFzQkEsRUFBQUEsT0FBT0Esb0JBQ3RDQSxTQUFTQSxtQkFBb0JBLEVBQUFBLE9BQU9BLGtCQUVwQ0EsU0FBU0EsbUJBQW9CQSxFQUFBQSxPQUFPQSxrQkFDcENBLFNBQVNBLGdCQUFpQkEsRUFBQUEsT0FBT0EsZUFDakNBLFNBQVNBLGtCQUFtQkEsRUFBQUEsT0FBT0EsaUJBQ25DQSxTQUFTQSxhQUFjQSxFQUFBQSxPQUFPQSxZQUM5QkEsU0FBU0EsbUJBQW9CQSxFQUFBQSxPQUFPQSxrQkFDcENBLFNBQVNBLFdBQVlBLEVBQUFBLE9BQU9BLFVBQzVCQSxTQUFTQSxtQkFBb0JBLEVBQUFBLE9BQU9BLGtCQUNwQ0EsU0FBU0Esa0JBQW1CQSxFQUFBQSxPQUFPQSxpQkFDbkNBLFNBQVNBLG1CQUFvQkEsRUFBQUEsT0FBT0Esa0JBQ3BDQSxTQUFTQSxrQkFBbUJBLEVBQUFBLE9BQU9BLGlCQTZEaERELE1BOUVvQ0EsV0FBQUEsRUFBQUEsR0FvQmhDQSxFQUFBQSxVQUFBQSxZQUFBQSxXQUNJRSxPQUNJQSxhQUFjQSxHQUFJQSxHQUFBQSxLQUNsQkEsVUFBV0EsR0FBSUEsR0FBQUEsS0FDZkEsVUFBV0EsR0FBSUEsR0FBQUEsS0FDZkEsVUFBV0EsR0FBSUEsR0FBQUEsS0FDZkEsVUFBV0EsR0FBSUEsR0FBQUEsS0FDZkEsVUFBV0EsR0FBSUEsR0FBQUEsS0FDZkEsWUFBYUEsR0FBSUEsR0FBQUEsS0FDakJBLGdCQUFnQkEsSUFJeEJGLEVBQUFBLFVBQUFBLGFBQUFBLFdBQ0lHLE9BQ0lBLFdBQVlBLEVBQ1pBLFFBQVNBLEVBQ1RBLFdBQVlBLEdBQUlBLEdBQUFBLEtBQ2hCQSxZQUFhQSxFQUFBQSxLQUFLQSxXQUNsQkEsV0FBWUEsR0FBSUEsR0FBQUEsS0FDaEJBLFdBQVlBLEdBQUlBLEdBQUFBLEtBQ2hCQSxlQUFnQkEsT0FDaEJBLGFBQWNBLEdBQUlBLEdBQUFBLE1BQ2xCQSxlQUFnQkEsRUFDaEJBLFlBQWFBLEVBQ2JBLFdBQVlBLEVBQ1pBLGFBQWNBLEVBQ2RBLFdBQVlBLElBSXBCSCxFQUFBQSxVQUFBQSxRQUFBQSxTQUFTQSxFQUFlQSxFQUFlQSxHQUNuQ0ksRUFBT0EsZUFBaUJBLEVBQU9BLFdBQWFBLEVBQU1BLFdBQ2xEQSxFQUFPQSxZQUFjQSxFQUFPQSxRQUFVQSxFQUFNQSxRQUU1Q0EsRUFBQUEsS0FBS0EsT0FBT0EsRUFBTUEsV0FBWUEsRUFBT0EsWUFDckNBLEVBQUFBLEtBQUtBLE9BQU9BLEVBQU1BLFdBQVlBLEVBQU9BLFlBQ3JDQSxFQUFBQSxLQUFLQSxPQUFPQSxFQUFNQSxXQUFZQSxFQUFPQSxZQUNyQ0EsRUFBT0EsZUFBaUJBLEVBQU1BLGVBQzlCQSxFQUFBQSxLQUFLQSxPQUFPQSxFQUFNQSxZQUFhQSxFQUFPQSxhQUN0Q0EsRUFBQUEsTUFBTUEsT0FBT0EsRUFBTUEsYUFBY0EsRUFBT0EsZUFHNUNKLEVBQUFBLFVBQUFBLE1BQUFBLFNBQU9BLEVBQWVBLEVBQWVBLEdBQ2pDSyxHQUFJQSxJQUFZQSxFQUFPQSxXQUFhQSxFQUFNQSxhQUFlQSxFQUFPQSxjQUNoRUEsR0FBT0EsV0FBYUEsRUFBV0EsRUFBQUEsV0FBV0EsYUFDMUNBLEVBQU9BLGFBQWVBLEVBQVdBLEVBQUFBLFdBQVdBLGVBQzVDQSxFQUFPQSxZQUFjQSxFQUFPQSxRQUFVQSxFQUFNQSxVQUFZQSxFQUFPQSxZQUMvREEsRUFBTUEsV0FBYUEsRUFBT0EsV0FDMUJBLEVBQU1BLFFBQVVBLEVBQU9BLFFBRXZCQSxFQUFBQSxLQUFLQSxPQUFPQSxFQUFPQSxXQUFZQSxFQUFNQSxZQUNyQ0EsRUFBQUEsS0FBS0EsT0FBT0EsRUFBT0EsV0FBWUEsRUFBTUEsWUFDckNBLEVBQUFBLEtBQUtBLE9BQU9BLEVBQU9BLFdBQVlBLEVBQU1BLFlBQ3JDQSxFQUFNQSxlQUFpQkEsRUFBT0EsZUFDOUJBLEVBQUFBLEtBQUtBLE9BQU9BLEVBQU9BLFlBQWFBLEVBQU1BLGFBQ3RDQSxFQUFBQSxNQUFNQSxPQUFPQSxFQUFPQSxhQUFjQSxFQUFNQSxlQUVoREwsR0E5RW9DRCxFQUFBQSxLQUFLQSxXQUE1QkEsR0FBQUEsZUFBY0EsR0E3Q1hqUCxFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQUFMOUcsRUFBQUEsRUFBQUEsT0FBQUEsRUFBQUEsV0FBUkEsVUFBQUEsWUNFUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQUsrSyxHQUFBQSxJQUFBQSxTQUFBQSxHQUNoQnVMLEdBQUFBLEdBQUFBLFNBQUFBLEdBQ0lDLFFBQUFBLEdBQWFBLEdBQ1RDLEVBQUFBLEtBQUFBLE1BQ0FBLEtBQUtBLGFBQWFBLGFBQWNBLFNBQUNBLEVBQTRCQSxFQUE0QkEsRUFBOEJBLEVBQXlCQSxHQUM1SUEsR0FBSUEsR0FBWUEsR0FBSUEsR0FBQUEsSUFDcEJBLEdBQUFBLEtBQUtBLE9BQU9BLEVBQU1BLFVBQVdBLEVBQzdCQSxJQUFJQSxHQUFNQSxFQUFJQSxnQkFBZ0JBLEVBRTlCQSxPQURBQSxHQUFBQSxLQUFLQSxPQUFPQSxFQUFLQSxFQUFNQSxlQUNoQkEsSUFHbkJELE1BWDZDQSxXQUFBQSxFQUFBQSxHQVc3Q0EsR0FYNkNELEVBQUFBLEtBQUtBLFFBQVFBLGVBQTdDQSxHQUFBQSx3QkFBdUJBLEdBRHBCdkwsRUFBQUEsRUFBQUEsVUFBQUEsRUFBQUEsY0FBTC9LLEVBQUFBLEVBQUFBLE9BQUFBLEVBQUFBLFdBQVJBLFVBQUFBLFlDRlAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFLOEcsR0FBQUEsSUFBQUEsU0FBQUEsR0E2QmhCMlAsR0FBQUEsR0FBQUEsU0FBQUEsR0FDSUMsUUFBQUEsS0FDSUMsRUFBQUEsS0FBQUEsTUFDQUEsS0FBS0EsU0FBU0EsV0FBWUEsRUFBQUEsT0FBT0EsVUFDNUJBLFNBQVNBLHFCQUFzQkEsRUFBQUEsT0FBT0Esb0JBQ3RDQSxTQUFTQSxnQkFBaUJBLEVBQUFBLE9BQU9BLGVBQ2pDQSxTQUFTQSxtQkFBb0JBLEVBQUFBLE9BQU9BLGtCQUNwQ0EsU0FBU0EsbUJBQW9CQSxFQUFBQSxPQUFPQSxrQkFDcENBLFNBQVNBLGtCQUFtQkEsRUFBQUEsT0FBT0EsaUJBQ25DQSxTQUFTQSxhQUFjQSxFQUFBQSxPQUFPQSxZQUM5QkEsU0FBU0EsbUJBQW9CQSxFQUFBQSxPQUFPQSxrQkFFcENBLFNBQVNBLGdCQUFpQkEsRUFBQUEsT0FBT0EsZUE2QzlDRCxNQXpEb0NBLFdBQUFBLEVBQUFBLEdBZWhDQSxFQUFBQSxVQUFBQSxZQUFBQSxXQUNJRSxPQUNJQSxjQUFlQSxHQUFJQSxHQUFBQSxPQUkzQkYsRUFBQUEsVUFBQUEsYUFBQUEsV0FDSUcsT0FDSUEsbUJBQW9CQSxHQUFJQSxHQUFBQSxLQUN4QkEsWUFBYUEsR0FBSUEsR0FBQUEsS0FDakJBLGFBQWNBLEdBQUlBLEdBQUFBLEtBQ2xCQSxXQUFZQSxFQUNaQSxRQUFTQSxFQUVUQSxlQUFnQkEsRUFDaEJBLFlBQWFBLEVBRWJBLFdBQVlBLEVBQ1pBLGFBQWNBLEVBQ2RBLFdBQVlBLElBSXBCSCxFQUFBQSxVQUFBQSxRQUFBQSxTQUFTQSxFQUFlQSxFQUFlQSxHQUNuQ0ksRUFBQUEsS0FBS0EsT0FBT0EsRUFBTUEsbUJBQW9CQSxFQUFPQSxvQkFDN0NBLEVBQUFBLEtBQUtBLE9BQU9BLEVBQU1BLFlBQWFBLEVBQU9BLGFBQ3RDQSxFQUFBQSxLQUFLQSxPQUFPQSxFQUFNQSxhQUFjQSxFQUFPQSxjQUN2Q0EsRUFBT0EsZUFBaUJBLEVBQU9BLFdBQWFBLEVBQU1BLFdBQ2xEQSxFQUFPQSxZQUFjQSxFQUFPQSxRQUFVQSxFQUFNQSxTQUdoREosRUFBQUEsVUFBQUEsTUFBQUEsU0FBT0EsRUFBZUEsRUFBZUEsR0FDakNLLEdBQUlBLElBQVlBLEVBQU9BLFdBQWFBLEVBQU1BLGFBQWVBLEVBQU9BLGNBQ2hFQSxHQUFPQSxXQUFhQSxFQUFXQSxFQUFBQSxXQUFXQSxhQUMxQ0EsRUFBT0EsYUFBZUEsRUFBV0EsRUFBQUEsV0FBV0EsZUFDNUNBLEVBQU9BLFlBQWNBLEVBQU9BLFFBQVVBLEVBQU1BLFVBQVlBLEVBQU9BLFlBQy9EQSxFQUFNQSxXQUFhQSxFQUFPQSxXQUMxQkEsRUFBTUEsUUFBVUEsRUFBT0EsUUFDdkJBLEVBQUFBLEtBQUtBLE9BQU9BLEVBQU9BLG1CQUFvQkEsRUFBTUEsb0JBQzdDQSxFQUFBQSxLQUFLQSxPQUFPQSxFQUFPQSxhQUFjQSxFQUFNQSxjQUN2Q0EsRUFBQUEsS0FBS0EsT0FBT0EsRUFBT0EsWUFBYUEsRUFBTUEsY0FFOUNMLEdBekRvQ0QsRUFBQUEsS0FBS0EsV0FBNUJBLEdBQUFBLGVBQWNBLEdBN0JYM1AsRUFBQUEsRUFBQUEsVUFBQUEsRUFBQUEsY0FBTDlHLEVBQUFBLEVBQUFBLE9BQUFBLEVBQUFBLFdBQVJBLFVBQUFBLFlDRVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFLK0ssR0FBQUEsSUFBQUEsU0FBQUEsR0FDaEJpTSxHQUFBQSxHQUFBQSxTQUFBQSxHQUNJQyxRQUFBQSxHQUFhQSxHQUNUQyxFQUFBQSxLQUFBQSxNQUNBQSxLQUFLQSxhQUFhQSxhQUFjQSxTQUFDQSxFQUE0QkEsRUFBNEJBLEVBQThCQSxFQUF5QkEsR0FDNUlBLEdBQUlBLEdBQWdCQSxHQUFJQSxHQUFBQSxJQUN4QkEsR0FBQUEsS0FBS0EsT0FBT0EsRUFBTUEsY0FBZUEsRUFDakNBLElBQUlBLEdBQU1BLEVBQUlBLGdCQUFnQkEsRUFFOUJBLE9BREFBLEdBQUFBLEtBQUtBLE9BQU9BLEVBQUtBLEVBQU9BLGNBQ2pCQSxJQUduQkQsTUFYNkNBLFdBQUFBLEVBQUFBLEdBVzdDQSxHQVg2Q0QsRUFBQUEsS0FBS0EsUUFBUUEsZUFBN0NBLEdBQUFBLHdCQUF1QkEsR0FEcEJqTSxFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQUFML0ssRUFBQUEsRUFBQUEsT0FBQUEsRUFBQUEsV0FBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQVNtWCxHQUFBQSxJQUFBQSxTQUFBQSxHQUlwQkMsR0FBQUEsR0FBQUEsU0FBQUEsR0FBQUMsUUFBQUEsS0FBbUNDLEVBQUFBLE1BQUFBLEtBQUFBLFdBa0JuQ0QsTUFsQm1DQSxXQUFBQSxFQUFBQSxHQUkvQkEsRUFBQUEsVUFBQUEsS0FBQUEsV0FDSUUsS0FBS0EsUUFBUUEsR0FBSUEsR0FBQUEsbUJBQ1pBLGVBQWVBLEVBQUFBLFVBQVVBLEVBQUFBLFFBQVFBLHVCQUNqQ0EsZUFBZUEsRUFBQUEsVUFBVUEsRUFBQUEsUUFBUUEsdUJBQ2pDQSxjQUFjQSxFQUFBQSxVQUFVQSxFQUFBQSxLQUFLQSxPQUFPQSxjQUFjQSxZQUFjQSxFQUFBQSxPQUFPQSxvQkFBc0JBLEVBQUFBLE9BQU9BLDBCQUNwR0EsZUFBZUEsRUFBQUEsVUFBVUEsRUFBQUEsUUFBUUEsc0JBRXRDQSxJQUFJQSxHQUFTQSxLQUFLQSxNQUNsQkEsR0FBT0EsUUFBVUEsR0FBSUEsR0FBQUEsVUFDckJBLEVBQU9BLGdCQUFrQkEsR0FBSUEsR0FBQUEsVUFDN0JBLEVBQU9BLGFBQWVBLEdBQUlBLEdBQUFBLGFBRTFCQSxFQUFBQSxVQUFNQSxLQUFJQSxLQUFBQSxPQUVsQkYsR0FsQm1DRCxFQUFBQSxLQUFLQSxRQUEzQkEsR0FBQUEsY0FBYUEsR0FKTkQsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBVG5YLEVBQUFBLEVBQUFBLFdBQUFBLEVBQUFBLGVBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFTbVgsR0FBQUEsSUFBQUEsU0FBQUEsR0FDcEJDLEdBQUFBLEdBQUFBLFNBQUFBLEdBQUFJLFFBQUFBLEtBQXVDQyxFQUFBQSxNQUFBQSxLQUFBQSxXQUNuQ0EsS0FBQUEsbUJBQW9CQSxFQUNwQkEsS0FBQUEsYUFBY0EsRUFjbEJELE1BaEJ1Q0EsV0FBQUEsRUFBQUEsR0FJbkNBLEVBQUFBLFVBQUFBLEtBQUFBLFNBQU1BLEdBQ0ZFLEdBQUlBLElBQVVBLEVBQ1ZBLEVBQVFBLElBQ1pBLFFBQ0lBLFFBQVNBLE9BQ1RBLEtBQU1BLFdBR0YsTUFGQXZQLE1BQUtELFFBQVcyRSxFQUEwQnhFLE9BQWhCeUUsRUFBTUMsUUFDaENGLEdBQVUsRUFDYSxNQUFoQjFFLEtBQUtELFdBSTVCc1AsR0FoQnVDSixFQUFBQSxLQUFLQSxZQUEvQkEsR0FBQUEsa0JBQWlCQSxHQURWRCxFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFUblgsRUFBQUEsRUFBQUEsV0FBQUEsRUFBQUEsZUFBUkEsVUFBQUEsWUNGUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQVNtWCxHQUFBQSxJQUFBQSxTQUFBQSxHQUlwQlEsR0FBQUEsR0FBQUEsU0FBQUEsR0FBQUMsUUFBQUEsS0FBa0NDLEVBQUFBLE1BQUFBLEtBQUFBLFdBcUJsQ0QsTUFyQmtDQSxXQUFBQSxFQUFBQSxHQUk5QkEsRUFBQUEsVUFBQUEsS0FBQUEsV0FDSUUsR0FBSUEsR0FBU0EsS0FBS0EsTUFDbEJBLEdBQU9BLFdBQWFBLEtBRXBCQSxLQUFLQSxRQUFRQSxHQUFJQSxHQUFBQSxrQkFDWkEsZUFBZUEsRUFBQUEsVUFBVUEsRUFBQUEsUUFBUUEsc0JBQ2pDQSxlQUFlQSxFQUFBQSxVQUFVQSxFQUFBQSxRQUFRQSxzQkFDakNBLGlCQUFpQkEsRUFBQUEsVUFBVUEsRUFBQUEsVUFBVUEsd0JBQ3JDQSxjQUFjQSxFQUFBQSxVQUFVQSxFQUFBQSxPQUFPQSxxQkFDL0JBLGVBQWVBLEVBQUFBLFVBQVVBLEVBQUFBLFFBQVFBLHNCQUN0Q0EsRUFBQUEsVUFBTUEsS0FBSUEsS0FBQUEsT0FHZEYsRUFBQUEsVUFBQUEsWUFBQUEsU0FBYUEsR0FFVEcsTUFEQUEsTUFBS0EsS0FBS0EsU0FBV0EsRUFDZEEsTUFFZkgsR0FyQmtDRCxFQUFBQSxLQUFLQSxRQUExQkEsR0FBQUEsYUFBWUEsQ0F1QnpCQSxJQUFjQSxJQUFkQSxTQUFjQSxHQUNWSyxRQUFBQSxHQUF3QkEsRUFBdUJBLEVBQWtCQSxHQUM3REMsR0FBSUEsR0FBbUJBLEVBQVFBLEtBQUtBLFlBQ2hDQSxLQUNBQSxFQUFHQSxLQUFLQSxRQUFVQSxNQUhWRCxFQUFBQSxPQUFNQSxHQURaTCxFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQTNCTVIsRUFBQUEsRUFBQUEsUUFBQUEsRUFBQUEsWUFBVG5YLEVBQUFBLEVBQUFBLFdBQUFBLEVBQUFBO0VBQVJBLFVBQUFBLFlDRVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFTbVgsR0FBQUEsSUFBQUEsU0FBQUEsR0FJcEJlLEdBQUFBLEdBQUFBLFNBQUFBLEdBQUFDLFFBQUFBLEtBQW1DQyxFQUFBQSxNQUFBQSxLQUFBQSxXQWNuQ0QsTUFkbUNBLFdBQUFBLEVBQUFBLEdBRy9CQSxFQUFBQSxVQUFBQSxLQUFBQSxXQUNJRSxLQUFLQSxlQUFlQSxFQUFBQSxVQUFVQSxFQUFBQSxRQUFRQSx1QkFDakNBLGVBQWVBLEVBQUFBLFVBQVVBLEVBQUFBLFFBQVFBLHVCQUNqQ0EsbUJBQW1CQSxFQUFBQSxVQUFVQSxFQUFBQSxZQUFZQSwyQkFDekNBLGlCQUFpQkEsRUFBQUEsVUFBVUEsRUFBQUEsVUFBVUEsd0JBRTFDQSxJQUFJQSxHQUFTQSxLQUFLQSxNQUNsQkEsR0FBT0EsaUJBQWtCQSxFQUV6QkEsRUFBQUEsVUFBTUEsS0FBSUEsS0FBQUEsT0FFbEJGLEdBZG1DRCxFQUFBQSxNQUFNQSxhQUE1QkEsR0FBQUEsY0FBYUEsQ0FlMUJBLElBQWNBLElBQWRBLFNBQWNBLEdBQ1ZJLFFBQUFBLEdBQXFCQSxFQUF1QkEsRUFBa0JBLEdBQzFEQyxFQUFrQkEsR0FHdEJELFFBQUFBLEdBQW9CQSxFQUF1QkEsRUFBa0JBLEdBQ3pERSxFQUFrQkEsR0FHdEJGLFFBQUFBLEdBQTJCQSxHQUN2QkcsR0FBSUEsR0FBS0EsRUFBUUEsS0FBS0EsWUFPdEJBLElBTklBLFlBQW1CQSxLQUFrQkEsSUFDckNBLEVBQVFBLE9BQU9BLFlBQWNBLEVBQUFBLFdBQVdBLGVBQ3hDQSxFQUFRQSxLQUFLQSxRQUFRQSxlQUFlQSxHQUNwQ0EsRUFBUUEscUJBR05BLFlBQWNBLEdBQXBCQSxDQUdBQSxHQUFJQSxHQUFLQSxFQUFRQSxPQUFPQSxVQUN4QkEsR0FBUUEsS0FBS0EsT0FBT0EsRUFBUUEsT0FBT0EsWUFBYUEsR0FFaERBLEVBQUdBLEVBQUlBLEVBQVFBLGlCQUFpQkEsZ0JBQWtCQSxFQUNsREEsRUFBR0EsRUFBSUEsRUFBUUEsaUJBQWlCQSxlQUFpQkEsRUFDN0NBLEVBQVFBLE9BQU9BLG9CQUNmQSxFQUFHQSxFQUFJQSxLQUFLQSxNQUFNQSxFQUFHQSxHQUNyQkEsRUFBR0EsRUFBSUEsS0FBS0EsTUFBTUEsRUFBR0EsR0FDckJBLEVBQUdBLE1BQVFBLEtBQUtBLE1BQU1BLEVBQUdBLE9BQ3pCQSxFQUFHQSxPQUFTQSxLQUFLQSxNQUFNQSxFQUFHQSxTQUU5QkEsRUFBUUEscUJBOUJJSCxFQUFBQSxLQUFJQSxFQUlKQSxFQUFBQSxJQUFHQSxHQUxUSixFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQW5CTWYsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBVG5YLEVBQUFBLEVBQUFBLFdBQUFBLEVBQUFBLGVBQVJBLFVBQUFBLFlDRlAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFTbVgsR0FBQUEsSUFBQUEsU0FBQUEsR0FLcEJ1QixHQUFBQSxHQUFBQSxTQUFBQSxHQUFBQyxRQUFBQSxLQUFvQ0MsRUFBQUEsTUFBQUEsS0FBQUEsV0FXcENELE1BWG9DQSxXQUFBQSxFQUFBQSxHQUdoQ0EsRUFBQUEsVUFBQUEsS0FBQUEsV0FDSUUsS0FBS0EsUUFBUUEsR0FBSUEsR0FBQUEsb0JBQ1pBLGVBQWVBLEVBQUFBLFVBQVVBLEVBQUFBLFFBQVFBLHdCQUV0Q0EsS0FBS0EsT0FBT0EsV0FBWUEsRUFFeEJBLEVBQUFBLFVBQU1BLEtBQUlBLEtBQUFBLE9BRWxCRixHQVhvQ0QsRUFBQUEsS0FBS0EsUUFBNUJBLEdBQUFBLGVBQWNBLEdBTFB2QixFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQUFUblgsRUFBQUEsRUFBQUEsV0FBQUEsRUFBQUEsZUFBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQVNtWCxHQUFBQSxJQUFBQSxTQUFBQSxHQUNwQnVCLEdBQUFBLEdBQUFBLFNBQUFBLEdBQ0lJLFFBQUFBLEtBQ0lDLEVBQUFBLEtBQUFBLE1BQ0FBLEtBQUtBLGFBQWNBLEVBQ25CQSxLQUFLQSxtQkFBb0JBLEVBRWpDRCxNQU53Q0EsV0FBQUEsRUFBQUEsR0FNeENBLEdBTndDSixFQUFBQSxLQUFLQSxZQUFoQ0EsR0FBQUEsbUJBQWtCQSxHQURYdkIsRUFBQUEsRUFBQUEsVUFBQUEsRUFBQUEsY0FBVG5YLEVBQUFBLEVBQUFBLFdBQUFBLEVBQUFBLGVBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFTbVgsR0FBQUEsSUFBQUEsU0FBQUEsSUFDcEI2QixTQUFZQSxHQUNSQyxFQUFBQSxFQUFBQSxLQUFBQSxHQUFBQSxPQUNBQSxFQUFBQSxFQUFBQSxNQUFBQSxHQUFBQSxRQUNBQSxFQUFBQSxFQUFBQSxLQUFBQSxHQUFBQSxRQUhRRCxFQUFBQSxlQUFBQSxFQUFBQSxpQkFBQUEsR0FBQUEsY0FEUTdCLEVBQUFBLEVBQUFBLE9BQUFBLEVBQUFBLFdBQVRuWCxFQUFBQSxFQUFBQSxXQUFBQSxFQUFBQSxlQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBU21YLEdBQUFBLElBQUFBLFNBQUFBLEdBS3BCNkIsR0FBQUEsR0FBQUEsU0FBQUEsR0FBQUUsUUFBQUEsS0FBaUNDLEVBQUFBLE1BQUFBLEtBQUFBLFdBaUJqQ0QsTUFqQmlDQSxXQUFBQSxFQUFBQSxHQUc3QkEsRUFBQUEsVUFBQUEsS0FBQUEsV0FDSUUsS0FBS0EsZUFBZUEsRUFBQUEsVUFBVUEsRUFBQUEsUUFBUUEscUJBQ2pDQSxlQUFlQSxFQUFBQSxVQUFVQSxFQUFBQSxRQUFRQSxxQkFDakNBLGlCQUFpQkEsRUFBQUEsVUFBVUEsRUFBQUEsVUFBVUEsdUJBQ3JDQSxjQUFjQSxFQUFBQSxVQUFVQSxFQUFBQSxPQUFPQSxtQkFFcENBLElBQUlBLEdBQVNBLEtBQUtBLE1BQ2xCQSxHQUFPQSxlQUFnQkEsRUFDdkJBLEVBQU9BLHFCQUNQQSxFQUFPQSxrQkFDUEEsRUFBT0EsVUFBWUEsRUFBQUEsa0JBRW5CQSxFQUFBQSxVQUFNQSxLQUFJQSxLQUFBQSxPQUVsQkYsR0FqQmlDRixFQUFBQSxNQUFNQSxhQUExQkEsR0FBQUEsWUFBV0EsQ0FtQnhCQSxJQUFjQSxJQUFkQSxTQUFjQSxHQUNWSyxRQUFBQSxHQUF5QkEsR0FDckJDLEdBQUlBLEdBQUtBLEVBQVFBLEtBQUtBLFlBQ2xCQSxhQUFjQSxJQUNkQSxFQUFHQSxvQkFDUEEsRUFBUUEsb0JBR1pELFFBQUFBLEdBQStCQSxFQUFzQkEsRUFBYUEsR0FDOURFLEVBQVFBLG9CQUNSQSxFQUFRQSxhQUdaRixRQUFBQSxHQUF3QkEsRUFBdUJBLEVBQVlBLEdBQ3ZERyxFQUFlQSxHQUduQkgsUUFBQUEsR0FBNEJBLEVBQXVCQSxFQUFZQSxHQUMzREksRUFBZUEsR0FHbkJKLFFBQUFBLEdBQXFCQSxFQUF1QkEsRUFBWUEsR0FDcERLLEVBQWVBLEdBR25CTCxRQUFBQSxHQUF5QkEsRUFBdUJBLEVBQVlBLEdBQ3hETSxFQUFlQSxHQWxCSE4sRUFBQUEsY0FBYUEsRUFLYkEsRUFBQUEsT0FBTUEsRUFJTkEsRUFBQUEsV0FBVUEsRUFJVkEsRUFBQUEsSUFBR0EsRUFJSEEsRUFBQUEsUUFBT0EsR0F6QmJMLEVBQUFBLEVBQUFBLFVBQUFBLEVBQUFBLGNBeEJNN0IsRUFBQUEsRUFBQUEsT0FBQUEsRUFBQUEsV0FBVG5YLEVBQUFBLEVBQUFBLFdBQUFBLEVBQUFBLGVBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFTbVgsR0FBQUEsSUFBQUEsU0FBQUEsR0FNcEI2QixRQUFBQSxLQUNJWSxPQUNJQSxhQUNBQSxjQUhRWixFQUFBQSxnQkFBZUEsR0FOWDdCLEVBQUFBLEVBQUFBLE9BQUFBLEVBQUFBLFdBQVRuWCxFQUFBQSxFQUFBQSxXQUFBQSxFQUFBQSxlQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBU21YLEdBQUFBLElBQUFBLFNBQUFBLEdBQ3BCNkIsR0FBQUEsR0FBQUEsV0FBQWEsUUFBQUEsS0FDSUMsS0FBQUEsUUFBa0JBLEVBQ2xCQSxLQUFBQSxRQUFrQkEsRUFDbEJBLEtBQUFBLFNBQW1CQSxFQUNuQkEsS0FBQUEsSUFBY0EsRUFDZEEsS0FBQUEsSUFBY0EsT0FBT0Esa0JBQ3JCQSxLQUFBQSxNQUFnQkEsRUFDaEJBLEtBQUFBLEtBQVFBLEVBQUFBLGFBQWFBLE1BeUJ6QkQsTUF2QklBLEdBQUFBLFVBQUFBLE1BQUFBLFNBQU9BLEdBQ0hFLE1BQUlBLEdBQVFBLEtBQUtBLElBQ05BLEtBQUtBLElBQ1pBLEVBQVFBLEtBQUtBLElBQ05BLEtBQUtBLElBQ1RBLEdBR0pGLEVBQUFBLEtBQVBBLFNBQWFBLEVBQWtCQSxFQUFrQkEsRUFBY0EsRUFBY0EsR0FhekVHLE1BWkFBLEdBQVFBLFFBQVVBLEVBQ2xCQSxFQUFRQSxNQUFRQSxFQUNoQkEsRUFBUUEsUUFBVUEsR0FBV0EsRUFDN0JBLEVBQVFBLElBQU1BLEdBQU9BLEVBQ3JCQSxFQUFRQSxJQUFhQSxNQUFQQSxFQUFjQSxFQUFNQSxPQUFPQSxrQkFDekNBLEVBQVFBLEtBQW1CQSxNQUFaQSxFQUFtQkEsRUFBV0EsRUFBQUEsYUFBYUEsTUFFdERBLEVBQVFBLFFBQVVBLEVBQ2xCQSxFQUFRQSxRQUFVQSxFQUNiQSxFQUFRQSxRQUFVQSxJQUN2QkEsRUFBUUEsUUFBVUEsR0FFZkEsR0FFZkgsSUFoQ2FiLEdBQUFBLFFBQU9BLEdBREE3QixFQUFBQSxFQUFBQSxPQUFBQSxFQUFBQSxXQUFUblgsRUFBQUEsRUFBQUEsV0FBQUEsRUFBQUEsZUFBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQVNtWCxHQUFBQSxJQUFBQSxTQUFBQSxHQUlwQjhDLEdBQUFBLEdBQUFBLFNBQUFBLEdBQUFDLFFBQUFBLEtBQWtDQyxFQUFBQSxNQUFBQSxLQUFBQSxXQXdCbENELE1BeEJrQ0EsV0FBQUEsRUFBQUEsR0FHOUJBLEVBQUFBLFVBQUFBLEtBQUFBLFdBQ0lFLEtBQUtBLGVBQWVBLEVBQUFBLFVBQVVBLEVBQUFBLFFBQVFBLHNCQUNqQ0EsZUFBZUEsRUFBQUEsVUFBVUEsRUFBQUEsUUFBUUEsc0JBQ2pDQSxtQkFBbUJBLEVBQUFBLFVBQVVBLEVBQUFBLFlBQVlBLDBCQUN6Q0EsY0FBY0EsRUFBQUEsVUFBVUEsRUFBQUEsT0FBT0EscUJBQy9CQSxlQUFlQSxFQUFBQSxVQUFVQSxFQUFBQSxRQUFRQSxxQkFFdENBLElBQUlBLEdBQVNBLEtBQUtBLE1BQ2xCQSxHQUFPQSxPQUFTQSxLQUNoQkEsRUFBT0EsUUFBVUEsRUFBQUEsUUFBUUEsUUFDekJBLEVBQU9BLFFBQVVBLEVBQUFBLFlBQVlBLEdBQzdCQSxFQUFPQSxTQUFXQSxFQUFBQSxLQUFLQSxXQUV2QkEsRUFBQUEsVUFBTUEsS0FBSUEsS0FBQUEsT0FHZEYsRUFBQUEsVUFBQUEsa0JBQUFBLFdBR0lHLE1BRkFBLE1BQUtBLE9BQU9BLFlBQWNBLEVBQUFBLFdBQVdBLGFBQ3JDQSxFQUFBQSxLQUFLQSxRQUFRQSxlQUFlQSxNQUNyQkEsTUFFZkgsR0F4QmtDRCxFQUFBQSxLQUFLQSxRQUExQkEsR0FBQUEsYUFBWUEsR0FKTDlDLEVBQUFBLEVBQUFBLFFBQUFBLEVBQUFBLFlBQVRuWCxFQUFBQSxFQUFBQSxXQUFBQSxFQUFBQSxlQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBU21YLEdBQUFBLElBQUFBLFNBQUFBLEdBTXBCbUQsR0FBQUEsR0FBQUEsU0FBQUEsR0FBQUMsUUFBQUEsS0FBb0NDLEVBQUFBLE1BQUFBLEtBQUFBLFdBa0RwQ0QsTUFsRG9DQSxXQUFBQSxFQUFBQSxHQUloQ0EsRUFBQUEsVUFBQUEsS0FBQUEsV0FDSUUsS0FBS0EsUUFBUUEsR0FBSUEsR0FBQUEsb0JBQ1pBLGlCQUFpQkEsRUFBQUEsVUFBVUEsRUFBQUEsVUFBVUEsMEJBQ3JDQSxlQUFlQSxFQUFBQSxVQUFVQSxFQUFBQSxRQUFRQSx1QkFFdENBLElBQUlBLEdBQVNBLEtBQUtBLE1BQ2xCQSxHQUFPQSxXQUFZQSxFQUNuQkEsRUFBT0EsUUFBU0EsRUFFaEJBLEVBQUFBLFVBQU1BLEtBQUlBLEtBQUFBLE9BR2RGLEVBQUFBLFVBQUFBLGFBQUFBLFNBQWNBLEdBQ1ZHLEtBQUtBLEtBQUtBLGlCQUFtQkEsRUFBVUEsS0FBS0EsU0FHaERILEVBQUFBLFVBQUFBLFNBQUFBLFNBQVVBLEdBQ05JLEtBQUtBLE9BQ0xBLEtBQUtBLEtBQUtBLE1BQVFBLEVBQ2RBLEtBQUtBLE9BQU9BLFFBQ1pBLEtBQUtBLFFBR2JKLEVBQUFBLFVBQUFBLEtBQUFBLFdBQ0lLLEdBQUlBLEdBQVFBLEtBQUtBLEtBQUtBLEtBQ3RCQSxLQUFLQSxLQUFLQSxPQUFPQSxZQUFjQSxFQUMzQkEsT0FBT0EsQ0FDWEEsTUFBS0EsT0FBT0EsV0FBWUEsQ0FDeEJBLElBQUlBLEdBQVVBLEtBQUtBLEtBQUtBLGdCQUN4QkEsT0FBS0EsSUFFTEEsRUFBUUEsWUFBWUEsSUFDYkEsSUFGSUEsR0FLZkwsRUFBQUEsVUFBQUEsS0FBQUEsV0FDSU0sR0FBSUEsR0FBUUEsS0FBS0EsS0FBS0EsS0FDdEJBLElBQUlBLEtBQUtBLE9BQU9BLFlBQWNBLEVBQzFCQSxPQUFPQSxDQUNYQSxNQUFLQSxPQUFPQSxXQUFZQSxDQUN4QkEsSUFBSUEsR0FBVUEsS0FBS0EsS0FBS0EsZ0JBQ3hCQSxPQUFLQSxJQUVMQSxFQUFRQSxZQUFZQSxJQUNiQSxJQUZJQSxHQUluQk4sR0FsRG9DRCxFQUFBQSxLQUFLQSxRQUE1QkEsR0FBQUEsZUFBY0EsQ0FvRDNCQSxJQUFjQSxJQUFkQSxTQUFjQSxHQUNWUSxRQUFBQSxHQUF3QkEsRUFBeUJBLEVBQW1CQSxHQUMvREMsS0FBYUEsRUFBUUEsRUFBUUEsT0FBU0EsRUFBUUEsT0FEbkNELEVBQUFBLE9BQU1BLEdBRFpSLEVBQUFBLEVBQUFBLFVBQUFBLEVBQUFBLGNBMURNbkQsRUFBQUEsRUFBQUEsVUFBQUEsRUFBQUEsY0FBVG5YLEVBQUFBLEVBQUFBLFdBQUFBLEVBQUFBLGVBQVJBLFVBQUFBLFlDRVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFTbVgsR0FBQUEsSUFBQUEsU0FBQUEsR0FDcEJtRCxHQUFBQSxHQUFBQSxTQUFBQSxHQUFBVSxRQUFBQSxLQUF3Q0MsRUFBQUEsTUFBQUEsS0FBQUEsV0FDcENBLEtBQUFBLE1BQXNCQSxPQUN0QkEsS0FBQUEsaUJBQWtDQSxPQUN0Q0QsTUFId0NBLFdBQUFBLEVBQUFBLEdBR3hDQSxHQUh3Q1YsRUFBQUEsS0FBS0EsWUFBaENBLEdBQUFBLG1CQUFrQkEsR0FEWG5ELEVBQUFBLEVBQUFBLFVBQUFBLEVBQUFBLGNBQVRuWCxFQUFBQSxFQUFBQSxXQUFBQSxFQUFBQSxlQUFSQSxVQUFBQSxZQ0ZQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBU21YLEdBQUFBLElBQUFBLFNBQUFBLEdBeUNwQlEsUUFBQUEsR0FBMkNBLEVBQVVBLEdBQ2pEdUQsR0FFSUEsR0FGQUEsRUFBTUEsRUFBSUEsT0FDVkEsR0FBaUJBLEtBQU1BLE9BQVdBLFFBQVNBLE9BeUIvQ0EsT0F2QklBLElBQ0FBLEVBQVFBLEVBQ1JBLEVBQUVBLEtBQU9BLFdBRUwsTUFEQUMsS0FDWSxFQUFSQSxHQUNBQyxFQUFFbFQsUUFBVUcsUUFDTCxJQUVYK1MsRUFBRWxULFFBQVVtVCxFQUFJRixJQUNULE1BR1hELEVBQVFBLEdBQ1JBLEVBQUVBLEtBQU9BLFdBRUwsTUFEQUMsS0FDSUEsR0FBU0csR0FDVEYsRUFBRWxULFFBQVVHLFFBQ0wsSUFFWCtTLEVBQUVsVCxRQUFVbVQsRUFBSUYsSUFDVCxLQUdSRCxFQUdYdkQsUUFBQUEsR0FBeUJBLEVBQW9CQSxHQUN6QzRELEdBQUlBLEdBQU1BLEVBQUtBLGlCQUFpQkEsZ0JBQzVCQSxFQUFNQSxFQUFLQSxpQkFBaUJBLGVBQ2hDQSxJQUFXQSxNQUFQQSxHQUFzQkEsTUFBUEEsRUFDZkEsRUFBTUEsRUFBS0EsaUJBQWlCQSxlQUM1QkEsRUFBTUEsRUFBS0EsaUJBQWlCQSxtQkFDekJBLENBQUFBLEdBQVdBLE1BQVBBLEVBQ1BBLE1BQU9BLEdBQU1BLEVBQUlBLEdBQUtBLENBQ25CQSxJQUFXQSxNQUFQQSxFQUNQQSxNQUFPQSxHQUFNQSxFQUFJQSxFQUFJQSxHQUV6QkEsTUFBT0EsS0FBUUEsRUFBTUEsRUFBWUEsRUFBTkEsRUFBYUEsR0FBS0EsRUFqRmpENUQsR0FBQUEsR0FBQUEsU0FBQUEsR0FJSTZELFFBQUFBLEtBQ0lDLEVBQUFBLEtBQUFBLE1BSkpBLEtBQUFBLFNBQTJCQSxLQUMzQkEsS0FBQUEsUUFBMEJBLEtBSXRCQSxLQUFLQSxhQUFjQSxFQUNuQkEsS0FBS0EsbUJBQW9CQSxFQStCakNELE1BdENzQ0EsV0FBQUEsRUFBQUEsR0FVbENBLEVBQUFBLFVBQUFBLEtBQUFBLFNBQU1BLEdBQ0ZFLE1BQUlBLEtBQWNBLEVBQUFBLGNBQWNBLFVBQVlBLElBQWNBLEVBQUFBLGNBQWNBLFVBQ3BFQSxLQUFLQSxRQUNFQSxFQUFVQSxLQUFLQSxRQUFTQSxJQUFjQSxFQUFBQSxjQUFjQSxXQUV4REEsRUFBVUEsS0FBS0EsU0FBVUEsSUFBY0EsRUFBQUEsY0FBY0EsVUFHaEVGLEVBQUFBLFVBQUFBLE1BQUFBLFdBQ0lHLEdBQUlBLEdBQUtBLEtBQUtBLE9BQ2RBLEtBQUlBLEVBQUpBLENBRUFBLEVBQUtBLEtBQUtBLFVBQ1ZBLEtBQUtBLEdBQUlBLEdBQUlBLEVBQUdBLEVBQVNBLEtBQUtBLE9BQVFBLEVBQU9BLE9BQVFBLElBQUtBLENBQ3REQSxHQUFJQSxHQUFNQSxFQUFPQSxPQUNqQkEsR0FBSUEsaUJBQWlCQSxjQUFlQSxHQUNwQ0EsRUFBR0EsS0FBS0EsR0FFWkEsRUFBR0EsS0FBS0EsS0FHWkgsRUFBQUEsVUFBQUEsZ0JBQUFBLFNBQWlCQSxHQUNiSSxLQUFLQSxRQUFVQSxNQUduQkosRUFBQUEsVUFBQUEsZ0JBQUFBLFNBQWlCQSxHQUNiSyxLQUFLQSxRQUFVQSxNQUV2QkwsR0F0Q3NDN0QsRUFBQUEsS0FBS0EsWUFBOUJBLEdBQUFBLGlCQUFnQkEsR0FEVFIsRUFBQUEsRUFBQUEsUUFBQUEsRUFBQUEsWUFBVG5YLEVBQUFBLEVBQUFBLFdBQUFBLEVBQUFBLGVBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFTbVgsR0FBQUEsSUFBQUEsU0FBQUEsR0FNcEIyRSxHQUFBQSxHQUFBQSxTQUFBQSxHQUFBQyxRQUFBQSxLQUFrQ0MsRUFBQUEsTUFBQUEsS0FBQUEsV0FnRWxDRCxNQWhFa0NBLFdBQUFBLEVBQUFBLEdBSTlCQSxFQUFBQSxVQUFBQSxLQUFBQSxXQUNJRSxLQUFLQSxRQUFRQSxHQUFJQSxHQUFBQSxrQkFDWkEsbUJBQW1CQSxFQUFBQSxVQUFVQSxFQUFBQSxZQUFZQSwwQkFDekNBLGlCQUFpQkEsRUFBQUEsVUFBVUEsRUFBQUEsVUFBVUEsd0JBQ3JDQSxlQUFlQSxFQUFBQSxVQUFVQSxFQUFBQSxRQUFRQSxxQkFFdENBLElBQUlBLEdBQVNBLEtBQUtBLE1BQ2xCQSxHQUFPQSxpQkFBbUJBLEVBQzFCQSxFQUFPQSxlQUFpQkEsRUFDeEJBLEVBQU9BLFdBQVlBLEVBQ25CQSxFQUFPQSxRQUFTQSxFQUVoQkEsRUFBQUEsVUFBTUEsS0FBSUEsS0FBQUEsT0FHZEYsRUFBQUEsVUFBQUEsYUFBQUEsU0FBY0EsR0FDVkcsS0FBS0EsS0FBS0EsaUJBQW1CQSxFQUFVQSxLQUFLQSxTQUdoREgsRUFBQUEsVUFBQUEsU0FBQUEsU0FBVUEsR0FDTkksR0FBSUEsR0FBTUEsS0FBS0EsS0FBS0EsVUFDaEJBLEtBQ0FBLEVBQUlBLE9BQU9BLGFBQWVBLE1BRTlCQSxLQUFLQSxLQUFLQSxXQUFhQSxFQUNuQkEsSUFDQUEsRUFBTUEsT0FBT0EsYUFBZUEsRUFBQUEsS0FBS0EsYUFJekNKLEVBQUFBLFVBQUFBLFNBQUFBLFNBQVVBLEdBQ05LLEtBQUtBLE9BQ0xBLEtBQUtBLEtBQUtBLE1BQVFBLEVBQ2RBLEtBQUtBLE9BQU9BLFFBQ1pBLEtBQUtBLFFBR2JMLEVBQUFBLFVBQUFBLEtBQUFBLFdBQ0lNLEdBQUlBLEdBQVFBLEtBQUtBLEtBQUtBLEtBQ3RCQSxLQUFLQSxLQUFLQSxPQUFPQSxZQUFjQSxFQUMzQkEsT0FBT0EsQ0FDWEEsTUFBS0EsT0FBT0EsV0FBWUEsQ0FDeEJBLElBQUlBLEdBQVVBLEtBQUtBLEtBQUtBLGdCQUN4QkEsT0FBS0EsSUFFTEEsRUFBUUEsWUFBWUEsSUFDYkEsSUFGSUEsR0FLZk4sRUFBQUEsVUFBQUEsS0FBQUEsV0FDSU8sR0FBSUEsR0FBUUEsS0FBS0EsS0FBS0EsS0FDdEJBLElBQUlBLEtBQUtBLE9BQU9BLFlBQWNBLEVBQzFCQSxPQUFPQSxDQUNYQSxNQUFLQSxPQUFPQSxXQUFZQSxDQUN4QkEsSUFBSUEsR0FBVUEsS0FBS0EsS0FBS0EsZ0JBQ3hCQSxPQUFLQSxJQUVMQSxFQUFRQSxZQUFZQSxJQUNiQSxJQUZJQSxHQUluQlAsR0FoRWtDRCxFQUFBQSxLQUFLQSxRQUExQkEsR0FBQUEsYUFBWUEsQ0FrRXpCQSxJQUFjQSxJQUFkQSxTQUFjQSxHQUNWUyxRQUFBQSxHQUF3QkEsRUFBdUJBLEVBQW1CQSxHQUM3REMsS0FBYUEsRUFBUUEsRUFBUUEsT0FBU0EsRUFBUUEsT0FHbkRELFFBQUFBLEdBQWtDQSxFQUF1QkEsRUFBa0JBLEdBQ3ZFRSxHQUFJQSxHQUFPQSxFQUFRQSxLQUNmQSxFQUFRQSxFQUFLQSxVQUNqQkEsSUFBS0EsRUFBTEEsQ0FFQUEsR0FBSUEsR0FBU0EsRUFBV0EsQ0FDVEEsS0FBWEEsSUFFSkEsRUFBWUEsRUFBT0EsRUFBUUEsR0FDdkJBLEVBQUtBLE9BQ0xBLEVBQUtBLE1BQU1BLHNCQUduQkYsUUFBQUEsR0FBZ0NBLEVBQXVCQSxFQUFrQkEsR0FDckVHLEdBQUlBLEdBQU9BLEVBQVFBLEtBQ2ZBLEVBQVFBLEVBQUtBLFVBQ2pCQSxJQUFLQSxFQUFMQSxDQUVBQSxHQUFJQSxHQUFTQSxFQUFXQSxDQUNUQSxLQUFYQSxJQUVKQSxFQUFZQSxFQUFPQSxFQUFHQSxHQUNsQkEsRUFBS0EsT0FDTEEsRUFBS0EsTUFBTUEsc0JBR25CSCxRQUFBQSxHQUFzQkEsRUFBcUJBLEVBQWdCQSxHQUNuREksRUFBTUEsT0FBT0EsY0FDYkEsRUFBQUEsS0FBS0EsVUFBVUEsRUFBTUEsT0FBT0EsYUFBY0EsRUFBUUEsR0FoQzFDSixFQUFBQSxPQUFNQSxFQUlOQSxFQUFBQSxpQkFBZ0JBLEVBYWhCQSxFQUFBQSxlQUFjQSxHQWxCcEJULEVBQUFBLEVBQUFBLFVBQUFBLEVBQUFBLGNBeEVNM0UsRUFBQUEsRUFBQUEsUUFBQUEsRUFBQUEsWUFBVG5YLEVBQUFBLEVBQUFBLFdBQUFBLEVBQUFBLGVBQVJBLFVBQUFBLFlDRVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFTbVgsR0FBQUEsSUFBQUEsU0FBQUEsR0FDcEIyRSxHQUFBQSxHQUFBQSxTQUFBQSxHQUFBYyxRQUFBQSxLQUFzQ0MsRUFBQUEsTUFBQUEsS0FBQUEsV0FDbENBLEtBQUFBLFdBQTJCQSxPQUMzQkEsS0FBQUEsTUFBc0JBLE9BQ3RCQSxLQUFBQSxpQkFBa0NBLE9BQ3RDRCxNQUpzQ0EsV0FBQUEsRUFBQUEsR0FJdENBLEdBSnNDZCxFQUFBQSxLQUFLQSxZQUE5QkEsR0FBQUEsaUJBQWdCQSxHQURUM0UsRUFBQUEsRUFBQUEsUUFBQUEsRUFBQUEsWUFBVG5YLEVBQUFBLEVBQUFBLFdBQUFBLEVBQUFBLGVBQVJBLFVBQUFBLFlDRlAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFTbVgsR0FBQUEsSUFBQUEsU0FBQUEsR0FDcEIyRixHQUFjQSxJQUFkQSxTQUFjQSxHQUNWQyxRQUFBQSxHQUE4QkEsR0FDMUJDLEdBQUlBLElBQVVBLEVBRVZBLEVBQVNBLEVBQWdCQSxFQUFJQSxFQUFHQSxjQUMvQkEsR0FBU0EsRUFBUUEsRUFBR0EsV0FDckJBLEVBQUdBLFFBQVVBLEVBQ2JBLEdBQVVBLEVBR2RBLElBQUlBLEdBQVNBLEVBQWNBLEVBQUlBLEVBQUdBLGNBTWxDQSxPQUxLQSxHQUFTQSxFQUFRQSxFQUFHQSxXQUNyQkEsRUFBR0EsUUFBVUEsRUFDYkEsR0FBVUEsR0FHUEEsRUFJWEQsUUFBQUEsR0FBMEJBLEVBQWlCQSxHQUN2Q0UsTUFBS0EsR0FBR0Esc0JBRURBLEtBQUtBLElBQUlBLEVBQUdBLEtBQUtBLElBQUlBLEVBQUdBLEVBQUdBLFlBQWNBLEVBQUdBLGdCQUR4Q0EsRUFJZkYsUUFBQUEsR0FBd0JBLEVBQWlCQSxHQUNyQ0csTUFBS0EsR0FBR0Esb0JBRURBLEtBQUtBLElBQUlBLEVBQUdBLEtBQUtBLElBQUlBLEVBQUdBLEVBQUdBLGFBQWVBLEVBQUdBLGlCQUR6Q0EsRUFPZkgsUUFBQUEsR0FBbUJBLEVBQWNBLEdBQzdCSSxHQUFJQSxJQUFTQSxFQUNUQSxPQUFPQSxDQUNYQSxJQUFJQSxJQUFZQSxLQUFLQSxJQUFJQSxHQUFRQSxLQUFLQSxJQUFJQSxHQUFRQSxHQUFjQSxFQUM1REEsRUFBT0EsRUFBT0EsQ0FDbEJBLE9BQW1CQSxJQUFYQSxHQUEwQkEsRUFBUEEsRUF2Q2ZKLEVBQUFBLGFBQVlBLENBK0I1QkEsSUFBSUEsR0FBa0JBLFlBQ2xCQSxFQUFxQkEsSUFqQ2ZELEVBQUFBLEVBQUFBLFVBQUFBLEVBQUFBLGNBRE0zRixFQUFBQSxFQUFBQSx5QkFBQUEsRUFBQUEsNkJBQVRuWCxFQUFBQSxFQUFBQSxXQUFBQSxFQUFBQSxlQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBU21YLEdBQUFBLElBQUFBLFNBQUFBLEdBSXBCMkYsR0FBQUEsR0FBQUEsU0FBQUEsR0FBQU0sUUFBQUEsS0FBbURDLEVBQUFBLE1BQUFBLEtBQUFBLFdBNkJuREQsTUE3Qm1EQSxXQUFBQSxFQUFBQSxHQUcvQ0EsRUFBQUEsVUFBQUEsS0FBQUEsV0FDSUUsS0FBS0EsZUFBZUEsRUFBQUEsVUFBVUEsRUFBQUEsUUFBUUEsdUNBQ2pDQSxlQUFlQSxFQUFBQSxVQUFVQSxFQUFBQSxRQUFRQSx1Q0FDakNBLGNBQWNBLEVBQUFBLFVBQVVBLEVBQUFBLE9BQU9BLHFDQUVwQ0EsSUFBSUEsR0FBU0EsS0FBS0EsTUFDbEJBLEdBQU9BLGFBQWVBLEdBQUlBLEdBQUFBLEtBQzFCQSxFQUFPQSxZQUNIQSx1QkFBdUJBLEVBQ3ZCQSxxQkFBcUJBLEVBQ3JCQSxRQUFTQSxFQUNUQSxRQUFTQSxFQUNUQSxjQUFlQSxFQUNmQSxjQUFlQSxFQUNmQSxjQUFlQSxFQUNmQSxlQUFnQkEsRUFDaEJBLFlBQWFBLEVBQ2JBLGFBQWNBLEVBQ2RBLGdCQUFpQkEsRUFDakJBLGlCQUFrQkEsRUFDbEJBLFdBQVlBLGNBSWhCQSxFQUFBQSxVQUFNQSxLQUFJQSxLQUFBQSxPQUVsQkYsR0E3Qm1ETixFQUFBQSxLQUFLQSxRQUEzQ0EsR0FBQUEsOEJBQTZCQSxHQUp0QjNGLEVBQUFBLEVBQUFBLHlCQUFBQSxFQUFBQSw2QkFBVG5YLEVBQUFBLEVBQUFBLFdBQUFBLEVBQUFBLGVBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFTbVgsR0FBQUEsSUFBQUEsU0FBQUEsR0FHcEJvRyxHQUFBQSxHQUFBQSxTQUFBQSxHQUFBQyxRQUFBQSxLQUF1Q0MsRUFBQUEsTUFBQUEsS0FBQUEsV0FXdkNELE1BWHVDQSxXQUFBQSxFQUFBQSxHQUduQ0EsRUFBQUEsVUFBQUEsS0FBQUEsV0FDSUUsS0FBS0EsZUFBZUEsRUFBQUEsVUFBVUEsRUFBV0EsUUFBUUEsMkJBQzVDQSxlQUFlQSxFQUFBQSxVQUFVQSxFQUFXQSxRQUFRQSwyQkFFakRBLEtBQUtBLE9BQU9BLFlBQWNBLEVBQUFBLFlBQVlBLFNBRXRDQSxFQUFBQSxVQUFNQSxLQUFJQSxLQUFBQSxPQUVsQkYsR0FYdUNELEVBQUFBLE1BQU1BLGFBQWhDQSxHQUFBQSxrQkFBaUJBLEdBSFZwRyxFQUFBQSxFQUFBQSxhQUFBQSxFQUFBQSxpQkFBVG5YLEVBQUFBLEVBQUFBLFdBQUFBLEVBQUFBLGVBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFTbVgsR0FBQUEsSUFBQUEsU0FBQUEsR0FJcEJ3RyxHQUFBQSxHQUFBQSxTQUFBQSxHQUFBQyxRQUFBQSxLQUFzQ0MsRUFBQUEsTUFBQUEsS0FBQUEsV0FvRHRDRCxNQXBEc0NBLFdBQUFBLEVBQUFBLEdBSWxDQSxFQUFBQSxVQUFBQSxLQUFBQSxXQUNJRSxLQUFLQSxRQUFRQSxHQUFJQSxHQUFBQSxzQkFDWkEsZUFBZUEsRUFBQUEsVUFBVUEsRUFBQUEsUUFBUUEsMEJBQ2pDQSxlQUFlQSxFQUFBQSxVQUFVQSxFQUFBQSxRQUFRQSwwQkFDakNBLGlCQUFpQkEsRUFBQUEsVUFBVUEsRUFBQUEsVUFBVUEsNEJBQ3JDQSxjQUFjQSxFQUFBQSxVQUFVQSxFQUFBQSxPQUFPQSx5QkFDL0JBLGVBQWVBLEVBQUFBLFVBQVVBLEVBQUFBLFFBQVFBLDBCQUV0Q0EsS0FBS0EsYUFFTEEsSUFBSUEsR0FBU0EsS0FBS0EsTUFDbEJBLEdBQU9BLFFBQVVBLEdBQUlBLEdBQUFBLFVBQ3JCQSxFQUFPQSxlQUFpQkEsRUFDeEJBLEVBQU9BLGdCQUFrQkEsRUFDekJBLEVBQU9BLGFBQWVBLEVBQUFBLGFBQWFBLE9BQ25DQSxFQUFPQSxjQUFnQkEsRUFBQUEsY0FBY0EsS0FDckNBLEVBQU9BLGFBQWVBLEVBQUFBLGFBQWFBLEtBQ25DQSxFQUFPQSxxQkFBdUJBLEVBQUFBLHFCQUFxQkEsVUFDbkRBLEVBQU9BLFdBQWFBLElBRXBCQSxFQUFBQSxVQUFNQSxLQUFJQSxLQUFBQSxPQUdkRixFQUFBQSxVQUFBQSxZQUFBQSxTQUFhQSxHQUNURyxNQUFJQSxNQUFLQSxLQUFLQSxJQUNIQSxNQUNYQSxLQUFLQSxLQUFLQSxJQUFNQSxFQUFBQSxLQUFLQSxxQkFBcUJBLEdBQVVBLEdBQUlBLEdBQUFBLEtBQUtBLG1CQUN0REEsT0FHWEgsRUFBQUEsVUFBQUEsZUFBQUEsU0FBZ0JBLEdBQ1JJLEtBQVNBLElBQ1RBLEtBQUtBLG9CQUNMQSxLQUFLQSxvQkFDTEEsS0FBS0EsY0FBYUEsSUFFdEJBLEtBQUtBLGNBR1RKLEVBQUFBLFVBQUFBLHNCQUFBQSxXQUNJSyxLQUFLQSxvQkFDTEEsS0FBS0Esb0JBQ0xBLEtBQUtBLGNBQWFBLEdBQ2xCQSxLQUFLQSxZQUNMQSxJQUFJQSxHQUFZQSxLQUFLQSxLQUFLQSxJQUFJQSxNQUM5QkEsR0FBVUEsWUFBY0EsSUFDeEJBLEVBQVVBLGFBQWVBLEtBRWpDTCxHQXBEc0NELEVBQUFBLEtBQUtBLFFBQTlCQSxHQUFBQSxpQkFBZ0JBLEdBSlR4RyxFQUFBQSxFQUFBQSxZQUFBQSxFQUFBQSxnQkFBVG5YLEVBQUFBLEVBQUFBLFdBQUFBLEVBQUFBLGVBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFTbVgsR0FBQUEsSUFBQUEsU0FBQUEsR0FZcEJ3RyxHQUFBQSxHQUFBQSxTQUFBQSxHQUFBTyxRQUFBQSxLQUEwQ0MsRUFBQUEsTUFBQUEsS0FBQUEsV0FFdENBLEtBQUFBLFlBdURKRCxNQXpEMENBLFdBQUFBLEVBQUFBLEdBSXRDQSxFQUFBQSxVQUFBQSxZQUFBQSxTQUFhQSxFQUFlQSxHQUN4QkUsTUFBT0EsTUFBS0EsSUFBSUEsSUFBSUEsWUFBWUEsRUFBUUEsS0FBS0EsSUFBSUEsT0FBUUEsSUFHN0RGLEVBQUFBLFVBQUFBLE9BQUFBLFNBQVFBLEVBQWtCQSxHQUN0QkcsR0FBSUEsR0FBTUEsS0FBS0EsR0FFZkEsT0FEQUEsR0FBSUEsSUFBSUEsT0FBT0EsRUFBUUEsRUFBSUEsT0FBUUEsRUFBWUEsS0FBS0EsWUFDN0NBLEdBQUlBLEdBQUFBLEtBQUtBLEVBQUlBLE9BQU9BLFlBQWFBLEVBQUlBLE9BQU9BLGVBR3ZESCxFQUFBQSxVQUFBQSxPQUFBQSxTQUFRQSxFQUFnQ0EsR0FDcENJLEdBQUlBLEdBQU1BLEtBQUtBLEdBQ2ZBLEdBQUlBLElBQUlBLE9BQU9BLEVBQUtBLEVBQVFBLEVBQUlBLFNBR3BDSixFQUFBQSxVQUFBQSxrQkFBQUEsU0FBbUJBLEdBQ2ZLLEtBQUtBLElBQUlBLE9BQU9BLGVBQWlCQSxHQUdyQ0wsRUFBQUEsVUFBQUEsb0JBQUFBLFNBQXFCQSxHQUNqQk0sR0FBSUEsR0FBTUEsS0FBS0EsR0FDZkEsT0FBT0EsR0FBSUEsSUFBSUEsd0JBQXdCQSxFQUFRQSxFQUFJQSxPQUFRQSxFQUFJQSxPQUFPQSxjQUcxRU4sRUFBQUEsVUFBQUEsVUFBQUEsV0FDSU8sS0FBS0EsU0FBU0EsT0FBU0EsR0FHM0JQLEVBQUFBLFVBQUFBLFNBQUFBLFdBQ0lRLEdBQUlBLEdBQUlBLEdBQ0pBLEVBQVdBLEtBQUtBLFFBQ3BCQSxRQUNJQSxRQUFTQSxPQUNUQSxLQUFNQSxXQUdGLE1BRkF6USxLQUNBOUYsS0FBS0QsUUFBVXlXLEVBQVMxUSxHQUNBNUYsU0FBakJGLEtBQUtELFdBS3hCZ1csRUFBQUEsVUFBQUEsZUFBQUEsU0FBZ0JBLEVBQXlCQSxHQUN4QlUsTUFBVEEsR0FBeUJBLEVBQVJBLEdBQWFBLEdBQVNBLEtBQUtBLFNBQVNBLE9BQ3JEQSxLQUFLQSxTQUFTQSxLQUFLQSxHQUVuQkEsS0FBS0EsU0FBU0EsT0FBT0EsRUFBT0EsRUFBR0EsSUFHdkNWLEVBQUFBLFVBQUFBLGVBQUFBLFNBQWdCQSxHQUNaVyxHQUFJQSxHQUFRQSxLQUFLQSxTQUFTQSxRQUFRQSxFQUM5QkEsR0FBUUEsSUFDUkEsS0FBS0EsU0FBU0EsT0FBT0EsRUFBT0EsSUFFeENYLEdBekQwQ1AsRUFBQUEsS0FBS0EsWUFBbENBLEdBQUFBLHFCQUFvQkEsR0FaYnhHLEVBQUFBLEVBQUFBLFlBQUFBLEVBQUFBLGdCQUFUblgsRUFBQUEsRUFBQUEsV0FBQUEsRUFBQUEsZUFBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQVNtWCxHQUFBQSxJQUFBQSxTQUFBQSxHQUNwQjJILEdBQUlBLEdBQXVCQSxFQUN2QkEsRUFBOEJBLEVBQzlCQSxFQUFnQ0EsRUFDaENBLEVBQTZCQSxFQUM3QkEsRUFBK0JBLElBRW5DQSxFQUFBQSxXQVFJQyxRQUFBQSxHQUFhQSxHQVBiQyxLQUFBQSxXQUFxQkEsRUFDckJBLEtBQUFBLFdBQXFCQSxFQUViQSxLQUFBQSxjQUFnQkEsRUFDaEJBLEtBQUFBLFVBQVlBLEVBSWhCQSxLQUFLQSxXQUFhQSxFQXdEMUJELE1BckRJQSxHQUFBQSxVQUFBQSxNQUFBQSxXQUNJRSxLQUFLQSxjQUNMQSxLQUFLQSxTQUFTQSxHQUNkQSxLQUFLQSxTQUdURixFQUFBQSxVQUFBQSxNQUFBQSxXQUMyQkcsSUFBbkJBLEtBQUtBLFlBQ0xBLEtBQUtBLFNBQVNBLEdBQ2RBLEtBQUtBLFVBSWJILEVBQUFBLFVBQUFBLElBQUFBLFdBQ0lJLEtBQUtBLGNBQ0xBLEtBQUtBLFNBR0RKLEVBQUFBLFVBQUFBLFNBQVJBLFNBQWtCQSxHQUFsQkssR0FBQUEsR0FBQUEsS0FDUUEsRUFBUUEsS0FBS0EsY0FBZ0JBLEVBQWFBLENBQzlDQSxNQUFLQSxVQUFZQSxPQUFPQSxXQUFXQSxXQUFNQSxNQUFBQSxHQUFLQSxVQUFVQSxJQUdwREwsRUFBQUEsVUFBQUEsWUFBUkEsV0FDMkJNLElBQW5CQSxLQUFLQSxZQUNMQSxPQUFPQSxhQUFhQSxLQUFLQSxXQUN6QkEsS0FBS0EsVUFBWUEsSUFJakJOLEVBQUFBLFVBQUFBLE9BQVJBLFdBQ1FPLEtBQUtBLFdBQ0xBLEtBQUtBLFFBQ0xBLEtBQUtBLFNBQVNBLEtBRWRBLEtBQUtBLFFBQ0xBLEtBQUtBLFNBQVNBLEtBSWRQLEVBQUFBLFVBQUFBLE1BQVJBLFdBQ1FRLEtBQUtBLFlBRVRBLEtBQUtBLFdBQVlBLEVBQ2pCQSxLQUFLQSxZQUFjQSxLQUFLQSxZQUFXQSxLQUcvQlIsRUFBQUEsVUFBQUEsTUFBUkEsV0FDU1MsS0FBS0EsWUFFVkEsS0FBS0EsV0FBWUEsRUFDakJBLEtBQUtBLFlBQWNBLEtBQUtBLFlBQVdBLEtBRTNDVCxJQWpFYUQsR0FBQUEsUUFBT0EsR0FQQTNILEVBQUFBLEVBQUFBLGNBQUFBLEVBQUFBLGtCQUFUblgsRUFBQUEsRUFBQUEsV0FBQUEsRUFBQUEsZUFBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQVNtWCxHQUFBQSxJQUFBQSxTQUFBQSxHQU1wQjJILEdBQUFBLEdBQUFBLFNBQUFBLEdBQUFXLFFBQUFBLEtBQXdDQyxFQUFBQSxNQUFBQSxLQUFBQSxXQStHeENELE1BL0d3Q0EsV0FBQUEsRUFBQUEsR0FLcENBLEVBQUFBLFVBQUFBLEtBQUFBLFdBQUFFLEdBQUFBLEdBQUFBLElBQ0lBLE1BQUtBLFFBQVFBLEdBQUlBLEdBQUFBLHdCQUNaQSxlQUFlQSxFQUFBQSxVQUFVQSxFQUFBQSxRQUFRQSw0QkFDakNBLGVBQWVBLEVBQUFBLFVBQVVBLEVBQUFBLFFBQVFBLDRCQUNqQ0EsaUJBQWlCQSxFQUFBQSxVQUFVQSxFQUFBQSxVQUFVQSw4QkFDckNBLGNBQWNBLEVBQUFBLFVBQVVBLEVBQUFBLE9BQU9BLDJCQUMvQkEsZUFBZUEsRUFBQUEsVUFBVUEsRUFBQUEsUUFBUUEsNEJBRXRDQSxLQUFLQSxhQUVMQSxJQUFJQSxHQUFTQSxLQUFLQSxNQUNsQkEsR0FBT0EsZUFBaUJBLEVBQ3hCQSxFQUFPQSxnQkFBa0JBLEVBQ3pCQSxFQUFPQSxhQUFlQSxFQUFBQSxhQUFhQSxPQUNuQ0EsRUFBT0EsY0FBZ0JBLEVBQUFBLGNBQWNBLEtBQ3JDQSxFQUFPQSxxQkFBdUJBLEVBQUFBLHFCQUFxQkEsVUFDbkRBLEVBQU9BLFdBQWFBLElBRXBCQSxFQUFPQSxnQkFBaUJBLEVBQ3hCQSxFQUFPQSxXQUFhQSxLQUNwQkEsRUFBT0EsWUFBY0EsR0FBSUEsR0FBQUEsS0FDekJBLEVBQU9BLFlBQWFBLEVBRXBCQSxLQUFLQSxRQUFVQSxHQUFJQSxHQUFBQSxRQUFRQSxTQUFDQSxHQUN4QkEsRUFBS0EsT0FBT0EsZUFBaUJBLEVBQzdCQSxFQUFLQSxvQkFHVEEsRUFBQUEsVUFBTUEsS0FBSUEsS0FBQUEsT0FHZEYsRUFBQUEsVUFBQUEsWUFBQUEsU0FBYUEsR0FDVEcsTUFBSUEsTUFBS0EsS0FBS0EsSUFDSEEsTUFDWEEsS0FBS0EsS0FBS0EsSUFBTUEsRUFBQUEsS0FBS0EscUJBQXFCQSxHQUFVQSxHQUFJQSxHQUFBQSxLQUFLQSxtQkFDdERBLE9BR1hILEVBQUFBLFVBQUFBLG1CQUFBQSxTQUFvQkEsR0FDaEJJLEdBQUlBLEdBQU1BLEtBQUtBLEtBQUtBLEdBQ3BCQSxPQUFPQSxHQUFJQSxJQUFJQSxtQkFBbUJBLEVBQU9BLEtBQUtBLE9BQVFBLEVBQUlBLFNBRzlESixFQUFBQSxVQUFBQSxlQUFBQSxTQUFnQkEsR0FDUkssS0FBU0EsSUFDVEEsS0FBS0Esb0JBQ0xBLEtBQUtBLG9CQUNMQSxLQUFLQSxjQUFhQSxJQUV0QkEsS0FBS0EsY0FHVEwsRUFBQUEsVUFBQUEsc0JBQUFBLFdBS0lNLE1BSkFBLE1BQUtBLG9CQUNBQSxvQkFDQUEsY0FBYUEsR0FDYkEsYUFDRUEsTUFHWE4sRUFBQUEsVUFBQUEsa0JBQUFBLFdBQ0lPLEVBQUFBLFVBQU1BLGtCQUFpQkEsS0FBQUEsS0FDdkJBLElBQUlBLEdBQVlBLEtBQUtBLEtBQUtBLElBQUlBLE1BRzlCQSxPQUZBQSxHQUFVQSxZQUFjQSxJQUN4QkEsRUFBVUEsYUFBZUEsSUFDbEJBLE1BR1hQLEVBQUFBLFVBQUFBLGdCQUFBQSxXQUNJUSxHQUFJQSxHQUFTQSxLQUFLQSxPQUNkQSxFQUFTQSxHQUFJQSxHQUFBQSxJQUNqQkEsR0FBQUEsS0FBS0EsT0FBT0EsRUFBT0EsWUFBYUEsR0FDaENBLEVBQUFBLEtBQUtBLFVBQVVBLEVBQVFBLEVBQU9BLGVBQzlCQSxLQUFLQSxXQUFXQSxJQUdwQlIsRUFBQUEsVUFBQUEseUJBQUFBLFdBQ0lTLEtBQUtBLEtBQUtBLElBQUlBLE9BQU9BLFdBQVlBLEVBQ2pDQSxLQUFLQSx3QkFDTEEsS0FBS0EsbUJBQWtCQSxJQUczQlQsRUFBQUEsVUFBQUEsMEJBQUFBLFNBQTJCQSxHQUN2QlUsS0FBS0EsS0FBS0EsSUFBSUEsT0FBT0EsV0FBWUEsRUFDakNBLEtBQUtBLGFBQ0xBLEtBQUtBLGtCQUFrQkEsR0FDbkJBLEdBQ0FBLEtBQUtBLHlCQUdiVixFQUFBQSxVQUFBQSxzQkFBQUEsV0FDSVcsS0FBS0EsaUJBQ0xBLElBQUlBLEdBQUtBLEtBQUtBLE9BQU9BLFdBQ3JCQSxHQUFHQSxFQUFJQSxFQUFHQSxFQUFJQSxFQUFHQSxNQUFRQSxFQUFHQSxPQUFTQSxHQUd6Q1gsRUFBQUEsVUFBQUEsa0JBQUFBLFNBQW1CQSxHQUNmWSxHQUFJQSxHQUFTQSxLQUFLQSxPQUNkQSxFQUFVQSxLQUFLQSxPQUVuQkEsT0FBSUEsR0FBT0EsZ0JBQWtCQSxHQUFLQSxFQUFPQSxhQUFlQSxFQUFPQSxVQUNwREEsRUFBUUEsTUFDZkEsRUFDT0EsRUFBUUEsUUFDWkEsRUFBUUEsU0FFdkJaLEdBL0d3Q1gsRUFBQUEsS0FBS0EsUUFBaENBLEdBQUFBLG1CQUFrQkEsR0FOWDNILEVBQUFBLEVBQUFBLGNBQUFBLEVBQUFBLGtCQUFUblgsRUFBQUEsRUFBQUEsV0FBQUEsRUFBQUEsZUFBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQVNtWCxHQUFBQSxJQUFBQSxTQUFBQSxHQVlwQjJILEdBQUFBLEdBQUFBLFNBQUFBLEdBQUF3QixRQUFBQSxLQUE0Q0MsRUFBQUEsTUFBQUEsS0FBQUEsV0FFeENBLEtBQUFBLFlBNERKRCxNQTlENENBLFdBQUFBLEVBQUFBLEdBSXhDQSxFQUFBQSxVQUFBQSxZQUFBQSxTQUFhQSxFQUFlQSxHQUN4QkUsTUFBT0EsTUFBS0EsSUFBSUEsSUFBSUEsWUFBWUEsRUFBUUEsS0FBS0EsSUFBSUEsT0FBUUEsSUFHN0RGLEVBQUFBLFVBQUFBLE9BQUFBLFNBQVFBLEVBQWtCQSxHQUN0QkcsR0FBSUEsR0FBTUEsS0FBS0EsR0FFZkEsT0FEQUEsR0FBSUEsSUFBSUEsT0FBT0EsRUFBUUEsRUFBSUEsT0FBUUEsRUFBWUEsS0FBS0EsWUFDN0NBLEdBQUlBLEdBQUFBLEtBQUtBLEVBQUlBLE9BQU9BLFlBQWFBLEVBQUlBLE9BQU9BLGVBR3ZESCxFQUFBQSxVQUFBQSxPQUFBQSxTQUFRQSxFQUFnQ0EsR0FDcENJLEdBQUlBLEdBQU1BLEtBQUtBLEdBQ2ZBLEdBQUlBLElBQUlBLE9BQU9BLEVBQUtBLEVBQVFBLEVBQUlBLFNBR3BDSixFQUFBQSxVQUFBQSxrQkFBQUEsU0FBbUJBLEdBQ2ZLLEtBQUtBLElBQUlBLE9BQU9BLGVBQWlCQSxHQUdyQ0wsRUFBQUEsVUFBQUEsb0JBQUFBLFNBQXFCQSxHQUNqQk0sR0FBSUEsR0FBTUEsS0FBS0EsR0FDZkEsT0FBT0EsR0FBSUEsSUFBSUEsd0JBQXdCQSxFQUFRQSxFQUFJQSxPQUFRQSxFQUFJQSxPQUFPQSxjQUcxRU4sRUFBQUEsVUFBQUEsZUFBQUEsU0FBZ0JBLEdBQ1pPLEdBQUlBLEdBQU1BLEtBQUtBLEdBQ2ZBLE9BQU9BLEdBQUlBLElBQUlBLG1CQUFtQkEsRUFBUUEsRUFBSUEsU0FHbERQLEVBQUFBLFVBQUFBLFVBQUFBLFdBQ0lRLEtBQUtBLFNBQVNBLE9BQVNBLEdBRzNCUixFQUFBQSxVQUFBQSxTQUFBQSxXQUNJUyxHQUFJQSxHQUFJQSxHQUNKQSxFQUFXQSxLQUFLQSxRQUNwQkEsUUFDSUEsUUFBU0EsT0FDVEEsS0FBTUEsV0FHRixNQUZBOVMsS0FDQTlGLEtBQUtELFFBQVV5VyxFQUFTMVEsR0FDQTVGLFNBQWpCRixLQUFLRCxXQUt4Qm9ZLEVBQUFBLFVBQUFBLGVBQUFBLFNBQWdCQSxFQUF5QkEsR0FDeEJVLE1BQVRBLEdBQXlCQSxFQUFSQSxHQUFhQSxHQUFTQSxLQUFLQSxTQUFTQSxPQUNyREEsS0FBS0EsU0FBU0EsS0FBS0EsR0FFbkJBLEtBQUtBLFNBQVNBLE9BQU9BLEVBQU9BLEVBQUdBLElBR3ZDVixFQUFBQSxVQUFBQSxlQUFBQSxTQUFnQkEsR0FDWlcsR0FBSUEsR0FBUUEsS0FBS0EsU0FBU0EsUUFBUUEsRUFDOUJBLEdBQVFBLElBQ1JBLEtBQUtBLFNBQVNBLE9BQU9BLEVBQU9BLElBRXhDWCxHQTlENEN4QixFQUFBQSxLQUFLQSxZQUFwQ0EsR0FBQUEsdUJBQXNCQSxHQVpmM0gsRUFBQUEsRUFBQUEsY0FBQUEsRUFBQUEsa0JBQVRuWCxFQUFBQSxFQUFBQSxXQUFBQSxFQUFBQSxlQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBU21YLEdBQUFBLElBQUFBLFNBQUFBLEdBSXBCK0osR0FBQUEsR0FBQUEsU0FBQUEsR0FBQUMsUUFBQUEsS0FBd0NDLEVBQUFBLE1BQUFBLEtBQUFBLFdBZXhDRCxNQWZ3Q0EsV0FBQUEsRUFBQUEsR0FHcENBLEVBQUFBLFVBQUFBLEtBQUFBLFdBQ0lFLEtBQUtBLGVBQWVBLEVBQUFBLFVBQVVBLEVBQUFBLFFBQVFBLDRCQUNqQ0EsZUFBZUEsRUFBQUEsVUFBVUEsRUFBQUEsUUFBUUEsNEJBQ2pDQSxtQkFBbUJBLEVBQUFBLFVBQVVBLEVBQUFBLFlBQVlBLCtCQUU5Q0EsSUFBSUEsR0FBU0EsS0FBS0EsTUFDbEJBLEdBQU9BLGlCQUFrQkEsRUFDekJBLEVBQU9BLFFBQVVBLEdBQUlBLEdBQUFBLFVBQ3JCQSxFQUFPQSxnQkFBa0JBLEdBQUlBLEdBQUFBLFVBRTdCQSxFQUFBQSxVQUFNQSxLQUFJQSxLQUFBQSxPQUVsQkYsR0Fmd0NELEVBQVNBLFFBQVFBLGVBQTVDQSxHQUFBQSxtQkFBa0JBLEdBSlgvSixFQUFBQSxFQUFBQSxjQUFBQSxFQUFBQSxrQkFBVG5YLEVBQUFBLEVBQUFBLFdBQUFBLEVBQUFBLGVBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFTbVgsR0FBQUEsSUFBQUEsU0FBQUEsR0FLcEJtSyxHQUFBQSxHQUFBQSxTQUFBQSxHQUFBQyxRQUFBQSxLQUFrQ0MsRUFBQUEsTUFBQUEsS0FBQUEsV0FlbENELE1BZmtDQSxXQUFBQSxFQUFBQSxHQUc5QkEsRUFBQUEsVUFBQUEsaUJBQUFBLFNBQWlCQSxFQUEyQkEsR0FDcENFLEdBQ0FBLEVBQVdBLGdCQUFnQkEsTUFDM0JBLEdBQ0FBLEVBQVdBLGNBQWNBLE9BR2pDRixFQUFBQSxVQUFBQSxVQUFBQSxXQUNJRyxHQUFJQSxHQUFTQSxLQUFLQSxNQUNkQSxHQUFPQSxRQUFVQSxFQUFPQSxPQUFPQSxnQkFDL0JBLEtBQUtBLGNBRWpCSCxHQWZrQ0QsRUFBQUEsTUFBTUEsYUFBM0JBLEdBQUFBLGFBQVlBLEdBTExuSyxFQUFBQSxFQUFBQSxRQUFBQSxFQUFBQSxZQUFUblgsRUFBQUEsRUFBQUEsV0FBQUEsRUFBQUEsZUFBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQVNtWCxHQUFBQSxJQUFBQSxTQUFBQSxHQUNwQndLLEdBQUFBLEdBQUFBLFNBQUFBLEdBQUFDLFFBQUFBLEtBQThDQyxFQUFBQSxNQUFBQSxLQUFBQSxXQVE5Q0QsTUFSOENBLFdBQUFBLEVBQUFBLEdBRzFDQSxFQUFBQSxVQUFBQSxLQUFBQSxXQUNJRSxLQUFLQSxRQUFRQSxHQUFJQSxHQUFBQSw4QkFFakJBLEVBQUFBLFVBQU1BLEtBQUlBLEtBQUFBLE9BRWxCRixHQVI4Q0QsRUFBQUEsTUFBTUEsYUFBdkNBLEdBQUFBLHlCQUF3QkEsR0FEakJ4SyxFQUFBQSxFQUFBQSxvQkFBQUEsRUFBQUEsd0JBQVRuWCxFQUFBQSxFQUFBQSxXQUFBQSxFQUFBQSxlQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBU21YLEdBQUFBLElBQUFBLFNBQUFBLEdBQ1R3SyxFQUFBQSxvQkFDUEEsVUFBV0EsRUFDWEEsZ0JBQWlCQSxXQUNiLE9BQ0l6WixRQUFTRyxPQUNUMFosU0FBVSxXQUNOLE9BQU8sS0FJbkJKLE9BQVFBLFNBQVVBLEVBQWVBLEtBSXJDQSxJQUFBQSxHQUFBQSxTQUFBQSxHQUFBSyxRQUFBQSxLQUFrREMsRUFBQUEsTUFBQUEsS0FBQUEsV0FDOUNBLEtBQUFBLGVBQThDQSxFQUFBQSxtQkFDbERELE1BRmtEQSxXQUFBQSxFQUFBQSxHQUVsREEsR0FGa0RMLEVBQUFBLE1BQU1BLGlCQUEzQ0EsR0FBQUEsNkJBQTRCQSxHQWZyQnhLLEVBQUFBLEVBQUFBLG9CQUFBQSxFQUFBQSx3QkFBVG5YLEVBQUFBLEVBQUFBLFdBQUFBLEVBQUFBLGVBQVJBLFVBQUFBLFlDRVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFTbVgsR0FBQUEsSUFBQUEsU0FBQUEsR0FJcEIrSyxHQUFBQSxHQUFBQSxTQUFBQSxHQUFBQyxRQUFBQSxLQUFtREMsRUFBQUEsTUFBQUEsS0FBQUEsV0E0Qm5ERCxNQTVCbURBLFdBQUFBLEVBQUFBLEdBRy9DQSxFQUFBQSxVQUFBQSxLQUFBQSxXQUNJRSxLQUFLQSxlQUFlQSxFQUFBQSxVQUFVQSxFQUFBQSxRQUFRQSx1Q0FDakNBLGVBQWVBLEVBQUFBLFVBQVVBLEVBQUFBLFFBQVFBLHNDQUV0Q0EsSUFBSUEsR0FBU0EsS0FBS0EsTUFDbEJBLEdBQU9BLFlBQWNBLEVBQUFBLFlBQVlBLFNBQ2pDQSxFQUFPQSxZQUNIQSx1QkFBdUJBLEVBQ3ZCQSxxQkFBcUJBLEVBQ3JCQSxRQUFTQSxFQUNUQSxRQUFTQSxFQUNUQSxjQUFlQSxFQUNmQSxjQUFlQSxFQUNmQSxjQUFlQSxFQUNmQSxlQUFnQkEsRUFDaEJBLFlBQWFBLEVBQ2JBLGFBQWNBLEVBQ2RBLGdCQUFpQkEsRUFDakJBLGlCQUFrQkEsRUFDbEJBLFdBQVlBLGNBSWhCQSxFQUFBQSxVQUFNQSxLQUFJQSxLQUFBQSxPQUVsQkYsR0E1Qm1ERCxFQUFBQSxrQkFBa0JBLHlCQUF4REEsR0FBQUEsOEJBQTZCQSxHQUp0Qi9LLEVBQUFBLEVBQUFBLHlCQUFBQSxFQUFBQSw2QkFBVG5YLEVBQUFBLEVBQUFBLFdBQUFBLEVBQUFBLGVBQVJBLFVBQUFBLFlDRlAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFLOEcsR0FBQUEsSUFBQUEsU0FBQUEsR0FJaEJpUCxHQUFBQSxHQUFBQSxXQUFBdU0sUUFBQUEsTUEyQ0FBLE1BMUNJQSxHQUFBQSxVQUFBQSxLQUFBQSxTQUFNQSxHQUNGQyxHQUFJQSxHQUFTQSxFQUFRQSxPQUNqQkEsRUFBT0EsRUFBUUEsS0FDZkEsRUFBT0EsRUFBT0EsWUFBY0EsTUFPaENBLE9BTktBLEdBQUtBLGVBQ05BLEVBQU9BLEdBQUlBLEdBQUFBLEtBQ1hBLEtBQUtBLGVBQWVBLEVBQU1BLEVBQVFBLEdBQ2xDQSxLQUFLQSxjQUFjQSxFQUFNQSxJQUd6QkEsRUFDT0EsRUFBUUEsUUFBUUEsSUFDaEJBLEVBQUtBLGNBQ1pBLEVBQUtBLGFBQWFBLHFCQUVmQSxJQUdYRCxFQUFBQSxVQUFBQSxlQUFBQSxTQUFnQkEsRUFBZ0JBLEVBQXdCQSxHQUNwREUsR0FBSUEsRUFBS0EsbUJBRUxBLEdBREFBLEVBQUFBLEtBQUtBLE9BQU9BLEVBQU9BLFlBQWFBLEdBQzVCQSxFQUFLQSxRQUFTQSxDQUNkQSxHQUFJQSxHQUFVQSxFQUFPQSxrQkFDaEJBLEdBQUFBLEtBQUtBLFFBQVFBLElBSWRBLEVBQVNBLE1BQVFBLEVBQUtBLFFBQVFBLE1BQzlCQSxFQUFTQSxPQUFTQSxFQUFLQSxRQUFRQSxTQUovQkEsRUFBU0EsTUFBUUEsS0FBS0EsSUFBSUEsRUFBU0EsTUFBT0EsRUFBUUEsT0FDbERBLEVBQVNBLE9BQVNBLEtBQUtBLElBQUlBLEVBQVNBLE9BQVFBLEVBQVFBLGNBTzVEQSxHQUFTQSxNQUFRQSxFQUFPQSxZQUN4QkEsRUFBU0EsT0FBU0EsRUFBT0EsY0FJakNGLEVBQUFBLFVBQUFBLGNBQUFBLFNBQWVBLEVBQWdCQSxHQUUzQkcsRUFBU0EsRUFBSUEsRUFBUUEsaUJBQWlCQSxnQkFBa0JBLEVBQ3hEQSxFQUFTQSxFQUFJQSxFQUFRQSxpQkFBaUJBLGVBQWlCQSxHQUUvREgsSUEzQ2F2TSxHQUFBQSxjQUFhQSxHQUpWalAsRUFBQUEsRUFBQUEsVUFBQUEsRUFBQUEsY0FBTDlHLEVBQUFBLEVBQUFBLE9BQUFBLEVBQUFBLFdBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFLOEcsR0FBQUEsSUFBQUEsU0FBQUEsR0FvQmhCNGIsR0FBQUEsR0FBQUEsU0FBQUEsR0FDSUMsUUFBQUEsS0FDSUMsRUFBQUEsS0FBQUEsTUFDQUEsS0FBS0EsU0FBU0EsZ0JBQWlCQSxFQUFBQSxPQUFPQSxlQUNqQ0EsU0FBU0EsaUJBQWtCQSxFQUFBQSxPQUFPQSxnQkFDbENBLFNBQVNBLGlCQUFrQkEsRUFBQUEsT0FBT0EsZ0JBQ2xDQSxTQUFTQSxVQUFXQSxFQUFBQSxPQUFPQSxTQUMzQkEsU0FBU0EsaUJBQWtCQSxFQUFBQSxPQUFPQSxnQkFDbENBLFNBQVNBLFVBQVdBLEVBQUFBLE9BQU9BLFNBQzNCQSxTQUFTQSxnQkFBaUJBLEVBQUFBLE9BQU9BLGVBQ2pDQSxTQUFTQSxTQUFVQSxFQUFBQSxPQUFPQSxRQUMxQkEsU0FBU0EsZUFBZ0JBLEVBQUFBLE9BQU9BLGNBUTdDRCxNQW5Ca0NBLFdBQUFBLEVBQUFBLEdBYzlCQSxFQUFBQSxVQUFBQSxRQUFBQSxTQUFTQSxLQUdUQSxFQUFBQSxVQUFBQSxNQUFBQSxTQUFPQSxLQUVYQSxHQW5Ca0NELEVBQUFBLEtBQUtBLFFBQTFCQSxHQUFBQSxhQUFZQSxHQXBCVDViLEVBQUFBLEVBQUFBLFFBQUFBLEVBQUFBLFlBQUw5RyxFQUFBQSxFQUFBQSxPQUFBQSxFQUFBQSxXQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBSzhHLEdBQUFBLElBQUFBLFNBQUFBLEdBYWhCK2IsR0FBQUEsR0FBQUEsU0FBQUEsR0FDSUMsUUFBQUEsS0FDSUMsRUFBQUEsS0FBQUEsTUFDQUEsS0FBS0EsU0FBU0EsU0FBVUEsRUFBQUEsT0FBT0EsUUFDMUJBLFNBQVNBLGFBQWNBLEVBQUFBLE9BQU9BLFlBQzlCQSxTQUFTQSxhQUFjQSxFQUFBQSxPQUFPQSxZQUM5QkEsU0FBU0EsaUJBQWtCQSxFQUFBQSxPQUFPQSxnQkFDbENBLFNBQVNBLGVBQWdCQSxFQUFBQSxPQUFPQSxjQUNoQ0EsU0FBU0EsZUFBZ0JBLEVBQUFBLE9BQU9BLGNBQ2hDQSxTQUFTQSxtQkFBb0JBLEVBQUFBLE9BQU9BLGtCQUNwQ0EsU0FBU0EsY0FBZUEsRUFBQUEsT0FBT0EsYUFFNUNELE1BWm9DQSxXQUFBQSxFQUFBQSxHQVlwQ0EsR0Fab0NELEVBQUFBLEtBQUtBLFFBQTVCQSxHQUFBQSxlQUFjQSxHQWJYL2IsRUFBQUEsRUFBQUEsVUFBQUEsRUFBQUEsY0FBTDlHLEVBQUFBLEVBQUFBLE9BQUFBLEVBQUFBLFdBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFLOEcsR0FBQUEsSUFBQUEsU0FBQUEsR0FJaEIyUCxHQUFBQSxHQUFBQSxXQUFBdU0sUUFBQUEsTUF3QkFBLE1BdkJJQSxHQUFBQSxVQUFBQSxLQUFBQSxTQUFNQSxHQUNGQyxHQUFJQSxHQUFTQSxFQUFRQSxPQUNqQkEsRUFBT0EsRUFBT0EsbUJBQ2RBLEVBQU1BLEdBQUlBLEdBQUFBLEtBQ1ZBLEVBQU9BLEVBQVFBLE1BRWRBLEVBQUtBLFNBQVdBLEVBQUFBLEtBQUtBLFFBQVFBLEtBQVVBLEVBQUtBLGNBQWdCQSxFQUFLQSxvQkFDbEVBLEVBQUtBLE1BQVFBLEVBQUtBLE9BQVNBLE9BQU9BLGtCQUV0Q0EsSUFBSUEsSUFBVUEsQ0FDZEEsUUFBS0EsRUFBQUEsS0FBS0EsUUFBUUEsS0FDZEEsRUFBQUEsS0FBS0EsT0FBT0EsRUFBT0EsWUFBYUEsR0FDaENBLEVBQVVBLEVBQVFBLFFBQVFBLEdBQ3RCQSxFQUFBQSxLQUFLQSxRQUFRQSxFQUFLQSxFQUFPQSxjQUNsQkEsR0FHWEEsRUFBS0EsY0FDTEEsRUFBS0EsYUFBYUEsb0JBRXRCQSxFQUFPQSxhQUFlQSxFQUFBQSxXQUFXQSxRQUMxQkEsSUFFZkQsSUF4QmF2TSxHQUFBQSxjQUFhQSxHQUpWM1AsRUFBQUEsRUFBQUEsVUFBQUEsRUFBQUEsY0FBTDlHLEVBQUFBLEVBQUFBLE9BQUFBLEVBQUFBLFdBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFLOEcsR0FBQUEsSUFBQUEsU0FBQUEsR0EwQ2hCb2MsR0FBQUEsR0FBQUEsU0FBQUEsR0FDSUMsUUFBQUEsS0FDSUMsRUFBQUEsS0FBQUEsTUFDQUEsS0FBS0EsU0FBU0EsMEJBQTJCQSxFQUFBQSxPQUFPQSx5QkFDM0NBLFNBQVNBLDJCQUE0QkEsRUFBQUEsT0FBT0EsMEJBQzVDQSxTQUFTQSxrQkFBbUJBLEVBQUFBLE9BQU9BLGlCQUNuQ0EsU0FBU0Esb0JBQXFCQSxFQUFBQSxPQUFPQSxtQkFDckNBLFNBQVNBLGtCQUFtQkEsRUFBQUEsT0FBT0EsaUJBQ25DQSxTQUFTQSxvQkFBcUJBLEVBQUFBLE9BQU9BLG1CQUNyQ0EsU0FBU0EsZUFBZ0JBLEVBQUFBLE9BQU9BLGNBQ2hDQSxTQUFTQSxvQkFBcUJBLEVBQUFBLE9BQU9BLG1CQUNyQ0EsU0FBU0EsMkJBQTRCQSxFQUFBQSxPQUFPQSwwQkFtRHpERCxNQTlEd0NBLFdBQUFBLEVBQUFBLEdBY3BDQSxFQUFBQSxVQUFBQSxZQUFBQSxXQUNJRSxPQUNJQSxZQUFhQSxHQUFJQSxHQUFBQSxNQUNqQkEsV0FBWUEsRUFBQUEsS0FBS0EsV0FDakJBLGlCQUFrQkEsSUFJMUJGLEVBQUFBLFVBQUFBLGFBQUFBLFdBQ0lHLE9BQ0lBLHNCQUFzQkEsRUFDdEJBLGFBQWNBLEVBQ2RBLHVCQUF1QkEsRUFDdkJBLEVBQUdBLElBQ0hBLG9CQUFxQkEsR0FBSUEsR0FBQUEsS0FDekJBLFlBQWFBLEVBQUFBLEtBQUtBLFdBQ2xCQSxjQUFlQSxFQUFBQSxLQUFLQSxXQUNwQkEsV0FBWUEsRUFDWkEsV0FBWUEsSUFJcEJILEVBQUFBLFVBQUFBLFFBQUFBLFNBQVNBLEVBQWVBLEVBQWVBLEVBQWlCQSxFQUFpQkEsSUFDaEVJLEVBQU1BLFdBQWFBLEVBQUFBLFdBQVdBLGdCQUFrQkEsSUFDakRBLEVBQU1BLFlBQWNBLEVBQUFBLFdBQVdBLFdBRW5DQSxFQUFPQSxXQUFhQSxFQUFNQSxXQUMxQkEsRUFBT0EscUJBQXVCQSxFQUFNQSxxQkFDcENBLEVBQU9BLGFBQWVBLEVBQU1BLGFBQzVCQSxFQUFPQSxzQkFBd0JBLEVBQU1BLHNCQUNyQ0EsRUFBT0EsRUFBSUEsRUFBTUEsRUFDakJBLEVBQUFBLEtBQUtBLE9BQU9BLEVBQU1BLG9CQUFxQkEsRUFBT0EscUJBQzlDQSxFQUFBQSxLQUFLQSxPQUFPQSxFQUFNQSxZQUFhQSxFQUFPQSxhQUN0Q0EsRUFBQUEsS0FBS0EsT0FBT0EsRUFBTUEsY0FBZUEsRUFBT0EsZUFDeENBLEVBQU1BLGlCQUFtQkEsR0FHN0JKLEVBQUFBLFVBQUFBLE1BQUFBLFNBQU9BLEVBQWVBLEVBQWVBLEVBQWlCQSxFQUFpQkEsR0FDbkVLLEVBQU9BLFdBQWNBLEVBQU9BLFlBQWNBLEVBQU1BLFdBQWNBLEVBQUFBLFdBQVdBLGFBQ3pFQSxFQUFNQSxXQUFhQSxFQUFPQSxZQUFjQSxFQUFBQSxXQUFXQSxlQUNuREEsRUFBTUEscUJBQXVCQSxFQUFPQSxxQkFDcENBLEVBQU1BLGFBQWVBLEVBQU9BLGFBQzVCQSxFQUFNQSxzQkFBd0JBLEVBQU9BLHNCQUNyQ0EsRUFBTUEsRUFBSUEsRUFBT0EsRUFDakJBLEVBQUFBLEtBQUtBLE9BQU9BLEVBQU9BLG9CQUFxQkEsRUFBTUEscUJBQzlDQSxFQUFBQSxLQUFLQSxPQUFPQSxFQUFPQSxZQUFhQSxFQUFNQSxhQUN0Q0EsRUFBQUEsS0FBS0EsT0FBT0EsRUFBT0EsY0FBZUEsRUFBTUEsZ0JBRWhETCxHQTlEd0NELEVBQUFBLEtBQUtBLFdBQWhDQSxHQUFBQSxtQkFBa0JBLEdBMUNmcGMsRUFBQUEsRUFBQUEsY0FBQUEsRUFBQUEsa0JBQUw5RyxFQUFBQSxFQUFBQSxPQUFBQSxFQUFBQSxXQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBSzhHLEdBQUFBLElBQUFBLFNBQUFBLEdBOENoQjJjLEdBQUFBLEdBQUFBLFNBQUFBLEdBQ0lDLFFBQUFBLEtBQ0lDLEVBQUFBLEtBQUFBLE1BQ0FBLEtBQUtBLFNBQVNBLGlCQUFrQkEsRUFBQUEsT0FBT0EsZ0JBQ2xDQSxTQUFTQSxjQUFlQSxFQUFBQSxPQUFPQSxhQUMvQkEsU0FBU0Esa0JBQW1CQSxFQUFBQSxPQUFPQSxpQkFDbkNBLFNBQVNBLGdCQUFpQkEsRUFBQUEsT0FBT0EsZUFDakNBLFNBQVNBLG1CQUFvQkEsRUFBQUEsT0FBT0Esa0JBQ3BDQSxTQUFTQSxvQkFBcUJBLEVBQUFBLE9BQU9BLG1CQTJDbERELE1BbkRzQ0EsV0FBQUEsRUFBQUEsR0FXbENBLEVBQUFBLFVBQUFBLFlBQUFBLFdBQ0lFLE9BQ0lBLHdCQUF3QkEsRUFDeEJBLFdBQVlBLEdBQUlBLEdBQUFBLEtBQ2hCQSxjQUFjQSxFQUNkQSxlQUFlQSxJQUl2QkYsRUFBQUEsVUFBQUEsYUFBQUEsV0FDSUcsT0FDSUEsUUFBU0EsR0FBSUEsR0FBQUEsS0FDYkEsb0JBQXFCQSxHQUFJQSxHQUFBQSxLQUN6QkEseUJBQTBCQSxHQUFJQSxHQUFBQSxLQUM5QkEsMEJBQTJCQSxHQUFJQSxHQUFBQSxLQUMvQkEsV0FBWUEsRUFDWkEsWUFBYUEsR0FBSUEsR0FBQUEsS0FDakJBLGlCQUFpQkEsSUFJekJILEVBQUFBLFVBQUFBLFFBQUFBLFNBQVNBLEVBQWVBLEVBQWVBLEdBQ25DSSxFQUFPQSxXQUFhQSxFQUFNQSxXQUMxQkEsRUFBQUEsS0FBS0EsT0FBT0EsRUFBTUEsUUFBU0EsRUFBT0EsU0FDbENBLEVBQUFBLEtBQUtBLE9BQU9BLEVBQU1BLG9CQUFxQkEsRUFBT0EscUJBQzlDQSxFQUFBQSxLQUFLQSxPQUFPQSxFQUFNQSx5QkFBMEJBLEVBQU9BLDBCQUNuREEsRUFBQUEsS0FBS0EsT0FBT0EsRUFBTUEsMEJBQTJCQSxFQUFPQSwyQkFDcERBLEVBQUFBLEtBQUtBLE9BQU9BLEVBQU1BLFlBQWFBLEVBQU9BLGFBQ3RDQSxFQUFPQSxnQkFBa0JBLEVBQU1BLGlCQUduQ0osRUFBQUEsVUFBQUEsTUFBQUEsU0FBT0EsRUFBZUEsRUFBZUEsR0FDakNLLEVBQU1BLFdBQWFBLEVBQU9BLFlBQWNBLEVBQUFBLFdBQVdBLGFBQ25EQSxFQUFBQSxLQUFLQSxPQUFPQSxFQUFPQSxRQUFTQSxFQUFNQSxTQUNsQ0EsRUFBQUEsS0FBS0EsT0FBT0EsRUFBT0Esb0JBQXFCQSxFQUFNQSxxQkFDOUNBLEVBQUFBLEtBQUtBLE9BQU9BLEVBQU9BLHlCQUEwQkEsRUFBTUEsMEJBQ25EQSxFQUFBQSxLQUFLQSxPQUFPQSxFQUFPQSwwQkFBMkJBLEVBQU1BLDJCQUNwREEsRUFBQUEsS0FBS0EsT0FBT0EsRUFBT0EsWUFBYUEsRUFBTUEsYUFDdENBLEVBQU1BLGdCQUFrQkEsRUFBT0EsaUJBRXZDTCxHQW5Ec0NELEVBQUFBLEtBQUtBLFdBQTlCQSxHQUFBQSxpQkFBZ0JBLEdBOUNiM2MsRUFBQUEsRUFBQUEsWUFBQUEsRUFBQUEsZ0JBQUw5RyxFQUFBQSxFQUFBQSxPQUFBQSxFQUFBQSxXQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBSzhHLEdBQUFBLElBQUFBLFNBQUFBLEdBZ0poQmtkLFFBQUFBLEtBQ0lDLEdBQUlBLEdBQUtBLEdBQUlBLFFBQU9BLDZCQUNwQkEsT0FBb0NBLE9BQWhDQSxFQUFHQSxLQUFLQSxVQUFVQSxXQUNYQSxXQUFXQSxPQUFPQSxJQUN0QkEsR0ExSVhELEdBQUlBLElBQ0FBLE9BQ0FBLFNBQ0FBLFFBQ0FBLFFBRUFBLEdBQ0FBLFFBQ0FBLFFBQ0FBLFNBRUpBLEVBQUFBLFdBT0lFLFFBQUFBLEdBQWFBLEdBTkxDLEtBQUFBLGdCQUNSQSxLQUFBQSxpQkFBbUJBLEVBQUFBLEtBQUtBLFdBTXBCQSxPQUFPQSxpQkFBaUJBLE1BQ3BCQSxLQUFRQSxNQUFPQSxFQUFLQSxVQUFVQSxHQUM5QkEsa0JBQXFCQSxNQUFPQSxFQUFBQSxLQUFLQSxXQUFZQSxVQUFVQSxHQUN2REEsYUFBZ0JBLE1BQU9BLEVBQWNBLFlBQWFBLFVBQVVBLEdBQzVEQSxNQUFTQSxNQUFPQSxHQUFJQSxHQUFBQSxrQkFBcUJBLFVBQVVBLEtBRXZEQSxLQUFLQSxLQUFLQSxLQUFLQSxHQTJHdkJELE1BeEdJQSxRQUFBQSxlQUFXQSxFQUFBQSxlM0RxNUpDMVgsSTJEcjVKWjBYLFdBQ0lFLEdBQTBCQSxnQ0FBdEJBLFVBQVVBLFFBQTJDQSxDQUNyREEsR0FBSUEsR0FBVUEsR0FDZEEsT0FBaUJBLEdBQVZBLEdBQWVBLEVBQVVBLEdBRXBDQSxPQUFPQSxHM0R1NUpDMVgsWUFBWSxFQUNaQyxjQUFjLEkyRHI1SjFCdVgsRUFBQUEsVUFBQUEsY0FBQUEsV0FDSUcsR0FBSUEsR0FBUUEsS0FBS0EsS0FBS0EsUUFDdEJBLE1BQUtBLE1BQU1BLEVBQU9BLElBR3RCSCxFQUFBQSxVQUFBQSxLQUFBQSxXQUNJSSxLQUFLQSxhQUFhQSxLQUFLQSxFQUFBQSxLQUFLQSxPQUFPQSxLQUFLQSxtQkFDeENBLEtBQUtBLElBQUlBLFFBR2JKLEVBQUFBLFVBQUFBLFFBQUFBLFdBQ0lLLEdBQUlBLEdBQU1BLEtBQUtBLGFBQWFBLEtBQ3hCQSxJQUNBQSxFQUFBQSxLQUFLQSxPQUFPQSxFQUFLQSxLQUFLQSxrQkFDMUJBLEtBQUtBLElBQUlBLFdBR2JMLEVBQUFBLFVBQUFBLGFBQUFBLFNBQWNBLEVBQWFBLEVBQWFBLEVBQWFBLEVBQWFBLEVBQVlBLEdBQzFFTSxFQUFBQSxLQUFLQSxRQUFRQSxFQUFLQSxFQUFLQSxFQUFLQSxFQUFLQSxFQUFJQSxHQUFLQSxLQUFLQSxrQkFDL0NBLEtBQUtBLElBQUlBLGFBQWFBLEVBQUtBLEVBQUtBLEVBQUtBLEVBQUtBLEVBQUlBLElBR2xETixFQUFBQSxVQUFBQSxlQUFBQSxXQUNJTyxFQUFBQSxLQUFLQSxTQUFTQSxLQUFLQSxpQkFDbkJBLElBQUlBLEdBQVdBLEtBQUtBLEdBQ2hCQSxHQUFJQSxnQkFDSkEsRUFBSUEsa0JBR1pQLEVBQUFBLFVBQUFBLFVBQUFBLFNBQVdBLEVBQWFBLEVBQWFBLEVBQWFBLEVBQWFBLEVBQVlBLEdBQ3ZFUSxHQUFJQSxHQUFLQSxLQUFLQSxnQkFDZEEsR0FBQUEsS0FBS0EsU0FBU0EsRUFBSUEsRUFBQUEsS0FBS0EsUUFBUUEsRUFBS0EsRUFBS0EsRUFBS0EsRUFBS0EsRUFBSUEsSUFBTUEsR0FDN0RBLEtBQUtBLElBQUlBLFVBQVVBLEVBQUtBLEVBQUtBLEVBQUtBLEVBQUtBLEVBQUlBLElBRy9DUixFQUFBQSxVQUFBQSxNQUFBQSxTQUFPQSxFQUFXQSxHQUNkUyxFQUFBQSxLQUFLQSxNQUFNQSxLQUFLQSxpQkFBa0JBLEVBQUdBLEdBQ3JDQSxLQUFLQSxJQUFJQSxNQUFNQSxFQUFHQSxJQUd0QlQsRUFBQUEsVUFBQUEsT0FBQUEsU0FBUUEsR0FDSlUsR0FBSUEsR0FBS0EsS0FBS0EsaUJBQ1ZBLEVBQUlBLEVBQUFBLEtBQUtBLGFBQWFBLEVBQzFCQSxHQUFBQSxLQUFLQSxTQUFTQSxFQUFJQSxFQUFHQSxHQUNyQkEsS0FBS0EsSUFBSUEsT0FBT0EsSUFHcEJWLEVBQUFBLFVBQUFBLFVBQUFBLFNBQVdBLEVBQVdBLEdBQ2xCVyxFQUFBQSxLQUFLQSxVQUFVQSxLQUFLQSxpQkFBa0JBLEVBQUdBLEdBQ3pDQSxLQUFLQSxJQUFJQSxVQUFVQSxFQUFHQSxJQUcxQlgsRUFBQUEsVUFBQUEsTUFBQUEsU0FBT0EsR0FDSFksR0FBSUEsR0FBS0EsRUFBQUEsS0FBS0EsTUFBTUEsS0FBS0EsaUJBQWtCQSxFQUMzQ0EsTUFBS0EsSUFBSUEsYUFBYUEsRUFBR0EsR0FBSUEsRUFBR0EsR0FBSUEsRUFBR0EsR0FBSUEsRUFBR0EsR0FBSUEsRUFBR0EsR0FBSUEsRUFBR0EsS0FHaEVaLEVBQUFBLFVBQUFBLFNBQUFBLFNBQVVBLEdBQ05hLEdBQUlBLEdBQUtBLEVBQUFBLEtBQUtBLFNBQVNBLEtBQUtBLGlCQUFrQkEsRUFDOUNBLE1BQUtBLElBQUlBLGFBQWFBLEVBQUdBLEdBQUlBLEVBQUdBLEdBQUlBLEVBQUdBLEdBQUlBLEVBQUdBLEdBQUlBLEVBQUdBLEdBQUlBLEVBQUdBLEtBR2hFYixFQUFBQSxVQUFBQSxhQUFBQSxTQUFjQSxHQUNWYyxFQUFLQSxLQUFLQSxNQUNWQSxLQUFLQSxJQUFJQSxRQUdiZCxFQUFBQSxVQUFBQSxTQUFBQSxTQUFVQSxHQUNOZSxHQUFJQSxHQUFNQSxLQUFLQSxHQUNmQSxHQUFJQSxZQUNKQSxFQUFJQSxLQUFLQSxFQUFLQSxFQUFHQSxFQUFLQSxFQUFHQSxFQUFLQSxNQUFPQSxFQUFLQSxRQUMxQ0EsRUFBSUEsUUFHUmYsRUFBQUEsVUFBQUEsT0FBQUEsU0FBUUEsRUFBZUEsRUFBY0EsR0FDakNnQixHQUFJQSxHQUFNQSxLQUFLQSxHQUdmQSxJQUZBQSxFQUFNQSxXQUFXQSxFQUFLQSxHQUN0QkEsRUFBSUEsVUFBWUEsRUFBTUEsZ0JBQ05BLE1BQVpBLEVBQ01BLEVBQUtBLFNBQVdBLEVBQUlBLFdBQWFBLFVBQ3ZDQSxFQUFJQSxXQUNEQSxDQUNIQSxHQUFJQSxHQUFLQSxJQUFhQSxFQUFBQSxTQUFTQSxRQUFVQSxVQUFZQSxTQUMvQ0EsR0FBS0EsU0FBV0EsRUFBSUEsV0FBYUEsRUFDdkNBLEVBQUlBLEtBQUtBLEtBSWpCaEIsRUFBQUEsVUFBQUEsa0JBQUFBLFNBQW1CQSxFQUErQkEsRUFBV0EsR0FDekRpQixHQUFJQSxHQUFNQSxLQUFLQSxHQUtmQSxPQUpBQSxHQUFJQSxVQUFZQSxFQUFXQSxnQkFDM0JBLEVBQUlBLFFBQVVBLEVBQUtBLEVBQVdBLG9CQUFzQkEsRUFBV0Esa0JBQW9CQSxJQUFNQSxFQUFLQSxHQUM5RkEsRUFBSUEsU0FBV0EsRUFBTUEsRUFBV0EsZ0JBQWtCQSxJQUFNQSxFQUFNQSxHQUM5REEsRUFBSUEsV0FBYUEsRUFBV0E7QUFDckJBLEVBQUlBLGdCQUFnQkEsRUFBR0EsSUFFdENqQixJQXpIYUYsR0FBQUEsY0FBYUEsR0FyQlZsZCxFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFMOUcsRUFBQUEsRUFBQUEsT0FBQUEsRUFBQUEsV0FBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQUs4RyxHQUFBQSxJQUFBQSxTQUFBQSxHQUVoQmtkLEdBQUlBLEdBQVVBLE1BQ2RBLEVBQUFBLFdBQUFvQixRQUFBQSxLQUNZQyxLQUFBQSxNQUFrQ0EsS0FFbENBLEtBQUFBLGVBQXlCQSxFQUN6QkEsS0FBQUEsZ0JBQTBCQSxFQUMxQkEsS0FBQUEsVUFBbUJBLEtBQ25CQSxLQUFBQSxlQUFpQkEsRUErRTdCRCxNQTdFSUEsUUFBQUEsZUFBSUEsRUFBQUEsVUFBQUEsZ0I1RHlpS1E1WSxJNER6aUtaNFksV0FDSUUsTUFBT0EsTUFBS0EsZ0I1RDJpS0o1WSxZQUFZLEVBQ1pDLGNBQWMsSTREemlLMUJ5WSxPQUFBQSxlQUFJQSxFQUFBQSxVQUFBQSxpQjVENGlLUTVZLEk0RDVpS1o0WSxXQUNJRyxNQUFPQSxNQUFLQSxpQjVEOGlLSjdZLFlBQVksRUFDWkMsY0FBYyxJNEQ1aUsxQnlZLE9BQUFBLGVBQUlBLEVBQUFBLFVBQUFBLGM1RCtpS1E1WSxJNEQvaUtaNFksV0FDSUksTUFBT0EsTUFBS0EsZUFBaUJBLEtBQUtBLFU1RGlqSzFCOVksWUFBWSxFQUNaQyxjQUFjLEk0RC9pSzFCeVksT0FBQUEsZUFBSUEsRUFBQUEsVUFBQUEsZTVEa2pLUTVZLEk0RGxqS1o0WSxXQUNJSyxNQUFPQSxNQUFLQSxnQkFBa0JBLEtBQUtBLFU1RG9qSzNCL1ksWUFBWSxFQUNaQyxjQUFjLEk0RGxqSzFCeVksT0FBQUEsZUFBSUEsRUFBQUEsVUFBQUEsWTVEcWpLUTVZLEk0RHJqS1o0WSxXQUNJTSxPQUFRQSxPQUFPQSxrQkFBb0JBLEdBQUtBLEtBQUtBLE1BQU1BLHdCNUR1akszQ2haLFlBQVksRUFDWkMsY0FBYyxJNERyaksxQnlZLEVBQUFBLFVBQUFBLEtBQUFBLFNBQUtBLEdBQ0RPLEtBQUtBLE1BQVFBLENBQ2JBLElBQUlBLEdBQVVBLEVBQUFBLHFCQUFxQkEsRUFBSUEsT0FDdkNBLE1BQUtBLGVBQWlCQSxFQUFRQSxNQUM5QkEsS0FBS0EsZ0JBQWtCQSxFQUFRQSxPQUMvQkEsS0FBS0EsaUJBR1RQLEVBQUFBLFVBQUFBLFlBQUFBLFNBQVlBLEVBQWVBLEdBVXZCUSxNQVRJQSxNQUFLQSxXQUNMQSxLQUFLQSxVQUFVQSxNQUFRQSxFQUN2QkEsS0FBS0EsVUFBVUEsT0FBU0EsR0FFeEJBLEtBQUtBLFdBQ0RBLE1BQU9BLEVBQ1BBLE9BQVFBLEdBR1RBLE1BR1hSLEVBQUFBLFVBQUFBLGFBQUFBLFdBQ0lTLEdBQUlBLEtBQUtBLFVBQVdBLENBRWhCQSxHQUFJQSxLQUFLQSxJQUFJQSxLQUFLQSxVQUFVQSxNQUFRQSxLQUFLQSxnQkFBa0JBLEdBQVdBLEtBQUtBLElBQUlBLEtBQUtBLFVBQVVBLE9BQVNBLEtBQUtBLGlCQUFtQkEsRUFDM0hBLE1BQ0pBLE1BQUtBLGVBQWlCQSxLQUFLQSxVQUFVQSxNQUNyQ0EsS0FBS0EsZ0JBQWtCQSxLQUFLQSxVQUFVQSxPQUN0Q0EsS0FBS0EsVUFBWUEsS0FDakJBLEtBQUtBLGdCQUVUQSxNQUFPQSxPQUdYVCxFQUFBQSxVQUFBQSxlQUFBQSxXQUNJVSxNQUFJQSxNQUFLQSxpQkFBbUJBLEtBQUtBLFVBQ3RCQSxHQUNYQSxLQUFLQSxpQkFDRUEsSUFHSFYsRUFBQUEsVUFBQUEsY0FBUkEsV0FDSVcsR0FBSUEsR0FBU0EsS0FBS0EsTUFBTUEsT0FDcEJBLEVBQVdBLEtBQUtBLFFBQ2hCQSxNQUFLQSxJQUFJQSxFQUFXQSxHQUFLQSxHQUN6QkEsRUFBT0EsTUFBUUEsS0FBS0EsYUFDcEJBLEVBQU9BLE9BQVNBLEtBQUtBLGdCQUdyQkEsRUFBT0EsTUFBUUEsS0FBS0EsV0FDcEJBLEVBQU9BLE9BQVNBLEtBQUtBLFlBRXJCQSxFQUFPQSxNQUFNQSxNQUFRQSxLQUFLQSxhQUFhQSxXQUFhQSxLQUNwREEsRUFBT0EsTUFBTUEsT0FBU0EsS0FBS0EsY0FBY0EsV0FBYUEsTUFFMURBLEtBQUtBLGVBQWlCQSxHQUU5QlgsSUFyRmFwQixHQUFBQSxrQkFBaUJBLEdBSGRsZCxFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFMOUcsRUFBQUEsRUFBQUEsT0FBQUEsRUFBQUEsV0FBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQUs4RyxHQUFBQSxJQUFBQSxTQUFBQSxHQXNCaEJrZCxHQUFBQSxHQUFBQSxTQUFBQSxHQUNJZ0MsUUFBQUEsS0FDSUMsRUFBQUEsS0FBQUEsTUFDQUEsS0FBS0EsU0FBU0EsV0FBWUEsRUFBQUEsT0FBT0EsVUFDNUJBLFNBQVNBLGlCQUFrQkEsRUFBQUEsT0FBT0EsZ0JBQ2xDQSxTQUFTQSxpQkFBa0JBLEVBQUFBLE9BQU9BLGdCQUNsQ0EsU0FBU0EsWUFBYUEsRUFBQUEsT0FBT0EsV0FDN0JBLFNBQVNBLFlBQWFBLEVBQUFBLE9BQU9BLFdBQzdCQSxTQUFTQSxXQUFZQSxFQUFBQSxPQUFPQSxVQUM1QkEsU0FBU0EsYUFBY0EsRUFBQUEsT0FBT0EsWUFDOUJBLFNBQVNBLGlCQUFrQkEsRUFBQUEsT0FBT0EsZ0JBQ2xDQSxTQUFTQSxpQkFBa0JBLEVBQUFBLE9BQU9BLGdCQVkvQ0QsTUF2Qm1DQSxXQUFBQSxFQUFBQSxHQWMvQkEsRUFBQUEsVUFBQUEsWUFBQUEsV0FDSUUsT0FDSUEsYUFBY0EsR0FBSUEsR0FBQUEsT0FJMUJGLEVBQUFBLFVBQUFBLGFBQUFBLFdBQ0lHLFVBRVJILEdBdkJtQ2hDLEVBQUFBLEtBQUtBLFdBQTNCQSxHQUFBQSxjQUFhQSxHQXRCVmxkLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQUw5RyxFQUFBQSxFQUFBQSxPQUFBQSxFQUFBQSxXQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBSzhHLEdBQUFBLElBQUFBLFNBQUFBLEdBaUJoQnNmLEdBQUFBLEdBQUFBLFNBQUFBLEdBQ0lDLFFBQUFBLEtBQ0lDLEVBQUFBLEtBQUFBLE1BQ0FBLEtBQUtBLFNBQVNBLGdCQUFpQkEsRUFBQUEsT0FBT0EsZUFDakNBLFNBQVNBLGdCQUFpQkEsRUFBQUEsT0FBT0EsZUF1QjlDRCxNQTNCbUNBLFdBQUFBLEVBQUFBLEdBTy9CQSxFQUFBQSxVQUFBQSxZQUFBQSxXQUNJRSxPQUNJQSxXQUFXQSxJQUluQkYsRUFBQUEsVUFBQUEsYUFBQUEsV0FDSUcsT0FDSUEsV0FBWUEsR0FBSUEsR0FBQUEsT0FJeEJILEVBQUFBLFVBQUFBLFFBQUFBLFNBQVNBLEVBQWVBLEVBQWVBLEVBQWlCQSxLQUd4REEsRUFBQUEsVUFBQUEsTUFBQUEsU0FBT0EsRUFBZUEsRUFBZUEsRUFBaUJBLEdBQ2xESSxHQUFJQSxHQUFLQSxFQUFPQSxVQUNoQkEsR0FBTUEsWUFBY0EsRUFBR0EsTUFDdkJBLEVBQU1BLGFBQWVBLEVBQUdBLFFBRWhDSixHQTNCbUNELEVBQUFBLEtBQUtBLFdBQTNCQSxHQUFBQSxjQUFhQSxHQWpCVnRmLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQUw5RyxFQUFBQSxFQUFBQSxPQUFBQSxFQUFBQSxXQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBSzJRLEdBQUFBLElBQUFBLFNBQUFBLEdBU2hCK1YsUUFBQUEsR0FBb0JBLEVBQVdBLEVBQVdBLEVBQWdCQSxFQUFZQSxFQUFZQSxHQW1COUVDLFFBQUFBLEtBQ1FDLElBQ0pBLEVBQUtBLEVBQUtBLEVBQVNBLEtBQUtBLElBQUlBLEdBQzVCQSxFQUFLQSxFQUFLQSxFQUFTQSxLQUFLQSxJQUFJQSxHQUM1QkEsRUFBS0EsRUFBS0EsRUFBU0EsS0FBS0EsSUFBSUEsR0FDNUJBLEVBQUtBLEVBQUtBLEVBQVNBLEtBQUtBLElBQUlBLEdBRTVCQSxFQUFJQSxFQUFJQSxFQUNSQSxFQUFLQSxFQUFpQkEsRUFBSUEsRUFBSUEsRUFBSUEsRUFBSUEsRUFBR0EsRUFBR0EsR0FFNUNBLEVBQUlBLEVBQUlBLEVBQ1JBLEVBQUtBLEVBQWlCQSxFQUFJQSxFQUFJQSxFQUFJQSxFQUFJQSxFQUFHQSxFQUFHQSxHQUU1Q0EsRUFBSUEsRUFBSUEsRUFDUkEsRUFBS0EsRUFBaUJBLEVBQUlBLEVBQUlBLEVBQUlBLEVBQUlBLEVBQUdBLEVBQUdBLEdBRTVDQSxFQUFJQSxFQUFJQSxFQUNSQSxFQUFLQSxFQUFpQkEsRUFBSUEsRUFBSUEsRUFBSUEsRUFBSUEsRUFBR0EsRUFBR0EsR0FFNUNBLEdBQVNBLEdBckNiRCxHQUVJQSxHQUNBQSxFQUVBQSxFQUNBQSxFQUVBQSxFQUNBQSxFQUNBQSxFQUNBQSxFQUVBQSxFQUNBQSxFQUNBQSxFQUNBQSxFQWhCQUEsR0FBU0EsQ0F3Q2JBLFFBQ0lBLEdBQUlBLEtBQ0pBLEdBQUlBLEtBQ0pBLFVBQVVBLEVBQ1ZBLEVBQUdBLEVBQ0hBLEVBQUdBLEVBQ0hBLEdBQUlBLEVBQ0pBLEdBQUlBLEVBQ0pBLE9BQVFBLEVBQ1JBLE9BQVFBLEVBQ1JBLE9BQVFBLEVBQ1JBLFdBQVlBLEVBQ1pBLEtBQU1BLFNBQVVBLEdBQ1pFLEVBQUlDLElBQUlDLEVBQUdDLEVBQUdDLEVBQVFDLEVBQUlDLEVBQUlDLElBRWxDVCxjQUFlQSxTQUFVQSxHQUNqQlEsSUFBT0QsSUFFWEcsSUFDQWxmLEtBQUttZixHQUFLQSxFQUNWbmYsS0FBS29mLEdBQUtBLEVBRVZDLEVBQUlDLEVBQUlDLEtBQUtDLElBQUlILEVBQUlDLEVBQUdHLEVBQUlOLEdBQzVCRSxFQUFJSyxFQUFJSCxLQUFLSSxJQUFJTixFQUFJSyxFQUFHRCxFQUFJTixHQUM1QkUsRUFBSU8sRUFBSUwsS0FBS0MsSUFBSUgsRUFBSU8sRUFBR0MsRUFBSVQsR0FDNUJDLEVBQUlqZCxFQUFJbWQsS0FBS0ksSUFBSU4sRUFBSWpkLEVBQUd5ZCxFQUFJVCxHQUV4QlUsSUFDQVQsRUFBSUMsRUFBSUMsS0FBS0MsSUFBSUgsRUFBSUMsRUFBR0EsSUFDeEJTLElBQ0FWLEVBQUlLLEVBQUlILEtBQUtJLElBQUlOLEVBQUlLLEVBQUdBLElBQ3hCTSxJQUNBWCxFQUFJTyxFQUFJTCxLQUFLQyxJQUFJSCxFQUFJTyxFQUFHQSxJQUN4QkssSUFDQVosRUFBSWpkLEVBQUltZCxLQUFLSSxJQUFJTixFQUFJamQsRUFBR0EsTUFFaENvYyxnQkFBaUJBLFNBQVVBLEVBQW1CQSxHQUMxQyxHQUFJUSxJQUFPRCxFQUFYLENBRUFHLElBQ0FsZixLQUFLbWYsR0FBS0EsRUFDVm5mLEtBQUtvZixHQUFLQSxFQUVWQyxFQUFJQyxFQUFJQyxLQUFLQyxJQUFJSCxFQUFJQyxFQUFHRyxFQUFJTixHQUM1QkUsRUFBSUssRUFBSUgsS0FBS0ksSUFBSU4sRUFBSUssRUFBR0QsRUFBSU4sR0FDNUJFLEVBQUlPLEVBQUlMLEtBQUtDLElBQUlILEVBQUlPLEVBQUdDLEVBQUlULEdBQzVCQyxFQUFJamQsRUFBSW1kLEtBQUtJLElBQUlOLEVBQUlqZCxFQUFHeWQsRUFBSVQsRUFFNUIsSUFBSWMsR0FBS0MsRUFBS0MsZ0JBQWtCLENBQzVCTixLQUNBVCxFQUFJQyxFQUFJQyxLQUFLQyxJQUFJSCxFQUFJQyxFQUFHQSxFQUFJWSxJQUM1QkgsSUFDQVYsRUFBSUssRUFBSUgsS0FBS0ksSUFBSU4sRUFBSUssRUFBR0EsRUFBSVEsSUFDNUJGLElBQ0FYLEVBQUlPLEVBQUlMLEtBQUtDLElBQUlILEVBQUlPLEVBQUdBLEVBQUlNLElBQzVCRCxJQUNBWixFQUFJamQsRUFBSW1kLEtBQUtJLElBQUlOLEVBQUlqZCxFQUFHQSxFQUFJOGQsR0FFaEMsSUFBSUcsR0FBTUYsRUFBS0csb0JBQXNCSCxFQUFLSSxrQkFBb0IsRUFDMURDLEVBQUt4Z0IsS0FBS3lnQixnQkFDZEQsR0FBRyxJQUFNQSxFQUFHLEdBQ1pBLEVBQUcsSUFBTUEsRUFBRyxFQUNaLElBQUlFLEdBQUtDLEVBQWFsQixFQUFJSSxFQUFJTSxFQUFLQyxnQkFBaUJDLEVBQUtHLEdBQ3JESSxFQUFLNWdCLEtBQUs2Z0IsZUFDVkMsRUFBS0gsRUFBYXhCLEVBQUlDLEVBQUllLEVBQUtDLGdCQUFpQkMsRUFBS08sRUFFekR2QixHQUFJQyxFQUFJQyxLQUFLQyxJQUFJSCxFQUFJQyxFQUFHb0IsRUFBR0ssR0FBSUwsRUFBR00sR0FBSUYsRUFBR0MsR0FBSUQsRUFBR0UsSUFDaEQzQixFQUFJSyxFQUFJSCxLQUFLSSxJQUFJTixFQUFJSyxFQUFHZ0IsRUFBR0ssR0FBSUwsRUFBR00sR0FBSUYsRUFBR0MsR0FBSUQsRUFBR0UsSUFDaEQzQixFQUFJTyxFQUFJTCxLQUFLQyxJQUFJSCxFQUFJTyxFQUFHYyxFQUFHTyxHQUFJUCxFQUFHUSxHQUFJSixFQUFHRyxHQUFJSCxFQUFHSSxJQUNoRDdCLEVBQUlqZCxFQUFJbWQsS0FBS0ksSUFBSU4sRUFBSWpkLEVBQUdzZSxFQUFHTyxHQUFJUCxFQUFHUSxHQUFJSixFQUFHRyxHQUFJSCxFQUFHSSxNQUVwRDFDLFNBQVVBLFdBQ04sTUFBTyxJQUVYQSxlQUFnQkEsV0FDWixHQUFJMkMsSUFDSTFCLEVBQUtiLEVBQ0xpQixFQUFLaEIsRUFFYixPQUFJSSxJQUNRa0MsRUFBRyxJQUFLQSxFQUFHLE1BQ2RBLEVBQUcsR0FBSUEsRUFBRyxLQUV2QjNDLGFBQWNBLFdBQ1YsR0FBSTJDLElBQ0loQyxFQUFLUCxFQUNMUSxFQUFLUCxFQUViLE9BQUlJLElBQ1FrQyxFQUFHLElBQUtBLEVBQUcsTUFDZEEsRUFBRyxHQUFJQSxFQUFHLE1BSy9CNUMsUUFBQUEsR0FBMEJBLEVBQVlBLEVBQVlBLEVBQVlBLEVBQVlBLEVBQWFBLEVBQWFBLEdBTWhHNkMsR0FBSUEsSUFBS0EsRUFBS0EsSUFBT0EsRUFBTUEsSUFBT0EsRUFBTUEsSUFBT0EsRUFBS0EsRUFDcERBLE9BQVVBLEtBQU5BLEdBQ09BLEVBQ1BBLEVBQUlBLEdBQUtBLEdBQ0ZBLEVBQ0hBLEVBQUpBLElBQVVBLEdBQ0hBLEdBQ0pBLEVBR1g3QyxRQUFBQSxHQUFzQkEsRUFBV0EsRUFBV0EsRUFBbUJBLEVBQWlCQSxHQUM1RThDLEdBQUlBLEdBQUtBLEVBQVlBLENBQ3JCQSxRQUFRQSxHQUNKQSxJQUFLQSxHQUFBQSxXQUFXQSxNQUNaQSxPQUNJQSxHQUFJQSxFQUFJQSxFQUNSQSxHQUFJQSxFQUFJQSxFQUNSQSxHQUFJQSxFQUFJQSxFQUNSQSxHQUFJQSxFQUFJQSxFQUdoQkEsS0FBS0EsR0FBQUEsV0FBV0EsT0FDWkEsR0FBSUEsR0FBS0EsRUFBZ0JBLEdBQ3JCQSxFQUFNQSxFQUFvQkEsRUFDOUJBLFFBQ0lBLEdBQUlBLEVBQUlBLEdBQU1BLEVBQUdBLEdBQUtBLEVBQUlBLElBQzFCQSxHQUFJQSxFQUFJQSxHQUFNQSxFQUFHQSxHQUFLQSxFQUFJQSxJQUMxQkEsR0FBSUEsRUFBSUEsR0FBTUEsRUFBR0EsR0FBS0EsRUFBSUEsSUFDMUJBLEdBQUlBLEVBQUlBLEdBQU1BLEVBQUdBLEdBQUtBLEVBQUlBLElBR2xDQSxLQUFLQSxHQUFBQSxXQUFXQSxLQUNoQkEsUUFDSUEsR0FBSUEsR0FBS0EsRUFBZ0JBLEdBQ3JCQSxFQUFNQSxFQUFvQkEsRUFDOUJBLFFBQ0lBLEdBQUlBLEVBQUlBLEVBQUtBLEVBQUlBLEdBQ2pCQSxHQUFJQSxFQUFJQSxHQUFNQSxFQUFJQSxHQUNsQkEsR0FBSUEsRUFBSUEsRUFBS0EsRUFBSUEsR0FDakJBLEdBQUlBLEVBQUlBLEdBQU1BLEVBQUlBLEtBTWxDOUMsUUFBQUEsR0FBeUJBLEdBQ3JCK0MsR0FBSUEsR0FBTUEsS0FBS0EsS0FBS0EsRUFBRUEsR0FBS0EsRUFBRUEsR0FBS0EsRUFBRUEsR0FBS0EsRUFBRUEsR0FDM0NBLFFBQ1FBLEVBQUVBLEdBQUtBLEVBQ1BBLEVBQUVBLEdBQUtBLEdBSW5CL0MsUUFBQUEsR0FBNkJBLEdBQ3pCZ0QsUUFDS0EsRUFBRUEsR0FDSEEsRUFBRUEsSUF0TU1oRCxFQUFBQSxJQUFHQSxHQVRIL1YsRUFBQUEsRUFBQUEsV0FBQUEsRUFBQUEsZUFBTDNRLEVBQUFBLEVBQUFBLE9BQUFBLEVBQUFBLFdBQVJBLFVBQUFBLFl2RklQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBSzJRLEdBQUFBLElBQUFBLFNBQUFBLEdBVWhCK1YsUUFBQUEsR0FBc0JBLEVBQWFBLEVBQWFBLEVBQVdBLEVBQVdBLEdBS2xFaUQsUUFBQUEsR0FBY0EsRUFBZUEsR0FDekJDLElBQUlBLEVBQUpBLENBQ0FBLEdBQUlBLEdBQVFBLEVBQUtBLE1BQU9BLEVBQ3hCQSxJQUFJQSxJQUFNQSxFQUFNQSxFQUFPQSxFQUFNQSxHQUN6QkEsR0FBTUEsRUFBSUEsRUFBS0EsRUFBSUEsR0FDbkJBLEVBQWNBLEtBQUtBLEdBQUtBLEVBQUFBLE9BQU9BLGFBQWFBLEVBQUlBLEdBRWhEQSxFQUFJQSxFQUFnQkEsRUFBYUEsR0FBU0EsRUFBT0EsR0FBUUEsR0FBSUEsR0FDN0RBLEVBQUlBLEVBQWdCQSxFQUFhQSxHQUFTQSxFQUFLQSxHQUFNQSxHQUFJQSxHQUV6REEsRUFBSUEsRUFBOEJBLEVBQUdBLEVBQUlBLEVBQUdBLEdBRTVDQSxHQUFNQSxFQUFBQSxPQUFPQSxjQUFjQSxFQUFJQSxHQUUvQkEsRUFBS0EsS0FBS0EsTUFBTUEsRUFBRUEsR0FBS0EsRUFBRUEsR0FBSUEsRUFBRUEsR0FBS0EsRUFBRUEsR0FDakNBLEdBQUxBLElBQ0FBLEVBQU1BLEVBQUlBLEtBQUtBLEdBQU1BLEVBQ3pCQSxJQUFJQSxHQUFLQSxLQUFLQSxNQUFNQSxFQUFFQSxHQUFLQSxFQUFFQSxHQUFJQSxFQUFFQSxHQUFLQSxFQUFFQSxHQUNqQ0EsR0FBTEEsSUFDQUEsRUFBTUEsRUFBSUEsS0FBS0EsR0FBTUEsR0FFekJBLEVBQU9BLEVBQVNBLEtBQUtBLEVBQUVBLEdBQUlBLEVBQUVBLElBQzdCQSxFQUFLQSxHQUFLQSxFQUNWQSxFQUFLQSxHQUFLQSxFQUNWQSxFQUFNQSxFQUFTQSxJQUFJQSxFQUFFQSxHQUFJQSxFQUFFQSxHQUFJQSxFQUFRQSxFQUFJQSxFQUFJQSxHQUMvQ0EsR0FBU0EsR0E3QmJELEdBQUlBLEdBQ0FBLEVBQ0FBLEdBQVNBLENBOEJiQSxRQUNJQSxHQUFJQSxLQUNKQSxHQUFJQSxLQUNKQSxVQUFVQSxFQUNWQSxJQUFLQSxFQUNMQSxJQUFLQSxFQUNMQSxFQUFHQSxFQUNIQSxFQUFHQSxFQUNIQSxHQUFJQSxFQUNKQSxHQUFJQSxFQUNKQSxPQUFRQSxFQUNSQSxLQUFNQSxTQUFVQSxHQUNaOUMsRUFBSWdELE1BQU1DLEVBQUtDLEVBQUtoRCxFQUFHQyxFQUFHQyxJQUU5QjBDLGNBQWVBLFNBQVVBLEdBQ3JCdEMsRUFBS2xmLEtBQUt5ZixHQUFJemYsS0FBSzZmLElBQ25CN2YsS0FBS21mLEdBQUtSLEVBQUlRLEdBQ2RuZixLQUFLb2YsR0FBS1QsRUFBSVMsR0FFZEMsRUFBSUMsRUFBSUMsS0FBS0MsSUFBSUgsRUFBSUMsRUFBR3RmLEtBQUt5ZixJQUM3QkosRUFBSUssRUFBSUgsS0FBS0ksSUFBSU4sRUFBSUssRUFBRzFmLEtBQUt5ZixJQUM3QkosRUFBSU8sRUFBSUwsS0FBS0MsSUFBSUgsRUFBSU8sRUFBRzVmLEtBQUs2ZixJQUM3QlIsRUFBSWpkLEVBQUltZCxLQUFLSSxJQUFJTixFQUFJamQsRUFBR3BDLEtBQUs2ZixJQUU3QmdDLEVBQUtDLGNBQWN6QyxHQUNuQlYsRUFBSW1ELGNBQWN6QyxJQUV0Qm1DLGdCQUFpQkEsU0FBVUEsRUFBbUJBLEdBQzFDdEMsRUFBS2xmLEtBQUt5ZixHQUFJemYsS0FBSzZmLElBQ25CN2YsS0FBS21mLEdBQUtSLEVBQUlRLEdBQ2RuZixLQUFLb2YsR0FBS1QsRUFBSVMsRUFFZCxJQUFJYyxHQUFLQyxFQUFLQyxnQkFBa0IsQ0FDaENmLEdBQUlDLEVBQUlDLEtBQUtDLElBQUlILEVBQUlDLEVBQUd0ZixLQUFLeWYsR0FBS1MsR0FDbENiLEVBQUlLLEVBQUlILEtBQUtJLElBQUlOLEVBQUlLLEVBQUcxZixLQUFLeWYsR0FBS1MsR0FDbENiLEVBQUlPLEVBQUlMLEtBQUtDLElBQUlILEVBQUlPLEVBQUc1ZixLQUFLNmYsR0FBS0ssR0FDbENiLEVBQUlqZCxFQUFJbWQsS0FBS0ksSUFBSU4sRUFBSWpkLEVBQUdwQyxLQUFLNmYsR0FBS0ssR0FFbEMyQixFQUFLRSxnQkFBZ0IxQyxFQUFLYyxHQUMxQnhCLEVBQUlvRCxnQkFBZ0IxQyxFQUFLYyxJQUU3QnFCLFNBQVVBLFdBQ04sTUFBTyxJQUVYQSxlQUFnQkEsV0FFWixNQURBdEMsR0FBS2xmLEtBQUt5ZixHQUFJemYsS0FBSzZmLElBQ1pnQyxFQUFLcEIsa0JBRWhCZSxhQUFjQSxXQUNWLE1BQU83QyxHQUFJa0MsaUJBS3ZCdEMsUUFBQUEsR0FBeUJBLEVBQWVBLEVBQWdCQSxFQUFhQSxFQUFhQSxHQUM5RXlELEdBQUlBLEdBQU1BLEtBQUtBLEtBQUtBLEVBQUVBLEdBQUtBLEVBQUVBLEdBQUtBLEVBQUVBLEdBQUtBLEVBQUVBLElBQ3ZDQSxFQUFJQSxFQUFTQSxLQUFLQSxJQUFJQSxFQUFRQSxHQUM5QkEsRUFBSUEsRUFBSUEsQ0FHWkEsT0FGSUEsS0FDQUEsRUFBSUEsRUFBSUEsSUFDSkEsRUFBRUEsR0FBS0EsRUFBSUEsRUFBRUEsR0FBSUEsRUFBRUEsR0FBS0EsRUFBSUEsRUFBRUEsSUFHMUN6RCxRQUFBQSxHQUF1Q0EsRUFBY0EsRUFBY0EsRUFBY0EsR0FDN0UwRCxNQUFPQSxHQUFBQSxPQUFPQSxhQUFhQSxFQUFJQSxFQUFBQSxPQUFPQSxXQUFXQSxFQUFHQSxNQUFNQSxJQUFLQSxFQUFJQSxFQUFBQSxPQUFPQSxXQUFXQSxFQUFHQSxNQUFNQSxLQWpHbEYxRCxFQUFBQSxNQUFLQSxHQVZML1YsRUFBQUEsRUFBQUEsV0FBQUEsRUFBQUEsZUFBTDNRLEVBQUFBLEVBQUFBLE9BQUFBLEVBQUFBLFdBQVJBLFVBQUFBLFl3RkpQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBSzJRLEdBQUFBLElBQUFBLFNBQUFBLEdBSWhCK1YsUUFBQUEsS0FDSTJELE9BQ0lBLEdBQUlBLEtBQ0pBLEdBQUlBLEtBQ0pBLEdBQUlBLEtBQ0pBLEdBQUlBLEtBQ0pBLFVBQVVBLEVBQ1ZBLFNBQVNBLEVBQ1RBLEtBQU1BLFNBQVVBLEdBQ1p4RCxFQUFJeUQsYUFFUkQsY0FBZUEsU0FBVUEsS0FFekJBLGdCQUFpQkEsU0FBVUEsRUFBbUJBLEtBRTlDQSxTQUFVQSxXQUNOLE1BQU8sS0FFWEEsZUFBZ0JBLFdBQ1osTUFBTyxPQUVYQSxhQUFjQSxXQUNWLE1BQU8sUUF0QkgzRCxFQUFBQSxNQUFLQSxHQUpML1YsRUFBQUEsRUFBQUEsV0FBQUEsRUFBQUEsZUFBTDNRLEVBQUFBLEVBQUFBLE9BQUFBLEVBQUFBLFdBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFLMlEsR0FBQUEsSUFBQUEsU0FBQUEsR0FTaEIrVixRQUFBQSxHQUE0QkEsRUFBY0EsRUFBY0EsRUFBY0EsRUFBY0EsRUFBV0EsR0FDM0Y2RCxPQUNJQSxHQUFJQSxLQUNKQSxHQUFJQSxLQUNKQSxHQUFJQSxFQUNKQSxHQUFJQSxFQUNKQSxVQUFVQSxFQUNWQSxLQUFNQSxFQUNOQSxLQUFNQSxFQUNOQSxLQUFNQSxFQUNOQSxLQUFNQSxFQUNOQSxFQUFHQSxFQUNIQSxFQUFHQSxFQUNIQSxLQUFNQSxTQUFVQSxHQUNaMUQsRUFBSTJELGNBQWNDLEVBQU1DLEVBQU1DLEVBQU1DLEVBQU03RCxFQUFHQyxJQUVqRHVELGNBQWVBLFNBQVVBLEdBQ3JCLEdBQUlNLEdBQUlDLEVBQVUzaUIsS0FBS3lmLEdBQUk2QyxFQUFNRSxFQUFNNUQsRUFBRzVlLEtBQUs2ZixHQUFJMEMsRUFBTUUsRUFBTTVELEVBQ2pELE9BQVY2RCxFQUFFOUQsRUFBRSxLQUNKUyxFQUFJQyxFQUFJQyxLQUFLQyxJQUFJSCxFQUFJQyxFQUFHb0QsRUFBRTlELEVBQUUsSUFDNUJTLEVBQUlLLEVBQUlILEtBQUtJLElBQUlOLEVBQUlLLEVBQUdnRCxFQUFFOUQsRUFBRSxLQUVsQixNQUFWOEQsRUFBRTlELEVBQUUsS0FDSlMsRUFBSUMsRUFBSUMsS0FBS0MsSUFBSUgsRUFBSUMsRUFBR29ELEVBQUU5RCxFQUFFLElBQzVCUyxFQUFJSyxFQUFJSCxLQUFLSSxJQUFJTixFQUFJSyxFQUFHZ0QsRUFBRTlELEVBQUUsS0FFbEIsTUFBVjhELEVBQUU3RCxFQUFFLEtBQ0pRLEVBQUlPLEVBQUlMLEtBQUtDLElBQUlILEVBQUlPLEVBQUc4QyxFQUFFN0QsRUFBRSxJQUM1QlEsRUFBSWpkLEVBQUltZCxLQUFLSSxJQUFJTixFQUFJamQsRUFBR3NnQixFQUFFN0QsRUFBRSxLQUVsQixNQUFWNkQsRUFBRTdELEVBQUUsS0FDSlEsRUFBSU8sRUFBSUwsS0FBS0MsSUFBSUgsRUFBSU8sRUFBRzhDLEVBQUU3RCxFQUFFLElBQzVCUSxFQUFJamQsRUFBSW1kLEtBQUtJLElBQUlOLEVBQUlqZCxFQUFHc2dCLEVBQUU3RCxFQUFFLEtBR2hDUSxFQUFJQyxFQUFJQyxLQUFLQyxJQUFJSCxFQUFJQyxFQUFHVixHQUN4QlMsRUFBSUssRUFBSUgsS0FBS0ksSUFBSU4sRUFBSUssRUFBR2QsR0FDeEJTLEVBQUlPLEVBQUlMLEtBQUtDLElBQUlILEVBQUlPLEVBQUdmLEdBQ3hCUSxFQUFJamQsRUFBSW1kLEtBQUtJLElBQUlOLEVBQUlqZCxFQUFHeWMsSUFFNUJ1RCxnQkFBaUJBLFNBQVVBLEVBQW1CQSxHQUMxQyxHQUFJbEMsR0FBS0MsRUFBS0MsZ0JBQWtCLEVBRTVCc0MsRUFBSUMsRUFBVTNpQixLQUFLeWYsR0FBSTZDLEVBQU1FLEVBQU01RCxFQUFHNWUsS0FBSzZmLEdBQUkwQyxFQUFNRSxFQUFNNUQsRUFDakQsT0FBVjZELEVBQUU5RCxFQUFFLEtBQ0pTLEVBQUlDLEVBQUlDLEtBQUtDLElBQUlILEVBQUlDLEVBQUdvRCxFQUFFOUQsRUFBRSxHQUFLc0IsR0FDakNiLEVBQUlLLEVBQUlILEtBQUtJLElBQUlOLEVBQUlLLEVBQUdnRCxFQUFFOUQsRUFBRSxHQUFLc0IsSUFFdkIsTUFBVndDLEVBQUU5RCxFQUFFLEtBQ0pTLEVBQUlDLEVBQUlDLEtBQUtDLElBQUlILEVBQUlDLEVBQUdvRCxFQUFFOUQsRUFBRSxHQUFLc0IsR0FDakNiLEVBQUlLLEVBQUlILEtBQUtJLElBQUlOLEVBQUlLLEVBQUdnRCxFQUFFOUQsRUFBRSxHQUFLc0IsSUFFdkIsTUFBVndDLEVBQUU3RCxFQUFFLEtBQ0pRLEVBQUlPLEVBQUlMLEtBQUtDLElBQUlILEVBQUlPLEVBQUc4QyxFQUFFN0QsRUFBRSxHQUFLcUIsR0FDakNiLEVBQUlqZCxFQUFJbWQsS0FBS0ksSUFBSU4sRUFBSWpkLEVBQUdzZ0IsRUFBRTdELEVBQUUsR0FBS3FCLElBRXZCLE1BQVZ3QyxFQUFFN0QsRUFBRSxLQUNKUSxFQUFJTyxFQUFJTCxLQUFLQyxJQUFJSCxFQUFJTyxFQUFHOEMsRUFBRTdELEVBQUUsR0FBS3FCLEdBQ2pDYixFQUFJamQsRUFBSW1kLEtBQUtJLElBQUlOLEVBQUlqZCxFQUFHc2dCLEVBQUU3RCxFQUFFLEdBQUtxQixJQUdyQ2IsRUFBSUMsRUFBSUMsS0FBS0MsSUFBSUgsRUFBSUMsRUFBR1YsR0FDeEJTLEVBQUlLLEVBQUlILEtBQUtJLElBQUlOLEVBQUlLLEVBQUdkLEdBQ3hCUyxFQUFJTyxFQUFJTCxLQUFLQyxJQUFJSCxFQUFJTyxFQUFHZixHQUN4QlEsRUFBSWpkLEVBQUltZCxLQUFLSSxJQUFJTixFQUFJamQsRUFBR3ljLElBRTVCdUQsU0FBVUEsV0FDTixNQUFPLElBQU1FLEVBQUtNLFdBQWEsSUFBTUwsRUFBS0ssV0FBYSxJQUFNSixFQUFLSSxXQUFhLElBQU1ILEVBQUtHLFdBQWEsSUFBTWhFLEVBQUVnRSxXQUFhLElBQU0vRCxFQUFFK0QsWUFFeElSLGVBQWdCQSxXQUVaLE9BQ1EsR0FBS0UsRUFBT3RpQixLQUFLeWYsSUFDakIsR0FBSzhDLEVBQU92aUIsS0FBSzZmLE1BRzdCdUMsYUFBY0EsV0FFVixPQUNRLEdBQUt4RCxFQUFJNEQsR0FDVCxHQUFLM0QsRUFBSTRELE1BeUI3QmxFLFFBQUFBLEdBQW1CQSxFQUFZQSxFQUFZQSxFQUFZQSxFQUFZQSxFQUFZQSxFQUFZQSxFQUFZQSxHQUNuR3NFLE9BQ0lBLEVBQUdBLEVBQUlBLEVBQUlBLEVBQUlBLEVBQUlBLEdBQ25CQSxFQUFHQSxFQUFJQSxFQUFJQSxFQUFJQSxFQUFJQSxJQUkzQnRFLFFBQUFBLEdBQWFBLEVBQVdBLEVBQVdBLEVBQVdBLEdBQzFDdUUsR0FBSUEsR0FBSUEsRUFBSUEsRUFBSUEsRUFBSUEsRUFBSUEsRUFBSUEsRUFDeEJBLEVBQUlBLEVBQUlBLEVBQ1JBLEdBQUtBLEVBQUlBLEVBQUlBLEVBQUlBLEVBQUlBLEVBQUlBLEVBQ3pCQSxFQUFLQSxLQUFLQSxLQUFLQSxFQUFJQSxFQUFJQSxFQUFJQSxFQUFJQSxHQUUvQkEsR0FBa0JBLEtBQU1BLEtBQzVCQSxJQUFJQSxNQUFNQSxHQUNOQSxNQUFPQSxFQUVYQSxJQUFJQSxHQUNBQSxDQWNKQSxPQVpBQSxLQUFNQSxFQUFJQSxJQUFPQSxFQUFJQSxHQUNqQkEsR0FBS0EsR0FBVUEsR0FBTEEsSUFDVkEsRUFBS0EsRUFBSUEsRUFDVEEsRUFBS0EsR0FBTUEsRUFBSUEsRUFBS0EsRUFBS0EsRUFBT0EsRUFBSUEsRUFBSUEsRUFBSUEsRUFBS0EsRUFBT0EsRUFBSUEsRUFBSUEsRUFBS0EsRUFBSUEsRUFBTUEsRUFBSUEsRUFBSUEsRUFBSUEsR0FHL0ZBLElBQU1BLEVBQUlBLElBQU9BLEVBQUlBLEdBQ2pCQSxHQUFLQSxHQUFVQSxHQUFMQSxJQUNWQSxFQUFLQSxFQUFJQSxFQUNUQSxFQUFLQSxHQUFNQSxFQUFJQSxFQUFLQSxFQUFLQSxFQUFPQSxFQUFJQSxFQUFJQSxFQUFJQSxFQUFLQSxFQUFPQSxFQUFJQSxFQUFJQSxFQUFLQSxFQUFJQSxFQUFNQSxFQUFJQSxFQUFJQSxFQUFJQSxHQUd4RkEsRUF6SUt2RSxFQUFBQSxZQUFXQSxHQVRYL1YsRUFBQUEsRUFBQUEsV0FBQUEsRUFBQUEsZUFBTDNRLEVBQUFBLEVBQUFBLE9BQUFBLEVBQUFBLFdBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFLMlEsR0FBQUEsSUFBQUEsU0FBQUEsR0FPaEIrVixRQUFBQSxHQUF5QkEsRUFBV0EsRUFBV0EsRUFBZUEsR0FDMUR3RSxHQUFJQSxHQUFVQSxFQUFRQSxFQUNsQkEsRUFBVUEsRUFBU0EsRUFDbkJBLEVBQVFBLEVBQUlBLEVBQ1pBLEVBQVNBLEVBQUlBLEVBQ2JBLEVBQVVBLEVBQUlBLEVBQ2RBLEVBQVVBLEVBQUlBLENBRWxCQSxRQUNJQSxHQUFJQSxLQUNKQSxHQUFJQSxLQUNKQSxHQUFJQSxFQUNKQSxHQUFJQSxFQUNKQSxVQUFVQSxFQUNWQSxFQUFHQSxFQUNIQSxFQUFHQSxFQUNIQSxNQUFPQSxFQUNQQSxPQUFRQSxFQUNSQSxLQUFNQSxTQUFVQSxHQUVaLEdBREFyRSxFQUFJc0UsWUFDQUMsSUFBVUMsRUFFVixXQURBeEUsR0FBSUMsSUFBSXdFLEVBQVNDLEVBQVNDLEVBQVMsRUFBYSxFQUFWOUQsS0FBSytELElBQVEsRUFJdkQsSUFBSUMsR0FBUSxTQUNSQyxFQUFLSCxFQUFVRSxFQUNmRSxFQUFLQyxFQUFVSCxDQUduQjdFLEdBQUlpRixPQUFPL0UsRUFBR3dFLEdBRWQxRSxFQUFJMkQsY0FBY3pELEVBQUd3RSxFQUFVSyxFQUFJTixFQUFVSyxFQUFJM0UsRUFBR3NFLEVBQVN0RSxHQUU3REgsRUFBSTJELGNBQWNjLEVBQVVLLEVBQUkzRSxFQUFHK0UsRUFBT1IsRUFBVUssRUFBSUcsRUFBT1IsR0FFL0QxRSxFQUFJMkQsY0FBY3VCLEVBQU9SLEVBQVVLLEVBQUlOLEVBQVVLLEVBQUlLLEVBQVFWLEVBQVNVLEdBRXRFbkYsRUFBSTJELGNBQWNjLEVBQVVLLEVBQUlLLEVBQVFqRixFQUFHd0UsRUFBVUssRUFBSTdFLEVBQUd3RSxHQUM1RDFFLEVBQUl5RCxhQUdSWSxjQUFlQSxTQUFVQSxHQUNyQjFELEVBQUlDLEVBQUlDLEtBQUtDLElBQUlILEVBQUlDLEVBQUdWLEdBQ3hCUyxFQUFJSyxFQUFJSCxLQUFLSSxJQUFJTixFQUFJSyxFQUFHZCxFQUFJcUUsR0FDNUI1RCxFQUFJTyxFQUFJTCxLQUFLQyxJQUFJSCxFQUFJTyxFQUFHZixHQUN4QlEsRUFBSWpkLEVBQUltZCxLQUFLSSxJQUFJTixFQUFJamQsRUFBR3ljLEVBQUlxRSxJQUVoQ0gsZ0JBQWlCQSxTQUFVQSxFQUFtQkEsR0FDMUMsR0FBSTdDLEdBQUtDLEVBQUtDLGdCQUFrQixDQUNoQ2YsR0FBSUMsRUFBSUMsS0FBS0MsSUFBSUgsRUFBSUMsRUFBR1YsRUFBSXNCLEdBQzVCYixFQUFJSyxFQUFJSCxLQUFLSSxJQUFJTixFQUFJSyxFQUFHZCxFQUFJcUUsRUFBUS9DLEdBQ3BDYixFQUFJTyxFQUFJTCxLQUFLQyxJQUFJSCxFQUFJTyxFQUFHZixFQUFJcUIsR0FDNUJiLEVBQUlqZCxFQUFJbWQsS0FBS0ksSUFBSU4sRUFBSWpkLEVBQUd5YyxFQUFJcUUsRUFBU2hELElBRXpDNkMsZUFBZ0JBLFdBQ1osTUFBTyxPQUVYQSxhQUFjQSxXQUNWLE1BQU8sUUEzREh4RSxFQUFBQSxRQUFPQSxHQVBQL1YsRUFBQUEsRUFBQUEsV0FBQUEsRUFBQUEsZUFBTDNRLEVBQUFBLEVBQUFBLE9BQUFBLEVBQUFBLFdBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFLMlEsR0FBQUEsSUFBQUEsU0FBQUEsR0FZaEIrVixRQUFBQSxHQUErQkEsRUFBWUEsRUFBWUEsRUFBdUJBLEVBQXlCQSxFQUFvQ0EsRUFBWUEsR0FDbkp1RixPQUNJQSxHQUFJQSxLQUNKQSxHQUFJQSxLQUNKQSxVQUFVQSxFQUNWQSxHQUFJQSxFQUNKQSxHQUFJQSxFQUNKQSxjQUFlQSxFQUNmQSxlQUFnQkEsRUFDaEJBLG1CQUFvQkEsRUFDcEJBLEdBQUlBLEVBQ0pBLEdBQUlBLEVBQ0pBLElBQUtBLEtBQ0xBLEtBQU1BLFNBQVVBLEdBQ1o5akIsS0FBSytqQixJQUFNL2pCLEtBQUsrakIsS0FBT0MsRUFBY2hrQixLQUNyQyxLQUFLLEdBQUk4RixHQUFJLEVBQUdpZSxFQUFNL2pCLEtBQUsrakIsSUFBSzVRLEVBQU00USxFQUFJaHBCLE9BQVlvWSxFQUFKck4sRUFBU0EsSUFDdkRpZSxFQUFJamUsR0FBR21lLEtBQUt2RixJQUdwQm9GLGNBQWVBLFNBQVVBLEdBQ3JCOWpCLEtBQUsrakIsSUFBTS9qQixLQUFLK2pCLEtBQU9DLEVBQWNoa0IsS0FDckMsS0FBSyxHQUFJOEYsR0FBSSxFQUFHaWUsRUFBTS9qQixLQUFLK2pCLElBQUs1USxFQUFNNFEsRUFBSWhwQixPQUFZb1ksRUFBSnJOLEVBQVNBLElBQ3ZEaWUsRUFBSWplLEdBQUdnYyxjQUFjekMsSUFHN0J5RSxnQkFBaUJBLFNBQVVBLEVBQW1CQSxHQUMxQzlqQixLQUFLK2pCLElBQU0vakIsS0FBSytqQixLQUFPQyxFQUFjaGtCLEtBQ3JDLEtBQUssR0FBSThGLEdBQUksRUFBR2llLEVBQU0vakIsS0FBSytqQixJQUFLNVEsRUFBTTRRLEVBQUlocEIsT0FBWW9ZLEVBQUpyTixFQUFTQSxJQUN2RGllLEVBQUlqZSxHQUFHaWMsZ0JBQWdCMUMsRUFBS2MsSUFHcEMyRCxTQUFVQSxXQUNOLE1BQU8sSUFBTUksRUFBR3RCLFdBQWEsSUFBTXVCLEVBQUd2QixXQUFhLElBQU13QixFQUFjeEIsV0FBYSxJQUFNeUIsRUFBZXpCLFdBQWEsSUFBTTBCLEVBQW1CMUIsV0FBYSxJQUFNekQsRUFBR3lELFdBQWEsSUFBTXhELEVBQUd3RCxZQUUvTGtCLGVBQWdCQSxXQUNaOWpCLEtBQUsrakIsSUFBTS9qQixLQUFLK2pCLEtBQU9DLEVBQWNoa0IsS0FDckMsSUFBSStqQixHQUFNL2pCLEtBQUsrakIsSUFBSSxFQUNuQixPQUFPQSxHQUFNQSxFQUFJdEQsa0JBQW9CLEVBQUcsSUFFNUNxRCxhQUFjQSxXQUNWOWpCLEtBQUsrakIsSUFBTS9qQixLQUFLK2pCLEtBQU9DLEVBQWNoa0IsS0FDckMsSUFBSStqQixHQUFNL2pCLEtBQUsrakIsSUFBSS9qQixLQUFLK2pCLElBQUlocEIsT0FBUyxFQUNyQyxPQUFPZ3BCLEdBQU1BLEVBQUlsRCxnQkFBa0IsRUFBRyxLQVNsRHRDLFFBQUFBLEdBQXdCQSxHQU1wQmdHLEdBQUlBLE1BR0FBLEVBQUtBLEVBQUdBLEdBQ1JBLEVBQUtBLEVBQUdBLEdBQ1JBLEVBQUtBLEVBQUdBLEdBQ1JBLEVBQUtBLEVBQUdBLEdBQ1JBLEVBQUtBLEVBQUdBLEdBQ1JBLEVBQUtBLEVBQUdBLEVBS1pBLElBQUlBLEtBQUtBLElBQUlBLEVBQUtBLEdBQU1BLEdBQW1CQSxLQUFLQSxJQUFJQSxFQUFLQSxHQUFNQSxFQUMzREEsTUFBT0EsRUFHWEEsSUFBSUEsS0FBS0EsSUFBSUEsR0FBTUEsR0FBZ0JBLEtBQUtBLElBQUlBLEdBQU1BLEVBRzlDQSxNQURBQSxHQUFTQSxLQUFLQSxFQUFBQSxLQUFLQSxFQUFJQSxJQUNoQkEsQ0FJWEEsSUFBSUEsS0FBS0EsSUFBSUEsR0FBTUEsR0FBaUJBLEtBQUtBLElBQUlBLEdBQU1BLEVBRy9DQSxNQUFPQSxFQUlYQSxHQUFLQSxLQUFLQSxJQUFJQSxHQUNkQSxFQUFLQSxLQUFLQSxJQUFJQSxFQUdkQSxJQUFJQSxHQUFRQSxFQUFHQSxjQUFnQkEsS0FBS0EsR0FBS0EsSUFHckNBLEVBQVVBLEtBQUtBLElBQUlBLEdBQ25CQSxFQUFVQSxLQUFLQSxJQUFJQSxHQUNuQkEsR0FBT0EsRUFBS0EsR0FBTUEsRUFDbEJBLEdBQU9BLEVBQUtBLEdBQU1BLEVBQ2xCQSxFQUFNQSxFQUFVQSxFQUFNQSxFQUFVQSxFQUNoQ0EsRUFBTUEsRUFBVUEsRUFBTUEsRUFBVUEsRUFDaENBLEVBQU9BLEVBQU1BLEVBQ2JBLEVBQU9BLEVBQU1BLEVBQ2JBLEVBQU1BLEVBQUtBLEVBQ1hBLEVBQU1BLEVBQUtBLEVBR1hBLEVBQVVBLEVBQU9BLEVBQVFBLEVBQU9BLENBQ3BDQSxJQUFJQSxFQUFTQSxFQUFLQSxDQUVkQSxHQUFJQSxHQUFjQSxLQUFLQSxLQUFLQSxFQUM1QkEsSUFBTUEsRUFDTkEsR0FBTUEsRUFFTkEsRUFBTUEsRUFBS0EsRUFDWEEsRUFBTUEsRUFBS0EsRUFHZkEsR0FBSUEsR0FBS0EsRUFBS0EsRUFBSUEsRUFDZEEsRUFBS0EsRUFBTUEsRUFBUUEsRUFBTUEsRUFBU0EsRUFBTUEsRUFFeENBLEVBQVFBLEVBQUdBLGtCQUFtQkEsRUFDOUJBLEVBQVFBLEVBQUdBLHFCQUF1QkEsRUFBQUEsZUFBZUEsU0FFckRBLElBQVFBLEVBQUpBLEVBQVNBLENBRVRBLEdBQUlBLEdBQVFBLEtBQUtBLEtBQUtBLEVBQU1BLEdBQUtBLEVBQU1BLEdBQ3ZDQSxJQUFNQSxFQUNOQSxHQUFNQSxFQUVOQSxFQUFNQSxFQUFLQSxFQUNYQSxFQUFNQSxFQUFLQSxFQUdYQSxFQUFNQSxFQUNOQSxFQUFNQSxFQUdOQSxFQUFLQSxFQUNMQSxFQUFLQSxNQUdMQSxHQUFJQSxLQUFLQSxLQUFLQSxHQUFNQSxFQUFNQSxFQUFTQSxFQUFNQSxJQUdyQ0EsSUFBVUEsSUFDVkEsR0FBS0EsR0FHVEEsRUFBTUEsR0FBTUEsRUFBS0EsRUFBTUEsR0FDdkJBLEVBQU1BLElBQU1BLEVBQUtBLEVBQU1BLEdBR3ZCQSxFQUFLQSxFQUFVQSxFQUFNQSxFQUFVQSxFQUMvQkEsRUFBS0EsRUFBVUEsRUFBTUEsRUFBVUEsQ0FJbkNBLEtBQU9BLEVBQUtBLEdBQU1BLEVBQ2xCQSxJQUFPQSxFQUFLQSxHQUFNQSxDQUtsQkEsSUFBSUEsR0FBS0EsS0FBS0EsT0FBUUEsRUFBTUEsR0FBT0EsR0FBT0EsRUFBTUEsR0FBT0EsR0FDbkRBLEVBQWVBLEVBQUxBLEVBQVlBLEVBQU1BLEtBQUtBLEdBQUtBLEVBQUtBLEVBRTNDQSxFQUFNQSxLQUFLQSxRQUFTQSxFQUFNQSxHQUFPQSxJQUFRQSxFQUFNQSxHQUFPQSxHQUN0REEsRUFBcUJBLEVBQU5BLEVBQVlBLEVBQU1BLEtBQUtBLEdBQUtBLEVBQUtBLEVBQU1BLEVBQU1BLENBRTVEQSxHQUVrQkEsRUFBZEEsSUFDQUEsR0FBZUEsRUFBTUEsS0FBS0EsSUFHMUJBLEVBQWNBLElBQ2RBLEdBQWVBLEVBQU1BLEtBQUtBLEdBbUJsQ0EsS0FBS0EsR0FkREEsR0FBZ0JBLEtBQUtBLE1BQU1BLEtBQUtBLElBQUlBLEdBQWVBLEtBQUtBLEdBQUtBLEtBQU9BLEVBQ3BFQSxFQUFRQSxFQUFjQSxFQUd0QkEsRUFBTUEsRUFBTUEsR0FBS0EsRUFBSUEsS0FBS0EsSUFBSUEsRUFBUUEsSUFBTUEsS0FBS0EsSUFBSUEsRUFBUUEsR0FFN0RBLEVBQWFBLEVBQVVBLEVBQ3ZCQSxFQUFhQSxFQUFVQSxFQUN2QkEsRUFBYUEsRUFBVUEsRUFDdkJBLEVBQWFBLEVBQVVBLEVBRXZCQSxFQUFhQSxLQUFLQSxJQUFJQSxHQUN0QkEsRUFBYUEsS0FBS0EsSUFBSUEsR0FFakJBLEVBQUlBLEVBQU9BLEVBQUpBLElBQXFCQSxFQUFHQSxDQUVwQ0EsR0FBSUEsR0FBU0EsRUFBU0EsRUFDbEJBLEVBQWFBLEtBQUtBLElBQUlBLEdBQ3RCQSxFQUFhQSxLQUFLQSxJQUFJQSxHQUd0QkEsRUFBTUEsRUFBS0EsR0FBT0EsRUFBYUEsRUFBYUEsRUFBYUEsR0FDekRBLEVBQU1BLEVBQUtBLEdBQU9BLEVBQWFBLEVBQWFBLEVBQWFBLEdBR3pEQSxFQUFTQSxHQUFNQSxFQUFhQSxFQUFhQSxFQUFhQSxHQUN0REEsR0FBU0EsR0FBTUEsRUFBYUEsRUFBYUEsRUFBYUEsR0FHdERBLEdBQU1BLEVBQVNBLEdBQU9BLEVBQWFBLEVBQWFBLEVBQWFBLEdBQzdEQSxHQUFNQSxHQUFTQSxHQUFPQSxFQUFhQSxFQUFhQSxFQUFhQSxFQUVqRUEsR0FBU0EsS0FBS0EsRUFBQUEsWUFBWUEsRUFBS0EsRUFBS0EsR0FBS0EsR0FBS0EsRUFBUUEsS0FHdERBLEVBQUtBLEVBQ0xBLEVBQUtBLEdBQ0xBLEVBQVNBLEVBRVRBLEVBQWFBLEVBQ2JBLEVBQWFBLEVBR2pCQSxNQUFPQSxHQWpPS2hHLEVBQUFBLGNBQWFBLENBK0M3QkEsSUFBSUEsR0FBa0JBLEtBQ2xCQSxFQUFlQSxNQUNmQSxFQUFnQkEsUUE3REovVixFQUFBQSxFQUFBQSxXQUFBQSxFQUFBQSxlQUFMM1EsRUFBQUEsRUFBQUEsT0FBQUEsRUFBQUEsV0FBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQUsyUSxHQUFBQSxJQUFBQSxTQUFBQSxHQUtoQitWLFFBQUFBLEdBQXFCQSxFQUFXQSxHQUM1QmlHLE9BQ0lBLFVBQVVBLEVBQ1ZBLEdBQUlBLEtBQ0pBLEdBQUlBLEtBQ0pBLEVBQUdBLEVBQ0hBLEVBQUdBLEVBQ0hBLEdBQUlBLEVBQ0pBLEdBQUlBLEVBQ0pBLEtBQU1BLFNBQVVBLEdBQ1o5RixFQUFJK0YsT0FBTzdGLEVBQUdDLElBRWxCMkYsY0FBZUEsU0FBVUEsR0FDckJuRixFQUFJQyxFQUFJQyxLQUFLQyxJQUFJSCxFQUFJQyxFQUFHVixHQUN4QlMsRUFBSUssRUFBSUgsS0FBS0ksSUFBSU4sRUFBSUssRUFBR2QsR0FDeEJTLEVBQUlPLEVBQUlMLEtBQUtDLElBQUlILEVBQUlPLEVBQUdmLEdBQ3hCUSxFQUFJamQsRUFBSW1kLEtBQUtJLElBQUlOLEVBQUlqZCxFQUFHeWMsSUFFNUIyRixnQkFBaUJBLFNBQVVBLEVBQW1CQSxHQUMxQ3hrQixLQUFLOGhCLGNBQWN6QyxJQUV2Qm1GLFNBQVVBLFdBQ04sTUFBTyxJQUFNNUYsRUFBRWdFLFdBQWEsSUFBTS9ELEVBQUUrRCxZQUV4QzRCLGVBQWdCQSxXQUNaLE9BQ1E1RixFQUFJNWUsS0FBS3lmLEdBQ1RaLEVBQUk3ZSxLQUFLNmYsS0FHckIyRSxhQUFjQSxXQUNWLE9BQ1E1RixFQUFJNWUsS0FBS3lmLEdBQ1RaLEVBQUk3ZSxLQUFLNmYsTUFqQ2J0QixFQUFBQSxLQUFJQSxHQUxKL1YsRUFBQUEsRUFBQUEsV0FBQUEsRUFBQUEsZUFBTDNRLEVBQUFBLEVBQUFBLE9BQUFBLEVBQUFBLFdBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFLMlEsR0FBQUEsSUFBQUEsU0FBQUEsR0FNaEIrVixRQUFBQSxHQUFxQkEsRUFBV0EsR0FDNUJtRyxPQUNJQSxHQUFJQSxLQUNKQSxHQUFJQSxLQUNKQSxHQUFJQSxFQUNKQSxHQUFJQSxFQUNKQSxVQUFVQSxFQUNWQSxRQUFRQSxFQUNSQSxFQUFHQSxFQUNIQSxFQUFHQSxFQUNIQSxLQUFNQSxTQUFVQSxHQUNaaEcsRUFBSWlGLE9BQU8vRSxFQUFHQyxJQUVsQjZGLGNBQWVBLFNBQVVBLEdBQ3JCckYsRUFBSUMsRUFBSUMsS0FBS0MsSUFBSUgsRUFBSUMsRUFBR1YsR0FDeEJTLEVBQUlLLEVBQUlILEtBQUtJLElBQUlOLEVBQUlLLEVBQUdkLEdBQ3hCUyxFQUFJTyxFQUFJTCxLQUFLQyxJQUFJSCxFQUFJTyxFQUFHZixHQUN4QlEsRUFBSWpkLEVBQUltZCxLQUFLSSxJQUFJTixFQUFJamQsRUFBR3ljLElBRTVCNkYsZ0JBQWlCQSxTQUFVQSxFQUFtQkEsR0FDMUMxa0IsS0FBSzhoQixjQUFjekMsSUFFdkJxRixTQUFVQSxXQUNOLE1BQU8sSUFBTTlGLEVBQUVnRSxXQUFhLElBQU0vRCxFQUFFK0QsWUFFeEM4QixlQUFnQkEsV0FDWixNQUFPLE9BRVhBLGFBQWNBLFdBQ1YsTUFBTyxRQTdCSG5HLEVBQUFBLEtBQUlBLEdBTkovVixFQUFBQSxFQUFBQSxXQUFBQSxFQUFBQSxlQUFMM1EsRUFBQUEsRUFBQUEsT0FBQUEsRUFBQUEsV0FBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQUsyUSxHQUFBQSxJQUFBQSxTQUFBQSxHQU9oQitWLFFBQUFBLEdBQWdDQSxFQUFhQSxFQUFhQSxFQUFXQSxHQUNqRW9HLE9BQ0lBLEdBQUlBLEtBQ0pBLEdBQUlBLEtBQ0pBLEdBQUlBLEVBQ0pBLEdBQUlBLEVBQ0pBLFVBQVVBLEVBQ1ZBLElBQUtBLEVBQ0xBLElBQUtBLEVBQ0xBLEVBQUdBLEVBQ0hBLEVBQUdBLEVBQ0hBLEtBQU1BLFNBQVVBLEdBQ1pqRyxFQUFJa0csaUJBQWlCakQsRUFBS0MsRUFBS2hELEVBQUdDLElBRXRDOEYsY0FBZUEsU0FBVUEsR0FDckIsR0FBSWpDLEdBQUlDLEVBQVUzaUIsS0FBS3lmLEdBQUlrQyxFQUFLL0MsRUFBRzVlLEtBQUs2ZixHQUFJK0IsRUFBSy9DLEVBQ3RDLE9BQVA2RCxFQUFFOUQsSUFDRlMsRUFBSUMsRUFBSUMsS0FBS0MsSUFBSUgsRUFBSUMsRUFBR29ELEVBQUU5RCxHQUMxQlMsRUFBSUssRUFBSUgsS0FBS0ksSUFBSU4sRUFBSUssRUFBR2dELEVBQUU5RCxJQUVuQixNQUFQOEQsRUFBRTdELElBQ0ZRLEVBQUlPLEVBQUlMLEtBQUtDLElBQUlILEVBQUlPLEVBQUc4QyxFQUFFN0QsR0FDMUJRLEVBQUlqZCxFQUFJbWQsS0FBS0ksSUFBSU4sRUFBSWpkLEVBQUdzZ0IsRUFBRTdELElBRzlCUSxFQUFJQyxFQUFJQyxLQUFLQyxJQUFJSCxFQUFJQyxFQUFHVixHQUN4QlMsRUFBSUssRUFBSUgsS0FBS0ksSUFBSU4sRUFBSUssRUFBR2QsR0FDeEJTLEVBQUlPLEVBQUlMLEtBQUtDLElBQUlILEVBQUlPLEVBQUdmLEdBQ3hCUSxFQUFJamQsRUFBSW1kLEtBQUtJLElBQUlOLEVBQUlqZCxFQUFHeWMsSUFFNUI4RixnQkFBaUJBLFNBQVVBLEVBQW1CQSxHQUMxQyxHQUFJekUsR0FBS0MsRUFBS0MsZ0JBQWtCLEVBRTVCc0MsRUFBSUMsRUFBVTNpQixLQUFLeWYsR0FBSWtDLEVBQUsvQyxFQUFHNWUsS0FBSzZmLEdBQUkrQixFQUFLL0MsRUFDN0M2RCxHQUFFOUQsSUFDRlMsRUFBSUMsRUFBSUMsS0FBS0MsSUFBSUgsRUFBSUMsRUFBR29ELEVBQUU5RCxFQUFJc0IsR0FDOUJiLEVBQUlLLEVBQUlILEtBQUtJLElBQUlOLEVBQUlLLEVBQUdnRCxFQUFFOUQsRUFBSXNCLElBRTlCd0MsRUFBRTdELElBQ0ZRLEVBQUlPLEVBQUlMLEtBQUtDLElBQUlILEVBQUlPLEVBQUc4QyxFQUFFN0QsRUFBSXFCLEdBQzlCYixFQUFJamQsRUFBSW1kLEtBQUtJLElBQUlOLEVBQUlqZCxFQUFHc2dCLEVBQUU3RCxFQUFJcUIsSUFHbENiLEVBQUlDLEVBQUlDLEtBQUtDLElBQUlILEVBQUlDLEVBQUdWLEdBQ3hCUyxFQUFJSyxFQUFJSCxLQUFLSSxJQUFJTixFQUFJSyxFQUFHZCxHQUN4QlMsRUFBSU8sRUFBSUwsS0FBS0MsSUFBSUgsRUFBSU8sRUFBR2YsR0FDeEJRLEVBQUlqZCxFQUFJbWQsS0FBS0ksSUFBSU4sRUFBSWpkLEVBQUd5YyxJQUU1QjhGLFNBQVVBLFdBQ04sTUFBTyxJQUFNaEQsRUFBSWlCLFdBQWEsSUFBTWhCLEVBQUlnQixXQUFhLElBQU1oRSxFQUFFZ0UsV0FBYSxJQUFNL0QsRUFBRStELFlBRXRGK0IsZUFBZ0JBLFdBRVosT0FDUSxHQUFLaEQsRUFBTTNoQixLQUFLeWYsSUFDaEIsR0FBS21DLEVBQU01aEIsS0FBSzZmLE1BRzVCOEUsYUFBY0EsV0FFVixPQUNRLEdBQUsvRixFQUFJK0MsR0FDVCxHQUFLOUMsRUFBSStDLE1Bd0I3QnJELFFBQUFBLEdBQW1CQSxFQUFZQSxFQUFZQSxFQUFZQSxFQUFZQSxFQUFZQSxHQUMzRXNFLE9BQ0lBLEVBQUdBLEVBQUlBLEVBQUlBLEVBQUlBLEdBQ2ZBLEVBQUdBLEVBQUlBLEVBQUlBLEVBQUlBLElBSXZCdEUsUUFBQUEsR0FBYUEsRUFBV0EsRUFBV0EsR0FDL0J1RSxHQUFJQSxJQUFLQSxFQUFJQSxJQUFNQSxFQUFJQSxFQUFJQSxFQUFJQSxFQUMvQkEsT0FBUUEsR0FBSkEsR0FBU0EsRUFBSUEsRUFDTkEsS0FDSEEsRUFBSUEsS0FBS0EsSUFBSUEsRUFBSUEsRUFBR0EsR0FBT0EsRUFBSUEsR0FBS0EsRUFBSUEsR0FBS0EsRUFBTUEsRUFBSUEsS0FBS0EsSUFBSUEsRUFBR0EsR0FqRy9EdkUsRUFBQUEsZ0JBQWVBLEdBUGYvVixFQUFBQSxFQUFBQSxXQUFBQSxFQUFBQSxlQUFMM1EsRUFBQUEsRUFBQUEsT0FBQUEsRUFBQUEsV0FBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQUsyUSxHQUFBQSxJQUFBQSxTQUFBQSxHQU9oQitWLFFBQUFBLEdBQXNCQSxFQUFXQSxFQUFXQSxFQUFlQSxHQUN2RHNHLE9BQ0lBLEdBQUlBLEtBQ0pBLEdBQUlBLEtBQ0pBLFVBQVVBLEVBQ1ZBLEVBQUdBLEVBQ0hBLEVBQUdBLEVBQ0hBLEdBQUlBLEVBQ0pBLEdBQUlBLEVBQ0pBLE1BQU9BLEVBQ1BBLE9BQVFBLEVBQ1JBLEtBQU1BLFNBQVVBLEdBQ1puRyxFQUFJb0csS0FBS2xHLEVBQUdDLEVBQUdvRSxFQUFPQyxJQUUxQjJCLGNBQWVBLFNBQVVBLEdBQ3JCeEYsRUFBSUMsRUFBSUMsS0FBS0MsSUFBSUgsRUFBSUMsRUFBR1YsR0FDeEJTLEVBQUlLLEVBQUlILEtBQUtJLElBQUlOLEVBQUlLLEVBQUdkLEVBQUlxRSxHQUM1QjVELEVBQUlPLEVBQUlMLEtBQUtDLElBQUlILEVBQUlPLEVBQUdmLEdBQ3hCUSxFQUFJamQsRUFBSW1kLEtBQUtJLElBQUlOLEVBQUlqZCxFQUFHeWMsRUFBSXFFLElBRWhDMkIsZ0JBQWlCQSxTQUFVQSxFQUFtQkEsR0FDMUMsR0FBSTNFLEdBQUtDLEVBQUtDLGdCQUFrQixDQUNoQ2YsR0FBSUMsRUFBSUMsS0FBS0MsSUFBSUgsRUFBSUMsRUFBR1YsRUFBSXNCLEdBQzVCYixFQUFJSyxFQUFJSCxLQUFLSSxJQUFJTixFQUFJSyxFQUFHZCxFQUFJcUUsRUFBUS9DLEdBQ3BDYixFQUFJTyxFQUFJTCxLQUFLQyxJQUFJSCxFQUFJTyxFQUFHZixFQUFJcUIsR0FDNUJiLEVBQUlqZCxFQUFJbWQsS0FBS0ksSUFBSU4sRUFBSWpkLEVBQUd5YyxFQUFJcUUsRUFBU2hELElBRXpDMkUsZUFBZ0JBLFdBQ1osTUFBTyxPQUVYQSxhQUFjQSxXQUNWLE1BQU8sUUEvQkh0RyxFQUFBQSxLQUFJQSxHQVBKL1YsRUFBQUEsRUFBQUEsV0FBQUEsRUFBQUEsZUFBTDNRLEVBQUFBLEVBQUFBLE9BQUFBLEVBQUFBLFdBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFLMlEsR0FBQUEsSUFBQUEsU0FBQUEsR0FDaEIrVixRQUFBQSxHQUE2QkEsRUFBV0EsRUFBV0EsRUFBZUEsRUFBZ0JBLEVBQWlCQSxHQUMvRndHLE1BQWdCQSxLQUFaQSxHQUErQkEsSUFBWkEsRUFDWkEsRUFBQUEsS0FBS0EsRUFBR0EsRUFBR0EsRUFBT0EsSUFHekJBLEdBQUlBLEtBQ0pBLEdBQUlBLEtBQ0pBLEdBQUlBLEVBQ0pBLEdBQUlBLEVBQ0pBLFVBQVVBLEVBQ1ZBLEVBQUdBLEVBQ0hBLEVBQUdBLEVBQ0hBLE1BQU9BLEVBQ1BBLE9BQVFBLEVBQ1JBLFFBQVNBLEVBQ1RBLFFBQVNBLEVBQ1RBLEtBQU1BLFNBQVVBLEdBQ1psdEIsRUFBUW10QixPQUFPQyxVQUFVQyxRQUFRakIsS0FBS3ZGLEVBQUtFLEVBQUdDLEVBQUdvRSxFQUFPQyxFQUFRRyxFQUFTSyxJQUU3RXFCLGNBQWVBLFNBQVVBLEdBQ3JCMUYsRUFBSUMsRUFBSUMsS0FBS0MsSUFBSUgsRUFBSUMsRUFBR1YsR0FDeEJTLEVBQUlLLEVBQUlILEtBQUtJLElBQUlOLEVBQUlLLEVBQUdkLEVBQUlxRSxHQUM1QjVELEVBQUlPLEVBQUlMLEtBQUtDLElBQUlILEVBQUlPLEVBQUdmLEdBQ3hCUSxFQUFJamQsRUFBSW1kLEtBQUtJLElBQUlOLEVBQUlqZCxFQUFHeWMsRUFBSXFFLElBRWhDNkIsZ0JBQWlCQSxTQUFVQSxFQUFtQkEsR0FDMUMsR0FBSTdFLEdBQUtDLEVBQUtDLGdCQUFrQixDQUNoQ2YsR0FBSUMsRUFBSUMsS0FBS0MsSUFBSUgsRUFBSUMsRUFBR1YsRUFBSXNCLEdBQzVCYixFQUFJSyxFQUFJSCxLQUFLSSxJQUFJTixFQUFJSyxFQUFHZCxFQUFJcUUsRUFBUS9DLEdBQ3BDYixFQUFJTyxFQUFJTCxLQUFLQyxJQUFJSCxFQUFJTyxFQUFHZixFQUFJcUIsR0FDNUJiLEVBQUlqZCxFQUFJbWQsS0FBS0ksSUFBSU4sRUFBSWpkLEVBQUd5YyxFQUFJcUUsRUFBU2hELElBRXpDNkUsZUFBZ0JBLFdBQ1osTUFBTyxPQUVYQSxhQUFjQSxXQUNWLE1BQU8sUUFwQ0h4RyxFQUFBQSxZQUFXQSxHQURYL1YsRUFBQUEsRUFBQUEsV0FBQUEsRUFBQUEsZUFBTDNRLEVBQUFBLEVBQUFBLE9BQUFBLEVBQUFBLFdBQVJBLFVBQUFBLGFDR0ZzdEIseUJBQXlCMWlCLFVBQVVELGVBQWUsMkJBQ25ERSxPQUFPMGlCLGVBQWVELHlCQUF5QjFpQixVQUFXLDBCQUN0RDRCLElBQUssV0FDRCxHQUFJcWEsR0FBVzFlLElBQ2YsT0FBTzBlLEdBQUkyRyw4QkFDSjNHLEVBQUk0RywyQkFDSjVHLEVBQUk2RywwQkFDSjdHLEVBQUk4Ryx5QkFDSixLQ1JkTCx5QkFBeUIxaUIsVUFBVWdqQixVQUNwQ04seUJBQXlCMWlCLFVBQVVnakIsUUFBVSxTQUFVN0csRUFBV0MsRUFBV3dFLEVBQWlCSyxFQUFpQmdDLEVBQWtCQyxFQUFvQkMsRUFBa0JDLEdBQ25LN2xCLEtBQUs4bEIsT0FDTDlsQixLQUFLK2xCLFVBQVVuSCxFQUFHQyxHQUNsQjdlLEtBQUtnbUIsT0FBT04sR0FDWjFsQixLQUFLaW1CLE1BQU01QyxFQUFTSyxHQUNwQjFqQixLQUFLMmUsSUFBSSxFQUFHLEVBQUcsRUFBR2dILEVBQVlDLEVBQVVDLEdBQ3hDN2xCLEtBQUtrbUIsWUNQUmYseUJBQXlCMWlCLFVBQVUwakIsa0JBQ3BDaEIseUJBQXlCMWlCLFVBQVUwakIsZ0JBQWtCLFNBQVV2SCxFQUFXQyxHQUN0RSxPQUFPLEdDSGYsSUFBT2huQixVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQU91dUIsR0FBQUEsSUFBQUEsU0FBQUEsR0FJbEJDLEdBQUFBLEdBQUFBLFNBQUFBLEdBQUFDLFFBQUFBLEtBQWtDQyxFQUFBQSxNQUFBQSxLQUFBQSxXQW9DbENELE1BcENrQ0EsV0FBQUEsRUFBQUEsR0FHOUJBLEVBQUFBLFVBQUFBLEtBQUFBLFdBQ0lFLEtBQUtBLGVBQWVBLEVBQUFBLFVBQVVBLEVBQUFBLFFBQVFBLHNCQUNqQ0EsZUFBZUEsRUFBQUEsVUFBVUEsRUFBQUEsUUFBUUEsc0JBQ2pDQSxjQUFjQSxFQUFBQSxVQUFVQSxFQUFBQSxPQUFPQSxxQkFDL0JBLGlCQUFpQkEsRUFBQUEsVUFBVUEsRUFBQUEsVUFBVUEsd0JBQ3JDQSxlQUFlQSxFQUFBQSxVQUFVQSxFQUFBQSxRQUFRQSxxQkFFdENBLElBQUlBLEdBQVNBLEtBQUtBLE1BQ2xCQSxHQUFPQSxjQUFnQkEsR0FBSUEsR0FBQUEsS0FDM0JBLEVBQU9BLFdBQWFBLEVBQUFBLFdBQVdBLEtBQy9CQSxFQUFPQSxVQUFZQSxHQUFJQSxHQUFBQSxLQUV2QkEsRUFBT0EsS0FBT0EsS0FDZEEsRUFBT0EsUUFBVUEsRUFBQUEsUUFBUUEsS0FDekJBLEVBQU9BLE9BQVNBLEtBQ2hCQSxFQUFPQSxnQkFBa0JBLEVBQ3pCQSxFQUFPQSxtQkFDUEEsRUFBT0EsY0FBZ0JBLEVBQUFBLFdBQVdBLEtBQ2xDQSxFQUFPQSxpQkFBbUJBLEVBQzFCQSxFQUFPQSxtQkFBcUJBLEVBQUFBLFdBQVdBLEtBQ3ZDQSxFQUFPQSxpQkFBbUJBLEVBQUFBLFdBQVdBLEtBQ3JDQSxFQUFPQSxlQUFpQkEsRUFBQUEsWUFBWUEsTUFDcENBLEVBQU9BLGlCQUFtQkEsR0FFMUJBLEVBQUFBLFVBQU1BLEtBQUlBLEtBQUFBLE9BR2RGLEVBQUFBLFVBQUFBLHdCQUFBQSxXQUNJRyxHQUFJQSxHQUFLQSxLQUFLQSxPQUFPQSxhQUNyQkEsR0FBR0EsRUFBSUEsRUFBR0EsRUFBSUEsRUFBR0EsTUFBUUEsRUFBR0EsT0FBU0EsRUFDckNBLEtBQUtBLG9CQUNMQSxLQUFLQSxjQUFhQSxJQUUxQkgsR0FwQ2tDRCxFQUFBQSxLQUFLQSxRQUExQkEsR0FBQUEsYUFBWUEsR0FKUEQsRUFBQUEsRUFBQUEsUUFBQUEsRUFBQUEsWUFBUHZ1QixFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBT3V1QixHQUFBQSxJQUFBQSxTQUFBQSxHQUlsQk0sR0FBQUEsR0FBQUEsU0FBQUEsR0FBQUMsUUFBQUEsS0FBb0NDLEVBQUFBLE1BQUFBLEtBQUFBLFdBYXBDRCxNQWJvQ0EsV0FBQUEsRUFBQUEsR0FHaENBLEVBQUFBLFVBQUFBLEtBQUFBLFdBQ0lFLEtBQUtBLGVBQWVBLEVBQUFBLFVBQVVBLEVBQUFBLFFBQVFBLHdCQUNqQ0EsY0FBY0EsRUFBQUEsVUFBVUEsRUFBQUEsT0FBT0EsdUJBQy9CQSxlQUFlQSxFQUFBQSxVQUFVQSxFQUFBQSxRQUFRQSx1QkFFdENBLElBQUlBLEdBQVNBLEtBQUtBLE1BQ2xCQSxHQUFPQSxRQUFVQSxFQUFBQSxRQUFRQSxLQUV6QkEsRUFBQUEsVUFBTUEsS0FBSUEsS0FBQUEsT0FFbEJGLEdBYm9DRCxFQUFBQSxNQUFNQSxhQUE3QkEsR0FBQUEsZUFBY0EsR0FKVE4sRUFBQUEsRUFBQUEsVUFBQUEsRUFBQUEsY0FBUHZ1QixFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBT3V1QixHQUFBQSxJQUFBQSxTQUFBQSxHQUlsQlUsR0FBQUEsR0FBQUEsU0FBQUEsR0FBQUMsUUFBQUEsS0FBaUNDLEVBQUFBLE1BQUFBLEtBQUFBLFdBZWpDRCxNQWZpQ0EsV0FBQUEsRUFBQUEsR0FHN0JBLEVBQUFBLFVBQUFBLEtBQUFBLFdBQ0lFLEtBQUtBLGVBQWVBLEVBQUFBLFVBQVVBLEVBQUFBLFFBQVFBLHFCQUNqQ0EsaUJBQWlCQSxFQUFBQSxVQUFVQSxFQUFBQSxVQUFVQSx1QkFDckNBLGNBQWNBLEVBQUFBLFVBQVVBLEVBQUFBLE9BQU9BLG9CQUMvQkEsZUFBZUEsRUFBQUEsVUFBVUEsRUFBQUEsUUFBUUEsb0JBRXRDQSxJQUFJQSxHQUFTQSxLQUFLQSxNQUNsQkEsR0FBT0EsUUFBVUEsRUFBQUEsUUFBUUEsS0FDekJBLEVBQU9BLGFBQWVBLEVBQUFBLEtBQUtBLFdBRTNCQSxFQUFBQSxVQUFNQSxLQUFJQSxLQUFBQSxPQUVsQkYsR0FmaUNELEVBQUFBLE1BQU1BLGFBQTFCQSxHQUFBQSxZQUFXQSxHQUpOVixFQUFBQSxFQUFBQSxPQUFBQSxFQUFBQSxXQUFQdnVCLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFPdXVCLEdBQUFBLElBQUFBLFNBQUFBLEdBSWxCYyxHQUFBQSxHQUFBQSxTQUFBQSxHQUFBQyxRQUFBQSxLQUFpQ0MsRUFBQUEsTUFBQUEsS0FBQUEsV0FxQmpDRCxNQXJCaUNBLFdBQUFBLEVBQUFBLEdBRzdCQSxFQUFBQSxVQUFBQSxLQUFBQSxXQUNJRSxLQUFLQSxlQUFlQSxFQUFBQSxVQUFVQSxFQUFBQSxRQUFRQSxvQkFFdENBLElBQUlBLEdBQVNBLEtBQUtBLE1BQ2xCQSxHQUFPQSxHQUFLQSxFQUNaQSxFQUFPQSxHQUFLQSxFQUNaQSxFQUFPQSxHQUFLQSxFQUNaQSxFQUFPQSxHQUFLQSxFQUVaQSxFQUFPQSxLQUFPQSxHQUFJQSxHQUFBQSxLQUFLQSxpQkFFdkJBLEVBQUFBLFVBQU1BLEtBQUlBLEtBQUFBLE9BR2RGLEVBQUFBLFVBQUFBLGVBQUFBLFdBQ0lHLEtBQUtBLE9BQU9BLEtBQUtBLEtBQU1BLEVBQ3ZCQSxLQUFLQSwyQkFFYkgsR0FyQmlDRCxFQUFBQSxLQUFLQSxZQUF6QkEsR0FBQUEsWUFBV0EsR0FKTmQsRUFBQUEsRUFBQUEsT0FBQUEsRUFBQUEsV0FBUHZ1QixFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFSQSxVQUFBQSxZQ0ZQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBT3V1QixHQUFBQSxJQUFBQSxTQUFBQSxHQUNsQlUsR0FBQUEsR0FBQUEsV0FBQVMsUUFBQUEsS0FDSUMsS0FBQUEsS0FBZUEsRUFDZkEsS0FBQUEsS0FBT0EsR0FBSUEsR0FBUUEsS0FBS0EsS0FDeEJBLEtBQUFBLFNBQVdBLEVBQUFBLFNBQVNBLFFBU3hCRCxNQVBJQSxHQUFBQSxVQUFBQSxLQUFBQSxTQUFNQSxHQUNGRSxLQUFLQSxLQUFLQSxLQUFLQSxFQUFJQSxNQUd2QkYsRUFBQUEsVUFBQUEsVUFBQUEsU0FBV0EsR0FDUEcsTUFBT0EsTUFBS0EsS0FBS0EsV0FBV0EsSUFFcENILElBWmFULEdBQUFBLGlCQUFnQkEsR0FEWFYsRUFBQUEsRUFBQUEsT0FBQUEsRUFBQUEsV0FBUHZ1QixFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFSQSxVQUFBQSxZQ0VQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBT3V1QixHQUFBQSxJQUFBQSxTQUFBQSxHQUlsQnVCLEdBQUFBLEdBQUFBLFNBQUFBLEdBQUFDLFFBQUFBLEtBQXFDQyxFQUFBQSxNQUFBQSxLQUFBQSxXQXNCckNELE1BdEJxQ0EsV0FBQUEsRUFBQUEsR0FHakNBLEVBQUFBLFVBQUFBLEtBQUFBLFdBQ0lFLEtBQUtBLGVBQWVBLEVBQUFBLFVBQVVBLEVBQUFBLFFBQVFBLHdCQUV0Q0EsSUFBSUEsR0FBU0EsS0FBS0EsTUFDbEJBLEdBQU9BLEtBQU9BLEdBQUlBLEdBQUFBLEtBQUtBLGlCQUN2QkEsRUFBT0EsVUFBV0EsRUFFbEJBLEVBQUFBLFVBQU1BLEtBQUlBLEtBQUFBLE9BR2RGLEVBQUFBLFVBQUFBLG1CQUFBQSxXQUNJRyxLQUFLQSxPQUFPQSxLQUFLQSxTQUFXQSxLQUFLQSxPQUFPQSxTQUN4Q0EsS0FBS0EsY0FHVEgsRUFBQUEsVUFBQUEsZUFBQUEsV0FDSUksS0FBS0EsT0FBT0EsS0FBS0EsS0FBTUEsRUFDdkJBLEtBQUtBLDJCQUViSixHQXRCcUNELEVBQUFBLEtBQUtBLFlBQTdCQSxHQUFBQSxnQkFBZUEsR0FKVnZCLEVBQUFBLEVBQUFBLFdBQUFBLEVBQUFBLGVBQVB2dUIsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQU91dUIsR0FBQUEsSUFBQUEsU0FBQUEsR0FDbEI2QixHQUFBQSxHQUFBQSxTQUFBQSxHQUFBQyxRQUFBQSxLQUFvQ0MsRUFBQUEsTUFBQUEsS0FBQUEsV0FLcENELE1BTG9DQSxXQUFBQSxFQUFBQSxHQUNoQ0EsRUFBQUEsVUFBQUEsS0FBQUEsV0FDSUUsRUFBQUEsVUFBTUEsS0FBSUEsS0FBQUEsTUFDVkEsS0FBS0EsT0FBT0EsVUFBV0EsR0FFL0JGLEdBTG9DRCxFQUFBQSxTQUFTQSxnQkFBaENBLEdBQUFBLGVBQWNBLEdBRFQ3QixFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQUFQdnVCLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFPdXVCLEdBQUFBLElBQUFBLFNBQUFBLEdBSWxCaUMsR0FBQUEsR0FBQUEsU0FBQUEsR0FBQUMsUUFBQUEsS0FBc0NDLEVBQUFBLE1BQUFBLEtBQUFBLFdBZXRDRCxNQWZzQ0EsV0FBQUEsRUFBQUEsR0FHbENBLEVBQUFBLFVBQUFBLEtBQUFBLFdBQ0lFLEtBQUtBLGVBQWVBLEVBQUFBLFVBQVVBLEVBQUFBLFFBQVFBLDBCQUNqQ0EsY0FBY0EsRUFBQUEsVUFBVUEsRUFBQUEsT0FBT0EseUJBQy9CQSxlQUFlQSxFQUFBQSxVQUFVQSxFQUFBQSxRQUFRQSx5QkFFdENBLElBQUlBLEdBQVNBLEtBQUtBLE1BQ2xCQSxHQUFPQSxRQUFVQSxFQUFBQSxRQUFRQSxLQUN6QkEsRUFBT0EsUUFBVUEsRUFDakJBLEVBQU9BLFFBQVVBLEVBRWpCQSxFQUFBQSxVQUFNQSxLQUFJQSxLQUFBQSxPQUVsQkYsR0Fmc0NELEVBQUFBLE1BQU1BLGFBQS9CQSxHQUFBQSxpQkFBZ0JBLEdBSlhqQyxFQUFBQSxFQUFBQSxZQUFBQSxFQUFBQSxnQkFBUHZ1QixFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFSQSxVQUFBQSxZQ0ZQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBSzRVLEdBQUFBLElBQUFBLFNBQUFBLEdBQ2hCZ2MsR0FBSUEsR0FBWUEsV0FBV0EsS0FBS0EsVUFBVUEsV0FFMUNBLEVBQUFBLFdBQUFDLFFBQUFBLEtBQ0lDLEtBQUFBLFlBQXNCQSxFQUN0QkEsS0FBQUEsS0FBZUEsS0FDZkEsS0FBQUEsTUFBZ0JBLEVBK0NwQkQsTUExQ1dBLEdBQUFBLE9BQVBBLFNBQWVBLEVBQWtCQSxFQUFxQkEsR0FDbERFLEdBQUlBLEdBQWFBLEVBQU9BLEtBQUtBLFlBQ3pCQSxFQUFPQSxHQUFJQSxHQUFBQSxLQUFLQSxFQUFHQSxFQUFHQSxFQUFRQSxNQUFPQSxHQUVyQ0EsRUFBTUEsRUFBSUEsSUFHVkEsRUFBS0EsRUFBUUEsV0FBY0EsRUFBT0EscUJBQXVCQSxFQUFRQSxxQkFBd0JBLEVBQU9BLFVBQ2hHQSxLQUNBQSxFQUFJQSxZQUNKQSxFQUFJQSxLQUFLQSxFQUFLQSxFQUFHQSxFQUFLQSxFQUFHQSxFQUFLQSxNQUFPQSxFQUFLQSxRQUMxQ0EsRUFBSUEsT0FBT0EsRUFBSUEsR0FJbkJBLElBQUlBLEdBQUtBLEVBQVFBLFdBQWNBLEVBQU9BLHFCQUF1QkEsRUFBUUEscUJBQXdCQSxFQUFPQSxXQUNoR0EsRUFBTUEsU0FDTkEsS0FDQUEsRUFBR0EsV0FBV0EsRUFBS0EsR0FDbkJBLEVBQU1BLEVBQUdBLGlCQUViQSxFQUFJQSxVQUFZQSxFQUNoQkEsRUFBSUEsS0FBT0EsRUFBT0EsS0FBS0EsZ0JBQ3ZCQSxFQUFJQSxVQUFZQSxPQUNaQSxHQUNBQSxFQUFJQSxhQUFlQSxTQUNuQkEsRUFBSUEsU0FBU0EsRUFBUUEsS0FBTUEsRUFBR0EsS0FFOUJBLEVBQUlBLGFBQWVBLE1BQ25CQSxFQUFJQSxTQUFTQSxFQUFRQSxLQUFNQSxFQUFHQSxJQUk5QkEsRUFBT0EsZUFDUEEsRUFBSUEsWUFDSkEsRUFBSUEsT0FBT0EsRUFBR0EsR0FDZEEsRUFBSUEsT0FBT0EsRUFBUUEsTUFBT0EsR0FDMUJBLEVBQUlBLFVBQVlBLEVBQ2hCQSxFQUFJQSxZQUFjQSxFQUNsQkEsRUFBSUEsV0ExQ0xGLEVBQUFBLHFCQUF1QkEsR0FBSUEsR0FBQUEsVUFBVUEsV0FDckNBLEVBQUFBLHFCQUF1QkEsR0FBSUEsR0FBQUEsVUFBVUEsV0E0Q2hEQSxJQWxEYUQsR0FBQUEsUUFBT0EsR0FISmhjLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQUw1VSxFQUFBQSxFQUFBQSxPQUFBQSxFQUFBQSxXQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBSzRVLEdBQUFBLElBQUFBLFNBQUFBLEdBQ2hCZ2MsR0FBQUEsR0FBQUEsV0FBQUksUUFBQUEsS0FDSUMsS0FBQUEsUUFDQUEsS0FBQUEsTUFBZ0JBLEVBQ2hCQSxLQUFBQSxPQUFpQkEsRUFrQ3JCRCxNQWhDV0EsR0FBQUEsYUFBUEEsU0FBb0JBLEVBQWVBLEdBRS9CRSxJQUFLQSxHQUREQSxHQUNLQSxFQUFJQSxFQUFHQSxFQUFLQSxFQUFLQSxFQUFJQSxFQUFNQSxPQUFRQSxJQUd4Q0EsR0FGQUEsRUFBT0EsRUFBTUEsR0FDYkEsR0FBTUEsRUFBS0EsT0FDSEEsRUFBSkEsRUFDQUEsTUFBT0EsRUFFZkEsT0FBT0EsR0FBTUEsRUFBTUEsT0FBU0EsSUFHekJGLEVBQUFBLFVBQVBBLFNBQWlCQSxFQUEwQkEsRUFBNEJBLEVBQW1CQSxHQUN0RkcsR0FBSUEsRUFBT0EsZUFBaUJBLEVBQUFBLGFBQWFBLE1BQ2xDQSxFQUFPQSxlQUFpQkEsRUFBQUEsYUFBYUEsUUFDckNBLEVBQUtBLE9BQVNBLEVBQVVBLFNBQzNCQSxPQUFPQSxDQUdYQSxLQUFLQSxHQUREQSxNQUNLQSxFQUFPQSxFQUFLQSxLQUFNQSxFQUFRQSxFQUFHQSxFQUFJQSxFQUFHQSxFQUFJQSxFQUFLQSxPQUFRQSxJQUFLQSxDQUMvREEsR0FBSUEsR0FBTUEsRUFBS0EsRUFHZkEsSUFGQUEsR0FBU0EsRUFBSUEsTUFDYkEsRUFBUUEsS0FBS0EsR0FDVEEsR0FBU0EsRUFBVUEsU0FBVUEsQ0FDN0JBLEdBQVNBLEVBQUlBLE1BQ2JBLEVBQU9BLElBQUlBLFVBQVVBLEVBQUtBLEVBQVVBLFNBQVdBLEVBQU9BLEVBQU9BLGFBQWNBLEdBQzNFQSxFQUFLQSxNQUFRQSxFQUFRQSxFQUFJQSxLQUN6QkEsUUFJUkEsTUFEQUEsR0FBS0EsS0FBT0EsR0FDTEEsR0FFZkgsSUFyQ2FKLEdBQUFBLEtBQUlBLEdBRERoYyxFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFMNVUsRUFBQUEsRUFBQUEsT0FBQUEsRUFBQUEsV0FBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQUs0VSxHQUFBQSxJQUFBQSxTQUFBQSxHQXlEaEJnYyxRQUFBQSxHQUFxQkEsRUFBVUEsRUFBbUJBLEdBQzlDUSxHQUFJQSxFQUFZQSxFQUFHQSxDQUVmQSxJQUFLQSxHQUREQSxHQUFNQSxFQUFJQSxLQUFLQSxPQUNWQSxFQUFJQSxFQUFHQSxFQUFPQSxHQUFJQSxFQUFJQSxHQUFRQSxHQUFpREEsTUFBekNBLEVBQU9BLEVBQUlBLEtBQUtBLFFBQVFBLElBQUtBLEVBQUlBLEtBQzVFQSxHQUFJQSxFQUFRQSxHQUFRQSxFQUFXQSxDQUMzQkEsRUFBSUEsS0FBT0EsRUFBSUEsS0FBS0EsT0FBT0EsRUFBR0EsRUFDOUJBLE9BR1JBLEdBQUlBLElBQVFBLEVBQUlBLEtBQUtBLE9BQ2pCQSxXQUVKQSxHQUFJQSxLQUFPQSxFQUVmQSxHQUFJQSxNQUFRQSxNQUNaQSxFQUFJQSxPQUFTQSxFQUFJQSxLQUFLQSxPQUN0QkEsRUFBSUEsTUFBUUEsRUFBUUEsRUFBSUEsUUFHNUJSLFFBQUFBLEdBQXFCQSxFQUFVQSxFQUFtQkEsR0FDOUNTLEdBQUlBLEVBQVlBLEVBQUdBLENBS2ZBLElBQUtBLEdBSkRBLEdBQU1BLEVBQUlBLEtBQUtBLE9BQ2ZBLEVBQU1BLEVBQ05BLEVBQU9BLEVBQ1BBLEVBQUlBLEtBQUtBLEtBQUtBLEdBQU9BLEVBQU9BLEdBQU9BLEdBQzlCQSxFQUFPQSxFQUFJQSxFQUFPQSxFQUFPQSxHQUFZQSxJQUFQQSxFQUFhQSxFQUFJQSxLQUFLQSxLQUFLQSxHQUFPQSxFQUFPQSxHQUFPQSxHQUFJQSxJQUNuRkEsRUFBUUEsR0FBS0EsRUFDYkEsRUFBT0EsRUFFUEEsRUFBTUEsQ0FJZEEsSUFEQUEsRUFBSUEsS0FBT0EsRUFBSUEsS0FBS0EsT0FBT0EsRUFBR0EsR0FDMUJBLElBQVFBLEVBQUlBLEtBQUtBLE9BQ2pCQSxXQUVKQSxHQUFJQSxLQUFPQSxFQUVmQSxHQUFJQSxNQUFRQSxNQUNaQSxFQUFJQSxPQUFTQSxFQUFJQSxLQUFLQSxPQUN0QkEsRUFBSUEsTUFBUUEsRUFBUUEsRUFBSUEsUUFoRzVCVCxHQUFBQSxHQUFBQSxXQUFBVSxRQUFBQSxLQUVJQyxLQUFBQSxLQUFlQSxHQUNmQSxLQUFBQSxNQUFnQkEsRUFDaEJBLEtBQUFBLE9BQWlCQSxFQUNqQkEsS0FBQUEsTUFBZ0JBLEVBaURwQkQsTUEzQ1dBLEdBQUFBLGVBQVBBLFNBQXNCQSxFQUFVQSxFQUFlQSxFQUFhQSxHQUN4REUsRUFBSUEsSUFBTUEsRUFBSUEsSUFBTUEsRUFBSUEsS0FBT0EsSUFFL0JBLElBQUlBLEdBQUtBLEVBQUlBLE1BQ1RBLEVBQUtBLEVBQUtBLEVBQUlBLE9BRWRBLEVBQVNBLEtBQUtBLElBQUlBLEVBQUlBLE9BQVFBLEtBQUtBLElBQUlBLEVBQUdBLEVBQVFBLEdBQ3REQSxJQUFJQSxFQUFTQSxFQUFHQSxDQUNaQSxHQUFJQSxHQUFNQSxFQUFJQSxJQUFNQSxHQUFJQSxHQUFBQSxPQUN4QkEsR0FBSUEsS0FBT0EsRUFBSUEsS0FBS0EsT0FBT0EsRUFBR0EsR0FDOUJBLEVBQUlBLE1BQVFBLEVBQWFBLEVBQUlBLEtBQU1BLEVBQUlBLE9BRzNDQSxHQUFJQSxHQUFVQSxLQUFLQSxJQUFJQSxFQUFJQSxPQUFRQSxLQUFLQSxJQUFJQSxFQUFHQSxFQUFLQSxHQUNwREEsSUFBSUEsRUFBVUEsRUFBR0EsQ0FDYkEsR0FBSUEsR0FBT0EsRUFBSUEsS0FBT0EsR0FBSUEsR0FBQUEsT0FDMUJBLEdBQUtBLEtBQU9BLEVBQUlBLEtBQUtBLE9BQU9BLEVBQUlBLE9BQVNBLEdBQ3pDQSxFQUFLQSxNQUFRQSxFQUFhQSxFQUFLQSxLQUFNQSxFQUFJQSxPQUc3Q0EsR0FBSUEsR0FBS0EsS0FBS0EsSUFBSUEsRUFBSUEsS0FBS0EsSUFBSUEsRUFBSUEsSUFDL0JBLEVBQUtBLEtBQUtBLElBQUlBLEVBQUlBLEtBQUtBLElBQUlBLEVBQUlBLElBQy9CQSxFQUFTQSxLQUFLQSxJQUFJQSxFQUFHQSxFQUFLQSxFQUM5QkEsSUFBSUEsRUFBU0EsRUFBR0EsQ0FDWkEsR0FBSUEsR0FBTUEsRUFBSUEsSUFBTUEsR0FBSUEsR0FBQUEsT0FDeEJBLEdBQUlBLFlBQWFBLEVBQ2pCQSxFQUFJQSxLQUFPQSxFQUFJQSxLQUFLQSxPQUFPQSxFQUFLQSxFQUFJQSxHQUNwQ0EsRUFBSUEsTUFBUUEsRUFBYUEsRUFBSUEsS0FBTUEsRUFBSUEsU0FJeENGLEVBQUFBLFVBQVBBLFNBQWlCQSxFQUFVQSxFQUFtQkEsRUFBNEJBLEdBQ3RFRyxLQUFJQSxFQUFJQSxNQUFRQSxHQUFoQkEsQ0FFQUEsR0FBSUEsR0FBT0EsRUFBSUEsS0FDWEEsRUFBT0EsRUFBSUEsTUFBTUEsS0FDakJBLEVBQVVBLFNBQUNBLEdBQWtCQSxNQUFBQSxHQUFpQkEsRUFBS0EsT0FBT0EsRUFBR0EsR0FBUUEsR0FDckVBLEtBQWlCQSxFQUFBQSxhQUFhQSxhQUM5QkEsRUFBWUEsRUFBS0EsRUFBWUEsRUFBaUJBLE1BQU9BLEdBQU9BLEdBRTVEQSxFQUFZQSxFQUFLQSxFQUFZQSxFQUFpQkEsTUFBT0EsR0FBT0EsS0FHeEVILElBdERhVixHQUFBQSxJQUFHQSxHQURBaGMsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBTDVVLEVBQUFBLEVBQUFBLE9BQUFBLEVBQUFBLFdBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFLNFUsR0FBQUEsSUFBQUEsU0FBQUEsR0FPaEI4YyxRQUFBQSxHQUFnQ0EsRUFBMEJBLEVBQTRCQSxHQUNsRkMsR0FBSUEsSUFDQUEsS0FBTUEsRUFBT0EsS0FDYkEsTUFBT0EsRUFDUEEsSUFBS0EsRUFBT0EsS0FBS0EsUUFHakJBLEVBQU9BLEVBQU9BLEtBRWRBLEVBQU9BLEdBQUlBLEdBQUFBLE9BQU9BLElBQ3RCQSxHQUFLQSxPQUFTQSxFQUFLQSxZQUNuQkEsRUFBVUEsY0FBZ0JBLEVBQUtBLE9BQy9CQSxFQUFVQSxNQUFNQSxLQUFLQSxFQUVyQkEsSUFBSUEsR0FBTUEsR0FBSUEsR0FBQUEsT0FBT0EsR0FJckJBLEtBSEFBLEVBQUlBLE1BQVFBLEVBQ1pBLEVBQUtBLEtBQUtBLEtBQUtBLEdBRVJBLEVBQUtBLE1BQVFBLEVBQUtBLEtBQUtBLENBQzFCQSxHQUFJQSxHQUFXQSxFQUFRQSxFQUFLQSxFQUFNQSxFQUM5QkEsS0FDQUEsRUFBVUEsWUFBY0EsS0FBS0EsSUFBSUEsRUFBVUEsWUFBYUEsRUFBSUEsT0FDNURBLEVBQUtBLE1BQVFBLEVBQUlBLE1BQ2pCQSxFQUFPQSxHQUFJQSxHQUFBQSxPQUFPQSxLQUNsQkEsRUFBS0EsT0FBU0EsRUFBS0EsWUFDbkJBLEVBQVVBLGNBQWdCQSxFQUFLQSxPQUMvQkEsRUFBVUEsTUFBTUEsS0FBS0EsR0FFckJBLEVBQU1BLEdBQUlBLEdBQUFBLE9BQU9BLElBQ2pCQSxFQUFJQSxNQUFRQSxFQUNaQSxFQUFLQSxLQUFLQSxLQUFLQSxJQUd2QkEsRUFBS0EsTUFBUUEsRUFBSUEsTUFDakJBLEVBQUFBLE9BQU9BLEtBQUtBLFVBQVVBLEVBQVFBLEVBQVdBLEVBQU1BLEdBQy9DQSxFQUFVQSxZQUFjQSxLQUFLQSxJQUFJQSxFQUFVQSxZQUFhQSxFQUFJQSxPQUdoRUQsUUFBQUEsR0FBa0JBLEVBQWlCQSxFQUFzQkEsR0FFckRFLEdBQUlBLEdBQVlBLEVBQUtBLEtBQUtBLE9BQU9BLEVBQUtBLE9BQ2xDQSxFQUFTQSxFQUFVQSxRQUFRQSxNQUMzQkEsRUFBU0EsRUFBVUEsUUFBUUEsS0FFL0JBLE9BQWFBLEdBQVRBLEdBQXVCQSxFQUFUQSxHQUVkQSxFQUFJQSxPQUFTQSxFQUFVQSxPQUN2QkEsRUFBSUEsS0FBT0EsRUFDWEEsRUFBSUEsTUFBUUEsRUFBaUJBLEVBQUlBLEtBQU1BLEdBQ3ZDQSxFQUFLQSxPQUFTQSxFQUFJQSxRQUNYQSxHQUdQQSxFQUFTQSxJQUFNQSxFQUFTQSxJQUFNQSxHQUU5QkEsRUFBSUEsT0FBU0EsRUFBU0EsRUFDdEJBLEVBQUlBLEtBQU9BLEVBQVVBLE9BQU9BLEVBQUdBLEVBQUlBLFFBQ25DQSxFQUFJQSxNQUFRQSxFQUFpQkEsRUFBSUEsS0FBTUEsR0FDdkNBLEVBQUtBLE9BQVNBLEVBQUlBLFFBQ1hBLEdBR1BBLEVBQVNBLElBQWVBLEVBQVRBLEdBRWZBLEVBQUlBLE9BQVNBLEVBQVNBLEVBQ3RCQSxFQUFJQSxLQUFPQSxFQUFVQSxPQUFPQSxFQUFHQSxFQUFJQSxRQUNuQ0EsRUFBSUEsTUFBUUEsRUFBaUJBLEVBQUlBLEtBQU1BLEdBQ3ZDQSxFQUFLQSxPQUFTQSxFQUFJQSxRQUNYQSxJQUlYQSxFQUFJQSxPQUFTQSxFQUFTQSxFQUN0QkEsRUFBSUEsS0FBT0EsRUFBVUEsT0FBT0EsRUFBR0EsRUFBSUEsUUFDbkNBLEVBQUlBLE1BQVFBLEVBQWlCQSxFQUFJQSxLQUFNQSxHQUN2Q0EsRUFBS0EsT0FBU0EsRUFBSUEsUUFDWEEsR0FHWEYsUUFBQUEsR0FBMkJBLEVBQWNBLEdBQ3JDRyxNQUFPQSxHQUFBQSxPQUFPQSxRQUFRQSxhQUFhQSxFQUFNQSxHQWhGN0JILEVBQUFBLGVBQWNBLEdBUGQ5YyxFQUFBQSxFQUFBQSxNQUFBQSxFQUFBQSxVQUFMNVUsRUFBQUEsRUFBQUEsT0FBQUEsRUFBQUEsV0FBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQUs0VSxHQUFBQSxJQUFBQSxTQUFBQSxHQU9oQjhjLFFBQUFBLEdBQThCQSxFQUEwQkEsRUFBNEJBLEdBQ2hGSSxHQUFJQSxJQUNBQSxLQUFNQSxFQUFPQSxLQUNiQSxNQUFPQSxFQUNQQSxJQUFLQSxFQUFPQSxLQUFLQSxRQUdqQkEsRUFBT0EsRUFBT0EsS0FFZEEsRUFBT0EsR0FBSUEsR0FBQUEsT0FBT0EsSUFDdEJBLEdBQUtBLE9BQVNBLEVBQUtBLFlBQ25CQSxFQUFVQSxjQUFnQkEsRUFBS0EsT0FDL0JBLEVBQVVBLE1BQU1BLEtBQUtBLEVBRXJCQSxJQUFJQSxHQUFNQSxHQUFJQSxHQUFBQSxPQUFPQSxHQUlyQkEsS0FIQUEsRUFBSUEsTUFBUUEsRUFDWkEsRUFBS0EsS0FBS0EsS0FBS0EsR0FFUkEsRUFBS0EsTUFBUUEsRUFBS0EsS0FBS0EsQ0FDMUJBLEdBQUlBLEdBQVdBLFNBQVNBLEVBQVVBLFVBQVlBLEVBQWNBLEVBQUtBLEVBQU1BLEVBQU1BLEVBQVVBLFVBQVlBLEVBQWdCQSxFQUFLQSxFQUFNQSxFQUMxSEEsS0FDQUEsRUFBVUEsWUFBY0EsS0FBS0EsSUFBSUEsRUFBVUEsWUFBYUEsRUFBSUEsT0FDNURBLEVBQUtBLE1BQVFBLEVBQUlBLE1BQ2pCQSxFQUFPQSxHQUFJQSxHQUFBQSxPQUFPQSxLQUNsQkEsRUFBS0EsT0FBU0EsRUFBS0EsWUFDbkJBLEVBQVVBLGNBQWdCQSxFQUFLQSxPQUMvQkEsRUFBVUEsTUFBTUEsS0FBS0EsR0FFckJBLEVBQU1BLEdBQUlBLEdBQUFBLE9BQU9BLElBQ2pCQSxFQUFJQSxNQUFRQSxFQUNaQSxFQUFLQSxLQUFLQSxLQUFLQSxJQUd2QkEsRUFBS0EsTUFBUUEsRUFBSUEsTUFDakJBLEVBQVVBLFlBQWNBLEtBQUtBLElBQUlBLEVBQVVBLFlBQWFBLEVBQUlBLE9BR2hFSixRQUFBQSxHQUEwQkEsRUFBaUJBLEVBQXNCQSxHQUU3REssR0FBSUEsR0FBWUEsRUFBS0EsS0FBS0EsT0FBT0EsRUFBS0EsT0FDbENBLEVBQVNBLEVBQVVBLFFBQVFBLE1BQzNCQSxFQUFTQSxFQUFVQSxRQUFRQSxLQUUvQkEsT0FBYUEsR0FBVEEsR0FBdUJBLEVBQVRBLEdBRWRBLEVBQUlBLE9BQVNBLEVBQVVBLE9BQ3ZCQSxFQUFJQSxLQUFPQSxFQUNYQSxFQUFJQSxNQUFRQSxFQUFpQkEsRUFBSUEsS0FBTUEsR0FDdkNBLEVBQUtBLE9BQVNBLEVBQUlBLFFBQ1hBLEdBR1BBLEVBQVNBLElBQU1BLEVBQVNBLElBQU1BLEdBRTlCQSxFQUFJQSxPQUFTQSxFQUFTQSxFQUN0QkEsRUFBSUEsS0FBT0EsRUFBVUEsT0FBT0EsRUFBR0EsRUFBSUEsUUFDbkNBLEVBQUlBLE1BQVFBLEVBQWlCQSxFQUFJQSxLQUFNQSxHQUN2Q0EsRUFBS0EsT0FBU0EsRUFBSUEsUUFDWEEsR0FHUEEsRUFBU0EsSUFBZUEsRUFBVEEsR0FFZkEsRUFBSUEsT0FBU0EsRUFBU0EsRUFDdEJBLEVBQUlBLEtBQU9BLEVBQVVBLE9BQU9BLEVBQUdBLEVBQUlBLFFBQ25DQSxFQUFJQSxNQUFRQSxFQUFpQkEsRUFBSUEsS0FBTUEsR0FDdkNBLEVBQUtBLE9BQVNBLEVBQUlBLFFBQ1hBLElBSVhBLEVBQUlBLE9BQVNBLEVBQVNBLEVBQ3RCQSxFQUFJQSxLQUFPQSxFQUFVQSxPQUFPQSxFQUFHQSxFQUFJQSxRQUNuQ0EsRUFBSUEsTUFBUUEsRUFBaUJBLEVBQUlBLEtBQU1BLEdBQ3ZDQSxFQUFLQSxPQUFTQSxFQUFJQSxRQUNYQSxHQUdYTCxRQUFBQSxHQUF3QkEsRUFBaUJBLEVBQXNCQSxFQUFZQSxHQVF2RU0sSUFOQUEsR0FHSUEsR0FIQUEsRUFBT0EsRUFBS0EsS0FDWkEsRUFBUUEsRUFBS0EsTUFDYkEsRUFBWUEsR0FFWkEsRUFBVUEsR0FDVkEsRUFBV0EsRUFDUkEsRUFBS0EsTUFBUUEsRUFBS0EsS0FBS0EsQ0FJMUJBLEdBSEFBLEVBQUlBLEVBQUtBLE9BQU9BLEVBQUtBLE9BQ3JCQSxHQUFXQSxFQUNYQSxFQUFXQSxFQUFpQkEsRUFBU0EsR0FDM0JBLE9BQU5BLEVBS0FBLE1BSkFBLEdBQUlBLE9BQVNBLEVBQUtBLE1BQVFBLEVBQVFBLEVBQ2xDQSxFQUFJQSxLQUFPQSxFQUFLQSxPQUFPQSxFQUFPQSxFQUFJQSxRQUNsQ0EsRUFBSUEsTUFBUUEsRUFBaUJBLEVBQUlBLEtBQU1BLEdBQ3ZDQSxFQUFLQSxTQUNFQSxDQUNKQSxJQUFVQSxPQUFOQSxFQVNQQSxNQVJBQSxHQUFJQSxPQUFTQSxFQUFLQSxNQUFRQSxFQUFRQSxFQUNsQ0EsRUFBS0EsUUFDMkJBLE9BQTVCQSxFQUFLQSxPQUFPQSxFQUFLQSxTQUNqQkEsRUFBSUEsU0FDSkEsRUFBS0EsU0FFVEEsRUFBSUEsS0FBT0EsRUFBS0EsT0FBT0EsRUFBT0EsRUFBSUEsUUFDbENBLEVBQUlBLE1BQVFBLEVBQWlCQSxFQUFJQSxLQUFNQSxJQUNoQ0EsQ0FFWEEsSUFBSUEsRUFBV0EsRUFBVUEsQ0FDckJBLEdBQUlBLEdBQWNBLEVBQVlBLEdBQU1BLEVBQVlBLEVBQUlBLEVBQUtBLEtBS3pEQSxPQUpBQSxHQUFJQSxPQUFVQSxFQUFhQSxHQUFVQSxFQUNyQ0EsRUFBSUEsS0FBT0EsRUFBS0EsT0FBT0EsRUFBT0EsRUFBSUEsUUFDbENBLEVBQUlBLE1BQVFBLEVBQWlCQSxFQUFJQSxLQUFNQSxHQUN2Q0EsRUFBS0EsTUFBUUEsRUFBUUEsRUFBSUEsT0FDbEJBLEVBQUtBLE1BQVFBLEVBQUtBLElBRW5CQSxNQUFOQSxJQUNBQSxFQUFZQSxFQUFLQSxPQUNyQkEsRUFBS0EsUUFLVEEsTUFIQUEsR0FBSUEsS0FBT0EsRUFBS0EsT0FBT0EsR0FDdkJBLEVBQUlBLE9BQVNBLEVBQUlBLEtBQUtBLE9BQ3RCQSxFQUFJQSxNQUFRQSxFQUFpQkEsRUFBSUEsS0FBTUEsSUFDaENBLEVBR1hOLFFBQUFBLEdBQTJCQSxFQUFjQSxHQUNyQ0csTUFBT0EsR0FBQUEsT0FBT0EsUUFBUUEsYUFBYUEsRUFBTUEsR0E5SDdCSCxFQUFBQSxhQUFZQSxHQVBaOWMsRUFBQUEsRUFBQUEsTUFBQUEsRUFBQUEsVUFBTDVVLEVBQUFBLEVBQUFBLE9BQUFBLEVBQUFBLFdBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFLNFUsR0FBQUEsSUFBQUEsU0FBQUEsR0FDaEI4YyxHQUFBQSxHQUFBQSxXQUFBTyxRQUFBQSxNQTJCQUEsTUExQklBLEdBQUFBLFVBQUFBLE9BQUFBLFNBQVFBLEVBQTBCQSxFQUE0QkEsR0FFMURDLEdBQUlBLEdBQU9BLEVBQU9BLElBQ2xCQSxLQUFLQSxFQUFNQSxDQUNQQSxHQUFJQSxHQUFPQSxHQUFJQSxHQUFBQSxPQUFPQSxJQUN0QkEsR0FBS0EsT0FBU0EsRUFBT0EsS0FBS0EsWUFDMUJBLEVBQVVBLE1BQU1BLEtBQUtBLEVBQ3JCQSxJQUFJQSxHQUFPQSxHQUFJQSxHQUFBQSxPQUFPQSxHQUl0QkEsT0FIQUEsR0FBS0EsTUFBUUEsRUFDYkEsRUFBS0EsS0FBS0EsS0FBS0EsR0FDZkEsRUFBVUEsYUFBZUEsRUFBS0EsUUFDdkJBLEVBYVhBLE1BTklBLEdBQU9BLGVBQWlCQSxFQUFBQSxhQUFhQSxPQUNyQ0EsRUFBSUEsZUFBZUEsRUFBUUEsRUFBV0EsR0FFdENBLEVBQUlBLGFBQWFBLEVBQVFBLEVBQVdBLEdBRXhDQSxFQUFVQSxXQUFZQSxHQUNmQSxHQUVmRCxJQTNCYVAsR0FBQUEsYUFBWUEsR0FEVDljLEVBQUFBLEVBQUFBLE1BQUFBLEVBQUFBLFVBQUw1VSxFQUFBQSxFQUFBQSxPQUFBQSxFQUFBQSxXQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBU21YLEdBQUFBLElBQUFBLFNBQUFBLEdBQU9DLEdBQUFBLElBQUFBLFNBQUFBLEdBeUIzQithLFFBQUFBLEdBQTZCQSxFQUFlQSxFQUFlQSxFQUFpQkEsRUFBeUJBLEdBQ2pHQyxJQUFLQSxFQUFLQSxRQUNOQSxPQUFPQSxDQUNYQSxJQUFJQSxHQUFLQSxFQUFNQSxXQUNmQSxHQUFBQSxVQUFVQSxPQUFPQSxFQUFNQSxRQUFTQSxHQUNoQ0EsRUFBQUEsVUFBVUEsSUFBSUEsRUFBSUEsRUFBTUEsZ0JBRXhCQSxJQUFJQSxHQUFLQSxFQUFNQSxTQUlmQSxPQUhBQSxHQUFHQSxFQUFJQSxFQUFHQSxFQUFJQSxFQUNkQSxFQUFBQSxLQUFLQSxPQUFPQSxFQUFNQSxVQUFXQSxHQUM3QkEsRUFBQUEsVUFBVUEsV0FBV0EsRUFBSUEsSUFDbEJBLEVBR1hELFFBQUFBLEdBQTRCQSxFQUFlQSxFQUFlQSxFQUFpQkEsRUFBeUJBLEdBSWhHRSxNQUhJQSxHQUFLQSxTQUNMQSxFQUFLQSxRQUFRQSxRQUFRQSxFQUFNQSxXQUMvQkEsRUFBQUEsS0FBS0EsT0FBT0EsRUFBTUEsVUFBV0EsRUFBTUEsZUFDNUJBLEVBaENYRixHQUFBQSxHQUFBQSxTQUFBQSxHQUNJRyxRQUFBQSxLQUNJQyxFQUFBQSxLQUFBQSxNQUNBQSxLQUFLQSxlQUFlQSxhQUFjQSxjQUFlQSxHQUM1Q0EsYUFBYUEsYUFBY0EsR0FReENELE1BWjBDQSxXQUFBQSxFQUFBQSxHQU90Q0EsRUFBQUEsVUFBQUEsWUFBQUEsV0FDSUUsR0FBSUEsR0FBZ0JBLEVBQUFBLFVBQU1BLFlBQVdBLEtBQUFBLEtBRXJDQSxPQURBQSxHQUFNQSxZQUFjQSxHQUFJQSxHQUFBQSxVQUNqQkEsR0FFZkYsR0FaMENILEVBQUFBLEtBQUtBLFFBQVFBLGVBQTFDQSxHQUFBQSxxQkFBb0JBLEVBY2pCQSxFQUFBQSxZQUFXQSxFQWNYQSxFQUFBQSxXQUFVQSxHQXZDQy9hLEVBQUFBLEVBQUFBLFVBQUFBLEVBQUFBLGNBQVBELEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVRuWCxFQUFBQSxFQUFBQSxXQUFBQSxFQUFBQSxlQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBU21YLEdBQUFBLElBQUFBLFNBQUFBLEdBQU9DLEdBQUFBLElBQUFBLFNBQUFBLEdBSzNCcWIsR0FBQUEsR0FBQUEsU0FBQUEsR0FDSUMsUUFBQUEsS0FDSUMsRUFBQUEsS0FBQUEsTUFDQUEsS0FBS0EsYUFBYUEsZUFBZ0JBLEVBQU9BLGNBRWpERCxNQUwwQ0EsV0FBQUEsRUFBQUEsR0FLMUNBLEdBTDBDRCxFQUFBQSxLQUFLQSxRQUFRQSxlQUExQ0EsR0FBQUEscUJBQW9CQSxDQU9qQ0EsSUFBY0EsSUFBZEEsU0FBY0EsR0FDVkcsUUFBQUEsR0FBOEJBLEVBQW9CQSxFQUFZQSxFQUF5QkEsR0FDbkZDLE1BQUlBLEdBQUtBLGFBQ0VBLEVBRU5BLEVBQUtBLE9BQU9BLFlBQWVBLEVBQUtBLE9BQU9BLGFBS3JDQSxHQUpIQSxFQUFRQSxRQUNSQSxFQUFJQSxXQUNHQSxHQVBDRCxFQUFBQSxhQUFZQSxHQURsQkgsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFaYXJiLEVBQUFBLEVBQUFBLFVBQUFBLEVBQUFBLGNBQVBELEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVRuWCxFQUFBQSxFQUFBQSxXQUFBQSxFQUFBQSxlQUFSQSxVQUFBQSxZQ0VQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBU21YLEdBQUFBLElBQUFBLFNBQUFBLEdBQU9DLEdBQUFBLElBQUFBLFNBQUFBLEdBMEIzQjBiLFFBQUFBLEdBQTZCQSxFQUFlQSxFQUFlQSxFQUFpQkEsRUFBeUJBLEdBQ2pHQyxHQUFJQSxHQUFLQSxFQUFNQSxXQUlmQSxPQUhBQSxHQUFBQSxVQUFVQSxPQUFPQSxFQUFNQSxRQUFTQSxHQUNoQ0EsRUFBQUEsVUFBVUEsSUFBSUEsRUFBSUEsRUFBTUEsaUJBQ3hCQSxFQUFBQSxVQUFVQSxXQUFXQSxFQUFJQSxFQUFNQSxnQkFDeEJBLEVBR1hELFFBQUFBLEdBQTRCQSxFQUFlQSxFQUFlQSxFQUFpQkEsRUFBeUJBLEdBQ2hHRSxHQUFJQSxHQUFLQSxFQUFPQSxXQUtoQkEsT0FKSUEsR0FBS0EsVUFDTEEsRUFBS0EsUUFBUUEsUUFBUUEsRUFBTUEsZUFDM0JBLEVBQUFBLEtBQUtBLE9BQU9BLEVBQUtBLFFBQVFBLE9BQU9BLFlBQWFBLEtBRTFDQSxFQUdYRixRQUFBQSxHQUE4QkEsRUFBZUEsRUFBZUEsRUFBaUJBLEVBQXlCQSxHQUdsR0csTUFGQUEsR0FBQUEsVUFBVUEsU0FBU0EsRUFBTUEsWUFBYUEsRUFBT0EsYUFDN0NBLEVBQUFBLEtBQUtBLElBQUlBLEVBQU9BLFlBQWFBLEVBQU1BLGdCQUM1QkEsRUFuQ1hILEdBQUFBLEdBQUFBLFNBQUFBLEdBQ0lJLFFBQUFBLEtBQ0lDLEVBQUFBLEtBQUFBLE1BQ0FBLEtBQUtBLGVBQWVBLGFBQWNBLGNBQWVBLEdBQzVDQSxhQUFhQSxhQUFjQSxHQUMzQkEsY0FBY0EsYUFBY0EsZUFBZ0JBLEdBUXpERCxNQWIwQ0EsV0FBQUEsRUFBQUEsR0FRdENBLEVBQUFBLFVBQUFBLFlBQUFBLFdBQ0lFLEdBQUlBLEdBQWdCQSxFQUFBQSxVQUFNQSxZQUFXQSxLQUFBQSxLQUVyQ0EsT0FEQUEsR0FBTUEsWUFBY0EsR0FBSUEsR0FBQUEsVUFDakJBLEdBRWZGLEdBYjBDSixFQUFBQSxLQUFLQSxRQUFRQSxlQUExQ0EsR0FBQUEscUJBQW9CQSxFQWVqQkEsRUFBQUEsWUFBV0EsRUFRWEEsRUFBQUEsV0FBVUEsRUFTVkEsRUFBQUEsYUFBWUEsR0EzQ0QxYixFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQUFQRCxFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFUblgsRUFBQUEsRUFBQUEsV0FBQUEsRUFBQUEsZUFBUkEsVUFBQUEsWUNGUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQVNtWCxHQUFBQSxJQUFBQSxTQUFBQSxHQUFPQyxHQUFBQSxJQUFBQSxTQUFBQSxHQWlCM0JpYyxHQUFBQSxHQUFBQSxTQUFBQSxHQUNJQyxRQUFBQSxLQUNJQyxFQUFBQSxLQUFBQSxNQUNBQSxLQUFLQSxlQUFlQSxXQUFZQSxtQkFBb0JBLEVBQUFBLE9BQU9BLGtCQUN0REEsZUFBZUEsV0FBWUEsaUJBQWtCQSxFQUFBQSxPQUFPQSxnQkFDcERBLGFBQWFBLFdBQVlBLEVBQUFBLE9BQU9BLFVBVTdDRCxNQWZ5Q0EsV0FBQUEsRUFBQUEsR0FRckNBLEVBQUFBLFVBQUFBLFlBQUFBLFdBQ0lFLEdBQUlBLEdBQWdCQSxFQUFBQSxVQUFNQSxZQUFXQSxLQUFBQSxLQUlyQ0EsT0FIQUEsR0FBTUEsWUFBY0EsR0FBSUEsR0FBQUEsS0FDeEJBLEVBQU1BLGtCQUFvQkEsR0FBSUEsR0FBQUEsYUFDOUJBLEVBQU1BLGtCQUFvQkEsR0FBSUEsR0FBQUEsYUFDdkJBLEdBRWZGLEdBZnlDRCxFQUFBQSxLQUFLQSxPQUFPQSxjQUF4Q0EsR0FBQUEsb0JBQW1CQSxHQWpCTGpjLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVBELEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVRuWCxFQUFBQSxFQUFBQSxXQUFBQSxFQUFBQSxlQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBU21YLEdBQUFBLElBQUFBLFNBQUFBLEdBQU9DLEdBQUFBLElBQUFBLFNBQUFBLEdBUTNCaWMsR0FBQUEsR0FBQUEsU0FBQUEsR0FDSUksUUFBQUEsS0FDSUMsRUFBQUEsS0FBQUEsTUFDQUEsS0FBS0EsZUFBZUEsV0FBWUEsZUFBZ0JBLEVBQUFBLE9BQU9BLEtBQUtBLGNBQ3ZEQSxlQUFlQSxXQUFZQSxvQkFBcUJBLEVBQUFBLE9BQU9BLEtBQUtBLG1CQUM1REEsZUFBZUEsV0FBWUEsZ0JBQWlCQSxFQUFBQSxPQUFPQSxLQUFLQSxlQUN4REEsYUFBYUEsV0FBWUEsRUFBQUEsT0FBT0EsS0FBS0EsVUFXbERELE1BakI2Q0EsV0FBQUEsRUFBQUE7QUFTekNBLEVBQUFBLFVBQUFBLFlBQUFBLFdBQ0lFLEdBQUlBLEdBQW9CQSxFQUFBQSxVQUFNQSxZQUFXQSxLQUFBQSxLQUt6Q0EsT0FKQUEsR0FBTUEsbUJBQXFCQSxHQUFJQSxHQUFBQSxhQUMvQkEsRUFBTUEsY0FBZ0JBLEdBQUlBLEdBQUFBLEtBQzFCQSxFQUFNQSxRQUFVQSxLQUNoQkEsRUFBTUEsV0FBYUEsS0FDWkEsR0FFZkYsR0FqQjZDSixFQUFBQSxvQkFBaENBLEdBQUFBLHdCQUF1QkEsR0FSVGpjLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVBELEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVRuWCxFQUFBQSxFQUFBQSxXQUFBQSxFQUFBQSxlQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBU21YLEdBQUFBLElBQUFBLFNBQUFBLEdBQU1RLEdBQUFBLElBQUFBLFNBQUFBLEdBUTFCaWMsR0FBQUEsR0FBQUEsU0FBQUEsR0FDSUMsUUFBQUEsS0FDSUMsRUFBQUEsS0FBQUEsTUFDQUEsS0FBS0EsYUFBYUEsYUFBY0EsRUFBQUEsT0FBT0EsWUFFL0NELE1BTHlDQSxXQUFBQSxFQUFBQSxHQUt6Q0EsR0FMeUNELEVBQUFBLEtBQUtBLFFBQVFBLGVBQXpDQSxHQUFBQSxvQkFBbUJBLEdBUk5qYyxFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQUFOUixFQUFBQSxFQUFBQSxRQUFBQSxFQUFBQSxZQUFUblgsRUFBQUEsRUFBQUEsV0FBQUEsRUFBQUEsZUFBUkEsVUFBQUEsWUNFUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQVNtWCxHQUFBQSxJQUFBQSxTQUFBQSxHQUFPZSxHQUFBQSxJQUFBQSxTQUFBQSxHQVEzQjZiLEdBQUFBLEdBQUFBLFNBQUFBLEdBQ0lDLFFBQUFBLEtBQ0lDLEVBQUFBLEtBQUFBLE1BQ0FBLEtBQUtBLGFBQWFBLGFBQWNBLEVBQUFBLE9BQU9BLFlBQ2xDQSxhQUFhQSxrQkFBbUJBLEVBQUFBLE9BQU9BLGlCQUVwREQsTUFOMENBLFdBQUFBLEVBQUFBLEdBTTFDQSxHQU4wQ0QsRUFBQUEsTUFBTUEsUUFBUUEsb0JBQTNDQSxHQUFBQSxxQkFBb0JBLEdBUk43YixFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQUFQZixFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFUblgsRUFBQUEsRUFBQUEsV0FBQUEsRUFBQUEsZUFBUkEsVUFBQUEsWUNGUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQVNtWCxHQUFBQSxJQUFBQSxTQUFBQSxHQUFNUSxHQUFBQSxJQUFBQSxTQUFBQSxHQWUxQnVjLFFBQUFBLEdBQXFCQSxFQUFlQSxFQUFlQSxFQUFpQkEsRUFBeUJBLEdBQ3pGQyxHQUFJQSxHQUFVQSxFQUFPQSxXQUNyQkEsR0FBUUEsTUFBUUEsRUFBUUEsT0FBU0EsQ0FDakNBLEtBQUtBLEdBQUlBLEdBQVNBLEVBQUtBLE9BQVFBLEVBQU9BLFFBQVNBLENBQzNDQSxFQUFPQSxRQUFRQSxRQUFRQSxFQUFNQSxjQUM3QkEsSUFBSUEsR0FBVUEsRUFBT0EsUUFBUUEsT0FBT0EsV0FDcENBLEdBQVFBLE1BQVFBLEtBQUtBLElBQUlBLEVBQVFBLE1BQU9BLEVBQVFBLE9BQ2hEQSxFQUFRQSxPQUFTQSxLQUFLQSxJQUFJQSxFQUFRQSxPQUFRQSxFQUFRQSxRQUV0REEsT0FBT0EsRUFoQlhELEdBQUFBLEdBQUFBLFNBQUFBLEdBQ0lFLFFBQUFBLEtBQ0lDLEVBQUFBLEtBQUFBLE1BQ0FBLEtBQUtBLGFBQWFBLGFBQWNBLEdBRXhDRCxNQUx5Q0EsV0FBQUEsRUFBQUEsR0FLekNBLEdBTHlDRixFQUFBQSxLQUFLQSxRQUFRQSxlQUF6Q0EsR0FBQUEsb0JBQW1CQSxHQVJOdmMsRUFBQUEsRUFBQUEsVUFBQUEsRUFBQUEsY0FBTlIsRUFBQUEsRUFBQUEsUUFBQUEsRUFBQUEsWUFBVG5YLEVBQUFBLEVBQUFBLFdBQUFBLEVBQUFBLGVBQVJBLFVBQUFBLFlDRVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFTbVgsR0FBQUEsSUFBQUEsU0FBQUEsR0FBT2UsR0FBQUEsSUFBQUEsU0FBQUEsR0FRM0JvYyxHQUFBQSxHQUFBQSxTQUFBQSxHQUNJQyxRQUFBQSxLQUNJQyxFQUFBQSxLQUFBQSxNQUNBQSxLQUFLQSxhQUFhQSxhQUFjQSxFQUFBQSxPQUFPQSxZQUUvQ0QsTUFMMENBLFdBQUFBLEVBQUFBLEdBSzFDQSxHQUwwQ0QsRUFBQUEsTUFBTUEsUUFBUUEsb0JBQTNDQSxHQUFBQSxxQkFBb0JBLEdBUk5wYyxFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQUFQZixFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFUblgsRUFBQUEsRUFBQUEsV0FBQUEsRUFBQUEsZUFBUkEsVUFBQUEsWUNGUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQVNtWCxHQUFBQSxJQUFBQSxTQUFBQSxHQUFPZSxHQUFBQSxJQUFBQSxTQUFBQSxHQUMzQnVjLEdBQUFBLEdBQUFBLFNBQUFBLEdBQ0lDLFFBQUFBLEtBQ0lDLEVBQUFBLEtBQUFBLE1BQ0FBLEtBQUtBLGFBQWFBLG9CQUFxQkEsRUFBT0EsbUJBRXRERCxNQUw4Q0EsV0FBQUEsRUFBQUEsR0FLOUNBLEdBTDhDRCxFQUFBQSxLQUFLQSxZQUFZQSxtQkFBbERBLEdBQUFBLHlCQUF3QkEsQ0FPckNBLElBQWNBLElBQWRBLFNBQWNBLEdBQ1ZHLFFBQUFBLEdBQW1DQSxFQUFnQ0EsRUFBZ0NBLEVBQWtDQSxFQUFrQ0EsR0FDbktDLEdBQW1EQSxLQUE5Q0EsRUFBTUEsV0FBYUEsRUFBQUEsV0FBV0EsWUFDL0JBLE9BQU9BLENBRVhBLElBQUlBLEdBQU1BLEVBQU1BLG1CQUVoQkEsT0FEQUEsR0FBSUEsRUFBSUEsRUFBSUEsRUFBSUEsRUFBSUEsTUFBUUEsRUFBSUEsUUFDekJBLEVBTktELEVBQUFBLGtCQUFpQkEsR0FEdkJILEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBUmF2YyxFQUFBQSxFQUFBQSxjQUFBQSxFQUFBQSxrQkFBUGYsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBVG5YLEVBQUFBLEVBQUFBLFdBQUFBLEVBQUFBLGVBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFTbVgsR0FBQUEsSUFBQUEsU0FBQUEsR0FBT2UsR0FBQUEsSUFBQUEsU0FBQUEsR0FPM0I0YyxHQUFBQSxHQUFBQSxTQUFBQSxHQUNJQyxRQUFBQSxLQUNJQyxFQUFBQSxLQUFBQSxNQUNBQSxLQUFLQSxhQUFhQSxrQkFBbUJBLEVBQUFBLE9BQU9BLGlCQUVwREQsTUFMNENBLFdBQUFBLEVBQUFBLEdBSzVDQSxHQUw0Q0QsRUFBQUEsS0FBS0EsVUFBVUEsaUJBQTlDQSxHQUFBQSx1QkFBc0JBLEdBUFI1YyxFQUFBQSxFQUFBQSxZQUFBQSxFQUFBQSxnQkFBUGYsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBVG5YLEVBQUFBLEVBQUFBLFdBQUFBLEVBQUFBLGVBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFTbVgsR0FBQUEsSUFBQUEsU0FBQUEsR0FBUXVCLEdBQUFBLElBQUFBLFNBQUFBLEdBSzVCdWMsR0FBQUEsR0FBQUEsU0FBQUEsR0FDSUMsUUFBQUEsS0FDSUMsRUFBQUEsS0FBQUEsTUFDQUEsS0FBS0EsZUFBZUEsU0FBVUEsYUFBY0EsRUFBT0EsWUFDOUNBLGFBQWFBLGVBQWdCQSxFQUFPQSxjQUVqREQsTUFOMkNBLFdBQUFBLEVBQUFBLEdBTTNDQSxHQU4yQ0QsRUFBQUEsS0FBS0EsUUFBUUEsZUFBM0NBLEdBQUFBLHNCQUFxQkEsQ0FRbENBLElBQWNBLElBQWRBLFNBQWNBLEdBQ1ZHLFFBQUFBLEdBQTRCQSxFQUFvQkEsRUFBWUEsRUFBeUJBLEdBQ2pGQyxRQUFTQSxFQUFLQSxPQUFPQSxVQUd6QkQsUUFBQUEsR0FBOEJBLEVBQW9CQSxFQUFZQSxFQUF5QkEsR0FDbkZFLE1BQUlBLEdBQUtBLGFBQ0VBLEdBRVhBLEVBQVFBLFFBQ1JBLEVBQUlBLFdBQ0dBLEdBVktGLEVBQUFBLFdBQVVBLEVBSVZBLEVBQUFBLGFBQVlBLEdBTGxCSCxFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQWJjdmMsRUFBQUEsRUFBQUEsVUFBQUEsRUFBQUEsY0FBUnZCLEVBQUFBLEVBQUFBLFVBQUFBLEVBQUFBLGNBQVRuWCxFQUFBQSxFQUFBQSxXQUFBQSxFQUFBQSxlQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBU21YLEdBQUFBLElBQUFBLFNBQUFBLEdBQUs2QixHQUFBQSxJQUFBQSxTQUFBQSxHQVl6QnVjLEdBQUFBLEdBQUFBLFNBQUFBLEdBQ0lDLFFBQUFBLEtBQ0lDLEVBQUFBLEtBQUFBLE1BQ0FBLEtBQUtBLGVBQWVBLGFBQWNBLHdCQUF5QkEsRUFBQUEsT0FBT0EsdUJBQzdEQSxlQUFlQSxhQUFjQSxlQUFnQkEsRUFBQUEsT0FBT0EsY0FDcERBLGVBQWVBLGFBQWNBLGFBQWNBLEVBQUFBLE9BQU9BLFlBQ2xEQSxhQUFhQSxhQUFjQSxFQUFBQSxPQUFPQSxZQVEvQ0QsTUFkd0NBLFdBQUFBLEVBQUFBLEdBU3BDQSxFQUFBQSxVQUFBQSxZQUFBQSxXQUNJRSxHQUFJQSxHQUFnQkEsRUFBQUEsVUFBTUEsWUFBV0EsS0FBQUEsS0FFckNBLE9BREFBLEdBQU1BLFNBQVdBLEdBQUlBLEdBQUFBLEtBQ2RBLEdBRWZGLEdBZHdDRCxFQUFBQSxNQUFNQSxRQUFRQSxvQkFBekNBLEdBQUFBLG1CQUFrQkEsR0FaTnZjLEVBQUFBLEVBQUFBLFVBQUFBLEVBQUFBLGNBQUw3QixFQUFBQSxFQUFBQSxPQUFBQSxFQUFBQSxXQUFUblgsRUFBQUEsRUFBQUEsV0FBQUEsRUFBQUEsZUFBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQVNtWCxHQUFBQSxJQUFBQSxTQUFBQSxHQUFLNkIsR0FBQUEsSUFBQUEsU0FBQUEsR0FDekIyYyxRQUFBQSxHQUFxQ0EsRUFBcUJBLEdBQ3REQyxJQUFLQSxHQUFJQSxHQUFJQSxFQUFPQSxFQUFKQSxFQUFPQSxJQUluQkEsSUFBS0EsR0FIREEsR0FBZUEsSUFBTkEsRUFBVUEsRUFBU0EsRUFDNUJBLEVBQVFBLEVBQU9BLE9BRVZBLEVBQU1BLEVBQVFBLEVBQUdBLEdBQU9BLEVBQUdBLElBQ2hDQSxJQUFLQSxHQUFJQSxHQUFNQSxFQUFLQSxHQUFPQSxFQUFHQSxJQUFPQSxDQUVqQ0EsSUFBS0EsR0FEREEsSUFBWUEsRUFDUEEsRUFBSUEsRUFBS0EsR0FBS0EsRUFBS0EsSUFDeEJBLEVBQVlBLEdBQWNBLEVBQU9BLEdBQUdBLEdBQUdBLE9BQVNBLEVBQUFBLGFBQWFBLElBSWpFQSxLQUFLQSxHQUZEQSxHQUFVQSxFQUFPQSxHQUFLQSxHQUFLQSxRQUMzQkEsRUFBaUJBLEVBQ1pBLEVBQUlBLEVBQUtBLEdBQUtBLEVBQUtBLElBQ3hCQSxHQUFrQkEsRUFBT0EsR0FBR0EsR0FBR0EsT0FFbkNBLElBQXFCQSxFQUFqQkEsRUFBMEJBLENBQzFCQSxHQUFJQSxHQUFhQSxFQUFVQSxDQUN2QkEsR0FDQUEsRUFBYUEsRUFBQUEsV0FBV0EsRUFBUUEsRUFBS0EsRUFBS0EsRUFBWUEsRUFBQUEsYUFBYUEsTUFBTUEsSUFFekVBLEVBQWFBLEVBQUFBLFdBQVdBLEVBQVFBLEVBQUtBLEVBQUtBLEVBQVlBLEVBQUFBLGFBQWFBLE9BQU9BLEdBQzFFQSxFQUFhQSxFQUFBQSxXQUFXQSxFQUFRQSxFQUFLQSxFQUFLQSxFQUFZQSxFQUFBQSxhQUFhQSxNQUFNQSxLQU03RkEsSUFBS0EsR0FBSUEsR0FBSUEsRUFBR0EsRUFBSUEsRUFBT0EsT0FBUUEsSUFDL0JBLEVBQU9BLEdBQUdBLEdBQUdBLFFBQVVBLEVBQU9BLEdBQUdBLEdBQUdBLE9BRXhDQSxLQUFLQSxHQUFJQSxHQUFJQSxFQUFHQSxFQUFJQSxFQUFPQSxPQUFRQSxJQUMvQkEsRUFBT0EsR0FBR0EsR0FBR0EsUUFBVUEsRUFBT0EsR0FBR0EsR0FBR0EsUUFoQzVCRCxFQUFBQSxvQkFBbUJBLEdBRFYzYyxFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQUFMN0IsRUFBQUEsRUFBQUEsT0FBQUEsRUFBQUEsV0FBVG5YLEVBQUFBLEVBQUFBLFdBQUFBLEVBQUFBLGVBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFTbVgsR0FBQUEsSUFBQUEsU0FBQUEsR0FBSzZCLEdBQUFBLElBQUFBLFNBQUFBLEdBQ3pCMmMsUUFBQUEsR0FBNEJBLEVBQWtCQSxFQUFlQSxFQUFhQSxFQUFjQSxFQUF3QkEsR0FJNUdFLElBQUtBLEdBSERBLEdBQVFBLEVBQ1JBLEdBQVdBLEVBQ1hBLEVBQWNBLEVBQ1RBLEVBQUlBLEVBQVlBLEdBQUxBLEVBQVVBLElBQUtBLENBQy9CQSxHQUFJQSxHQUFNQSxFQUFJQSxHQUFHQSxFQUNqQkEsR0FBY0EsRUFBY0EsRUFBSUEsUUFBVUEsRUFBSUEsUUFDMUNBLEVBQWNBLEVBQUlBLE1BQ2xCQSxHQUFVQSxJQUFhQSxFQUFBQSxhQUFhQSxLQUFRQSxFQUFJQSxNQUFRQSxHQUdoRUEsRUFBR0EsQ0FDQ0EsR0FBV0EsQ0FDWEEsSUFBSUEsR0FBZUEsRUFBT0EsQ0FDMUJBLEtBQUtBLEVBQUlBLEVBQVlBLEdBQUxBLEVBQVVBLElBR3RCQSxHQUZBQSxFQUFNQSxFQUFJQSxHQUFHQSxHQUNiQSxFQUFjQSxFQUFjQSxFQUFJQSxRQUFVQSxFQUFJQSxRQUN4Q0EsRUFBSUEsT0FBU0EsR0FBWUEsRUFBY0EsRUFBSUEsSUFBakRBLENBRUFBLEdBQUlBLEdBQVVBLENBQ2RBLElBQVdBLEdBQWdCQSxJQUFhQSxFQUFBQSxhQUFhQSxLQUFPQSxFQUFJQSxNQUFRQSxHQUN4RUEsRUFBVUEsS0FBS0EsSUFBSUEsRUFBU0EsRUFBSUEsS0FDaENBLEVBQVdBLEdBQWFBLEVBQVVBLEVBQ2xDQSxHQUFRQSxFQUFVQSxFQUNkQSxFQUNBQSxFQUFJQSxRQUFVQSxFQUVkQSxFQUFJQSxRQUFVQSxTQUVqQkEsRUFDVEEsT0FBT0EsR0E5QktGLEVBQUFBLFdBQVVBLEdBREQzYyxFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQUFMN0IsRUFBQUEsRUFBQUEsT0FBQUEsRUFBQUEsV0FBVG5YLEVBQUFBLEVBQUFBLFdBQUFBLEVBQUFBLGVBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFTbVgsR0FBQUEsSUFBQUEsU0FBQUEsR0FBSzZCLEdBQUFBLElBQUFBLFNBQUFBLEdBQ3pCMmMsUUFBQUEsR0FBZ0NBLEVBQWtCQSxFQUE4QkEsR0FHNUVHLElBQUtBLEdBRkRBLEdBQUtBLEVBQWNBLE1BRWRBLEVBQUlBLEVBQUdBLEVBQUlBLEVBQUlBLE9BQVFBLElBQUtBLENBQ2pDQSxHQUFJQSxHQUFNQSxFQUFJQSxHQUFHQSxFQUNiQSxHQUFJQSxPQUFTQSxFQUFBQSxhQUFhQSxLQUMxQkEsRUFBSUEsUUFBVUEsRUFFZEEsRUFBS0EsS0FBS0EsSUFBSUEsRUFBS0EsRUFBSUEsUUFBU0EsR0FFeENBLEVBQUtBLEVBQUFBLFdBQVdBLEVBQUtBLEVBQUdBLEVBQUlBLE9BQVNBLEVBQUdBLEVBQUlBLEVBQUFBLGFBQWFBLE1BQU1BLEVBRS9EQSxLQUFLQSxHQUFJQSxHQUFJQSxFQUFHQSxFQUFJQSxFQUFRQSxPQUFRQSxJQUFLQSxDQUNyQ0EsR0FBSUEsR0FBTUEsRUFBSUEsR0FBR0EsRUFDYkEsR0FBSUEsT0FBU0EsRUFBQUEsYUFBYUEsTUFDMUJBLEVBQVFBLEdBQUdBLGVBQWVBLEVBQUlBLFVBZjFCSCxFQUFBQSxlQUFjQSxHQURMM2MsRUFBQUEsRUFBQUEsVUFBQUEsRUFBQUEsY0FBTDdCLEVBQUFBLEVBQUFBLE9BQUFBLEVBQUFBLFdBQVRuWCxFQUFBQSxFQUFBQSxXQUFBQSxFQUFBQSxlQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBU21YLEdBQUFBLElBQUFBLFNBQUFBLEdBQUs2QixHQUFBQSxJQUFBQSxTQUFBQSxHQUN6QjJjLFFBQUFBLEdBQWdDQSxFQUFrQkEsRUFBMkJBLEdBR3pFSSxJQUFLQSxHQUZEQSxHQUFLQSxFQUFjQSxPQUVkQSxFQUFJQSxFQUFHQSxFQUFJQSxFQUFJQSxPQUFRQSxJQUFLQSxDQUNqQ0EsR0FBSUEsR0FBTUEsRUFBSUEsR0FBR0EsRUFDYkEsR0FBSUEsT0FBU0EsRUFBQUEsYUFBYUEsS0FDMUJBLEVBQUlBLFFBQVVBLEVBRWRBLEVBQUtBLEtBQUtBLElBQUlBLEVBQUtBLEVBQUlBLFFBQVNBLEdBRXhDQSxFQUFLQSxFQUFBQSxXQUFXQSxFQUFLQSxFQUFHQSxFQUFJQSxPQUFTQSxFQUFHQSxFQUFJQSxFQUFBQSxhQUFhQSxNQUFNQSxFQUUvREEsS0FBS0EsR0FBSUEsR0FBSUEsRUFBR0EsRUFBSUEsRUFBUUEsT0FBUUEsSUFBS0EsQ0FDckNBLEdBQUlBLEdBQU1BLEVBQUlBLEdBQUdBLEVBQ2JBLEdBQUlBLE9BQVNBLEVBQUFBLGFBQWFBLE1BQzFCQSxFQUFRQSxHQUFHQSxnQkFBZ0JBLEVBQUlBLFVBZjNCSixFQUFBQSxlQUFjQSxHQURMM2MsRUFBQUEsRUFBQUEsVUFBQUEsRUFBQUEsY0FBTDdCLEVBQUFBLEVBQUFBLE9BQUFBLEVBQUFBLFdBQVRuWCxFQUFBQSxFQUFBQSxXQUFBQSxFQUFBQSxlQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBU21YLEdBQUFBLElBQUFBLFNBQUFBLEdBQUs2QixHQUFBQSxJQUFBQSxTQUFBQSxHQUN6QmdkLEdBQUFBLEdBQUFBLFdBQ0lDLFFBQUFBLEdBQW9CQSxFQUE0QkEsRUFBb0JBLEVBQW9CQSxHQUFwRUMsS0FBQUEsT0FBQUEsRUFBNEJBLEtBQUFBLElBQUFBLEVBQW9CQSxLQUFBQSxJQUFBQSxFQUFvQkEsS0FBQUEsS0FBQUEsRUFVNUZELE1BUFdBLEdBQUFBLElBQVBBLFNBQVlBLEVBQXFCQSxFQUE0QkEsR0FDekRFLE1BQU9BLElBQUlBLEdBQW1CQSxFQUFRQSxFQUFXQSxJQUFNQSxFQUFXQSxRQUFVQSxFQUFHQSxFQUFXQSxJQUFLQSxFQUFNQSxPQUFPQSxZQUFZQSxTQUdySEYsRUFBQUEsSUFBUEEsU0FBWUEsRUFBcUJBLEVBQTRCQSxHQUN6REcsTUFBT0EsSUFBSUEsR0FBbUJBLEVBQVFBLEVBQVdBLElBQU1BLEVBQVdBLFFBQVVBLEVBQUdBLEVBQVdBLElBQUtBLEVBQU1BLE9BQU9BLFlBQVlBLFFBRWhJSCxJQVhhRCxHQUFBQSxtQkFBa0JBLEdBRE5oZCxFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQUFMN0IsRUFBQUEsRUFBQUEsT0FBQUEsRUFBQUEsV0FBVG5YLEVBQUFBLEVBQUFBLFdBQUFBLEVBQUFBLGVBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFTbVgsR0FBQUEsSUFBQUEsU0FBQUEsR0FBSzZCLEdBQUFBLElBQUFBLFNBQUFBLElBQ3pCZ2QsU0FBWUEsR0FDUkssRUFBQUEsRUFBQUEsU0FBQUEsR0FBQUEsV0FDQUEsRUFBQUEsRUFBQUEsU0FBQUEsR0FBQUEsV0FDQUEsRUFBQUEsRUFBQUEsU0FBQUEsR0FBQUEsV0FDQUEsRUFBQUEsRUFBQUEsY0FBQUEsR0FBQUEsZ0JBQ0FBLEVBQUFBLEVBQUFBLFFBQUFBLEdBQUFBLFVBQ0FBLEVBQUFBLEVBQUFBLGNBQUFBLEdBQUFBLGlCQU5RTCxFQUFBQSxlQUFBQSxFQUFBQSxpQkFBWkEsSUFBWUEsR0FBQUEsRUFBQUEsYUFTWkEsRUFBQUEsV0FBQU0sUUFBQUEsTUEwRkFBLE1BL0VJQSxHQUFBQSxVQUFBQSxLQUFBQSxTQUFNQSxFQUFxQkEsRUFBaUJBLEdBQ3hDQyxHQUFJQSxHQUFNQSxLQUFLQSxJQUFNQSxLQUFLQSxJQUFJQSxFQUFNQSxpQkFBaUJBLGVBQWdCQSxFQUFHQSxPQUFTQSxFQUM3RUEsT0FBTUEsS0FDTkEsS0FBS0EsSUFBTUEsRUFBTUEsRUFDckJBLElBQUlBLEdBQU1BLEtBQUtBLElBQU1BLEtBQUtBLElBQUlBLEVBQU1BLGlCQUFpQkEsWUFBYUEsRUFBR0EsT0FBU0EsRUFDMUVBLE9BQU1BLEtBQ05BLEtBQUtBLElBQU1BLEVBQU1BLEVBQ3JCQSxJQUFJQSxHQUFVQSxLQUFLQSxRQUFVQSxLQUFLQSxJQUFJQSxFQUFNQSxpQkFBaUJBLG1CQUFvQkEsRUFBR0EsT0FBU0EsRUFDekZBLE9BQU1BLEtBQ05BLEtBQUtBLFFBQVVBLEVBQVVBLEVBQzdCQSxJQUFJQSxHQUFVQSxLQUFLQSxRQUFVQSxLQUFLQSxJQUFJQSxFQUFNQSxpQkFBaUJBLGdCQUFpQkEsRUFBR0EsT0FBU0EsRUFDdEZBLE9BQU1BLEtBQ05BLEtBQUtBLFFBQVVBLEVBQVVBLEdBRTdCQSxLQUFLQSxRQUFVQSxLQUFLQSxRQUFVQSxLQUFLQSxRQUFVQSxLQUFLQSxTQUFVQSxDQUU1REEsS0FBS0EsR0FBSUEsR0FBSUEsRUFBU0EsRUFBTUEsRUFBVkEsRUFBbUJBLElBQ2pDQSxLQUFLQSxRQUFVQSxLQUFLQSxTQUFZQSxFQUFHQSxHQUFHQSxHQUFHQSxPQUFTQSxFQUFBQSxhQUFhQSxLQUMvREEsS0FBS0EsUUFBVUEsS0FBS0EsU0FBWUEsRUFBR0EsR0FBR0EsR0FBR0EsT0FBU0EsRUFBQUEsYUFBYUEsSUFFbkVBLEtBQUtBLEdBQUlBLEdBQUlBLEVBQVNBLEVBQU1BLEVBQVZBLEVBQW1CQSxJQUNqQ0EsS0FBS0EsUUFBVUEsS0FBS0EsU0FBWUEsRUFBR0EsR0FBR0EsR0FBR0EsT0FBU0EsRUFBQUEsYUFBYUEsS0FDL0RBLEtBQUtBLFFBQVVBLEtBQUtBLFNBQVlBLEVBQUdBLEdBQUdBLEdBQUdBLE9BQVNBLEVBQUFBLGFBQWFBLElBR25FQSxPQUFPQSxPQUdYRCxFQUFBQSxVQUFBQSxrQkFBQUEsU0FBbUJBLEVBQXNCQSxFQUFpQkEsR0FHdERFLE1BRkFBLEdBQVVBLE1BQVFBLEVBQVVBLE9BQVNBLEVBRWpDQSxLQUFLQSxTQUFXQSxLQUFLQSxVQUFZQSxLQUFLQSxVQUFZQSxLQUFLQSxRQUNuREEsSUFBU0EsRUFBYUEsVUFDZkEsR0FDWEEsRUFBVUEsTUFBUUEsT0FBT0Esa0JBQ3pCQSxFQUFVQSxPQUFTQSxPQUFPQSxtQkFDbkJBLEdBR1BBLEtBQUtBLFNBQVdBLEtBQUtBLFVBQVlBLEtBQUtBLFFBQ2xDQSxJQUFTQSxFQUFhQSxVQUFZQSxJQUFTQSxFQUFhQSxlQUNqREEsR0FDUEEsSUFBU0EsRUFBYUEsVUFBWUEsRUFBVUEsY0FDNUNBLEVBQVVBLE9BQVNBLE9BQU9BLG1CQUM5QkEsRUFBVUEsTUFBUUEsT0FBT0EsbUJBQ2xCQSxHQUdQQSxLQUFLQSxTQUFXQSxLQUFLQSxVQUFZQSxLQUFLQSxRQUNsQ0EsSUFBU0EsRUFBYUEsVUFDZkEsR0FDWEEsRUFBVUEsT0FBU0EsT0FBT0EsbUJBQ25CQSxJQUdOQSxLQUFLQSxVQUFXQSxLQUFLQSxTQUFjQSxLQUFLQSxTQUFXQSxLQUFLQSxRQVV2REEsS0FBS0EsU0FBV0EsS0FBS0EsUUFHcEJBLElBQVNBLEVBQWFBLGNBRmxCQSxJQUFTQSxFQUFhQSxRQVZ6QkEsSUFBU0EsRUFBYUEsU0FDZkEsR0FDUEEsS0FBS0EsVUFDTEEsRUFBVUEsT0FBU0EsT0FBT0EsbUJBQzFCQSxLQUFLQSxVQUNMQSxFQUFVQSxNQUFRQSxPQUFPQSxvQkFDdEJBLElBU2ZGLEVBQUFBLFVBQUFBLEtBQUFBLFNBQU1BLEVBQWlCQSxFQUFpQkEsR0FDcENHLElBQUtBLEdBQUlBLEdBQUlBLEtBQUtBLElBQUtBLEVBQUlBLEtBQUtBLElBQU1BLEtBQUtBLFFBQVNBLElBQ2hEQSxFQUFVQSxRQUFVQSxFQUFHQSxHQUFHQSxHQUFHQSxPQUVqQ0EsS0FBS0EsR0FBSUEsR0FBSUEsS0FBS0EsSUFBS0EsRUFBSUEsS0FBS0EsSUFBTUEsS0FBS0EsUUFBU0EsSUFDaERBLEVBQVVBLE9BQVNBLEVBQUdBLEdBQUdBLEdBQUdBLFNBR3hDSCxJQTFGYU4sR0FBQUEsZUFBY0EsR0FWRmhkLEVBQUFBLEVBQUFBLFVBQUFBLEVBQUFBLGNBQUw3QixFQUFBQSxFQUFBQSxPQUFBQSxFQUFBQSxXQUFUblgsRUFBQUEsRUFBQUEsV0FBQUEsRUFBQUEsZUFBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQVNtWCxHQUFBQSxJQUFBQSxTQUFBQSxHQUFLNkIsR0FBQUEsSUFBQUEsU0FBQUEsR0FlekJnZCxHQUFBQSxHQUFBQSxTQUFBQSxHQUNJVSxRQUFBQSxLQUNJQyxFQUFBQSxLQUFBQSxNQUNBQSxLQUFLQSxlQUFlQSxhQUFjQSxrQkFBbUJBLEVBQUFBLE9BQU9BLGlCQUN2REEsZUFBZUEsYUFBY0EsbUJBQW9CQSxFQUFBQSxPQUFPQSxrQkFDeERBLGVBQWVBLGFBQWNBLGtCQUFtQkEsRUFBQUEsT0FBT0EsaUJBQ3ZEQSxlQUFlQSxhQUFjQSxtQkFBb0JBLEVBQUFBLE9BQU9BLGtCQUN4REEsZUFBZUEsYUFBY0EsYUFBY0EsRUFBQUEsT0FBT0EsWUFDbERBLGVBQWVBLGFBQWNBLHFCQUFzQkEsRUFBQUEsT0FBT0EscUJBQXFCQSxFQUFBQSxhQUFhQSxXQUM1RkEsZUFBZUEsYUFBY0EscUJBQXNCQSxFQUFBQSxPQUFPQSxxQkFBcUJBLEVBQUFBLGFBQWFBLFdBQzVGQSxlQUFlQSxhQUFjQSxxQkFBc0JBLEVBQUFBLE9BQU9BLHFCQUFxQkEsRUFBQUEsYUFBYUEsV0FDNUZBLGVBQWVBLGFBQWNBLDBCQUEyQkEsRUFBQUEsT0FBT0EscUJBQXFCQSxFQUFBQSxhQUFhQSxnQkFDakdBLGVBQWVBLGFBQWNBLG9CQUFxQkEsRUFBQUEsT0FBT0EscUJBQXFCQSxFQUFBQSxhQUFhQSxVQUMzRkEsZUFBZUEsYUFBY0EsMEJBQTJCQSxFQUFBQSxPQUFPQSxxQkFBcUJBLEVBQUFBLGFBQWFBLGdCQUNqR0EsYUFBYUEsYUFBY0EsRUFBQUEsT0FBT0EsWUFDbENBLGNBQWNBLGFBQWNBLHFCQUFzQkEsRUFBQUEsT0FBT0Esb0JBYXRFRCxNQTVCd0NBLFdBQUFBLEVBQUFBLEdBa0JwQ0EsRUFBQUEsVUFBQUEsWUFBQUEsV0FDSUUsR0FBSUEsR0FBZ0JBLEVBQUFBLFVBQU1BLFlBQVdBLEtBQUFBLEtBT3JDQSxPQU5BQSxHQUFNQSxXQUFhQSxHQUFJQSxHQUFBQSxLQUN2QkEsRUFBTUEsVUFBWUEsR0FBSUEsR0FBQUEsVUFDdEJBLEVBQU1BLGVBQ05BLEVBQU1BLFVBQVlBLEdBQUlBLEdBQUFBLEtBQ3RCQSxFQUFNQSxjQUNOQSxFQUFNQSxlQUFpQkEsRUFDaEJBLEdBRWZGLEdBNUJ3Q1YsRUFBQUEsTUFBTUEsUUFBUUEsb0JBQXpDQSxHQUFBQSxtQkFBa0JBLEdBZk5oZCxFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQUFMN0IsRUFBQUEsRUFBQUEsT0FBQUEsRUFBQUEsV0FBVG5YLEVBQUFBLEVBQUFBLFdBQUFBLEVBQUFBLGVBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFTbVgsR0FBQUEsSUFBQUEsU0FBQUEsR0FBSzZCLEdBQUFBLElBQUFBLFNBQUFBLEdBQ3pCZ2QsR0FBQUEsR0FBQUEsV0FBQWEsUUFBQUEsS0FDSUMsS0FBQUEsYUFBdUJBLEVBQ3ZCQSxLQUFBQSxhQUF1QkEsRUFDdkJBLEtBQUFBLGFBQXVCQSxFQVczQkQsTUFUSUEsR0FBQUEsVUFBQUEsS0FBQUEsU0FBTUEsR0FDRkUsS0FBS0EsWUFBY0EsS0FBS0EsWUFBY0EsS0FBS0EsYUFBY0EsQ0FDekRBLEtBQUtBLEdBQUlBLEdBQUlBLEVBQUdBLEVBQUlBLEVBQVlBLE9BQVFBLElBQUtBLENBQ3pDQSxHQUFJQSxHQUFLQSxFQUFZQSxFQUNyQkEsTUFBS0EsWUFBY0EsS0FBS0EsYUFBZ0JBLEVBQUdBLFNBQVdBLEVBQUdBLFVBQVlBLEVBQUdBLFVBQVlBLEVBQUdBLFFBQ3ZGQSxLQUFLQSxZQUFjQSxLQUFLQSxhQUFnQkEsRUFBR0EsU0FBV0EsRUFBR0EsUUFDekRBLEtBQUtBLFlBQWNBLEtBQUtBLGFBQWdCQSxFQUFHQSxTQUFXQSxFQUFHQSxVQUdyRUYsSUFkYWIsR0FBQUEsVUFBU0EsR0FER2hkLEVBQUFBLEVBQUFBLFVBQUFBLEVBQUFBLGNBQUw3QixFQUFBQSxFQUFBQSxPQUFBQSxFQUFBQSxXQUFUblgsRUFBQUEsRUFBQUEsV0FBQUEsRUFBQUEsZUFBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQVNtWCxHQUFBQSxJQUFBQSxTQUFBQSxHQUFNUSxHQUFBQSxJQUFBQSxTQUFBQSxHQVMxQnFmLEdBQUFBLEdBQUFBLFNBQUFBLEdBQ0lDLFFBQUFBLEtBQ0lDLEVBQUFBLEtBQUFBLE1BQ0FBLEtBQUtBLGVBQWVBLGNBQWVBLGlCQUFrQkEsRUFBQUEsT0FBT0EsZ0JBRXBFRCxNQUwyQ0EsV0FBQUEsRUFBQUEsR0FLM0NBLEdBTDJDRCxFQUFBQSxLQUFLQSxVQUFVQSxpQkFBN0NBLEdBQUFBLHNCQUFxQkEsR0FUUnJmLEVBQUFBLEVBQUFBLFlBQUFBLEVBQUFBLGdCQUFOUixFQUFBQSxFQUFBQSxRQUFBQSxFQUFBQSxZQUFUblgsRUFBQUEsRUFBQUEsV0FBQUEsRUFBQUEsZUFBUkEsVUFBQUEsWUNFUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQVNtWCxHQUFBQSxJQUFBQSxTQUFBQSxHQUFLNkIsR0FBQUEsSUFBQUEsU0FBQUEsR0FTekJtZSxHQUFBQSxHQUFBQSxTQUFBQSxHQUNJQyxRQUFBQSxLQUNJQyxFQUFBQSxLQUFBQSxNQUNBQSxLQUFLQSxhQUFhQSxpQkFBa0JBLEVBQUFBLE9BQU9BLGdCQUN0Q0EsYUFBYUEsY0FBZUEsRUFBQUEsT0FBT0EsYUFFaERELE1BTjBDQSxXQUFBQSxFQUFBQSxHQU0xQ0EsR0FOMENELEVBQUFBLE1BQU1BLFVBQVVBLHNCQUE3Q0EsR0FBQUEscUJBQW9CQSxHQVRSbmUsRUFBQUEsRUFBQUEsWUFBQUEsRUFBQUEsZ0JBQUw3QixFQUFBQSxFQUFBQSxPQUFBQSxFQUFBQSxXQUFUblgsRUFBQUEsRUFBQUEsV0FBQUEsRUFBQUEsZUFBUkEsVUFBQUEsWUNGUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQVNtWCxHQUFBQSxJQUFBQSxTQUFBQSxHQUFNUSxHQUFBQSxJQUFBQSxTQUFBQSxHQWExQjJmLFFBQUFBLEdBQW1CQSxFQUFlQSxFQUEyQkEsRUFBNkJBLEVBQWdDQSxFQUFjQSxHQUNwSUMsR0FBSUEsR0FBYUEsRUFBTUEsVUFDdkJBLEtBQUtBLEdBQWNBLEVBQVdBLGdCQUMxQkEsT0FBT0EsQ0FDWEEsSUFBSUEsR0FBVUEsRUFBTUEsT0FDcEJBLElBQUlBLEVBQUFBLEtBQUtBLFFBQVFBLEdBQ2JBLE9BQU9BLENBRVhBLEdBQUlBLE9BQ0pBLEVBQUFBLEtBQUtBLFFBQVFBLGlCQUFpQkEsRUFBS0EsRUFBT0EsRUFFMUNBLElBQUlBLEdBQU1BLEVBQUlBLEdBTWRBLE9BTEFBLEdBQUlBLFlBQ0pBLEVBQUlBLEtBQUtBLEVBQVFBLEVBQUdBLEVBQVFBLEVBQUdBLEVBQVFBLE1BQU9BLEVBQVFBLFFBQ3REQSxFQUFJQSxPQUFPQSxFQUFZQSxHQUV2QkEsRUFBSUEsV0FDR0EsRUF4QlhELEdBQUFBLEdBQUFBLFNBQUFBLEdBQ0lFLFFBQUFBLEtBQ0lDLEVBQUFBLEtBQUFBLE1BQ0FBLEtBQUtBLGFBQWFBLFdBQVlBLEdBRXRDRCxNQUx3Q0EsV0FBQUEsRUFBQUEsR0FLeENBLEdBTHdDRixFQUFBQSxLQUFLQSxPQUFPQSxjQUF2Q0EsR0FBQUEsbUJBQWtCQSxHQU5MM2YsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBTlIsRUFBQUEsRUFBQUEsUUFBQUEsRUFBQUEsWUFBVG5YLEVBQUFBLEVBQUFBLFdBQUFBLEVBQUFBLGVBQVJBLFVBQUFBLFlDRVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFTbVgsR0FBQUEsSUFBQUEsU0FBQUEsR0FBSzZCLEdBQUFBLElBQUFBLFNBQUFBLEdBWXpCMGUsR0FBQUEsR0FBQUEsU0FBQUEsR0FDSUMsUUFBQUEsS0FDSUMsRUFBQUEsS0FBQUEsTUFDQUEsS0FBS0EsY0FBY0EsV0FBWUEsa0JBQW1CQSxFQUFPQSxpQkFRakVELE1BWHVDQSxXQUFBQSxFQUFBQSxHQU1uQ0EsRUFBQUEsVUFBQUEsWUFBQUEsV0FDSUUsR0FBSUEsR0FBZ0JBLEVBQUFBLFVBQU1BLFlBQVdBLEtBQUFBLEtBRXJDQSxPQURBQSxHQUFNQSxVQUFZQSxHQUFJQSxHQUFBQSxLQUNmQSxHQUVmRixHQVh1Q0QsRUFBQUEsTUFBTUEsT0FBT0EsbUJBQXZDQSxHQUFBQSxrQkFBaUJBLENBYTlCQSxJQUFjQSxJQUFkQSxTQUFjQSxHQUNWSSxRQUFBQSxHQUFpQ0EsRUFBZUEsRUFBZUEsRUFBNkJBLEVBQWdDQSxFQUFjQSxHQUN0SUMsSUFBS0EsRUFBTUEsY0FDUEEsT0FBT0EsQ0FFWEEsSUFBSUEsR0FBWUEsRUFBTUEsU0FDdEJBLEdBQVVBLE1BQVFBLEVBQU1BLFlBQ3hCQSxFQUFVQSxPQUFTQSxFQUFNQSxhQUN6QkEsRUFBQUEsS0FBS0EsUUFBUUEsV0FBV0EsRUFBV0EsRUFFbkNBLElBQUlBLEdBQU1BLEVBQUlBLEdBQ2RBLEdBQUlBLE1BRUpBLEtBQUtBLEdBQUlBLEdBQU9BLEVBQU1BLGtCQUFtQkEsRUFBSUEsRUFBR0EsRUFBSUEsRUFBR0EsRUFBSUEsRUFBS0EsT0FBUUEsSUFDcEVBLEdBQUtBLEVBQUtBLEdBQUdBLFlBQ2JBLEVBQUlBLFlBQ0pBLEVBQUlBLGFBQWFBLElBQ2pCQSxFQUFJQSxPQUFPQSxFQUFHQSxHQUNkQSxFQUFJQSxPQUFPQSxFQUFHQSxFQUFVQSxRQUN4QkEsRUFBSUEsUUFHUkEsS0FBS0EsR0FBSUEsR0FBT0EsRUFBTUEsZUFBZ0JBLEVBQUlBLEVBQUdBLEVBQUlBLEVBQUdBLEVBQUlBLEVBQUtBLE9BQVFBLElBQ2pFQSxHQUFLQSxFQUFLQSxHQUFHQSxhQUNiQSxFQUFJQSxZQUNKQSxFQUFJQSxhQUFhQSxJQUNqQkEsRUFBSUEsT0FBT0EsRUFBR0EsR0FDZEEsRUFBSUEsT0FBT0EsRUFBVUEsTUFBT0EsR0FDNUJBLEVBQUlBLFFBS1JBLE9BRkFBLEdBQUlBLFdBRUdBLEVBaENLRCxFQUFBQSxnQkFBZUEsR0FEckJKLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBekJXMWUsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBTDdCLEVBQUFBLEVBQUFBLE9BQUFBLEVBQUFBLFdBQVRuWCxFQUFBQSxFQUFBQSxXQUFBQSxFQUFBQSxlQUFSQSxVQUFBQSxZQ0ZQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBU21YLEdBQUFBLElBQUFBLFNBQUFBLEdBQU04QyxHQUFBQSxJQUFBQSxTQUFBQSxHQVcxQitkLEdBQUFBLEdBQUFBLFNBQUFBLEdBQ0lDLFFBQUFBLEtBQ0lDLEVBQUFBLEtBQUFBLE1BQ0FBLEtBQUtBLGNBQWNBLG1CQUFvQkEsb0JBQXFCQSxFQUFBQSxPQUFPQSxtQkFDOURBLGVBQWVBLGFBQWNBLGtCQUFtQkEsRUFBQUEsT0FBT0EsaUJBQ3ZEQSxlQUFlQSxhQUFjQSxjQUFlQSxFQUFBQSxPQUFPQSxhQUNuREEsYUFBYUEsYUFBY0EsRUFBQUEsT0FBT0EsWUFVL0NELE1BaEJ5Q0EsV0FBQUEsRUFBQUEsR0FTckNBLEVBQUFBLFVBQUFBLFlBQUFBLFdBQ0lFLEdBQUlBLEdBQWdCQSxFQUFBQSxVQUFNQSxZQUFXQSxLQUFBQSxLQUlyQ0EsT0FIQUEsR0FBTUEsWUFBY0EsR0FBSUEsR0FBQUEsS0FDeEJBLEVBQU1BLFNBQVdBLEVBQ2pCQSxFQUFNQSxTQUFXQSxFQUNWQSxHQUVmRixHQWhCeUNELEVBQUFBLEtBQUtBLFFBQVFBLGVBQXpDQSxHQUFBQSxvQkFBbUJBLEdBWE4vZCxFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQUFOOUMsRUFBQUEsRUFBQUEsUUFBQUEsRUFBQUEsWUFBVG5YLEVBQUFBLEVBQUFBLFdBQUFBLEVBQUFBLGVBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFTbVgsR0FBQUEsSUFBQUEsU0FBQUEsR0FBTThDLEdBQUFBLElBQUFBLFNBQUFBLEdBTTFCbWUsR0FBQUEsR0FBQUEsU0FBQUEsR0FDSUMsUUFBQUEsS0FDSUMsRUFBQUEsS0FBQUEsTUFDQUEsS0FBS0EsYUFBYUEsaUJBQWtCQSxFQUFBQSxPQUFPQSxnQkFDdENBLGFBQWFBLGVBQWdCQSxFQUFBQSxPQUFPQSxjQUNwQ0EsY0FBY0EsZUFBZ0JBLGdCQUFpQkEsRUFBQUEsT0FBT0EsZUFNbkVELE1BWHlDQSxXQUFBQSxFQUFBQSxHQVFyQ0EsRUFBQUEsVUFBQUEsUUFBQUEsU0FBU0EsR0FDTEUsRUFBS0EsUUFBVUEsRUFBS0EsU0FBV0EsR0FBSUEsR0FBQUEsTUFFM0NGLEdBWHlDRCxFQUFBQSxLQUFLQSxRQUFRQSxlQUF6Q0EsR0FBQUEsb0JBQW1CQSxHQU5ObmUsRUFBQUEsRUFBQUEsVUFBQUEsRUFBQUEsY0FBTjlDLEVBQUFBLEVBQUFBLFFBQUFBLEVBQUFBLFlBQVRuWCxFQUFBQSxFQUFBQSxXQUFBQSxFQUFBQSxlQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBU21YLEdBQUFBLElBQUFBLFNBQUFBLEdBQU04QyxHQUFBQSxJQUFBQSxTQUFBQSxHQVcxQnVlLEdBQUFBLEdBQUFBLFNBQUFBLEdBQ0lDLFFBQUFBLEtBQ0lDLEVBQUFBLEtBQUFBLE1BQ0FBLEtBQUtBLGVBQWVBLGFBQWNBLGtCQUFtQkEsRUFBQUEsT0FBT0EsaUJBQ3ZEQSxlQUFlQSxhQUFjQSxjQUFlQSxFQUFBQSxPQUFPQSxhQUNuREEsYUFBYUEsYUFBY0EsRUFBQUEsT0FBT0EsWUFVL0NELE1BZnlDQSxXQUFBQSxFQUFBQSxHQVFyQ0EsRUFBQUEsVUFBQUEsWUFBQUEsV0FDSUUsR0FBSUEsR0FBZ0JBLEVBQUFBLFVBQU1BLFlBQVdBLEtBQUFBLEtBSXJDQSxPQUhBQSxHQUFNQSxZQUFjQSxHQUFJQSxHQUFBQSxLQUN4QkEsRUFBTUEsU0FBV0EsRUFDakJBLEVBQU1BLFNBQVdBLEVBQ1ZBLEdBRWZGLEdBZnlDRCxFQUFBQSxLQUFLQSxRQUFRQSxlQUF6Q0EsR0FBQUEsb0JBQW1CQSxHQVhOdmUsRUFBQUEsRUFBQUEsVUFBQUEsRUFBQUEsY0FBTjlDLEVBQUFBLEVBQUFBLFFBQUFBLEVBQUFBLFlBQVRuWCxFQUFBQSxFQUFBQSxXQUFBQSxFQUFBQSxlQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBU21YLEdBQUFBLElBQUFBLFNBQUFBLEdBQU04QyxHQUFBQSxJQUFBQSxTQUFBQSxHQW1CMUIyZSxHQUFBQSxHQUFBQSxTQUFBQSxHQUNJQyxRQUFBQSxLQUNJQyxFQUFBQSxLQUFBQSxNQUVBQSxLQUFLQSxlQUFlQSxvQkFBcUJBLHdCQUF5QkEsRUFBQUEsT0FBT0EsdUJBQ3BFQSxjQUFjQSx3QkFBeUJBLHNCQUF1QkEsRUFBQUEsT0FBT0EscUJBQ3JFQSxjQUFjQSxzQkFBdUJBLHFCQUFzQkEsRUFBQUEsT0FBT0Esb0JBQ2xFQSxjQUFjQSxxQkFBc0JBLGNBQWVBLEVBQUFBLE9BQU9BLGFBOEJ2RUQsTUFyQzZDQSxXQUFBQSxFQUFBQSxHQVV6Q0EsRUFBQUEsVUFBQUEsWUFBQUEsV0FDSUUsR0FBSUEsR0FBZ0JBLEVBQUFBLFVBQU1BLFlBQVdBLEtBQUFBLEtBS3JDQSxPQUpBQSxHQUFNQSxRQUFVQSxHQUFJQSxHQUFBQSxLQUNwQkEsRUFBTUEsVUFBWUEsR0FBSUEsR0FBQUEsS0FDdEJBLEVBQU1BLGtCQUFtQkEsRUFDekJBLEVBQU1BLFdBQVlBLEVBQ1hBLEdBR1hGLEVBQUFBLFVBQUFBLGFBQUFBLFdBQ0lHLEdBQUlBLEdBQWtCQSxFQUFBQSxVQUFNQSxhQUFZQSxLQUFBQSxLQUd4Q0EsT0FGQUEsR0FBT0EsU0FBV0EsRUFBQUEsS0FBS0EsV0FDdkJBLEVBQU9BLFFBQVVBLEVBQUFBLFlBQVlBLEdBQ3RCQSxHQUdYSCxFQUFBQSxVQUFBQSxRQUFBQSxTQUFTQSxFQUFlQSxFQUFlQSxFQUFpQkEsRUFBaUJBLEdBQ3JFSSxFQUFBQSxVQUFNQSxRQUFPQSxLQUFBQSxLQUFDQSxFQUFPQSxFQUFPQSxFQUFRQSxFQUFTQSxHQUM3Q0EsRUFBT0EsUUFBVUEsRUFBTUEsUUFDdkJBLEVBQUFBLEtBQUtBLE9BQU9BLEVBQU1BLFNBQVVBLEVBQU9BLFdBR3ZDSixFQUFBQSxVQUFBQSxNQUFBQSxTQUFPQSxFQUFlQSxFQUFlQSxFQUFpQkEsRUFBaUJBLEdBQ25FSyxFQUFBQSxVQUFNQSxNQUFLQSxLQUFBQSxLQUFDQSxFQUFPQSxFQUFPQSxFQUFRQSxFQUFTQSxHQUMzQ0EsRUFBTUEsUUFBVUEsRUFBT0EsUUFDdkJBLEVBQUFBLEtBQUtBLE9BQU9BLEVBQU9BLFNBQVVBLEVBQU1BLFdBRTNDTCxHQXJDNkNELEVBQUFBLEtBQUtBLFlBQVlBLG1CQUFqREEsR0FBQUEsd0JBQXVCQSxHQW5CVjNlLEVBQUFBLEVBQUFBLGNBQUFBLEVBQUFBLGtCQUFOOUMsRUFBQUEsRUFBQUEsUUFBQUEsRUFBQUEsWUFBVG5YLEVBQUFBLEVBQUFBLFdBQUFBLEVBQUFBLGVBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFTbVgsR0FBQUEsSUFBQUEsU0FBQUEsR0FBTThDLEdBQUFBLElBQUFBLFNBQUFBLEdBUzFCa2YsR0FBQUEsR0FBQUEsU0FBQUEsR0FDSUMsUUFBQUEsS0FDSUMsRUFBQUEsS0FBQUEsTUFDQUEsS0FBS0EsYUFBYUEsV0FBWUEsRUFBQUEsT0FBT0EsVUFFN0NELE1BTHdDQSxXQUFBQSxFQUFBQSxHQUt4Q0EsR0FMd0NELEVBQUFBLEtBQUtBLE9BQU9BLGNBQXZDQSxHQUFBQSxtQkFBa0JBLEdBVExsZixFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFOOUMsRUFBQUEsRUFBQUEsUUFBQUEsRUFBQUEsWUFBVG5YLEVBQUFBLEVBQUFBLFdBQUFBLEVBQUFBLGVBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFTbVgsR0FBQUEsSUFBQUEsU0FBQUEsR0FBUW1ELEdBQUFBLElBQUFBLFNBQUFBLEdBSzVCZ2YsR0FBQUEsR0FBQUEsU0FBQUEsR0FDSUMsUUFBQUEsS0FDSUMsRUFBQUEsS0FBQUEsTUFDQUEsS0FBS0EsZUFBZUEsU0FBVUEsYUFBY0EsRUFBT0EsWUFFM0RELE1BTDJDQSxXQUFBQSxFQUFBQSxHQUszQ0EsR0FMMkNELEVBQUFBLEtBQUtBLFFBQVFBLGVBQTNDQSxHQUFBQSxzQkFBcUJBLENBT2xDQSxJQUFjQSxJQUFkQSxTQUFjQSxHQUNWRyxRQUFBQSxHQUE0QkEsRUFBb0JBLEVBQVlBLEVBQXlCQSxHQUNqRkMsUUFBU0EsRUFBS0EsT0FBT0EsVUFEVEQsRUFBQUEsV0FBVUEsR0FEaEJILEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBWmNoZixFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQUFSbkQsRUFBQUEsRUFBQUEsVUFBQUEsRUFBQUEsY0FBVG5YLEVBQUFBLEVBQUFBLFdBQUFBLEVBQUFBLGVBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFTbVgsR0FBQUEsSUFBQUEsU0FBQUEsR0FBUW1ELEdBQUFBLElBQUFBLFNBQUFBLEdBQzVCcWYsR0FBQUEsR0FBQUEsU0FBQUEsR0FDSUMsUUFBQUEsS0FDSUMsRUFBQUEsS0FBQUEsTUFDQUEsS0FBS0EsWUFBWUEsa0JBQ1pBLFlBQVlBLGVBQ1pBLFlBQVlBLG1CQUV6QkQsTUFQNkNBLFdBQUFBLEVBQUFBLEdBTzdDQSxHQVA2Q0QsRUFBQUEsS0FBS0EsVUFBVUEsaUJBQS9DQSxHQUFBQSx3QkFBdUJBLEdBRFJyZixFQUFBQSxFQUFBQSxZQUFBQSxFQUFBQSxnQkFBUm5ELEVBQUFBLEVBQUFBLFVBQUFBLEVBQUFBLGNBQVRuWCxFQUFBQSxFQUFBQSxXQUFBQSxFQUFBQSxlQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBU21YLEdBQUFBLElBQUFBLFNBQUFBLEdBQU1RLEdBQUFBLElBQUFBLFNBQUFBLEdBSzFCbWlCLEdBQUFBLEdBQUFBLFNBQUFBLEdBQ0lDLFFBQUFBLEtBQ0lDLEVBQUFBLEtBQUFBLE1BQ0FBLEtBQUtBLGFBQWFBLGVBQWdCQSxFQUFPQSxjQUVqREQsTUFMeUNBLFdBQUFBLEVBQUFBLEdBS3pDQSxHQUx5Q0QsRUFBQUEsS0FBS0EsUUFBUUEsZUFBekNBLEdBQUFBLG9CQUFtQkEsQ0FPaENBLElBQWNBLElBQWRBLFNBQWNBLEdBQ1ZHLFFBQUFBLEdBQThCQSxFQUFvQkEsRUFBWUEsRUFBeUJBLEdBQ25GQyxNQUFJQSxHQUFLQSxhQUNFQSxFQUVOQSxFQUFLQSxPQUFPQSxZQUtWQSxHQUpIQSxFQUFRQSxRQUNSQSxFQUFJQSxXQUNHQSxHQVBDRCxFQUFBQSxhQUFZQSxHQURsQkgsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFaWW5pQixFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQUFOUixFQUFBQSxFQUFBQSxRQUFBQSxFQUFBQSxZQUFUblgsRUFBQUEsRUFBQUEsV0FBQUEsRUFBQUEsZUFBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQVNtWCxHQUFBQSxJQUFBQSxTQUFBQSxHQUFNMkUsR0FBQUEsSUFBQUEsU0FBQUEsR0FLMUJxZSxHQUFBQSxHQUFBQSxTQUFBQSxHQUNJQyxRQUFBQSxLQUNJQyxFQUFBQSxLQUFBQSxNQUNBQSxLQUFLQSxlQUFlQSxTQUFVQSxhQUFjQSxFQUFPQSxZQUUzREQsTUFMeUNBLFdBQUFBLEVBQUFBLEdBS3pDQSxHQUx5Q0QsRUFBQUEsS0FBS0EsUUFBUUEsZUFBekNBLEdBQUFBLG9CQUFtQkEsQ0FPaENBLElBQWNBLElBQWRBLFNBQWNBLEdBQ1ZHLFFBQUFBLEdBQTRCQSxFQUFvQkEsRUFBWUEsRUFBeUJBLEdBQ2pGQyxRQUFTQSxFQUFLQSxPQUFPQSxVQURURCxFQUFBQSxXQUFVQSxHQURoQkgsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFaWXJlLEVBQUFBLEVBQUFBLFVBQUFBLEVBQUFBLGNBQU4zRSxFQUFBQSxFQUFBQSxRQUFBQSxFQUFBQSxZQUFUblgsRUFBQUEsRUFBQUEsV0FBQUEsRUFBQUEsZUFBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQVNtWCxHQUFBQSxJQUFBQSxTQUFBQSxHQUFNMkUsR0FBQUEsSUFBQUEsU0FBQUEsR0FNMUIwZSxHQUFBQSxHQUFBQSxTQUFBQSxHQUNJQyxRQUFBQSxLQUNJQyxFQUFBQSxLQUFBQSxNQUNBQSxLQUFLQSxlQUFlQSxlQUFnQkEsa0JBQW1CQSxFQUFBQSxPQUFPQSxpQkFDekRBLGNBQWNBLGVBQWdCQSxtQkFBb0JBLEVBQUFBLE9BQU9BLGtCQUV0RUQsTUFONkNBLFdBQUFBLEVBQUFBLEdBTTdDQSxHQU42Q0QsRUFBQUEsS0FBS0EsWUFBWUEsbUJBQWpEQSxHQUFBQSx3QkFBdUJBLEdBTlYxZSxFQUFBQSxFQUFBQSxjQUFBQSxFQUFBQSxrQkFBTjNFLEVBQUFBLEVBQUFBLFFBQUFBLEVBQUFBLFlBQVRuWCxFQUFBQSxFQUFBQSxXQUFBQSxFQUFBQSxlQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBU21YLEdBQUFBLElBQUFBLFNBQUFBLEdBQU0yRSxHQUFBQSxJQUFBQSxTQUFBQSxHQUMxQjZlLEdBQUFBLEdBQUFBLFNBQUFBLEdBQ0lDLFFBQUFBLEtBQ0lDLEVBQUFBLEtBQUFBLE1BQ0FBLEtBQUtBLFlBQVlBLGtCQUNaQSxZQUFZQSxlQUNaQSxZQUFZQSxtQkFFekJELE1BUDJDQSxXQUFBQSxFQUFBQSxHQU8zQ0EsR0FQMkNELEVBQUFBLEtBQUtBLFVBQVVBLGlCQUE3Q0EsR0FBQUEsc0JBQXFCQSxHQURSN2UsRUFBQUEsRUFBQUEsWUFBQUEsRUFBQUEsZ0JBQU4zRSxFQUFBQSxFQUFBQSxRQUFBQSxFQUFBQSxZQUFUblgsRUFBQUEsRUFBQUEsV0FBQUEsRUFBQUEsZUFBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQVNtWCxHQUFBQSxJQUFBQSxTQUFBQSxHQUF1QjJGLEdBQUFBLElBQUFBLFNBQUFBLEdBWTNDZ2UsR0FBQUEsR0FBQUEsU0FBQUEsR0FDSUMsUUFBQUEsS0FDSUMsRUFBQUEsS0FBQUEsTUFDQUEsS0FBS0EsYUFBYUEsYUFBY0EsRUFBQUEsT0FBT0EsWUFDbENBLGNBQWNBLG1CQUFvQkEsYUFBY0EsRUFBQUEsT0FBT0EsWUFDdkRBLGNBQWNBLGFBQWNBLGdCQUFpQkEsRUFBQUEsT0FBT0EsZUFrQmpFRCxNQXZCMERBLFdBQUFBLEVBQUFBLEdBUXREQSxFQUFBQSxVQUFBQSxhQUFBQSxXQUNJRSxHQUFJQSxHQUFrQkEsRUFBQUEsVUFBTUEsYUFBWUEsS0FBQUEsS0FFeENBLE9BREFBLEdBQU9BLGFBQWVBLEdBQUlBLEdBQUFBLEtBQ25CQSxHQUdYRixFQUFBQSxVQUFBQSxRQUFBQSxTQUFTQSxFQUFlQSxFQUFlQSxHQUNuQ0csRUFBQUEsS0FBS0EsT0FBT0EsRUFBTUEsYUFBY0EsRUFBT0EsY0FDdkNBLEVBQUFBLFVBQU1BLFFBQU9BLEtBQUFBLEtBQUNBLEVBQU9BLEVBQU9BLElBR2hDSCxFQUFBQSxVQUFBQSxNQUFBQSxTQUFPQSxFQUFlQSxFQUFlQSxHQUNqQ0ksRUFBQUEsVUFBTUEsTUFBS0EsS0FBQUEsS0FBQ0EsRUFBT0EsRUFBT0EsR0FDMUJBLEVBQUFBLEtBQUtBLE9BQU9BLEVBQU9BLGFBQWNBLEVBQU1BLGVBRS9DSixHQXZCMERELEVBQUFBLEtBQUtBLFFBQVFBLGVBQTFEQSxHQUFBQSxxQ0FBb0NBLEdBWk5oZSxFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQUF2QjNGLEVBQUFBLEVBQUFBLHlCQUFBQSxFQUFBQSw2QkFBVG5YLEVBQUFBLEVBQUFBLFdBQUFBLEVBQUFBLGVBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFTbVgsR0FBQUEsSUFBQUEsU0FBQUEsR0FBdUIyRixHQUFBQSxJQUFBQSxTQUFBQSxHQVEzQ3NlLEdBQUFBLEdBQUFBLFNBQUFBLEdBQ0lDLFFBQUFBLEtBQ0lDLEVBQUFBLEtBQUFBLE1BQ0FBLEtBQUtBLGFBQWFBLGFBQWNBLEVBQUFBLE9BQU9BLFlBQ2xDQSxjQUFjQSxhQUFjQSxnQkFBaUJBLEVBQUFBLE9BQU9BLGVBQ3BEQSxjQUFjQSxnQkFBaUJBLG1CQUFvQkEsRUFBQUEsT0FBT0Esa0JBUXZFRCxNQWIwREEsV0FBQUEsRUFBQUEsR0FRdERBLEVBQUFBLFVBQUFBLFlBQUFBLFdBQ0lFLEdBQUlBLEdBQWdCQSxFQUFBQSxVQUFNQSxZQUFXQSxLQUFBQSxLQUVyQ0EsT0FEQUEsR0FBTUEsVUFBWUEsR0FBSUEsR0FBQUEsS0FDZkEsR0FFZkYsR0FiMERELEVBQUFBLEtBQUtBLFFBQVFBLGVBQTFEQSxHQUFBQSxxQ0FBb0NBLEdBUk50ZSxFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQUF2QjNGLEVBQUFBLEVBQUFBLHlCQUFBQSxFQUFBQSw2QkFBVG5YLEVBQUFBLEVBQUFBLFdBQUFBLEVBQUFBLGVBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFTbVgsR0FBQUEsSUFBQUEsU0FBQUEsR0FBdUIyRixHQUFBQSxJQUFBQSxTQUFBQSxHQUszQzBlLEdBQUFBLEdBQUFBLFNBQUFBLEdBQ0lDLFFBQUFBLEtBQ0lDLEVBQUFBLEtBQUFBLE1BQ0FBLEtBQUtBLGNBQWNBLFlBQWFBLG9CQUFxQkEsRUFBT0EsbUJBRXBFRCxNQUx5REEsV0FBQUEsRUFBQUEsR0FLekRBLEdBTHlERCxFQUFBQSxLQUFLQSxPQUFPQSxjQUF4REEsR0FBQUEsb0NBQW1DQSxDQU9oREEsSUFBY0EsSUFBZEEsU0FBY0EsR0FDVkcsUUFBQUEsR0FBbUNBLEVBQWVBLEVBQTJCQSxFQUE2QkEsRUFBZ0NBLEVBQWNBLEdBQ3BKQyxNQUFJQSxHQUFBQSxLQUFLQSxRQUFRQSxFQUFNQSxlQUNaQSxHQUNYQSxFQUFJQSxTQUFTQSxFQUFNQSxlQUNaQSxHQUpLRCxFQUFBQSxrQkFBaUJBLEdBRHZCSCxFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQVo2QjFlLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQXZCM0YsRUFBQUEsRUFBQUEseUJBQUFBLEVBQUFBLDZCQUFUblgsRUFBQUEsRUFBQUEsV0FBQUEsRUFBQUEsZUFBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQVNtWCxHQUFBQSxJQUFBQSxTQUFBQSxHQUFXb0csR0FBQUEsSUFBQUEsU0FBQUEsR0FTL0JzZSxHQUFBQSxHQUFBQSxTQUFBQSxHQUNJQyxRQUFBQSxLQUNJQyxFQUFBQSxLQUFBQSxNQUNBQSxLQUFLQSxhQUFhQSxhQUFjQSxFQUFBQSxPQUFPQSxZQUNsQ0EsY0FBY0EsYUFBY0EsZUFBZ0JBLEVBQUFBLE9BQU9BLGNBQ25EQSxjQUFjQSxhQUFjQSxhQUFjQSxFQUFBQSxPQUFPQSxZQUU5REQsTUFQOENBLFdBQUFBLEVBQUFBLEdBTzlDQSxHQVA4Q0QsRUFBQUEsTUFBTUEsUUFBUUEsb0JBQS9DQSxHQUFBQSx5QkFBd0JBLEdBVE50ZSxFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQUFYcEcsRUFBQUEsRUFBQUEsYUFBQUEsRUFBQUEsaUJBQVRuWCxFQUFBQSxFQUFBQSxXQUFBQSxFQUFBQSxlQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBU21YLEdBQUFBLElBQUFBLFNBQUFBLEdBQVdvRyxHQUFBQSxJQUFBQSxTQUFBQSxHQVUvQnllLEdBQUFBLEdBQUFBLFNBQUFBLEdBQ0lDLFFBQUFBLEtBQ0lDLEVBQUFBLEtBQUFBLE1BQ0FBLEtBQUtBLGFBQWFBLGFBQWNBLEVBQUFBLE9BQU9BLFlBQ2xDQSxjQUFjQSxhQUFjQSxlQUFnQkEsRUFBQUEsT0FBT0EsY0FDbkRBLGNBQWNBLGFBQWNBLGFBQWNBLEVBQUFBLE9BQU9BLFlBUTlERCxNQWI4Q0EsV0FBQUEsRUFBQUEsR0FRMUNBLEVBQUFBLFVBQUFBLFlBQUFBLFdBQ0lFLEdBQUlBLEdBQWdCQSxFQUFBQSxVQUFNQSxZQUFXQSxLQUFBQSxLQUVyQ0EsT0FEQUEsR0FBTUEsZUFBaUJBLEdBQUlBLEdBQUFBLEtBQ3BCQSxHQUVmRixHQWI4Q0QsRUFBQUEsTUFBTUEsUUFBUUEsb0JBQS9DQSxHQUFBQSx5QkFBd0JBLEdBVk56ZSxFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQUFYcEcsRUFBQUEsRUFBQUEsYUFBQUEsRUFBQUEsaUJBQVRuWCxFQUFBQSxFQUFBQSxXQUFBQSxFQUFBQSxlQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBU21YLEdBQUFBLElBQUFBLFNBQUFBLEdBQVV3RyxHQUFBQSxJQUFBQSxTQUFBQSxHQUs5QnllLEdBQUFBLEdBQUFBLFNBQUFBLEdBQ0lDLFFBQUFBLEtBQ0lDLEVBQUFBLEtBQUFBLE1BQ0FBLEtBQUtBLGFBQWFBLGFBQWNBLEVBQU9BLFlBRS9DRCxNQUw2Q0EsV0FBQUEsRUFBQUEsR0FLN0NBLEdBTDZDRCxFQUFBQSxLQUFLQSxRQUFRQSxlQUE3Q0EsR0FBQUEsd0JBQXVCQSxDQU9wQ0EsSUFBY0EsSUFBZEEsU0FBY0EsR0FDVkcsUUFBQUEsR0FBMkJBLEVBQWVBLEVBQTRCQSxFQUE4QkEsRUFBNEJBLEdBQzVIQyxHQUFJQSxHQUFLQSxFQUFNQSxVQUNYQSxFQUFLQSxFQUFNQSxZQVNmQSxPQVBBQSxHQUFBQSxVQUFVQSxXQUFXQSxFQUFNQSxRQUFTQSxHQUNwQ0EsRUFBQUEsS0FBS0EsT0FBT0EsRUFBS0EsT0FBT0EsRUFBSUEsR0FBUUEsR0FDcENBLEVBQUdBLE1BQVFBLEtBQUtBLElBQUlBLEVBQUdBLE1BQU9BLEVBQUdBLE9BQ2pDQSxFQUFHQSxPQUFTQSxLQUFLQSxJQUFJQSxFQUFHQSxPQUFRQSxFQUFHQSxRQUNuQ0EsRUFBS0Esa0JBQWtCQSxFQUFHQSxPQUMxQkEsRUFBQUEsVUFBVUEsU0FBU0EsRUFBTUEsUUFBU0EsSUFFM0JBLEVBWEtELEVBQUFBLFdBQVVBLEdBRGhCSCxFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQVpnQnplLEVBQUFBLEVBQUFBLFVBQUFBLEVBQUFBLGNBQVZ4RyxFQUFBQSxFQUFBQSxZQUFBQSxFQUFBQSxnQkFBVG5YLEVBQUFBLEVBQUFBLFdBQUFBLEVBQUFBLGVBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFTbVgsR0FBQUEsSUFBQUEsU0FBQUEsR0FBVXdHLEdBQUFBLElBQUFBLFNBQUFBLEdBSzlCOGUsR0FBQUEsR0FBQUEsU0FBQUEsR0FDSUMsUUFBQUEsS0FDSUMsRUFBQUEsS0FBQUEsTUFDQUEsS0FBS0EsYUFBYUEsZUFBZ0JBLEVBQU9BLGNBRWpERCxNQUw2Q0EsV0FBQUEsRUFBQUEsR0FLN0NBLEdBTDZDRCxFQUFBQSxLQUFLQSxRQUFRQSxlQUE3Q0EsR0FBQUEsd0JBQXVCQSxDQU9wQ0EsSUFBY0EsSUFBZEEsU0FBY0EsR0FDVkcsUUFBQUEsR0FBOEJBLEVBQW9CQSxFQUFZQSxFQUF5QkEsR0FDbkZDLE9BQU9BLEVBREtELEVBQUFBLGFBQVlBLEdBRGxCSCxFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQVpnQjllLEVBQUFBLEVBQUFBLFVBQUFBLEVBQUFBLGNBQVZ4RyxFQUFBQSxFQUFBQSxZQUFBQSxFQUFBQSxnQkFBVG5YLEVBQUFBLEVBQUFBLFdBQUFBLEVBQUFBLGVBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFTbVgsR0FBQUEsSUFBQUEsU0FBQUEsR0FBVXdHLEdBQUFBLElBQUFBLFNBQUFBLEdBSzlCbWYsR0FBQUEsR0FBQUEsU0FBQUEsR0FDSUMsUUFBQUEsS0FDSUMsRUFBQUEsS0FBQUEsTUFDQUEsS0FBS0EsYUFBYUEsYUFBY0EsRUFBT0EsWUFFL0NELE1BTDZDQSxXQUFBQSxFQUFBQSxHQUs3Q0EsR0FMNkNELEVBQUFBLEtBQUtBLFFBQVFBLGVBQTdDQSxHQUFBQSx3QkFBdUJBLENBT3BDQSxJQUFjQSxJQUFkQSxTQUFjQSxHQUNWRyxRQUFBQSxHQUEyQkEsRUFBZUEsRUFBNEJBLEVBQThCQSxFQUE0QkEsR0FDNUhDLEdBQUlBLEdBQUtBLEVBQU9BLFdBT2hCQSxPQUxBQSxHQUFBQSxVQUFVQSxXQUFXQSxFQUFNQSxRQUFTQSxFQUFNQSxlQUMxQ0EsRUFBS0EsWUFBWUEsRUFBTUEsY0FBY0EsTUFBT0EsR0FDNUNBLEVBQUFBLEtBQUtBLE9BQU9BLEVBQUtBLE9BQU9BLEVBQU1BLGNBQWVBLEdBQVFBLEdBQ3JEQSxFQUFBQSxVQUFVQSxTQUFTQSxFQUFNQSxRQUFTQSxJQUUzQkEsRUFSS0QsRUFBQUEsV0FBVUEsR0FEaEJILEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBWmdCbmYsRUFBQUEsRUFBQUEsVUFBQUEsRUFBQUEsY0FBVnhHLEVBQUFBLEVBQUFBLFlBQUFBLEVBQUFBLGdCQUFUblgsRUFBQUEsRUFBQUEsV0FBQUEsRUFBQUEsZUFBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQVNtWCxHQUFBQSxJQUFBQSxTQUFBQSxHQUFVd0csR0FBQUEsSUFBQUEsU0FBQUEsR0FLOUJ3ZixHQUFBQSxHQUFBQSxTQUFBQSxHQUNJQyxRQUFBQSxLQUNJQyxFQUFBQSxLQUFBQSxNQUNBQSxLQUFLQSxhQUFhQSxpQkFBa0JBLEVBQU9BLGdCQUN0Q0EsYUFBYUEsY0FBZUEsRUFBT0EsYUFFaERELE1BTitDQSxXQUFBQSxFQUFBQSxHQU0vQ0EsR0FOK0NELEVBQUFBLEtBQUtBLFVBQVVBLGlCQUFqREEsR0FBQUEsMEJBQXlCQSxDQVF0Q0EsSUFBY0EsSUFBZEEsU0FBY0EsR0FDVkcsUUFBQUEsR0FBZ0NBLEVBQWVBLEVBQThCQSxFQUFnQ0EsR0FDekdDLEdBQStDQSxLQUExQ0EsRUFBTUEsV0FBYUEsRUFBQUEsV0FBV0EsUUFDL0JBLE9BQU9BLENBRVhBLElBQUlBLEdBQVNBLEVBQU1BLFVBU25CQSxPQVJBQSxHQUFPQSxNQUFRQSxPQUFPQSxrQkFDdEJBLEVBQU9BLE9BQVNBLE9BQU9BLGtCQUN2QkEsRUFBQUEsS0FBS0EsUUFBUUEsV0FBV0EsRUFBUUEsR0FFaENBLEVBQUFBLFVBQVVBLFdBQVdBLEVBQU1BLFFBQVNBLEdBQ3BDQSxFQUFBQSxLQUFLQSxPQUFPQSxFQUFLQSxPQUFPQSxFQUFRQSxHQUFRQSxHQUN4Q0EsRUFBQUEsVUFBVUEsU0FBU0EsRUFBTUEsUUFBU0EsSUFFM0JBLEVBR1hELFFBQUFBLEdBQTZCQSxFQUFlQSxFQUE4QkEsRUFBZ0NBLEdBQ3RHRSxHQUErQ0EsS0FBMUNBLEVBQU1BLFdBQWFBLEVBQUFBLFdBQVdBLFFBQy9CQSxPQUFPQSxDQUVYQSxJQUFJQSxHQUFJQSxFQUFPQSxPQUNmQSxHQUFFQSxFQUFJQSxFQUFLQSxvQkFBb0JBLEdBQy9CQSxFQUFFQSxFQUFJQSxFQUNOQSxFQUFBQSxLQUFLQSxPQUFPQSxFQUFNQSxXQUFZQSxFQUU5QkEsSUFBSUEsR0FBVUEsRUFBTUEsT0FLcEJBLE9BSkFBLEdBQUVBLEdBQUtBLEVBQVFBLEtBQ2ZBLEVBQUVBLEdBQUtBLEVBQVFBLElBQ2ZBLEVBQUFBLEtBQUtBLE9BQU9BLEVBQUdBLEVBQU9BLHNCQUVmQSxFQTlCS0YsRUFBQUEsZUFBY0EsRUFnQmRBLEVBQUFBLFlBQVdBLEdBakJqQkgsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFiZ0J4ZixFQUFBQSxFQUFBQSxZQUFBQSxFQUFBQSxnQkFBVnhHLEVBQUFBLEVBQUFBLFlBQUFBLEVBQUFBLGdCQUFUblgsRUFBQUEsRUFBQUEsV0FBQUEsRUFBQUEsZUFBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQVNtWCxHQUFBQSxJQUFBQSxTQUFBQSxHQUFVd0csR0FBQUEsSUFBQUEsU0FBQUEsR0FLOUI4ZixHQUFBQSxHQUFBQSxTQUFBQSxHQUNJQyxRQUFBQSxLQUNJQyxFQUFBQSxLQUFBQSxNQUNBQSxLQUFLQSxhQUFhQSxXQUFZQSxFQUFPQSxVQUU3Q0QsTUFMNENBLFdBQUFBLEVBQUFBLEdBSzVDQSxHQUw0Q0QsRUFBQUEsS0FBS0EsT0FBT0EsY0FBM0NBLEdBQUFBLHVCQUFzQkEsQ0FPbkNBLElBQWNBLElBQWRBLFNBQWNBLEdBQ1ZHLFFBQUFBLEdBQTBCQSxFQUFlQSxFQUEyQkEsRUFBNkJBLEVBQWdDQSxFQUFjQSxHQUMzSUMsRUFBSUEsT0FDSkEsRUFBQUEsS0FBS0EsUUFBUUEsaUJBQWlCQSxFQUFLQSxFQUFPQSxFQUMxQ0EsSUFBSUEsR0FBVUEsRUFBTUEsT0FLcEJBLE9BSklBLElBQ0FBLEVBQUlBLFVBQVVBLEVBQVFBLEtBQU1BLEVBQVFBLEtBQ3hDQSxFQUFLQSxPQUFPQSxFQUFLQSxHQUNqQkEsRUFBSUEsV0FDR0EsRUFSS0QsRUFBQUEsU0FBUUEsR0FEZEgsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFaZ0I5ZixFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFWeEcsRUFBQUEsRUFBQUEsWUFBQUEsRUFBQUEsZ0JBQVRuWCxFQUFBQSxFQUFBQSxXQUFBQSxFQUFBQSxlQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBU21YLEdBQUFBLElBQUFBLFNBQUFBLEdBQVkySCxHQUFBQSxJQUFBQSxTQUFBQSxHQUloQ2dmLEdBQUFBLEdBQUFBLFNBQUFBLEdBQ0lDLFFBQUFBLEtBQ0lDLEVBQUFBLEtBQUFBLE1BQ0FBLEtBQUtBLGFBQWFBLGFBQWNBLEVBQU9BLFlBRS9DRCxNQUwrQ0EsV0FBQUEsRUFBQUEsR0FLL0NBLEdBTCtDRCxFQUFBQSxLQUFLQSxRQUFRQSxlQUEvQ0EsR0FBQUEsMEJBQXlCQSxDQU90Q0EsSUFBY0EsSUFBZEEsU0FBY0EsR0FDVkcsUUFBQUEsR0FBNEJBLEVBQWVBLEVBQTRCQSxFQUE4QkEsRUFBOEJBLEdBQy9IQyxHQUFJQSxHQUFLQSxFQUFNQSxVQUNYQSxFQUFLQSxFQUFNQSxZQU9mQSxPQUxBQSxHQUFBQSxLQUFLQSxPQUFPQSxFQUFLQSxPQUFPQSxFQUFJQSxHQUFRQSxHQUNwQ0EsRUFBR0EsTUFBUUEsS0FBS0EsSUFBSUEsRUFBR0EsTUFBT0EsRUFBR0EsT0FDakNBLEVBQUdBLE9BQVNBLEtBQUtBLElBQUlBLEVBQUdBLE9BQVFBLEVBQUdBLFFBQ25DQSxFQUFLQSxrQkFBa0JBLEVBQUdBLFFBRW5CQSxFQVRLRCxFQUFBQSxXQUFVQSxHQURoQkgsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFYa0JoZixFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQUFaM0gsRUFBQUEsRUFBQUEsY0FBQUEsRUFBQUEsa0JBQVRuWCxFQUFBQSxFQUFBQSxXQUFBQSxFQUFBQSxlQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBU21YLEdBQUFBLElBQUFBLFNBQUFBLEdBQVkySCxHQUFBQSxJQUFBQSxTQUFBQSxHQUtoQ3FmLEdBQUFBLEdBQUFBLFNBQUFBLEdBQ0lDLFFBQUFBLEtBQ0lDLEVBQUFBLEtBQUFBLE1BQ0FBLEtBQUtBLGFBQWFBLGVBQWdCQSxFQUFPQSxjQUVqREQsTUFMK0NBLFdBQUFBLEVBQUFBLEdBSy9DQSxHQUwrQ0QsRUFBQUEsS0FBS0EsUUFBUUEsZUFBL0NBLEdBQUFBLDBCQUF5QkEsQ0FPdENBLElBQWNBLElBQWRBLFNBQWNBLEdBQ1ZHLFFBQUFBLEdBQThCQSxFQUFvQkEsRUFBWUEsRUFBeUJBLEdBQ25GQyxPQUFPQSxFQURLRCxFQUFBQSxhQUFZQSxHQURsQkgsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFaa0JyZixFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQUFaM0gsRUFBQUEsRUFBQUEsY0FBQUEsRUFBQUEsa0JBQVRuWCxFQUFBQSxFQUFBQSxXQUFBQSxFQUFBQSxlQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBU21YLEdBQUFBLElBQUFBLFNBQUFBLEdBQVkySCxHQUFBQSxJQUFBQSxTQUFBQSxHQUloQzBmLEdBQUFBLEdBQUFBLFNBQUFBLEdBQ0lDLFFBQUFBLEtBQ0lDLEVBQUFBLEtBQUFBLE1BQ0FBLEtBQUtBLGFBQWFBLGFBQWNBLEVBQU9BLFlBRS9DRCxNQUwrQ0EsV0FBQUEsRUFBQUEsR0FLL0NBLEdBTCtDRCxFQUFBQSxLQUFLQSxRQUFRQSxlQUEvQ0EsR0FBQUEsMEJBQXlCQSxDQU90Q0EsSUFBY0EsSUFBZEEsU0FBY0EsR0FDVkcsUUFBQUEsR0FBNEJBLEVBQWVBLEVBQTRCQSxFQUE4QkEsRUFBOEJBLEdBQy9IQyxHQUFJQSxHQUFLQSxFQUFPQSxZQUNaQSxFQUFZQSxFQUFNQSxhQU90QkEsT0FOQUEsR0FBS0EsWUFBWUEsRUFBVUEsTUFBT0EsR0FDbENBLEVBQUFBLEtBQUtBLE9BQU9BLEVBQUtBLE9BQU9BLEVBQVdBLEdBQVFBLEdBQ3RDQSxTQUFTQSxFQUFVQSxTQUNwQkEsRUFBR0EsTUFBUUEsS0FBS0EsSUFBSUEsRUFBR0EsTUFBT0EsS0FDbENBLEVBQUdBLE1BQVFBLEtBQUtBLElBQUlBLEVBQUdBLE1BQU9BLEVBQVVBLE9BQ3hDQSxFQUFHQSxPQUFTQSxLQUFLQSxJQUFJQSxFQUFHQSxPQUFRQSxFQUFVQSxTQUNuQ0EsRUFUS0QsRUFBQUEsV0FBVUEsR0FEaEJILEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBWGtCMWYsRUFBQUEsRUFBQUEsVUFBQUEsRUFBQUEsY0FBWjNILEVBQUFBLEVBQUFBLGNBQUFBLEVBQUFBLGtCQUFUblgsRUFBQUEsRUFBQUEsV0FBQUEsRUFBQUEsZUFBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQVNtWCxHQUFBQSxJQUFBQSxTQUFBQSxHQUFZMkgsR0FBQUEsSUFBQUEsU0FBQUEsR0FJaEMrZixHQUFBQSxHQUFBQSxTQUFBQSxHQUNJQyxRQUFBQSxLQUNJQyxFQUFBQSxLQUFBQSxNQUNBQSxLQUFLQSxhQUFhQSxpQkFBa0JBLEVBQU9BLGdCQUN0Q0EsYUFBYUEsY0FBZUEsRUFBT0EsYUFFaERELE1BTmlEQSxXQUFBQSxFQUFBQSxHQU1qREEsR0FOaURELEVBQUFBLEtBQUtBLFVBQVVBLGlCQUFuREEsR0FBQUEsNEJBQTJCQSxDQVF4Q0EsSUFBY0EsSUFBZEEsU0FBY0EsR0FDVkcsUUFBQUEsR0FBZ0NBLEVBQWVBLEVBQThCQSxFQUFnQ0EsR0FDekdDLEdBQStDQSxLQUExQ0EsRUFBTUEsV0FBYUEsRUFBQUEsV0FBV0EsUUFDL0JBLE9BQU9BLENBRVhBLElBQUlBLEdBQUtBLEVBQU1BLFVBT2ZBLE9BTkFBLEdBQUdBLE1BQVFBLE9BQU9BLGtCQUNsQkEsRUFBR0EsT0FBU0EsT0FBT0Esa0JBQ25CQSxFQUFBQSxLQUFLQSxRQUFRQSxXQUFXQSxFQUFJQSxHQUU1QkEsRUFBQUEsS0FBS0EsT0FBT0EsRUFBS0EsT0FBT0EsRUFBSUEsR0FBUUEsSUFFN0JBLEVBR1hELFFBQUFBLEdBQTZCQSxFQUFlQSxFQUE4QkEsRUFBZ0NBLEdBQ3RHRSxHQUErQ0EsS0FBMUNBLEVBQU1BLFdBQWFBLEVBQUFBLFdBQVdBLFFBQy9CQSxPQUFPQSxDQUVYQSxJQUFJQSxHQUFJQSxFQUFPQSxPQU1mQSxPQUxBQSxHQUFFQSxFQUFJQSxFQUFFQSxFQUFJQSxFQUNaQSxFQUFBQSxLQUFLQSxPQUFPQSxFQUFNQSxXQUFZQSxHQUM5QkEsRUFBQUEsS0FBS0EsT0FBT0EsRUFBR0EsRUFBT0EscUJBQ3RCQSxFQUFPQSxvQkFBb0JBLFNBRXBCQSxFQXhCS0YsRUFBQUEsZUFBY0EsRUFjZEEsRUFBQUEsWUFBV0EsR0FmakJILEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBWmtCL2YsRUFBQUEsRUFBQUEsWUFBQUEsRUFBQUEsZ0JBQVozSCxFQUFBQSxFQUFBQSxjQUFBQSxFQUFBQSxrQkFBVG5YLEVBQUFBLEVBQUFBLFdBQUFBLEVBQUFBLGVBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFTbVgsR0FBQUEsSUFBQUEsU0FBQUEsR0FBWTJILEdBQUFBLElBQUFBLFNBQUFBLEdBVWhDcWdCLEdBQUFBLEdBQUFBLFNBQUFBLEdBQ0lDLFFBQUFBLEtBQ0lDLEVBQUFBLEtBQUFBLE1BQ0FBLEtBQUtBLGFBQWFBLFdBQVlBLEVBQU9BLFVBQ2hDQSxjQUFjQSxXQUFZQSxrQkFBbUJBLEVBQU9BLGlCQUNwREEsY0FBY0Esa0JBQW1CQSxjQUFlQSxFQUFPQSxhQWtCcEVELE1BdkI4Q0EsV0FBQUEsRUFBQUEsR0FRMUNBLEVBQUFBLFVBQUFBLGFBQUFBLFdBQ0lFLEdBQUlBLEdBQWtCQSxFQUFBQSxVQUFNQSxhQUFZQSxLQUFBQSxLQUV4Q0EsT0FEQUEsR0FBT0EsWUFBY0EsR0FBSUEsR0FBQUEsS0FDbEJBLEdBR1hGLEVBQUFBLFVBQUFBLFFBQUFBLFNBQVNBLEVBQWVBLEVBQTJCQSxHQUMvQ0csRUFBQUEsS0FBS0EsT0FBT0EsRUFBTUEsWUFBYUEsRUFBT0EsYUFDdENBLEVBQUFBLFVBQU1BLFFBQU9BLEtBQUFBLEtBQUNBLEVBQU9BLEVBQU9BLElBR2hDSCxFQUFBQSxVQUFBQSxNQUFBQSxTQUFPQSxFQUFlQSxFQUEyQkEsR0FDN0NJLEVBQUFBLFVBQU1BLE1BQUtBLEtBQUFBLEtBQUNBLEVBQU9BLEVBQU9BLEdBQzFCQSxFQUFBQSxLQUFLQSxPQUFPQSxFQUFPQSxZQUFhQSxFQUFNQSxjQUU5Q0osR0F2QjhDRCxFQUFBQSxLQUFLQSxPQUFPQSxjQUE3Q0EsR0FBQUEseUJBQXdCQSxDQXlCckNBLElBQWNBLElBQWRBLFNBQWNBLEdBQ1ZNLFFBQUFBLEdBQTBCQSxFQUFlQSxFQUEyQkEsRUFBaUJBLEVBQWdDQSxFQUFjQSxHQUsvSEMsTUFKQUEsR0FBSUEsT0FDSkEsRUFBQUEsS0FBS0EsUUFBUUEsaUJBQWlCQSxFQUFLQSxFQUFPQSxHQUMxQ0EsRUFBS0EsT0FBT0EsRUFBS0EsR0FDakJBLEVBQUlBLFdBQ0dBLEVBR1hELFFBQUFBLEdBQWlDQSxFQUFlQSxFQUEyQkEsRUFBaUJBLEVBQWdDQSxFQUFjQSxHQUN0SUUsT0FBS0EsRUFBQUEsS0FBS0EsUUFBUUEsRUFBT0EsY0FBZ0JBLEVBQU1BLGdCQUFrQkEsR0FDdERBLEdBQ1hBLEVBQUFBLEtBQUtBLE9BQU9BLEVBQUtBLGVBQWVBLEdBQVFBLEVBQU9BLGNBQ3hDQSxHQUdYRixRQUFBQSxHQUE2QkEsRUFBZUEsRUFBMkJBLEVBQWlCQSxFQUFnQ0EsRUFBY0EsR0FDbElHLElBQUtBLEVBQU1BLGdCQUFrQkEsRUFBTUEsZ0JBQWtCQSxFQUNqREEsT0FBT0EsQ0FFWEEsSUFBSUEsR0FBU0EsRUFBT0EsWUFDaEJBLEVBQVFBLEVBQU1BLFdBQ2RBLEVBQU1BLEVBQUlBLEdBY2RBLE9BWkFBLEdBQUlBLFlBQ0pBLEVBQUlBLE9BQU9BLEVBQU9BLEVBQUlBLEdBQUtBLEVBQU9BLEdBQ2xDQSxFQUFJQSxPQUFPQSxFQUFPQSxFQUFJQSxHQUFLQSxFQUFPQSxFQUFJQSxFQUFPQSxRQUM3Q0EsRUFBSUEsVUFBWUEsRUFDWkEsR0FDQUEsRUFBTUEsV0FBV0EsRUFBS0EsR0FDdEJBLEVBQUlBLFlBQWNBLEVBQU1BLGlCQUV4QkEsRUFBSUEsWUFBY0EsVUFFdEJBLEVBQUlBLFVBRUdBLEVBbkNLSCxFQUFBQSxTQUFRQSxFQVFSQSxFQUFBQSxnQkFBZUEsRUFPZkEsRUFBQUEsWUFBV0EsR0FoQmpCTixFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQW5Da0JyZ0IsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBWjNILEVBQUFBLEVBQUFBLGNBQUFBLEVBQUFBLGtCQUFUblgsRUFBQUEsRUFBQUEsV0FBQUEsRUFBQUEsZUFBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQVNtWCxHQUFBQSxJQUFBQSxTQUFBQSxHQUFZK0osR0FBQUEsSUFBQUEsU0FBQUEsR0FTaEMyZSxHQUFBQSxHQUFBQSxTQUFBQSxHQUNJQyxRQUFBQSxLQUNJQyxFQUFBQSxLQUFBQSxNQUNBQSxLQUFLQSxlQUFlQSxhQUFjQSxjQUFlQSxFQUFBQSxPQUFPQSxhQUNuREEsYUFBYUEsYUFBY0EsRUFBQUEsT0FBT0EsWUFRL0NELE1BWitDQSxXQUFBQSxFQUFBQSxHQU8zQ0EsRUFBQUEsVUFBQUEsWUFBQUE7QUFDSUUsR0FBSUEsR0FBZ0JBLEVBQUFBLFVBQU1BLFlBQVdBLEtBQUFBLEtBRXJDQSxPQURBQSxHQUFNQSxZQUFjQSxHQUFJQSxHQUFBQSxVQUNqQkEsR0FFZkYsR0FaK0NELEVBQUFBLEtBQUtBLFFBQVFBLGVBQS9DQSxHQUFBQSwwQkFBeUJBLEdBVE4zZSxFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQUFaL0osRUFBQUEsRUFBQUEsY0FBQUEsRUFBQUEsa0JBQVRuWCxFQUFBQSxFQUFBQSxXQUFBQSxFQUFBQSxlQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBU21YLEdBQUFBLElBQUFBLFNBQUFBLEdBQVkrSixHQUFBQSxJQUFBQSxTQUFBQSxHQVNoQytlLEdBQUFBLEdBQUFBLFNBQUFBLEdBQ0lDLFFBQUFBLEtBQ0lDLEVBQUFBLEtBQUFBLE1BQ0FBLEtBQUtBLGVBQWVBLGFBQWNBLGNBQWVBLEVBQUFBLE9BQU9BLGFBQ25EQSxhQUFhQSxhQUFjQSxFQUFBQSxPQUFPQSxZQUNsQ0EsY0FBY0EsYUFBY0EsZUFBZ0JBLEVBQUFBLE9BQU9BLGNBUWhFRCxNQWIrQ0EsV0FBQUEsRUFBQUEsR0FRM0NBLEVBQUFBLFVBQUFBLFlBQUFBLFdBQ0lFLEdBQUlBLEdBQWdCQSxFQUFBQSxVQUFNQSxZQUFXQSxLQUFBQSxLQUVyQ0EsT0FEQUEsR0FBTUEsWUFBY0EsR0FBSUEsR0FBQUEsVUFDakJBLEdBRWZGLEdBYitDRCxFQUFBQSxLQUFLQSxRQUFRQSxlQUEvQ0EsR0FBQUEsMEJBQXlCQSxHQVROL2UsRUFBQUEsRUFBQUEsVUFBQUEsRUFBQUEsY0FBWi9KLEVBQUFBLEVBQUFBLGNBQUFBLEVBQUFBLGtCQUFUblgsRUFBQUEsRUFBQUEsV0FBQUEsRUFBQUEsZUFBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQVNtWCxHQUFBQSxJQUFBQSxTQUFBQSxHQUFZK0osR0FBQUEsSUFBQUEsU0FBQUEsR0FDaENtZixHQUFBQSxHQUFBQSxTQUFBQSxHQUNJQyxRQUFBQSxLQUNJQyxFQUFBQSxLQUFBQSxNQUNBQSxLQUFLQSxhQUFhQSxvQkFBcUJBLEVBQU9BLG1CQUV0REQsTUFMbURBLFdBQUFBLEVBQUFBLEdBS25EQSxHQUxtREQsRUFBQUEsS0FBS0EsWUFBWUEsbUJBQXZEQSxHQUFBQSw4QkFBNkJBLENBTzFDQSxJQUFjQSxJQUFkQSxTQUFjQSxHQUNWRyxRQUFBQSxHQUFtQ0EsRUFBZ0NBLEVBQWdDQSxFQUFrQ0EsRUFBa0NBLEdBQ25LQyxHQUFtREEsS0FBOUNBLEVBQU1BLFdBQWFBLEVBQUFBLFdBQVdBLFlBQy9CQSxPQUFPQSxDQUVYQSxJQUFJQSxHQUFNQSxFQUFNQSxtQkFFaEJBLE9BREFBLEdBQUlBLEVBQUlBLEVBQUlBLEVBQUlBLEVBQUlBLE1BQVFBLEVBQUlBLFFBQ3pCQSxFQU5LRCxFQUFBQSxrQkFBaUJBLEdBRHZCSCxFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQVJrQm5mLEVBQUFBLEVBQUFBLGNBQUFBLEVBQUFBLGtCQUFaL0osRUFBQUEsRUFBQUEsY0FBQUEsRUFBQUEsa0JBQVRuWCxFQUFBQSxFQUFBQSxXQUFBQSxFQUFBQSxlQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBU21YLEdBQUFBLElBQUFBLFNBQUFBLEdBQXVCK0ssR0FBQUEsSUFBQUEsU0FBQUEsR0FVM0N3ZSxHQUFBQSxHQUFBQSxTQUFBQSxHQUNJQyxRQUFBQSxLQUNJQyxFQUFBQSxLQUFBQSxNQUNBQSxLQUFLQSxhQUFhQSxhQUFjQSxFQUFBQSxPQUFPQSxZQUNsQ0EsY0FBY0EsYUFBY0EsZUFBZ0JBLEVBQUFBLE9BQU9BLGNBQ25EQSxjQUFjQSxhQUFjQSxhQUFjQSxFQUFBQSxPQUFPQSxZQUU5REQsTUFQMERBLFdBQUFBLEVBQUFBLEdBTzFEQSxHQVAwREQsRUFBQUEsTUFBTUEsUUFBUUEsb0JBQTNEQSxHQUFBQSxxQ0FBb0NBLEdBVk54ZSxFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQUF2Qi9LLEVBQUFBLEVBQUFBLHlCQUFBQSxFQUFBQSw2QkFBVG5YLEVBQUFBLEVBQUFBLFdBQUFBLEVBQUFBLGVBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFTbVgsR0FBQUEsSUFBQUEsU0FBQUEsR0FBdUIrSyxHQUFBQSxJQUFBQSxTQUFBQSxHQVczQzJlLEdBQUFBLEdBQUFBLFNBQUFBLEdBQ0lDLFFBQUFBLEtBQ0lDLEVBQUFBLEtBQUFBLE1BQ0FBLEtBQUtBLGFBQWFBLGFBQWNBLEVBQUFBLE9BQU9BLFlBQ2xDQSxjQUFjQSxhQUFjQSxlQUFnQkEsRUFBQUEsT0FBT0EsY0FDbkRBLGNBQWNBLGFBQWNBLGFBQWNBLEVBQUFBLE9BQU9BLFlBUTlERCxNQWIwREEsV0FBQUEsRUFBQUEsR0FRdERBLEVBQUFBLFVBQUFBLFlBQUFBLFdBQ0lFLEdBQUlBLEdBQWdCQSxFQUFBQSxVQUFNQSxZQUFXQSxLQUFBQSxLQUVyQ0EsT0FEQUEsR0FBTUEsZUFBaUJBLEdBQUlBLEdBQUFBLEtBQ3BCQSxHQUVmRixHQWIwREQsRUFBQUEsTUFBTUEsUUFBUUEsb0JBQTNEQSxHQUFBQSxxQ0FBb0NBLEdBWE4zZSxFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQUF2Qi9LLEVBQUFBLEVBQUFBLHlCQUFBQSxFQUFBQSw2QkFBVG5YLEVBQUFBLEVBQUFBLFdBQUFBLEVBQUFBLGVBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFLOEcsR0FBQUEsSUFBQUEsU0FBQUEsR0FBUWlQLEdBQUFBLElBQUFBLFNBQUFBLEdBQ2JrckIsRUFBQUEsY0FBK0JBLFNBQVVBLEVBQWVBLEVBQWVBLEVBQWlCQSxFQUFvQkEsR0FDbkgsR0FBSUMsR0FBS0MsRUFBTUMsU0FTZixPQVJJQyxHQUFNQyxtQkFDTkosRUFBR25hLEVBQUlXLEtBQUs2WixNQUFNSCxFQUFVcmEsR0FDNUJtYSxFQUFHbGEsRUFBSVUsS0FBSzZaLE1BQU1ILEVBQVVwYSxHQUM1QmthLEVBQUc5VixNQUFRMUQsS0FBSzZaLE1BQU1ILEVBQVVoVyxPQUNoQzhWLEVBQUc3VixPQUFTM0QsS0FBSzZaLE1BQU1ILEVBQVUvVixTQUVqQ3JyQixFQUFBd2hDLEtBQUtDLE9BQU9MLEVBQVdGLElBRXBCLElBWGFuckIsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBUmpQLEVBQUFBLEVBQUFBLFVBQUFBLEVBQUFBLGNBQUw5RyxFQUFBQSxFQUFBQSxPQUFBQSxFQUFBQSxXQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBSzhHLEdBQUFBLElBQUFBLFNBQUFBLEdBQVFpUCxHQUFBQSxJQUFBQSxTQUFBQSxHQUN4QmtyQixHQUFJQSxHQUFXQSxHQUFJQSxHQUFBQSxLQUNmQSxFQUFTQSxHQUFJQSxHQUFBQSxJQUNOQSxHQUFBQSxnQkFBaUNBLFNBQVVBLEVBQWVBLEVBQWVBLEVBQWlCQSxFQUFvQkEsR0FDckgsR0FBSVMsR0FBS0MsRUFBT0MsVUFDaEI1aEMsR0FBQXdoQyxLQUFLQyxPQUFPTixFQUFNQyxVQUFXTSxFQUU3QixJQUFJRyxHQUFLRixFQUFPRyxZQUNoQkosR0FBRzNhLEVBQUlXLEtBQUtJLElBQUk0WixFQUFHM2EsRUFBSThhLEVBQUc5YSxFQUFHLEdBQzdCMmEsRUFBRzFhLEVBQUlVLEtBQUtJLElBQUk0WixFQUFHMWEsRUFBSTZhLEVBQUc3YSxFQUFHLEdBRXpCcWEsRUFBTUMsb0JBQ05JLEVBQUczYSxFQUFJVyxLQUFLNlosTUFBTUcsRUFBRzNhLEdBQ3JCMmEsRUFBRzFhLEVBQUlVLEtBQUs2WixNQUFNRyxFQUFHMWEsSUFHekIrYSxFQUFTaGIsRUFBSWdiLEVBQVMvYSxFQUFJLENBQzFCLElBQUlnYixHQUFLYixFQUFNYyxZQWVmLE9BZEFqaUMsR0FBQWtpQyxLQUFLVCxPQUFPTyxFQUFJRCxJQUNWbjZCLEVBQUt1NkIsT0FBVW5pQyxFQUFBd2hDLEtBQUtZLGNBQWNMLEVBQVVMLEtBQVMxaEMsRUFBQWtpQyxLQUFLRyxRQUFRbEIsRUFBTW1CLFlBQWFOLEdBTXZGTixFQUFHM2EsRUFBSTJhLEVBQUcxYSxFQUFJMGEsRUFBR3RXLE1BQVFzVyxFQUFHclcsT0FBUyxHQUxyQ2tYLEVBQU94YixFQUFJd2IsRUFBT3ZiLEVBQUksRUFDdEJ1YixFQUFPblgsTUFBUW1YLEVBQU9sWCxPQUFTbVgsT0FBT0Msa0JBQ3RDQyxFQUFBclYsUUFBUXNWLFdBQVdKLEVBQVFsQixHQUMzQnJoQyxFQUFBd2hDLEtBQUtvQixhQUFhbEIsRUFBSWEsSUFLckJ2aUMsRUFBQXdoQyxLQUFLYSxRQUFRVixFQUFPQyxXQUFZUCxFQUFNTyxjQUN2Q0QsRUFBT2tCLFlBQWM3aUMsRUFBQThpQyxXQUFXQyxhQUc3QixJQWhDYWh0QixFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFSalAsRUFBQUEsRUFBQUEsVUFBQUEsRUFBQUEsY0FBTDlHLEVBQUFBLEVBQUFBLE9BQUFBLEVBQUFBLFdBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFLOEcsR0FBQUEsSUFBQUEsU0FBQUEsR0FBUWlQLEdBQUFBLElBQUFBLFNBQUFBLEdBQ2JrckIsRUFBQUEsaUJBQWtDQSxTQUFVQSxFQUFlQSxFQUFlQSxFQUFpQkEsRUFBb0JBLEdBQ3RILEdBQUlZLEdBQUtGLEVBQU9HLGFBQ1prQixFQUFjaGpDLEVBQUE4UCxLQUFLbXpCLGdCQUFnQnBCLEVBQUc5YSxFQUFHOGEsRUFBRzdhLEVBQUcyYSxFQUFPcUIsWUFPMUQsT0FOSTdCLEdBQU0rQixpQkFDTmxqQyxFQUFBOFAsS0FBS29lLFVBQVU4VSxFQUFhN0IsRUFBTWMsYUFBYTdXLE1BQU8sR0FDdERwckIsRUFBQThQLEtBQUtzZSxNQUFNNFUsRUFBYSxHQUFJLElBRTNCaGpDLEVBQUE4UCxLQUFLcXpCLE1BQU05QixFQUFNMkIsWUFBYXJCLEVBQU9xQixlQUN0Q3JCLEVBQU9rQixZQUFjN2lDLEVBQUE4aUMsV0FBV00saUJBQzdCLElBVmFydEIsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBUmpQLEVBQUFBLEVBQUFBLFVBQUFBLEVBQUFBLGNBQUw5RyxFQUFBQSxFQUFBQSxPQUFBQSxFQUFBQSxXQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBSzhHLEdBQUFBLElBQUFBLFNBQUFBLEdBQVFpUCxHQUFBQSxJQUFBQSxTQUFBQSxHQUNia3JCLEVBQUFBLGdCQUFpQ0EsU0FBVUEsRUFBZUEsRUFBZUEsRUFBaUJBLEVBQW9CQSxHQVFySCxNQVBBamhDLEdBQUFraUMsS0FBS1QsT0FBT04sRUFBTWMsYUFBY04sRUFBTzBCLFlBQ2xDcmpDLEVBQUFraUMsS0FBS0csUUFBUWhCLEVBQU1nQyxXQUFZMUIsRUFBTzBCLGFBQ2xDMUIsRUFBTzJCLGlCQUNSM0IsRUFBTzJCLGVBQWlCM0IsRUFBTzBCLFdBQy9CMUIsRUFBTzRCLFNBQVd2akMsRUFBQXdqQyxRQUFRQyxXQUczQixJQVRhMXRCLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVJqUCxFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQUFMOUcsRUFBQUEsRUFBQUEsT0FBQUEsRUFBQUEsV0FBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQUs4RyxHQUFBQSxJQUFBQSxTQUFBQSxHQUFRaVAsR0FBQUEsSUFBQUEsU0FBQUEsR0FDYmtyQixFQUFBQSxTQUEwQkEsU0FBVUEsRUFBZUEsRUFBZUEsRUFBaUJBLEVBQW9CQSxHQWM5RyxNQURBRSxHQUFNK0IsZ0JBQWlCLEdBQ2hCLElBZmFudEIsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBUmpQLEVBQUFBLEVBQUFBLFVBQUFBLEVBQUFBLGNBQUw5RyxFQUFBQSxFQUFBQSxPQUFBQSxFQUFBQSxXQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBSzhHLEdBQUFBLElBQUFBLFNBQUFBLEdBQVFpUCxHQUFBQSxJQUFBQSxTQUFBQSxHQUNia3JCLEVBQUFBLGNBQStCQSxTQUFVQSxFQUFlQSxFQUFlQSxFQUFpQkEsRUFBb0JBLEdBQ25IamhDLEVBQUF3aEMsS0FBS0MsT0FBT0wsRUFBV08sRUFBTytCLFdBRTlCLElBQUl4QyxHQUFLQyxFQUFNQyxTQUNmcGhDLEdBQUEyakMsVUFBVUMsV0FBV3ZDLEVBQU13QyxPQUFRM0MsRUFFbkMsSUFBSTRDLEdBQVkzQyxFQUFNMkMsU0FLdEIsT0FKQUEsR0FBVTFZLE1BQVE4VixFQUFHOVYsTUFDckIwWSxFQUFVelksT0FBUzZWLEVBQUc3VixPQUN0QnFYLEVBQUFyVixRQUFRc1YsV0FBV21CLEVBQVd6QyxJQUV2QixJQVphdHJCLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVJqUCxFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQUFMOUcsRUFBQUEsRUFBQUEsT0FBQUEsRUFBQUEsV0FBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQUs4RyxHQUFBQSxJQUFBQSxTQUFBQSxHQUFRaVAsR0FBQUEsSUFBQUEsU0FBQUEsR0FDYmtyQixFQUFBQSxpQkFBa0NBLFNBQVVBLEVBQWVBLEVBQWVBLEVBQWlCQSxFQUFvQkEsR0FDdEgsR0FBSVksR0FBS0YsRUFBT0csYUFDWlosRUFBS0MsRUFBTUMsVUFDWGtCLEVBQWNuQixFQUFNbUIsV0FJeEIsSUFIQVQsRUFBRzlhLEVBQUltYSxFQUFHbmEsRUFDVjhhLEVBQUc3YSxFQUFJa2EsRUFBR2xhLEdBRUxwZixFQUFLdTZCLE1BQU8sQ0FDYixPQUFRZCxFQUFNMEMscUJBQ1YsSUFBSy9qQyxHQUFBZ2tDLG9CQUFvQkMsS0FDckIsS0FDSixLQUFLamtDLEdBQUFna0Msb0JBQW9CRSxNQUNyQnJDLEVBQUc5YSxHQUFLbWEsRUFBRzlWLE1BQVFrWCxFQUFZbFgsS0FDL0IsTUFDSixLQUFLcHJCLEdBQUFna0Msb0JBQW9CRyxPQUNyQnRDLEVBQUc5YSxHQUFzQyxJQUFoQ21hLEVBQUc5VixNQUFRa1gsRUFBWWxYLE1BQ2hDLE1BQ0osU0FDSXlXLEVBQUc5YSxHQUFLVyxLQUFLSSxJQUFxQyxJQUFoQ29aLEVBQUc5VixNQUFRa1gsRUFBWWxYLE9BQWMsR0FJL0QsT0FBUWlXLEVBQU0rQyxtQkFDVixJQUFLcGtDLEdBQUFxa0Msa0JBQWtCQyxJQUNuQixLQUNKLEtBQUt0a0MsR0FBQXFrQyxrQkFBa0JFLE9BQ25CMUMsRUFBRzdhLEdBQUtrYSxFQUFHN1YsT0FBU2lYLEVBQVlqWCxNQUNoQyxNQUNKLEtBQUtyckIsR0FBQXFrQyxrQkFBa0JGLE9BQ25CdEMsRUFBRzdhLEdBQXdDLElBQWxDa2EsRUFBRzdWLE9BQVNpWCxFQUFZalgsT0FDakMsTUFDSixTQUNJd1csRUFBRzdhLEdBQUtVLEtBQUtJLElBQXVDLElBQWxDb1osRUFBRzdWLE9BQVNpWCxFQUFZalgsUUFBZSxJQVVyRSxNQUxJZ1csR0FBTUMsb0JBQ05PLEVBQUc5YSxFQUFJVyxLQUFLNlosTUFBTU0sRUFBRzlhLEdBQ3JCOGEsRUFBRzdhLEVBQUlVLEtBQUs2WixNQUFNTSxFQUFHN2EsS0FHbEIsSUEzQ2FqUixFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFSalAsRUFBQUEsRUFBQUEsVUFBQUEsRUFBQUEsY0FBTDlHLEVBQUFBLEVBQUFBLE9BQUFBLEVBQUFBLFdBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFLOEcsR0FBQUEsSUFBQUEsU0FBQUEsR0FBUWlQLEdBQUFBLElBQUFBLFNBQUFBLEdBQ2JrckIsRUFBQUEsaUJBQWtDQSxTQUFVQSxFQUFlQSxFQUFlQSxFQUFpQkEsRUFBb0JBLEdBQ3RILE9BQUtJLEVBQU13QixXQUFhN2lDLEVBQUE4aUMsV0FBVzBCLFNBQVcsR0FDbkMsR0FDSHhrQyxFQUFBd2hDLEtBQUthLFFBQVFWLEVBQU8rQixXQUFZdkMsRUFBTUMsYUFKMUJyckIsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBUmpQLEVBQUFBLEVBQUFBLFVBQUFBLEVBQUFBLGNBQUw5RyxFQUFBQSxFQUFBQSxPQUFBQSxFQUFBQSxXQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBSzhHLEdBQUFBLElBQUFBLFNBQUFBLEdBQVFpUCxHQUFBQSxJQUFBQSxTQUFBQSxHQUNia3JCLEVBQUFBLGlCQUFrQ0EsU0FBVUEsRUFBZUEsRUFBZUEsRUFBaUJBLEVBQW9CQSxHQUN0SFUsRUFBT2tCLGFBQWU3aUMsRUFBQThpQyxXQUFXMEIsT0FFakMsSUFBSXhDLEdBQUtiLEVBQU1jLFlBQ1haLEdBQU0wQyxzQkFBd0IvakMsRUFBQWdrQyxvQkFBb0JTLFVBQ2xEekMsRUFBRzVXLE1BQVExRCxLQUFLSSxJQUFJa2EsRUFBRzVXLE1BQU8rVixFQUFNdUQsVUFBVXRaLFFBRTlDaVcsRUFBTStDLG9CQUFzQnBrQyxFQUFBcWtDLGtCQUFrQkksVUFDOUN6QyxFQUFHM1csT0FBUzNELEtBQUtJLElBQUlrYSxFQUFHM1csT0FBUThWLEVBQU11RCxVQUFVclosU0FFaERnVyxFQUFNQyxvQkFDTlUsRUFBRzVXLE1BQVExRCxLQUFLNlosTUFBTVMsRUFBRzVXLE9BQ3pCNFcsRUFBRzNXLE9BQVMzRCxLQUFLNlosTUFBTVMsRUFBRzNXLFFBRzlCLElBQUlpWCxHQUFjbkIsRUFBTW1CLFdBS3hCLE9BSkF0aUMsR0FBQWtpQyxLQUFLVCxPQUFPTyxFQUFJTSxHQUNoQkksRUFBQXJWLFFBQVFzVixXQUFXTCxFQUFhakIsR0FDaENpQixFQUFZbFgsTUFBUTFELEtBQUtDLElBQUkyYSxFQUFZbFgsTUFBTzRXLEVBQUc1VyxPQUNuRGtYLEVBQVlqWCxPQUFTM0QsS0FBS0MsSUFBSTJhLEVBQVlqWCxPQUFRMlcsRUFBRzNXLFNBQzlDLElBckJhdFYsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBUmpQLEVBQUFBLEVBQUFBLFVBQUFBLEVBQUFBLGNBQUw5RyxFQUFBQSxFQUFBQSxPQUFBQSxFQUFBQSxXQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBSzhHLEdBQUFBLElBQUFBLFNBQUFBLEdBQVFpUCxHQUFBQSxJQUFBQSxTQUFBQSxHQUNia3JCLEVBQUFBLFdBQTRCQSxTQUFVQSxFQUFlQSxFQUFlQSxFQUFpQkEsRUFBb0JBLEdBQ2hILEdBQUkvWSxHQUFLaVosRUFBTXdELFNBQ2Z6YyxHQUFHbkIsRUFBSW1CLEVBQUdsQixFQUFJLEVBQ2RobkIsRUFBQWtpQyxLQUFLVCxPQUFPTixFQUFNeUQsVUFBVzFjLEVBRTdCLEtBQUssR0FBSTJjLEdBQVNqOUIsRUFBS0MsT0FBUWc5QixFQUFPOThCLFFBQVMsQ0FDM0MsR0FBSSs4QixHQUFRRCxFQUFPMzhCLE9BQ25CNDhCLEdBQU1DLFFBQVE1RCxFQUFNd0QsV0FJeEIsTUFEQTNrQyxHQUFBa2lDLEtBQUtULE9BQU92WixFQUFJaVosRUFBTWMsZUFDZixJQVphbHNCLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVJqUCxFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQUFMOUcsRUFBQUEsRUFBQUEsT0FBQUEsRUFBQUEsV0FBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQUs4RyxHQUFBQSxJQUFBQSxTQUFBQSxHQUFRaVAsR0FBQUEsSUFBQUEsU0FBQUEsR0FDYmtyQixFQUFBQSxpQkFBa0NBLFNBQVVBLEVBQWVBLEVBQWVBLEVBQWlCQSxFQUFvQkEsR0FDdEgsR0FBSVMsR0FBS0MsRUFBT0MsVUFJaEIsT0FIQUYsR0FBRzNhLEVBQUkyYSxFQUFHMWEsRUFBSTBhLEVBQUd0VyxNQUFRc1csRUFBR3JXLE9BQVMsRUFDckNzVyxFQUFPa0IsWUFBYzdpQyxFQUFBOGlDLFdBQVdNLGVBQ2hDekIsRUFBT2tCLFlBQWM3aUMsRUFBQThpQyxXQUFXa0MsUUFDekIsSUFOYWp2QixFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFSalAsRUFBQUEsRUFBQUEsVUFBQUEsRUFBQUEsY0FBTDlHLEVBQUFBLEVBQUFBLE9BQUFBLEVBQUFBLFdBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFLOEcsR0FBQUEsSUFBQUEsU0FBQUEsR0FBUWlQLEdBQUFBLElBQUFBLFNBQUFBLEdBQ2JrckIsRUFBQUEsZ0JBQWlDQSxTQUFVQSxFQUFlQSxFQUFlQSxFQUFpQkEsRUFBb0JBLEdBQ3JILEdBQUl5RCxHQUFZdkQsRUFBTXVELFNBQ3RCQSxHQUFVdFosTUFBUSxFQUNsQnNaLEVBQVVyWixPQUFTLEVBQ25CcVgsRUFBQXJWLFFBQVFzVixXQUFXK0IsRUFBV3JELEdBRTFCQSxFQUFNMEMsc0JBQXdCL2pDLEVBQUFna0Msb0JBQW9CUyxVQUNsREMsRUFBVXRaLE1BQVExRCxLQUFLSSxJQUFJNGMsRUFBVXRaLE1BQU8rVixFQUFNMkMsVUFBVTFZLFFBRTVEaVcsRUFBTStDLG9CQUFzQnBrQyxFQUFBcWtDLGtCQUFrQkksVUFDOUNDLEVBQVVyWixPQUFTM0QsS0FBS0ksSUFBSTRjLEVBQVVyWixPQUFROFYsRUFBTTJDLFVBQVV6WSxRQUVsRSxJQUFJNFosR0FBSzlELEVBQU15RCxVQUNYTSxFQUFLN0QsRUFBTThELFlBSWYsT0FIQUYsR0FBRzdaLE1BQVExRCxLQUFLSSxJQUFJb2QsRUFBRzlaLE1BQU9zWixFQUFVdFosT0FDeEM2WixFQUFHNVosT0FBUzNELEtBQUtJLElBQUlvZCxFQUFHN1osT0FBUXFaLEVBQVVyWixTQUVuQyxJQWxCYXRWLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVJqUCxFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQUFMOUcsRUFBQUEsRUFBQUEsT0FBQUEsRUFBQUEsV0FBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQUs4RyxHQUFBQSxJQUFBQSxTQUFBQSxHQUFRaVAsR0FBQUEsSUFBQUEsU0FBQUEsR0FDYmtyQixFQUFBQSxrQkFBbUNBLFNBQVVBLEVBQWVBLEVBQWVBLEVBQWlCQSxFQUFvQkEsR0FDdkgsTUFBSUcsR0FBVWhXLE1BQVEsR0FBS2dXLEVBQVUvVixPQUFTLElBQ3RDK1osU0FBU2hFLEVBQVVoVyxTQUFXZ2EsU0FBU2hFLEVBQVUvVixTQUNsRGdhLE1BQU1qRSxFQUFVcmEsSUFBTXNlLE1BQU1qRSxFQUFVcGEsSUFDdENxZSxNQUFNakUsRUFBVWhXLFFBQVVpYSxNQUFNakUsRUFBVS9WLFNBQzdDcnJCLEVBQVFzbEMsWUFBWTE5QixFQUFNTyxLQUFNLGtDQUN6QixJQUVKLElBVGE0TixFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFSalAsRUFBQUEsRUFBQUEsVUFBQUEsRUFBQUEsY0FBTDlHLEVBQUFBLEVBQUFBLE9BQUFBLEVBQUFBLFdBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFLOEcsR0FBQUEsSUFBQUEsU0FBQUEsR0FBUWlQLEdBQUFBLElBQUFBLFNBQUFBLEdBQ2JrckIsRUFBQUEsbUJBQW9DQSxTQUFVQSxFQUFlQSxFQUFlQSxFQUFpQkEsRUFBb0JBLEdBQ3hILE1BQUlJLEdBQU1rRSxhQUFldmxDLEVBQUF3bEMsV0FBV0MsU0FDaEN6bEMsRUFBQXdoQyxLQUFLQyxPQUFPTixFQUFNQyxVQUFXTyxFQUFPK0IsYUFDN0IsSUFFSixJQU5hM3RCLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVJqUCxFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQUFMOUcsRUFBQUEsRUFBQUEsT0FBQUEsRUFBQUEsV0FBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQUs4RyxHQUFBQSxJQUFBQSxTQUFBQSxHQUFNNGIsR0FBQUEsSUFBQUEsU0FBQUEsR0FDWGdqQixFQUFBQSxRQUF1QkEsU0FBVUEsR0FDeEMsR0FBSUMsRUFBS0MsT0FBUzVsQyxFQUFBd2pDLFFBQVFxQyxZQUN0QixPQUFPLENBRVgsSUFBSUYsRUFBS0csWUFBWTVpQyxRQUFVLEVBQzNCLE9BQU8sQ0FHWCxLQURBLEdBQUk2aUMsR0FDMkMsT0FBdkNBLEVBQVVKLEVBQUtHLFlBQVkxOUIsVUFDL0IyOUIsRUFBUUMsV0FHWixRQUFPLElBYld0akIsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBTjViLEVBQUFBLEVBQUFBLFFBQUFBLEVBQUFBLFlBQUw5RyxFQUFBQSxFQUFBQSxPQUFBQSxFQUFBQSxXQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBSzhHLEdBQUFBLElBQUFBLFNBQUFBLEdBQU00YixHQUFBQSxJQUFBQSxTQUFBQSxHQUNYZ2pCLEVBQUFBLGVBQThCQSxTQUFVQSxHQUMvQ0MsRUFBS0MsS0FBTzVsQyxFQUFBd2pDLFFBQVF5QyxJQUNwQixJQUFJQyxHQUFTUCxFQUFLTyxNQUNsQixJQUFJQSxFQUFPWCxhQUFldmxDLEVBQUF3bEMsV0FBV0MsUUFDakMsT0FBTyxDQUVYLEtBQUtTLEVBQU8zQyxRQUFVdmpDLEVBQUF3akMsUUFBUTJDLGFBQWUsRUFDekNSLEVBQUtDLEtBQU81bEMsRUFBQXdqQyxRQUFRMkMsZ0JBQ2pCLEtBQUtELEVBQU8zQyxRQUFVdmpDLEVBQUF3akMsUUFBUXFDLGFBQWUsRUFDaERGLEVBQUtDLEtBQU81bEMsRUFBQXdqQyxRQUFRcUMsZ0JBQ2pCLENBQUEsTUFBS0ssRUFBTzNDLFFBQVV2akMsRUFBQXdqQyxRQUFRQyxVQUFZLEdBRzdDLE9BQU8sQ0FGUGtDLEdBQUtDLEtBQU81bEMsRUFBQXdqQyxRQUFRQyxTQUt4QixPQUFPLElBakJXL2dCLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQU41YixFQUFBQSxFQUFBQSxRQUFBQSxFQUFBQSxZQUFMOUcsRUFBQUEsRUFBQUEsT0FBQUEsRUFBQUEsV0FBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQUs4RyxHQUFBQSxJQUFBQSxTQUFBQSxHQUFNNGIsR0FBQUEsSUFBQUEsU0FBQUEsR0FDWGdqQixFQUFBQSxjQUE2QkEsU0FBVUEsR0FFOUMsSUFEQSxHQUFJSyxHQUMyQyxPQUF2Q0EsRUFBVUosRUFBS0csWUFBWTE5QixVQUMvQnM2QixFQUFBMEQsUUFBUUMscUJBQXFCTixFQUFTL2xDLEVBQUF3akMsUUFBUXFDLFlBRWxELE1BQThDLE9BQXRDRSxFQUFVSixFQUFLVyxXQUFXbCtCLFVBQzlCczZCLEVBQUEwRCxRQUFRQyxxQkFBcUJOLEVBQVMvbEMsRUFBQXdqQyxRQUFRQyxTQUVsRCxRQUFPLElBVFcvZ0IsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBTjViLEVBQUFBLEVBQUFBLFFBQUFBLEVBQUFBLFlBQUw5RyxFQUFBQSxFQUFBQSxPQUFBQSxFQUFBQSxXQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBSzhHLEdBQUFBLElBQUFBLFNBQUFBLEdBQU00YixHQUFBQSxJQUFBQSxTQUFBQSxHQUNYZ2pCLEVBQUFBLFFBQXVCQSxTQUFVQSxHQUN4QyxHQUFJQyxFQUFLQyxPQUFTNWxDLEVBQUF3akMsUUFBUTJDLFlBQ3RCLE9BQU8sQ0FFWCxJQUFJUixFQUFLWSxZQUFZcmpDLFFBQVUsRUFDM0IsT0FBTyxDQUdYLEtBREEsR0FBSTZpQyxHQUMyQyxPQUF2Q0EsRUFBVUosRUFBS1ksWUFBWW4rQixVQUMvQjI5QixFQUFRUyxXQUdaLFFBQU8sSUFiVzlqQixFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFONWIsRUFBQUEsRUFBQUEsUUFBQUEsRUFBQUEsWUFBTDlHLEVBQUFBLEVBQUFBLE9BQUFBLEVBQUFBLFdBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFLOEcsR0FBQUEsSUFBQUEsU0FBQUEsR0FBTTRiLEdBQUFBLElBQUFBLFNBQUFBLEdBQ1hnakIsRUFBQUEsYUFBNEJBLFNBQVVBLEdBQzdDLEdBQUlDLEVBQUtDLE9BQVM1bEMsRUFBQXdqQyxRQUFRQyxTQUN0QixPQUFPLENBQ1gsSUFBSWtDLEVBQUtjLGNBQWN2akMsUUFBVSxFQUM3QixPQUFPLENBR1gsS0FEQSxHQUFJd2pDLEdBQzBDLE9BQXRDQSxFQUFTZixFQUFLYyxjQUFjRSxRQUNoQ0QsRUFBT1gsUUFBUWEsY0FBY0YsRUFBT0csUUFBU0gsRUFBT0ksUUFHeEQsUUFBTyxJQVpXcGtCLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQU41YixFQUFBQSxFQUFBQSxRQUFBQSxFQUFBQSxZQUFMOUcsRUFBQUEsRUFBQUEsT0FBQUEsRUFBQUEsV0FBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQUs4RyxHQUFBQSxJQUFBQSxTQUFBQSxHQUFNNGIsR0FBQUEsSUFBQUEsU0FBQUEsR0FDWGdqQixFQUFBQSxlQUE4QkEsU0FBVUEsR0FDL0MsR0FBSUMsRUFBS0MsT0FBUzVsQyxFQUFBd2pDLFFBQVFxQyxZQUN0QixPQUFPLENBRVgsS0FBSyxHQUFJaEIsR0FBU2MsRUFBS0ksUUFBUWdCLFdBQVlsQyxFQUFPOThCLFFBQVMsQ0FDdkQsR0FBSW0rQixHQUFTckIsRUFBTzM4QixRQUFRZytCLE1BQ3hCQSxHQUFPWCxhQUFldmxDLEVBQUF3bEMsV0FBV0MsU0FJVSxLQUExQ1MsRUFBTzNDLFFBQVV2akMsRUFBQXdqQyxRQUFRcUMsY0FLOUJLLEVBQU8zQyxVQUFZdmpDLEVBQUF3akMsUUFBUXFDLGFBQ3RCSyxFQUFPckQsV0FBYTdpQyxFQUFBOGlDLFdBQVcwQixTQUFXLEdBQzNDbUIsRUFBS0csWUFBWWtCLEtBQUtuQyxFQUFPMzhCLFVBVjdCMjhCLEVBQU9vQyxhQWFmLE9BQU8sSUFyQld2a0IsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBTjViLEVBQUFBLEVBQUFBLFFBQUFBLEVBQUFBLFlBQUw5RyxFQUFBQSxFQUFBQSxPQUFBQSxFQUFBQSxXQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBSzhHLEdBQUFBLElBQUFBLFNBQUFBLEdBQU00YixHQUFBQSxJQUFBQSxTQUFBQSxHQUNYZ2pCLEVBQUFBLGVBQThCQSxTQUFVQSxHQUMvQyxHQUFJQyxFQUFLQyxPQUFTNWxDLEVBQUF3akMsUUFBUTJDLFlBQ3RCLE9BQU8sQ0FFWCxJQUFJeitCLEdBQU9pK0IsRUFBS08sT0FBT2dCLG9CQUNuQnZCLEVBQUsvOUIsS0FBS3UvQixjQUFnQm5uQyxFQUFBa2lDLEtBQUtrRixRQUFRMS9CLElBQVcxSCxFQUFBa2lDLEtBQUtHLFFBQVEzNkIsRUFBTWkrQixFQUFLMEIsZUFDMUUxQixFQUFLTyxPQUFPckQsWUFBYzdpQyxFQUFBOGlDLFdBQVd3RSxRQUNyQ3RuQyxFQUFBa2lDLEtBQUtULE9BQU9rRSxFQUFLMEIsWUFBYTFCLEVBQUtPLE9BQU9nQixvQkFHOUMsS0FBSyxHQUFJckMsR0FBU2MsRUFBS0ksUUFBUWdCLFdBQVlsQyxFQUFPOThCLFFBQVMsQ0FDdkQsR0FBSW0rQixHQUFTckIsRUFBTzM4QixRQUFRZytCLE1BQ3hCQSxHQUFPWCxhQUFldmxDLEVBQUF3bEMsV0FBV0MsU0FJVSxLQUExQ1MsRUFBTzNDLFFBQVV2akMsRUFBQXdqQyxRQUFRMkMsY0FLOUJELEVBQU8zQyxVQUFZdmpDLEVBQUF3akMsUUFBUTJDLGFBQ3RCRCxFQUFPckQsV0FBYTdpQyxFQUFBOGlDLFdBQVd3RSxTQUFXLEdBQzNDM0IsRUFBS1ksWUFBWVMsS0FBS25DLEVBQU8zOEIsVUFWN0IyOEIsRUFBT29DLGFBYWYsT0FBTyxJQTNCV3ZrQixFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFONWIsRUFBQUEsRUFBQUEsUUFBQUEsRUFBQUEsWUFBTDlHLEVBQUFBLEVBQUFBLE9BQUFBLEVBQUFBLFdBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFLOEcsR0FBQUEsSUFBQUEsU0FBQUEsR0FBTTRiLEdBQUFBLElBQUFBLFNBQUFBLEdBQ1hnakIsRUFBQUEsY0FBNkJBLFNBQVVBLEdBQzlDLEdBQUlDLEVBQUtDLE9BQVM1bEMsRUFBQXdqQyxRQUFRQyxTQUN0QixPQUFPLENBRVgsS0FBSyxHQUFJb0IsR0FBU2MsRUFBS0ksUUFBUWdCLFdBQVlsQyxFQUFPOThCLFFBQVMsQ0FDdkQsR0FBSW0rQixHQUFTckIsRUFBTzM4QixRQUFRZytCLE1BQ3hCQSxHQUFPWCxhQUFldmxDLEVBQUF3bEMsV0FBV0MsU0FJTyxLQUF2Q1MsRUFBTzNDLFFBQVV2akMsRUFBQXdqQyxRQUFRQyxXQUs5QnlDLEVBQU8zQyxVQUFZdmpDLEVBQUF3akMsUUFBUUMsU0FDR3A3QixTQUExQjY5QixFQUFPNUMsZ0JBQ1BxQyxFQUFLVyxXQUFXVSxLQUFLbkMsRUFBTzM4QixVQVY1QjI4QixFQUFPb0MsYUFhZixPQUFPLElBckJXdmtCLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQU41YixFQUFBQSxFQUFBQSxRQUFBQSxFQUFBQSxZQUFMOUcsRUFBQUEsRUFBQUEsT0FBQUEsRUFBQUEsV0FBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQUs4RyxHQUFBQSxJQUFBQSxTQUFBQSxHQUFNNGIsR0FBQUEsSUFBQUEsU0FBQUEsR0FDWGdqQixFQUFBQSxPQUFzQkEsU0FBVUEsR0FDdkMsR0FBSUMsRUFBS0MsT0FBUzVsQyxFQUFBd2pDLFFBQVFDLFNBQ3RCLE9BQU8sQ0FFWCxJQUFJa0MsRUFBS1csV0FBV3BqQyxRQUFVLEVBQzFCLE9BQU8sQ0FLWCxLQUhBLEdBQUk2aUMsR0FDQWMsRUFBVSxHQUFJN21DLEdBQUFraUMsS0FDZDRFLEVBQVUsR0FBSTltQyxHQUFBa2lDLEtBQzBCLE9BQXBDNkQsRUFBVUosRUFBS1csV0FBV0ssUUFDOUJaLEVBQVF3QixPQUFPVixFQUFTQyxHQUNuQjltQyxFQUFBa2lDLEtBQUtHLFFBQVF3RSxFQUFTLEdBQUk3bUMsR0FBQWtpQyxRQUMzQnlELEVBQUtjLGNBQWNPLE1BQ2ZqQixRQUFTQSxFQUNUYyxRQUFTQSxFQUNUQyxRQUFTQSxJQUViRCxFQUFVLEdBQUk3bUMsR0FBQWtpQyxLQUNkNEUsRUFBVSxHQUFJOW1DLEdBQUFraUMsS0FJdEIsUUFBTyxJQXhCV3hmLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQU41YixFQUFBQSxFQUFBQSxRQUFBQSxFQUFBQSxZQUFMOUcsRUFBQUEsRUFBQUEsT0FBQUEsRUFBQUEsV0FBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQUs4RyxHQUFBQSxJQUFBQSxTQUFBQSxHQUFRK2IsR0FBQUEsSUFBQUEsU0FBQUEsR0FDeEIya0IsUUFBQUEsR0FBd0JBLEVBQW9CQSxFQUFZQSxFQUFvQkEsRUFBMkJBLEdBQ25HQyxHQUFJQSxHQUFTQSxFQUFLQSxNQUNsQkEsU0FBU0EsRUFBT0Esd0JBQ1BBLEVBQU9BLHNCQUhKRCxFQUFBQSxPQUFNQSxHQURFM2tCLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVIvYixFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQUFMOUcsRUFBQUEsRUFBQUEsT0FBQUEsRUFBQUEsV0FBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQUs4RyxHQUFBQSxJQUFBQSxTQUFBQSxHQUFRK2IsR0FBQUEsSUFBQUEsU0FBQUEsR0FDeEIya0IsUUFBQUEsR0FBOEJBLEVBQW9CQSxFQUFZQSxFQUFvQkEsRUFBMkJBLEdBQ3pHRSxNQUFJQSxHQUFLQSxhQUNFQSxHQUVYQSxFQUFRQSxRQUNSQSxFQUFJQSxXQUNHQSxHQU5LRixFQUFBQSxhQUFZQSxHQURKM2tCLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVIvYixFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQUFMOUcsRUFBQUEsRUFBQUEsT0FBQUEsRUFBQUEsV0FBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQUs4RyxHQUFBQSxJQUFBQSxTQUFBQSxHQUFRK2IsR0FBQUEsSUFBQUEsU0FBQUEsR0FDeEIya0IsUUFBQUEsR0FBNkJBLEVBQW9CQSxFQUFZQSxFQUFvQkEsRUFBMkJBLEdBRXhHRyxNQURBQSxHQUFJQSxXQUNHQSxFQUZLSCxFQUFBQSxZQUFXQSxHQURIM2tCLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVIvYixFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQUFMOUcsRUFBQUEsRUFBQUEsT0FBQUEsRUFBQUEsV0FBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQUs4RyxHQUFBQSxJQUFBQSxTQUFBQSxHQUFRK2IsR0FBQUEsSUFBQUEsU0FBQUEsR0FDeEIya0IsUUFBQUEsR0FBZ0NBLEVBQW9CQSxFQUFZQSxFQUFvQkEsRUFBMkJBLEdBQzNHSSxFQUFRQSxRQUFRQSxFQUFLQSxRQUdyQkEsS0FBS0EsR0FEREEsSUFBTUEsRUFDREEsRUFBU0EsRUFBS0EsS0FBS0EsS0FBS0EsRUFBQUEsY0FBY0EsVUFBV0EsRUFBT0EsU0FDN0RBLEVBQU1BLEVBQU9BLFFBQVFBLFFBQVFBLEVBQUtBLEVBQVNBLEVBQUtBLElBQWVBLEdBQzNEQSxHQUFRQSxLQUtoQkEsTUFGQUEsR0FBS0EsWUFBY0EsR0FFWkEsRUFYS0osRUFBQUEsZUFBY0EsR0FETjNrQixFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFSL2IsRUFBQUEsRUFBQUEsVUFBQUEsRUFBQUEsY0FBTDlHLEVBQUFBLEVBQUFBLE9BQUFBLEVBQUFBLFdBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFLOEcsR0FBQUEsSUFBQUEsU0FBQUEsR0FBUStiLEdBQUFBLElBQUFBLFNBQUFBLEdBQ3hCMmtCLFFBQUFBLEdBQTRCQSxFQUFvQkEsRUFBWUEsRUFBb0JBLEVBQTJCQSxHQUN2R0ssR0FBSUEsR0FBT0EsRUFBS0EsT0FBT0EsSUFDdkJBLEtBQUtBLEVBQ0RBLE9BQU9BLENBRVhBLElBQUlBLEdBQVNBLEVBQUtBLFdBRWxCQSxPQURBQSxHQUFBQSxLQUFLQSxVQUFVQSxFQUFRQSxFQUFJQSxrQkFDdEJBLEVBQUFBLEtBQUtBLGNBQWNBLEVBQVFBLElBS2hDQSxFQUFLQSxLQUFLQSxHQUNMQSxFQUFJQSxJQUFJQSxjQUFjQSxFQUFJQSxFQUFHQSxFQUFJQSxJQUsvQkEsR0FKSEEsRUFBSUEsV0FDR0EsS0FQUEEsRUFBSUEsV0FDR0EsR0FUQ0wsRUFBQUEsV0FBVUEsR0FERjNrQixFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFSL2IsRUFBQUEsRUFBQUEsVUFBQUEsRUFBQUEsY0FBTDlHLEVBQUFBLEVBQUFBLE9BQUFBLEVBQUFBLFdBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFLOEcsR0FBQUEsSUFBQUEsU0FBQUEsR0FBUStiLEdBQUFBLElBQUFBLFNBQUFBLEdBQ3hCMmtCLFFBQUFBLEdBQWtDQSxFQUFvQkEsRUFBWUEsRUFBb0JBLEVBQTJCQSxHQUM3R00sR0FBSUEsRUFBS0EsWUFDTEEsT0FBT0EsQ0FFWEEsSUFBSUEsR0FBTUEsRUFBS0EsT0FBT0EsbUJBQ3RCQSxLQUFLQSxHQUFPQSxFQUFBQSxLQUFLQSxRQUFRQSxHQUNyQkEsT0FBT0EsQ0FFWEEsSUFBSUEsR0FBV0EsRUFBS0EsZ0JBSXBCQSxPQUhBQSxHQUFBQSxLQUFLQSxPQUFPQSxFQUFLQSxHQUNqQkEsRUFBQUEsS0FBS0EsVUFBVUEsRUFBVUEsRUFBSUEsa0JBRXhCQSxFQUFBQSxLQUFLQSxjQUFjQSxFQUFVQSxJQU0zQkEsR0FMSEEsRUFBUUEsUUFDUkEsRUFBSUEsV0FDR0EsR0FmQ04sRUFBQUEsaUJBQWdCQSxHQURSM2tCLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVIvYixFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQUFMOUcsRUFBQUEsRUFBQUEsT0FBQUEsRUFBQUEsV0FBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQUs4RyxHQUFBQSxJQUFBQSxTQUFBQSxHQUFRK2IsR0FBQUEsSUFBQUEsU0FBQUEsR0FDeEIya0IsUUFBQUEsR0FBOEJBLEVBQW9CQSxFQUFZQSxFQUFvQkEsRUFBMkJBLEdBQ3pHTyxHQUFJQSxFQUFLQSxZQUNMQSxPQUFPQSxDQUVYQSxJQUFJQSxHQUFTQSxFQUFLQSxNQUdsQkEsT0FGQUEsR0FBQUEsS0FBS0EsT0FBT0EsRUFBS0EsT0FBT0EsUUFBU0EsR0FDakNBLEVBQUFBLEtBQUtBLFVBQVVBLEVBQVFBLEVBQUlBLGtCQUN0QkEsRUFBQUEsS0FBS0EsY0FBY0EsRUFBUUEsSUFNekJBLEdBTEhBLEVBQVFBLFFBQ1JBLEVBQUlBLFdBQ0dBLEdBVkNQLEVBQUFBLGFBQVlBLEdBREoza0IsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBUi9iLEVBQUFBLEVBQUFBLFVBQUFBLEVBQUFBLGNBQUw5RyxFQUFBQSxFQUFBQSxPQUFBQSxFQUFBQSxXQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBSzhHLEdBQUFBLElBQUFBLFNBQUFBLEdBQVErYixHQUFBQSxJQUFBQSxTQUFBQSxHQUN4QjJrQixRQUFBQSxHQUE0QkEsRUFBb0JBLEVBQVlBLEVBQW9CQSxFQUEyQkEsR0FHdkdRLE1BRkFBLEdBQUlBLE9BQ0pBLEVBQUlBLFNBQVNBLEVBQUtBLE9BQU9BLGNBQ2xCQSxFQUhLUixFQUFBQSxXQUFVQSxHQURGM2tCLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVIvYixFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQUFMOUcsRUFBQUEsRUFBQUEsT0FBQUEsRUFBQUEsV0FBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQUs4RyxHQUFBQSxJQUFBQSxTQUFBQSxHQUFRMlAsR0FBQUEsSUFBQUEsU0FBQUEsR0FDYnd4QixFQUFBQSxjQUErQkEsU0FBVUEsRUFBZUEsRUFBZUEsRUFBaUJBLEVBQW9CQSxHQUVuSCxNQURBcmdDLEdBQUtzZ0MsaUJBQ0UsSUFIYXp4QixFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFSM1AsRUFBQUEsRUFBQUEsVUFBQUEsRUFBQUEsY0FBTDlHLEVBQUFBLEVBQUFBLE9BQUFBLEVBQUFBLFdBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFLOEcsR0FBQUEsSUFBQUEsU0FBQUEsR0FBUTJQLEdBQUFBLElBQUFBLFNBQUFBLEdBQ2J3eEIsRUFBQUEsaUJBQWtDQSxTQUFVQSxFQUFlQSxFQUFlQSxFQUFpQkEsRUFBb0JBLEdBQ3RILElBQUs1RyxFQUFNd0IsV0FBYTdpQyxFQUFBOGlDLFdBQVd3RSxTQUFXLEVBQzFDLE9BQU8sQ0FDWCxJQUFJYSxHQUFLOUcsRUFBTTZGLGtCQUNmLE9BQUlsbkMsR0FBQWtpQyxLQUFLa0YsUUFBUWUsSUFBT0EsRUFBRy9jLFFBQVVnZCxFQUFjaGQsT0FBUytjLEVBQUc5YyxTQUFXK2MsRUFBYy9jLFFBQ3BGcnJCLEVBQUFraUMsS0FBS1QsT0FBTzJHLEVBQWV6RyxFQUFPdUYscUJBQzNCLElBRUosSUFUYXp3QixFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFSM1AsRUFBQUEsRUFBQUEsVUFBQUEsRUFBQUEsY0FBTDlHLEVBQUFBLEVBQUFBLE9BQUFBLEVBQUFBLFdBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFLOEcsR0FBQUEsSUFBQUEsU0FBQUEsR0FBUTJQLEdBQUFBLElBQUFBLFNBQUFBLEdBQ2J3eEIsRUFBQUEsaUJBQWtDQSxTQUFVQSxFQUFlQSxFQUFlQSxFQUFpQkEsRUFBb0JBLEdBR3RILE1BRkF0RyxHQUFPa0IsYUFBZTdpQyxFQUFBOGlDLFdBQVd3RSxRQUNqQ3RuQyxFQUFBa2lDLEtBQUtULE9BQU9FLEVBQU8wRyxZQUFhMUcsRUFBT3dELGVBQ2hDLElBSmExdUIsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBUjNQLEVBQUFBLEVBQUFBLFVBQUFBLEVBQUFBLGNBQUw5RyxFQUFBQSxFQUFBQSxPQUFBQSxFQUFBQSxXQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBSzhHLEdBQUFBLElBQUFBLFNBQUFBLEdBQVEyUCxHQUFBQSxJQUFBQSxTQUFBQSxHQUNid3hCLEVBQUFBLFdBQTRCQSxTQUFVQSxFQUFlQSxFQUFlQSxFQUFpQkEsRUFBb0JBLEdBQ2hILEdBQUlLLEdBQUszRyxFQUFPMEcsV0FDaEJDLEdBQUdsZCxNQUFRa2QsRUFBR2pkLE9BQVMsQ0FDdkIsS0FBSyxHQUFJd1osR0FBU2o5QixFQUFLQyxPQUFRZzlCLEVBQU85OEIsUUFBUyxDQUMzQyxHQUFJKzhCLEdBQVFELEVBQU8zOEIsT0FDbkI0OEIsR0FBTXlELFFBQVFwSCxFQUFNaUgsZUFDcEJwb0MsRUFBQWtpQyxLQUFLVCxPQUFPcUQsRUFBTW9CLE9BQU9tQyxZQUFhQyxHQUUxQyxPQUFPLElBVGE3eEIsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBUjNQLEVBQUFBLEVBQUFBLFVBQUFBLEVBQUFBLGNBQUw5RyxFQUFBQSxFQUFBQSxPQUFBQSxFQUFBQSxXQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBSzhHLEdBQUFBLElBQUFBLFNBQUFBLEdBQVEyUCxHQUFBQSxJQUFBQSxTQUFBQSxHQUNid3hCLEVBQUFBLGNBQStCQSxTQUFVQSxFQUFlQSxFQUFlQSxFQUFpQkEsRUFBb0JBLEdBQ25ILEdBQUlLLEdBQUszRyxFQUFPMEcsV0FTaEIsT0FSQTNGLEdBQUFyVixRQUFRc1YsV0FBVzJGLEVBQUlqSCxHQUN2QnJoQyxFQUFBMmpDLFVBQVU2RSxTQUFTbkgsRUFBTXdDLE9BQVF5RSxHQUNqQ0EsRUFBR2xkLE1BQVExRCxLQUFLQyxJQUFJMmdCLEVBQUdsZCxNQUFPZ2QsRUFBY2hkLE9BQzVDa2QsRUFBR2pkLE9BQVMzRCxLQUFLQyxJQUFJMmdCLEVBQUdqZCxPQUFRK2MsRUFBYy9jLFFBQzFDZ1csRUFBTUMsb0JBQ05nSCxFQUFHbGQsTUFBUTFELEtBQUs2WixNQUFNK0csRUFBR2xkLE9BQ3pCa2QsRUFBR2pkLE9BQVMzRCxLQUFLNlosTUFBTStHLEVBQUdqZCxVQUV2QixJQVhhNVUsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBUjNQLEVBQUFBLEVBQUFBLFVBQUFBLEVBQUFBLGNBQUw5RyxFQUFBQSxFQUFBQSxPQUFBQSxFQUFBQSxXQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBSzhHLEdBQUFBLElBQUFBLFNBQUFBLEdBQVEyUCxHQUFBQSxJQUFBQSxTQUFBQSxHQUNid3hCLEVBQUFBLGlCQUFrQ0EsU0FBVUEsRUFBZUEsRUFBZUEsRUFBaUJBLEVBQW9CQSxHQUl0SCxNQUhBdEcsR0FBT2tCLFlBQWM3aUMsRUFBQThpQyxXQUFXMEIsUUFDaEM3QyxFQUFPNEIsU0FBV3ZqQyxFQUFBd2pDLFFBQVFxQyxZQUMxQmxFLEVBQU9rQixZQUFjN2lDLEVBQUE4aUMsV0FBV2tDLFFBQ3pCLElBTGF2dUIsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBUjNQLEVBQUFBLEVBQUFBLFVBQUFBLEVBQUFBLGNBQUw5RyxFQUFBQSxFQUFBQSxPQUFBQSxFQUFBQSxXQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBSzhHLEdBQUFBLElBQUFBLFNBQUFBLEdBQVEyUCxHQUFBQSxJQUFBQSxTQUFBQSxHQUNid3hCLEVBQUFBLGdCQUFpQ0EsU0FBVUEsRUFBZUEsRUFBZUEsRUFBaUJBLEVBQW9CQSxHQUlySCxNQUhBam9DLEdBQUFraUMsS0FBS1QsT0FBTzJHLEVBQWVqSCxFQUFNaUgsZUFDakNwb0MsRUFBQTJqQyxVQUFVOEUsV0FBV3BILEVBQU13QyxPQUFRMUMsRUFBTWlILGVBQ3pDMUYsRUFBQXJWLFFBQVFzVixXQUFXeEIsRUFBTWlILGNBQWUvRyxJQUNqQyxJQUxhNXFCLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVIzUCxFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQUFMOUcsRUFBQUEsRUFBQUEsT0FBQUEsRUFBQUEsV0FBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQUs4RyxHQUFBQSxJQUFBQSxTQUFBQSxHQUFRMlAsR0FBQUEsSUFBQUEsU0FBQUEsR0FDYnd4QixFQUFBQSxTQUEwQkEsU0FBVUEsRUFBZUEsRUFBZUEsRUFBaUJBLEVBQW9CQSxHQUM5RyxNQUFJNUMsT0FBTStDLEVBQWNoZCxRQUFVaWEsTUFBTStDLEVBQWMvYyxTQUNsRHJyQixFQUFRc2xDLFlBQVkxOUIsRUFBTU8sS0FBTSxzREFDekIsSUFFSixJQU5hc08sRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBUjNQLEVBQUFBLEVBQUFBLFVBQUFBLEVBQUFBLGNBQUw5RyxFQUFBQSxFQUFBQSxPQUFBQSxFQUFBQSxXQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBSzhHLEdBQUFBLElBQUFBLFNBQUFBLEdBQVEyUCxHQUFBQSxJQUFBQSxTQUFBQSxHQUNid3hCLEVBQUFBLG1CQUFvQ0EsU0FBVUEsRUFBZUEsRUFBZUEsRUFBaUJBLEVBQW9CQSxHQUN4SCxHQUFJNUcsRUFBTWtFLGFBQWV2bEMsRUFBQXdsQyxXQUFXQyxRQUFTLENBQ3pDemxDLEVBQUFraUMsS0FBS1QsT0FBTzJHLEVBQWV6RyxFQUFPdUYsbUJBQ2xDLElBQUlvQixHQUFLM0csRUFBTzBHLFdBRWhCLE9BREFDLEdBQUdsZCxNQUFRa2QsRUFBR2pkLE9BQVMsR0FDaEIsRUFFWCxPQUFPLElBUmE1VSxFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFSM1AsRUFBQUEsRUFBQUEsVUFBQUEsRUFBQUEsY0FBTDlHLEVBQUFBLEVBQUFBLE9BQUFBLEVBQUFBLFdBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFLOEcsR0FBQUEsSUFBQUEsU0FBQUEsR0FBWW9jLEdBQUFBLElBQUFBLFNBQUFBLEdBQ2pCd2xCLEVBQUFBLGtCQUF1Q0EsU0FBVUEsRUFBZUEsRUFBZUEsRUFBaUJBLEVBQWlCQSxHQUN4SCxHQUFrRCxLQUE3Q3JILEVBQU13QixXQUFhN2lDLEVBQUE4aUMsV0FBVzZGLFdBQy9CLE9BQU8sQ0FFWCxJQUFJQyxHQUFLakgsRUFBT2tILGFBS2hCLE9BSkE3b0MsR0FBQThQLEtBQUsyeEIsT0FBT0UsRUFBT21ILFlBQWFGLEdBQzVCRyxHQUNBL29DLEVBQUE4UCxLQUFLazVCLE1BQU1KLEVBQUlHLEVBQVFGLGdCQUVwQixJQVZpQjNsQixFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFacGMsRUFBQUEsRUFBQUEsY0FBQUEsRUFBQUEsa0JBQUw5RyxFQUFBQSxFQUFBQSxPQUFBQSxFQUFBQSxXQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBSzhHLEdBQUFBLElBQUFBLFNBQUFBLEdBQVlvYyxHQUFBQSxJQUFBQSxTQUFBQSxHQUNqQndsQixFQUFBQSxnQkFBcUNBLFNBQVVBLEVBQWVBLEVBQWVBLEVBQWlCQSxFQUFpQkEsR0FDdEgsR0FBa0QsS0FBN0NySCxFQUFNd0IsV0FBYTdpQyxFQUFBOGlDLFdBQVc2RixXQUMvQixPQUFPLENBRVgsSUFBSXRjLEdBQUtzVixFQUFPbUgsV0FNaEIsT0FMQTlvQyxHQUFBOFAsS0FBSzJ4QixPQUFPTixFQUFNOEgsV0FBWTVjLEdBQzlCcnNCLEVBQUE4UCxLQUFLazVCLE1BQU0zYyxFQUFJZ1YsRUFBTTJCLGFBQ2pCM0IsRUFBTTZILGNBQ05scEMsRUFBQThQLEtBQUtrNUIsTUFBTTNjLEVBQUlnVixFQUFNNkgsZUFFbEIsSUFYaUJobUIsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBWnBjLEVBQUFBLEVBQUFBLGNBQUFBLEVBQUFBLGtCQUFMOUcsRUFBQUEsRUFBQUEsT0FBQUEsRUFBQUEsV0FBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQUs4RyxHQUFBQSxJQUFBQSxTQUFBQSxHQUFZb2MsR0FBQUEsSUFBQUEsU0FBQUEsR0FDakJ3bEIsRUFBQUEsZ0JBQXFDQSxTQUFVQSxFQUFlQSxFQUFlQSxFQUFpQkEsRUFBaUJBLEdBQ3RILEdBQUlTLEdBQUtoSSxFQUFNaUksWUFDWEMsRUFBU2hJLEVBQU1pSSxxQkFRbkIsT0FQS0QsSUFJREYsRUFBR3BpQixFQUFJc2EsRUFBTWtJLFlBQWNGLEVBQU90aUIsRUFDbENvaUIsRUFBR25pQixFQUFJcWEsRUFBTW1JLGFBQWVILEVBQU9yaUIsSUFKbkNtaUIsRUFBR3BpQixFQUFJLEVBQ1BvaUIsRUFBR25pQixFQUFJLElBS0osSUFYaUI5RCxFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFacGMsRUFBQUEsRUFBQUEsY0FBQUEsRUFBQUEsa0JBQUw5RyxFQUFBQSxFQUFBQSxPQUFBQSxFQUFBQSxXQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBSzhHLEdBQUFBLElBQUFBLFNBQUFBLEdBQVlvYyxHQUFBQSxJQUFBQSxTQUFBQSxHQUNqQndsQixFQUFBQSx5QkFBOENBLFNBQVVBLEVBQWVBLEVBQWVBLEVBQWlCQSxFQUFpQkEsR0FDL0gsTUFBMEQsTUFBckRySCxFQUFNd0IsV0FBYTdpQyxFQUFBOGlDLFdBQVcyRyxvQkFDeEIsR0FFUFYsRUFDQXBILEVBQU8rSCxzQkFBd0JYLEVBQVFXLHVCQUF5QnJJLEVBQU1zSSxpQkFFdEVoSSxFQUFPK0gsc0JBQXdCckksRUFBTXNJLGlCQUdyQ2hJLEVBQU8rSCx3QkFBMEJySSxFQUFNcUksd0JBQ3ZDdkksRUFBTXlJLGtCQUFvQjVwQyxFQUFBOGlDLFdBQVcyRyxvQkFFbEMsS0FkaUJ2bUIsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBWnBjLEVBQUFBLEVBQUFBLGNBQUFBLEVBQUFBLGtCQUFMOUcsRUFBQUEsRUFBQUEsT0FBQUEsRUFBQUEsV0FBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQUs4RyxHQUFBQSxJQUFBQSxTQUFBQSxHQUFZb2MsR0FBQUEsSUFBQUEsU0FBQUEsR0FFakJ3bEIsRUFBQUEsa0JBQXVDQSxTQUFVQSxFQUFlQSxFQUFlQSxFQUFpQkEsRUFBaUJBLEdBQ3hILEdBQW1ELEtBQTlDckgsRUFBTXdCLFdBQWE3aUMsRUFBQThpQyxXQUFXQyxZQUMvQixPQUFPLENBRVgsSUFBSXJCLEdBQUtMLEVBQU1PLFdBQ1hpSSxFQUFNbEksRUFBT21JLG1CQWFqQixRQVpLZixHQUFXL29DLEVBQUF3aEMsS0FBS3VJLFFBQVFoQixFQUFRZSxxQkFDakM5cEMsRUFBQXdoQyxLQUFLQyxPQUFPQyxFQUFJbUksSUFFaEI3cEMsRUFBQXdoQyxLQUFLQyxPQUFPc0gsRUFBUWUsb0JBQXFCRCxHQUNwQzdwQyxFQUFBd2hDLEtBQUt1SSxRQUFRckksSUFDZDFoQyxFQUFBd2hDLEtBQUtvQixhQUFhaUgsRUFBS25JLElBRzFCMWhDLEVBQUF3aEMsS0FBS2EsUUFBUWhCLEVBQU15SSxvQkFBcUJuSSxFQUFPbUksdUJBQ2hEM0ksRUFBTXlJLGtCQUFvQjVwQyxFQUFBOGlDLFdBQVdDLGFBR2xDLElBcEJpQjdmLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVpwYyxFQUFBQSxFQUFBQSxjQUFBQSxFQUFBQSxrQkFBTDlHLEVBQUFBLEVBQUFBLE9BQUFBLEVBQUFBLFdBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFLOEcsR0FBQUEsSUFBQUEsU0FBQUEsR0FBWW9jLEdBQUFBLElBQUFBLFNBQUFBLEdBQ2pCd2xCLEVBQUFBLGtCQUF1Q0EsU0FBVUEsRUFBZUEsRUFBZUEsRUFBaUJBLEVBQWlCQSxHQUN4SCxHQUF1RCxLQUFsRHJILEVBQU13QixXQUFhN2lDLEVBQUE4aUMsV0FBV00sZ0JBQy9CLE9BQU8sQ0FFWCxJQUFJNEcsR0FBUWhxQyxFQUFBOFAsS0FBS202QixTQUFTOUksRUFBTThILFlBQzVCaUIsRUFBUzdJLEVBQU04SSxlQUNuQixLQUFLRCxFQUNELE9BQU8sQ0FFWCxJQUFJRSxHQUFTakosRUFBTWlJLFdBS25CLE9BSkFwcEMsR0FBQThQLEtBQUtvZSxVQUFVOGIsR0FBUUksRUFBT3JqQixHQUFJcWpCLEVBQU9wakIsR0FDekNobkIsRUFBQThQLEtBQUtrNUIsTUFBTWdCLEVBQU9FLEVBQU9HLFVBQ3pCcnFDLEVBQUE4UCxLQUFLb2UsVUFBVThiLEVBQU9JLEVBQU9yakIsRUFBR3FqQixFQUFPcGpCLElBRWhDLElBZmlCOUQsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBWnBjLEVBQUFBLEVBQUFBLGNBQUFBLEVBQUFBLGtCQUFMOUcsRUFBQUEsRUFBQUEsT0FBQUEsRUFBQUEsV0FBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQUs4RyxHQUFBQSxJQUFBQSxTQUFBQSxHQUFZb2MsR0FBQUEsSUFBQUEsU0FBQUEsR0FDakJ3bEIsRUFBQUEsd0JBQTZDQSxTQUFVQSxFQUFlQSxFQUFlQSxFQUFpQkEsRUFBaUJBLEdBQzlILE1BQXlELE1BQXBEckgsRUFBTXdCLFdBQWE3aUMsRUFBQThpQyxXQUFXd0gsbUJBQ3hCLEdBR1gzSSxFQUFPa0IsWUFBYzdpQyxFQUFBOGlDLFdBQVdrQyxPQUs1QitELEdBQ0FwSCxFQUFPNEksYUFBZXhCLEVBQVF3QixhQUFlbEosRUFBTW1KLFFBQ25EN0ksRUFBTzhJLHFCQUF1QjFCLEVBQVEwQixzQkFBeUJwSixFQUFNa0UsYUFBZXZsQyxFQUFBd2xDLFdBQVdDLFVBRS9GOUQsRUFBTzRJLGFBQWVsSixFQUFNbUosUUFDNUI3SSxFQUFPOEkscUJBQXVCcEosRUFBTWtFLGFBQWV2bEMsRUFBQXdsQyxXQUFXQyxTQUk5RHBFLEVBQU1vSix1QkFBeUI5SSxFQUFPOEksdUJBQ3RDOUksRUFBT2tCLFlBQWM3aUMsRUFBQThpQyxXQUFXNEgsVUFDaEN2SixFQUFNeUksa0JBQW9CNXBDLEVBQUE4aUMsV0FBV3dILGtCQUVyQ2pKLEVBQU1rSixlQUFpQjVJLEVBQU80SSxlQUM5QnBKLEVBQU15SSxrQkFBb0I1cEMsRUFBQThpQyxXQUFXd0gsbUJBR2xDLEtBNUJpQnBuQixFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFacGMsRUFBQUEsRUFBQUEsY0FBQUEsRUFBQUEsa0JBQUw5RyxFQUFBQSxFQUFBQSxPQUFBQSxFQUFBQSxXQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBSzhHLEdBQUFBLElBQUFBLFNBQUFBLEdBQVlvYyxHQUFBQSxJQUFBQSxTQUFBQSxHQUNqQndsQixFQUFBQSxhQUFrQ0EsU0FBVUEsRUFBZUEsRUFBZUEsRUFBaUJBLEVBQWlCQSxHQUNuSCxNQUFrRCxNQUE3Q3JILEVBQU13QixXQUFhN2lDLEVBQUE4aUMsV0FBVzZGLFlBQ3hCLEdBRU4zb0MsRUFBQThQLEtBQUtxekIsTUFBTTlCLEVBQU15SCxZQUFhbkgsRUFBT21ILGFBSzlCOW9DLEVBQUE4UCxLQUFLcXpCLE1BQU05QixFQUFNd0gsY0FBZWxILEVBQU9rSCxpQkFDL0MxSCxFQUFNeUksa0JBQW9CNXBDLEVBQUE4aUMsV0FBVzZGLFlBSHJDaEgsRUFBT2tCLFlBQWM3aUMsRUFBQThpQyxXQUFXNEgsVUFDaEN2SixFQUFNeUksa0JBQW9CNXBDLEVBQUE4aUMsV0FBVzZGLFdBTXpDaEgsRUFBT2tCLFlBQWM3aUMsRUFBQThpQyxXQUFXa0MsUUFFekIsS0FqQmlCOWhCLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVpwYyxFQUFBQSxFQUFBQSxjQUFBQSxFQUFBQSxrQkFBTDlHLEVBQUFBLEVBQUFBLE9BQUFBLEVBQUFBLFdBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFLOEcsR0FBQUEsSUFBQUEsU0FBQUEsR0FBWW9jLEdBQUFBLElBQUFBLFNBQUFBLEdBQ2pCd2xCLEVBQUFBLHlCQUE4Q0EsU0FBVUEsRUFBZUEsRUFBZUEsRUFBaUJBLEVBQWlCQSxHQUMvSCxHQUFJaUMsR0FBZXhKLEVBQU15SSxpQkFBbUI1cEMsRUFBQThpQyxXQUFXOEgsYUFDdkQsSUFBcUIsSUFBakJELEVBQ0EsT0FBTyxDQUNYLEtBQUssR0FBSTlGLEdBQVNqOUIsRUFBS0MsT0FBUWc5QixFQUFPOThCLFFBQ2xDODhCLEVBQU8zOEIsUUFBUWcrQixPQUFPckQsWUFBYzhILEVBQ3BDakksRUFBQTBELFFBQVF5RSxlQUFlaEcsRUFBTzM4QixRQUVsQyxRQUFPLElBVGlCZ2IsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBWnBjLEVBQUFBLEVBQUFBLGNBQUFBLEVBQUFBLGtCQUFMOUcsRUFBQUEsRUFBQUEsT0FBQUEsRUFBQUEsV0FBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQUs4RyxHQUFBQSxJQUFBQSxTQUFBQSxHQUFVMmMsR0FBQUEsSUFBQUEsU0FBQUEsR0FDZnFuQixFQUFBQSxlQUFrQ0EsU0FBVUEsRUFBZUEsRUFBZUEsRUFBaUJBLEdBQ2xHLEdBQStDLEtBQTFDekosRUFBTXdCLFdBQWE3aUMsRUFBQThpQyxXQUFXa0MsUUFDL0IsT0FBTyxDQUVYLElBQUkrRixHQUFTNUosRUFBTTZKLFVBU25CLE9BUkFELEdBQU8zZixNQUFRaVcsRUFBTWtJLFlBQ3JCd0IsRUFBTzFmLE9BQVNnVyxFQUFNbUksYUFDdEI5RyxFQUFBclYsUUFBUXNWLFdBQVdvSSxFQUFRMUosR0FDdkJnRSxNQUFNMEYsRUFBTzNmLFNBQ2IyZixFQUFPM2YsTUFBUSxHQUNmaWEsTUFBTTBGLEVBQU8xZixVQUNiMGYsRUFBTzFmLE9BQVMsSUFFYixJQWRlNUgsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBVjNjLEVBQUFBLEVBQUFBLFlBQUFBLEVBQUFBLGdCQUFMOUcsRUFBQUEsRUFBQUEsT0FBQUEsRUFBQUEsV0FBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQUs4RyxHQUFBQSxJQUFBQSxTQUFBQSxHQUFVMmMsR0FBQUEsSUFBQUEsU0FBQUEsR0FDZnFuQixFQUFBQSxZQUErQkEsU0FBVUEsRUFBZUEsRUFBZUEsRUFBaUJBLEdBQy9GLEdBQStDLEtBQTFDekosRUFBTXdCLFdBQWE3aUMsRUFBQThpQyxXQUFXa0MsUUFDL0IsT0FBTyxDQUVYLElBQUk1cEIsR0FBSXVtQixFQUFPc0osUUFDWEMsRUFBTXZKLEVBQU93SixtQkFDakIvdkIsR0FBRTJMLEVBQUlta0IsRUFBSW5rQixFQUFJLEVBQ2QzTCxFQUFFNEwsRUFBSWtrQixFQUFJbGtCLEVBQUksQ0FDZCxJQUFJZ2IsR0FBS2IsRUFBTTZKLFVBQ2Y1dkIsR0FBRWdRLE1BQVE4ZixFQUFJOWYsTUFBUTRXLEVBQUc1VyxNQUN6QmhRLEVBQUVpUSxPQUFTNmYsRUFBSTdmLE9BQVMyVyxFQUFHM1csTUFHM0IsS0FBSyxHQURENmEsR0FDS3JCLEVBQVNqOUIsRUFBS0MsT0FBUWc5QixFQUFPOThCLFFBQ2xDbStCLEVBQVNyQixFQUFPMzhCLFFBQVFnK0IsT0FDcEJBLEVBQU91RSxzQkFDUHpxQyxFQUFBd2hDLEtBQUs0SixNQUFNRixFQUFLaEYsRUFBT21GLHlCQUcvQixRQUFPLElBcEJlNW5CLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVYzYyxFQUFBQSxFQUFBQSxZQUFBQSxFQUFBQSxnQkFBTDlHLEVBQUFBLEVBQUFBLE9BQUFBLEVBQUFBLFdBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFLOEcsR0FBQUEsSUFBQUEsU0FBQUEsR0FBVTJjLEdBQUFBLElBQUFBLFNBQUFBLEdBQ2ZxbkIsRUFBQUEsZ0JBQW1DQSxTQUFVQSxFQUFlQSxFQUFlQSxFQUFpQkEsR0FDbkcsTUFBK0MsTUFBMUN6SixFQUFNd0IsV0FBYTdpQyxFQUFBOGlDLFdBQVdrQyxTQUN4QixHQUVYdEMsRUFBQXJWLFFBQVFpZSw0QkFBNEIzSixFQUFPMEoseUJBQTBCMUosRUFBT3dKLG9CQUFxQjlKLEVBQU1rSyxjQUFlbEssRUFBTXlILFlBQWF6SCxFQUFNbUssS0FBTW5LLEVBQU1PLFlBQzNKYyxFQUFBclYsUUFBUWllLDRCQUE0QjNKLEVBQU84SiwwQkFBMkI5SixFQUFPd0osb0JBQXFCOUosRUFBTWtLLGNBQWVsSyxFQUFNd0gsY0FBZXhILEVBQU1tSyxLQUFNbkssRUFBTU8sYUFFdkosS0FSZW5lLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVYzYyxFQUFBQSxFQUFBQSxZQUFBQSxFQUFBQSxnQkFBTDlHLEVBQUFBLEVBQUFBLE9BQUFBLEVBQUFBLFdBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFLOEcsR0FBQUEsSUFBQUEsU0FBQUEsR0FBVTJjLEdBQUFBLElBQUFBLFNBQUFBLEdBQ2ZxbkIsRUFBQUEsY0FBaUNBLFNBQVVBLEVBQWVBLEVBQWVBLEVBQWlCQSxHQUNqRyxHQUErQyxLQUExQ3pKLEVBQU13QixXQUFhN2lDLEVBQUE4aUMsV0FBV2tDLFFBQy9CLE9BQU8sQ0FFWCxJQURBN0QsRUFBTXVLLGNBQWUsRUFDaEIxckMsRUFBQXdoQyxLQUFLYSxRQUFRaEIsRUFBTWdLLHlCQUEwQjFKLEVBQU8wSiw0QkFLN0NyckMsRUFBQXdoQyxLQUFLYSxRQUFRaEIsRUFBTThKLG9CQUFxQnhKLEVBQU93SixzQkFBd0I5SixFQUFNc0ssbUJBQ3JGeEssRUFBTXVLLGNBQWUsT0FOMkQsQ0FDaEYsR0FBSTdKLEdBQUtqNkIsRUFBS2drQyxXQUNkL0osR0FBR2dLLGVBQ0hoSyxFQUFHaUssV0FBV3pLLEVBQU1vSywyQkFDcEJ0SyxFQUFNdUssY0FBZSxFQUt6QixNQURBL0osR0FBT2dLLGlCQUFrQixHQUNsQixJQWRlbG9CLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVYzYyxFQUFBQSxFQUFBQSxZQUFBQSxFQUFBQSxnQkFBTDlHLEVBQUFBLEVBQUFBLE9BQUFBLEVBQUFBLFdBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFLOEcsR0FBQUEsSUFBQUEsU0FBQUEsR0FBVTJjLEdBQUFBLElBQUFBLFNBQUFBLEdBQ2ZxbkIsRUFBQUEsa0JBQXFDQSxTQUFVQSxFQUFlQSxFQUFlQSxFQUFpQkEsR0FDckcsR0FBbUQsS0FBOUN6SixFQUFNd0IsV0FBYTdpQyxFQUFBOGlDLFdBQVdpSixjQUFzQjVLLEVBQU02SyxjQUMzRCxPQUFPLENBQ1gsSUFBSUMsR0FBUXRLLEVBQU91SyxXQUduQixPQUZBdGtDLEdBQUtna0MsWUFBWUUsV0FBV0csR0FDNUJBLEVBQU1sbEIsRUFBSWtsQixFQUFNamxCLEVBQUlpbEIsRUFBTTdnQixNQUFRNmdCLEVBQU01Z0IsT0FBUyxHQUMxQyxJQVBlNUgsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBVjNjLEVBQUFBLEVBQUFBLFlBQUFBLEVBQUFBLGdCQUFMOUcsRUFBQUEsRUFBQUEsT0FBQUEsRUFBQUEsV0FBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQUs4RyxHQUFBQSxJQUFBQSxTQUFBQSxHQUFVMmMsR0FBQUEsSUFBQUEsU0FBQUEsR0FDZnFuQixFQUFBQSxpQkFBb0NBLFNBQVVBLEVBQWVBLEVBQWVBLEVBQWlCQSxHQUNwRyxNQUFrRCxNQUE3Q3pKLEVBQU13QixXQUFhN2lDLEVBQUE4aUMsV0FBVzRILFlBQXFCdkosRUFBTXVLLGNBRTlEL0osRUFBT2tCLFlBQWM3aUMsRUFBQThpQyxXQUFXaUosV0FDaEM1SyxFQUFNNkssZUFBZ0IsRUFDdEJoc0MsRUFBQXdoQyxLQUFLNEosTUFBTXpKLEVBQU91SyxZQUFhdkssRUFBTzhKLDRCQUMvQixJQUpJLElBSFdob0IsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBVjNjLEVBQUFBLEVBQUFBLFlBQUFBLEVBQUFBLGdCQUFMOUcsRUFBQUEsRUFBQUEsT0FBQUEsRUFBQUEsV0FBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQUs4RyxHQUFBQSxJQUFBQSxTQUFBQSxHQUFPa2QsR0FBQUEsSUFBQUEsU0FBQUEsR0FDWm1vQixFQUFBQSxVQUEwQkEsU0FBVUEsRUFBZUEsRUFBZUEsRUFBaUJBLEVBQW9CQSxFQUFjQSxHQUM1SCxHQUFJWCxHQUFPbkssRUFBTW1LLElBR2pCLE9BRklBLElBQ0Eza0IsRUFBSXVsQixhQUFhWixJQUNkLElBTFl4bkIsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBUGxkLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQUw5RyxFQUFBQSxFQUFBQSxPQUFBQSxFQUFBQSxXQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBSzhHLEdBQUFBLElBQUFBLFNBQUFBLEdBQU9rZCxHQUFBQSxJQUFBQSxTQUFBQSxHQUNabW9CLEVBQUFBLFNBQXlCQSxTQUFVQSxFQUFlQSxFQUFlQSxFQUFpQkEsRUFBb0JBLEVBQWNBLEdBQzNILE9BQU8sSUFGWW5vQixFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFQbGQsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBTDlHLEVBQUFBLEVBQUFBLE9BQUFBLEVBQUFBLFdBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFLOEcsR0FBQUEsSUFBQUEsU0FBQUEsR0FBT2tkLEdBQUFBLElBQUFBLFNBQUFBLEdBQ1ptb0IsRUFBQUEsV0FBMkJBLFNBQVVBLEVBQWVBLEVBQWVBLEVBQWlCQSxFQUFvQkEsRUFBY0EsR0FDN0gsR0FBSUUsR0FBU2hMLEVBQU1nTCxNQUNuQixPQUFLQSxJQUVMQSxFQUFPQyxXQUFXemxCLEdBQ2xCQSxFQUFJd0gsV0FDRyxJQUhJLElBSlFySyxFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFQbGQsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBTDlHLEVBQUFBLEVBQUFBLE9BQUFBLEVBQUFBLFdBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFLOEcsR0FBQUEsSUFBQUEsU0FBQUEsR0FBT2tkLEdBQUFBLElBQUFBLFNBQUFBLEdBQ1ptb0IsRUFBQUEsZUFBK0JBLFNBQVVBLEVBQWVBLEVBQWVBLEVBQWlCQSxFQUFvQkEsRUFBY0EsR0FJakksTUFIQXRsQixHQUFJb0gsT0FDSnBILEVBQUkwbEIsU0FBU2xMLEVBQU15SCxhQUNuQmppQixFQUFJMmxCLElBQUlDLFlBQWNwTCxFQUFNa0osY0FDckIsSUFMWXZtQixFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFQbGQsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBTDlHLEVBQUFBLEVBQUFBLE9BQUFBLEVBQUFBLFdBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFLOEcsR0FBQUEsSUFBQUEsU0FBQUEsR0FBT2tkLEdBQUFBLElBQUFBLFNBQUFBLEdBQ1ptb0IsRUFBQUEsVUFBMEJBLFNBQVVBLEVBQWVBLEVBQWVBLEVBQWlCQSxFQUFvQkEsRUFBY0EsR0FDNUgsR0FBSUUsR0FBU2hMLEVBQU1nTCxNQUNuQixPQUFLQSxJQUVMeGxCLEVBQUlvSCxPQUNKb2UsRUFBT0ssVUFBVTdsQixJQUNWLElBSEksSUFKUTdDLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVBsZCxFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFMOUcsRUFBQUEsRUFBQUEsT0FBQUEsRUFBQUEsV0FBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQUs4RyxHQUFBQSxJQUFBQSxTQUFBQSxHQUFPa2QsR0FBQUEsSUFBQUEsU0FBQUEsR0FDWm1vQixFQUFBQSxlQUErQkEsU0FBVUEsRUFBZUEsRUFBZUEsRUFBaUJBLEVBQW9CQSxFQUFjQSxHQUNqSSxJQUFLLEdBQUl0SCxHQUFTajlCLEVBQUtDLEtBQUs3SCxFQUFBMnNDLGNBQWNDLFVBQVcvSCxFQUFPOThCLFFBQ3hEODhCLEVBQU8zOEIsUUFBUWdpQyxPQUFPcmpCLEVBQUtzYSxFQUFNMEwsYUFFckMsUUFBTyxJQUxZN29CLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVBsZCxFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFMOUcsRUFBQUEsRUFBQUEsT0FBQUEsRUFBQUEsV0FBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQUs4RyxHQUFBQSxJQUFBQSxTQUFBQSxHQUFPa2QsR0FBQUEsSUFBQUEsU0FBQUEsR0FDWm1vQixFQUFBQSxlQUErQkEsU0FBVUEsRUFBZUEsRUFBZUEsRUFBaUJBLEVBQW9CQSxFQUFjQSxHQUVqSSxNQURBdGxCLEdBQUl3SCxXQUNHLElBSFlySyxFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFQbGQsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBTDlHLEVBQUFBLEVBQUFBLE9BQUFBLEVBQUFBLFdBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFLOEcsR0FBQUEsSUFBQUEsU0FBQUEsR0FBT2tkLEdBQUFBLElBQUFBLFNBQUFBLEdBQ1ptb0IsRUFBQUEsU0FBeUJBLFNBQVVBLEVBQWVBLEVBQWVBLEVBQWlCQSxFQUFvQkEsRUFBY0EsR0FDM0gsUUFBUzlLLEVBQU1vSixzQkFDZSxJQUFyQnBKLEVBQU1rSixjQUF1QixLQUhuQnZtQixFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFQbGQsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBTDlHLEVBQUFBLEVBQUFBLE9BQUFBLEVBQUFBLFdBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFLOEcsR0FBQUEsSUFBQUEsU0FBQUEsR0FBT2tkLEdBQUFBLElBQUFBLFNBQUFBLEdBQ1ptb0IsRUFBQUEsZUFBK0JBLFNBQVVBLEVBQWVBLEVBQWVBLEVBQWlCQSxFQUFvQkEsRUFBY0EsR0FDakksR0FBSXRrQixHQUFJc1osRUFBTTBMLFlBSWQsT0FIQTdzQyxHQUFBd2hDLEtBQUtDLE9BQU9KLEVBQU1vSywwQkFBMkI1akIsR0FDN0M3bkIsRUFBQXdoQyxLQUFLc0wsU0FBU2psQixHQUNkN25CLEVBQUF3aEMsS0FBS29CLGFBQWEvYSxFQUFHa2xCLEdBQ2RsbEIsRUFBRXVELE1BQVEsR0FBS3ZELEVBQUV3RCxPQUFTLElBTmRySCxFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFQbGQsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBTDlHLEVBQUFBLEVBQUFBLE9BQUFBLEVBQUFBLFdBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFLOEcsR0FBQUEsSUFBQUEsU0FBQUEsR0FBT3NmLEdBQUFBLElBQUFBLFNBQUFBLEdBQ1o0bUIsRUFBQUEsY0FBOEJBLFNBQVVBLEVBQWVBLEVBQWVBLEVBQWlCQSxHQUU5RixNQURBN0wsR0FBTThMLFdBQVksR0FDWCxJQUhZN21CLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVB0ZixFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFMOUcsRUFBQUEsRUFBQUEsT0FBQUEsRUFBQUEsV0FBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQUs4RyxHQUFBQSxJQUFBQSxTQUFBQSxHQUFPc2YsR0FBQUEsSUFBQUEsU0FBQUEsR0FDWjRtQixFQUFBQSxjQUE4QkEsU0FBVUEsRUFBZUEsRUFBZUEsRUFBaUJBLEdBQzlGLEdBQUloTCxHQUFLTCxFQUFPcUosVUFFaEIsT0FEQWhKLEdBQUc1VyxNQUFRNFcsRUFBRzNXLE9BQVMsRUFDbkJnVyxFQUFNa0UsYUFBZXZsQyxFQUFBd2xDLFdBQVdDLFNBQ3pCLEVBR1B0RSxFQUFNOEwsV0FDTmp0QyxFQUFBa2lDLEtBQUtULE9BQU9KLEVBQU1nQyxXQUFZckIsSUFDdkIsSUFHWFUsRUFBQXJWLFFBQVFzVixXQUFXWCxFQUFJWCxJQUNoQixLQWRZamIsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBUHRmLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQUw5RyxFQUFBQSxFQUFBQSxPQUFBQSxFQUFBQSxXQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBT3V1QixHQUFBQSxJQUFBQSxTQUFBQSxHQUFRTSxHQUFBQSxJQUFBQSxTQUFBQSxHQUMxQnFlLFFBQUFBLEdBQXNCQSxFQUErQkEsRUFBV0EsRUFBV0EsRUFBZUEsR0FDdEZDLEdBQUlBLEdBQVVBLEVBQVFBLEVBQ2xCQSxFQUFVQSxFQUFTQSxFQUNuQkEsRUFBUUEsRUFBSUEsRUFDWkEsRUFBU0EsRUFBSUEsRUFDYkEsRUFBVUEsRUFBSUEsRUFDZEEsRUFBVUEsRUFBSUEsQ0FHbEJBLElBREFBLEVBQUlBLFlBQ0FBLElBQVVBLEVBRVZBLFdBREFBLEdBQUlBLElBQUlBLEVBQVNBLEVBQVNBLEVBQVNBLEVBQWFBLEVBQVZBLEtBQUtBLElBQVFBLEVBSXZEQSxJQUFJQSxHQUFRQSxTQUNSQSxFQUFLQSxFQUFVQSxFQUNmQSxFQUFLQSxFQUFVQSxDQUduQkEsR0FBSUEsT0FBT0EsRUFBR0EsR0FFZEEsRUFBSUEsY0FBY0EsRUFBR0EsRUFBVUEsRUFBSUEsRUFBVUEsRUFBSUEsRUFBR0EsRUFBU0EsR0FFN0RBLEVBQUlBLGNBQWNBLEVBQVVBLEVBQUlBLEVBQUdBLEVBQU9BLEVBQVVBLEVBQUlBLEVBQU9BLEdBRS9EQSxFQUFJQSxjQUFjQSxFQUFPQSxFQUFVQSxFQUFJQSxFQUFVQSxFQUFJQSxFQUFRQSxFQUFTQSxHQUV0RUEsRUFBSUEsY0FBY0EsRUFBVUEsRUFBSUEsRUFBUUEsRUFBR0EsRUFBVUEsRUFBSUEsRUFBR0EsR0FDNURBLEVBQUlBLFlBNUJRRCxFQUFBQSxLQUFJQSxHQURNcmUsRUFBQUEsRUFBQUEsVUFBQUEsRUFBQUEsY0FBUk4sRUFBQUEsRUFBQUEsVUFBQUEsRUFBQUEsY0FBUHZ1QixFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBT3V1QixHQUFBQSxJQUFBQSxTQUFBQSxHQUFNQyxHQUFBQSxJQUFBQSxTQUFBQSxHQUt4QjRlLEdBQUFBLEdBQUFBLFNBQUFBLEdBQ0lDLFFBQUFBLEtBQ0lDLEVBQUFBLEtBQUFBLE1BQ0FBLEtBQUtBLGFBQWFBLGVBQWdCQSxFQUFBQSxPQUFPQSxjQUNwQ0EsYUFBYUEsaUJBQWtCQSxFQUFBQSxPQUFPQSxnQkFDdENBLGNBQWNBLGVBQWdCQSxjQUFlQSxFQUFBQSxPQUFPQSxhQUNwREEsY0FBY0EsY0FBZUEsZUFBZ0JBLEVBQUFBLE9BQU9BLGNBQ3BEQSxjQUFjQSxlQUFnQkEsWUFBYUEsRUFBQUEsT0FBT0EsV0FDbERBLGNBQWNBLFlBQWFBLGNBQWVBLEVBQUFBLE9BQU9BLGFBRTlERCxNQVZ5Q0EsV0FBQUEsRUFBQUEsR0FVekNBLEdBVnlDRCxFQUFBQSxLQUFLQSxRQUFRQSxlQUF6Q0EsR0FBQUEsb0JBQW1CQSxHQUxSNWUsRUFBQUEsRUFBQUEsVUFBQUEsRUFBQUEsY0FBTkQsRUFBQUEsRUFBQUEsUUFBQUEsRUFBQUEsWUFBUHZ1QixFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFSQSxVQUFBQSxZQ0VQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBT3V1QixHQUFBQSxJQUFBQSxTQUFBQSxHQUFRTSxHQUFBQSxJQUFBQSxTQUFBQSxHQUsxQjBlLEdBQUFBLEdBQUFBLFNBQUFBLEdBQ0lDLFFBQUFBLEtBQ0lDLEVBQUFBLEtBQUFBLE1BQ0FBLEtBQUtBLGFBQWFBLFlBQWFBLEVBQU9BLFdBRTlDRCxNQUwyQ0EsV0FBQUEsRUFBQUEsR0FLM0NBLEdBTDJDRCxFQUFBQSxNQUFNQSxRQUFRQSxvQkFBNUNBLEdBQUFBLHNCQUFxQkEsQ0FPbENBLElBQWNBLElBQWRBLFNBQWNBLEdBQ1ZHLFFBQUFBLEdBQTJCQSxFQUFvQkEsRUFBWUEsRUFBeUJBLEdBQ2hGQyxHQUFJQSxHQUFLQSxFQUFLQSxPQUFPQSxTQUVyQkEsT0FEQUEsR0FBQUEsUUFBUUEsS0FBS0EsRUFBSUEsSUFBS0EsRUFBR0EsRUFBR0EsRUFBR0EsRUFBR0EsRUFBR0EsTUFBT0EsRUFBR0EsU0FDeENBLEVBSEtELEVBQUFBLFVBQVNBLEdBRGZILEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBWlkxZSxFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQTtFQUFSTixFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQUFQdnVCLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVJBLFVBQUFBLFlDRlAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFPdXVCLEdBQUFBLElBQUFBLFNBQUFBLEdBQU1DLEdBQUFBLElBQUFBLFNBQUFBLEdBVXhCb2YsR0FBQUEsR0FBQUEsU0FBQUEsR0FDSUMsUUFBQUEsS0FDSUMsRUFBQUEsS0FBQUEsTUFDQUEsS0FBS0EsZUFBZUEsYUFBY0Esb0JBQXFCQSxFQUFBQSxPQUFPQSxtQkFDekRBLGFBQWFBLGFBQWNBLEVBQUFBLE9BQU9BLFlBa0IvQ0QsTUF0QnlDQSxXQUFBQSxFQUFBQSxHQU9yQ0EsRUFBQUEsVUFBQUEsYUFBQUEsV0FDSUUsR0FBSUEsR0FBa0JBLEVBQUFBLFVBQU1BLGFBQVlBLEtBQUFBLEtBRXhDQSxPQURBQSxHQUFPQSxjQUFnQkEsR0FBSUEsR0FBQUEsS0FDcEJBLEdBR1hGLEVBQUFBLFVBQUFBLFFBQUFBLFNBQVNBLEVBQWVBLEVBQWVBLEdBQ25DRyxFQUFBQSxLQUFLQSxPQUFPQSxFQUFNQSxjQUFlQSxFQUFPQSxlQUN4Q0EsRUFBQUEsVUFBTUEsUUFBT0EsS0FBQUEsS0FBQ0EsRUFBT0EsRUFBT0EsSUFHaENILEVBQUFBLFVBQUFBLE1BQUFBLFNBQU9BLEVBQWVBLEVBQWVBLEdBQ2pDSSxFQUFBQSxVQUFNQSxNQUFLQSxLQUFBQSxLQUFDQSxFQUFPQSxFQUFPQSxHQUMxQkEsRUFBQUEsS0FBS0EsT0FBT0EsRUFBT0EsY0FBZUEsRUFBTUEsZ0JBRWhESixHQXRCeUNELEVBQUFBLEtBQUtBLFFBQVFBLGVBQXpDQSxHQUFBQSxvQkFBbUJBLEdBVlJwZixFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQUFORCxFQUFBQSxFQUFBQSxRQUFBQSxFQUFBQSxZQUFQdnVCLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVJBLFVBQUFBLFlDRVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFPdXVCLEdBQUFBLElBQUFBLFNBQUFBLEdBQVFNLEdBQUFBLElBQUFBLFNBQUFBLEdBQzFCcWYsR0FBQUEsR0FBQUEsU0FBQUEsR0FDSUMsUUFBQUEsS0FDSUMsRUFBQUEsS0FBQUEsTUFDQUEsS0FBS0EsZUFBZUEsYUFBY0Esa0JBQW1CQSxFQUFPQSxpQkFFcEVELE1BTDJDQSxXQUFBQSxFQUFBQSxHQUszQ0EsR0FMMkNELEVBQUFBLE1BQU1BLFFBQVFBLG9CQUE1Q0EsR0FBQUEsc0JBQXFCQSxDQU9sQ0EsSUFBY0EsSUFBZEEsU0FBY0EsR0FDVkcsUUFBQUEsR0FBaUNBLEVBQTZCQSxFQUE2QkEsRUFBK0JBLEdBQ3RIQyxHQUFJQSxHQUFZQSxFQUFNQSxhQUV0QkEsT0FEQUEsR0FBVUEsTUFBUUEsRUFBVUEsT0FBU0EsR0FDOUJBLEVBSEtELEVBQUFBLGdCQUFlQSxHQURyQkgsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFSWXJmLEVBQUFBLEVBQUFBLFVBQUFBLEVBQUFBLGNBQVJOLEVBQUFBLEVBQUFBLFVBQUFBLEVBQUFBLGNBQVB2dUIsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBUkEsVUFBQUEsWUNGUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQU91dUIsR0FBQUEsSUFBQUEsU0FBQUEsR0FBTUMsR0FBQUEsSUFBQUEsU0FBQUEsR0FxQnhCK2YsR0FBQUEsR0FBQUEsU0FBQUEsR0FDSUMsUUFBQUEsS0FDSUMsRUFBQUEsS0FBQUEsTUFDQUEsS0FBS0EsZUFBZUEsV0FBWUEsaUJBQWtCQSxFQUFBQSxPQUFPQSxnQkFDcERBLGVBQWVBLFdBQVlBLGNBQWVBLEVBQUFBLE9BQU9BLGFBQ2pEQSxhQUFhQSxXQUFZQSxFQUFBQSxPQUFPQSxVQUNoQ0EsY0FBY0EsV0FBWUEsT0FBUUEsRUFBQUEsT0FBT0EsTUFDekNBLGNBQWNBLE9BQVFBLGFBQWNBLEVBQUFBLE9BQU9BLFlBQzNDQSxjQUFjQSxhQUFjQSxTQUFVQSxFQUFBQSxPQUFPQSxRQVExREQsTUFoQndDQSxXQUFBQSxFQUFBQSxHQVdwQ0EsRUFBQUEsVUFBQUEsWUFBQUEsV0FDSUUsR0FBSUEsR0FBZ0JBLEVBQUFBLFVBQU1BLFlBQVdBLEtBQUFBLEtBRXJDQSxPQURBQSxHQUFNQSxZQUFhQSxFQUNaQSxHQUVmRixHQWhCd0NELEVBQUFBLEtBQUtBLE9BQU9BLGNBQXZDQSxHQUFBQSxtQkFBa0JBLEdBckJQL2YsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBTkQsRUFBQUEsRUFBQUEsUUFBQUEsRUFBQUEsWUFBUHZ1QixFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFSQSxVQUFBQSxZQ0VQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBT3V1QixHQUFBQSxJQUFBQSxTQUFBQSxHQUFRTSxHQUFBQSxJQUFBQSxTQUFBQSxHQVMxQjhmLEdBQUFBLEdBQUFBLFNBQUFBLEdBQ0lDLFFBQUFBLEtBQ0lDLEVBQUFBLEtBQUFBLE1BQ0FBLEtBQUtBLGFBQWFBLFdBQVlBLEVBQU9BLFVBRTdDRCxNQUwwQ0EsV0FBQUEsRUFBQUEsR0FLMUNBLEdBTDBDRCxFQUFBQSxNQUFNQSxPQUFPQSxtQkFBMUNBLEdBQUFBLHFCQUFvQkEsQ0FPakNBLElBQWNBLElBQWRBLFNBQWNBLEdBQ1ZHLFFBQUFBLEdBQTBCQSxFQUFlQSxFQUFlQSxFQUFpQkEsRUFBZ0NBLEdBQ3JHQyxJQUFLQSxFQUFNQSxXQUNQQSxPQUFPQSxDQUVYQSxJQUFJQSxHQUFLQSxFQUFNQSxTQUdmQSxPQUZBQSxHQUFBQSxRQUFRQSxLQUFLQSxFQUFJQSxJQUFLQSxFQUFHQSxFQUFHQSxFQUFHQSxFQUFHQSxFQUFHQSxNQUFPQSxFQUFHQSxTQUV4Q0EsRUFQS0QsRUFBQUEsU0FBUUEsR0FEZEgsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFoQlk5ZixFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFSTixFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQUFQdnVCLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFPdXVCLEdBQUFBLElBQUFBLFNBQUFBLEdBQUtVLEdBQUFBLElBQUFBLFNBQUFBLEdBU3ZCK2YsR0FBQUEsR0FBQUEsU0FBQUEsR0FDSUMsUUFBQUEsS0FDSUMsRUFBQUEsS0FBQUEsTUFDQUEsS0FBS0EsZUFBZUEsb0JBQXFCQSxZQUFhQSxFQUFPQSxXQUN4REEsYUFBYUEsb0JBQXFCQSxFQUFPQSxtQkFFdERELE1BTndDQSxXQUFBQSxFQUFBQSxHQU14Q0EsR0FOd0NELEVBQUFBLE1BQU1BLFFBQVFBLG9CQUF6Q0EsR0FBQUEsbUJBQWtCQSxDQVEvQkEsSUFBY0EsSUFBZEEsU0FBY0EsR0FDVkcsUUFBQUEsR0FBMkJBLEVBQWVBLEVBQWVBLEVBQWlCQSxHQUN0RUMsT0FBT0EsRUFHWEQsUUFBQUEsR0FBbUNBLEVBQWVBLEVBQWVBLEVBQWlCQSxHQUM5RUUsR0FBSUEsR0FBS0EsRUFBT0EsYUFFaEJBLElBREFBLEVBQUdBLEVBQUlBLEVBQUdBLEVBQUlBLEVBQUdBLE1BQVFBLEVBQUdBLE9BQVNBLEVBQ2pDQSxFQUFNQSxLQUFNQSxDQUNaQSxHQUFJQSxHQUFTQSxFQUFNQSxLQUFLQSxVQUFVQSxFQUNsQ0EsR0FBQUEsS0FBS0EsT0FBT0EsRUFBUUEsR0FHeEJBLE9BQU9BLEVBWktGLEVBQUFBLFVBQVNBLEVBSVRBLEVBQUFBLGtCQUFpQkEsR0FMdkJILEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBakJTL2YsRUFBQUEsRUFBQUEsVUFBQUEsRUFBQUEsY0FBTFYsRUFBQUEsRUFBQUEsT0FBQUEsRUFBQUEsV0FBUHZ1QixFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBT3V1QixHQUFBQSxJQUFBQSxTQUFBQSxHQUFLYyxHQUFBQSxJQUFBQSxTQUFBQSxHQVl2QmlnQixHQUFBQSxHQUFBQSxTQUFBQSxHQUNJQyxRQUFBQSxLQUNJQyxFQUFBQSxLQUFBQSxNQUNBQSxLQUFLQSxhQUFhQSxZQUFhQSxFQUFPQSxXQUU5Q0QsTUFMd0NBLFdBQUFBLEVBQUFBLEdBS3hDQSxHQUx3Q0QsRUFBQUEsS0FBS0EsUUFBUUEsbUJBQXhDQSxHQUFBQSxtQkFBa0JBLENBTy9CQSxJQUFjQSxJQUFkQSxTQUFjQSxHQUNWRyxRQUFBQSxHQUEyQkEsRUFBZUEsRUFBZUEsRUFBaUJBLEdBQ3RFQyxJQUFLQSxFQUFNQSxLQUFLQSxJQUNaQSxPQUFPQSxDQUNYQSxJQUFJQSxHQUFPQSxFQUFNQSxLQUFLQSxJQUt0QkEsT0FKQUEsR0FBS0EsUUFDTEEsRUFBS0EsS0FBS0EsRUFBTUEsR0FBSUEsRUFBTUEsSUFDMUJBLEVBQUtBLEtBQUtBLEVBQU1BLEdBQUlBLEVBQU1BLElBQzFCQSxFQUFNQSxLQUFLQSxLQUFNQSxHQUNWQSxFQVJLRCxFQUFBQSxVQUFTQSxHQURmSCxFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQW5CU2pnQixFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQUFMZCxFQUFBQSxFQUFBQSxPQUFBQSxFQUFBQSxXQUFQdnVCLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVJBLFVBQUFBLFlDRlAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFPdXVCLEdBQUFBLElBQUFBLFNBQUFBLEdBQUtVLEdBQUFBLElBQUFBLFNBQUFBLEdBS3ZCMGdCLEdBQUFBLEdBQUFBLFNBQUFBLEdBQ0lDLFFBQUFBLEtBQ0lDLEVBQUFBLEtBQUFBLE1BQ0FBLEtBQUtBLGFBQWFBLFlBQWFBLEVBQU9BLFdBRTlDRCxNQUx3Q0EsV0FBQUEsRUFBQUEsR0FLeENBLEdBTHdDRCxFQUFBQSxNQUFNQSxRQUFRQSxvQkFBekNBLEdBQUFBLG1CQUFrQkEsQ0FPL0JBLElBQWNBLElBQWRBLFNBQWNBLEdBQ1ZHLFFBQUFBLEdBQTJCQSxFQUFvQkEsRUFBWUEsRUFBeUJBLEdBQ2hGQyxHQUFJQSxHQUFTQSxFQUFLQSxNQUdsQkEsT0FGQUEsR0FBSUEsU0FBU0EsRUFBT0EsY0FDcEJBLEVBQU9BLEtBQUtBLEtBQUtBLElBQ1ZBLEVBSktELEVBQUFBLFVBQVNBLEdBRGZILEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBWlMxZ0IsRUFBQUEsRUFBQUEsVUFBQUEsRUFBQUEsY0FBTFYsRUFBQUEsRUFBQUEsT0FBQUEsRUFBQUEsV0FBUHZ1QixFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBT3V1QixHQUFBQSxJQUFBQSxTQUFBQSxHQUFNQyxHQUFBQSxJQUFBQSxTQUFBQSxHQWV4QndoQixHQUFBQSxHQUFBQSxTQUFBQSxHQUNJQyxRQUFBQSxLQUNJQyxFQUFBQSxLQUFBQSxNQUNBQSxLQUFLQSxlQUFlQSxjQUFlQSxnQkFBaUJBLEVBQUFBLE9BQU9BLGVBQ3REQSxhQUFhQSxjQUFlQSxFQUFBQSxPQUFPQSxhQXFCaERELE1BekIyQ0EsV0FBQUEsRUFBQUEsR0FPdkNBLEVBQUFBLFVBQUFBLGFBQUFBLFdBQ0lFLEdBQUlBLEdBQWtCQSxFQUFBQSxVQUFNQSxhQUFZQSxLQUFBQSxLQUd4Q0EsT0FGQUEsR0FBT0EsV0FBYUEsRUFBQUEsV0FBV0EsS0FDL0JBLEVBQU9BLFVBQVlBLEdBQUlBLEdBQUFBLEtBQ2hCQSxHQUdYRixFQUFBQSxVQUFBQSxRQUFBQSxTQUFTQSxFQUFlQSxFQUFlQSxHQUNuQ0csRUFBT0EsV0FBYUEsRUFBTUEsV0FDMUJBLEVBQUFBLEtBQUtBLE9BQU9BLEVBQU1BLFVBQVdBLEVBQU9BLFdBQ3BDQSxFQUFBQSxVQUFNQSxRQUFPQSxLQUFBQSxLQUFDQSxFQUFPQSxFQUFPQSxJQUdoQ0gsRUFBQUEsVUFBQUEsTUFBQUEsU0FBT0EsRUFBZUEsRUFBZUEsR0FDakNJLEVBQUFBLFVBQU1BLE1BQUtBLEtBQUFBLEtBQUNBLEVBQU9BLEVBQU9BLEdBQzFCQSxFQUFBQSxLQUFLQSxPQUFPQSxFQUFPQSxVQUFXQSxFQUFNQSxXQUNwQ0EsRUFBTUEsV0FBYUEsRUFBT0EsWUFFbENKLEdBekIyQ0QsRUFBQUEsS0FBS0EsVUFBVUEsaUJBQTdDQSxHQUFBQSxzQkFBcUJBLEdBZlZ4aEIsRUFBQUEsRUFBQUEsWUFBQUEsRUFBQUEsZ0JBQU5ELEVBQUFBLEVBQUFBLFFBQUFBLEVBQUFBLFlBQVB2dUIsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBUkEsVUFBQUEsWUNFUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQU91dUIsR0FBQUEsSUFBQUEsU0FBQUEsR0FBS1UsR0FBQUEsSUFBQUEsU0FBQUEsR0FhdkJxaEIsR0FBQUEsR0FBQUEsU0FBQUEsR0FDSUMsUUFBQUEsS0FDSUMsRUFBQUEsS0FBQUEsTUFDQUEsS0FBS0EsYUFBYUEsaUJBQWtCQSxFQUFBQSxPQUFPQSxnQkFDdENBLGFBQWFBLGdCQUFpQkEsRUFBQUEsT0FBT0EsZUFDckNBLGVBQWVBLGNBQWVBLGNBQWVBLEVBQUFBLE9BQU9BLGFBQ3BEQSxhQUFhQSxjQUFlQSxFQUFBQSxPQUFPQSxhQWtCaERELE1BeEIwQ0EsV0FBQUEsRUFBQUEsR0FTdENBLEVBQUFBLFVBQUFBLGFBQUFBLFdBQ0lFLEdBQUlBLEdBQWtCQSxFQUFBQSxVQUFNQSxhQUFZQSxLQUFBQSxLQUV4Q0EsT0FEQUEsR0FBT0EsYUFBZUEsRUFBQUEsS0FBS0EsV0FDcEJBLEdBR1hGLEVBQUFBLFVBQUFBLFFBQUFBLFNBQVNBLEVBQWVBLEVBQWVBLEdBQ25DRyxFQUFBQSxLQUFLQSxPQUFPQSxFQUFNQSxhQUFjQSxFQUFPQSxjQUN2Q0EsRUFBQUEsVUFBTUEsUUFBT0EsS0FBQUEsS0FBQ0EsRUFBT0EsRUFBT0EsSUFHaENILEVBQUFBLFVBQUFBLE1BQUFBLFNBQU9BLEVBQWVBLEVBQWVBLEdBQ2pDSSxFQUFBQSxVQUFNQSxNQUFLQSxLQUFBQSxLQUFDQSxFQUFPQSxFQUFPQSxHQUMxQkEsRUFBQUEsS0FBS0EsT0FBT0EsRUFBT0EsYUFBY0EsRUFBTUEsZUFFL0NKLEdBeEIwQ0QsRUFBQUEsTUFBTUEsVUFBVUEsc0JBQTdDQSxHQUFBQSxxQkFBb0JBLEdBYlZyaEIsRUFBQUEsRUFBQUEsWUFBQUEsRUFBQUEsZ0JBQUxWLEVBQUFBLEVBQUFBLE9BQUFBLEVBQUFBLFdBQVB2dUIsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQU91dUIsR0FBQUEsSUFBQUEsU0FBQUEsR0FBS1UsR0FBQUEsSUFBQUEsU0FBQUEsR0FVdkIyaEIsR0FBQUEsR0FBQUEsU0FBQUEsR0FDSUMsUUFBQUEsS0FDSUMsRUFBQUEsS0FBQUEsTUFDQUEsS0FBS0EsYUFBYUEsV0FBWUEsRUFBQUEsT0FBT0EsVUFDaENBLGFBQWFBLE9BQVFBLEVBQUFBLE9BQU9BLE1BRXpDRCxNQU51Q0EsV0FBQUEsRUFBQUEsR0FNdkNBLEdBTnVDRCxFQUFBQSxNQUFNQSxPQUFPQSxtQkFBdkNBLEdBQUFBLGtCQUFpQkEsR0FWUDNoQixFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFMVixFQUFBQSxFQUFBQSxPQUFBQSxFQUFBQSxXQUFQdnVCLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFPdXVCLEdBQUFBLElBQUFBLFNBQUFBLEdBQVN1QixHQUFBQSxJQUFBQSxTQUFBQSxHQVUzQmloQixHQUFBQSxHQUFBQSxTQUFBQSxHQUNJQyxRQUFBQSxLQUNJQyxFQUFBQSxLQUFBQSxNQUNBQSxLQUFLQSxhQUFhQSxZQUFhQSxFQUFPQSxXQUU5Q0QsTUFMNENBLFdBQUFBLEVBQUFBLEdBSzVDQSxHQUw0Q0QsRUFBQUEsS0FBS0EsUUFBUUEsbUJBQTVDQSxHQUFBQSx1QkFBc0JBLENBT25DQSxJQUFjQSxJQUFkQSxTQUFjQSxHQUNWRyxRQUFBQSxHQUEyQkEsRUFBZUEsRUFBZUEsRUFBaUJBLEdBQ3RFQyxJQUFLQSxFQUFNQSxLQUFLQSxJQUNaQSxPQUFPQSxDQUVYQSxJQUFJQSxHQUFPQSxFQUFNQSxLQUFLQSxJQUN0QkEsR0FBS0EsT0FFTEEsSUFBSUEsR0FBU0EsRUFBTUEsTUFDbkJBLElBQUlBLEVBQU9BLE9BQVNBLEVBQ2hCQSxPQUFPQSxDQUVYQSxJQUFJQSxHQUFLQSxFQUFPQSxHQUNaQSxFQUFJQSxFQUFPQSxFQUNmQSxJQUFzQkEsSUFBbEJBLEVBQU9BLE9BQ1BBLEVBQVdBLEVBQUlBLEVBQUdBLEVBQU1BLGlCQUN4QkEsRUFBS0EsS0FBS0EsRUFBR0EsRUFBR0EsRUFBR0EsR0FDbkJBLEVBQUtBLEtBQUtBLEVBQUVBLEVBQUdBLEVBQUVBLE9BQ2RBLENBQ0hBLEVBQUtBLEtBQUtBLEVBQUdBLEVBQUdBLEVBQUdBLEVBQ25CQSxLQUFLQSxHQUFJQSxHQUFJQSxFQUFHQSxFQUFJQSxFQUFPQSxPQUFRQSxJQUFLQSxDQUNwQ0EsR0FBSUEsR0FBSUEsRUFBT0EsRUFDZkEsR0FBS0EsS0FBS0EsRUFBRUEsRUFBR0EsRUFBRUEsSUFPekJBLE1BSklBLEdBQU1BLFVBQ05BLEVBQUtBLFFBRVRBLEVBQU1BLEtBQUtBLEtBQU1BLEdBQ1ZBLEVBR1hELFFBQUFBLEdBQXFCQSxFQUFZQSxFQUFZQSxHQUN6Q0UsR0FBSUEsR0FBaUJBLEVBQVpBLEVBQ0xBLEVBQUtBLEVBQUdBLEVBQUlBLEVBQUdBLEVBQ2ZBLEVBQUtBLEVBQUdBLEVBQUlBLEVBQUdBLENBRW5CQSxJQUFXQSxJQUFQQSxFQUNBQSxHQUFNQSxFQUFZQSxFQUNkQSxFQUFLQSxHQUNMQSxFQUFHQSxHQUFLQSxFQUNSQSxFQUFHQSxHQUFLQSxJQUVSQSxFQUFHQSxHQUFLQSxFQUNSQSxFQUFHQSxHQUFLQSxPQUVUQSxJQUFXQSxJQUFQQSxFQUNQQSxHQUFNQSxFQUFZQSxFQUNkQSxFQUFLQSxHQUNMQSxFQUFHQSxHQUFLQSxFQUNSQSxFQUFHQSxHQUFLQSxJQUVSQSxFQUFHQSxHQUFLQSxFQUNSQSxFQUFHQSxHQUFLQSxPQUVUQSxDQUNIQSxHQUFJQSxHQUFRQSxLQUFLQSxNQUFNQSxFQUFJQSxHQUN2QkEsRUFBS0EsS0FBS0EsSUFBSUEsS0FBS0EsSUFBSUEsR0FBU0EsRUFDaENBLEdBQUtBLEdBQ0xBLEVBQUdBLEdBQUtBLEVBQ1JBLEVBQUdBLEdBQUtBLElBRVJBLEVBQUdBLEdBQUtBLEVBQ1JBLEVBQUdBLEdBQUtBLEVBRVpBLElBQUlBLEdBQUtBLEtBQUtBLElBQUlBLEtBQUtBLElBQUlBLEtBQUtBLEdBQUtBLEVBQUlBLElBQVVBLENBQy9DQSxHQUFLQSxHQUNMQSxFQUFHQSxHQUFLQSxFQUNSQSxFQUFHQSxHQUFLQSxJQUVSQSxFQUFHQSxHQUFLQSxFQUNSQSxFQUFHQSxHQUFLQSxJQXRFSkYsRUFBQUEsVUFBU0EsR0FEZkgsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFqQmFqaEIsRUFBQUEsRUFBQUEsVUFBQUEsRUFBQUEsY0FBVHZCLEVBQUFBLEVBQUFBLFdBQUFBLEVBQUFBLGVBQVB2dUIsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBUkEsVUFBQUEsWUNGUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQU91dUIsR0FBQUEsSUFBQUEsU0FBQUEsR0FBVWlDLEdBQUFBLElBQUFBLFNBQUFBLEdBQzVCNmdCLFFBQUFBLEdBQXNCQSxFQUErQkEsRUFBY0EsRUFBYUEsRUFBZUEsRUFBZ0JBLEVBQWlCQSxHQUM1SEMsR0FBSUEsR0FBUUEsRUFBT0EsRUFDZkEsRUFBU0EsRUFBTUEsQ0FDZEEsSUFBWUEsSUFDYkEsRUFBSUEsWUFDSkEsRUFBSUEsS0FBS0EsRUFBTUEsRUFBS0EsRUFBUUEsRUFBTUEsRUFBU0EsSUFHL0NBLEVBQUlBLFlBQ0pBLEVBQUlBLE9BQU9BLEVBQU9BLEVBQVNBLEdBRTNCQSxFQUFJQSxPQUFPQSxFQUFRQSxFQUFTQSxHQUU1QkEsRUFBSUEsUUFBUUEsRUFBUUEsRUFBU0EsRUFBTUEsRUFBU0EsRUFBU0EsRUFBU0EsRUFBR0EsRUFBSUEsS0FBS0EsR0FBS0EsRUFBR0EsRUFBSUEsS0FBS0EsSUFFM0ZBLEVBQUlBLE9BQU9BLEVBQU9BLEVBQVNBLEdBRTNCQSxFQUFJQSxRQUFRQSxFQUFRQSxFQUFTQSxFQUFTQSxFQUFTQSxFQUFTQSxFQUFTQSxFQUFHQSxFQUFHQSxLQUFLQSxHQUFLQSxHQUVqRkEsRUFBSUEsT0FBT0EsRUFBT0EsRUFBU0EsR0FFM0JBLEVBQUlBLFFBQVFBLEVBQU9BLEVBQVNBLEVBQVNBLEVBQVNBLEVBQVNBLEVBQVNBLEVBQUdBLEtBQUtBLEdBQUtBLEVBQUdBLEtBQUtBLElBRXJGQSxFQUFJQSxPQUFPQSxFQUFNQSxFQUFNQSxHQUV2QkEsRUFBSUEsUUFBUUEsRUFBT0EsRUFBU0EsRUFBTUEsRUFBU0EsRUFBU0EsRUFBU0EsRUFBR0EsS0FBS0EsR0FBSUEsRUFBSUEsS0FBS0EsR0FBS0EsR0FDdkZBLEVBQUlBLFlBMUJRRCxFQUFBQSxLQUFJQSxHQURRN2dCLEVBQUFBLEVBQUFBLFVBQUFBLEVBQUFBLGNBQVZqQyxFQUFBQSxFQUFBQSxZQUFBQSxFQUFBQSxnQkFBUHZ1QixFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFSQSxVQUFBQSxZQ0VQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBT3V1QixHQUFBQSxJQUFBQSxTQUFBQSxHQUFVaUMsR0FBQUEsSUFBQUEsU0FBQUEsR0FLNUIrZ0IsR0FBQUEsR0FBQUEsU0FBQUEsR0FDSUMsUUFBQUEsS0FDSUMsRUFBQUEsS0FBQUEsTUFDQUEsS0FBS0EsYUFBYUEsWUFBYUEsRUFBT0EsV0FFOUNELE1BTDZDQSxXQUFBQSxFQUFBQSxHQUs3Q0EsR0FMNkNELEVBQUFBLE1BQU1BLFFBQVFBLG9CQUE5Q0EsR0FBQUEsd0JBQXVCQSxDQU9wQ0EsSUFBY0EsSUFBZEEsU0FBY0EsR0FDVkcsUUFBQUEsR0FBMkJBLEVBQW9CQSxFQUFZQSxFQUF5QkEsR0FDaEZDLEdBQUlBLEdBQVNBLEVBQUtBLE9BQ2RBLEVBQUtBLEVBQU9BLFVBQ1pBLEVBQUtBLEtBQUtBLElBQUlBLEtBQUtBLElBQUlBLEVBQU9BLFNBQVVBLEVBQUdBLE1BQVFBLEVBQ25EQSxPQUFNQSxLQUNOQSxFQUFLQSxFQUNUQSxJQUFJQSxHQUFLQSxLQUFLQSxJQUFJQSxLQUFLQSxJQUFJQSxFQUFPQSxTQUFVQSxFQUFHQSxPQUFTQSxFQU14REEsT0FMSUEsT0FBTUEsS0FDTkEsRUFBS0EsR0FFVEEsRUFBQUEsUUFBUUEsS0FBS0EsRUFBSUEsSUFBS0EsRUFBR0EsRUFBR0EsRUFBR0EsRUFBR0EsRUFBR0EsTUFBT0EsRUFBR0EsT0FBUUEsRUFBSUEsSUFFcERBLEVBWktELEVBQUFBLFVBQVNBLEdBRGZILEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBWmMvZ0IsRUFBQUEsRUFBQUEsVUFBQUEsRUFBQUEsY0FBVmpDLEVBQUFBLEVBQUFBLFlBQUFBLEVBQUFBLGdCQUFQdnVCLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFPdXVCLEdBQUFBLElBQUFBLFNBQUFBLEdBQVVpQyxHQUFBQSxJQUFBQSxTQUFBQSxHQUM1Qm9oQixHQUFBQSxHQUFBQSxTQUFBQSxHQUNJQyxRQUFBQSxLQUNJQyxFQUFBQSxLQUFBQSxNQUNBQSxLQUFLQSxlQUFlQSxhQUFjQSxrQkFBbUJBLEVBQU9BLGlCQUVwRUQsTUFMNkNBLFdBQUFBLEVBQUFBLEdBSzdDQSxHQUw2Q0QsRUFBQUEsTUFBTUEsUUFBUUEsb0JBQTlDQSxHQUFBQSx3QkFBdUJBLENBT3BDQSxJQUFjQSxJQUFkQSxTQUFjQSxHQUNWRyxRQUFBQSxHQUFpQ0EsRUFBNkJBLEVBQTZCQSxFQUErQkEsR0FDdEhDLEdBQUlBLEdBQVlBLEVBQU1BLGFBRXRCQSxPQURBQSxHQUFVQSxNQUFRQSxFQUFVQSxPQUFTQSxHQUM5QkEsRUFIS0QsRUFBQUEsZ0JBQWVBLEdBRHJCSCxFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQVJjcGhCLEVBQUFBLEVBQUFBLFVBQUFBLEVBQUFBLGNBQVZqQyxFQUFBQSxFQUFBQSxZQUFBQSxFQUFBQSxnQkFBUHZ1QixFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBT3V1QixHQUFBQSxJQUFBQSxTQUFBQSxHQUFVaUMsR0FBQUEsSUFBQUEsU0FBQUEsR0FXNUJ5aEIsR0FBQUEsR0FBQUEsU0FBQUEsR0FDSUMsUUFBQUEsS0FDSUMsRUFBQUEsS0FBQUEsTUFDQUEsS0FBS0EsYUFBYUEsV0FBWUEsRUFBT0EsVUFFN0NELE1BTDRDQSxXQUFBQSxFQUFBQSxHQUs1Q0EsR0FMNENELEVBQUFBLE1BQU1BLE9BQU9BLG1CQUE1Q0EsR0FBQUEsdUJBQXNCQSxDQU9uQ0EsSUFBY0EsSUFBZEEsU0FBY0EsR0FDVkcsUUFBQUEsR0FBMEJBLEVBQWVBLEVBQWVBLEVBQWlCQSxFQUFnQ0EsR0FDckdDLElBQUtBLEVBQU1BLFdBQ1BBLE9BQU9BLENBRVhBLElBQUlBLEdBQUtBLEVBQU1BLFVBQ1hBLEVBQUtBLEtBQUtBLElBQUlBLEtBQUtBLElBQUlBLEVBQUdBLEVBQU1BLFNBQVVBLEVBQUdBLE1BQVFBLEVBQ3JEQSxPQUFNQSxLQUNOQSxFQUFLQSxFQUNUQSxJQUFJQSxHQUFLQSxLQUFLQSxJQUFJQSxLQUFLQSxJQUFJQSxFQUFHQSxFQUFNQSxTQUFVQSxFQUFHQSxPQUFTQSxFQU0xREEsT0FMSUEsT0FBTUEsS0FDTkEsRUFBS0EsR0FFVEEsRUFBQUEsUUFBUUEsS0FBS0EsRUFBSUEsSUFBS0EsRUFBR0EsRUFBR0EsRUFBR0EsRUFBR0EsRUFBR0EsTUFBT0EsRUFBR0EsT0FBUUEsRUFBSUEsSUFFcERBLEVBZEtELEVBQUFBLFNBQVFBLEdBRGRILEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBbEJjemhCLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVZqQyxFQUFBQSxFQUFBQSxZQUFBQSxFQUFBQSxnQkFBUHZ1QixFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFSQSxVQUFBQSxZQ0ZQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBT3V1QixHQUFBQSxJQUFBQSxTQUFBQSxHQUFNQyxHQUFBQSxJQUFBQSxTQUFBQSxHQW1CeEI4akIsR0FBQUEsR0FBQUEsU0FBQUEsR0FDSUMsUUFBQUEsS0FDSUMsRUFBQUEsS0FBQUEsTUFDQUEsS0FBS0EsYUFBYUEsYUFBY0EsRUFBQUEsT0FBT0EsWUFFL0NELE1BTHlDQSxXQUFBQSxFQUFBQSxHQUt6Q0EsR0FMeUNELEVBQUFBLEtBQUtBLFFBQVFBLGVBQXpDQSxHQUFBQSxvQkFBbUJBLEdBbkJSOWpCLEVBQUFBLEVBQUFBLFVBQUFBLEVBQUFBLGNBQU5ELEVBQUFBLEVBQUFBLFFBQUFBLEVBQUFBLFlBQVB2dUIsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQVNtWCxHQUFBQSxJQUFBQSxTQUFBQSxHQUFPQyxHQUFBQSxJQUFBQSxTQUFBQSxHQUFPaWMsR0FBQUEsSUFBQUEsU0FBQUEsR0FHbENvZixRQUFBQSxHQUFnQ0EsRUFBK0JBLEVBQWVBLEdBQzFFQyxJQUFLQSxHQUFNQSxFQUFBQSxhQUFhQSxRQUFRQSxHQUU1QkEsV0FEQUEsR0FBSUEsS0FBS0EsRUFBUUEsRUFBR0EsRUFBUUEsRUFBR0EsRUFBUUEsTUFBT0EsRUFBUUEsT0FJMURBLElBQUlBLEdBQVVBLEtBQUtBLElBQUlBLEVBQUdBLFFBQVVBLEVBQUdBLFNBQVdBLEVBQVFBLE1BQU9BLEdBQUtBLEVBQ2xFQSxFQUFhQSxLQUFLQSxJQUFJQSxFQUFHQSxXQUFhQSxFQUFHQSxZQUFjQSxFQUFRQSxNQUFPQSxHQUFLQSxFQUMzRUEsRUFBV0EsS0FBS0EsSUFBSUEsRUFBR0EsUUFBVUEsRUFBR0EsV0FBYUEsRUFBUUEsT0FBUUEsR0FBS0EsRUFDdEVBLEVBQVlBLEtBQUtBLElBQUlBLEVBQUdBLFNBQVdBLEVBQUdBLFlBQWNBLEVBQVFBLE9BQVFBLEdBQUtBLEVBRXpFQSxFQUFNQSxFQUFHQSxRQUFVQSxDQUN2QkEsR0FBSUEsT0FBT0EsRUFBUUEsRUFBSUEsRUFBS0EsRUFBUUEsRUFFcENBLElBQUlBLEdBQU1BLEVBQUdBLFNBQVdBLEVBQ3BCQSxFQUFNQSxFQUFHQSxTQUFXQSxDQUN4QkEsR0FBSUEsT0FBT0EsRUFBUUEsRUFBSUEsRUFBUUEsTUFBUUEsRUFBS0EsRUFBUUEsR0FDcERBLEVBQUlBLGNBQ0FBLEVBQVFBLEVBQUlBLEVBQVFBLE1BQVFBLEVBQU1BLEVBQU1BLEVBQWVBLEVBQVFBLEVBQy9EQSxFQUFRQSxFQUFJQSxFQUFRQSxNQUFPQSxFQUFRQSxFQUFJQSxFQUFNQSxFQUFNQSxFQUNuREEsRUFBUUEsRUFBSUEsRUFBUUEsTUFBT0EsRUFBUUEsRUFBSUEsRUFFM0NBLElBQUlBLEdBQU1BLEVBQUdBLFlBQWNBLEVBQ3ZCQSxFQUFNQSxFQUFHQSxZQUFjQSxDQUMzQkEsR0FBSUEsT0FBT0EsRUFBUUEsRUFBSUEsRUFBUUEsTUFBT0EsRUFBUUEsRUFBSUEsRUFBUUEsT0FBU0EsR0FDbkVBLEVBQUlBLGNBQ0FBLEVBQVFBLEVBQUlBLEVBQVFBLE1BQU9BLEVBQVFBLEVBQUlBLEVBQVFBLE9BQVNBLEVBQU1BLEVBQU1BLEVBQ3BFQSxFQUFRQSxFQUFJQSxFQUFRQSxNQUFRQSxFQUFNQSxFQUFnQkEsRUFBS0EsRUFBUUEsRUFBSUEsRUFBUUEsT0FDM0VBLEVBQVFBLEVBQUlBLEVBQVFBLE1BQVFBLEVBQUtBLEVBQVFBLEVBQUlBLEVBQVFBLE9BRXpEQSxJQUFJQSxHQUFNQSxFQUFHQSxXQUFhQSxFQUN0QkEsRUFBTUEsRUFBR0EsV0FBYUEsQ0FDMUJBLEdBQUlBLE9BQU9BLEVBQVFBLEVBQUlBLEVBQUtBLEVBQVFBLEVBQUlBLEVBQVFBLFFBQ2hEQSxFQUFJQSxjQUNBQSxFQUFRQSxFQUFJQSxFQUFNQSxFQUFNQSxFQUFlQSxFQUFRQSxFQUFJQSxFQUFRQSxPQUMzREEsRUFBUUEsRUFBR0EsRUFBUUEsRUFBSUEsRUFBUUEsT0FBU0EsRUFBTUEsRUFBTUEsRUFDcERBLEVBQVFBLEVBQUdBLEVBQVFBLEVBQUlBLEVBQVFBLE9BQVNBLEVBRTVDQSxJQUFJQSxHQUFNQSxFQUFHQSxRQUFVQSxDQUN2QkEsR0FBSUEsT0FBT0EsRUFBUUEsRUFBR0EsRUFBUUEsRUFBSUEsR0FDbENBLEVBQUlBLGNBQ0FBLEVBQVFBLEVBQUdBLEVBQVFBLEVBQUlBLEVBQU1BLEVBQU1BLEVBQ25DQSxFQUFRQSxFQUFJQSxFQUFNQSxFQUFNQSxFQUFlQSxFQUFRQSxFQUMvQ0EsRUFBUUEsRUFBSUEsRUFBS0EsRUFBUUEsR0E3Q2pDRCxHQUFJQSxHQUFnQkEsU0FFSkEsR0FBQUEsZUFBY0EsR0FISXBmLEVBQUFBLEVBQUFBLFVBQUFBLEVBQUFBLGNBQVBqYyxFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFQRCxFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFUblgsRUFBQUEsRUFBQUEsV0FBQUEsRUFBQUEsZUFBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQVNtWCxHQUFBQSxJQUFBQSxTQUFBQSxHQUFPQyxHQUFBQSxJQUFBQSxTQUFBQSxHQUFPaWMsR0FBQUEsSUFBQUEsU0FBQUEsR0FDbENzZixRQUFBQSxHQUFnQ0EsRUFBZUEsRUFBZUEsRUFBaUJBLEVBQWdDQSxFQUFjQSxHQUN6SEMsSUFBS0EsRUFBTUEsYUFDUEEsT0FBT0EsQ0FFWEEsR0FBQUEsS0FBS0EsT0FBT0EsRUFBTUEsUUFBU0EsRUFBTUEsWUFFakNBLElBQUlBLEdBQUtBLEVBQU1BLGVBQ2ZBLEdBQUFBLFVBQVVBLFdBQVdBLEVBQUlBLEVBQU1BLFlBRS9CQSxJQUFJQSxHQUFLQSxFQUFNQSxpQkFDZkEsR0FBQUEsYUFBYUEsT0FBT0EsRUFBTUEsYUFBY0EsR0FDeENBLEVBQUFBLFVBQVVBLG1CQUFtQkEsRUFBSUEsRUFFakNBLElBQUlBLEdBQUtBLEVBQU1BLGlCQUlmQSxPQUhBQSxHQUFBQSxhQUFhQSxPQUFPQSxFQUFNQSxhQUFjQSxHQUN4Q0EsRUFBQUEsVUFBVUEsaUJBQWlCQSxFQUFJQSxJQUV4QkEsRUFqQktELEVBQUFBLGVBQWNBLEdBREl0ZixFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFQamMsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBUEQsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBVG5YLEVBQUFBLEVBQUFBLFdBQUFBLEVBQUFBLGVBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFTbVgsR0FBQUEsSUFBQUEsU0FBQUEsR0FBT0MsR0FBQUEsSUFBQUEsU0FBQUEsR0FBT2ljLEdBQUFBLElBQUFBLFNBQUFBLEdBQ2xDc2YsUUFBQUEsR0FBa0NBLEVBQWVBLEVBQWVBLEVBQWlCQSxFQUFnQ0EsRUFBY0EsR0FFM0hFLEdBREFBLEVBQU1BLGNBQWVBLEdBQ2hCQSxFQUFNQSxhQUFlQSxFQUFNQSxZQUM1QkEsT0FBT0EsQ0FDWEEsSUFBSUEsRUFBQUEsS0FBS0EsUUFBUUEsRUFBTUEsU0FDbkJBLE9BQU9BLENBQ1hBLElBQUlBLElBQVlBLEVBQU1BLGNBQWdCQSxFQUFNQSxpQkFBbUJBLEVBQUFBLFVBQVVBLFFBQVFBLEVBQU1BLGdCQUN2RkEsT0FBSUEsS0FBYUEsRUFBTUEsWUFDWkEsR0FDWEEsRUFBTUEsY0FBZUEsR0FDZEEsR0FWS0YsRUFBQUEsaUJBQWdCQSxHQURFdGYsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBUGpjLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVBELEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVRuWCxFQUFBQSxFQUFBQSxXQUFBQSxFQUFBQSxlQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBU21YLEdBQUFBLElBQUFBLFNBQUFBLEdBQU9DLEdBQUFBLElBQUFBLFNBQUFBLEdBQU9pYyxHQUFBQSxJQUFBQSxTQUFBQSxHQUNsQ3NmLFFBQUFBLEdBQTBCQSxFQUFlQSxFQUFlQSxFQUFpQkEsRUFBZ0NBLEVBQWNBLEdBQ25IRyxJQUFLQSxFQUFNQSxhQUNQQSxPQUFPQSxDQUNYQSxHQUFJQSxPQUNKQSxFQUFBQSxLQUFLQSxRQUFRQSxpQkFBaUJBLEVBQUtBLEVBQU9BLEVBRTFDQSxJQUFJQSxHQUFjQSxFQUFNQSxZQUNwQkEsRUFBVUEsRUFBTUEsUUFDaEJBLEVBQWNBLEVBQU1BLFlBQ3BCQSxFQUFNQSxFQUFJQSxHQUNWQSxLQUFnQkEsRUFBQUEsS0FBS0EsUUFBUUEsS0FDN0JBLEVBQUlBLFlBQ0pBLEVBQUFBLFFBQVFBLGVBQWVBLEVBQUtBLEVBQVNBLEVBQU1BLG1CQUMzQ0EsRUFBQUEsUUFBUUEsZUFBZUEsRUFBS0EsRUFBYUEsRUFBTUEsbUJBQy9DQSxFQUFJQSxPQUFPQSxFQUFhQSxFQUFTQSxFQUFBQSxTQUFTQSxTQUU5Q0EsSUFBSUEsR0FBYUEsRUFBTUEsVUFRdkJBLE9BUElBLEtBQWVBLEVBQUFBLEtBQUtBLFFBQVFBLEtBQzVCQSxFQUFJQSxZQUNKQSxFQUFBQSxRQUFRQSxlQUFlQSxFQUFLQSxFQUFhQSxFQUFNQSxtQkFDL0NBLEVBQUlBLE9BQU9BLEVBQVlBLElBRzNCQSxFQUFJQSxXQUNHQSxFQXhCS0gsRUFBQUEsU0FBUUEsR0FEVXRmLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVBqYyxFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFQRCxFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFUblgsRUFBQUEsRUFBQUEsV0FBQUEsRUFBQUEsZUFBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQVNtWCxHQUFBQSxJQUFBQSxTQUFBQSxHQUFPZSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFRNmIsR0FBQUEsSUFBQUEsU0FBQUEsR0FDbkNnZixRQUFBQSxHQUFpQ0EsRUFBZUEsRUFBZUEsRUFBaUJBLEVBQXlCQSxHQUNyR0MsR0FBSUEsR0FBS0EsRUFBT0EsVUFFaEJBLE9BREFBLEdBQUdBLEVBQUlBLEVBQUdBLEVBQUlBLEVBQUdBLE1BQVFBLEVBQUdBLE9BQVNBLEdBQzlCQSxFQUhLRCxFQUFBQSxnQkFBZUEsR0FESWhmLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVI3YixFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQUFQZixFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFUblgsRUFBQUEsRUFBQUEsV0FBQUEsRUFBQUEsZUFBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQVNtWCxHQUFBQSxJQUFBQSxTQUFBQSxHQUFPZSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFRNmIsR0FBQUEsSUFBQUEsU0FBQUEsR0FDbkNnZixRQUFBQSxHQUE0QkEsRUFBZUEsRUFBZUEsRUFBaUJBLEVBQXlCQSxHQUdoR0UsSUFBS0EsR0FEREEsR0FEQUEsRUFBS0EsRUFBTUEsVUFFTkEsRUFBU0EsRUFBS0EsT0FBUUEsRUFBT0EsUUFDbENBLEVBQVFBLEVBQU9BLFFBQ2ZBLEVBQUFBLEtBQUtBLE9BQU9BLEVBQU1BLE9BQU9BLFlBQWFBLEdBRXRDQSxFQUFHQSxFQUFJQSxFQUFNQSxpQkFBaUJBLGdCQUFrQkEsRUFDaERBLEVBQUdBLEVBQUlBLEVBQU1BLGlCQUFpQkEsZUFBaUJBLEVBQy9DQSxFQUFNQSxRQUFRQSxFQUdsQkEsT0FEQUEsR0FBQUEsS0FBS0EsT0FBT0EsRUFBTUEsVUFBV0EsRUFBTUEsZUFDNUJBLEVBWktGLEVBQUFBLFdBQVVBLEdBRFNoZixFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFSN2IsRUFBQUEsRUFBQUEsVUFBQUEsRUFBQUEsY0FBUGYsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBVG5YLEVBQUFBLEVBQUFBLFdBQUFBLEVBQUFBLGVBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFTbVgsR0FBQUEsSUFBQUEsU0FBQUEsR0FBT2UsR0FBQUEsSUFBQUEsU0FBQUEsR0FBUW9jLEdBQUFBLElBQUFBLFNBQUFBLEdBQ25DNGUsUUFBQUEsR0FBNEJBLEVBQWVBLEVBQWVBLEVBQWlCQSxFQUF5QkEsR0FDaEdDLEdBQUlBLEdBQVlBLEVBQU1BLGFBQ3RCQSxHQUFVQSxNQUFRQSxFQUFVQSxPQUFTQSxPQUFPQSxpQkFDNUNBLEtBQUtBLEdBQUlBLEdBQVNBLEVBQUtBLE9BQVFBLEVBQU9BLFFBQ2xDQSxFQUFPQSxRQUFRQSxRQUFRQSxFQUUzQkEsSUFBSUEsR0FBVUEsRUFBT0EsV0FFckJBLE9BREFBLEdBQVFBLE1BQVFBLEVBQVFBLE9BQVNBLEdBQzFCQSxFQVJLRCxFQUFBQSxXQUFVQSxHQURTNWUsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBUnBjLEVBQUFBLEVBQUFBLFVBQUFBLEVBQUFBLGNBQVBmLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVRuWCxFQUFBQSxFQUFBQSxXQUFBQSxFQUFBQSxlQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBU21YLEdBQUFBLElBQUFBLFNBQUFBLEdBQU9lLEdBQUFBLElBQUFBLFNBQUFBLEdBQVU0YyxHQUFBQSxJQUFBQSxTQUFBQSxHQUMxQnNlLEVBQUFBLGdCQUFrQkEsU0FBVUEsRUFBZUEsRUFBZUEsRUFBaUJBLEdBQ2xGLEdBQStDLEtBQTFDL1IsRUFBTXdCLFdBQWE3aUMsRUFBQThpQyxXQUFXa0MsUUFDL0IsT0FBTyxDQUVYaGxDLEdBQUEwaUMsS0FBS3JWLFFBQVFpZSw0QkFBNEIzSixFQUFPMEoseUJBQTBCMUosRUFBT3dKLG9CQUFxQjlKLEVBQU1rSyxjQUFlbEssRUFBTXlILFlBQWF6SCxFQUFNbUssS0FBTW5LLEVBQU1PLFdBQ2hLLElBQUl5UixHQUFPMVIsRUFBTzhKLDBCQUNkNkgsRUFBVTFyQyxFQUFLMHJDLE9BU25CLE9BUklBLElBQVcxckMsRUFBS3U2QixPQUNoQmtSLEVBQUt0c0IsRUFBSXNzQixFQUFLcnNCLEVBQUksRUFDbEJxc0IsRUFBS2pvQixNQUFRa29CLEVBQVFsb0IsTUFDckJpb0IsRUFBS2hvQixPQUFTaW9CLEVBQVFqb0IsUUFFdEJyckIsRUFBQTBpQyxLQUFLclYsUUFBUWllLDRCQUE0QitILEVBQU0xUixFQUFPd0osb0JBQXFCOUosRUFBTWtLLGNBQWVsSyxFQUFNd0gsY0FBZXhILEVBQU1tSyxLQUFNbkssRUFBTU8sYUFHcEksSUFoQjBCOU0sRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBVjVjLEVBQUFBLEVBQUFBLFlBQUFBLEVBQUFBLGdCQUFQZixFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFUblgsRUFBQUEsRUFBQUEsV0FBQUEsRUFBQUEsZUFBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQVNtWCxHQUFBQSxJQUFBQSxTQUFBQSxHQUFLNkIsR0FBQUEsSUFBQUEsU0FBQUEsR0FBUXVjLEdBQUFBLElBQUFBLFNBQUFBLEdBQ2pDZ2UsUUFBQUEsR0FBOEJBLEVBQWVBLEVBQWVBLEVBQWlCQSxFQUF5QkEsR0FDbEdDLEdBQUlBLEdBQU1BLEVBQU1BLFFBQ2hCQSxHQUFJQSxNQUFRQSxFQUFJQSxPQUFTQSxDQUl6QkEsS0FBS0EsR0FIREEsR0FBS0EsRUFBTUEsVUFFWEEsRUFBS0EsRUFBTUEsVUFBVUEsVUFDaEJBLEVBQUlBLEVBQUdBLEVBQUlBLEVBQUdBLE9BQVFBLElBQzNCQSxFQUFJQSxPQUFVQSxFQUFHQSxHQUFHQSxHQUFHQSxRQUFVQSxFQUFHQSxHQUFHQSxHQUFHQSxPQUc5Q0EsS0FBS0EsR0FEREEsR0FBS0EsRUFBTUEsVUFBVUEsVUFDaEJBLEVBQUlBLEVBQUdBLEVBQUlBLEVBQUdBLE9BQVFBLElBQzNCQSxFQUFJQSxRQUFXQSxFQUFHQSxHQUFHQSxHQUFHQSxRQUFVQSxFQUFHQSxHQUFHQSxHQUFHQSxPQVEvQ0EsT0FMSUEsR0FBSUEsUUFBVUEsRUFBR0EsT0FDakJBLEVBQUFBLFFBQVFBLGVBQWVBLEVBQUlBLEVBQU1BLGtCQUFtQkEsR0FDcERBLEVBQUlBLFNBQVdBLEVBQUdBLFFBQ2xCQSxFQUFBQSxRQUFRQSxlQUFlQSxFQUFJQSxFQUFNQSxlQUFnQkEsSUFFOUNBLEVBbkJLRCxFQUFBQSxhQUFZQSxHQURLaGUsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBUnZjLEVBQUFBLEVBQUFBLFVBQUFBLEVBQUFBLGNBQUw3QixFQUFBQSxFQUFBQSxPQUFBQSxFQUFBQSxXQUFUblgsRUFBQUEsRUFBQUEsV0FBQUEsRUFBQUEsZUFBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQVNtWCxHQUFBQSxJQUFBQSxTQUFBQSxHQUFLNkIsR0FBQUEsSUFBQUEsU0FBQUEsR0FBUXVjLEdBQUFBLElBQUFBLFNBQUFBLEdBQ2pDZ2UsUUFBQUEsR0FBNEJBLEVBQWVBLEVBQWVBLEVBQWlCQSxFQUF5QkEsR0FNaEdFLElBQUtBLEdBTERBLEdBQUtBLEVBQU1BLFVBRVhBLEVBQUtBLEVBQU1BLFVBQVVBLFVBQ3JCQSxFQUFLQSxFQUFNQSxVQUFVQSxVQUVoQkEsRUFBU0EsRUFBS0EsT0FBUUEsRUFBT0EsUUFBU0EsQ0FDM0NBLEdBQUlBLEdBQVFBLEVBQU9BLFFBRWZBLEVBQU1BLEtBQUtBLElBQUlBLEVBQU1BLGlCQUFpQkEsZUFBZ0JBLEVBQUdBLE9BQVNBLEVBQ2xFQSxPQUFNQSxLQUNOQSxFQUFNQSxFQUNWQSxJQUFJQSxHQUFNQSxLQUFLQSxJQUFJQSxFQUFNQSxpQkFBaUJBLFlBQWFBLEVBQUdBLE9BQVNBLEVBQy9EQSxPQUFNQSxLQUNOQSxFQUFNQSxFQUNWQSxJQUFJQSxHQUFVQSxLQUFLQSxJQUFJQSxFQUFNQSxpQkFBaUJBLG1CQUFvQkEsRUFBR0EsT0FBU0EsRUFDMUVBLE9BQU1BLEtBQ05BLEVBQVVBLEVBQ2RBLElBQUlBLEdBQVVBLEtBQUtBLElBQUlBLEVBQU1BLGlCQUFpQkEsZ0JBQWlCQSxFQUFHQSxPQUFTQSxFQUN2RUEsT0FBTUEsS0FDTkEsRUFBVUEsR0FFZEEsRUFBR0EsRUFBSUEsRUFBR0EsRUFBSUEsRUFBR0EsTUFBUUEsRUFBR0EsT0FBU0EsQ0FDckNBLEtBQUtBLEdBQUlBLEdBQUlBLEVBQU9BLEVBQUpBLEVBQVNBLElBQ3JCQSxFQUFHQSxHQUFLQSxFQUFHQSxHQUFHQSxHQUFHQSxPQUVyQkEsS0FBS0EsR0FBSUEsR0FBSUEsRUFBU0EsRUFBTUEsRUFBVkEsRUFBbUJBLElBQ2pDQSxFQUFHQSxPQUFTQSxFQUFHQSxHQUFHQSxHQUFHQSxPQUV6QkEsS0FBS0EsR0FBSUEsR0FBSUEsRUFBT0EsRUFBSkEsRUFBU0EsSUFDckJBLEVBQUdBLEdBQUtBLEVBQUdBLEdBQUdBLEdBQUdBLE9BRXJCQSxLQUFLQSxHQUFJQSxHQUFJQSxFQUFTQSxFQUFNQSxFQUFWQSxFQUFtQkEsSUFDakNBLEVBQUdBLFFBQVVBLEVBQUdBLEdBQUdBLEdBQUdBLE9BRzFCQSxHQUFNQSxRQUFRQSxHQUlsQkEsTUFEQUEsR0FBQUEsS0FBS0EsT0FBT0EsRUFBTUEsVUFBV0EsRUFBTUEsZUFDNUJBLEVBeENLRixFQUFBQSxXQUFVQSxHQURPaGUsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBUnZjLEVBQUFBLEVBQUFBLFVBQUFBLEVBQUFBLGNBQUw3QixFQUFBQSxFQUFBQSxPQUFBQSxFQUFBQSxXQUFUblgsRUFBQUEsRUFBQUEsV0FBQUEsRUFBQUEsZUFBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQVNtWCxHQUFBQSxJQUFBQSxTQUFBQSxHQUFLNkIsR0FBQUEsSUFBQUEsU0FBQUEsR0FBUXVjLEdBQUFBLElBQUFBLFNBQUFBLEdBQ2pDZ2UsUUFBQUEsR0FBdUNBLEVBQWVBLEVBQWVBLEVBQWlCQSxFQUF5QkEsR0FDM0dHLElBQUtBLEdBQUlBLEdBQUtBLEVBQU1BLFVBQVVBLFVBQVdBLEVBQUlBLEVBQUdBLEVBQUlBLEVBQUdBLE9BQVFBLElBQzNEQSxJQUFLQSxHQUFJQSxHQUFJQSxFQUFRQSxHQUFMQSxFQUFRQSxJQUNwQkEsRUFBR0EsR0FBR0EsR0FBR0EsUUFBVUEsRUFBR0EsR0FBR0EsR0FBR0EsUUFJcENBLEtBQUtBLEdBQUlBLEdBQUtBLEVBQU1BLFVBQVVBLFVBQVdBLEVBQUlBLEVBQUdBLEVBQUlBLEVBQUdBLE9BQVFBLElBQzNEQSxJQUFLQSxHQUFJQSxHQUFJQSxFQUFRQSxHQUFMQSxFQUFRQSxJQUNwQkEsRUFBR0EsR0FBR0EsR0FBR0EsUUFBVUEsRUFBR0EsR0FBR0EsR0FBR0EsUUFJcENBLFFBQU9BLEVBYktILEVBQUFBLHNCQUFxQkEsR0FESmhlLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVJ2YyxFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQUFMN0IsRUFBQUEsRUFBQUEsT0FBQUEsRUFBQUEsV0FBVG5YLEVBQUFBLEVBQUFBLFdBQUFBLEVBQUFBLGVBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFTbVgsR0FBQUEsSUFBQUEsU0FBQUEsR0FBSzZCLEdBQUFBLElBQUFBLFNBQUFBLEdBQVF1YyxHQUFBQSxJQUFBQSxTQUFBQSxHQUNqQ2dlLFFBQUFBLEdBQTRCQSxFQUFlQSxFQUFlQSxFQUFpQkEsRUFBeUJBLEdBQ2hHSSxJQUFLQSxHQUFJQSxHQUFVQSxFQUFNQSxrQkFBbUJBLEVBQUtBLEVBQU1BLFVBQVVBLFVBQVdBLEVBQUlBLEVBQUdBLEVBQUlBLEVBQVFBLE9BQVFBLElBQ25HQSxFQUFRQSxHQUFHQSxlQUFlQSxFQUFHQSxHQUFHQSxHQUFHQSxRQUd2Q0EsS0FBS0EsR0FBSUEsR0FBVUEsRUFBTUEsZUFBZ0JBLEVBQUtBLEVBQU1BLFVBQVVBLFVBQVdBLEVBQUlBLEVBQUdBLEVBQUlBLEVBQVFBLE9BQVFBLElBQ2hHQSxFQUFRQSxHQUFHQSxnQkFBZ0JBLEVBQUdBLEdBQUdBLEdBQUdBLFFBR3hDQSxRQUFPQSxFQVRLSixFQUFBQSxXQUFVQSxHQURPaGUsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBUnZjLEVBQUFBLEVBQUFBLFVBQUFBLEVBQUFBLGNBQUw3QixFQUFBQSxFQUFBQSxPQUFBQSxFQUFBQSxXQUFUblgsRUFBQUEsRUFBQUEsV0FBQUEsRUFBQUEsZUFBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQVNtWCxHQUFBQSxJQUFBQSxTQUFBQSxHQUFLNkIsR0FBQUEsSUFBQUEsU0FBQUEsR0FBUWdkLEdBQUFBLElBQUFBLFNBQUFBLEdBQ2pDNGQsUUFBQUEsR0FBNEJBLEVBQWVBLEVBQWVBLEVBQStCQSxFQUE4QkEsR0FJbkhDLElBQUtBLEdBSERBLEdBQVNBLEVBQU1BLFlBQ2ZBLEVBQUtBLEVBQU1BLFVBQVVBLFVBQ3JCQSxFQUFLQSxFQUFNQSxVQUFVQSxVQUNoQkEsRUFBU0EsRUFBS0EsT0FBUUEsRUFBSUEsRUFBR0EsRUFBT0EsT0FBUUEsSUFDN0NBLEVBQUlBLEVBQU9BLE9BQ1hBLEVBQU9BLE1BQUtBLEdBQUlBLEdBQUFBLGdCQUFpQkEsS0FBS0EsRUFBT0EsUUFBU0EsRUFBSUEsS0FFekRBLEVBQU9BLEdBQUtBLEVBQU9BLElBQU1BLEdBQUlBLEdBQUFBLGdCQUFrQkEsS0FBS0EsRUFBT0EsUUFBU0EsRUFBSUEsRUFXakZBLE9BVElBLEdBQUlBLEVBQU9BLFFBQ1hBLEVBQU9BLE1BQU1BLEVBQUdBLEVBQU9BLE9BQVNBLEdBRXBDQSxFQUFNQSxVQUFVQSxLQUFLQSxFQUFNQSxhQUUzQkEsRUFBTUEsV0FBV0EsT0FBU0EsRUFDMUJBLEVBQU1BLFdBQVdBLEtBQUtBLEdBQUlBLEdBQUFBLG1CQUFtQkEsS0FBTUEsRUFBR0EsRUFBR0EsSUFDekRBLEVBQU1BLGVBQWlCQSxHQUVoQkEsRUFuQktELEVBQUFBLFdBQVVBLEdBRE81ZCxFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFSaGQsRUFBQUEsRUFBQUEsVUFBQUEsRUFBQUEsY0FBTDdCLEVBQUFBLEVBQUFBLE9BQUFBLEVBQUFBLFdBQVRuWCxFQUFBQSxFQUFBQSxXQUFBQSxFQUFBQSxlQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBU21YLEdBQUFBLElBQUFBLFNBQUFBLEdBQUs2QixHQUFBQSxJQUFBQSxTQUFBQSxHQUFRZ2QsR0FBQUEsSUFBQUEsU0FBQUEsR0FDakM0ZCxRQUFBQSxHQUFzQ0EsR0FDbENFLE1BQU9BLFVBQXlCQSxFQUFlQSxFQUFlQSxFQUErQkEsRUFBOEJBLEdBQ3ZIQyxHQUFJQSxHQUFLQSxFQUFNQSxVQUFVQSxVQUNyQkEsRUFBS0EsRUFBTUEsVUFBVUEsU0FFckJBLEdBQUtBLFNBQVNBLE9BQVNBLElBQ3ZCQSxFQUFBQSxRQUFRQSxlQUFlQSxFQUFJQSxFQUFNQSxrQkFBbUJBLEVBQU1BLGVBQzFEQSxFQUFBQSxRQUFRQSxlQUFlQSxFQUFJQSxFQUFNQSxlQUFnQkEsRUFBTUEsZUFTM0RBLEtBQUtBLEdBTERBLEdBREFBLEVBQWFBLEVBQU1BLFdBRW5CQSxFQUFZQSxFQUFXQSxHQUV2QkEsRUFBU0EsRUFBTUEsWUFDZkEsRUFBWUEsRUFBTUEsVUFDYkEsRUFBU0EsRUFBS0EsT0FBUUEsRUFBSUEsRUFBR0EsRUFBT0EsT0FBUUEsSUFBS0EsQ0FDdERBLEdBQUlBLEdBQVFBLEVBQU9BLFFBQ2ZBLEVBQWFBLEVBQU9BLEVBQ25CQSxHQUFXQSxrQkFBa0JBLEVBQU1BLFVBQVdBLEVBQVdBLEtBRTlEQSxFQUFXQSxLQUFLQSxFQUFXQSxFQUFJQSxHQUMvQkEsRUFBTUEsUUFBUUEsR0FFVkEsSUFBU0EsRUFBQUEsYUFBYUEsV0FDdEJBLEVBQVlBLEVBQUFBLG1CQUFtQkEsSUFBSUEsRUFBSUEsRUFBWUEsR0FDL0NBLEVBQVVBLE1BQVFBLEVBQVVBLElBQzVCQSxFQUFXQSxPQUFPQSxFQUFNQSxlQUFpQkEsRUFBR0EsRUFBR0EsSUFFL0NBLEVBQVdBLE9BQU9BLEVBQU1BLGVBQWdCQSxFQUFHQSxHQUMzQ0EsRUFBTUEsbUJBSWRBLEVBQVlBLEVBQUFBLG1CQUFtQkEsSUFBSUEsRUFBSUEsRUFBWUEsR0FDL0NBLEVBQVVBLE1BQVFBLEVBQVVBLElBQzVCQSxFQUFXQSxPQUFPQSxFQUFNQSxlQUFpQkEsRUFBR0EsRUFBR0EsSUFFL0NBLEVBQVdBLE9BQU9BLEVBQU1BLGVBQWdCQSxFQUFHQSxHQUMzQ0EsRUFBTUEsbUJBT2RBLElBSEFBLEVBQVdBLE9BQU9BLEVBQU1BLGVBQWdCQSxHQUN4Q0EsRUFBTUEsZUFBaUJBLEdBRWhCQSxFQUFZQSxFQUFXQSxPQUFPQSxDQUNqQ0EsR0FBSUEsR0FBT0EsRUFBVUEsT0FBT0EsRUFBVUEsS0FBS0EsRUFBVUEsSUFDckRBLEdBQUtBLFFBQVVBLEtBQUtBLElBQUlBLEVBQUtBLFFBQVNBLEVBQVVBLE1BQ2hEQSxFQUFBQSxRQUFRQSxvQkFBb0JBLEVBQUlBLEdBSXBDQSxNQUZBQSxHQUFNQSxlQUFpQkEsRUFBV0EsS0FBS0EsR0FBYUEsR0FFN0NBLEdBckRDSCxFQUFBQSxxQkFBb0JBLEdBREg1ZCxFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFSaGQsRUFBQUEsRUFBQUEsVUFBQUEsRUFBQUEsY0FBTDdCLEVBQUFBLEVBQUFBLE9BQUFBLEVBQUFBLFdBQVRuWCxFQUFBQSxFQUFBQSxXQUFBQSxFQUFBQSxlQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBU21YLEdBQUFBLElBQUFBLFNBQUFBLEdBQUs2QixHQUFBQSxJQUFBQSxTQUFBQSxHQUFRZ2QsR0FBQUEsSUFBQUEsU0FBQUEsR0FDakM0ZCxRQUFBQSxHQUE0QkEsRUFBZUEsRUFBZUEsRUFBK0JBLEVBQXlCQSxHQUM5R0ksR0FBSUEsR0FBVUEsRUFBT0EsV0FDckJBLEdBQVFBLE1BQVFBLEVBQVFBLE9BQVNBLENBQ2pDQSxLQUFLQSxHQUFJQSxHQUFLQSxFQUFNQSxVQUFVQSxVQUFXQSxFQUFJQSxFQUFHQSxFQUFJQSxFQUFHQSxPQUFRQSxJQUMzREEsRUFBUUEsT0FBU0EsRUFBR0EsR0FBR0EsR0FBR0EsT0FFOUJBLEtBQUtBLEdBQUlBLEdBQUtBLEVBQU1BLFVBQVVBLFVBQVdBLEVBQUlBLEVBQUdBLEVBQUlBLEVBQUdBLE9BQVFBLElBQzNEQSxFQUFRQSxRQUFVQSxFQUFHQSxHQUFHQSxHQUFHQSxPQUUvQkEsUUFBT0EsRUFUS0osRUFBQUEsV0FBVUEsR0FETzVkLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVJoZCxFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQUFMN0IsRUFBQUEsRUFBQUEsT0FBQUEsRUFBQUEsV0FBVG5YLEVBQUFBLEVBQUFBLFdBQUFBLEVBQUFBLGVBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFTbVgsR0FBQUEsSUFBQUEsU0FBQUEsR0FBSzZCLEdBQUFBLElBQUFBLFNBQUFBLEdBQVFnZCxHQUFBQSxJQUFBQSxTQUFBQSxHQUNqQzRkLFFBQUFBLEdBQWlDQSxFQUFlQSxFQUFlQSxFQUErQkEsRUFBeUJBLEdBQ25ISyxHQUFJQSxHQUFXQSxFQUFNQSxrQkFBa0JBLFFBQVVBLEVBQzdDQSxFQUFLQSxFQUFNQSxVQUFVQSxTQUNyQkEsR0FBR0EsT0FBU0EsR0FDWkEsRUFBR0EsT0FBT0EsRUFBVUEsRUFBR0EsT0FBU0EsRUFDcENBLEtBQUtBLEdBQUlBLEdBQUlBLEVBQU9BLEVBQUpBLEVBQWNBLElBQUtBLENBQzNCQSxFQUFHQSxRQUFVQSxHQUNiQSxFQUFHQSxRQUNQQSxJQUFJQSxHQUFPQSxFQUFHQSxFQUNWQSxHQUFLQSxPQUFTQSxHQUNkQSxFQUFLQSxPQUFPQSxFQUFHQSxFQUFLQSxPQUFTQSxFQUNqQ0EsS0FBS0EsR0FBSUEsR0FBS0EsRUFBU0EsR0FBTkEsRUFBU0EsSUFDbEJBLEVBQUtBLFFBQVVBLEVBQ2ZBLEVBQUtBLEtBQUtBLEdBQUlBLEdBQUFBLFNBRWRBLEVBQUFBLFFBQVFBLEtBQUtBLEVBQUtBLElBSTlCQSxPQUFPQSxFQW5CS0wsRUFBQUEsZ0JBQWVBLEdBREU1ZCxFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFSaGQsRUFBQUEsRUFBQUEsVUFBQUEsRUFBQUEsY0FBTDdCLEVBQUFBLEVBQUFBLE9BQUFBLEVBQUFBLFdBQVRuWCxFQUFBQSxFQUFBQSxXQUFBQSxFQUFBQSxlQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBU21YLEdBQUFBLElBQUFBLFNBQUFBLEdBQUs2QixHQUFBQSxJQUFBQSxTQUFBQSxHQUFRZ2QsR0FBQUEsSUFBQUEsU0FBQUEsR0FDakM0ZCxRQUFBQSxHQUFpQ0EsRUFBZUEsRUFBZUEsRUFBK0JBLEVBQXlCQSxHQUNuSE0sR0FBSUEsR0FBV0EsRUFBTUEsZUFBZUEsUUFBVUEsRUFDMUNBLEVBQUtBLEVBQU1BLFVBQVVBLFNBQ3JCQSxHQUFHQSxPQUFTQSxHQUNaQSxFQUFHQSxPQUFPQSxFQUFVQSxFQUFHQSxPQUFTQSxFQUNwQ0EsS0FBS0EsR0FBSUEsR0FBSUEsRUFBT0EsRUFBSkEsRUFBY0EsSUFBS0EsQ0FDM0JBLEVBQUdBLFFBQVVBLEdBQ2JBLEVBQUdBLFFBQ1BBLElBQUlBLEdBQU9BLEVBQUdBLEVBQ1ZBLEdBQUtBLE9BQVVBLEVBQUlBLEdBQ25CQSxFQUFLQSxPQUFPQSxFQUFHQSxFQUFLQSxPQUFTQSxFQUFJQSxFQUNyQ0EsS0FBS0EsR0FBSUEsR0FBS0EsRUFBU0EsR0FBTkEsRUFBU0EsSUFDbEJBLEVBQUtBLFFBQVVBLEVBQ2ZBLEVBQUtBLEtBQUtBLEdBQUlBLEdBQUFBLFNBRWRBLEVBQUFBLFFBQVFBLEtBQUtBLEVBQUtBLElBSTlCQSxPQUFPQSxFQW5CS04sRUFBQUEsZ0JBQWVBLEdBREU1ZCxFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFSaGQsRUFBQUEsRUFBQUEsVUFBQUEsRUFBQUEsY0FBTDdCLEVBQUFBLEVBQUFBLE9BQUFBLEVBQUFBLFdBQVRuWCxFQUFBQSxFQUFBQSxXQUFBQSxFQUFBQSxlQUFSQSxVQUFBQSxZQ0VQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBU21YLEdBQUFBLElBQUFBLFNBQUFBLEdBQUs2QixHQUFBQSxJQUFBQSxTQUFBQSxHQUFRZ2QsR0FBQUEsSUFBQUEsU0FBQUEsR0FNakM0ZCxRQUFBQSxHQUFrQ0EsRUFBZUEsRUFBZUEsRUFBK0JBLEVBQXlCQSxHQUNwSE8sR0FBSUEsR0FBVUEsRUFBTUEsa0JBQ2hCQSxFQUFLQSxFQUFNQSxVQUFVQSxVQUVyQkEsRUFBS0EsRUFBTUEsVUFHZkEsSUFGQUEsRUFBR0EsTUFBUUEsRUFFWUEsSUFBbkJBLEVBQVFBLE9BQWNBLENBQ3RCQSxHQUFJQSxHQUFRQSxFQUFHQSxHQUFHQSxFQUlsQkEsT0FIQUEsR0FBTUEsS0FBT0EsRUFBQUEsYUFBYUEsS0FDMUJBLEVBQU1BLE1BQVFBLEVBQ2RBLEVBQUdBLE9BQVNBLEdBQ0xBLEVBR1hBLElBQUtBLEdBQUlBLEdBQUlBLEVBQUdBLEVBQUlBLEVBQVFBLE9BQVFBLElBQUtBLENBQ3JDQSxHQUFJQSxHQUFTQSxFQUFRQSxHQUNqQkEsRUFBUUEsRUFBT0EsT0FBU0EsQ0FDNUJBLEdBQU9BLGVBQWVBLE9BQU9BLGtCQUU3QkEsSUFBSUEsR0FBT0EsRUFBQUEsUUFBUUEsS0FBS0EsRUFBR0EsR0FBR0EsR0FBSUEsRUFBS0EsRUFBT0EsU0FBVUEsRUFBT0EsU0FBVUEsRUFBTUEsS0FDM0VBLEdBQU1BLE9BQVNBLEVBQUFBLGFBQWFBLE9BQzVCQSxFQUFLQSxRQUFVQSxFQUFLQSxRQUFVQSxFQUFLQSxNQUFNQSxFQUFNQSxPQUMvQ0EsRUFBT0EsZUFBZUEsRUFBS0EsVUFDcEJBLEVBQU1BLE9BQVNBLEVBQUFBLGFBQWFBLE1BQ25DQSxFQUFLQSxNQUFRQSxFQUFNQSxNQUNuQkEsRUFBR0EsT0FBU0EsRUFBTUEsT0FDWEEsRUFBTUEsT0FBU0EsRUFBQUEsYUFBYUEsT0FDbkNBLEVBQUtBLFFBQVVBLEVBQUtBLFFBQVVBLEVBQUtBLE1BQU1BLElBSWpEQSxPQUFPQSxFQXJDWFAsR0FBSUEsSUFDQUEsTUFBT0EsRUFDUEEsS0FBTUEsRUFBQUEsYUFBYUEsS0FHUEEsR0FBQUEsaUJBQWdCQSxHQU5DNWQsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBUmhkLEVBQUFBLEVBQUFBLFVBQUFBLEVBQUFBLGNBQUw3QixFQUFBQSxFQUFBQSxPQUFBQSxFQUFBQSxXQUFUblgsRUFBQUEsRUFBQUEsV0FBQUEsRUFBQUEsZUFBUkEsVUFBQUEsWUNGUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQVNtWCxHQUFBQSxJQUFBQSxTQUFBQSxHQUFLNkIsR0FBQUEsSUFBQUEsU0FBQUEsR0FBUWdkLEdBQUFBLElBQUFBLFNBQUFBLEdBTWpDNGQsUUFBQUEsR0FBa0NBLEVBQWVBLEVBQWVBLEVBQStCQSxFQUF5QkEsR0FDcEhRLEdBQUlBLEdBQVVBLEVBQU1BLGVBQ2hCQSxFQUFLQSxFQUFNQSxVQUFVQSxVQUVyQkEsRUFBS0EsRUFBTUEsVUFHZkEsSUFGQUEsRUFBR0EsT0FBU0EsRUFFV0EsSUFBbkJBLEVBQVFBLE9BQWNBLENBQ3RCQSxHQUFJQSxHQUFRQSxFQUFHQSxHQUFHQSxFQUlsQkEsT0FIQUEsR0FBTUEsS0FBT0EsRUFBQUEsYUFBYUEsS0FDMUJBLEVBQU1BLE1BQVFBLEVBQ2RBLEVBQUdBLFFBQVVBLEdBQ05BLEVBR1hBLElBQUtBLEdBQUlBLEdBQUlBLEVBQUdBLEVBQUlBLEVBQVFBLE9BQVFBLElBQUtBLENBQ3JDQSxHQUFJQSxHQUFTQSxFQUFRQSxHQUNqQkEsRUFBU0EsRUFBT0EsUUFBVUEsQ0FDOUJBLEdBQU9BLGdCQUFnQkEsT0FBT0Esa0JBRTlCQSxJQUFJQSxHQUFPQSxFQUFBQSxRQUFRQSxLQUFLQSxFQUFHQSxHQUFHQSxHQUFJQSxFQUFLQSxFQUFPQSxVQUFXQSxFQUFPQSxVQUFXQSxFQUFPQSxLQUM5RUEsR0FBT0EsT0FBU0EsRUFBQUEsYUFBYUEsT0FDN0JBLEVBQUtBLFFBQVVBLEVBQUtBLFFBQVVBLEVBQUtBLE1BQU1BLEVBQU9BLE9BQ2hEQSxFQUFPQSxnQkFBZ0JBLEVBQUtBLFVBQ3JCQSxFQUFPQSxPQUFTQSxFQUFBQSxhQUFhQSxNQUNwQ0EsRUFBS0EsTUFBUUEsRUFBT0EsTUFDcEJBLEVBQUdBLFFBQVVBLEVBQU9BLE9BQ2JBLEVBQU9BLE9BQVNBLEVBQUFBLGFBQWFBLE9BQ3BDQSxFQUFLQSxRQUFVQSxFQUFLQSxRQUFVQSxFQUFLQSxNQUFNQSxJQUlqREEsT0FBT0EsRUFyQ1hSLEdBQUlBLElBQ0FBLE1BQU9BLEVBQ1BBLEtBQU1BLEVBQUFBLGFBQWFBLEtBR1BBLEdBQUFBLGlCQUFnQkEsR0FOQzVkLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVJoZCxFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQUFMN0IsRUFBQUEsRUFBQUEsT0FBQUEsRUFBQUEsV0FBVG5YLEVBQUFBLEVBQUFBLFdBQUFBLEVBQUFBLGVBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFTbVgsR0FBQUEsSUFBQUEsU0FBQUEsR0FBSzZCLEdBQUFBLElBQUFBLFNBQUFBLEdBQVFnZCxHQUFBQSxJQUFBQSxTQUFBQSxHQUNqQzRkLFFBQUFBLEdBQW9DQSxFQUFlQSxFQUFlQSxFQUErQkEsRUFBeUJBLEdBQ3RIUyxJQUFLQSxHQUFJQSxHQUFLQSxFQUFNQSxVQUFVQSxVQUFXQSxFQUFJQSxFQUFHQSxFQUFJQSxFQUFHQSxPQUFRQSxJQUMzREEsSUFBS0EsR0FBSUEsR0FBSUEsRUFBUUEsR0FBTEEsRUFBUUEsSUFDcEJBLEVBQUdBLEdBQUdBLEdBQUdBLFNBQVdBLEVBQUdBLEdBQUdBLEdBQUdBLE9BSXJDQSxLQUFLQSxHQUFJQSxHQUFLQSxFQUFNQSxVQUFVQSxVQUFXQSxFQUFJQSxFQUFHQSxFQUFJQSxFQUFHQSxPQUFRQSxJQUMzREEsSUFBS0EsRUFBSUEsRUFBUUEsR0FBTEEsRUFBUUEsSUFDaEJBLEVBQUdBLEdBQUdBLEdBQUdBLFNBQVdBLEVBQUdBLEdBQUdBLEdBQUdBLE9BSXJDQSxRQUFPQSxFQWJLVCxFQUFBQSxtQkFBa0JBLEdBREQ1ZCxFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFSaGQsRUFBQUEsRUFBQUEsVUFBQUEsRUFBQUEsY0FBTDdCLEVBQUFBLEVBQUFBLE9BQUFBLEVBQUFBLFdBQVRuWCxFQUFBQSxFQUFBQSxXQUFBQSxFQUFBQSxlQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBU21YLEdBQUFBLElBQUFBLFNBQUFBLEdBQUs2QixHQUFBQSxJQUFBQSxTQUFBQSxHQUFVbWUsR0FBQUEsSUFBQUEsU0FBQUEsR0FDbkNtZCxRQUFBQSxHQUE2QkEsRUFBZUEsRUFBZUEsRUFBaUJBLEdBQ3hFQyxHQUErQ0EsS0FBMUNBLEVBQU1BLFdBQWFBLEVBQUFBLFdBQVdBLFFBQy9CQSxPQUFPQSxDQUVYQSxJQUFJQSxHQUFJQSxFQUFPQSxRQUNYQSxFQUFNQSxFQUFPQSxtQkFDakJBLEdBQUVBLEVBQUlBLEVBQUlBLEVBQUlBLEVBQ2RBLEVBQUVBLEVBQUlBLEVBQUlBLEVBQUlBLENBQ2RBLElBQUlBLEdBQUtBLEVBQU1BLFVBSWZBLElBSEFBLEVBQUVBLE1BQVFBLEVBQUlBLE1BQVFBLEVBQUdBLE1BQ3pCQSxFQUFFQSxPQUFTQSxFQUFJQSxPQUFTQSxFQUFHQSxPQUV2QkEsRUFBTUEsY0FDTkEsT0FBT0EsQ0FHWEEsS0FBS0EsR0FEREEsR0FDS0EsRUFBU0EsRUFBS0EsT0FBUUEsRUFBT0EsUUFDbENBLEVBQVNBLEVBQU9BLFFBQVFBLE9BQ3BCQSxFQUFPQSxzQkFDUEEsRUFBQUEsS0FBS0EsTUFBTUEsRUFBS0EsRUFBT0EseUJBRy9CQSxRQUFPQSxFQXRCS0QsRUFBQUEsWUFBV0EsR0FEUW5kLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVZuZSxFQUFBQSxFQUFBQSxZQUFBQSxFQUFBQSxnQkFBTDdCLEVBQUFBLEVBQUFBLE9BQUFBLEVBQUFBLFdBQVRuWCxFQUFBQSxFQUFBQSxXQUFBQSxFQUFBQSxlQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBU21YLEdBQUFBLElBQUFBLFNBQUFBLEdBQUs2QixHQUFBQSxJQUFBQSxTQUFBQSxHQUFVbWUsR0FBQUEsSUFBQUEsU0FBQUEsR0FDbkNtZCxRQUFBQSxHQUFnQ0EsRUFBZUEsRUFBZUEsRUFBaUJBLEdBQzNFRSxHQUErQ0EsS0FBMUNBLEVBQU1BLFdBQWFBLEVBQUFBLFdBQVdBLFFBQy9CQSxPQUFPQSxDQUNYQSxLQUFLQSxFQUFNQSxhQUFlQSxFQUFNQSxjQUFlQSxDQUMzQ0EsR0FBSUEsR0FBS0EsRUFBTUEsVUFDZkEsR0FBR0EsTUFBUUEsRUFBR0EsT0FBU0EsRUFFM0JBLE9BQU9BLEVBUEtGLEVBQUFBLGVBQWNBLEdBREtuZCxFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFWbmUsRUFBQUEsRUFBQUEsWUFBQUEsRUFBQUEsZ0JBQUw3QixFQUFBQSxFQUFBQSxPQUFBQSxFQUFBQSxXQUFUblgsRUFBQUEsRUFBQUEsV0FBQUEsRUFBQUEsZUFBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQVNtWCxHQUFBQSxJQUFBQSxTQUFBQSxHQUFNOEMsR0FBQUEsSUFBQUEsU0FBQUEsR0FBUStkLEdBQUFBLElBQUFBLFNBQUFBLEdBQ2xDeWMsUUFBQUEsR0FBaUNBLEVBQWVBLEVBQWVBLEVBQThCQSxFQUF5QkEsR0FDbEhDLEdBQUlBLEdBQUtBLEVBQU1BLFdBQ2ZBLEdBQUdBLEVBQUlBLEVBQUdBLEVBQUlBLEVBQUdBLE1BQVFBLEVBQUdBLE9BQVNBLEVBRWpDQSxFQUFNQSxTQUNOQSxFQUFHQSxNQUFRQSxFQUFNQSxPQUFPQSxXQUN4QkEsRUFBR0EsT0FBU0EsRUFBTUEsT0FBT0EsWUFHN0JBLElBQUlBLEdBQUtBLEVBQU1BLFNBTWZBLE9BTGlCQSxLQUFiQSxFQUFHQSxRQUNIQSxFQUFHQSxNQUFRQSxFQUFHQSxPQUNBQSxJQUFkQSxFQUFHQSxTQUNIQSxFQUFHQSxPQUFTQSxFQUFHQSxTQUVaQSxFQWZLRCxFQUFBQSxnQkFBZUEsR0FER3pjLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVIvZCxFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQUFOOUMsRUFBQUEsRUFBQUEsUUFBQUEsRUFBQUEsWUFBVG5YLEVBQUFBLEVBQUFBLFdBQUFBLEVBQUFBLGVBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFTbVgsR0FBQUEsSUFBQUEsU0FBQUEsR0FBTThDLEdBQUFBLElBQUFBLFNBQUFBLEdBQVErZCxHQUFBQSxJQUFBQSxTQUFBQSxHQUNsQ3ljLFFBQUFBLEdBQTZCQSxFQUFlQSxFQUFlQSxFQUE4QkEsRUFBeUJBLEdBQzlHRSxHQUFJQSxHQUFLQSxFQUFNQSxZQUVYQSxFQUFLQSxFQUNMQSxFQUFLQSxFQUVMQSxFQUFLQSxFQUFNQSxTQU1mQSxRQUxJQSxFQUFHQSxRQUFVQSxFQUFHQSxRQUNoQkEsRUFBS0EsRUFBR0EsTUFBUUEsRUFBR0EsT0FDbkJBLEVBQUdBLFNBQVdBLEVBQUdBLFNBQ2pCQSxFQUFLQSxFQUFHQSxPQUFTQSxFQUFHQSxRQUVoQkEsRUFBTUEsU0FDVkEsSUFBS0EsR0FBQUEsUUFBUUEsUUFDVEEsRUFBS0EsRUFBS0EsS0FBS0EsSUFBSUEsRUFBSUEsRUFDdkJBLE1BQ0pBLEtBQUtBLEdBQUFBLFFBQVFBLGNBQ1RBLEVBQUtBLEVBQUtBLEtBQUtBLElBQUlBLEVBQUlBLEVBQ3ZCQSxNQUNKQSxLQUFLQSxHQUFBQSxRQUFRQSxLQUNUQSxFQUFLQSxFQUFLQSxDQUNWQSxNQUNKQSxLQUFLQSxHQUFBQSxRQUFRQSxNQVFqQkEsTUFIQUEsR0FBTUEsU0FBV0EsRUFDakJBLEVBQU1BLFNBQVdBLEdBRVZBLEVBOUJLRixFQUFBQSxZQUFXQSxHQURPemMsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBUi9kLEVBQUFBLEVBQUFBLFVBQUFBLEVBQUFBLGNBQU45QyxFQUFBQSxFQUFBQSxRQUFBQSxFQUFBQSxZQUFUblgsRUFBQUEsRUFBQUEsV0FBQUEsRUFBQUEsZUFBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQVNtWCxHQUFBQSxJQUFBQSxTQUFBQSxHQUFNOEMsR0FBQUEsSUFBQUEsU0FBQUEsR0FBUStkLEdBQUFBLElBQUFBLFNBQUFBLEdBQ2xDeWMsUUFBQUEsR0FBNEJBLEVBQWVBLEVBQWVBLEVBQThCQSxFQUF5QkEsR0FDN0dHLEdBQUlBLEdBQUtBLEVBQU1BLFlBR2ZBLE9BRkFBLEdBQUdBLE1BQVFBLEVBQU1BLFlBQVlBLE1BQVFBLEVBQU1BLFNBQzNDQSxFQUFHQSxPQUFTQSxFQUFNQSxZQUFZQSxPQUFTQSxFQUFNQSxVQUN0Q0EsRUFKS0gsRUFBQUEsV0FBVUEsR0FEUXpjLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVIvZCxFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQUFOOUMsRUFBQUEsRUFBQUEsUUFBQUEsRUFBQUEsWUFBVG5YLEVBQUFBLEVBQUFBLFdBQUFBLEVBQUFBLGVBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFTbVgsR0FBQUEsSUFBQUEsU0FBQUEsR0FBTThDLEdBQUFBLElBQUFBLFNBQUFBLEdBQVErZCxHQUFBQSxJQUFBQSxTQUFBQSxHQUNsQ3ljLFFBQUFBLEdBQW1DQSxFQUFlQSxFQUFlQSxFQUE4QkEsRUFBeUJBLEdBRXBISSxNQURBQSxHQUFPQSxZQUFjQSxFQUFBQSxXQUFXQSxjQUN6QkEsRUFGS0osRUFBQUEsa0JBQWlCQSxHQURDemMsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBUi9kLEVBQUFBLEVBQUFBLFVBQUFBLEVBQUFBLGNBQU45QyxFQUFBQSxFQUFBQSxRQUFBQSxFQUFBQSxZQUFUblgsRUFBQUEsRUFBQUEsV0FBQUEsRUFBQUEsZUFBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQVNtWCxHQUFBQSxJQUFBQSxTQUFBQSxHQUFNOEMsR0FBQUEsSUFBQUEsU0FBQUEsR0FBUW1lLEdBQUFBLElBQUFBLFNBQUFBLEdBQ2xDMGMsUUFBQUEsR0FBOEJBLEVBQW9CQSxFQUFZQSxFQUF5QkEsR0FDbkZDLE9BQU9BLEVBREtELEVBQUFBLGFBQVlBLEdBRE0xYyxFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFSbmUsRUFBQUEsRUFBQUEsVUFBQUEsRUFBQUEsY0FBTjlDLEVBQUFBLEVBQUFBLFFBQUFBLEVBQUFBLFlBQVRuWCxFQUFBQSxFQUFBQSxXQUFBQSxFQUFBQSxlQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBU21YLEdBQUFBLElBQUFBLFNBQUFBLEdBQU04QyxHQUFBQSxJQUFBQSxTQUFBQSxHQUFRbWUsR0FBQUEsSUFBQUEsU0FBQUEsR0FDbEMwYyxRQUFBQSxHQUFnQ0EsRUFBb0JBLEVBQVlBLEVBQXlCQSxHQUdyRkUsTUFGQUEsR0FBUUEsUUFBUUEsRUFBS0EsU0FDckJBLEVBQUtBLGFBQWNBLEdBQ1pBLEVBSEtGLEVBQUFBLGVBQWNBLEdBREkxYyxFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFSbmUsRUFBQUEsRUFBQUEsVUFBQUEsRUFBQUEsY0FBTjlDLEVBQUFBLEVBQUFBLFFBQUFBLEVBQUFBLFlBQVRuWCxFQUFBQSxFQUFBQSxXQUFBQSxFQUFBQSxlQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBU21YLEdBQUFBLElBQUFBLFNBQUFBLEdBQU04QyxHQUFBQSxJQUFBQSxTQUFBQSxHQUFRbWUsR0FBQUEsSUFBQUEsU0FBQUEsR0FDbEMwYyxRQUFBQSxHQUErQkEsRUFBb0JBLEVBQVlBLEVBQXlCQSxHQUNwRkcsR0FBSUEsR0FBU0EsRUFBS0EsT0FBT0EsTUFDekJBLEtBQUtBLEdBQWdDQSxJQUF0QkEsRUFBT0EsWUFBMkNBLElBQXZCQSxFQUFPQSxZQUc3Q0EsTUFGQUEsR0FBUUEsUUFDUkEsRUFBSUEsV0FDR0EsQ0FHWEEsSUFBSUEsR0FBVUEsRUFBS0EsT0FBT0EsT0FDMUJBLElBQUlBLElBQVlBLEVBQUFBLFFBQVFBLE1BQVFBLElBQVlBLEVBQUFBLFFBQVFBLGNBQ2hEQSxPQUFPQSxDQUVYQSxJQUFJQSxHQUFLQSxFQUFLQSxPQU9kQSxPQU5BQSxHQUFHQSxFQUFJQSxFQUFHQSxFQUFJQSxFQUNkQSxFQUFHQSxNQUFRQSxFQUFPQSxXQUNsQkEsRUFBR0EsT0FBU0EsRUFBT0EsWUFDbkJBLEVBQUFBLEtBQUtBLFVBQVVBLEVBQUlBLEVBQUtBLE9BQU9BLFVBQy9CQSxFQUFBQSxLQUFLQSxVQUFVQSxFQUFJQSxFQUFJQSxrQkFFbEJBLEVBQUFBLEtBQUtBLGNBQWNBLEVBQUlBLElBTXJCQSxHQUxIQSxFQUFRQSxRQUNSQSxFQUFJQSxXQUNHQSxHQXRCQ0gsRUFBQUEsY0FBYUEsR0FESzFjLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVJuZSxFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQUFOOUMsRUFBQUEsRUFBQUEsUUFBQUEsRUFBQUEsWUFBVG5YLEVBQUFBLEVBQUFBLFdBQUFBLEVBQUFBLGVBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFTbVgsR0FBQUEsSUFBQUEsU0FBQUEsR0FBTThDLEdBQUFBLElBQUFBLFNBQUFBLEdBQVF1ZSxHQUFBQSxJQUFBQSxTQUFBQSxHQUNsQzBjLFFBQUFBLEdBQWlDQSxFQUFlQSxFQUFlQSxFQUE4QkEsRUFBeUJBLEdBQ2xIQyxHQUFJQSxHQUFLQSxFQUFNQSxXQUVmQSxPQURBQSxHQUFHQSxFQUFJQSxFQUFHQSxFQUFJQSxFQUFHQSxNQUFRQSxFQUFHQSxPQUFTQSxFQUNoQ0EsRUFBTUEsUUFFWEEsRUFBR0EsTUFBUUEsRUFBTUEsT0FBT0EsV0FDeEJBLEVBQUdBLE9BQVNBLEVBQU1BLE9BQU9BLGFBQ2xCQSxJQUhJQSxFQUpDRCxFQUFBQSxnQkFBZUEsR0FERzFjLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVJ2ZSxFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQUFOOUMsRUFBQUEsRUFBQUEsUUFBQUEsRUFBQUEsWUFBVG5YLEVBQUFBLEVBQUFBLFdBQUFBLEVBQUFBLGVBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFTbVgsR0FBQUEsSUFBQUEsU0FBQUEsR0FBTThDLEdBQUFBLElBQUFBLFNBQUFBLEdBQVF1ZSxHQUFBQSxJQUFBQSxTQUFBQSxHQUNsQzBjLFFBQUFBLEdBQTZCQSxFQUFlQSxFQUFlQSxFQUE4QkEsRUFBeUJBLEdBQzlHRSxHQUFJQSxHQUFLQSxFQUFNQSxjQUNYQSxFQUFLQSxFQUFHQSxNQUNSQSxFQUFLQSxFQUFHQSxPQUNSQSxFQUFLQSxFQUFNQSxXQUVWQSxVQUFTQSxLQUNWQSxFQUFLQSxFQUFHQSxPQUNQQSxTQUFTQSxLQUNWQSxFQUFLQSxFQUFHQSxPQUVaQSxJQUFJQSxHQUFLQSxFQUNMQSxFQUFLQSxDQVdUQSxRQVZJQSxFQUFHQSxNQUFRQSxJQUNYQSxFQUFLQSxFQUFLQSxFQUFHQSxPQUNiQSxFQUFHQSxPQUFTQSxJQUNaQSxFQUFLQSxFQUFLQSxFQUFHQSxRQUVaQSxTQUFTQSxFQUFHQSxTQUNiQSxFQUFLQSxHQUNKQSxTQUFTQSxFQUFHQSxVQUNiQSxFQUFLQSxHQUVEQSxFQUFNQSxTQUNWQSxRQUNBQSxJQUFLQSxHQUFBQSxRQUFRQSxRQUNUQSxFQUFLQSxFQUFLQSxLQUFLQSxJQUFJQSxFQUFJQSxFQUN2QkEsTUFDSkEsS0FBS0EsR0FBQUEsUUFBUUEsY0FDVEEsRUFBS0EsRUFBS0EsS0FBS0EsSUFBSUEsRUFBSUEsRUFDdkJBLE1BQ0pBLEtBQUtBLEdBQUFBLFFBQVFBLEtBQ0pBLFNBQVNBLEVBQUdBLFNBQ2JBLEVBQUtBLEdBQ0pBLFNBQVNBLEVBQUdBLFVBQ2JBLEVBQUtBLEVBQ1RBLE1BQ0pBLEtBQUtBLEdBQUFBLFFBQVFBLEtBQ1RBLEVBQUtBLEVBQUtBLEVBTWxCQSxNQUZBQSxHQUFNQSxTQUFXQSxFQUNqQkEsRUFBTUEsU0FBV0EsR0FDVkEsRUE1Q0tGLEVBQUFBLFlBQVdBLEdBRE8xYyxFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFSdmUsRUFBQUEsRUFBQUEsVUFBQUEsRUFBQUEsY0FBTjlDLEVBQUFBLEVBQUFBLFFBQUFBLEVBQUFBLFlBQVRuWCxFQUFBQSxFQUFBQSxXQUFBQSxFQUFBQSxlQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBU21YLEdBQUFBLElBQUFBLFNBQUFBLEdBQU04QyxHQUFBQSxJQUFBQSxTQUFBQSxHQUFRdWUsR0FBQUEsSUFBQUEsU0FBQUEsR0FDbEMwYyxRQUFBQSxHQUE0QkEsRUFBZUEsRUFBZUEsRUFBOEJBLEVBQXlCQSxHQUM3R0csR0FBSUEsR0FBS0EsRUFBT0EsV0FHaEJBLE9BRkFBLEdBQUdBLE1BQVFBLEVBQU1BLFlBQVlBLE1BQVFBLEVBQU1BLFNBQzNDQSxFQUFHQSxPQUFTQSxFQUFNQSxZQUFZQSxPQUFTQSxFQUFNQSxVQUN0Q0EsRUFKS0gsRUFBQUEsV0FBVUEsR0FEUTFjLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVJ2ZSxFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQUFOOUMsRUFBQUEsRUFBQUEsUUFBQUEsRUFBQUEsWUFBVG5YLEVBQUFBLEVBQUFBLFdBQUFBLEVBQUFBLGVBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFTbVgsR0FBQUEsSUFBQUEsU0FBQUEsR0FBTThDLEdBQUFBLElBQUFBLFNBQUFBLEdBQVkyZSxHQUFBQSxJQUFBQSxTQUFBQSxHQUN0QzBjLFFBQUFBLEdBQW9DQSxFQUFlQSxFQUFlQSxFQUFpQkEsRUFBaUJBLEdBQ2hHQyxJQUFLQSxFQUFNQSxpQkFDUEEsT0FBT0EsQ0FFWEEsSUFBSUEsR0FBSUEsRUFBTUEsVUFBVUEsTUFDcEJBLEVBQUlBLEVBQU1BLFVBQVVBLE9BQ3BCQSxFQUFLQSxFQUFNQSxRQUFRQSxNQUNuQkEsRUFBS0EsRUFBTUEsUUFBUUEsT0FFbkJBLEVBQUtBLEVBQUlBLEVBQ1RBLEVBQUtBLEVBQUlBLENBQ0hBLEtBQU5BLElBQ0FBLEVBQUtBLEdBQ0NBLElBQU5BLElBQ0FBLEVBQUtBLEVBRVRBLElBQUlBLEdBQVFBLEVBQU9BLFFBQ25CQSxJQUFJQSxFQUFNQSxVQUFZQSxFQUFBQSxRQUFRQSxLQUUxQkEsTUFEQUEsR0FBQUEsS0FBS0EsWUFBWUEsRUFBSUEsRUFBSUEsSUFDbEJBLENBR1hBLElBQUlBLEdBQVFBLENBQ1pBLFFBQVFBLEVBQU1BLFNBQ1ZBLElBQUtBLEdBQUFBLFFBQVFBLFFBQ1RBLEVBQWFBLEVBQUxBLEVBQVVBLEVBQUtBLENBQ3ZCQSxNQUNKQSxLQUFLQSxHQUFBQSxRQUFRQSxjQUNUQSxFQUFhQSxFQUFMQSxFQUFVQSxFQUFLQSxDQUN2QkEsTUFDSkEsS0FBS0EsR0FBQUEsUUFBUUEsTUFLakJBLEdBQUlBLElBQU1BLEVBQUtBLEVBQVFBLEdBQU9BLEVBRTFCQSxHQUFNQSxFQUFLQSxFQUFRQSxHQUFPQSxDQUs5QkEsT0FIQUEsR0FBQUEsS0FBS0EsWUFBWUEsRUFBT0EsRUFBT0EsR0FDL0JBLEVBQUFBLEtBQUtBLFVBQVVBLEVBQU9BLEVBQUlBLElBRW5CQSxFQTFDS0QsRUFBQUEsbUJBQWtCQSxHQURJMWMsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBWjNlLEVBQUFBLEVBQUFBLGNBQUFBLEVBQUFBLGtCQUFOOUMsRUFBQUEsRUFBQUEsUUFBQUEsRUFBQUEsWUFBVG5YLEVBQUFBLEVBQUFBLFdBQUFBLEVBQUFBLGVBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFTbVgsR0FBQUEsSUFBQUEsU0FBQUEsR0FBTThDLEdBQUFBLElBQUFBLFNBQUFBLEdBQVkyZSxHQUFBQSxJQUFBQSxTQUFBQSxHQUN0QzBjLFFBQUFBLEdBQTZCQSxFQUFlQSxFQUFlQSxFQUFpQkEsRUFBaUJBLEdBQ3pGRSxJQUFLQSxFQUFNQSxpQkFDUEEsT0FBT0EsQ0FFWEEsSUFBSUEsRUFBTUEsVUFBWUEsRUFBQUEsUUFBUUEsZUFBaUJBLEVBQU1BLFVBQVdBLENBQzVEQSxHQUFJQSxHQUFRQSxFQUFNQSxTQUNsQkEsR0FBQUEsS0FBS0EsU0FBU0EsRUFFZEEsSUFBSUEsR0FBVUEsRUFBTUEsT0FDcEJBLEdBQUFBLEtBQUtBLFVBQVVBLEVBQVNBLEVBQU9BLFVBQy9CQSxFQUFBQSxLQUFLQSxRQUFRQSxHQUViQSxFQUFPQSxRQUFVQSxFQUFBQSxLQUFLQSxPQUFPQSxFQUFPQSxHQUd4Q0EsT0FBT0EsRUFmS0YsRUFBQUEsWUFBV0EsR0FEVzFjLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVozZSxFQUFBQSxFQUFBQSxjQUFBQSxFQUFBQSxrQkFBTjlDLEVBQUFBLEVBQUFBLFFBQUFBLEVBQUFBLFlBQVRuWCxFQUFBQSxFQUFBQSxXQUFBQSxFQUFBQSxlQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBU21YLEdBQUFBLElBQUFBLFNBQUFBLEdBQU04QyxHQUFBQSxJQUFBQSxTQUFBQSxHQUFZMmUsR0FBQUEsSUFBQUEsU0FBQUEsR0FDdEMwYyxRQUFBQSxHQUF1Q0EsRUFBZUEsRUFBZUEsRUFBaUJBLEVBQWlCQSxHQUVuR0csR0FEQUEsRUFBTUEsa0JBQW1CQSxFQUM0QkEsS0FBaERBLEVBQU1BLFdBQWFBLEVBQUFBLFdBQVdBLGNBQy9CQSxPQUFPQSxDQUVYQSxHQUFBQSxLQUFLQSxTQUFTQSxFQUFPQSxVQUNyQkEsRUFBT0EsUUFBVUEsRUFBQUEsWUFBWUEsRUFFN0JBLElBQUlBLEdBQVVBLEVBQU1BLE9BSXBCQSxPQUhBQSxHQUFRQSxFQUFJQSxFQUFRQSxFQUFJQSxFQUFRQSxNQUFRQSxFQUFRQSxPQUFTQSxFQUV6REEsRUFBTUEsbUJBQXFCQSxFQUFNQSxRQUMxQkEsRUFaS0gsRUFBQUEsc0JBQXFCQSxHQURDMWMsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBWjNlLEVBQUFBLEVBQUFBLGNBQUFBLEVBQUFBLGtCQUFOOUMsRUFBQUEsRUFBQUEsUUFBQUEsRUFBQUEsWUFBVG5YLEVBQUFBLEVBQUFBLFdBQUFBLEVBQUFBLGVBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFTbVgsR0FBQUEsSUFBQUEsU0FBQUEsR0FBTThDLEdBQUFBLElBQUFBLFNBQUFBLEdBQVkyZSxHQUFBQSxJQUFBQSxTQUFBQSxHQUN0QzBjLFFBQUFBLEdBQXFDQSxFQUFlQSxFQUFlQSxFQUFpQkEsRUFBaUJBLEdBQ2pHSSxJQUFLQSxFQUFNQSxpQkFDUEEsT0FBT0EsQ0FFWEEsSUFBSUEsR0FBVUEsRUFBTUEsT0FDcEJBLEdBQVFBLEVBQUlBLEVBQVFBLEVBQUlBLENBRXhCQSxJQUFJQSxHQUFTQSxFQUFNQSxNQUNuQkEsR0FBUUEsTUFBUUEsRUFBT0EsV0FDdkJBLEVBQVFBLE9BQVNBLEVBQU9BLFdBRXhCQSxJQUFJQSxHQUFZQSxFQUFNQSxTQXlCdEJBLE9BeEJBQSxHQUFVQSxFQUFJQSxFQUFVQSxFQUFJQSxFQUM1QkEsRUFBVUEsTUFBUUEsRUFBTUEsWUFDeEJBLEVBQVVBLE9BQVNBLEVBQU1BLGFBUXpCQSxFQUFNQSxXQUFhQSxFQUFBQSxLQUFLQSxRQUFRQSxFQUFXQSxFQUFNQSxZQVc3Q0EsRUFBTUEsVUFBWUEsRUFBQUEsUUFBUUEsTUFDMUJBLEVBQUFBLEtBQUtBLE1BQU1BLEVBQVdBLElBRW5CQSxFQXBDS0osRUFBQUEsb0JBQW1CQSxHQURHMWMsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBWjNlLEVBQUFBLEVBQUFBLGNBQUFBLEVBQUFBLGtCQUFOOUMsRUFBQUEsRUFBQUEsUUFBQUEsRUFBQUEsWUFBVG5YLEVBQUFBLEVBQUFBLFdBQUFBLEVBQUFBLGVBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQTtBQUFTbVgsR0FBQUEsSUFBQUEsU0FBQUEsR0FBTThDLEdBQUFBLElBQUFBLFNBQUFBLEdBQU9rZixHQUFBQSxJQUFBQSxTQUFBQSxHQUNqQ3djLFFBQUFBLEdBQTBCQSxFQUFlQSxFQUFlQSxFQUE2QkEsRUFBZ0NBLEVBQWNBLEdBQy9IQyxHQUFJQSxHQUFTQSxFQUFNQSxNQUNuQkEsT0FBS0EsSUFBZ0NBLElBQXRCQSxFQUFPQSxZQUEyQ0EsSUFBdkJBLEVBQU9BLGFBR2pEQSxFQUFJQSxPQUNKQSxFQUFBQSxLQUFLQSxRQUFRQSxpQkFBaUJBLEVBQUtBLEVBQU9BLEdBQzFDQSxFQUFJQSxTQUFTQSxFQUFNQSxVQUNuQkEsRUFBT0EsS0FBS0EsRUFBSUEsS0FDaEJBLEVBQUlBLFdBRUdBLElBUklBLEVBSENELEVBQUFBLFNBQVFBLEdBRFN4YyxFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFQbGYsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBTjlDLEVBQUFBLEVBQUFBLFFBQUFBLEVBQUFBLFlBQVRuWCxFQUFBQSxFQUFBQSxXQUFBQSxFQUFBQSxlQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBU21YLEdBQUFBLElBQUFBLFNBQUFBLEdBQU1RLEdBQUFBLElBQUFBLFNBQUFBLEdBQVFpYyxHQUFBQSxJQUFBQSxTQUFBQSxHQUNsQ2lpQixRQUFBQSxHQUE0QkEsRUFBZUEsRUFBZUEsRUFBaUJBLEVBQXlCQSxHQUNoR0MsR0FBSUEsR0FBS0EsRUFBTUEsU0FDZkEsR0FBR0EsRUFBSUEsRUFBR0EsRUFBSUEsRUFDZEEsRUFBQUEsS0FBS0EsT0FBT0EsRUFBTUEsVUFBV0EsRUFFN0JBLEtBQUtBLEdBQUlBLEdBQVNBLEVBQUtBLE9BQVFBLEVBQU9BLFFBQ2xDQSxFQUFPQSxRQUFRQSxRQUFRQSxFQUkzQkEsT0FEQUEsR0FBQUEsS0FBS0EsT0FBT0EsRUFBTUEsVUFBV0EsRUFBTUEsZUFDNUJBLEVBVktELEVBQUFBLFdBQVVBLEdBRFFqaUIsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBUmpjLEVBQUFBLEVBQUFBLFVBQUFBLEVBQUFBLGNBQU5SLEVBQUFBLEVBQUFBLFFBQUFBLEVBQUFBLFlBQVRuWCxFQUFBQSxFQUFBQSxXQUFBQSxFQUFBQSxlQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBU21YLEdBQUFBLElBQUFBLFNBQUFBLEdBQU1RLEdBQUFBLElBQUFBLFNBQUFBLEdBQVVxZixHQUFBQSxJQUFBQSxTQUFBQSxHQUNwQytlLFFBQUFBLEdBQWdDQSxFQUFlQSxFQUFlQSxFQUFpQkEsR0FDM0VDLEdBQStDQSxLQUExQ0EsRUFBTUEsV0FBYUEsRUFBQUEsV0FBV0EsUUFDL0JBLE9BQU9BLENBQ1hBLEtBQUtBLEVBQU1BLFdBQVlBLENBQ25CQSxHQUFJQSxHQUFLQSxFQUFNQSxVQUNmQSxHQUFHQSxNQUFRQSxFQUFHQSxPQUFTQSxFQUUzQkEsT0FBT0EsRUFQS0QsRUFBQUEsZUFBY0EsR0FETS9lLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVZyZixFQUFBQSxFQUFBQSxZQUFBQSxFQUFBQSxnQkFBTlIsRUFBQUEsRUFBQUEsUUFBQUEsRUFBQUEsWUFBVG5YLEVBQUFBLEVBQUFBLFdBQUFBLEVBQUFBLGVBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFTbVgsR0FBQUEsSUFBQUEsU0FBQUEsR0FBTTJFLEdBQUFBLElBQUFBLFNBQUFBLEdBQVkwZSxHQUFBQSxJQUFBQSxTQUFBQSxHQUMzQnliLEVBQUFBLGlCQUFtQkEsU0FBVUEsRUFBZUEsRUFBZ0NBLEVBQWtDQSxFQUFrQ0EsR0FDdkosR0FBa0QsS0FBN0M1VSxFQUFNd0IsV0FBYTdpQyxFQUFBOGlDLFdBQVc2RixXQUMvQixPQUFPLENBRVgsSUFBSTdELEdBQVFsOUIsRUFBS3N1QyxVQUNqQixLQUFLcFIsRUFDRCxPQUFPLENBRVhBLEdBQU1vQixPQUFPckQsWUFBYzdpQyxFQUFBOGlDLFdBQVdNLGNBRXRDLElBQUkrUyxHQUFVclIsRUFBTW9CLE9BQU9nRCxZQVEzQixPQVBLaU4sS0FDREEsRUFBVXJSLEVBQU1vQixPQUFPZ0QsY0FBZ0JscEMsRUFBQThQLEtBQUtoRixVQUNoRDlLLEVBQUE4UCxLQUFLMnhCLE9BQU9FLEVBQU9rSCxjQUFlc04sR0FDbENuMkMsRUFBQThQLEtBQUtvZSxVQUFVaW9CLEVBQVM5VSxFQUFNK1UsaUJBQWtCL1UsRUFBTWdWLGdCQUV0RHIyQyxFQUFBMGlDLEtBQUswRCxRQUFReUUsZUFBZS9GLElBRXJCLElBbkIyQnRLLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVoxZSxFQUFBQSxFQUFBQSxjQUFBQSxFQUFBQSxrQkFBTjNFLEVBQUFBLEVBQUFBLFFBQUFBLEVBQUFBLFlBQVRuWCxFQUFBQSxFQUFBQSxXQUFBQSxFQUFBQSxlQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBU21YLEdBQUFBLElBQUFBLFNBQUFBLEdBQU0yRSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFZMGUsR0FBQUEsSUFBQUEsU0FBQUEsR0FDM0J5YixFQUFBQSxnQkFBa0JBLFNBQVVBLEVBQWVBLEVBQWdDQSxFQUFrQ0EsRUFBa0NBLEdBQ3RKLEdBQWtELEtBQTdDNVUsRUFBTXdCLFdBQWE3aUMsRUFBQThpQyxXQUFXNkYsV0FDL0IsT0FBTyxDQUVYLElBQUk3RCxHQUFRbDlCLEVBQUtzdUMsVUFLakIsT0FKSXBSLEtBQ0FBLEVBQU1vQixPQUFPckQsWUFBYzdpQyxFQUFBOGlDLFdBQVdNLGVBQ3RDcGpDLEVBQUEwaUMsS0FBSzBELFFBQVF5RSxlQUFlL0YsS0FFekIsSUFWMkJ0SyxFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFaMWUsRUFBQUEsRUFBQUEsY0FBQUEsRUFBQUEsa0JBQU4zRSxFQUFBQSxFQUFBQSxRQUFBQSxFQUFBQSxZQUFUblgsRUFBQUEsRUFBQUEsV0FBQUEsRUFBQUEsZUFBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQVNtWCxHQUFBQSxJQUFBQSxTQUFBQSxHQUF1QjJGLEdBQUFBLElBQUFBLFNBQUFBLEdBQVFnZSxHQUFBQSxJQUFBQSxTQUFBQSxHQUNuRHdiLFFBQUFBLEdBQTRCQSxFQUFlQSxFQUFlQSxFQUFpQkEsRUFBd0JBLEdBQy9GQyxHQUFJQSxHQUFLQSxFQUFNQSxZQUNmQSxLQUFLQSxFQUFLQSxRQUVOQSxNQURBQSxHQUFHQSxNQUFRQSxFQUFHQSxPQUFTQSxHQUNoQkEsQ0FHWEEsSUFBSUEsR0FBS0EsRUFBTUEsVUFDWEEsR0FBQUEsUUFBUUEsYUFBYUEsSUFDckJBLEVBQUdBLFlBR1BBLElBQUlBLEdBQVVBLEVBQUtBLFFBQVFBLE9BQU9BLFlBRTlCQSxFQUFLQSxFQUFNQSxTQVFmQSxPQVBBQSxHQUFHQSxHQUFLQSxFQUFHQSxRQUNYQSxFQUFHQSxHQUFLQSxFQUFHQSxRQUNYQSxFQUFHQSxNQUFRQSxLQUFLQSxJQUFJQSxFQUFNQSxVQUFVQSxNQUFPQSxFQUFRQSxPQUNuREEsRUFBR0EsT0FBU0EsS0FBS0EsSUFBSUEsRUFBTUEsVUFBVUEsT0FBUUEsRUFBUUEsUUFFckRBLEVBQUtBLFFBQVFBLFFBQVFBLElBRWRBLEVBdEJLRCxFQUFBQSxXQUFVQSxHQUR5QnhiLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVJoZSxFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQUF2QjNGLEVBQUFBLEVBQUFBLHlCQUFBQSxFQUFBQSw2QkFBVG5YLEVBQUFBLEVBQUFBLFdBQUFBLEVBQUFBLGVBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFTbVgsR0FBQUEsSUFBQUEsU0FBQUEsR0FBdUIyRixHQUFBQSxJQUFBQSxTQUFBQSxHQUFRZ2UsR0FBQUEsSUFBQUEsU0FBQUEsR0FDbkR3YixRQUFBQSxHQUE0QkEsRUFBZUEsRUFBZUEsRUFBaUJBLEVBQXdCQSxHQUMvRkUsR0FBSUEsR0FBS0EsRUFBT0EsWUFNaEJBLE9BTEFBLEdBQUdBLEVBQUlBLEVBQUdBLEVBQUlBLEVBQ2RBLEVBQUFBLEtBQUtBLE9BQU9BLEVBQU1BLGFBQWNBLElBSXpCQSxFQVBLRixFQUFBQSxXQUFVQSxHQUR5QnhiLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVJoZSxFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQUF2QjNGLEVBQUFBLEVBQUFBLHlCQUFBQSxFQUFBQSw2QkFBVG5YLEVBQUFBLEVBQUFBLFdBQUFBLEVBQUFBLGVBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFTbVgsR0FBQUEsSUFBQUEsU0FBQUEsR0FBdUIyRixHQUFBQSxJQUFBQSxTQUFBQSxHQUFRZ2UsR0FBQUEsSUFBQUEsU0FBQUEsR0FDbkR3YixRQUFBQSxHQUErQkEsRUFBZUEsRUFBZUEsRUFBaUJBLEVBQXdCQSxHQUNsR0csR0FBSUEsR0FBS0EsRUFBTUEsV0FDWEEsRUFBV0EsRUFBTUEsVUFFakJBLEVBQVVBLEVBQUdBLGdCQUFrQkEsRUFBU0EsT0FDckNBLEVBQUdBLGlCQUFtQkEsRUFBU0EsTUFRdENBLE9BUEFBLEdBQUdBLGNBQWdCQSxFQUFTQSxNQUM1QkEsRUFBR0EsZUFBaUJBLEVBQVNBLFFBRXpCQSxFQUFBQSxRQUFRQSxhQUFhQSxJQUFPQSxJQUM1QkEsRUFBR0EsY0FHQUEsRUFiS0gsRUFBQUEsY0FBYUEsR0FEc0J4YixFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFSaGUsRUFBQUEsRUFBQUEsVUFBQUEsRUFBQUEsY0FBdkIzRixFQUFBQSxFQUFBQSx5QkFBQUEsRUFBQUEsNkJBQVRuWCxFQUFBQSxFQUFBQSxXQUFBQSxFQUFBQSxlQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBU21YLEdBQUFBLElBQUFBLFNBQUFBLEdBQXVCMkYsR0FBQUEsSUFBQUEsU0FBQUEsR0FBUXNlLEdBQUFBLElBQUFBLFNBQUFBLEdBQ3hDc2IsRUFBQUEsV0FBYUEsU0FBVUEsRUFBZUEsRUFBZUEsRUFBOEJBLEVBQXdCQSxHQUNsSCxHQUFJcE8sR0FBSzNHLEVBQU8wRyxXQUdoQixJQUZBQyxFQUFHbGQsTUFBUWtkLEVBQUdqZCxPQUFTLEdBRWxCempCLEVBQUttRixRQUNOLE9BQU8sQ0FFWCxJQUFJNHBDLEdBQUt0VixFQUFNdVYsV0FDWEMsRUFBUTFWLEVBQU0yVixTQU1sQixPQUxBRCxHQUFNenJCLE1BQVN1ckIsRUFBR0ksc0JBQW9EdlUsT0FBT0Msa0JBQW5DdEIsRUFBTWlILGNBQWNoZCxNQUM5RHlyQixFQUFNeHJCLE9BQVVzckIsRUFBR0ssb0JBQW1EeFUsT0FBT0Msa0JBQXBDdEIsRUFBTWlILGNBQWMvYyxPQUU3RHpqQixFQUFLbUYsUUFBUXc3QixRQUFRc08sSUFFZCxJQWZ3Q3piLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVJ0ZSxFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQUF2QjNGLEVBQUFBLEVBQUFBLHlCQUFBQSxFQUFBQSw2QkFBVG5YLEVBQUFBLEVBQUFBLFdBQUFBLEVBQUFBLGVBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFTbVgsR0FBQUEsSUFBQUEsU0FBQUEsR0FBdUIyRixHQUFBQSxJQUFBQSxTQUFBQSxHQUFRc2UsR0FBQUEsSUFBQUEsU0FBQUEsR0FDbkRzYixRQUFBQSxHQUFrQ0EsRUFBZUEsRUFBZUEsRUFBOEJBLEVBQXdCQSxHQUNsSE8sR0FBSUEsR0FBS0EsRUFBT0EsWUFDWkEsRUFBS0EsRUFBTUEsVUFNZkEsT0FKQUEsR0FBQUEsS0FBS0EsT0FBT0EsRUFBTUEsY0FBZUEsR0FDakNBLEVBQUdBLE1BQVFBLEtBQUtBLElBQUlBLEVBQUdBLE1BQU9BLEVBQUdBLGFBQ2pDQSxFQUFHQSxPQUFTQSxLQUFLQSxJQUFJQSxFQUFHQSxPQUFRQSxFQUFHQSxlQUU1QkEsRUFSS1AsRUFBQUEsaUJBQWdCQSxHQURtQnRiLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVJ0ZSxFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQUF2QjNGLEVBQUFBLEVBQUFBLHlCQUFBQSxFQUFBQSw2QkFBVG5YLEVBQUFBLEVBQUFBLFdBQUFBLEVBQUFBLGVBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFTbVgsR0FBQUEsSUFBQUEsU0FBQUEsR0FBdUIyRixHQUFBQSxJQUFBQSxTQUFBQSxHQUFRc2UsR0FBQUEsSUFBQUEsU0FBQUEsR0FDbkRzYixRQUFBQSxHQUErQkEsRUFBZUEsRUFBZUEsRUFBOEJBLEVBQXdCQSxHQUMvR1EsR0FBSUEsR0FBS0EsRUFBTUEsV0FDWEEsRUFBV0EsRUFBTUEsY0FDakJBLEVBQVNBLEVBQUtBLFFBQVFBLE9BQU9BLFlBRTdCQSxFQUFVQSxFQUFHQSxnQkFBa0JBLEVBQVNBLE9BQ3JDQSxFQUFHQSxpQkFBbUJBLEVBQVNBLFFBQy9CQSxFQUFHQSxjQUFnQkEsRUFBT0EsT0FDMUJBLEVBQUdBLGVBQWlCQSxFQUFPQSxNQVVsQ0EsT0FUQUEsR0FBR0EsY0FBZ0JBLEVBQVNBLE1BQzVCQSxFQUFHQSxlQUFpQkEsRUFBU0EsT0FDN0JBLEVBQUdBLFlBQWNBLEVBQU9BLE1BQ3hCQSxFQUFHQSxhQUFlQSxFQUFPQSxRQUVyQkEsRUFBQUEsUUFBUUEsYUFBYUEsSUFBT0EsSUFDNUJBLEVBQUdBLGNBR0FBLEVBbEJLUixFQUFBQSxjQUFhQSxHQURzQnRiLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVJ0ZSxFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQUF2QjNGLEVBQUFBLEVBQUFBLHlCQUFBQSxFQUFBQSw2QkFBVG5YLEVBQUFBLEVBQUFBLFdBQUFBLEVBQUFBLGVBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFTbVgsR0FBQUEsSUFBQUEsU0FBQUEsR0FBV29HLEdBQUFBLElBQUFBLFNBQUFBLEdBQVFzZSxHQUFBQSxJQUFBQSxTQUFBQSxHQUN2Q3NiLFFBQUFBLEdBQThCQSxFQUFlQSxFQUFlQSxFQUFpQkEsRUFBeUJBLEdBQ2xHQyxHQUFJQSxFQUFNQSxjQUFnQkEsRUFBQUEsWUFBWUEsV0FDbENBLE9BQU9BLENBRVhBLElBQUlBLEdBQUtBLEVBQU1BLFVBQ1hBLEVBQVdBLEVBQU1BLFlBQ3JCQSxHQUFTQSxNQUFRQSxDQUtqQkEsS0FBS0EsR0FGREEsR0FDQUEsRUFIQUEsRUFBWUEsRUFBTUEsVUFJYkEsRUFBU0EsRUFBS0EsT0FBUUEsRUFBT0EsUUFDbENBLEVBQVFBLEVBQU9BLFFBQ2ZBLEVBQWVBLEVBQU1BLE9BQU9BLFlBQzVCQSxFQUFhQSxPQUFTQSxFQUFHQSxPQUN6QkEsRUFBQUEsS0FBS0EsT0FBT0EsRUFBY0EsR0FDMUJBLEVBQVVBLEVBQUlBLEVBQVNBLE1BRW5CQSxFQUFBQSxLQUFLQSxRQUFRQSxLQUNiQSxFQUFVQSxFQUFJQSxFQUFVQSxFQUFJQSxFQUFVQSxNQUFRQSxFQUFVQSxPQUFTQSxHQUNyRUEsRUFBTUEsUUFBUUEsR0FFZEEsRUFBU0EsT0FBU0EsRUFBYUEsTUFDL0JBLEVBQVNBLE9BQVNBLEtBQUtBLElBQUlBLEVBQVNBLE9BQVFBLEVBQWFBLE9BSzdEQSxPQUZBQSxHQUFTQSxNQUFRQSxLQUFLQSxJQUFJQSxFQUFTQSxNQUFPQSxFQUFNQSxVQUFVQSxRQUVuREEsRUE1QktELEVBQUFBLGFBQVlBLEdBRFd0YixFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFSdGUsRUFBQUEsRUFBQUEsVUFBQUEsRUFBQUEsY0FBWHBHLEVBQUFBLEVBQUFBLGFBQUFBLEVBQUFBLGlCQUFUblgsRUFBQUEsRUFBQUEsV0FBQUEsRUFBQUEsZUFBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQVNtWCxHQUFBQSxJQUFBQSxTQUFBQSxHQUFXb0csR0FBQUEsSUFBQUEsU0FBQUEsR0FBUXNlLEdBQUFBLElBQUFBLFNBQUFBLEdBQ3ZDc2IsUUFBQUEsR0FBNEJBLEVBQWVBLEVBQWVBLEVBQWlCQSxFQUF5QkEsR0FDaEdFLEdBQUlBLEdBQUtBLEVBQU1BLFNBSWZBLE9BSEFBLEdBQUdBLEVBQUlBLEVBQUdBLEVBQUlBLEVBQ2RBLEVBQUFBLEtBQUtBLE9BQU9BLEVBQU1BLFVBQVdBLEdBQzdCQSxFQUFBQSxLQUFLQSxPQUFPQSxFQUFNQSxVQUFXQSxFQUFNQSxlQUM1QkEsRUFMS0YsRUFBQUEsV0FBVUEsR0FEYXRiLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVJ0ZSxFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQUFYcEcsRUFBQUEsRUFBQUEsYUFBQUEsRUFBQUEsaUJBQVRuWCxFQUFBQSxFQUFBQSxXQUFBQSxFQUFBQSxlQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBU21YLEdBQUFBLElBQUFBLFNBQUFBLEdBQVdvRyxHQUFBQSxJQUFBQSxTQUFBQSxHQUFRc2UsR0FBQUEsSUFBQUEsU0FBQUEsR0FDdkNzYixRQUFBQSxHQUE0QkEsRUFBZUEsRUFBZUEsRUFBaUJBLEVBQXlCQSxHQUNoR0csR0FBSUEsRUFBTUEsY0FBZ0JBLEVBQUFBLFlBQVlBLFNBQ2xDQSxPQUFPQSxDQUVYQSxJQUFJQSxHQUFLQSxFQUFNQSxVQUNYQSxFQUFXQSxFQUFNQSxZQUNyQkEsR0FBU0EsT0FBU0EsQ0FLbEJBLEtBQUtBLEdBRkRBLEdBQ0FBLEVBSEFBLEVBQVlBLEVBQU1BLFVBSWJBLEVBQVNBLEVBQUtBLE9BQVFBLEVBQU9BLFFBQ2xDQSxFQUFRQSxFQUFPQSxRQUNmQSxFQUFlQSxFQUFNQSxPQUFPQSxZQUM1QkEsRUFBYUEsTUFBUUEsRUFBR0EsTUFDeEJBLEVBQUFBLEtBQUtBLE9BQU9BLEVBQWNBLEdBQzFCQSxFQUFVQSxFQUFJQSxFQUFTQSxPQUVuQkEsRUFBQUEsS0FBS0EsUUFBUUEsS0FDYkEsRUFBVUEsRUFBSUEsRUFBVUEsRUFBSUEsRUFBVUEsTUFBUUEsRUFBVUEsT0FBU0EsR0FDckVBLEVBQU1BLFFBQVFBLEdBRWRBLEVBQVNBLE1BQVFBLEtBQUtBLElBQUlBLEVBQVNBLE1BQU9BLEVBQWFBLE9BQ3ZEQSxFQUFTQSxRQUFVQSxFQUFhQSxNQUtwQ0EsT0FGQUEsR0FBU0EsT0FBU0EsS0FBS0EsSUFBSUEsRUFBU0EsT0FBUUEsRUFBTUEsVUFBVUEsU0FFckRBLEVBNUJLSCxFQUFBQSxXQUFVQSxHQURhdGIsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBUnRlLEVBQUFBLEVBQUFBLFVBQUFBLEVBQUFBLGNBQVhwRyxFQUFBQSxFQUFBQSxhQUFBQSxFQUFBQSxpQkFBVG5YLEVBQUFBLEVBQUFBLFdBQUFBLEVBQUFBLGVBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFTbVgsR0FBQUEsSUFBQUEsU0FBQUEsR0FBV29HLEdBQUFBLElBQUFBLFNBQUFBLEdBQVF5ZSxHQUFBQSxJQUFBQSxTQUFBQSxHQUN2Q3ViLFFBQUFBLEdBQThCQSxFQUFlQSxFQUFlQSxFQUFpQkEsRUFBeUJBLEdBQ2xHQyxHQUFJQSxFQUFNQSxjQUFnQkEsRUFBQUEsWUFBWUEsV0FDbENBLE9BQU9BLENBRVhBLElBQUlBLEdBQUtBLEVBQU1BLGNBQ2ZBLEdBQUdBLE9BQVNBLEVBQU1BLGNBQWNBLE1BQ2hDQSxJQUFJQSxHQUFTQSxFQUFNQSxNQUNkQSxPQUFNQSxLQUNQQSxFQUFHQSxPQUFTQSxHQUNoQkEsRUFBR0EsT0FBU0EsS0FBS0EsSUFBSUEsS0FBS0EsSUFBSUEsRUFBR0EsT0FBUUEsRUFBTUEsV0FBWUEsRUFBTUEsVUFHakVBLEtBQUtBLEdBQTBCQSxHQUFxQkEsRUFEaERBLEVBQVVBLEVBQU9BLFlBQ1pBLEVBQVNBLEVBQUtBLE9BQWlEQSxFQUFPQSxRQUMzRUEsRUFBUUEsRUFBT0EsUUFDZkEsRUFBTUEsUUFBUUEsR0FDZEEsRUFBZUEsRUFBTUEsT0FBT0EsWUFFNUJBLEVBQVFBLE9BQVNBLEVBQWFBLE1BQzlCQSxFQUFRQSxPQUFTQSxLQUFLQSxJQUFJQSxFQUFRQSxPQUFRQSxFQUFhQSxPQUczREEsUUFBT0EsRUFyQktELEVBQUFBLGFBQVlBLEdBRFd2YixFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFSemUsRUFBQUEsRUFBQUEsVUFBQUEsRUFBQUEsY0FBWHBHLEVBQUFBLEVBQUFBLGFBQUFBLEVBQUFBLGlCQUFUblgsRUFBQUEsRUFBQUEsV0FBQUEsRUFBQUEsZUFBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQVNtWCxHQUFBQSxJQUFBQSxTQUFBQSxHQUFXb0csR0FBQUEsSUFBQUEsU0FBQUEsR0FBUXllLEdBQUFBLElBQUFBLFNBQUFBLEdBQ3ZDdWIsUUFBQUEsR0FBNEJBLEVBQWVBLEVBQWVBLEVBQWlCQSxFQUF5QkEsR0FDaEdFLEdBQUlBLEdBQUtBLEVBQU1BLGNBQ2ZBLEdBQUdBLE1BQVFBLEVBQUdBLE9BQVNBLE9BQU9BLGlCQUM5QkEsSUFBSUEsR0FBVUEsRUFBT0EsV0FFckJBLE9BREFBLEdBQVFBLE1BQVFBLEVBQVFBLE9BQVNBLEdBQzFCQSxFQUxLRixFQUFBQSxXQUFVQSxHQURhdmIsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBUnplLEVBQUFBLEVBQUFBLFVBQUFBLEVBQUFBLGNBQVhwRyxFQUFBQSxFQUFBQSxhQUFBQSxFQUFBQSxpQkFBVG5YLEVBQUFBLEVBQUFBLFdBQUFBLEVBQUFBLGVBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFTbVgsR0FBQUEsSUFBQUEsU0FBQUEsR0FBV29HLEdBQUFBLElBQUFBLFNBQUFBLEdBQVF5ZSxHQUFBQSxJQUFBQSxTQUFBQSxHQUN2Q3ViLFFBQUFBLEdBQTRCQSxFQUFlQSxFQUFlQSxFQUFpQkEsRUFBeUJBLEdBQ2hHRyxHQUFJQSxFQUFNQSxjQUFnQkEsRUFBQUEsWUFBWUEsU0FDbENBLE9BQU9BLENBRVhBLElBQUlBLEdBQUtBLEVBQU1BLGNBQ2ZBLEdBQUdBLE1BQVFBLEVBQU1BLGNBQWNBLEtBQy9CQSxJQUFJQSxHQUFRQSxFQUFNQSxLQUNiQSxPQUFNQSxLQUNQQSxFQUFHQSxNQUFRQSxHQUNmQSxFQUFHQSxNQUFRQSxLQUFLQSxJQUFJQSxLQUFLQSxJQUFJQSxFQUFHQSxNQUFPQSxFQUFNQSxVQUFXQSxFQUFNQSxTQUc5REEsS0FBS0EsR0FBMEJBLEdBQXFCQSxFQURoREEsRUFBVUEsRUFBT0EsWUFDWkEsRUFBU0EsRUFBS0EsT0FBaURBLEVBQU9BLFFBQzNFQSxFQUFRQSxFQUFPQSxRQUNmQSxFQUFNQSxRQUFRQSxHQUNkQSxFQUFlQSxFQUFNQSxPQUFPQSxZQUU1QkEsRUFBUUEsUUFBVUEsRUFBYUEsT0FDL0JBLEVBQVFBLE1BQVFBLEtBQUtBLElBQUlBLEVBQVFBLE1BQU9BLEVBQWFBLE1BR3pEQSxRQUFPQSxFQXJCS0gsRUFBQUEsV0FBVUEsR0FEYXZiLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVJ6ZSxFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQUFYcEcsRUFBQUEsRUFBQUEsYUFBQUEsRUFBQUEsaUJBQVRuWCxFQUFBQSxFQUFBQSxXQUFBQSxFQUFBQSxlQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBU21YLEdBQUFBLElBQUFBLFNBQUFBLEdBQVkrSixHQUFBQSxJQUFBQSxTQUFBQSxHQUFRMmUsR0FBQUEsSUFBQUEsU0FBQUEsR0FDeEM4WCxRQUFBQSxHQUE0QkEsRUFBZUEsRUFBZUEsRUFBOEJBLEVBQWtDQSxHQUt0SEMsTUFKSUEsR0FBS0EsU0FDTEEsRUFBS0EsUUFBUUEsUUFBUUEsRUFBTUEsV0FFL0JBLEVBQUFBLEtBQUtBLE9BQU9BLEVBQU1BLFVBQVdBLEVBQU1BLGVBQzVCQSxFQUxLRCxFQUFBQSxXQUFVQSxHQURjOVgsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBUjNlLEVBQUFBLEVBQUFBLFVBQUFBLEVBQUFBLGNBQVovSixFQUFBQSxFQUFBQSxjQUFBQSxFQUFBQSxrQkFBVG5YLEVBQUFBLEVBQUFBLFdBQUFBLEVBQUFBLGVBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFTbVgsR0FBQUEsSUFBQUEsU0FBQUEsR0FBWStKLEdBQUFBLElBQUFBLFNBQUFBLEdBQVEyZSxHQUFBQSxJQUFBQSxTQUFBQSxHQUN4QzhYLFFBQUFBLEdBQTZCQSxFQUFlQSxFQUFlQSxFQUE4QkEsRUFBa0NBLEdBQ3ZIRSxJQUFLQSxFQUFLQSxRQUNOQSxPQUFPQSxDQUNYQSxJQUFJQSxHQUFLQSxFQUFNQSxXQUNmQSxHQUFBQSxVQUFVQSxPQUFPQSxFQUFNQSxRQUFTQSxHQUNoQ0EsRUFBQUEsVUFBVUEsSUFBSUEsRUFBSUEsRUFBTUEsZ0JBRXhCQSxJQUFJQSxHQUFLQSxFQUFNQSxTQUlmQSxPQUhBQSxHQUFHQSxFQUFJQSxFQUFHQSxFQUFJQSxFQUNkQSxFQUFBQSxLQUFLQSxPQUFPQSxFQUFNQSxVQUFXQSxHQUM3QkEsRUFBQUEsVUFBVUEsV0FBV0EsRUFBSUEsSUFDbEJBLEVBWEtGLEVBQUFBLFlBQVdBLEdBRGE5WCxFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFSM2UsRUFBQUEsRUFBQUEsVUFBQUEsRUFBQUEsY0FBWi9KLEVBQUFBLEVBQUFBLGNBQUFBLEVBQUFBLGtCQUFUblgsRUFBQUEsRUFBQUEsV0FBQUEsRUFBQUEsZUFBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQVNtWCxHQUFBQSxJQUFBQSxTQUFBQSxHQUFZK0osR0FBQUEsSUFBQUEsU0FBQUEsR0FBUStlLEdBQUFBLElBQUFBLFNBQUFBLEdBQ3hDNlgsUUFBQUEsR0FBNEJBLEVBQTRCQSxFQUE0QkEsRUFBOEJBLEVBQWtDQSxHQUNoSkMsR0FBSUEsR0FBS0EsRUFBT0EsWUFDWkEsRUFBVUEsRUFBS0EsT0FLbkJBLE9BSklBLEtBQ0FBLEVBQVFBLFFBQVFBLEVBQU1BLGVBQ3RCQSxFQUFBQSxLQUFLQSxPQUFPQSxFQUFRQSxPQUFPQSxZQUFhQSxLQUVyQ0EsRUFQS0QsRUFBQUEsV0FBVUEsR0FEYzdYLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVIvZSxFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQUFaL0osRUFBQUEsRUFBQUEsY0FBQUEsRUFBQUEsa0JBQVRuWCxFQUFBQSxFQUFBQSxXQUFBQSxFQUFBQSxlQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBU21YLEdBQUFBLElBQUFBLFNBQUFBLEdBQVkrSixHQUFBQSxJQUFBQSxTQUFBQSxHQUFRK2UsR0FBQUEsSUFBQUEsU0FBQUEsR0FDeEM2WCxRQUFBQSxHQUE4QkEsRUFBZUEsRUFBZUEsRUFBOEJBLEVBQWtDQSxHQUd4SEUsTUFGQUEsR0FBQUEsVUFBVUEsU0FBU0EsRUFBTUEsWUFBYUEsRUFBT0EsYUFDN0NBLEVBQUFBLEtBQUtBLElBQUlBLEVBQU9BLFlBQWFBLEVBQU1BLGdCQUM1QkEsRUFIS0YsRUFBQUEsYUFBWUEsR0FEWTdYLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVIvZSxFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQUFaL0osRUFBQUEsRUFBQUEsY0FBQUEsRUFBQUEsa0JBQVRuWCxFQUFBQSxFQUFBQSxXQUFBQSxFQUFBQSxlQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBU21YLEdBQUFBLElBQUFBLFNBQUFBLEdBQVkrSixHQUFBQSxJQUFBQSxTQUFBQSxHQUFRK2UsR0FBQUEsSUFBQUEsU0FBQUEsR0FDeEM2WCxRQUFBQSxHQUE2QkEsRUFBZUEsRUFBZUEsRUFBOEJBLEVBQWtDQSxHQUN2SEcsR0FBSUEsR0FBS0EsRUFBTUEsV0FJZkEsT0FIQUEsR0FBQUEsVUFBVUEsT0FBT0EsRUFBTUEsUUFBU0EsR0FDaENBLEVBQUFBLFVBQVVBLElBQUlBLEVBQUlBLEVBQU1BLGlCQUN4QkEsRUFBQUEsVUFBVUEsV0FBV0EsRUFBSUEsRUFBTUEsZ0JBQ3hCQSxFQUxLSCxFQUFBQSxZQUFXQSxHQURhN1gsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBUi9lLEVBQUFBLEVBQUFBLFVBQUFBLEVBQUFBLGNBQVovSixFQUFBQSxFQUFBQSxjQUFBQSxFQUFBQSxrQkFBVG5YLEVBQUFBLEVBQUFBLFdBQUFBLEVBQUFBLGVBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFTbVgsR0FBQUEsSUFBQUEsU0FBQUEsR0FBdUIrSyxHQUFBQSxJQUFBQSxTQUFBQSxHQUFRd2UsR0FBQUEsSUFBQUEsU0FBQUEsR0FDbkR3WCxRQUFBQSxHQUE4QkEsRUFBZUEsRUFBZUEsRUFBaUJBLEVBQXlCQSxHQUNsR0MsR0FBSUEsRUFBTUEsY0FBZ0JBLEVBQUFBLFlBQVlBLFdBQ2xDQSxPQUFPQSxDQUVYQSxJQUFJQSxHQUFLQSxFQUFNQSxVQUNYQSxFQUFXQSxFQUFNQSxZQUNyQkEsR0FBU0EsTUFBUUEsQ0FNakJBLEtBQUtBLEdBRkRBLEdBQ0FBLEVBSkFBLEVBQVlBLEVBQU1BLFVBQ2xCQSxFQUFLQSxFQUFNQSxXQUlOQSxFQUFTQSxFQUFLQSxPQUFRQSxFQUFPQSxRQUNsQ0EsRUFBUUEsRUFBT0EsUUFDZkEsRUFBZUEsRUFBTUEsT0FBT0EsWUFDNUJBLEVBQWFBLE9BQVNBLEVBQUdBLE9BQ3pCQSxFQUFBQSxLQUFLQSxPQUFPQSxFQUFjQSxHQUMxQkEsRUFBVUEsRUFBSUEsRUFBU0EsTUFDdkJBLEVBQVVBLEdBQUtBLEVBQUdBLFFBRWRBLEVBQUFBLEtBQUtBLFFBQVFBLEtBQ2JBLEVBQVVBLEVBQUlBLEVBQVVBLEVBQUlBLEVBQVVBLE1BQVFBLEVBQVVBLE9BQVNBLEdBQ3JFQSxFQUFNQSxRQUFRQSxHQUVkQSxFQUFTQSxPQUFTQSxFQUFhQSxNQUMvQkEsRUFBU0EsT0FBU0EsS0FBS0EsSUFBSUEsRUFBU0EsT0FBUUEsRUFBYUEsT0FLN0RBLE9BRkFBLEdBQVNBLE1BQVFBLEtBQUtBLElBQUlBLEVBQVNBLE1BQU9BLEVBQUdBLFFBRXRDQSxFQTlCS0QsRUFBQUEsYUFBWUEsR0FEdUJ4WCxFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFSeGUsRUFBQUEsRUFBQUEsVUFBQUEsRUFBQUEsY0FBdkIvSyxFQUFBQSxFQUFBQSx5QkFBQUEsRUFBQUEsNkJBQVRuWCxFQUFBQSxFQUFBQSxXQUFBQSxFQUFBQSxlQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBU21YLEdBQUFBLElBQUFBLFNBQUFBLEdBQXVCK0ssR0FBQUEsSUFBQUEsU0FBQUEsR0FBUXdlLEdBQUFBLElBQUFBLFNBQUFBLEdBQ25Ed1gsUUFBQUEsR0FBNEJBLEVBQWVBLEVBQWVBLEVBQWlCQSxFQUF5QkEsR0FDaEdFLEdBQUlBLEdBQUtBLEVBQU1BLFNBSWZBLE9BSEFBLEdBQUdBLEVBQUlBLEVBQUdBLEVBQUlBLEVBQ2RBLEVBQUFBLEtBQUtBLE9BQU9BLEVBQU1BLFVBQVdBLEdBQzdCQSxFQUFBQSxLQUFLQSxPQUFPQSxFQUFNQSxVQUFXQSxFQUFNQSxlQUM1QkEsRUFMS0YsRUFBQUEsV0FBVUEsR0FEeUJ4WCxFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFSeGUsRUFBQUEsRUFBQUEsVUFBQUEsRUFBQUEsY0FBdkIvSyxFQUFBQSxFQUFBQSx5QkFBQUEsRUFBQUEsNkJBQVRuWCxFQUFBQSxFQUFBQSxXQUFBQSxFQUFBQSxlQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBU21YLEdBQUFBLElBQUFBLFNBQUFBLEdBQXVCK0ssR0FBQUEsSUFBQUEsU0FBQUEsR0FBUXdlLEdBQUFBLElBQUFBLFNBQUFBLEdBQ25Ed1gsUUFBQUEsR0FBNEJBLEVBQWVBLEVBQWVBLEVBQWlCQSxFQUF5QkEsR0FDaEdHLEdBQUlBLEVBQU1BLGNBQWdCQSxFQUFBQSxZQUFZQSxTQUNsQ0EsT0FBT0EsQ0FFWEEsSUFBSUEsR0FBS0EsRUFBTUEsVUFDWEEsRUFBV0EsRUFBTUEsWUFDckJBLEdBQVNBLE9BQVNBLENBTWxCQSxLQUFLQSxHQUZEQSxHQUNBQSxFQUpBQSxFQUFZQSxFQUFNQSxVQUNsQkEsRUFBS0EsRUFBTUEsV0FJTkEsRUFBU0EsRUFBS0EsT0FBUUEsRUFBT0EsUUFDbENBLEVBQVFBLEVBQU9BLFFBQ2ZBLEVBQWVBLEVBQU1BLE9BQU9BLFlBQzVCQSxFQUFhQSxNQUFRQSxFQUFHQSxNQUN4QkEsRUFBQUEsS0FBS0EsT0FBT0EsRUFBY0EsR0FDMUJBLEVBQVVBLEdBQUtBLEVBQUdBLFFBQ2xCQSxFQUFVQSxFQUFJQSxFQUFTQSxPQUVuQkEsRUFBQUEsS0FBS0EsUUFBUUEsS0FDYkEsRUFBVUEsRUFBSUEsRUFBVUEsRUFBSUEsRUFBVUEsTUFBUUEsRUFBVUEsT0FBU0EsR0FDckVBLEVBQU1BLFFBQVFBLEdBRWRBLEVBQVNBLE1BQVFBLEtBQUtBLElBQUlBLEVBQVNBLE1BQU9BLEVBQWFBLE9BQ3ZEQSxFQUFTQSxRQUFVQSxFQUFhQSxNQUtwQ0EsT0FGQUEsR0FBU0EsT0FBU0EsS0FBS0EsSUFBSUEsRUFBU0EsT0FBUUEsRUFBR0EsU0FFeENBLEVBOUJLSCxFQUFBQSxXQUFVQSxHQUR5QnhYLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVJ4ZSxFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQUF2Qi9LLEVBQUFBLEVBQUFBLHlCQUFBQSxFQUFBQSw2QkFBVG5YLEVBQUFBLEVBQUFBLFdBQUFBLEVBQUFBLGVBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFTbVgsR0FBQUEsSUFBQUEsU0FBQUEsR0FBdUIrSyxHQUFBQSxJQUFBQSxTQUFBQSxHQUFRMmUsR0FBQUEsSUFBQUEsU0FBQUEsR0FDbkR5WCxRQUFBQSxHQUE4QkEsRUFBZUEsRUFBZUEsRUFBaUJBLEVBQXNEQSxHQUMvSEMsR0FBSUEsRUFBTUEsY0FBZ0JBLEVBQUFBLFlBQVlBLFdBQ2xDQSxPQUFPQSxDQUVYQSxJQUFJQSxHQUFLQSxFQUFNQSxlQUNYQSxFQUFLQSxFQUFNQSxVQUNYQSxHQUFHQSxzQkFDSEEsRUFBR0EsT0FBU0EsT0FBT0Esa0JBR3ZCQSxJQUFJQSxHQUFRQSxLQUFLQSxNQUFNQSxFQUFHQSxTQUN0QkEsRUFBUUEsRUFBS0EsZUFBZUEsU0FDaENBLEdBQUtBLGVBQWVBLE9BQU9BLEVBQUdBLEVBSTlCQSxLQUFLQSxHQUZEQSxHQUFXQSxFQUNYQSxFQUFLQSxFQUFPQSxZQUNQQSxFQUFZQSxFQUFLQSxlQUFlQSxnQkFBZ0JBLEVBQU9BLEdBQVFBLEVBQVVBLFlBQWFBLENBQzNGQSxHQUNBQSxJQUFJQSxHQUFRQSxFQUFVQSxPQUN0QkEsR0FBTUEsUUFBUUEsRUFDZEEsSUFBSUEsR0FBZUEsRUFBTUEsT0FBT0EsV0FHaENBLElBRkFBLEVBQUdBLE9BQVNBLEtBQUtBLElBQUlBLEVBQUdBLE9BQVFBLEVBQWFBLFFBQzdDQSxFQUFHQSxPQUFTQSxFQUFhQSxNQUNyQkEsRUFBR0EsTUFBUUEsRUFBR0EsTUFDZEEsTUFJUkEsRUFBS0EsZUFBZUEsT0FBT0EsRUFBUUEsRUFBVUEsR0FBU0EsRUFBUUEsR0FFOURBLElBQUlBLEdBQVVBLEVBQUdBLGVBQWlCQSxFQUFHQSxRQUM5QkEsRUFBR0EsY0FBZ0JBLEdBQ25CQSxFQUFHQSxpQkFBbUJBLEVBQUdBLFFBQ3pCQSxFQUFHQSxnQkFBa0JBLENBUzVCQSxPQVJBQSxHQUFHQSxhQUFlQSxFQUFHQSxPQUNyQkEsRUFBR0EsWUFBY0EsRUFDakJBLEVBQUdBLGVBQWlCQSxFQUFHQSxPQUN2QkEsRUFBR0EsY0FBZ0JBLEVBRWZBLEdBQ0FBLEVBQUdBLGNBRUFBLEVBMUNLRCxFQUFBQSxhQUFZQSxHQUR1QnpYLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVIzZSxFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQUF2Qi9LLEVBQUFBLEVBQUFBLHlCQUFBQSxFQUFBQSw2QkFBVG5YLEVBQUFBLEVBQUFBLFdBQUFBLEVBQUFBLGVBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFTbVgsR0FBQUEsSUFBQUEsU0FBQUEsR0FBdUIrSyxHQUFBQSxJQUFBQSxTQUFBQSxHQUFRMmUsR0FBQUEsSUFBQUEsU0FBQUEsR0FDbkR5WCxRQUFBQSxHQUE0QkEsRUFBZUEsRUFBZUEsRUFBaUJBLEVBQXlCQSxHQUNoR0UsR0FBSUEsR0FBS0EsRUFBTUEsY0FDZkEsR0FBQUEsS0FBS0EsT0FBT0EsRUFBTUEsY0FBZUEsRUFDakNBLElBQUlBLEdBQVVBLEVBQU9BLFdBRXJCQSxPQURBQSxHQUFRQSxNQUFRQSxFQUFRQSxPQUFTQSxHQUMxQkEsRUFMS0YsRUFBQUEsV0FBVUEsR0FEeUJ6WCxFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFSM2UsRUFBQUEsRUFBQUEsVUFBQUEsRUFBQUEsY0FBdkIvSyxFQUFBQSxFQUFBQSx5QkFBQUEsRUFBQUEsNkJBQVRuWCxFQUFBQSxFQUFBQSxXQUFBQSxFQUFBQSxlQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBU21YLEdBQUFBLElBQUFBLFNBQUFBLEdBQXVCK0ssR0FBQUEsSUFBQUEsU0FBQUEsR0FBUTJlLEdBQUFBLElBQUFBLFNBQUFBLEdBQ25EeVgsUUFBQUEsR0FBNEJBLEVBQWVBLEVBQWVBLEVBQWlCQSxFQUFzREEsR0FDN0hHLEdBQUlBLEVBQU1BLGNBQWdCQSxFQUFBQSxZQUFZQSxTQUNsQ0EsT0FBT0EsQ0FFWEEsSUFBSUEsR0FBS0EsRUFBTUEsZUFDWEEsRUFBS0EsRUFBTUEsVUFDWEEsR0FBR0Esd0JBQ0hBLEVBQUdBLE1BQVFBLE9BQU9BLGtCQUd0QkEsSUFBSUEsR0FBUUEsS0FBS0EsTUFBTUEsRUFBR0EsU0FDdEJBLEVBQVFBLEVBQUtBLGVBQWVBLFNBQ2hDQSxHQUFLQSxlQUFlQSxPQUFPQSxFQUFHQSxFQUk5QkEsS0FBS0EsR0FGREEsR0FBV0EsRUFDWEEsRUFBS0EsRUFBT0EsWUFDUEEsRUFBWUEsRUFBS0EsZUFBZUEsZ0JBQWdCQSxFQUFPQSxHQUFRQSxFQUFVQSxZQUFhQSxDQUMzRkEsR0FDQUEsSUFBSUEsR0FBUUEsRUFBVUEsT0FDdEJBLEdBQU1BLFFBQVFBLEVBQ2RBLElBQUlBLEdBQWVBLEVBQU1BLE9BQU9BLFdBR2hDQSxJQUZBQSxFQUFHQSxNQUFRQSxLQUFLQSxJQUFJQSxFQUFHQSxNQUFPQSxFQUFhQSxPQUMzQ0EsRUFBR0EsUUFBVUEsRUFBYUEsT0FDdEJBLEVBQUdBLE9BQVNBLEVBQUdBLE9BQ2ZBLE1BSVJBLEVBQUtBLGVBQWVBLE9BQU9BLEVBQVFBLEVBQVVBLEdBQVNBLEVBQVFBLEdBRTlEQSxJQUFJQSxHQUFVQSxFQUFHQSxlQUFpQkEsR0FDM0JBLEVBQUdBLGNBQWdCQSxFQUFHQSxPQUN0QkEsRUFBR0EsaUJBQW1CQSxHQUN0QkEsRUFBR0EsZ0JBQWtCQSxFQUFHQSxLQVMvQkEsT0FSQUEsR0FBR0EsYUFBZUEsRUFDbEJBLEVBQUdBLFlBQWNBLEVBQUdBLE1BQ3BCQSxFQUFHQSxlQUFpQkEsRUFDcEJBLEVBQUdBLGNBQWdCQSxFQUFHQSxNQUVsQkEsR0FDQUEsRUFBR0EsY0FFQUEsRUExQ0tILEVBQUFBLFdBQVVBLEdBRHlCelgsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBUjNlLEVBQUFBLEVBQUFBLFVBQUFBLEVBQUFBLGNBQXZCL0ssRUFBQUEsRUFBQUEseUJBQUFBLEVBQUFBLDZCQUFUblgsRUFBQUEsRUFBQUEsV0FBQUEsRUFBQUEsZUFBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQU91dUIsR0FBQUEsSUFBQUEsU0FBQUEsR0FBS1UsR0FBQUEsSUFBQUEsU0FBQUEsR0FBVXFoQixHQUFBQSxJQUFBQSxTQUFBQSxHQUNqQ29JLFFBQUFBLEdBQWdDQSxFQUFlQSxFQUFlQSxFQUFpQkEsR0FDM0VDLEdBQStDQSxLQUExQ0EsRUFBTUEsV0FBYUEsRUFBQUEsV0FBV0EsUUFDL0JBLE9BQU9BLENBRVhBLElBQUlBLEdBQVNBLEVBQU1BLFVBQ25CQSxHQUFPQSxNQUFRQSxFQUFNQSxZQUNyQkEsRUFBT0EsT0FBU0EsRUFBTUEsWUFFdEJBLElBQUlBLEdBQVVBLEVBQU1BLGFBQ3BCQSxPQUFLQSxHQUFRQSxPQUFTQSxHQUFPQSxFQUFRQSxRQUFVQSxHQUFPQSxFQUFNQSxPQUFTQSxHQUFPQSxFQUFNQSxRQUFVQSxHQUN4RkEsRUFBT0EsTUFBUUEsRUFDZkEsRUFBT0EsT0FBU0EsR0FDVEEsSUFHUEEsRUFBS0EsdUJBQXdCQSxHQUFBQSxTQUFTQSxPQUFPQSxnQkFDN0NBLEVBQU9BLE1BQXlCQSxJQUFqQkEsRUFBT0EsTUFBZ0JBLEVBQVFBLE1BQVFBLEVBQU9BLE1BQzdEQSxFQUFPQSxPQUEyQkEsSUFBbEJBLEVBQU9BLE9BQWlCQSxFQUFRQSxPQUFTQSxFQUFPQSxPQUMzREEsTUFBTUEsRUFBTUEsU0FDYkEsRUFBT0EsTUFBUUEsRUFBTUEsT0FDcEJBLE1BQU1BLEVBQU1BLFVBQ2JBLEVBQU9BLE9BQVNBLEVBQU1BLFVBR3ZCQSxHQXhCS0QsRUFBQUEsZUFBY0EsR0FER3BJLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVZyaEIsRUFBQUEsRUFBQUEsWUFBQUEsRUFBQUEsZ0JBQUxWLEVBQUFBLEVBQUFBLE9BQUFBLEVBQUFBLFdBQVB2dUIsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQU91dUIsR0FBQUEsSUFBQUEsU0FBQUEsR0FBS1UsR0FBQUEsSUFBQUEsU0FBQUEsR0FBVXFoQixHQUFBQSxJQUFBQSxTQUFBQSxHQUNqQ29JLFFBQUFBLEdBQTZCQSxFQUFlQSxFQUFlQSxFQUFpQkEsR0FDeEVFLE1BQStDQSxNQUExQ0EsRUFBTUEsV0FBYUEsRUFBQUEsV0FBV0EsU0FDeEJBLEdBRVBBLEVBQUFBLEtBQUtBLFFBQVFBLEVBQU1BLFlBQ25CQSxFQUFBQSxLQUFLQSxNQUFNQSxFQUFPQSxVQUVsQkEsRUFBQUEsS0FBS0EsT0FBT0EsRUFBT0EsVUFBV0EsRUFBT0EsU0FDckNBLEVBQUFBLEtBQUtBLFVBQVVBLEVBQU9BLFFBQVNBLEVBQU9BLGVBRTFDQSxFQUFBQSxLQUFLQSxPQUFPQSxFQUFPQSxRQUFTQSxFQUFPQSxzQkFDNUJBLEdBWEtGLEVBQUFBLFlBQVdBLEdBRE1wSSxFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFWcmhCLEVBQUFBLEVBQUFBLFlBQUFBLEVBQUFBLGdCQUFMVixFQUFBQSxFQUFBQSxPQUFBQSxFQUFBQSxXQUFQdnVCLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFPdXVCLEdBQUFBLElBQUFBLFNBQUFBLEdBQUtVLEdBQUFBLElBQUFBLFNBQUFBLEdBQVVxaEIsR0FBQUEsSUFBQUEsU0FBQUEsR0FDakNvSSxRQUFBQSxHQUErQkEsRUFBZUEsRUFBZUEsRUFBaUJBLEdBQzFFRyxNQUErQ0EsTUFBMUNBLEVBQU1BLFdBQWFBLEVBQUFBLFdBQVdBLFNBQ3hCQSxHQUVYQSxFQUFBQSxLQUFLQSxPQUFPQSxFQUFNQSxjQUFlQSxFQUFPQSxZQUNqQ0EsR0FMS0gsRUFBQUEsY0FBYUEsR0FESXBJLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVZyaEIsRUFBQUEsRUFBQUEsWUFBQUEsRUFBQUEsZ0JBQUxWLEVBQUFBLEVBQUFBLE9BQUFBLEVBQUFBLFdBQVB2dUIsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQU91dUIsR0FBQUEsSUFBQUEsU0FBQUEsR0FBS1UsR0FBQUEsSUFBQUEsU0FBQUEsR0FBVXFoQixHQUFBQSxJQUFBQSxTQUFBQSxHQUNqQ29JLFFBQUFBLEdBQTZCQSxFQUFlQSxFQUFlQSxFQUFpQkEsR0FDeEVJLEdBQStDQSxLQUExQ0EsRUFBTUEsV0FBYUEsRUFBQUEsV0FBV0EsUUFDL0JBLE9BQU9BLENBRVhBLElBQUlBLEdBQVFBLEVBQUFBLEtBQUtBLFNBQVNBLEVBQU9BLGNBQzdCQSxFQUFTQSxFQUFNQSxVQUNuQkEsSUFBSUEsRUFBQUEsS0FBS0EsUUFBUUEsSUFBV0EsRUFBTUEsVUFBWUEsRUFBQUEsUUFBUUEsS0FDbERBLE9BQU9BLENBRVhBLElBQUlBLEdBQVlBLEVBQU9BLFVBQ25CQSxFQUFLQSxFQUFPQSxNQUFRQSxFQUFVQSxNQUM5QkEsRUFBS0EsRUFBT0EsT0FBU0EsRUFBVUEsT0FDL0JBLEVBQUtBLEVBQ0xBLEVBQUtBLENBQ1RBLFFBQVFBLEVBQU1BLFNBQ1ZBLElBQUtBLEdBQUFBLFFBQVFBLFFBQ1RBLEVBQUtBLEVBQUtBLEtBQUtBLElBQUlBLEVBQUlBLEdBQ3ZCQSxHQUFNQSxFQUFPQSxNQUFTQSxFQUFVQSxNQUFRQSxHQUFPQSxFQUMvQ0EsR0FBTUEsRUFBT0EsT0FBVUEsRUFBVUEsT0FBU0EsR0FBT0EsQ0FDakRBLE1BQ0pBLEtBQUtBLEdBQUFBLFFBQVFBLGNBQ1RBLEVBQUtBLEVBQUtBLEtBQUtBLElBQUlBLEVBQUlBLEdBUS9CQSxNQUpBQSxHQUFBQSxLQUFLQSxVQUFVQSxHQUFRQSxFQUFVQSxHQUFJQSxFQUFVQSxHQUMvQ0EsRUFBQUEsS0FBS0EsTUFBTUEsRUFBT0EsRUFBSUEsR0FDdEJBLEVBQUFBLEtBQUtBLFVBQVVBLEVBQU9BLEVBQUlBLElBRW5CQSxFQTdCS0osRUFBQUEsWUFBV0EsR0FETXBJLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVZyaEIsRUFBQUEsRUFBQUEsWUFBQUEsRUFBQUEsZ0JBQUxWLEVBQUFBLEVBQUFBLE9BQUFBLEVBQUFBLFdBQVB2dUIsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQU91dUIsR0FBQUEsSUFBQUEsU0FBQUEsR0FBS1UsR0FBQUEsSUFBQUEsU0FBQUEsR0FBTzJoQixHQUFBQSxJQUFBQSxTQUFBQSxHQUM5Qm1JLFFBQUFBLEdBQTBCQSxFQUFlQSxFQUFlQSxFQUFpQkEsRUFBZ0NBLEdBQ3JHQyxNQUFLQSxHQUFNQSxZQUVYQSxFQUFJQSxTQUFTQSxFQUFNQSxjQUNuQkEsRUFBTUEsS0FBS0EsS0FBS0EsSUFDVEEsSUFISUEsRUFGQ0QsRUFBQUEsU0FBUUEsR0FETW5JLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVAzaEIsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBTFYsRUFBQUEsRUFBQUEsT0FBQUEsRUFBQUEsV0FBUHZ1QixFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBT3V1QixHQUFBQSxJQUFBQSxTQUFBQSxHQUFLVSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFPMmhCLEdBQUFBLElBQUFBLFNBQUFBLEdBQzlCbUksUUFBQUEsR0FBc0JBLEVBQWVBLEVBQWVBLEVBQWlCQSxFQUFnQ0EsR0FDakdFLE1BQUtBLEdBQU1BLFlBRVBBLEVBQU1BLE1BQ05BLEVBQUlBLE9BQU9BLEVBQU1BLEtBQU1BLEVBQU1BLFVBQVdBLEVBQU1BLEtBQU9BLEVBQU1BLEtBQUtBLFNBQVdBLEVBQUFBLFNBQVNBLFVBQ2pGQSxJQUhJQSxFQUZDRixFQUFBQSxLQUFJQSxHQURVbkksRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBUDNoQixFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFMVixFQUFBQSxFQUFBQSxPQUFBQSxFQUFBQSxXQUFQdnVCLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFPdXVCLEdBQUFBLElBQUFBLFNBQUFBLEdBQU1DLEdBQUFBLElBQUFBLFNBQUFBLEdBQVE4akIsR0FBQUEsSUFBQUEsU0FBQUEsR0FDaEM0RyxRQUFBQSxHQUE0QkEsRUFBZUEsRUFBZUEsRUFBaUJBLEdBQ3ZFQyxHQUFJQSxHQUFXQSxFQUFNQSxZQUNyQkEsR0FBQUEsS0FBS0EsT0FBT0EsRUFBTUEsVUFBV0EsRUFDN0JBLElBQUlBLEdBQUtBLEVBQU1BLGFBQ2ZBLElBQUlBLEVBQU1BLFVBQVlBLEVBQUFBLFFBQVFBLEtBRzFCQSxNQUZBQSxHQUFTQSxNQUFRQSxLQUFLQSxJQUFJQSxFQUFTQSxNQUFPQSxFQUFHQSxFQUFJQSxFQUFHQSxPQUNwREEsRUFBU0EsT0FBU0EsS0FBS0EsSUFBSUEsRUFBU0EsT0FBUUEsRUFBR0EsRUFBSUEsRUFBR0EsU0FDL0NBLENBR01BLEtBQWJBLEVBQUdBLFFBQ0hBLEVBQUdBLE1BQVFBLEVBQVNBLE9BQ05BLElBQWRBLEVBQUdBLFNBQ0hBLEVBQUdBLE9BQVNBLEVBQVNBLE9BRXpCQSxJQUFJQSxHQUFLQSxFQUNMQSxFQUFLQSxDQU9UQSxRQU5JQSxFQUFHQSxRQUFVQSxFQUFTQSxRQUN0QkEsRUFBS0EsRUFBU0EsTUFBUUEsRUFBR0EsT0FDekJBLEVBQUdBLFNBQVdBLEVBQVNBLFNBQ3ZCQSxFQUFLQSxFQUFTQSxPQUFTQSxFQUFHQSxRQUd0QkEsRUFBTUEsU0FDVkEsSUFBS0EsR0FBQUEsUUFBUUEsUUFDVEEsRUFBS0EsRUFBS0EsS0FBS0EsSUFBSUEsRUFBSUEsRUFDdkJBLE1BQ0pBLEtBQUtBLEdBQUFBLFFBQVFBLGNBQ1RBLEVBQUtBLEVBQUtBLEtBQUtBLElBQUlBLEVBQUlBLEdBTy9CQSxNQUhBQSxHQUFTQSxNQUFTQSxFQUFHQSxNQUFRQSxHQUFPQSxFQUNwQ0EsRUFBU0EsT0FBVUEsRUFBR0EsT0FBU0EsR0FBT0EsR0FFL0JBLEVBbkNLRCxFQUFBQSxXQUFVQSxHQURNNUcsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBUjlqQixFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQUFORCxFQUFBQSxFQUFBQSxRQUFBQSxFQUFBQSxZQUFQdnVCLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFPdXVCLEdBQUFBLElBQUFBLFNBQUFBLEdBQU1DLEdBQUFBLElBQUFBLFNBQUFBLEdBQVE0ZSxHQUFBQSxJQUFBQSxTQUFBQSxHQUNoQ2dNLFFBQUFBLEdBQThCQSxFQUFvQkEsRUFBWUEsRUFBeUJBLEdBQ25GQyxNQUFLQSxHQUFLQSxPQUFPQSxNQUFTQSxFQUFLQSxPQUFPQSxRQUsvQkEsR0FKSEEsRUFBUUEsUUFDUkEsRUFBSUEsV0FDR0EsR0FKQ0QsRUFBQUEsYUFBWUEsR0FESWhNLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVI1ZSxFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQUFORCxFQUFBQSxFQUFBQSxRQUFBQSxFQUFBQSxZQUFQdnVCLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFPdXVCLEdBQUFBLElBQUFBLFNBQUFBLEdBQU1DLEdBQUFBLElBQUFBLFNBQUFBLEdBQVE0ZSxHQUFBQSxJQUFBQSxTQUFBQSxHQUNoQ2dNLFFBQUFBLEdBQTZCQSxFQUFvQkEsRUFBWUEsRUFBeUJBLEdBQ2xGRSxPQUFLQSxFQUFLQSxPQUFPQSxXQUFhQSxFQUFBQSxXQUFXQSxTQUFXQSxFQUFBQSxXQUFXQSxPQUMzREEsRUFBUUEsUUFDUkEsRUFBSUEsV0FDR0EsSUFFSkEsRUFOS0YsRUFBQUEsWUFBV0EsR0FES2hNLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVI1ZSxFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQUFORCxFQUFBQSxFQUFBQSxRQUFBQSxFQUFBQSxZQUFQdnVCLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFPdXVCLEdBQUFBLElBQUFBLFNBQUFBLEdBQU1DLEdBQUFBLElBQUFBLFNBQUFBLEdBQVE0ZSxHQUFBQSxJQUFBQSxTQUFBQSxHQUNoQ2dNLFFBQUFBLEdBQTJCQSxFQUFvQkEsRUFBWUEsRUFBeUJBLEdBRWhGRyxPQUFPQSxFQUZLSCxFQUFBQSxVQUFTQSxHQURPaE0sRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBUjVlLEVBQUFBLEVBQUFBLFVBQUFBLEVBQUFBLGNBQU5ELEVBQUFBLEVBQUFBLFFBQUFBLEVBQUFBLFlBQVB2dUIsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQU91dUIsR0FBQUEsSUFBQUEsU0FBQUEsR0FBTUMsR0FBQUEsSUFBQUEsU0FBQUEsR0FBUTRlLEdBQUFBLElBQUFBLFNBQUFBLEdBQ2hDZ00sUUFBQUEsR0FBNkJBLEVBQW9CQSxFQUFZQSxFQUF5QkEsR0FDbEZJLEdBQUlBLEdBQVNBLEVBQUtBLE9BQ2RBLElBQVlBLEVBQU9BLE1BQVFBLEVBQUlBLElBQUlBLGNBQWNBLEVBQUlBLEVBQUdBLEVBQUlBLE1BQ3REQSxFQUFPQSxRQUFVQSxFQUFJQSxrQkFBa0JBLEVBQVFBLEVBQUlBLEVBQUdBLEVBQUlBLEVBR3BFQSxPQUZBQSxHQUFJQSxVQUVDQSxHQU1FQSxHQUxIQSxFQUFRQSxRQUNSQSxFQUFJQSxXQUNHQSxHQVRDSixFQUFBQSxZQUFXQSxHQURLaE0sRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBUjVlLEVBQUFBLEVBQUFBLFVBQUFBLEVBQUFBLGNBQU5ELEVBQUFBLEVBQUFBLFFBQUFBLEVBQUFBLFlBQVB2dUIsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQU91dUIsR0FBQUEsSUFBQUEsU0FBQUEsR0FBTUMsR0FBQUEsSUFBQUEsU0FBQUEsR0FBUTRlLEdBQUFBLElBQUFBLFNBQUFBLEdBQ2hDZ00sUUFBQUEsR0FBZ0NBLEVBQW9CQSxFQUFZQSxFQUF5QkEsR0FHckZLLE1BRkFBLEdBQVFBLFFBQVFBLEVBQUtBLFNBQ3JCQSxFQUFLQSxhQUFjQSxHQUNaQSxFQUhLTCxFQUFBQSxlQUFjQSxHQURFaE0sRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBUjVlLEVBQUFBLEVBQUFBLFVBQUFBLEVBQUFBLGNBQU5ELEVBQUFBLEVBQUFBLFFBQUFBLEVBQUFBLFlBQVB2dUIsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQU91dUIsR0FBQUEsSUFBQUEsU0FBQUEsR0FBTUMsR0FBQUEsSUFBQUEsU0FBQUEsR0FBUTRlLEdBQUFBLElBQUFBLFNBQUFBLEdBQ2hDZ00sUUFBQUEsR0FBOEJBLEVBQW9CQSxFQUFZQSxFQUF5QkEsR0FFbkZNLE1BREFBLEdBQUlBLFFBQ0dBLEVBRktOLEVBQUFBLGFBQVlBLEdBREloTSxFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFSNWUsRUFBQUEsRUFBQUEsVUFBQUEsRUFBQUEsY0FBTkQsRUFBQUEsRUFBQUEsUUFBQUEsRUFBQUEsWUFBUHZ1QixFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBT3V1QixHQUFBQSxJQUFBQSxTQUFBQSxHQUFNQyxHQUFBQSxJQUFBQSxTQUFBQSxHQUFRb2YsR0FBQUEsSUFBQUEsU0FBQUEsR0FDaEMrTCxRQUFBQSxHQUFtQ0EsRUFBZUEsRUFBZUEsRUFBaUJBLEdBQzlFQyxHQUFJQSxHQUFLQSxFQUFPQSxhQUdoQkEsT0FGQUEsR0FBR0EsRUFBSUEsRUFBR0EsRUFBSUEsRUFDZEEsRUFBR0EsTUFBUUEsRUFBR0EsT0FBU0EsR0FDaEJBLEVBSktELEVBQUFBLGtCQUFpQkEsR0FERC9MLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVJwZixFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQUFORCxFQUFBQSxFQUFBQSxRQUFBQSxFQUFBQSxZQUFQdnVCLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFPdXVCLEdBQUFBLElBQUFBLFNBQUFBLEdBQU1DLEdBQUFBLElBQUFBLFNBQUFBLEdBQVFvZixHQUFBQSxJQUFBQSxTQUFBQSxHQUNoQytMLFFBQUFBLEdBQTRCQSxFQUFlQSxFQUFlQSxFQUFpQkEsR0FDdkVFLEdBQUlBLEdBQUtBLEVBQU9BLFlBQ1pBLEVBQUtBLEVBQU9BLGFBQ2hCQSxJQUFJQSxFQUFNQSxVQUFZQSxFQUFBQSxRQUFRQSxLQUcxQkEsTUFGQUEsR0FBR0EsTUFBUUEsRUFBR0EsRUFBSUEsRUFBR0EsTUFDckJBLEVBQUdBLE9BQVNBLEVBQUdBLEVBQUlBLEVBQUdBLFFBQ2ZBLENBR1hBLElBQUlBLEdBQVlBLEVBQU1BLGFBQ3RCQSxHQUFBQSxLQUFLQSxPQUFPQSxFQUFXQSxHQUNsQkEsU0FBU0EsRUFBVUEsU0FDcEJBLEVBQUdBLE1BQVFBLEVBQUdBLE9BQ2JBLFNBQVNBLEVBQVVBLFVBQ3BCQSxFQUFHQSxPQUFTQSxFQUFHQSxPQUVuQkEsSUFBSUEsR0FBS0EsRUFDTEEsRUFBS0EsQ0FXVEEsUUFWSUEsRUFBR0EsTUFBUUEsSUFDWEEsRUFBS0EsRUFBR0EsTUFBUUEsRUFBR0EsT0FDbkJBLEVBQUdBLE9BQVNBLElBQ1pBLEVBQUtBLEVBQUdBLE9BQVNBLEVBQUdBLFFBRW5CQSxTQUFTQSxFQUFVQSxTQUNwQkEsRUFBS0EsR0FDSkEsU0FBU0EsRUFBVUEsVUFDcEJBLEVBQUtBLEdBRURBLEVBQU1BLFNBQ1ZBLElBQUtBLEdBQUFBLFFBQVFBLFFBQ1RBLEVBQUtBLEVBQUtBLEtBQUtBLElBQUlBLEVBQUlBLEVBQ3ZCQSxNQUNKQSxLQUFLQSxHQUFBQSxRQUFRQSxjQUNUQSxFQUFLQSxFQUFLQSxLQUFLQSxJQUFJQSxFQUFJQSxFQUN2QkEsTUFDSkEsS0FBS0EsR0FBQUEsUUFBUUEsS0FDSkEsU0FBU0EsRUFBVUEsU0FDcEJBLEVBQUtBLEdBQ0pBLFNBQVNBLEVBQVVBLFVBQ3BCQSxFQUFLQSxHQU9qQkEsTUFIQUEsR0FBR0EsTUFBUUEsRUFBR0EsTUFBUUEsRUFDdEJBLEVBQUdBLE9BQVNBLEVBQUdBLE9BQVNBLEdBRWpCQSxFQTlDS0YsRUFBQUEsV0FBVUEsR0FETS9MLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVJwZixFQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxjQUFORCxFQUFBQSxFQUFBQSxRQUFBQSxFQUFBQSxZQUFQdnVCLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFPdXVCLEdBQUFBLElBQUFBLFNBQUFBLEdBQU1DLEdBQUFBLElBQUFBLFNBQUFBLEdBQVV3aEIsR0FBQUEsSUFBQUEsU0FBQUEsR0FDbEM4SixRQUFBQSxHQUE2QkEsRUFBZUEsRUFBZUEsRUFBaUJBLEdBQ3hFQyxNQUErQ0EsTUFBMUNBLEVBQU1BLFdBQWFBLEVBQUFBLFdBQVdBLFNBQ3hCQSxHQUVYQSxFQUFPQSxRQUFRQSxFQUFJQSxFQUFPQSxRQUFRQSxFQUFJQSxFQUN0Q0EsRUFBQUEsS0FBS0EsT0FBT0EsRUFBTUEsV0FBWUEsRUFBT0EsU0FDckNBLEVBQUFBLEtBQUtBLE9BQU9BLEVBQU9BLFFBQVNBLEVBQU9BLHNCQUM1QkEsR0FQS0QsRUFBQUEsWUFBV0EsR0FETzlKLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVZ4aEIsRUFBQUEsRUFBQUEsWUFBQUEsRUFBQUEsZ0JBQU5ELEVBQUFBLEVBQUFBLFFBQUFBLEVBQUFBLFlBQVB2dUIsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQU91dUIsR0FBQUEsSUFBQUEsU0FBQUEsR0FBTUMsR0FBQUEsSUFBQUEsU0FBQUEsR0FBVXdoQixHQUFBQSxJQUFBQSxTQUFBQSxHQUNsQzhKLFFBQUFBLEdBQStCQSxFQUFlQSxFQUFlQSxFQUFpQkEsR0FDMUVFLEdBQStDQSxLQUExQ0EsRUFBTUEsV0FBYUEsRUFBQUEsV0FBV0EsUUFDL0JBLE9BQU9BLENBRVhBLElBQUlBLEdBQUtBLEVBQU9BLFNBS2hCQSxJQUpBQSxFQUFHQSxFQUFJQSxFQUFHQSxFQUFJQSxFQUNkQSxFQUFBQSxLQUFLQSxPQUFPQSxFQUFNQSxXQUFZQSxHQUU5QkEsRUFBT0EsV0FBYUEsRUFBQUEsV0FBV0EsTUFDM0JBLEVBQUFBLEtBQUtBLFFBQVFBLEdBQ2JBLE9BQU9BLENBRVhBLElBQUlBLEdBQU1BLEVBQU1BLE9BQVNBLEVBQU1BLGdCQUFrQkEsQ0FDN0NBLElBQUtBLEVBQUdBLE9BQVNBLEdBQUtBLEVBQUdBLFFBQ3pCQSxFQUFHQSxNQUFRQSxLQUFLQSxJQUFJQSxFQUFHQSxNQUFPQSxFQUFRQSxLQUFKQSxHQUNsQ0EsRUFBR0EsT0FBU0EsS0FBS0EsSUFBSUEsRUFBR0EsT0FBUUEsRUFBUUEsS0FBSkEsR0FDcENBLEVBQU9BLFdBQWFBLEVBQUFBLFdBQVdBLFlBRS9CQSxFQUFPQSxXQUFhQSxFQUFBQSxXQUFXQSxNQUduQ0EsSUFBSUEsR0FBS0EsRUFBSUEsQ0FHYkEsT0FGQUEsR0FBQUEsS0FBS0EsT0FBT0EsRUFBSUEsRUFBSUEsRUFBSUEsRUFBSUEsSUFFckJBLEVBeEJLRixFQUFBQSxjQUFhQSxHQURLOUosRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBVnhoQixFQUFBQSxFQUFBQSxZQUFBQSxFQUFBQSxnQkFBTkQsRUFBQUEsRUFBQUEsUUFBQUEsRUFBQUEsWUFBUHZ1QixFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBT3V1QixHQUFBQSxJQUFBQSxTQUFBQSxHQUFNQyxHQUFBQSxJQUFBQSxTQUFBQSxHQUFPK2YsR0FBQUEsSUFBQUEsU0FBQUEsR0FDL0IwTCxRQUFBQSxHQUFnQ0EsRUFBZUEsRUFBZUEsRUFBaUJBLEVBQWdDQSxHQUUzR0MsTUFEQUEsR0FBTUEsWUFBYUEsRUFDZkEsRUFBTUEsYUFBZUEsRUFBQUEsV0FBV0EsT0FDekJBLEVBQ05BLEVBQU1BLE1BQVNBLEVBQU1BLFFBRTFCQSxFQUFNQSxZQUFhQSxHQUNaQSxJQUZJQSxFQUxDRCxFQUFBQSxlQUFjQSxHQURDMUwsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBUC9mLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQU5ELEVBQUFBLEVBQUFBLFFBQUFBLEVBQUFBLFlBQVB2dUIsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQU91dUIsR0FBQUEsSUFBQUEsU0FBQUEsR0FBTUMsR0FBQUEsSUFBQUEsU0FBQUEsR0FBTytmLEdBQUFBLElBQUFBLFNBQUFBLEdBQy9CMEwsUUFBQUEsR0FBMEJBLEVBQWVBLEVBQWVBLEVBQWlCQSxFQUFnQ0EsR0FDckdFLE1BQUtBLEdBQU1BLFlBR0pBLEdBRklBLEVBRkNGLEVBQUFBLFNBQVFBLEdBRE8xTCxFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFQL2YsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBTkQsRUFBQUEsRUFBQUEsUUFBQUEsRUFBQUEsWUFBUHZ1QixFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBT3V1QixHQUFBQSxJQUFBQSxTQUFBQSxHQUFNQyxHQUFBQSxJQUFBQSxTQUFBQSxHQUFPK2YsR0FBQUEsSUFBQUEsU0FBQUEsR0FDL0IwTCxRQUFBQSxHQUFzQkEsRUFBZUEsRUFBZUEsRUFBaUJBLEVBQWdDQSxHQUNqR0csTUFBS0EsR0FBTUEsWUFFUEEsRUFBTUEsTUFDTkEsRUFBSUEsT0FBT0EsRUFBTUEsS0FBTUEsRUFBTUEsVUFBV0EsRUFBTUEsV0FDM0NBLElBSElBLEVBRkNILEVBQUFBLEtBQUlBLEdBRFcxTCxFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFQL2YsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBTkQsRUFBQUEsRUFBQUEsUUFBQUEsRUFBQUEsWUFBUHZ1QixFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFSQSxVQUFBQSxZQ0FQLElBQU9BLFVBQVAsU0FBT0EsR0FBUUEsR0FBQUEsSUFBQUEsU0FBQUEsR0FBT3V1QixHQUFBQSxJQUFBQSxTQUFBQSxHQUFNQyxHQUFBQSxJQUFBQSxTQUFBQSxHQUFPK2YsR0FBQUEsSUFBQUEsU0FBQUEsR0FDL0IwTCxRQUFBQSxHQUE0QkEsRUFBZUEsRUFBZUEsRUFBaUJBLEVBQWdDQSxHQUN2R0ksTUFBS0EsR0FBTUEsWUFFWEEsRUFBSUEsV0FDR0EsSUFGSUEsRUFGQ0osRUFBQUEsV0FBVUEsR0FESzFMLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVAvZixFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFORCxFQUFBQSxFQUFBQSxRQUFBQSxFQUFBQSxZQUFQdnVCLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFPdXVCLEdBQUFBLElBQUFBLFNBQUFBLEdBQU1DLEdBQUFBLElBQUFBLFNBQUFBLEdBQU8rZixHQUFBQSxJQUFBQSxTQUFBQSxHQUMvQjBMLFFBQUFBLEdBQTZCQSxFQUFlQSxFQUFlQSxFQUFpQkEsRUFBZ0NBLEVBQWNBLEdBQ3RISyxNQUFLQSxHQUFNQSxZQUVYQSxFQUFJQSxPQUNKQSxFQUFBQSxLQUFLQSxRQUFRQSxpQkFBaUJBLEVBQUtBLEVBQU9BLElBQ25DQSxJQUhJQSxFQUZDTCxFQUFBQSxZQUFXQSxHQURJMUwsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBUC9mLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQU5ELEVBQUFBLEVBQUFBLFFBQUFBLEVBQUFBLFlBQVB2dUIsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQU91dUIsR0FBQUEsSUFBQUEsU0FBQUEsR0FBTUMsR0FBQUEsSUFBQUEsU0FBQUEsR0FBTytmLEdBQUFBLElBQUFBLFNBQUFBLEdBYS9CMEwsUUFBQUEsR0FBd0JBLEVBQWVBLEVBQWVBLEVBQWlCQSxFQUFnQ0EsR0FDbkdNLElBQUtBLEVBQU1BLFdBQ1BBLE9BQU9BLENBRVhBLElBQUlBLEdBQVNBLEVBQU1BLE1BQ25CQSxNQUFLQSxHQUFZQSxFQUFNQSxnQkFBa0JBLEdBQ3JDQSxPQUFPQSxDQUVYQSxJQUFJQSxHQUFNQSxFQUFJQSxHQVVkQSxPQVRBQSxHQUFJQSxVQUFZQSxFQUFNQSxnQkFDdEJBLEVBQUlBLFFBQVVBLEVBQUtBLEVBQU1BLG9CQUFzQkEsRUFBTUEsa0JBQW9CQSxJQUFNQSxFQUFLQSxHQUNwRkEsRUFBSUEsU0FBV0EsRUFBTUEsRUFBTUEsZ0JBQWtCQSxJQUFNQSxFQUFNQSxHQUN6REEsRUFBSUEsV0FBYUEsRUFBTUEsaUJBRXZCQSxFQUFPQSxXQUFXQSxFQUFLQSxFQUFNQSxXQUM3QkEsRUFBSUEsWUFBY0EsRUFBT0EsZ0JBQ3pCQSxFQUFJQSxVQUVHQSxFQTlCWE4sR0FBSUEsSUFDQUEsT0FDQUEsU0FDQUEsUUFDQUEsUUFFQUEsR0FDQUEsUUFDQUEsUUFDQUEsUUFHWUEsR0FBQUEsT0FBTUEsR0FiUzFMLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVAvZixFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFORCxFQUFBQSxFQUFBQSxRQUFBQSxFQUFBQSxZQUFQdnVCLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFTbVgsR0FBQUEsSUFBQUEsU0FBQUEsR0FBT0MsR0FBQUEsSUFBQUEsU0FBQUEsR0FBT2ljLEdBQUFBLElBQUFBLFNBQUFBLEdBQU9zZixHQUFBQSxJQUFBQSxTQUFBQSxHQUN6QzZILFFBQUFBLEdBQThCQSxFQUFlQSxFQUFtQkEsRUFBaUJBLEVBQWdDQSxFQUFjQSxHQUMzSEMsSUFBS0EsRUFBTUEsY0FBZ0JBLEVBQUFBLFVBQVVBLFFBQVFBLEVBQU1BLGlCQUMvQ0EsT0FBT0EsQ0FFWEEsSUFBSUEsRUFBQUEsVUFBVUEsV0FBV0EsRUFBTUEsaUJBQWtCQSxDQUM3Q0EsR0FBSUEsR0FBTUEsRUFBTUEsa0JBQ1pBLEVBQU1BLEVBQU1BLGtCQUNaQSxFQUFNQSxFQUFNQSxrQkFDaEJBLEdBQUlBLFNBQVdBLEVBQUlBLFFBQVVBLEVBQUlBLFNBQVdBLEVBQzVDQSxFQUFJQSxVQUFZQSxFQUFJQSxTQUFXQSxFQUFJQSxVQUFZQSxFQUMvQ0EsRUFBSUEsYUFBZUEsRUFBSUEsWUFBY0EsRUFBSUEsYUFBZUEsRUFDeERBLEVBQUlBLFlBQWNBLEVBQUlBLFdBQWFBLEVBQUlBLFlBQWNBLEVBQ3JEQSxFQUFBQSxLQUFLQSxPQUFPQSxFQUFNQSxRQUFTQSxFQUFNQSxjQUNqQ0EsSUFBSUEsR0FBS0EsRUFBTUEsZUFDZkEsR0FBQUEsS0FBS0EsT0FBT0EsRUFBTUEsY0FBZUEsRUFBR0EsS0FBT0EsRUFBS0EsRUFBR0EsSUFBTUEsRUFBS0EsRUFBR0EsTUFBUUEsRUFBS0EsRUFBR0EsT0FBU0EsR0FHOUZBLE9BQU9BLEVBakJLRCxFQUFBQSxhQUFZQSxHQURhN0gsRUFBQUEsRUFBQUEsT0FBQUEsRUFBQUEsV0FBUHRmLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVBqYyxFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFQRCxFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFUblgsRUFBQUEsRUFBQUEsV0FBQUEsRUFBQUEsZUFBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQVNtWCxHQUFBQSxJQUFBQSxTQUFBQSxHQUFPQyxHQUFBQSxJQUFBQSxTQUFBQSxHQUFPaWMsR0FBQUEsSUFBQUEsU0FBQUEsR0FBT3NmLEdBQUFBLElBQUFBLFNBQUFBLEdBQ3pDNkgsUUFBQUEsR0FBK0JBLEVBQWVBLEVBQW1CQSxFQUFpQkEsRUFBZ0NBLEVBQWNBLEdBQzVIRSxPQUFLQSxFQUFNQSxjQUFnQkEsRUFBQUEsVUFBVUEsV0FBV0EsRUFBTUEsa0JBQzNDQSxHQUVOQSxFQUFNQSxVQUNQQSxFQUFNQSxRQUFVQSxFQUFvQkEsRUFBTUEsWUFBYUEsRUFBTUEsUUFBU0EsRUFBTUEsWUFBYUEsRUFBTUEsa0JBQW1CQSxFQUFNQSxxQkFHckhBLEdBS1hGLFFBQUFBLEdBQThCQSxFQUFxQkEsRUFBZUEsRUFBbUJBLEVBQW1CQSxHQUNwR0csRUFBVUEsR0FBV0EsR0FBSUEsR0FBQUEsS0FBS0EsT0FBT0EsY0FBd0NBLFNBQVNBLGNBQWNBLFVBQVVBLFdBQVdBLE1BQ3pIQSxJQUFJQSxHQUFNQSxFQUFRQSxHQVNsQkEsT0FSQUEsR0FBQUEsS0FBS0EsT0FBT0EsRUFBU0EsRUFBSUEsUUFDekJBLEVBQUlBLFlBQ0pBLEVBQUFBLFFBQVFBLGVBQWVBLEVBQUtBLEVBQVNBLEdBQ3JDQSxFQUFRQSxPQUFPQSxFQUFhQSxHQUM1QkEsRUFBSUEseUJBQTJCQSxNQUMvQkEsRUFBSUEsWUFDSkEsRUFBQUEsUUFBUUEsZUFBZUEsRUFBS0EsRUFBYUEsR0FDekNBLEVBQUlBLE9BQ0dBLEVBQUlBLGNBQWNBLEVBQUlBLE9BQVFBLGFBeEJ6QkgsRUFBQUEsY0FBYUEsQ0FXN0JBLElBQUlBLElBWnFDN0gsRUFBQUEsRUFBQUEsT0FBQUEsRUFBQUEsV0FBUHRmLEVBQUFBLEVBQUFBLFNBQUFBLEVBQUFBLGFBQVBqYyxFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFQRCxFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFUblgsRUFBQUEsRUFBQUEsV0FBQUEsRUFBQUEsZUFBUkEsVUFBQUEsWUNBUCxJQUFPQSxVQUFQLFNBQU9BLEdBQVFBLEdBQUFBLElBQUFBLFNBQUFBLEdBQVNtWCxHQUFBQSxJQUFBQSxTQUFBQSxHQUFPQyxHQUFBQSxJQUFBQSxTQUFBQSxHQUFPaWMsR0FBQUEsSUFBQUEsU0FBQUEsR0FBT3NmLEdBQUFBLElBQUFBLFNBQUFBLEdBQ3pDNkgsUUFBQUEsR0FBMEJBLEVBQWVBLEVBQW1CQSxFQUFpQkEsRUFBZ0NBLEVBQWNBLEdBQ3ZISSxNQUFLQSxHQUFNQSxjQUVYQSxFQUFJQSxPQUNKQSxFQUFBQSxLQUFLQSxRQUFRQSxpQkFBaUJBLEVBQUtBLEVBQU9BLEdBRXRDQSxFQUFNQSxZQUNOQSxFQUFpQkEsRUFBS0EsRUFBT0EsR0FFN0JBLEVBQU1BLFFBQ05BLEVBQWNBLEVBQUtBLEVBQU9BLEdBQ25CQSxFQUFNQSxhQUNiQSxFQUFhQSxFQUFLQSxFQUFPQSxHQUc3QkEsRUFBSUEsV0FDR0EsSUFkSUEsRUFpQmZKLFFBQUFBLEdBQXdCQSxFQUFnQ0EsRUFBZUEsR0FDbkVLLEdBQUlBLEdBQU1BLEVBQUlBLEdBQ2RBLEdBQUlBLFlBQ0pBLEVBQUlBLFVBQVlBLEVBQU1BLFFBQ3RCQSxFQUFBQSxRQUFRQSxlQUFlQSxFQUFLQSxFQUFNQSxRQUFTQSxFQUFNQSxtQkFDakRBLEVBQUlBLE9BR1JMLFFBQUFBLEdBQTJCQSxFQUFnQ0EsRUFBZUEsR0FDdEVNLEVBQUlBLElBQUlBLFlBQ1JBLEVBQUFBLFFBQVFBLGVBQWVBLEVBQUlBLElBQUtBLEVBQU1BLFlBQWFBLEVBQU1BLG1CQUN6REEsRUFBSUEsT0FBT0EsRUFBTUEsV0FBWUEsRUFBTUEsYUFHdkNOLFFBQUFBLEdBQXVCQSxFQUFnQ0EsRUFBZUEsR0FDbEVPLEdBQUlBLEdBQU1BLEVBQUlBLEdBQ2RBLEdBQUlBLFlBQ0pBLEVBQUFBLFFBQVFBLGVBQWVBLEVBQUtBLEVBQU1BLGNBQWVBLEVBQU1BLG9CQUN2REEsRUFBSUEsVUFBWUEsRUFBTUEsZ0JBQWdCQSxLQUN0Q0EsRUFBSUEsUUFBVUEsT0FDZEEsRUFBSUEsU0FBV0EsUUFDZkEsRUFBSUEsV0FBYUEsRUFDakJBLEVBQU1BLFlBQVlBLFdBQVdBLEVBQUtBLEVBQU1BLGVBQ3hDQSxFQUFJQSxZQUFjQSxFQUFNQSxZQUFZQSxnQkFDcENBLEVBQUlBLFNBM0NRUCxFQUFBQSxTQUFRQSxHQURpQjdILEVBQUFBLEVBQUFBLE9BQUFBLEVBQUFBLFdBQVB0ZixFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFQamMsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBUEQsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBVG5YLEVBQUFBLEVBQUFBLFdBQUFBLEVBQUFBLGVBQVJBLFVBQUFBLFlDQVAsSUFBT0EsVUFBUCxTQUFPQSxHQUFRQSxHQUFBQSxJQUFBQSxTQUFBQSxHQUFTbVgsR0FBQUEsSUFBQUEsU0FBQUEsR0FBT0MsR0FBQUEsSUFBQUEsU0FBQUEsR0FBT2ljLEdBQUFBLElBQUFBLFNBQUFBLEdBQU9zZixHQUFBQSxJQUFBQSxTQUFBQSxHQUN6QzZILFFBQUFBLEdBQW1DQSxFQUFlQSxFQUFtQkEsRUFBaUJBLEVBQWdDQSxFQUFjQSxHQUNoSVEsTUFBS0EsR0FBTUEsYUFHUEEsRUFBQUEsVUFBVUEsUUFBUUEsRUFBTUEsa0JBQ3hCQSxFQUFNQSxRQUFVQSxNQUNUQSxHQUdOQSxFQUFNQSxZQU9QQSxFQUFpQkEsRUFBT0EsRUFBT0EsRUFBTUEsY0FDckNBLEVBQU1BLFFBQVVBLE1BRXBCQSxFQUFjQSxFQUFPQSxFQUFPQSxFQUFNQSxhQUMzQkEsSUFWSEEsRUFBTUEsY0FDTkEsRUFBY0EsRUFBT0EsRUFBT0EsRUFBTUEsWUFDbENBLEVBQU1BLFFBQVVBLE1BQ1RBLElBWEFBLEVBcUJmUixRQUFBQSxHQUF3QkEsRUFBZUEsRUFBZUEsR0FDbERTLEVBQVFBLFlBQWNBLEVBQU1BLFlBQzVCQSxFQUFRQSxnQkFBa0JBLEVBQU1BLGdCQUNoQ0EsRUFBUUEsUUFBVUEsRUFBTUEsUUFDeEJBLEVBQVFBLFlBQWNBLEVBQU1BLFlBQzVCQSxFQUFRQSxrQkFBb0JBLEVBQU1BLGtCQUNsQ0EsRUFBUUEsa0JBQW9CQSxFQUFNQSxrQkFHdENULFFBQUFBLEdBQTJCQSxFQUFlQSxFQUFlQSxHQUNyRFUsUUFBT0EsRUFBUUEsY0FBZ0JBLEVBQU1BLGFBQzdCQSxFQUFBQSxLQUFLQSxRQUFRQSxFQUFRQSxRQUFTQSxFQUFNQSxVQUNwQ0EsRUFBQUEsS0FBS0EsUUFBUUEsRUFBUUEsWUFBYUEsRUFBTUEsY0FDeENBLEVBQUFBLGFBQWFBLFFBQVFBLEVBQVFBLGtCQUFtQkEsRUFBTUEsb0JBQ3REQSxFQUFBQSxhQUFhQSxRQUFRQSxFQUFRQSxrQkFBbUJBLEVBQU1BLG9CQXJDbERWLEVBQUFBLGtCQUFpQkEsR0FEUTdILEVBQUFBLEVBQUFBLE9BQUFBLEVBQUFBLFdBQVB0ZixFQUFBQSxFQUFBQSxTQUFBQSxFQUFBQSxhQUFQamMsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBUEQsRUFBQUEsRUFBQUEsU0FBQUEsRUFBQUEsYUFBVG5YLEVBQUFBLEVBQUFBLFdBQUFBLEVBQUFBLGVBQVJBLFVBQUFBIiwiZmlsZSI6Im1pbmVydmEubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gcmFkVG9EZWdyZWVzKHJhZCkge1xyXG4gICAgcmV0dXJuIHJhZCAqIDE4MCAvIE1hdGguUEk7XHJcbn1cclxuXHJcbm1vZHVsZSBtaW5lcnZhLnBhdGguc2VnbWVudHMge1xyXG4gICAgdmFyIEVQU0lMT04gPSAxZS0xMDtcclxuXHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElBcmNUbyBleHRlbmRzIElQYXRoU2VnbWVudCB7XHJcbiAgICAgICAgY3B4OiBudW1iZXI7XHJcbiAgICAgICAgY3B5OiBudW1iZXI7XHJcbiAgICAgICAgeDogbnVtYmVyO1xyXG4gICAgICAgIHk6IG51bWJlcjtcclxuICAgICAgICByYWRpdXM6IG51bWJlcjtcclxuICAgIH1cclxuICAgIGV4cG9ydCBmdW5jdGlvbiBhcmNUbyhjcHg6IG51bWJlciwgY3B5OiBudW1iZXIsIHg6IG51bWJlciwgeTogbnVtYmVyLCByYWRpdXM6IG51bWJlcik6IElBcmNUbyB7XHJcbiAgICAgICAgdmFyIGxpbmU6IElMaW5lO1xyXG4gICAgICAgIHZhciBhcmM6IElBcmM7XHJcbiAgICAgICAgdmFyIGluaXRlZCA9IGZhbHNlO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBpbml0KHByZXZYOiBudW1iZXIsIHByZXZZOiBudW1iZXIpIHtcclxuICAgICAgICAgICAgaWYgKGluaXRlZCkgcmV0dXJuO1xyXG4gICAgICAgICAgICBpZiAobGluZSAmJiBhcmMpIHJldHVybiBhcmM7XHJcbiAgICAgICAgICAgIHZhciB2MSA9IFtjcHggLSBwcmV2WCwgY3B5IC0gcHJldlldO1xyXG4gICAgICAgICAgICB2YXIgdjIgPSBbeCAtIGNweCwgeSAtIGNweV07XHJcbiAgICAgICAgICAgIHZhciBpbm5lcl90aGV0YSA9IE1hdGguUEkgLSBWZWN0b3IuYW5nbGVCZXR3ZWVuKHYxLCB2Mik7XHJcbiAgICAgICAgICAgIC8vZmluZCAyIHBvaW50cyB0YW5nZW50IHRvIGltYWdpbmFyeSBjaXJjbGUgYWxvbmcgZ3VpZGUgbGluZXNcclxuICAgICAgICAgICAgdmFyIGEgPSBnZXRUYW5nZW50UG9pbnQoaW5uZXJfdGhldGEsIHJhZGl1cywgW3ByZXZYLCBwcmV2WV0sIHYxLCB0cnVlKTtcclxuICAgICAgICAgICAgdmFyIGIgPSBnZXRUYW5nZW50UG9pbnQoaW5uZXJfdGhldGEsIHJhZGl1cywgW2NweCwgY3B5XSwgdjIsIGZhbHNlKTtcclxuICAgICAgICAgICAgLy9maW5kIGNlbnRlciBwb2ludFxyXG4gICAgICAgICAgICB2YXIgYyA9IGdldFBlcnBlbmRpY3VsYXJJbnRlcnNlY3Rpb25zKGEsIHYxLCBiLCB2Mik7XHJcbiAgICAgICAgICAgIC8vY291bnRlciBjbG9ja3dpc2UgdGVzdFxyXG4gICAgICAgICAgICB2YXIgY2MgPSAhVmVjdG9yLmlzQ2xvY2t3aXNlVG8odjEsIHYyKTtcclxuICAgICAgICAgICAgLy9maW5kIHN0YXJ0aW5nIGFuZ2xlIC0tIFsxLDBdIGlzIG9yaWdpbiBkaXJlY3Rpb24gb2YgMHJhZFxyXG4gICAgICAgICAgICB2YXIgc2EgPSBNYXRoLmF0YW4yKGFbMV0gLSBjWzFdLCBhWzBdIC0gY1swXSk7XHJcbiAgICAgICAgICAgIGlmIChzYSA8IDApXHJcbiAgICAgICAgICAgICAgICBzYSA9ICgyICogTWF0aC5QSSkgKyBzYTtcclxuICAgICAgICAgICAgdmFyIGVhID0gTWF0aC5hdGFuMihiWzFdIC0gY1sxXSwgYlswXSAtIGNbMF0pO1xyXG4gICAgICAgICAgICBpZiAoZWEgPCAwKVxyXG4gICAgICAgICAgICAgICAgZWEgPSAoMiAqIE1hdGguUEkpICsgZWE7XHJcblxyXG4gICAgICAgICAgICBsaW5lID0gc2VnbWVudHMubGluZShhWzBdLCBhWzFdKTtcclxuICAgICAgICAgICAgbGluZS5zeCA9IHByZXZYO1xyXG4gICAgICAgICAgICBsaW5lLnN5ID0gcHJldlk7XHJcbiAgICAgICAgICAgIGFyYyA9IHNlZ21lbnRzLmFyYyhjWzBdLCBjWzFdLCByYWRpdXMsIHNhLCBlYSwgY2MpO1xyXG4gICAgICAgICAgICBpbml0ZWQgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgc3g6IG51bGwsXHJcbiAgICAgICAgICAgIHN5OiBudWxsLFxyXG4gICAgICAgICAgICBpc1NpbmdsZTogZmFsc2UsXHJcbiAgICAgICAgICAgIGNweDogY3B4LFxyXG4gICAgICAgICAgICBjcHk6IGNweSxcclxuICAgICAgICAgICAgeDogeCxcclxuICAgICAgICAgICAgeTogeSxcclxuICAgICAgICAgICAgZXg6IHgsXHJcbiAgICAgICAgICAgIGV5OiB5LFxyXG4gICAgICAgICAgICByYWRpdXM6IHJhZGl1cyxcclxuICAgICAgICAgICAgZHJhdzogZnVuY3Rpb24gKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEKSB7XHJcbiAgICAgICAgICAgICAgICBjdHguYXJjVG8oY3B4LCBjcHksIHgsIHksIHJhZGl1cyk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGV4dGVuZEZpbGxCb3g6IGZ1bmN0aW9uIChib3g6IElCb3VuZGluZ0JveCkge1xyXG4gICAgICAgICAgICAgICAgaW5pdCh0aGlzLnN4LCB0aGlzLnN5KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZXggPSBhcmMuZXg7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmV5ID0gYXJjLmV5O1xyXG5cclxuICAgICAgICAgICAgICAgIGJveC5sID0gTWF0aC5taW4oYm94LmwsIHRoaXMuc3gpO1xyXG4gICAgICAgICAgICAgICAgYm94LnIgPSBNYXRoLm1heChib3guciwgdGhpcy5zeCk7XHJcbiAgICAgICAgICAgICAgICBib3gudCA9IE1hdGgubWluKGJveC50LCB0aGlzLnN5KTtcclxuICAgICAgICAgICAgICAgIGJveC5iID0gTWF0aC5tYXgoYm94LmIsIHRoaXMuc3kpO1xyXG5cclxuICAgICAgICAgICAgICAgIGxpbmUuZXh0ZW5kRmlsbEJveChib3gpO1xyXG4gICAgICAgICAgICAgICAgYXJjLmV4dGVuZEZpbGxCb3goYm94KTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZXh0ZW5kU3Ryb2tlQm94OiBmdW5jdGlvbiAoYm94OiBJQm91bmRpbmdCb3gsIHBhcnM6IElTdHJva2VQYXJhbWV0ZXJzKSB7XHJcbiAgICAgICAgICAgICAgICBpbml0KHRoaXMuc3gsIHRoaXMuc3kpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5leCA9IGFyYy5leDtcclxuICAgICAgICAgICAgICAgIHRoaXMuZXkgPSBhcmMuZXk7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGhzID0gcGFycy5zdHJva2VUaGlja25lc3MgLyAyO1xyXG4gICAgICAgICAgICAgICAgYm94LmwgPSBNYXRoLm1pbihib3gubCwgdGhpcy5zeCAtIGhzKTtcclxuICAgICAgICAgICAgICAgIGJveC5yID0gTWF0aC5tYXgoYm94LnIsIHRoaXMuc3ggKyBocyk7XHJcbiAgICAgICAgICAgICAgICBib3gudCA9IE1hdGgubWluKGJveC50LCB0aGlzLnN5IC0gaHMpO1xyXG4gICAgICAgICAgICAgICAgYm94LmIgPSBNYXRoLm1heChib3guYiwgdGhpcy5zeSArIGhzKTtcclxuXHJcbiAgICAgICAgICAgICAgICBsaW5lLmV4dGVuZFN0cm9rZUJveChib3gsIHBhcnMpO1xyXG4gICAgICAgICAgICAgICAgYXJjLmV4dGVuZFN0cm9rZUJveChib3gsIHBhcnMpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB0b1N0cmluZzogZnVuY3Rpb24gKCk6IHN0cmluZyB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJcIjtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2V0U3RhcnRWZWN0b3I6IGZ1bmN0aW9uICgpOiBudW1iZXJbXSB7XHJcbiAgICAgICAgICAgICAgICBpbml0KHRoaXMuc3gsIHRoaXMuc3kpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGxpbmUuZ2V0U3RhcnRWZWN0b3IoKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2V0RW5kVmVjdG9yOiBmdW5jdGlvbiAoKTogbnVtYmVyW10ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFyYy5nZXRFbmRWZWN0b3IoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0VGFuZ2VudFBvaW50KHRoZXRhOiBudW1iZXIsIHJhZGl1czogbnVtYmVyLCBzOiBudW1iZXJbXSwgZDogbnVtYmVyW10sIGludmVydDogYm9vbGVhbik6IG51bWJlcltdIHtcclxuICAgICAgICB2YXIgbGVuID0gTWF0aC5zcXJ0KGRbMF0gKiBkWzBdICsgZFsxXSAqIGRbMV0pO1xyXG4gICAgICAgIHZhciBmID0gcmFkaXVzIC8gTWF0aC50YW4odGhldGEgLyAyKTtcclxuICAgICAgICB2YXIgdCA9IGYgLyBsZW47XHJcbiAgICAgICAgaWYgKGludmVydClcclxuICAgICAgICAgICAgdCA9IDEgLSB0O1xyXG4gICAgICAgIHJldHVybiBbc1swXSArIHQgKiBkWzBdLCBzWzFdICsgdCAqIGRbMV1dO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdldFBlcnBlbmRpY3VsYXJJbnRlcnNlY3Rpb25zKHMxOiBudW1iZXJbXSwgZDE6IG51bWJlcltdLCBzMjogbnVtYmVyW10sIGQyOiBudW1iZXJbXSk6IG51bWJlcltdIHtcclxuICAgICAgICByZXR1cm4gVmVjdG9yLmludGVyc2VjdGlvbihzMSwgVmVjdG9yLm9ydGhvZ29uYWwoZDEuc2xpY2UoMCkpLCBzMiwgVmVjdG9yLm9ydGhvZ29uYWwoZDIuc2xpY2UoMCkpKTtcclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhIHtcclxuICAgIGV4cG9ydCB2YXIgdmVyc2lvbiA9ICcwLjcuNic7XHJcbn0iLCJtb2R1bGUgbWluZXJ2YSB7XHJcbiAgICBleHBvcnQgZW51bSBIb3Jpem9udGFsQWxpZ25tZW50IHtcclxuICAgICAgICBMZWZ0ID0gMCxcclxuICAgICAgICBDZW50ZXIgPSAxLFxyXG4gICAgICAgIFJpZ2h0ID0gMixcclxuICAgICAgICBTdHJldGNoID0gMyxcclxuICAgIH1cclxuICAgIGV4cG9ydCBlbnVtIFZlcnRpY2FsQWxpZ25tZW50IHtcclxuICAgICAgICBUb3AgPSAwLFxyXG4gICAgICAgIENlbnRlciA9IDEsXHJcbiAgICAgICAgQm90dG9tID0gMixcclxuICAgICAgICBTdHJldGNoID0gMyxcclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhIHtcclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUNvcm5lclJhZGl1cyB7XHJcbiAgICAgICAgdG9wTGVmdDogbnVtYmVyO1xyXG4gICAgICAgIHRvcFJpZ2h0OiBudW1iZXI7XHJcbiAgICAgICAgYm90dG9tUmlnaHQ6IG51bWJlcjtcclxuICAgICAgICBib3R0b21MZWZ0OiBudW1iZXI7XHJcbiAgICB9XHJcbiAgICBleHBvcnQgY2xhc3MgQ29ybmVyUmFkaXVzIGltcGxlbWVudHMgSUNvcm5lclJhZGl1cyB7XHJcbiAgICAgICAgdG9wTGVmdDogbnVtYmVyO1xyXG4gICAgICAgIHRvcFJpZ2h0OiBudW1iZXI7XHJcbiAgICAgICAgYm90dG9tUmlnaHQ6IG51bWJlcjtcclxuICAgICAgICBib3R0b21MZWZ0OiBudW1iZXI7XHJcblxyXG4gICAgICAgIGNvbnN0cnVjdG9yICh0b3BMZWZ0PzogbnVtYmVyLCB0b3BSaWdodD86IG51bWJlciwgYm90dG9tUmlnaHQ/OiBudW1iZXIsIGJvdHRvbUxlZnQ/OiBudW1iZXIpIHtcclxuICAgICAgICAgICAgdGhpcy50b3BMZWZ0ID0gdG9wTGVmdCA9PSBudWxsID8gMCA6IHRvcExlZnQ7XHJcbiAgICAgICAgICAgIHRoaXMudG9wUmlnaHQgPSB0b3BSaWdodCA9PSBudWxsID8gMCA6IHRvcFJpZ2h0O1xyXG4gICAgICAgICAgICB0aGlzLmJvdHRvbVJpZ2h0ID0gYm90dG9tUmlnaHQgPT0gbnVsbCA/IDAgOiBib3R0b21SaWdodDtcclxuICAgICAgICAgICAgdGhpcy5ib3R0b21MZWZ0ID0gYm90dG9tTGVmdCA9PSBudWxsID8gMCA6IGJvdHRvbUxlZnQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzdGF0aWMgaXNFbXB0eSAoY3I6IElDb3JuZXJSYWRpdXMpOiBib29sZWFuIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNyLnRvcExlZnQgPT09IDBcclxuICAgICAgICAgICAgICAgICYmIGNyLnRvcFJpZ2h0ID09PSAwXHJcbiAgICAgICAgICAgICAgICAmJiBjci5ib3R0b21SaWdodCA9PT0gMFxyXG4gICAgICAgICAgICAgICAgJiYgY3IuYm90dG9tTGVmdCA9PT0gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN0YXRpYyBpc0VxdWFsIChjcjE6IElDb3JuZXJSYWRpdXMsIGNyMjogSUNvcm5lclJhZGl1cyk6IGJvb2xlYW4ge1xyXG4gICAgICAgICAgICByZXR1cm4gY3IxLnRvcExlZnQgPT09IGNyMi50b3BMZWZ0XHJcbiAgICAgICAgICAgICAgICAmJiBjcjEudG9wUmlnaHQgPT09IGNyMi50b3BSaWdodFxyXG4gICAgICAgICAgICAgICAgJiYgY3IxLmJvdHRvbVJpZ2h0ID09PSBjcjIuYm90dG9tUmlnaHRcclxuICAgICAgICAgICAgICAgICYmIGNyMS5ib3R0b21MZWZ0ID09PSBjcjIuYm90dG9tTGVmdDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN0YXRpYyBjbGVhciAoZGVzdDogSUNvcm5lclJhZGl1cykge1xyXG4gICAgICAgICAgICBkZXN0LnRvcExlZnQgPSBkZXN0LnRvcFJpZ2h0ID0gZGVzdC5ib3R0b21SaWdodCA9IGRlc3QuYm90dG9tTGVmdCA9IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzdGF0aWMgY29weVRvIChjcjI6IElDb3JuZXJSYWRpdXMsIGRlc3Q6IElDb3JuZXJSYWRpdXMpIHtcclxuICAgICAgICAgICAgZGVzdC50b3BMZWZ0ID0gY3IyLnRvcExlZnQ7XHJcbiAgICAgICAgICAgIGRlc3QudG9wUmlnaHQgPSBjcjIudG9wUmlnaHQ7XHJcbiAgICAgICAgICAgIGRlc3QuYm90dG9tUmlnaHQgPSBjcjIuYm90dG9tUmlnaHQ7XHJcbiAgICAgICAgICAgIGRlc3QuYm90dG9tTGVmdCA9IGNyMi5ib3R0b21MZWZ0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhIHtcclxuICAgIGV4cG9ydCBlbnVtIE9yaWVudGF0aW9uIHtcclxuICAgICAgICBIb3Jpem9udGFsID0gMCxcclxuICAgICAgICBWZXJ0aWNhbCA9IDEsXHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGVudW0gUGVuTGluZUpvaW4ge1xyXG4gICAgICAgIE1pdGVyID0gMCxcclxuICAgICAgICBCZXZlbCA9IDEsXHJcbiAgICAgICAgUm91bmQgPSAyLFxyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBlbnVtIFBlbkxpbmVDYXAge1xyXG4gICAgICAgIEZsYXQgPSAwLFxyXG4gICAgICAgIFNxdWFyZSA9IDEsXHJcbiAgICAgICAgUm91bmQgPSAyLFxyXG4gICAgICAgIFRyaWFuZ2xlID0gMyxcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgZW51bSBGaWxsUnVsZSB7XHJcbiAgICAgICAgRXZlbk9kZCA9IDAsXHJcbiAgICAgICAgTm9uWmVybyA9IDEsXHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGVudW0gU3RyZXRjaCB7XHJcbiAgICAgICAgTm9uZSA9IDAsXHJcbiAgICAgICAgRmlsbCA9IDEsXHJcbiAgICAgICAgVW5pZm9ybSA9IDIsXHJcbiAgICAgICAgVW5pZm9ybVRvRmlsbCA9IDMsXHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGVudW0gRmxvd0RpcmVjdGlvbiB7XHJcbiAgICAgICAgTGVmdFRvUmlnaHQgPSAwLFxyXG4gICAgICAgIFJpZ2h0VG9MZWZ0ID0gMSxcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgZW51bSBMaW5lU3RhY2tpbmdTdHJhdGVneSB7XHJcbiAgICAgICAgTWF4SGVpZ2h0ID0gMCxcclxuICAgICAgICBCbG9ja0xpbmVIZWlnaHQgPSAxLFxyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBlbnVtIFRleHRBbGlnbm1lbnQge1xyXG4gICAgICAgIExlZnQgPSAwLFxyXG4gICAgICAgIENlbnRlciA9IDEsXHJcbiAgICAgICAgUmlnaHQgPSAyLFxyXG4gICAgICAgIEp1c3RpZnkgPSAzLFxyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBlbnVtIFRleHRUcmltbWluZyB7XHJcbiAgICAgICAgTm9uZSA9IDAsXHJcbiAgICAgICAgV29yZEVsbGlwc2lzID0gMSxcclxuICAgICAgICBDaGFyYWN0ZXJFbGxpcHNpcyA9IDIsXHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGVudW0gVGV4dFdyYXBwaW5nIHtcclxuICAgICAgICBOb1dyYXAgPSAwLFxyXG4gICAgICAgIFdyYXAgPSAxLFxyXG4gICAgICAgIFdyYXBXaXRoT3ZlcmZsb3cgPSAyLFxyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBlbnVtIFRleHREZWNvcmF0aW9ucyB7XHJcbiAgICAgICAgTm9uZSA9IDAsXHJcbiAgICAgICAgVW5kZXJsaW5lID0gMSxcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgZW51bSBGb250V2VpZ2h0IHtcclxuICAgICAgICBUaGluID0gMTAwLFxyXG4gICAgICAgIEV4dHJhTGlnaHQgPSAyMDAsXHJcbiAgICAgICAgTGlnaHQgPSAzMDAsXHJcbiAgICAgICAgTm9ybWFsID0gNDAwLFxyXG4gICAgICAgIE1lZGl1bSA9IDUwMCxcclxuICAgICAgICBTZW1pQm9sZCA9IDYwMCxcclxuICAgICAgICBCb2xkID0gNzAwLFxyXG4gICAgICAgIEV4dHJhQm9sZCA9IDgwMCxcclxuICAgICAgICBCbGFjayA9IDkwMCxcclxuICAgICAgICBFeHRyYUJsYWNrID0gOTUwLFxyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBlbnVtIFN3ZWVwRGlyZWN0aW9uIHtcclxuICAgICAgICBDb3VudGVyY2xvY2t3aXNlID0gMCxcclxuICAgICAgICBDbG9ja3dpc2UgPSAxLFxyXG4gICAgfVxyXG59XHJcbiIsIm1vZHVsZSBtaW5lcnZhIHtcclxuICAgIHZhciBoaXRUZXN0Q3R4OiBtaW5lcnZhLmNvcmUucmVuZGVyLlJlbmRlckNvbnRleHQgPSBudWxsO1xyXG5cclxuICAgIGV4cG9ydCBmdW5jdGlvbiBmaW5kRWxlbWVudHNJbkhvc3RTcGFjZSAocG9zOiBQb2ludCwgaG9zdDogY29yZS5VcGRhdGVyKSB7XHJcbiAgICAgICAgaGl0VGVzdEN0eCA9IGhpdFRlc3RDdHggfHwgbmV3IGNvcmUucmVuZGVyLlJlbmRlckNvbnRleHQoPENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRD5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKS5nZXRDb250ZXh0KCcyZCcpKTtcclxuICAgICAgICB2YXIgaW52ID0gbWF0My5pbnZlcnNlKGhvc3QuYXNzZXRzLnJlbmRlclhmb3JtLCBtYXQzLmNyZWF0ZSgpKTtcclxuXHJcbiAgICAgICAgaGl0VGVzdEN0eC5zYXZlKCk7XHJcbiAgICAgICAgaGl0VGVzdEN0eC5wcmVhcHBseShpbnYpO1xyXG4gICAgICAgIHZhciBsaXN0OiBtaW5lcnZhLmNvcmUuVXBkYXRlcltdID0gW107XHJcbiAgICAgICAgaG9zdC5oaXRUZXN0KHBvcywgbGlzdCwgaGl0VGVzdEN0eCwgdHJ1ZSk7XHJcbiAgICAgICAgaGl0VGVzdEN0eC5yZXN0b3JlKCk7XHJcbiAgICAgICAgcmV0dXJuIGxpc3Q7XHJcbiAgICB9XHJcbn1cclxuIiwibW9kdWxlIG1pbmVydmEge1xyXG4gICAgZXhwb3J0IGVudW0gRGlydHlGbGFncyB7XHJcbiAgICAgICAgVHJhbnNmb3JtID0gMSA8PCAwLFxyXG4gICAgICAgIExvY2FsVHJhbnNmb3JtID0gMSA8PCAxLFxyXG4gICAgICAgIENsaXAgPSAxIDw8IDMsXHJcbiAgICAgICAgTG9jYWxDbGlwID0gMSA8PCA0LFxyXG4gICAgICAgIExheW91dENsaXAgPSAxIDw8IDUsXHJcbiAgICAgICAgUmVuZGVyVmlzaWJpbGl0eSA9IDEgPDwgNixcclxuICAgICAgICBIaXRUZXN0VmlzaWJpbGl0eSA9IDEgPDwgNyxcclxuICAgICAgICBJbWFnZU1ldHJpY3MgPSAxIDw8IDgsXHJcbiAgICAgICAgTWVhc3VyZSA9IDEgPDwgOSxcclxuICAgICAgICBBcnJhbmdlID0gMSA8PCAxMCxcclxuICAgICAgICBCb3VuZHMgPSAxIDw8IDIwLFxyXG4gICAgICAgIE5ld0JvdW5kcyA9IDEgPDwgMjEsXHJcbiAgICAgICAgSW52YWxpZGF0ZSA9IDEgPDwgMjIsXHJcbiAgICAgICAgSW5VcERpcnR5TGlzdCA9IDEgPDwgMzAsXHJcbiAgICAgICAgSW5Eb3duRGlydHlMaXN0ID0gMSA8PCAzMSxcclxuXHJcbiAgICAgICAgRG93bkRpcnR5U3RhdGUgPSBUcmFuc2Zvcm0gfCBMb2NhbFRyYW5zZm9ybVxyXG4gICAgICAgICAgICB8IENsaXAgfCBMb2NhbENsaXAgfCBMYXlvdXRDbGlwIHwgUmVuZGVyVmlzaWJpbGl0eVxyXG4gICAgICAgICAgICB8IEhpdFRlc3RWaXNpYmlsaXR5IHwgSW1hZ2VNZXRyaWNzLFxyXG4gICAgICAgIFVwRGlydHlTdGF0ZSA9IEJvdW5kcyB8IE5ld0JvdW5kcyB8IEludmFsaWRhdGUsXHJcblxyXG4gICAgICAgIFByb3BhZ2F0ZURvd24gPSBSZW5kZXJWaXNpYmlsaXR5IHwgSGl0VGVzdFZpc2liaWxpdHkgfCBUcmFuc2Zvcm0gfCBMYXlvdXRDbGlwXHJcbiAgICB9XHJcbiAgICBleHBvcnQgZW51bSBVSUZsYWdzIHtcclxuICAgICAgICBOb25lID0gMCxcclxuXHJcbiAgICAgICAgUmVuZGVyVmlzaWJsZSA9IDB4MDIsXHJcbiAgICAgICAgSGl0VGVzdFZpc2libGUgPSAweDA0LFxyXG4gICAgICAgIFRvdGFsUmVuZGVyVmlzaWJsZSA9IDB4MDgsXHJcbiAgICAgICAgVG90YWxIaXRUZXN0VmlzaWJsZSA9IDB4MTAsXHJcblxyXG4gICAgICAgIE1lYXN1cmVIaW50ID0gMHg4MDAsXHJcbiAgICAgICAgQXJyYW5nZUhpbnQgPSAweDEwMDAsXHJcbiAgICAgICAgU2l6ZUhpbnQgPSAweDIwMDAsXHJcbiAgICAgICAgSGludHMgPSBNZWFzdXJlSGludCB8IEFycmFuZ2VIaW50IHwgU2l6ZUhpbnRcclxuICAgIH1cclxuICAgIGV4cG9ydCBlbnVtIFNoYXBlRmxhZ3Mge1xyXG4gICAgICAgIE5vbmUgPSAwLFxyXG4gICAgICAgIEVtcHR5ID0gMSxcclxuICAgICAgICBOb3JtYWwgPSAyLFxyXG4gICAgICAgIERlZ2VuZXJhdGUgPSA0LFxyXG4gICAgICAgIFJhZGlpID0gOCxcclxuICAgIH1cclxufSIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJFbnVtcy50c1wiIC8+XHJcblxyXG5tb2R1bGUgbWluZXJ2YSB7XHJcbiAgICBleHBvcnQgdmFyIEZvbnRTdHlsZSA9IHtcclxuICAgICAgICBOb3JtYWw6IFwibm9ybWFsXCIsXHJcbiAgICAgICAgSXRhbGljOiBcIml0YWxpY1wiLFxyXG4gICAgICAgIE9ibGlxdWU6IFwib2JsaXF1ZVwiXHJcbiAgICB9O1xyXG4gICAgZXhwb3J0IHZhciBGb250U3RyZXRjaCA9IHtcclxuICAgICAgICBVbHRyYUNvbmRlbnNlZDogXCJ1bHRyYS1jb25kZW5zZWRcIixcclxuICAgICAgICBFeHRyYUNvbmRlbnNlZDogXCJleHRyYS1jb25kZW5zZWRcIixcclxuICAgICAgICBDb25kZW5zZWQ6IFwiY29uZGVuc2VkXCIsXHJcbiAgICAgICAgU2VtaUNvbmRlbnNlZDogXCJzZW1pLWNvbmRlbnNlZFwiLFxyXG4gICAgICAgIE5vcm1hbDogXCJub3JtYWxcIixcclxuICAgICAgICBTZW1pRXhwYW5kZWQ6IFwic2VtaS1leHBhbmRlZFwiLFxyXG4gICAgICAgIEV4cGFuZGVkOiBcImV4cGFuZGVkXCIsXHJcbiAgICAgICAgRXh0cmFFeHBhbmRlZDogXCJleHRyYS1leHBhbmRlZFwiLFxyXG4gICAgICAgIFVsdHJhRXhwYW5kZWQ6IFwidWx0cmEtZXhwYW5kZWRcIlxyXG4gICAgfTtcclxuXHJcbiAgICAvLy8gUmVmZXJlbmNlc1xyXG4gICAgLy8gIEZvbnQtZmFjZSBnZW5lcmF0b3I6IGh0dHA6Ly93d3cuZmxhdGljb24uY29tL2ZvbnQtZmFjZVxyXG4gICAgLy8gIEhvdyB0byB1c2U6IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTQzOTk0ODQvaG93LXRvLXJlbmRlci1zZWdvZS11aS1mb250LWluLWRpZmZlcmVudC1uYXZpZ2F0b3JzLWFuZC1vc3NcclxuICAgIC8vICBGb250IFNoYXJlOiBodHRwOi8vd3d3LmNzc2ZvbnRzdGFjay5jb20vXHJcblxyXG4gICAgZXhwb3J0IGNsYXNzIEZvbnQge1xyXG4gICAgICAgIHN0YXRpYyBERUZBVUxUX0ZBTUlMWSA9IFwiU2Vnb2UgVUksIEx1Y2lkYSBHcmFuZGUsIFZlcmRhbmFcIjtcclxuICAgICAgICBzdGF0aWMgREVGQVVMVF9TVFJFVENIID0gRm9udFN0cmV0Y2guTm9ybWFsO1xyXG4gICAgICAgIHN0YXRpYyBERUZBVUxUX1NUWUxFID0gRm9udFN0eWxlLk5vcm1hbDtcclxuICAgICAgICBzdGF0aWMgREVGQVVMVF9XRUlHSFQgPSBGb250V2VpZ2h0Lk5vcm1hbDtcclxuICAgICAgICBzdGF0aWMgREVGQVVMVF9TSVpFID0gMTQ7XHJcblxyXG4gICAgICAgIGZhbWlseTogc3RyaW5nID0gRm9udC5ERUZBVUxUX0ZBTUlMWTtcclxuICAgICAgICBzaXplOiBudW1iZXIgPSBGb250LkRFRkFVTFRfU0laRTtcclxuICAgICAgICBzdHJldGNoOiBzdHJpbmcgPSBGb250LkRFRkFVTFRfU1RSRVRDSDtcclxuICAgICAgICBzdHlsZTogc3RyaW5nID0gRm9udC5ERUZBVUxUX1NUWUxFO1xyXG4gICAgICAgIHdlaWdodDogRm9udFdlaWdodCA9IEZvbnQuREVGQVVMVF9XRUlHSFQ7XHJcblxyXG4gICAgICAgIHByaXZhdGUgJCRjYWNoZWRPYmo6IHN0cmluZyA9IG51bGw7XHJcbiAgICAgICAgcHJpdmF0ZSAkJGNhY2hlZEhlaWdodDogbnVtYmVyID0gbnVsbDtcclxuXHJcbiAgICAgICAgc3RhdGljIG1lcmdlSW50byAoZm9udDogRm9udCwgZmFtaWx5OiBzdHJpbmcsIHNpemU6IG51bWJlciwgc3RyZXRjaDogc3RyaW5nLCBzdHlsZTogc3RyaW5nLCB3ZWlnaHQ6IEZvbnRXZWlnaHQpOiBib29sZWFuIHtcclxuICAgICAgICAgICAgdmFyIGNoYW5nZWQgPSBmb250LmZhbWlseSAhPT0gZmFtaWx5XHJcbiAgICAgICAgICAgICAgICB8fCBmb250LnNpemUgIT09IHNpemVcclxuICAgICAgICAgICAgICAgIHx8IGZvbnQuc3RyZXRjaCAhPT0gc3RyZXRjaFxyXG4gICAgICAgICAgICAgICAgfHwgZm9udC5zdHlsZSAhPT0gc3R5bGVcclxuICAgICAgICAgICAgICAgIHx8IGZvbnQud2VpZ2h0ICE9PSB3ZWlnaHQ7XHJcbiAgICAgICAgICAgIGZvbnQuZmFtaWx5ID0gZmFtaWx5O1xyXG4gICAgICAgICAgICBmb250LnNpemUgPSBzaXplO1xyXG4gICAgICAgICAgICBmb250LnN0cmV0Y2ggPSBzdHJldGNoO1xyXG4gICAgICAgICAgICBmb250LnN0eWxlID0gc3R5bGU7XHJcbiAgICAgICAgICAgIGZvbnQud2VpZ2h0ID0gd2VpZ2h0O1xyXG4gICAgICAgICAgICBpZiAoY2hhbmdlZCkge1xyXG4gICAgICAgICAgICAgICAgZm9udC4kJGNhY2hlZE9iaiA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICBmb250LiQkY2FjaGVkSGVpZ2h0ID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gY2hhbmdlZDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRvSHRtbDVPYmplY3QgKCk6IGFueSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiQkY2FjaGVkT2JqID0gdGhpcy4kJGNhY2hlZE9iaiB8fCB0cmFuc2xhdGVGb250KHRoaXMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZ2V0SGVpZ2h0ICgpOiBudW1iZXIge1xyXG4gICAgICAgICAgICBpZiAodGhpcy4kJGNhY2hlZEhlaWdodCA9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAgdGhpcy4kJGNhY2hlZEhlaWdodCA9IGZvbnRIZWlnaHQuZ2V0KHRoaXMpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy4kJGNhY2hlZEhlaWdodDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdldEFzY2VuZGVyICgpOiBudW1iZXIge1xyXG4gICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdldERlc2NlbmRlciAoKTogbnVtYmVyIHtcclxuICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHRyYW5zbGF0ZUZvbnQgKGZvbnQ6IEZvbnQpOiBzdHJpbmcge1xyXG4gICAgICAgIC8vRm9ybWF0OiBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBmb250LXNpemUvbGluZS1oZWlnaHQgZm9udC1mYW1pbHlcclxuICAgICAgICAvL0ZvbnQgU3R5bGVzOiBub3JtYWwsIGl0YWxpYywgb2JsaXF1ZVxyXG4gICAgICAgIC8vRm9udCBWYXJpYW50czogbm9ybWFsLCBzbWFsbC1jYXBzXHJcbiAgICAgICAgLy9Gb250IFdlaWdodHM6IG5vcm1hbCwgYm9sZCwgYm9sZGVyLCBsaWdodGVyLCAxMDAsIDIwMCwgMzAwLCA0MDAsIDUwMCwgNjAwLCA3MDAsIDgwMCwgOTAwXHJcbiAgICAgICAgdmFyIHMgPSBcIlwiO1xyXG4gICAgICAgIHMgKz0gZm9udC5zdHlsZS50b1N0cmluZygpICsgXCIgXCI7XHJcbiAgICAgICAgcyArPSBcIm5vcm1hbCBcIjtcclxuICAgICAgICBzICs9ICg8bnVtYmVyPmZvbnQud2VpZ2h0KS50b1N0cmluZygpICsgXCIgXCI7XHJcbiAgICAgICAgcyArPSBmb250LnNpemUgKyBcInB4IFwiO1xyXG4gICAgICAgIHMgKz0gZm9udC5mYW1pbHkudG9TdHJpbmcoKTtcclxuICAgICAgICByZXR1cm4gcztcclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLmZvbnRIZWlnaHQge1xyXG4gICAgdmFyIGhlaWdodHMgPSBbXTtcclxuXHJcbiAgICBleHBvcnQgdmFyIGNhY2hlID0ge1xyXG4gICAgICAgIGhpdHM6IDAsXHJcbiAgICAgICAgbWlzc2VzOiAwXHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydCBmdW5jdGlvbiBnZXQgKGZvbnQ6IEZvbnQpOiBudW1iZXIge1xyXG4gICAgICAgIHZhciBzZXJpYWwgPSBmb250LnRvSHRtbDVPYmplY3QoKTtcclxuICAgICAgICB2YXIgaGVpZ2h0ID0gaGVpZ2h0c1tzZXJpYWxdO1xyXG4gICAgICAgIGlmIChoZWlnaHQgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBoZWlnaHRzW3NlcmlhbF0gPSBoZWlnaHQgPSBtZWFzdXJlKHNlcmlhbCk7XHJcbiAgICAgICAgICAgIGNhY2hlLm1pc3NlcysrO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNhY2hlLmhpdHMrKztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGhlaWdodDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgdmFyIGR1bW15OiBIVE1MRWxlbWVudDtcclxuXHJcbiAgICBmdW5jdGlvbiBtZWFzdXJlIChzZXJpYWw6IHN0cmluZyk6IG51bWJlciB7XHJcbiAgICAgICAgcGVyZmV4LnRpbWVyLnN0YXJ0KCdNZWFzdXJlRm9udEhlaWdodCcsIHNlcmlhbCk7XHJcbiAgICAgICAgaWYgKCFkdW1teSkge1xyXG4gICAgICAgICAgICBkdW1teSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgICAgIGR1bW15LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFwiSGdcIikpO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGR1bW15KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZHVtbXkuc3R5bGUuZGlzcGxheSA9IFwiXCI7XHJcbiAgICAgICAgZHVtbXkuc3R5bGUuZm9udCA9IHNlcmlhbDtcclxuICAgICAgICB2YXIgcmVzdWx0ID0gZHVtbXkub2Zmc2V0SGVpZ2h0O1xyXG4gICAgICAgIGR1bW15LnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgICAgICBwZXJmZXgudGltZXIuc3RvcCgpO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YSB7XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElCcnVzaCB7XHJcbiAgICAgICAgaXNUcmFuc3BhcmVudCgpOiBib29sZWFuO1xyXG4gICAgICAgIHNldHVwQnJ1c2goY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIHJlZ2lvbjogUmVjdCk7XHJcbiAgICAgICAgdG9IdG1sNU9iamVjdCgpOiBhbnk7XHJcbiAgICB9XHJcblxyXG4gICAgLypcclxuICAgICBmdW5jdGlvbiBpc0JydXNoVHJhbnNwYXJlbnQgKGJydXNoOiBJQnJ1c2gpIHtcclxuICAgICBpZiAoIWJydXNoKVxyXG4gICAgIHJldHVybiB0cnVlO1xyXG4gICAgIGlmIChicnVzaCBpbnN0YW5jZW9mIE1lZGlhLlNvbGlkQ29sb3JCcnVzaClcclxuICAgICByZXR1cm4gKDxNZWRpYS5Tb2xpZENvbG9yQnJ1c2g+YnJ1c2gpLkNvbG9yLkEgPCAxLjA7XHJcbiAgICAgaWYgKGJydXNoIGluc3RhbmNlb2YgTWVkaWEuTGluZWFyR3JhZGllbnRCcnVzaCkge1xyXG4gICAgIHZhciBlbnVtZXJhdG9yID0gKDxNZWRpYS5MaW5lYXJHcmFkaWVudEJydXNoPmJydXNoKS5HcmFkaWVudFN0b3BzLmdldEVudW1lcmF0b3IoKTtcclxuICAgICB3aGlsZSAoZW51bWVyYXRvci5tb3ZlTmV4dCgpKSB7XHJcbiAgICAgaWYgKGVudW1lcmF0b3IuY3VycmVudC5Db2xvci5BIDwgMS4wKVxyXG4gICAgIHJldHVybiB0cnVlO1xyXG4gICAgIH1cclxuICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgfVxyXG4gICAgIHJldHVybiB0cnVlO1xyXG4gICAgIH1cclxuICAgICAqL1xyXG5cclxuICAgIGV4cG9ydCBjbGFzcyBGYWtlQnJ1c2ggaW1wbGVtZW50cyBJQnJ1c2gge1xyXG4gICAgICAgIGNvbnN0cnVjdG9yIChwdWJsaWMgcmF3OiBhbnkpIHtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlzVHJhbnNwYXJlbnQgKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZXR1cEJydXNoIChjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgcmVnaW9uOiBSZWN0KTogYW55IHtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRvSHRtbDVPYmplY3QgKCk6IGFueSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJhdztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YSB7XHJcbiAgICBleHBvcnQgdmFyIE5PX1NJWkVfVVBEQVRFUjogSVNpemVVcGRhdGVyID0ge1xyXG4gICAgICAgIHNldEFjdHVhbFdpZHRoICh2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXRBY3R1YWxIZWlnaHQgKHZhbHVlOiBudW1iZXIpIHtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uU2l6ZUNoYW5nZWQgKG9sZFNpemU6IFNpemUsIG5ld1NpemU6IFNpemUpIHtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSVNpemVVcGRhdGVyIHtcclxuICAgICAgICBzZXRBY3R1YWxXaWR0aCh2YWx1ZTogbnVtYmVyKTtcclxuICAgICAgICBzZXRBY3R1YWxIZWlnaHQodmFsdWU6IG51bWJlcik7XHJcbiAgICAgICAgb25TaXplQ2hhbmdlZChvbGRTaXplOiBTaXplLCBuZXdTaXplOiBTaXplKTtcclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhIHtcclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSVdhbGtlcjxUPiB7XHJcbiAgICAgICAgY3VycmVudDogVDtcclxuICAgICAgICBzdGVwKCk6IGJvb2xlYW47XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJRGVlcFdhbGtlcjxUPiB7XHJcbiAgICAgICAgY3VycmVudDogVDtcclxuICAgICAgICBzdGVwKCk6IGJvb2xlYW47XHJcbiAgICAgICAgc2tpcEJyYW5jaCgpO1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBlbnVtIFdhbGtEaXJlY3Rpb24ge1xyXG4gICAgICAgIEZvcndhcmQgPSAwLFxyXG4gICAgICAgIFJldmVyc2UgPSAxLFxyXG4gICAgICAgIFpGb3J3YXJkID0gMixcclxuICAgICAgICBaUmV2ZXJzZSA9IDNcclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhIHtcclxuICAgIGV4cG9ydCB2YXIgZXJyb3JzID0gW107XHJcblxyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGxheW91dEVycm9yKHRyZWU6IGNvcmUuSVVwZGF0ZXJUcmVlLCBwaXBlZGVmOiBhbnksIG1lc3NhZ2U6IHN0cmluZykge1xyXG4gICAgICAgIGVycm9ycy5wdXNoKHtcclxuICAgICAgICAgICAgdHJlZTogdHJlZSxcclxuICAgICAgICAgICAgcGlwZWRlZjogcGlwZWRlZixcclxuICAgICAgICAgICAgbWVzc2FnZTogbWVzc2FnZVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBmdW5jdGlvbiBjbGVhckVycm9ycygpIHtcclxuICAgICAgICBlcnJvcnMubGVuZ3RoID0gMDtcclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhIHtcbiAgICBleHBvcnQgZnVuY3Rpb24gZ2V0TmF0dXJhbENhbnZhc1NpemUoY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCk6IFNpemUge1xuICAgICAgICB2YXIgem9vbUZhY3RvciA9IG1pbmVydmEuem9vbS5jYWxjKCk7XG4gICAgICAgIHJldHVybiBuZXcgU2l6ZShjYW52YXMub2Zmc2V0V2lkdGggKiB6b29tRmFjdG9yLCBjYW52YXMub2Zmc2V0SGVpZ2h0ICogem9vbUZhY3Rvcik7XG4gICAgfVxufSIsIm1vZHVsZSBtaW5lcnZhIHtcclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSVBvaW50IHtcclxuICAgICAgICB4OiBudW1iZXI7XHJcbiAgICAgICAgeTogbnVtYmVyO1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBjbGFzcyBQb2ludCBpbXBsZW1lbnRzIElQb2ludCB7XHJcbiAgICAgICAgeDogbnVtYmVyO1xyXG4gICAgICAgIHk6IG51bWJlcjtcclxuXHJcbiAgICAgICAgY29uc3RydWN0b3IoeD86IG51bWJlciwgeT86IG51bWJlcikge1xyXG4gICAgICAgICAgICB0aGlzLnggPSB4ID09IG51bGwgPyAwIDogeDtcclxuICAgICAgICAgICAgdGhpcy55ID0geSA9PSBudWxsID8gMCA6IHk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzdGF0aWMgaXNFcXVhbChwMTogSVBvaW50LCBwMjogSVBvaW50KTogYm9vbGVhbiB7XHJcbiAgICAgICAgICAgIHJldHVybiBwMS54ID09PSBwMi54XHJcbiAgICAgICAgICAgICAgICAmJiBwMS55ID09PSBwMi55O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3RhdGljIGNvcHlUbyhzcmM6IElQb2ludCwgZGVzdDogSVBvaW50KSB7XHJcbiAgICAgICAgICAgIGRlc3QueCA9IHNyYy54O1xyXG4gICAgICAgICAgICBkZXN0LnkgPSBzcmMueTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJpbnRlcmZhY2UgSVZlY3RvcjJTdGF0aWMge1xyXG4gICAgY3JlYXRlKHg6IG51bWJlciwgeTogbnVtYmVyKTogbnVtYmVyW107XHJcbiAgICBpbml0KHg6IG51bWJlciwgeTogbnVtYmVyLCBkZXN0PzogbnVtYmVyW10pOiBudW1iZXJbXTtcclxufVxyXG5tb2R1bGUgbWluZXJ2YSB7XHJcbiAgICB2YXIgY3JlYXRlVHlwZWRBcnJheTogKGxlbmd0aDogbnVtYmVyKSA9PiBudW1iZXJbXTtcclxuXHJcbiAgICBpZiAodHlwZW9mIEZsb2F0MzJBcnJheSAhPT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgIGNyZWF0ZVR5cGVkQXJyYXkgPSBmdW5jdGlvbiAobGVuZ3RoOiBudW1iZXIpOiBudW1iZXJbXSB7XHJcbiAgICAgICAgICAgIHJldHVybiA8bnVtYmVyW10+PGFueT5uZXcgRmxvYXQzMkFycmF5KGxlbmd0aCk7XHJcbiAgICAgICAgfTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY3JlYXRlVHlwZWRBcnJheSA9IGZ1bmN0aW9uIChsZW5ndGg6IG51bWJlcik6IG51bWJlcltdIHtcclxuICAgICAgICAgICAgcmV0dXJuIDxudW1iZXJbXT5uZXcgQXJyYXkobGVuZ3RoKTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCB2YXIgdmVjMjogSVZlY3RvcjJTdGF0aWMgPSB7XHJcbiAgICAgICAgY3JlYXRlICh4OiBudW1iZXIsIHk6IG51bWJlcik6IG51bWJlcltdIHtcclxuICAgICAgICAgICAgdmFyIGRlc3QgPSBjcmVhdGVUeXBlZEFycmF5KDIpO1xyXG4gICAgICAgICAgICBkZXN0WzBdID0geDtcclxuICAgICAgICAgICAgZGVzdFsxXSA9IHk7XHJcbiAgICAgICAgICAgIHJldHVybiBkZXN0O1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaW5pdCAoeDogbnVtYmVyLCB5OiBudW1iZXIsIGRlc3Q/OiBudW1iZXJbXSk6IG51bWJlcltdIHtcclxuICAgICAgICAgICAgaWYgKCFkZXN0KSBkZXN0ID0gY3JlYXRlVHlwZWRBcnJheSgyKTtcclxuICAgICAgICAgICAgZGVzdFswXSA9IHg7XHJcbiAgICAgICAgICAgIGRlc3RbMV0gPSB5O1xyXG4gICAgICAgICAgICByZXR1cm4gZGVzdDtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XHJcblxyXG52YXIgdmVjMiA9IG1pbmVydmEudmVjMjsiLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwibWF0L3ZlYzJcIiAvPlxyXG5cclxubW9kdWxlIG1pbmVydmEge1xyXG4gICAgZXhwb3J0IGVudW0gUmVjdE92ZXJsYXAge1xyXG4gICAgICAgIE91dCxcclxuICAgICAgICBJbixcclxuICAgICAgICBQYXJ0LFxyXG4gICAgfVxyXG5cclxuICAgIHZhciBwMSA9IHZlYzIuY3JlYXRlKDAsIDApO1xyXG4gICAgdmFyIHAyID0gdmVjMi5jcmVhdGUoMCwgMCk7XHJcbiAgICB2YXIgcDMgPSB2ZWMyLmNyZWF0ZSgwLCAwKTtcclxuICAgIHZhciBwNCA9IHZlYzIuY3JlYXRlKDAsIDApO1xyXG5cclxuICAgIGV4cG9ydCBjbGFzcyBSZWN0IGltcGxlbWVudHMgSVBvaW50LCBJU2l6ZSB7XHJcbiAgICAgICAgeDogbnVtYmVyO1xyXG4gICAgICAgIHk6IG51bWJlcjtcclxuICAgICAgICB3aWR0aDogbnVtYmVyO1xyXG4gICAgICAgIGhlaWdodDogbnVtYmVyO1xyXG5cclxuICAgICAgICBjb25zdHJ1Y3RvciAoeD86IG51bWJlciwgeT86IG51bWJlciwgd2lkdGg/OiBudW1iZXIsIGhlaWdodD86IG51bWJlcikge1xyXG4gICAgICAgICAgICB0aGlzLnggPSB4ID09IG51bGwgPyAwIDogeDtcclxuICAgICAgICAgICAgdGhpcy55ID0geSA9PSBudWxsID8gMCA6IHk7XHJcbiAgICAgICAgICAgIHRoaXMud2lkdGggPSB3aWR0aCA9PSBudWxsID8gMCA6IHdpZHRoO1xyXG4gICAgICAgICAgICB0aGlzLmhlaWdodCA9IGhlaWdodCA9PSBudWxsID8gMCA6IGhlaWdodDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN0YXRpYyBjbGVhciAocmVjdDogUmVjdCkge1xyXG4gICAgICAgICAgICByZWN0LnggPSByZWN0LnkgPSByZWN0LndpZHRoID0gcmVjdC5oZWlnaHQgPSAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3RhdGljIGdldEJvdHRvbSAocmVjdDogUmVjdCk6IG51bWJlciB7XHJcbiAgICAgICAgICAgIHJldHVybiByZWN0LnkgKyByZWN0LmhlaWdodDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN0YXRpYyBnZXRSaWdodCAocmVjdDogUmVjdCk6IG51bWJlciB7XHJcbiAgICAgICAgICAgIHJldHVybiByZWN0LnggKyByZWN0LndpZHRoO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3RhdGljIGlzRXF1YWwgKHJlY3QxOiBSZWN0LCByZWN0MjogUmVjdCk6IGJvb2xlYW4ge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVjdDEueCA9PT0gcmVjdDIueFxyXG4gICAgICAgICAgICAgICAgJiYgcmVjdDEueSA9PT0gcmVjdDIueVxyXG4gICAgICAgICAgICAgICAgJiYgcmVjdDEud2lkdGggPT09IHJlY3QyLndpZHRoXHJcbiAgICAgICAgICAgICAgICAmJiByZWN0MS5oZWlnaHQgPT09IHJlY3QyLmhlaWdodDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN0YXRpYyBpc0VtcHR5IChzcmM6IFJlY3QpOiBib29sZWFuIHtcclxuICAgICAgICAgICAgcmV0dXJuIHNyYy53aWR0aCA9PT0gMFxyXG4gICAgICAgICAgICAgICAgfHwgc3JjLmhlaWdodCA9PT0gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN0YXRpYyBjb3B5VG8gKHNyYzogUmVjdCwgZGVzdDogUmVjdCkge1xyXG4gICAgICAgICAgICBkZXN0LnggPSBzcmMueDtcclxuICAgICAgICAgICAgZGVzdC55ID0gc3JjLnk7XHJcbiAgICAgICAgICAgIGRlc3Qud2lkdGggPSBzcmMud2lkdGg7XHJcbiAgICAgICAgICAgIGRlc3QuaGVpZ2h0ID0gc3JjLmhlaWdodDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN0YXRpYyByb3VuZE91dCAoZGVzdDogUmVjdCkge1xyXG4gICAgICAgICAgICB2YXIgeCA9IE1hdGguZmxvb3IoZGVzdC54KTtcclxuICAgICAgICAgICAgdmFyIHkgPSBNYXRoLmZsb29yKGRlc3QueSk7XHJcbiAgICAgICAgICAgIGRlc3Qud2lkdGggPSBNYXRoLmNlaWwoZGVzdC54ICsgZGVzdC53aWR0aCkgLSB4O1xyXG4gICAgICAgICAgICBkZXN0LmhlaWdodCA9IE1hdGguY2VpbChkZXN0LnkgKyBkZXN0LmhlaWdodCkgLSB5O1xyXG4gICAgICAgICAgICBkZXN0LnggPSB4O1xyXG4gICAgICAgICAgICBkZXN0LnkgPSB5O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3RhdGljIHJvdW5kSW4gKGRlc3Q6IFJlY3QpIHtcclxuICAgICAgICAgICAgdmFyIHggPSBNYXRoLmNlaWwoZGVzdC54KTtcclxuICAgICAgICAgICAgdmFyIHkgPSBNYXRoLmNlaWwoZGVzdC55KTtcclxuICAgICAgICAgICAgZGVzdC53aWR0aCA9IE1hdGguZmxvb3IoZGVzdC54ICsgZGVzdC53aWR0aCkgLSBNYXRoLmNlaWwoZGVzdC54KTtcclxuICAgICAgICAgICAgZGVzdC5oZWlnaHQgPSBNYXRoLmZsb29yKGRlc3QueSArIGRlc3QuaGVpZ2h0KSAtIE1hdGguY2VpbChkZXN0LnkpO1xyXG4gICAgICAgICAgICBkZXN0LnggPSB4O1xyXG4gICAgICAgICAgICBkZXN0LnkgPSB5O1xyXG4gICAgICAgICAgICByZXR1cm4gZGVzdDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN0YXRpYyBpbnRlcnNlY3Rpb24gKGRlc3Q6IFJlY3QsIHJlY3QyOiBSZWN0KSB7XHJcbiAgICAgICAgICAgIHZhciB4ID0gTWF0aC5tYXgoZGVzdC54LCByZWN0Mi54KTtcclxuICAgICAgICAgICAgdmFyIHkgPSBNYXRoLm1heChkZXN0LnksIHJlY3QyLnkpO1xyXG4gICAgICAgICAgICBkZXN0LndpZHRoID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oZGVzdC54ICsgZGVzdC53aWR0aCwgcmVjdDIueCArIHJlY3QyLndpZHRoKSAtIHgpO1xyXG4gICAgICAgICAgICBkZXN0LmhlaWdodCA9IE1hdGgubWF4KDAsIE1hdGgubWluKGRlc3QueSArIGRlc3QuaGVpZ2h0LCByZWN0Mi55ICsgcmVjdDIuaGVpZ2h0KSAtIHkpO1xyXG4gICAgICAgICAgICBkZXN0LnggPSB4O1xyXG4gICAgICAgICAgICBkZXN0LnkgPSB5O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3RhdGljIHVuaW9uIChkZXN0OiBSZWN0LCByZWN0MjogUmVjdCkge1xyXG4gICAgICAgICAgICBpZiAocmVjdDIud2lkdGggPD0gMCB8fCByZWN0Mi5oZWlnaHQgPD0gMClcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgaWYgKGRlc3Qud2lkdGggPD0gMCB8fCBkZXN0LmhlaWdodCA8PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBSZWN0LmNvcHlUbyhyZWN0MiwgZGVzdCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciB4ID0gTWF0aC5taW4oZGVzdC54LCByZWN0Mi54KTtcclxuICAgICAgICAgICAgdmFyIHkgPSBNYXRoLm1pbihkZXN0LnksIHJlY3QyLnkpO1xyXG4gICAgICAgICAgICBkZXN0LndpZHRoID0gTWF0aC5tYXgoZGVzdC54ICsgZGVzdC53aWR0aCwgcmVjdDIueCArIHJlY3QyLndpZHRoKSAtIHg7XHJcbiAgICAgICAgICAgIGRlc3QuaGVpZ2h0ID0gTWF0aC5tYXgoZGVzdC55ICsgZGVzdC5oZWlnaHQsIHJlY3QyLnkgKyByZWN0Mi5oZWlnaHQpIC0geTtcclxuICAgICAgICAgICAgZGVzdC54ID0geDtcclxuICAgICAgICAgICAgZGVzdC55ID0geTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN0YXRpYyBpc0NvbnRhaW5lZEluIChzcmM6IFJlY3QsIHRlc3Q6IFJlY3QpIHtcclxuICAgICAgICAgICAgdmFyIHNsID0gc3JjLng7XHJcbiAgICAgICAgICAgIHZhciBzdCA9IHNyYy55O1xyXG4gICAgICAgICAgICB2YXIgc3IgPSBzcmMueCArIHNyYy53aWR0aDtcclxuICAgICAgICAgICAgdmFyIHNiID0gc3JjLnkgKyBzcmMuaGVpZ2h0O1xyXG5cclxuICAgICAgICAgICAgdmFyIHRsID0gdGVzdC54O1xyXG4gICAgICAgICAgICB2YXIgdHQgPSB0ZXN0Lnk7XHJcbiAgICAgICAgICAgIHZhciB0ciA9IHRlc3QueCArIHRlc3Qud2lkdGg7XHJcbiAgICAgICAgICAgIHZhciB0YiA9IHRlc3QueSArIHRlc3QuaGVpZ2h0O1xyXG5cclxuICAgICAgICAgICAgaWYgKHNsIDwgdGwgfHwgc3QgPCB0dCB8fCBzbCA+IHRyIHx8IHN0ID4gdGIpIC8vc3JjIHRvcC1sZWZ0IGlzIG91dHNpZGUgdGVzdFxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAoc3IgPCB0bCB8fCBzYiA8IHR0IHx8IHNyID4gdHIgfHwgc2IgPiB0YikgLy9zcmMgYm90dG9tLXJpZ2h0IGlzIG91dHNpZGUgdGVzdFxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN0YXRpYyBjb250YWluc1BvaW50IChyZWN0MTogUmVjdCwgcDogUG9pbnQpOiBib29sZWFuIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlY3QxLnggPD0gcC54XHJcbiAgICAgICAgICAgICAgICAmJiByZWN0MS55IDw9IHAueVxyXG4gICAgICAgICAgICAgICAgJiYgKHJlY3QxLnggKyByZWN0MS53aWR0aCkgPj0gcC54XHJcbiAgICAgICAgICAgICAgICAmJiAocmVjdDEueSArIHJlY3QxLmhlaWdodCkgPj0gcC55O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3RhdGljIGV4dGVuZFRvIChkZXN0OiBSZWN0LCB4OiBudW1iZXIsIHk6IG51bWJlcikge1xyXG4gICAgICAgICAgICB2YXIgcnggPSBkZXN0Lng7XHJcbiAgICAgICAgICAgIHZhciByeSA9IGRlc3QueTtcclxuICAgICAgICAgICAgdmFyIHJ3ID0gZGVzdC53aWR0aDtcclxuICAgICAgICAgICAgdmFyIHJoID0gZGVzdC5oZWlnaHQ7XHJcblxyXG4gICAgICAgICAgICBpZiAoeCA8IHJ4IHx8IHggPiAocnggKyBydykpXHJcbiAgICAgICAgICAgICAgICBydyA9IE1hdGgubWF4KE1hdGguYWJzKHggLSByeCksIE1hdGguYWJzKHggLSByeCAtIHJ3KSk7XHJcbiAgICAgICAgICAgIGlmICh5IDwgcnkgfHwgeSA+IChyeSArIHJoKSlcclxuICAgICAgICAgICAgICAgIHJoID0gTWF0aC5tYXgoTWF0aC5hYnMoeSAtIHJ5KSwgTWF0aC5hYnMoeSAtIHJ5IC0gcmgpKTtcclxuXHJcbiAgICAgICAgICAgIGRlc3QueCA9IE1hdGgubWluKHJ4LCB4KTtcclxuICAgICAgICAgICAgZGVzdC55ID0gTWF0aC5taW4ocnksIHkpO1xyXG4gICAgICAgICAgICBkZXN0LndpZHRoID0gcnc7XHJcbiAgICAgICAgICAgIGRlc3QuaGVpZ2h0ID0gcmg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzdGF0aWMgZ3JvdyAoZGVzdDogUmVjdCwgbGVmdDogbnVtYmVyLCB0b3A6IG51bWJlciwgcmlnaHQ6IG51bWJlciwgYm90dG9tOiBudW1iZXIpIHtcclxuICAgICAgICAgICAgZGVzdC54IC09IGxlZnQ7XHJcbiAgICAgICAgICAgIGRlc3QueSAtPSB0b3A7XHJcbiAgICAgICAgICAgIGRlc3Qud2lkdGggKz0gbGVmdCArIHJpZ2h0O1xyXG4gICAgICAgICAgICBkZXN0LmhlaWdodCArPSB0b3AgKyBib3R0b207XHJcbiAgICAgICAgICAgIGlmIChkZXN0LndpZHRoIDwgMClcclxuICAgICAgICAgICAgICAgIGRlc3Qud2lkdGggPSAwO1xyXG4gICAgICAgICAgICBpZiAoZGVzdC5oZWlnaHQgPCAwKVxyXG4gICAgICAgICAgICAgICAgZGVzdC5oZWlnaHQgPSAwO1xyXG4gICAgICAgICAgICByZXR1cm4gZGVzdDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN0YXRpYyBzaHJpbmsgKGRlc3Q6IFJlY3QsIGxlZnQ6IG51bWJlciwgdG9wOiBudW1iZXIsIHJpZ2h0OiBudW1iZXIsIGJvdHRvbTogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgIGRlc3QueCArPSBsZWZ0O1xyXG4gICAgICAgICAgICBkZXN0LnkgKz0gdG9wO1xyXG4gICAgICAgICAgICBkZXN0LndpZHRoIC09IGxlZnQgKyByaWdodDtcclxuICAgICAgICAgICAgZGVzdC5oZWlnaHQgLT0gdG9wICsgYm90dG9tO1xyXG4gICAgICAgICAgICBpZiAoZGVzdC53aWR0aCA8IDApXHJcbiAgICAgICAgICAgICAgICBkZXN0LndpZHRoID0gMDtcclxuICAgICAgICAgICAgaWYgKGRlc3QuaGVpZ2h0IDwgMClcclxuICAgICAgICAgICAgICAgIGRlc3QuaGVpZ2h0ID0gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN0YXRpYyByZWN0SW4gKHJlY3QxOiBSZWN0LCByZWN0MjogUmVjdCkge1xyXG4gICAgICAgICAgICAvL1RPRE86IEltcGxlbWVudCB3aXRob3V0IGNyZWF0aW5nIFJlY3RcclxuICAgICAgICAgICAgdmFyIGNvcHkgPSBuZXcgUmVjdCgpO1xyXG4gICAgICAgICAgICBSZWN0LmNvcHlUbyhyZWN0MSwgY29weSk7XHJcbiAgICAgICAgICAgIFJlY3QuaW50ZXJzZWN0aW9uKGNvcHksIHJlY3QyKTtcclxuICAgICAgICAgICAgaWYgKFJlY3QuaXNFbXB0eShjb3B5KSlcclxuICAgICAgICAgICAgICAgIHJldHVybiBSZWN0T3ZlcmxhcC5PdXQ7XHJcbiAgICAgICAgICAgIGlmIChSZWN0LmlzRXF1YWwoY29weSwgcmVjdDIpKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFJlY3RPdmVybGFwLkluO1xyXG4gICAgICAgICAgICByZXR1cm4gUmVjdE92ZXJsYXAuUGFydDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN0YXRpYyB0cmFuc2Zvcm0gKGRlc3Q6IFJlY3QsIG1hdDogbnVtYmVyW10pIHtcclxuICAgICAgICAgICAgaWYgKCFtYXQpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZGVzdDtcclxuICAgICAgICAgICAgdmFyIHggPSBkZXN0Lng7XHJcbiAgICAgICAgICAgIHZhciB5ID0gZGVzdC55O1xyXG4gICAgICAgICAgICB2YXIgd2lkdGggPSBkZXN0LndpZHRoO1xyXG4gICAgICAgICAgICB2YXIgaGVpZ2h0ID0gZGVzdC5oZWlnaHQ7XHJcblxyXG4gICAgICAgICAgICB2ZWMyLmluaXQoeCwgeSwgcDEpO1xyXG4gICAgICAgICAgICB2ZWMyLmluaXQoeCArIHdpZHRoLCB5LCBwMik7XHJcbiAgICAgICAgICAgIHZlYzIuaW5pdCh4ICsgd2lkdGgsIHkgKyBoZWlnaHQsIHAzKTtcclxuICAgICAgICAgICAgdmVjMi5pbml0KHgsIHkgKyBoZWlnaHQsIHA0KTtcclxuXHJcbiAgICAgICAgICAgIG1hdDMudHJhbnNmb3JtVmVjMihtYXQsIHAxKTtcclxuICAgICAgICAgICAgbWF0My50cmFuc2Zvcm1WZWMyKG1hdCwgcDIpO1xyXG4gICAgICAgICAgICBtYXQzLnRyYW5zZm9ybVZlYzIobWF0LCBwMyk7XHJcbiAgICAgICAgICAgIG1hdDMudHJhbnNmb3JtVmVjMihtYXQsIHA0KTtcclxuXHJcbiAgICAgICAgICAgIHZhciBsID0gTWF0aC5taW4ocDFbMF0sIHAyWzBdLCBwM1swXSwgcDRbMF0pO1xyXG4gICAgICAgICAgICB2YXIgdCA9IE1hdGgubWluKHAxWzFdLCBwMlsxXSwgcDNbMV0sIHA0WzFdKTtcclxuICAgICAgICAgICAgdmFyIHIgPSBNYXRoLm1heChwMVswXSwgcDJbMF0sIHAzWzBdLCBwNFswXSk7XHJcbiAgICAgICAgICAgIHZhciBiID0gTWF0aC5tYXgocDFbMV0sIHAyWzFdLCBwM1sxXSwgcDRbMV0pO1xyXG5cclxuICAgICAgICAgICAgZGVzdC54ID0gbDtcclxuICAgICAgICAgICAgZGVzdC55ID0gdDtcclxuICAgICAgICAgICAgZGVzdC53aWR0aCA9IHIgLSBsO1xyXG4gICAgICAgICAgICBkZXN0LmhlaWdodCA9IGIgLSB0O1xyXG4gICAgICAgICAgICByZXR1cm4gZGVzdDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN0YXRpYyB0cmFuc2Zvcm00IChkZXN0OiBSZWN0LCBwcm9qZWN0aW9uOiBudW1iZXJbXSkge1xyXG4gICAgICAgICAgICAvL1NlZSBtYXQvdHJhbnNmb3JtNC50c1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhIHtcclxuICAgIGV4cG9ydCBmdW5jdGlvbiBzaW5nbGV0b24gKHR5cGU6IEZ1bmN0aW9uKTogYW55IHtcclxuICAgICAgICB2YXIgeCA9IDxhbnk+dHlwZTtcclxuICAgICAgICBpZiAoIXguJCRpbnN0YW5jZSlcclxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHgsICckJGluc3RhbmNlJywge3ZhbHVlOiBuZXcgeCgpLCBlbnVtZXJhYmxlOiBmYWxzZX0pO1xyXG4gICAgICAgIHJldHVybiB4LiQkaW5zdGFuY2U7XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YSB7XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElTaXplIHtcclxuICAgICAgICB3aWR0aDogbnVtYmVyO1xyXG4gICAgICAgIGhlaWdodDogbnVtYmVyO1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBjbGFzcyBTaXplIGltcGxlbWVudHMgSVNpemUge1xyXG4gICAgICAgIHdpZHRoOiBudW1iZXI7XHJcbiAgICAgICAgaGVpZ2h0OiBudW1iZXI7XHJcblxyXG4gICAgICAgIGNvbnN0cnVjdG9yICh3aWR0aD86IG51bWJlciwgaGVpZ2h0PzogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMud2lkdGggPSB3aWR0aCA9PSBudWxsID8gMCA6IHdpZHRoO1xyXG4gICAgICAgICAgICB0aGlzLmhlaWdodCA9IGhlaWdodCA9PSBudWxsID8gMCA6IGhlaWdodDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN0YXRpYyBjb3B5VG8gKHNyYzogSVNpemUsIGRlc3Q6IElTaXplKSB7XHJcbiAgICAgICAgICAgIGRlc3Qud2lkdGggPSBzcmMud2lkdGg7XHJcbiAgICAgICAgICAgIGRlc3QuaGVpZ2h0ID0gc3JjLmhlaWdodDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN0YXRpYyBpc0VxdWFsIChzaXplMTogSVNpemUsIHNpemUyOiBJU2l6ZSk6IGJvb2xlYW4ge1xyXG4gICAgICAgICAgICByZXR1cm4gc2l6ZTEud2lkdGggPT09IHNpemUyLndpZHRoXHJcbiAgICAgICAgICAgICAgICAmJiBzaXplMS5oZWlnaHQgPT09IHNpemUyLmhlaWdodDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN0YXRpYyBpc0VtcHR5IChzaXplOiBTaXplKTogYm9vbGVhbiB7XHJcbiAgICAgICAgICAgIHJldHVybiBzaXplLndpZHRoID09PSAwXHJcbiAgICAgICAgICAgICAgICB8fCBzaXplLmhlaWdodCA9PT0gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN0YXRpYyBtaW4gKGRlc3Q6IElTaXplLCBzaXplMjogSVNpemUpIHtcclxuICAgICAgICAgICAgZGVzdC53aWR0aCA9IE1hdGgubWluKGRlc3Qud2lkdGgsIHNpemUyLndpZHRoKTtcclxuICAgICAgICAgICAgZGVzdC5oZWlnaHQgPSBNYXRoLm1pbihkZXN0LmhlaWdodCwgc2l6ZTIuaGVpZ2h0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN0YXRpYyBpc1VuZGVmIChzaXplOiBJU2l6ZSk6IGJvb2xlYW4ge1xyXG4gICAgICAgICAgICByZXR1cm4gaXNOYU4oc2l6ZS53aWR0aCkgJiYgaXNOYU4oc2l6ZS5oZWlnaHQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3RhdGljIHVuZGVmIChzaXplOiBJU2l6ZSkge1xyXG4gICAgICAgICAgICBzaXplLndpZHRoID0gTmFOO1xyXG4gICAgICAgICAgICBzaXplLmhlaWdodCA9IE5hTjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YSB7XHJcbiAgICBleHBvcnQgY2xhc3MgVGhpY2tuZXNzIHtcclxuICAgICAgICBsZWZ0OiBudW1iZXI7XHJcbiAgICAgICAgdG9wOiBudW1iZXI7XHJcbiAgICAgICAgcmlnaHQ6IG51bWJlcjtcclxuICAgICAgICBib3R0b206IG51bWJlcjtcclxuXHJcbiAgICAgICAgY29uc3RydWN0b3IgKGxlZnQ/OiBudW1iZXIsIHRvcD86IG51bWJlciwgcmlnaHQ/OiBudW1iZXIsIGJvdHRvbT86IG51bWJlcikge1xyXG4gICAgICAgICAgICB0aGlzLmxlZnQgPSBsZWZ0ID09IG51bGwgPyAwIDogbGVmdDtcclxuICAgICAgICAgICAgdGhpcy50b3AgPSB0b3AgPT0gbnVsbCA/IDAgOiB0b3A7XHJcbiAgICAgICAgICAgIHRoaXMucmlnaHQgPSByaWdodCA9PSBudWxsID8gMCA6IHJpZ2h0O1xyXG4gICAgICAgICAgICB0aGlzLmJvdHRvbSA9IGJvdHRvbSA9PSBudWxsID8gMCA6IGJvdHRvbTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN0YXRpYyBhZGQgKGRlc3Q6IFRoaWNrbmVzcywgdDI6IFRoaWNrbmVzcykge1xyXG4gICAgICAgICAgICBkZXN0LmxlZnQgKz0gdDIubGVmdDtcclxuICAgICAgICAgICAgZGVzdC50b3AgKz0gdDIudG9wO1xyXG4gICAgICAgICAgICBkZXN0LnJpZ2h0ICs9IHQyLnJpZ2h0O1xyXG4gICAgICAgICAgICBkZXN0LmJvdHRvbSArPSB0Mi5ib3R0b207XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzdGF0aWMgY29weVRvICh0aGlja25lc3M6IFRoaWNrbmVzcywgZGVzdDogVGhpY2tuZXNzKSB7XHJcbiAgICAgICAgICAgIGRlc3QubGVmdCA9IHRoaWNrbmVzcy5sZWZ0O1xyXG4gICAgICAgICAgICBkZXN0LnRvcCA9IHRoaWNrbmVzcy50b3A7XHJcbiAgICAgICAgICAgIGRlc3QucmlnaHQgPSB0aGlja25lc3MucmlnaHQ7XHJcbiAgICAgICAgICAgIGRlc3QuYm90dG9tID0gdGhpY2tuZXNzLmJvdHRvbTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN0YXRpYyBpc0VtcHR5ICh0aGlja25lc3M6IFRoaWNrbmVzcyk6IGJvb2xlYW4ge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpY2tuZXNzLmxlZnQgPT09IDAgJiYgdGhpY2tuZXNzLnRvcCA9PT0gMCAmJiB0aGlja25lc3MucmlnaHQgPT09IDAgJiYgdGhpY2tuZXNzLmJvdHRvbSA9PT0gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN0YXRpYyBpc0JhbGFuY2VkICh0aGlja25lc3M6IFRoaWNrbmVzcyk6IGJvb2xlYW4ge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpY2tuZXNzLmxlZnQgPT09IHRoaWNrbmVzcy50b3BcclxuICAgICAgICAgICAgICAgICYmIHRoaWNrbmVzcy5sZWZ0ID09PSB0aGlja25lc3MucmlnaHRcclxuICAgICAgICAgICAgICAgICYmIHRoaWNrbmVzcy5sZWZ0ID09PSB0aGlja25lc3MuYm90dG9tO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3RhdGljIHNocmlua1NpemUgKHRoaWNrbmVzczogVGhpY2tuZXNzLCBkZXN0OiBTaXplKSB7XHJcbiAgICAgICAgICAgIHZhciB3ID0gZGVzdC53aWR0aDtcclxuICAgICAgICAgICAgdmFyIGggPSBkZXN0LmhlaWdodDtcclxuICAgICAgICAgICAgaWYgKHcgIT0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZKVxyXG4gICAgICAgICAgICAgICAgdyAtPSB0aGlja25lc3MubGVmdCArIHRoaWNrbmVzcy5yaWdodDtcclxuICAgICAgICAgICAgaWYgKGggIT0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZKVxyXG4gICAgICAgICAgICAgICAgaCAtPSB0aGlja25lc3MudG9wICsgdGhpY2tuZXNzLmJvdHRvbTtcclxuICAgICAgICAgICAgZGVzdC53aWR0aCA9IHcgPiAwID8gdyA6IDA7XHJcbiAgICAgICAgICAgIGRlc3QuaGVpZ2h0ID0gaCA+IDAgPyBoIDogMDtcclxuICAgICAgICAgICAgcmV0dXJuIGRlc3Q7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzdGF0aWMgc2hyaW5rUmVjdCAodGhpY2tuZXNzOiBUaGlja25lc3MsIGRlc3Q6IFJlY3QpIHtcclxuICAgICAgICAgICAgZGVzdC54ICs9IHRoaWNrbmVzcy5sZWZ0O1xyXG4gICAgICAgICAgICBkZXN0LnkgKz0gdGhpY2tuZXNzLnRvcDtcclxuICAgICAgICAgICAgZGVzdC53aWR0aCAtPSB0aGlja25lc3MubGVmdCArIHRoaWNrbmVzcy5yaWdodDtcclxuICAgICAgICAgICAgZGVzdC5oZWlnaHQgLT0gdGhpY2tuZXNzLnRvcCArIHRoaWNrbmVzcy5ib3R0b207XHJcbiAgICAgICAgICAgIGlmIChkZXN0LndpZHRoIDwgMClcclxuICAgICAgICAgICAgICAgIGRlc3Qud2lkdGggPSAwO1xyXG4gICAgICAgICAgICBpZiAoZGVzdC5oZWlnaHQgPCAwKVxyXG4gICAgICAgICAgICAgICAgZGVzdC5oZWlnaHQgPSAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3RhdGljIHNocmlua0Nvcm5lclJhZGl1cyAodGhpY2tuZXNzOiBUaGlja25lc3MsIGRlc3Q6IElDb3JuZXJSYWRpdXMpIHtcclxuICAgICAgICAgICAgZGVzdC50b3BMZWZ0ID0gTWF0aC5tYXgoZGVzdC50b3BMZWZ0IC0gTWF0aC5tYXgodGhpY2tuZXNzLmxlZnQsIHRoaWNrbmVzcy50b3ApICogMC41LCAwKTtcclxuICAgICAgICAgICAgZGVzdC50b3BSaWdodCA9IE1hdGgubWF4KGRlc3QudG9wUmlnaHQgLSBNYXRoLm1heCh0aGlja25lc3MucmlnaHQsIHRoaWNrbmVzcy50b3ApICogMC41LCAwKTtcclxuICAgICAgICAgICAgZGVzdC5ib3R0b21SaWdodCA9IE1hdGgubWF4KGRlc3QuYm90dG9tUmlnaHQgLSBNYXRoLm1heCh0aGlja25lc3MucmlnaHQsIHRoaWNrbmVzcy5ib3R0b20pICogMC41LCAwKTtcclxuICAgICAgICAgICAgZGVzdC5ib3R0b21MZWZ0ID0gTWF0aC5tYXgoZGVzdC5ib3R0b21MZWZ0IC0gTWF0aC5tYXgodGhpY2tuZXNzLmxlZnQsIHRoaWNrbmVzcy5ib3R0b20pICogMC41LCAwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN0YXRpYyBncm93U2l6ZSAodGhpY2tuZXNzOiBUaGlja25lc3MsIGRlc3Q6IFNpemUpIHtcclxuICAgICAgICAgICAgdmFyIHcgPSBkZXN0LndpZHRoO1xyXG4gICAgICAgICAgICB2YXIgaCA9IGRlc3QuaGVpZ2h0O1xyXG4gICAgICAgICAgICBpZiAodyAhPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkpXHJcbiAgICAgICAgICAgICAgICB3ICs9IHRoaWNrbmVzcy5sZWZ0ICsgdGhpY2tuZXNzLnJpZ2h0O1xyXG4gICAgICAgICAgICBpZiAoaCAhPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkpXHJcbiAgICAgICAgICAgICAgICBoICs9IHRoaWNrbmVzcy50b3AgKyB0aGlja25lc3MuYm90dG9tO1xyXG4gICAgICAgICAgICBkZXN0LndpZHRoID0gdyA+IDAgPyB3IDogMDtcclxuICAgICAgICAgICAgZGVzdC5oZWlnaHQgPSBoID4gMCA/IGggOiAwO1xyXG4gICAgICAgICAgICByZXR1cm4gZGVzdDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN0YXRpYyBncm93UmVjdCAodGhpY2tuZXNzOiBUaGlja25lc3MsIGRlc3Q6IFJlY3QpIHtcclxuICAgICAgICAgICAgZGVzdC54IC09IHRoaWNrbmVzcy5sZWZ0O1xyXG4gICAgICAgICAgICBkZXN0LnkgLT0gdGhpY2tuZXNzLnRvcDtcclxuICAgICAgICAgICAgZGVzdC53aWR0aCArPSB0aGlja25lc3MubGVmdCArIHRoaWNrbmVzcy5yaWdodDtcclxuICAgICAgICAgICAgZGVzdC5oZWlnaHQgKz0gdGhpY2tuZXNzLnRvcCArIHRoaWNrbmVzcy5ib3R0b207XHJcbiAgICAgICAgICAgIGlmIChkZXN0LndpZHRoIDwgMClcclxuICAgICAgICAgICAgICAgIGRlc3Qud2lkdGggPSAwO1xyXG4gICAgICAgICAgICBpZiAoZGVzdC5oZWlnaHQgPCAwKVxyXG4gICAgICAgICAgICAgICAgZGVzdC5oZWlnaHQgPSAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3RhdGljIGdyb3dDb3JuZXJSYWRpdXMgKHRoaWNrbmVzczogVGhpY2tuZXNzLCBkZXN0OiBJQ29ybmVyUmFkaXVzKSB7XHJcbiAgICAgICAgICAgIGRlc3QudG9wTGVmdCA9IGRlc3QudG9wTGVmdCA/IE1hdGgubWF4KGRlc3QudG9wTGVmdCArIE1hdGgubWF4KHRoaWNrbmVzcy5sZWZ0LCB0aGlja25lc3MudG9wKSAqIDAuNSwgMCkgOiAwO1xyXG4gICAgICAgICAgICBkZXN0LnRvcFJpZ2h0ID0gZGVzdC50b3BSaWdodCA/IE1hdGgubWF4KGRlc3QudG9wUmlnaHQgKyBNYXRoLm1heCh0aGlja25lc3MucmlnaHQsIHRoaWNrbmVzcy50b3ApICogMC41LCAwKSA6IDA7XHJcbiAgICAgICAgICAgIGRlc3QuYm90dG9tUmlnaHQgPSBkZXN0LmJvdHRvbVJpZ2h0ID8gTWF0aC5tYXgoZGVzdC5ib3R0b21SaWdodCArIE1hdGgubWF4KHRoaWNrbmVzcy5yaWdodCwgdGhpY2tuZXNzLmJvdHRvbSkgKiAwLjUsIDApIDogMDtcclxuICAgICAgICAgICAgZGVzdC5ib3R0b21MZWZ0ID0gZGVzdC5ib3R0b21MZWZ0ID8gTWF0aC5tYXgoZGVzdC5ib3R0b21MZWZ0ICsgTWF0aC5tYXgodGhpY2tuZXNzLmxlZnQsIHRoaWNrbmVzcy5ib3R0b20pICogMC41LCAwKSA6IDA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwibW9kdWxlIG1pbmVydmEuVmVjdG9yIHtcclxuICAgIHZhciBFUFNJTE9OID0gMWUtMTA7XHJcblxyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZSh4OiBudW1iZXIsIHk6IG51bWJlcik6IG51bWJlcltdIHtcclxuICAgICAgICByZXR1cm4gW3gsIHldO1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBmdW5jdGlvbiByZXZlcnNlKHY6IG51bWJlcltdKSB7XHJcbiAgICAgICAgdlswXSA9IC12WzBdO1xyXG4gICAgICAgIHZbMV0gPSAtdlsxXTtcclxuICAgICAgICByZXR1cm4gdjtcclxuICAgIH1cclxuXHJcbiAgICAvLy8gRXF1aXZhbGVudCBvZiByb3RhdGluZyA5MCBkZWdyZWVzIGNsb2Nrd2lzZSAoc2NyZWVuIHNwYWNlKVxyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIG9ydGhvZ29uYWwodjogbnVtYmVyW10pIHtcclxuICAgICAgICB2YXIgeCA9IHZbMF0sXHJcbiAgICAgICAgICAgIHkgPSB2WzFdO1xyXG4gICAgICAgIHZbMF0gPSAteTtcclxuICAgICAgICB2WzFdID0geDtcclxuICAgICAgICByZXR1cm4gdjtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplKHY6IG51bWJlcltdKSB7XHJcbiAgICAgICAgdmFyIHggPSB2WzBdLFxyXG4gICAgICAgICAgICB5ID0gdlsxXTtcclxuICAgICAgICB2YXIgbGVuID0gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkpO1xyXG4gICAgICAgIHZbMF0gPSB4IC8gbGVuO1xyXG4gICAgICAgIHZbMV0gPSB5IC8gbGVuO1xyXG4gICAgICAgIHJldHVybiB2O1xyXG4gICAgfVxyXG5cclxuICAgIC8vLyBSb3RhdGVzIGEgdmVjdG9yKHYpIGJ5IGFuZ2xlKHRoZXRhKSBjbG9ja3dpc2Uoc2NyZWVuIHNwYWNlKSAuLi53aGljaCBpcyBjb3VudGVyLWNsb2Nrd2lzZSBpbiBjb29yZGluYXRlIHNwYWNlXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gcm90YXRlKHY6IG51bWJlcltdLCB0aGV0YTogbnVtYmVyKSB7XHJcbiAgICAgICAgdmFyIGMgPSBNYXRoLmNvcyh0aGV0YSk7XHJcbiAgICAgICAgdmFyIHMgPSBNYXRoLnNpbih0aGV0YSk7XHJcbiAgICAgICAgdmFyIHggPSB2WzBdO1xyXG4gICAgICAgIHZhciB5ID0gdlsxXTtcclxuICAgICAgICB2WzBdID0geCAqIGMgLSB5ICogcztcclxuICAgICAgICB2WzFdID0geCAqIHMgKyB5ICogYztcclxuICAgICAgICByZXR1cm4gdjtcclxuICAgIH1cclxuXHJcblxyXG5cclxuICAgIC8vLyBSZXR1cm5zIHNtYWxsZXN0IGFuZ2xlIChpbiByYWRpYW5zKSBiZXR3ZWVuIDIgdmVjdG9yc1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGFuZ2xlQmV0d2Vlbih1OiBudW1iZXJbXSwgdjogbnVtYmVyW10pOiBudW1iZXIge1xyXG4gICAgICAgIHZhciB1eCA9IHVbMF0sXHJcbiAgICAgICAgICAgIHV5ID0gdVsxXSxcclxuICAgICAgICAgICAgdnggPSB2WzBdLFxyXG4gICAgICAgICAgICB2eSA9IHZbMV07XHJcbiAgICAgICAgdmFyIG51bSA9IHV4ICogdnggKyB1eSAqIHZ5O1xyXG4gICAgICAgIHZhciBkZW4gPSBNYXRoLnNxcnQodXggKiB1eCArIHV5ICogdXkpICogTWF0aC5zcXJ0KHZ4ICogdnggKyB2eSAqIHZ5KTtcclxuICAgICAgICByZXR1cm4gTWF0aC5hY29zKG51bSAvIGRlbik7XHJcbiAgICB9XHJcblxyXG4gICAgLy8vIEJ5IHJvdGF0aW5nIGZyb20gdmVjdG9yKHYxKSB0byB2ZWN0b3IodjIpLCB0ZXN0cyB3aGV0aGVyIHRoYXQgYW5nbGUgaXMgY2xvY2t3aXNlIChzY3JlZW4gc3BhY2UpXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gaXNDbG9ja3dpc2VUbyh2MTogbnVtYmVyW10sIHYyOiBudW1iZXJbXSkge1xyXG4gICAgICAgIHZhciB0aGV0YSA9IGFuZ2xlQmV0d2Vlbih2MSwgdjIpO1xyXG4gICAgICAgIHZhciBudjEgPSBub3JtYWxpemUodjEuc2xpY2UoMCkpO1xyXG4gICAgICAgIHZhciBudjIgPSBub3JtYWxpemUodjIuc2xpY2UoMCkpO1xyXG4gICAgICAgIHJvdGF0ZShudjEsIHRoZXRhKTtcclxuICAgICAgICB2YXIgbnggPSBNYXRoLmFicyhudjFbMF0gLSBudjJbMF0pO1xyXG4gICAgICAgIHZhciBueSA9IE1hdGguYWJzKG52MVsxXSAtIG52MlsxXSk7XHJcbiAgICAgICAgcmV0dXJuIG54IDwgRVBTSUxPTlxyXG4gICAgICAgICAgICAmJiBueSA8IEVQU0lMT047XHJcbiAgICB9XHJcblxyXG4gICAgLy8vIEZpbmRzIGludGVyc2VjdGlvbiBvZiB2MShzMSArIHQoZDEpKSBhbmQgdjIoczIgKyB0KGQyKSlcclxuICAgIGV4cG9ydCBmdW5jdGlvbiBpbnRlcnNlY3Rpb24oczE6IG51bWJlcltdLCBkMTogbnVtYmVyW10sIHMyOiBudW1iZXJbXSwgZDI6IG51bWJlcltdKTogbnVtYmVyW10ge1xyXG4gICAgICAgIHZhciB4MSA9IHMxWzBdO1xyXG4gICAgICAgIHZhciB5MSA9IHMxWzFdO1xyXG4gICAgICAgIHZhciB4MiA9IHgxICsgZDFbMF07XHJcbiAgICAgICAgdmFyIHkyID0geTEgKyBkMVsxXTtcclxuXHJcbiAgICAgICAgdmFyIHgzID0gczJbMF07XHJcbiAgICAgICAgdmFyIHkzID0gczJbMV07XHJcbiAgICAgICAgdmFyIHg0ID0geDMgKyBkMlswXTtcclxuICAgICAgICB2YXIgeTQgPSB5MyArIGQyWzFdO1xyXG5cclxuXHJcbiAgICAgICAgdmFyIGRldCA9ICh4MSAtIHgyKSAqICh5MyAtIHk0KSAtICh5MSAtIHkyKSAqICh4MyAtIHg0KTtcclxuICAgICAgICBpZiAoZGV0ID09PSAwKVxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuXHJcbiAgICAgICAgdmFyIHhuID0gKCh4MSAqIHkyIC0geTEgKiB4MikgKiAoeDMgLSB4NCkpIC0gKCh4MSAtIHgyKSAqICh4MyAqIHk0IC0geTMgKiB4NCkpO1xyXG4gICAgICAgIHZhciB5biA9ICgoeDEgKiB5MiAtIHkxICogeDIpICogKHkzIC0geTQpKSAtICgoeTEgLSB5MikgKiAoeDMgKiB5NCAtIHkzICogeDQpKTtcclxuICAgICAgICByZXR1cm4gW3huIC8gZGV0LCB5biAvIGRldF07XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YSB7XHJcbiAgICBleHBvcnQgZW51bSBWaXNpYmlsaXR5IHtcclxuICAgICAgICBWaXNpYmxlID0gMCxcclxuICAgICAgICBDb2xsYXBzZWQgPSAxXHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS56b29tIHtcbiAgICBleHBvcnQgdmFyIGNhbGM6ICgpID0+IG51bWJlciA9ICgoKSA9PiB7XG4gICAgICAgIGlmICgoPGFueT5kb2N1bWVudCkuZnJhbWVzKSAvL0lFIDctOVxuICAgICAgICAgICAgcmV0dXJuIGllKCk7XG4gICAgICAgIHJldHVybiBjaHJvbWUoKTtcbiAgICB9KSgpO1xuXG4gICAgZnVuY3Rpb24gaWUoKSB7XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICB2YXIgc2NyZWVuID0gKDxhbnk+ZG9jdW1lbnQpLmZyYW1lcy5zY3JlZW47XG4gICAgICAgICAgICB2YXIgem9vbSA9IHNjcmVlbi5kZXZpY2VYRFBJIC8gc2NyZWVuLnN5c3RlbVhEUEk7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCh6b29tICogMTAwKSAvIDEwMDtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjaHJvbWUoKSB7XG4gICAgICAgIHZhciBzdmc6IFNWR1NWR0VsZW1lbnQ7XG5cbiAgICAgICAgZnVuY3Rpb24gbWVtb2l6ZVN2ZygpIHtcbiAgICAgICAgICAgIGlmICghIXN2ZyB8fCAhZG9jdW1lbnQuYm9keSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBzdmcgPSA8U1ZHU1ZHRWxlbWVudD5kb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgJ3N2ZycpO1xuICAgICAgICAgICAgc3ZnLnNldEF0dHJpYnV0ZSgneG1sbnMnLCAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnKTtcbiAgICAgICAgICAgIHN2Zy5zZXRBdHRyaWJ1dGUoJ3ZlcnNpb24nLCAnMS4xJyk7XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHN2Zyk7XG4gICAgICAgICAgICAoKHN0eWxlOiBDU1NTdHlsZURlY2xhcmF0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgc3R5bGUub3BhY2l0eSA9IFwiMC4wXCI7XG4gICAgICAgICAgICAgICAgc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG4gICAgICAgICAgICAgICAgc3R5bGUubGVmdCA9IFwiLTMwMHB4XCI7XG4gICAgICAgICAgICAgICAgLy9zdHlsZS50b3AgPSBcIi0xNTBweFwiO1xuICAgICAgICAgICAgfSkoPGFueT5zdmcuc3R5bGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIG1lbW9pemVTdmcoKTtcbiAgICAgICAgICAgIHJldHVybiAhc3ZnID8gMSA6IHN2Zy5jdXJyZW50U2NhbGU7XG4gICAgICAgIH07XG4gICAgfVxufVxuIiwibW9kdWxlIG1pbmVydmEuY29yZSB7XHJcbiAgICBleHBvcnQgY2xhc3MgVXBkYXRlciB7XHJcbiAgICAgICAgcHJpdmF0ZSAkJG1lYXN1cmU6IElNZWFzdXJlUGlwZSA9IG51bGw7XHJcbiAgICAgICAgcHJpdmF0ZSAkJG1lYXN1cmVCaW5kZXI6IG1lYXN1cmUuSU1lYXN1cmVCaW5kZXIgPSBudWxsO1xyXG4gICAgICAgIHByaXZhdGUgJCRhcnJhbmdlOiBJQXJyYW5nZVBpcGUgPSBudWxsO1xyXG4gICAgICAgIHByaXZhdGUgJCRhcnJhbmdlQmluZGVyOiBhcnJhbmdlLklBcnJhbmdlQmluZGVyID0gbnVsbDtcclxuICAgICAgICBwcml2YXRlICQkc2l6aW5nOiBJU2l6aW5nUGlwZSA9IG51bGw7XHJcbiAgICAgICAgcHJpdmF0ZSAkJHByb2Nlc3Nkb3duOiBJUHJvY2Vzc0Rvd25QaXBlID0gbnVsbDtcclxuICAgICAgICBwcml2YXRlICQkcHJvY2Vzc3VwOiBJUHJvY2Vzc1VwUGlwZSA9IG51bGw7XHJcbiAgICAgICAgcHJpdmF0ZSAkJHJlbmRlcjogSVJlbmRlclBpcGUgPSBudWxsO1xyXG4gICAgICAgIHByaXZhdGUgJCRoaXR0ZXN0OiBJSGl0VGVzdFBpcGUgPSBudWxsO1xyXG5cclxuICAgICAgICBwcml2YXRlICQkaW5Eb3duRGlydHkgPSBmYWxzZTtcclxuICAgICAgICBwcml2YXRlICQkaW5VcERpcnR5ID0gZmFsc2U7XHJcblxyXG4gICAgICAgIHByaXZhdGUgJCRhdHRhY2hlZCA9IHt9O1xyXG5cclxuICAgICAgICBwcml2YXRlICQkc2l6ZXVwZGF0ZXI6IElTaXplVXBkYXRlciA9IE5PX1NJWkVfVVBEQVRFUjtcclxuXHJcbiAgICAgICAgYXNzZXRzOiBJVXBkYXRlckFzc2V0cyA9IHtcclxuICAgICAgICAgICAgd2lkdGg6IE5hTixcclxuICAgICAgICAgICAgaGVpZ2h0OiBOYU4sXHJcbiAgICAgICAgICAgIG1pbldpZHRoOiAwLjAsXHJcbiAgICAgICAgICAgIG1pbkhlaWdodDogMC4wLFxyXG4gICAgICAgICAgICBtYXhXaWR0aDogTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLFxyXG4gICAgICAgICAgICBtYXhIZWlnaHQ6IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSxcclxuICAgICAgICAgICAgdXNlTGF5b3V0Um91bmRpbmc6IHRydWUsXHJcbiAgICAgICAgICAgIG1hcmdpbjogbmV3IFRoaWNrbmVzcygpLFxyXG4gICAgICAgICAgICBob3Jpem9udGFsQWxpZ25tZW50OiBIb3Jpem9udGFsQWxpZ25tZW50LlN0cmV0Y2gsXHJcbiAgICAgICAgICAgIHZlcnRpY2FsQWxpZ25tZW50OiBWZXJ0aWNhbEFsaWdubWVudC5TdHJldGNoLFxyXG4gICAgICAgICAgICBjbGlwOiBudWxsLFxyXG4gICAgICAgICAgICBlZmZlY3Q6IG51bGwsXHJcbiAgICAgICAgICAgIHZpc2liaWxpdHk6IFZpc2liaWxpdHkuVmlzaWJsZSxcclxuICAgICAgICAgICAgb3BhY2l0eTogMS4wLFxyXG4gICAgICAgICAgICBpc0hpdFRlc3RWaXNpYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICByZW5kZXJUcmFuc2Zvcm06IG51bGwsXHJcbiAgICAgICAgICAgIHJlbmRlclRyYW5zZm9ybU9yaWdpbjogbmV3IFBvaW50KCksXHJcbiAgICAgICAgICAgIGVmZmVjdFBhZGRpbmc6IG5ldyBUaGlja25lc3MoKSxcclxuXHJcbiAgICAgICAgICAgIHByZXZpb3VzQ29uc3RyYWludDogbmV3IFNpemUoKSxcclxuICAgICAgICAgICAgZGVzaXJlZFNpemU6IG5ldyBTaXplKCksXHJcbiAgICAgICAgICAgIGhpZGRlbkRlc2lyZTogbmV3IFNpemUoTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZLCBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFkpLFxyXG5cclxuICAgICAgICAgICAgcmVuZGVyU2l6ZTogbmV3IFNpemUoKSxcclxuICAgICAgICAgICAgdmlzdWFsT2Zmc2V0OiBuZXcgUG9pbnQoKSxcclxuICAgICAgICAgICAgbGFzdFJlbmRlclNpemU6IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgbGF5b3V0U2xvdDogbmV3IFJlY3QoKSxcclxuICAgICAgICAgICAgbGF5b3V0Q2xpcDogbmV3IFJlY3QoKSxcclxuICAgICAgICAgICAgY29tcG9zaXRlTGF5b3V0Q2xpcDogbmV3IFJlY3QoKSxcclxuICAgICAgICAgICAgYnJlYWtMYXlvdXRDbGlwOiBmYWxzZSxcclxuXHJcbiAgICAgICAgICAgIGFjdHVhbFdpZHRoOiAwLFxyXG4gICAgICAgICAgICBhY3R1YWxIZWlnaHQ6IDAsXHJcbiAgICAgICAgICAgIHo6IE5hTixcclxuXHJcbiAgICAgICAgICAgIHRvdGFsSXNSZW5kZXJWaXNpYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICB0b3RhbE9wYWNpdHk6IDEuMCxcclxuICAgICAgICAgICAgdG90YWxJc0hpdFRlc3RWaXNpYmxlOiB0cnVlLFxyXG5cclxuICAgICAgICAgICAgZXh0ZW50czogbmV3IFJlY3QoKSxcclxuICAgICAgICAgICAgZXh0ZW50c1dpdGhDaGlsZHJlbjogbmV3IFJlY3QoKSxcclxuICAgICAgICAgICAgc3VyZmFjZUJvdW5kc1dpdGhDaGlsZHJlbjogbmV3IFJlY3QoKSxcclxuICAgICAgICAgICAgZ2xvYmFsQm91bmRzV2l0aENoaWxkcmVuOiBuZXcgUmVjdCgpLFxyXG5cclxuICAgICAgICAgICAgbGF5b3V0WGZvcm06IG1hdDMuaWRlbnRpdHkoKSxcclxuICAgICAgICAgICAgY2Fycmllclhmb3JtOiBudWxsLFxyXG4gICAgICAgICAgICByZW5kZXJYZm9ybTogbWF0My5pZGVudGl0eSgpLFxyXG4gICAgICAgICAgICBhYnNvbHV0ZVhmb3JtOiBtYXQzLmlkZW50aXR5KCksXHJcblxyXG4gICAgICAgICAgICBkaXJ0eVJlZ2lvbjogbmV3IFJlY3QoKSxcclxuICAgICAgICAgICAgZGlydHlGbGFnczogMCxcclxuICAgICAgICAgICAgdWlGbGFnczogVUlGbGFncy5SZW5kZXJWaXNpYmxlIHwgVUlGbGFncy5IaXRUZXN0VmlzaWJsZSxcclxuICAgICAgICAgICAgZm9yY2VJbnZhbGlkYXRlOiBmYWxzZVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRyZWU6IElVcGRhdGVyVHJlZSA9IG51bGw7XHJcblxyXG4gICAgICAgIGNvbnN0cnVjdG9yICgpIHtcclxuICAgICAgICAgICAgcGVyZmV4LnRpbWVyLnN0YXJ0KFwiQ3JlYXRlVXBkYXRlclwiLCBudWxsKTtcclxuICAgICAgICAgICAgdGhpcy5zZXRNZWFzdXJlQmluZGVyKClcclxuICAgICAgICAgICAgICAgIC5zZXRBcnJhbmdlQmluZGVyKClcclxuICAgICAgICAgICAgICAgIC5pbml0KCk7XHJcbiAgICAgICAgICAgIHBlcmZleC50aW1lci5zdG9wKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpbml0ICgpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRUcmVlKHRoaXMudHJlZSk7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy4kJG1lYXN1cmUpXHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldE1lYXN1cmVQaXBlKCk7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy4kJGFycmFuZ2UpXHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldEFycmFuZ2VQaXBlKCk7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy4kJHNpemluZylcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0U2l6aW5nUGlwZSgpO1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuJCRwcm9jZXNzZG93bilcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0UHJvY2Vzc0Rvd25QaXBlKCk7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy4kJHByb2Nlc3N1cClcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0UHJvY2Vzc1VwUGlwZSgpO1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuJCRyZW5kZXIpXHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFJlbmRlclBpcGUoKTtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLiQkaGl0dGVzdClcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0SGl0VGVzdFBpcGUoKTtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLiQkaGl0dGVzdC5kYXRhLnRyZWUpXHJcbiAgICAgICAgICAgICAgICB0aGlzLiQkaGl0dGVzdC5kYXRhLnRyZWUgPSB0aGlzLnRyZWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZXRUcmVlICh0cmVlPzogSVVwZGF0ZXJUcmVlKTogVXBkYXRlciB7XHJcbiAgICAgICAgICAgIHRoaXMudHJlZSA9IHRyZWUgfHwgPElVcGRhdGVyVHJlZT5uZXcgVXBkYXRlclRyZWUoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBnZXRBdHRhY2hlZFZhbHVlIChuYW1lOiBzdHJpbmcpOiBhbnkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy4kJGF0dGFjaGVkW25hbWVdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2V0QXR0YWNoZWRWYWx1ZSAobmFtZTogc3RyaW5nLCB2YWx1ZT86IGFueSkge1xyXG4gICAgICAgICAgICB0aGlzLiQkYXR0YWNoZWRbbmFtZV0gPSB2YWx1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vLy8vLy8gVFJFRVxyXG5cclxuICAgICAgICBvbkRldGFjaGVkICgpIHtcclxuICAgICAgICAgICAgcmVhY3RUby5oZWxwZXJzLmludmFsaWRhdGVQYXJlbnQodGhpcyk7XHJcbiAgICAgICAgICAgIHRoaXMuaW52YWxpZGF0ZU1lYXN1cmUoKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMudHJlZS52aXN1YWxQYXJlbnQpXHJcbiAgICAgICAgICAgICAgICB0aGlzLnRyZWUudmlzdWFsUGFyZW50LmludmFsaWRhdGVNZWFzdXJlKCk7XHJcblxyXG4gICAgICAgICAgICB2YXIgbHMgPSB0aGlzLmFzc2V0cy5sYXlvdXRTbG90O1xyXG4gICAgICAgICAgICBscy54ID0gbHMueSA9IGxzLndpZHRoID0gbHMuaGVpZ2h0ID0gMDtcclxuICAgICAgICAgICAgdmFyIGxjID0gdGhpcy5hc3NldHMubGF5b3V0Q2xpcDtcclxuICAgICAgICAgICAgbGMueCA9IGxjLnkgPSBsYy53aWR0aCA9IGxjLmhlaWdodCA9IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBvbkF0dGFjaGVkICgpIHtcclxuICAgICAgICAgICAgdmFyIGFzc2V0cyA9IHRoaXMuYXNzZXRzO1xyXG4gICAgICAgICAgICBTaXplLnVuZGVmKGFzc2V0cy5wcmV2aW91c0NvbnN0cmFpbnQpO1xyXG4gICAgICAgICAgICBhc3NldHMuZGlydHlGbGFncyB8PSAoRGlydHlGbGFncy5SZW5kZXJWaXNpYmlsaXR5IHwgRGlydHlGbGFncy5IaXRUZXN0VmlzaWJpbGl0eSB8IERpcnR5RmxhZ3MuTG9jYWxUcmFuc2Zvcm0pO1xyXG4gICAgICAgICAgICB2YXIgbGMgPSBhc3NldHMubGF5b3V0Q2xpcDtcclxuICAgICAgICAgICAgbGMueCA9IGxjLnkgPSBsYy53aWR0aCA9IGxjLmhlaWdodCA9IDA7XHJcbiAgICAgICAgICAgIHZhciBycyA9IGFzc2V0cy5yZW5kZXJTaXplO1xyXG4gICAgICAgICAgICBycy53aWR0aCA9IHJzLmhlaWdodCA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMuaW52YWxpZGF0ZU1lYXN1cmUoKVxyXG4gICAgICAgICAgICAgICAgLmludmFsaWRhdGVBcnJhbmdlKClcclxuICAgICAgICAgICAgICAgIC5pbnZhbGlkYXRlKClcclxuICAgICAgICAgICAgICAgIC51cGRhdGVCb3VuZHModHJ1ZSk7XHJcbiAgICAgICAgICAgIFVwZGF0ZXIuJCRhZGREb3duRGlydHkodGhpcyk7XHJcbiAgICAgICAgICAgIGlmICgoYXNzZXRzLnVpRmxhZ3MgJiBVSUZsYWdzLlNpemVIaW50KSA+IDAgfHwgYXNzZXRzLmxhc3RSZW5kZXJTaXplICE9PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgICAgICBVcGRhdGVyLiQkcHJvcGFnYXRlVWlGbGFnc1VwKHRoaXMsIFVJRmxhZ3MuU2l6ZUhpbnQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2V0VmlzdWFsUGFyZW50ICh2aXN1YWxQYXJlbnQ6IFVwZGF0ZXIpOiBVcGRhdGVyIHtcclxuICAgICAgICAgICAgaWYgKCF2aXN1YWxQYXJlbnQgJiYgdGhpcy50cmVlLnZpc3VhbFBhcmVudCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vbkRldGFjaGVkKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRyZWUudmlzdWFsUGFyZW50LnRyZWUub25DaGlsZERldGFjaGVkKHRoaXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMudHJlZS52aXN1YWxQYXJlbnQgPSB2aXN1YWxQYXJlbnQ7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0U3VyZmFjZSh2aXN1YWxQYXJlbnQgPyB2aXN1YWxQYXJlbnQudHJlZS5zdXJmYWNlIDogdW5kZWZpbmVkKTtcclxuICAgICAgICAgICAgaWYgKHZpc3VhbFBhcmVudCkge1xyXG4gICAgICAgICAgICAgICAgdmlzdWFsUGFyZW50LnRyZWUub25DaGlsZEF0dGFjaGVkKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vbkF0dGFjaGVkKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZXRTdXJmYWNlIChzdXJmYWNlOiBJU3VyZmFjZSk6IFVwZGF0ZXIge1xyXG4gICAgICAgICAgICB2YXIgY3VyOiBjb3JlLlVwZGF0ZXI7XHJcbiAgICAgICAgICAgIHZhciBuZXdVcHM6IGNvcmUuVXBkYXRlcltdID0gW107XHJcbiAgICAgICAgICAgIGZvciAodmFyIHdhbGtlciA9IHRoaXMud2Fsa0RlZXAoKTsgd2Fsa2VyLnN0ZXAoKTspIHtcclxuICAgICAgICAgICAgICAgIGN1ciA9IHdhbGtlci5jdXJyZW50O1xyXG4gICAgICAgICAgICAgICAgaWYgKGN1ci50cmVlLnN1cmZhY2UgPT09IHN1cmZhY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICB3YWxrZXIuc2tpcEJyYW5jaCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFyIG9sZHMgPSBjdXIudHJlZS5zdXJmYWNlO1xyXG4gICAgICAgICAgICAgICAgY3VyLnRyZWUuc3VyZmFjZSA9IHN1cmZhY2U7XHJcbiAgICAgICAgICAgICAgICBjdXIub25TdXJmYWNlQ2hhbmdlZChvbGRzLCBzdXJmYWNlKTtcclxuICAgICAgICAgICAgICAgIGlmIChzdXJmYWNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKChjdXIuYXNzZXRzLmRpcnR5RmxhZ3MgJiBEaXJ0eUZsYWdzLkRvd25EaXJ0eVN0YXRlKSA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VyLiQkaW5Eb3duRGlydHkgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdXJmYWNlLmFkZERvd25EaXJ0eShjdXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoKGN1ci5hc3NldHMuZGlydHlGbGFncyAmIERpcnR5RmxhZ3MuVXBEaXJ0eVN0YXRlKSA+IDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld1Vwcy5wdXNoKGN1cik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy9OT1RFOiBBZGRpbmcgVXBkYXRlcnMgdG8gc3VyZmFjZSBpbiByZXZlcnNlIGRlZXAgd2FsayBvcmRlciBmb3IgcHJvY2VzcyB1cCBwYXNzXHJcbiAgICAgICAgICAgIHdoaWxlICgoY3VyID0gbmV3VXBzLnBvcCgpKSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBjdXIuJCRpblVwRGlydHkgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgc3VyZmFjZS5hZGRVcERpcnR5KGN1cik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBvblN1cmZhY2VDaGFuZ2VkIChvbGRTdXJmYWNlOiBJU3VyZmFjZSwgbmV3U3VyZmFjZTogSVN1cmZhY2UpIHtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHdhbGtEZWVwIChkaXI/OiBXYWxrRGlyZWN0aW9uKTogSURlZXBXYWxrZXI8VXBkYXRlcj4ge1xyXG4gICAgICAgICAgICB2YXIgbGFzdDogVXBkYXRlciA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgdmFyIHdhbGtMaXN0OiBVcGRhdGVyW10gPSBbdGhpc107XHJcbiAgICAgICAgICAgIGRpciA9IGRpciB8fCBXYWxrRGlyZWN0aW9uLkZvcndhcmQ7XHJcbiAgICAgICAgICAgIHZhciByZXZkaXIgPSAoZGlyID09PSBXYWxrRGlyZWN0aW9uLkZvcndhcmQgfHwgZGlyID09PSBXYWxrRGlyZWN0aW9uLlpGb3J3YXJkKSA/IGRpciArIDEgOiBkaXIgLSAxO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnQ6IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgICAgIHN0ZXA6IGZ1bmN0aW9uICgpOiBib29sZWFuIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobGFzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBzdWJ3YWxrZXIgPSBsYXN0LnRyZWUud2FsayhyZXZkaXIpOyBzdWJ3YWxrZXIuc3RlcCgpOykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2Fsa0xpc3QudW5zaGlmdChzdWJ3YWxrZXIuY3VycmVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudCA9IGxhc3QgPSB3YWxrTGlzdC5zaGlmdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnQgIT09IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBza2lwQnJhbmNoOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGFzdCA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vLy8vLy8gUFJFUEFSRSBQSVBFU1xyXG5cclxuICAgICAgICBzZXRNZWFzdXJlUGlwZSAocGlwZWRlZj86IG1lYXN1cmUuTWVhc3VyZVBpcGVEZWYpOiBVcGRhdGVyIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuJCRtZWFzdXJlKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIHZhciBkZWYgPSBwaXBlZGVmIHx8IG5ldyBtZWFzdXJlLk1lYXN1cmVQaXBlRGVmKCk7XHJcbiAgICAgICAgICAgIHRoaXMuJCRtZWFzdXJlID0gPElNZWFzdXJlUGlwZT5waXBlLmNyZWF0ZVRyaVBpcGUoZGVmKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZXRNZWFzdXJlQmluZGVyIChtYj86IG1lYXN1cmUuSU1lYXN1cmVCaW5kZXIpOiBVcGRhdGVyIHtcclxuICAgICAgICAgICAgdGhpcy4kJG1lYXN1cmVCaW5kZXIgPSBtYiB8fCBuZXcgbWVhc3VyZS5NZWFzdXJlQmluZGVyKCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2V0QXJyYW5nZVBpcGUgKHBpcGVkZWY/OiBhcnJhbmdlLkFycmFuZ2VQaXBlRGVmKTogVXBkYXRlciB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLiQkYXJyYW5nZSlcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB2YXIgZGVmID0gcGlwZWRlZiB8fCBuZXcgYXJyYW5nZS5BcnJhbmdlUGlwZURlZigpO1xyXG4gICAgICAgICAgICB0aGlzLiQkYXJyYW5nZSA9IDxJQXJyYW5nZVBpcGU+cGlwZS5jcmVhdGVUcmlQaXBlKGRlZik7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2V0QXJyYW5nZUJpbmRlciAoYWI/OiBhcnJhbmdlLklBcnJhbmdlQmluZGVyKTogVXBkYXRlciB7XHJcbiAgICAgICAgICAgIHRoaXMuJCRhcnJhbmdlQmluZGVyID0gYWIgfHwgbmV3IGFycmFuZ2UuQXJyYW5nZUJpbmRlcigpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNldFNpemluZ1BpcGUgKHBpcGVkZWY/OiBzaXppbmcuU2l6aW5nUGlwZURlZik6IFVwZGF0ZXIge1xyXG4gICAgICAgICAgICBpZiAodGhpcy4kJHNpemluZylcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB2YXIgZGVmOiBwaXBlLlRyaVBpcGVEZWY8c2l6aW5nLklTaXppbmdUYXBpbiwgc2l6aW5nLklJbnB1dCwgc2l6aW5nLklTdGF0ZSwgc2l6aW5nLklPdXRwdXQ+ID0gcGlwZWRlZjtcclxuICAgICAgICAgICAgaWYgKCFkZWYpXHJcbiAgICAgICAgICAgICAgICBkZWYgPSBuZXcgc2l6aW5nLlNpemluZ1BpcGVEZWYoKTtcclxuICAgICAgICAgICAgdGhpcy4kJHNpemluZyA9IDxJU2l6aW5nUGlwZT5waXBlLmNyZWF0ZVRyaVBpcGUoZGVmKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZXRQcm9jZXNzRG93blBpcGUgKHBpcGVkZWY/OiBwcm9jZXNzZG93bi5Qcm9jZXNzRG93blBpcGVEZWYpOiBVcGRhdGVyIHtcclxuICAgICAgICAgICAgdmFyIGRlZjogcGlwZS5UcmlQaXBlRGVmPHByb2Nlc3Nkb3duLklQcm9jZXNzRG93blRhcGluLCBwcm9jZXNzZG93bi5JSW5wdXQsIHByb2Nlc3Nkb3duLklTdGF0ZSwgcHJvY2Vzc2Rvd24uSU91dHB1dD4gPSBwaXBlZGVmO1xyXG4gICAgICAgICAgICBpZiAoIWRlZilcclxuICAgICAgICAgICAgICAgIGRlZiA9IG5ldyBwcm9jZXNzZG93bi5Qcm9jZXNzRG93blBpcGVEZWYoKTtcclxuICAgICAgICAgICAgdGhpcy4kJHByb2Nlc3Nkb3duID0gPElQcm9jZXNzRG93blBpcGU+cGlwZS5jcmVhdGVUcmlQaXBlKGRlZik7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2V0UHJvY2Vzc1VwUGlwZSAocGlwZWRlZj86IHByb2Nlc3N1cC5Qcm9jZXNzVXBQaXBlRGVmKTogVXBkYXRlciB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLiQkcHJvY2Vzc3VwKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIHZhciBkZWY6IHBpcGUuVHJpUGlwZURlZjxwcm9jZXNzdXAuSVByb2Nlc3NVcFRhcGluLCBwcm9jZXNzdXAuSUlucHV0LCBwcm9jZXNzdXAuSVN0YXRlLCBwcm9jZXNzdXAuSU91dHB1dD4gPSBwaXBlZGVmO1xyXG4gICAgICAgICAgICBpZiAoIWRlZilcclxuICAgICAgICAgICAgICAgIGRlZiA9IG5ldyBwcm9jZXNzdXAuUHJvY2Vzc1VwUGlwZURlZigpO1xyXG4gICAgICAgICAgICB0aGlzLiQkcHJvY2Vzc3VwID0gPElQcm9jZXNzVXBQaXBlPnBpcGUuY3JlYXRlVHJpUGlwZShkZWYpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNldFJlbmRlclBpcGUgKHBpcGVkZWY/OiByZW5kZXIuUmVuZGVyUGlwZURlZik6IFVwZGF0ZXIge1xyXG4gICAgICAgICAgICBpZiAodGhpcy4kJHJlbmRlcilcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB2YXIgZGVmID0gcGlwZWRlZiB8fCBuZXcgcmVuZGVyLlJlbmRlclBpcGVEZWYoKTtcclxuICAgICAgICAgICAgdGhpcy4kJHJlbmRlciA9IDxJUmVuZGVyUGlwZT5waXBlLmNyZWF0ZVRyaVBpcGUoZGVmKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZXRIaXRUZXN0UGlwZSAocGlwZWRlZj86IGhpdHRlc3QuSGl0VGVzdFBpcGVEZWYpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuJCRoaXR0ZXN0KVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIHZhciBkZWYgPSBwaXBlZGVmIHx8IG5ldyBoaXR0ZXN0LkhpdFRlc3RQaXBlRGVmKCk7XHJcbiAgICAgICAgICAgIHRoaXMuJCRoaXR0ZXN0ID0ge1xyXG4gICAgICAgICAgICAgICAgZGVmOiBkZWYsXHJcbiAgICAgICAgICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlcjogdGhpcyxcclxuICAgICAgICAgICAgICAgICAgICBhc3NldHM6IHRoaXMuYXNzZXRzLFxyXG4gICAgICAgICAgICAgICAgICAgIHRyZWU6IHRoaXMudHJlZSxcclxuICAgICAgICAgICAgICAgICAgICBoaXRDaGlsZHJlbjogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgYm91bmRzOiBuZXcgUmVjdCgpLFxyXG4gICAgICAgICAgICAgICAgICAgIGxheW91dENsaXBCb3VuZHM6IG5ldyBSZWN0KClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLy8vLy8vIFJVTiBQSVBFU1xyXG5cclxuICAgICAgICBkb01lYXN1cmUgKCkge1xyXG4gICAgICAgICAgICB0aGlzLiQkbWVhc3VyZUJpbmRlci5iaW5kKHRoaXMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbWVhc3VyZSAoYXZhaWxhYmxlU2l6ZTogU2l6ZSk6IGJvb2xlYW4ge1xyXG4gICAgICAgICAgICB2YXIgcGlwZSA9IHRoaXMuJCRtZWFzdXJlO1xyXG4gICAgICAgICAgICB2YXIgb3V0cHV0ID0gcGlwZS5vdXRwdXQ7XHJcbiAgICAgICAgICAgIHZhciBzdWNjZXNzID0gcGlwZS5kZWYucnVuKHRoaXMuYXNzZXRzLCBwaXBlLnN0YXRlLCBvdXRwdXQsIHRoaXMudHJlZSwgYXZhaWxhYmxlU2l6ZSk7XHJcbiAgICAgICAgICAgIGlmIChvdXRwdXQubmV3VXBEaXJ0eSlcclxuICAgICAgICAgICAgICAgIFVwZGF0ZXIuJCRhZGRVcERpcnR5KHRoaXMpO1xyXG4gICAgICAgICAgICBpZiAob3V0cHV0Lm5ld0Rvd25EaXJ0eSlcclxuICAgICAgICAgICAgICAgIFVwZGF0ZXIuJCRhZGREb3duRGlydHkodGhpcyk7XHJcbiAgICAgICAgICAgIGlmIChvdXRwdXQubmV3VWlGbGFncylcclxuICAgICAgICAgICAgICAgIFVwZGF0ZXIuJCRwcm9wYWdhdGVVaUZsYWdzVXAodGhpcywgb3V0cHV0Lm5ld1VpRmxhZ3MpO1xyXG4gICAgICAgICAgICByZXR1cm4gc3VjY2VzcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGRvQXJyYW5nZSAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuJCRhcnJhbmdlQmluZGVyLmJpbmQodGhpcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhcnJhbmdlIChmaW5hbFJlY3Q6IFJlY3QpOiBib29sZWFuIHtcclxuICAgICAgICAgICAgdmFyIHBpcGUgPSB0aGlzLiQkYXJyYW5nZTtcclxuICAgICAgICAgICAgdmFyIG91dHB1dCA9IHBpcGUub3V0cHV0O1xyXG4gICAgICAgICAgICB2YXIgc3VjY2VzcyA9IHBpcGUuZGVmLnJ1bih0aGlzLmFzc2V0cywgcGlwZS5zdGF0ZSwgb3V0cHV0LCB0aGlzLnRyZWUsIGZpbmFsUmVjdCk7XHJcbiAgICAgICAgICAgIGlmIChvdXRwdXQubmV3VXBEaXJ0eSlcclxuICAgICAgICAgICAgICAgIFVwZGF0ZXIuJCRhZGRVcERpcnR5KHRoaXMpO1xyXG4gICAgICAgICAgICBpZiAob3V0cHV0Lm5ld0Rvd25EaXJ0eSlcclxuICAgICAgICAgICAgICAgIFVwZGF0ZXIuJCRhZGREb3duRGlydHkodGhpcyk7XHJcbiAgICAgICAgICAgIGlmIChvdXRwdXQubmV3VWlGbGFncylcclxuICAgICAgICAgICAgICAgIFVwZGF0ZXIuJCRwcm9wYWdhdGVVaUZsYWdzVXAodGhpcywgb3V0cHV0Lm5ld1VpRmxhZ3MpO1xyXG4gICAgICAgICAgICByZXR1cm4gc3VjY2VzcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNpemluZyAob2xkU2l6ZTogU2l6ZSwgbmV3U2l6ZTogU2l6ZSk6IGJvb2xlYW4ge1xyXG4gICAgICAgICAgICB2YXIgcGlwZSA9IHRoaXMuJCRzaXppbmc7XHJcbiAgICAgICAgICAgIHZhciBhc3NldHMgPSB0aGlzLmFzc2V0cztcclxuICAgICAgICAgICAgaWYgKGFzc2V0cy5sYXN0UmVuZGVyU2l6ZSlcclxuICAgICAgICAgICAgICAgIFNpemUuY29weVRvKGFzc2V0cy5sYXN0UmVuZGVyU2l6ZSwgb2xkU2l6ZSk7XHJcbiAgICAgICAgICAgIHZhciBzdWNjZXNzID0gcGlwZS5kZWYucnVuKGFzc2V0cywgcGlwZS5zdGF0ZSwgcGlwZS5vdXRwdXQsIHRoaXMudHJlZSk7XHJcbiAgICAgICAgICAgIFNpemUuY29weVRvKHBpcGUub3V0cHV0LmFjdHVhbFNpemUsIG5ld1NpemUpO1xyXG4gICAgICAgICAgICB0aGlzLiQkc2l6ZXVwZGF0ZXIuc2V0QWN0dWFsV2lkdGgobmV3U2l6ZS53aWR0aCk7XHJcbiAgICAgICAgICAgIHRoaXMuJCRzaXpldXBkYXRlci5zZXRBY3R1YWxIZWlnaHQobmV3U2l6ZS5oZWlnaHQpO1xyXG4gICAgICAgICAgICBhc3NldHMubGFzdFJlbmRlclNpemUgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIHJldHVybiBzdWNjZXNzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJvY2Vzc0Rvd24gKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMudHJlZS5zdXJmYWNlKVxyXG4gICAgICAgICAgICAgICAgdGhpcy4kJGluRG93bkRpcnR5ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy4kJGluRG93bkRpcnR5KVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIHZhciB2cCA9IHRoaXMudHJlZS52aXN1YWxQYXJlbnQ7XHJcbiAgICAgICAgICAgIGlmICh2cCAmJiB2cC4kJGluRG93bkRpcnR5KSB7XHJcbiAgICAgICAgICAgICAgICAvL09QVElNSVpBVElPTjogdWllIGlzIG92ZXJ6ZWFsb3VzLiBIaXMgcGFyZW50IHdpbGwgaW52YWxpZGF0ZSBoaW0gbGF0ZXJcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIHBpcGUgPSB0aGlzLiQkcHJvY2Vzc2Rvd247XHJcbiAgICAgICAgICAgIHZhciBzdWNjZXNzID0gcGlwZS5kZWYucnVuKHRoaXMuYXNzZXRzLCBwaXBlLnN0YXRlLCBwaXBlLm91dHB1dCwgdnAgPyB2cC5hc3NldHMgOiBudWxsLCB0aGlzLnRyZWUpO1xyXG4gICAgICAgICAgICB0aGlzLiQkaW5Eb3duRGlydHkgPSBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKHBpcGUub3V0cHV0Lm5ld1VwRGlydHkpXHJcbiAgICAgICAgICAgICAgICBVcGRhdGVyLiQkYWRkVXBEaXJ0eSh0aGlzKTtcclxuICAgICAgICAgICAgcmV0dXJuIHN1Y2Nlc3M7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcm9jZXNzVXAgKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMudHJlZS5zdXJmYWNlKVxyXG4gICAgICAgICAgICAgICAgdGhpcy4kJGluVXBEaXJ0eSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuJCRpblVwRGlydHkpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIHZhciBwaXBlID0gdGhpcy4kJHByb2Nlc3N1cDtcclxuICAgICAgICAgICAgdmFyIHN1Y2Nlc3MgPSBwaXBlLmRlZi5ydW4odGhpcy5hc3NldHMsIHBpcGUuc3RhdGUsIHBpcGUub3V0cHV0LCB0aGlzLnRyZWUpO1xyXG4gICAgICAgICAgICB0aGlzLiQkaW5VcERpcnR5ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHJldHVybiBzdWNjZXNzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmVuZGVyIChjdHg6IHJlbmRlci5SZW5kZXJDb250ZXh0LCByZWdpb246IFJlY3QpOiBib29sZWFuIHtcclxuICAgICAgICAgICAgdmFyIHBpcGUgPSB0aGlzLiQkcmVuZGVyO1xyXG4gICAgICAgICAgICByZXR1cm4gcGlwZS5kZWYucnVuKHRoaXMuYXNzZXRzLCBwaXBlLnN0YXRlLCBwaXBlLm91dHB1dCwgY3R4LCByZWdpb24sIHRoaXMudHJlZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcmVSZW5kZXIgKCkge1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGhpdFRlc3QgKHBvczogUG9pbnQsIGxpc3Q6IFVwZGF0ZXJbXSwgY3R4OiByZW5kZXIuUmVuZGVyQ29udGV4dCwgaW5jbHVkZUFsbDogYm9vbGVhbik6IGJvb2xlYW4ge1xyXG4gICAgICAgICAgICB2YXIgcGlwZSA9IHRoaXMuJCRoaXR0ZXN0O1xyXG4gICAgICAgICAgICByZXR1cm4gcGlwZS5kZWYucnVuKHBpcGUuZGF0YSwgcG9zLCBsaXN0LCBjdHgsIGluY2x1ZGVBbGwgPT09IHRydWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8vLy8vLyBTSVpFIFVQREFURVNcclxuXHJcbiAgICAgICAgb25TaXplQ2hhbmdlZCAob2xkU2l6ZTogU2l6ZSwgbmV3U2l6ZTogU2l6ZSkge1xyXG4gICAgICAgICAgICB0aGlzLiQkc2l6ZXVwZGF0ZXIub25TaXplQ2hhbmdlZChvbGRTaXplLCBuZXdTaXplKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNldFNpemVVcGRhdGVyICh1cGRhdGVyOiBJU2l6ZVVwZGF0ZXIpIHtcclxuICAgICAgICAgICAgdGhpcy4kJHNpemV1cGRhdGVyID0gdXBkYXRlciB8fCBOT19TSVpFX1VQREFURVI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLy8vLy8vIElOVkFMSURBVEVTXHJcblxyXG4gICAgICAgIGludmFsaWRhdGVNZWFzdXJlICgpOiBVcGRhdGVyIHtcclxuICAgICAgICAgICAgdGhpcy5hc3NldHMuZGlydHlGbGFncyB8PSBEaXJ0eUZsYWdzLk1lYXN1cmU7XHJcbiAgICAgICAgICAgIFVwZGF0ZXIuJCRwcm9wYWdhdGVVaUZsYWdzVXAodGhpcywgVUlGbGFncy5NZWFzdXJlSGludCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaW52YWxpZGF0ZUFycmFuZ2UgKCk6IFVwZGF0ZXIge1xyXG4gICAgICAgICAgICB0aGlzLmFzc2V0cy5kaXJ0eUZsYWdzIHw9IERpcnR5RmxhZ3MuQXJyYW5nZTtcclxuICAgICAgICAgICAgVXBkYXRlci4kJHByb3BhZ2F0ZVVpRmxhZ3NVcCh0aGlzLCBVSUZsYWdzLkFycmFuZ2VIaW50KTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB1cGRhdGVCb3VuZHMgKGZvcmNlUmVkcmF3PzogYm9vbGVhbik6IFVwZGF0ZXIge1xyXG4gICAgICAgICAgICB2YXIgYXNzZXRzID0gdGhpcy5hc3NldHM7XHJcbiAgICAgICAgICAgIGFzc2V0cy5kaXJ0eUZsYWdzIHw9IERpcnR5RmxhZ3MuQm91bmRzO1xyXG4gICAgICAgICAgICBVcGRhdGVyLiQkYWRkVXBEaXJ0eSh0aGlzKTtcclxuICAgICAgICAgICAgaWYgKGZvcmNlUmVkcmF3ID09PSB0cnVlKVxyXG4gICAgICAgICAgICAgICAgYXNzZXRzLmZvcmNlSW52YWxpZGF0ZSA9IHRydWU7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVsbEludmFsaWRhdGUgKGludlRyYW5zZm9ybXM/OiBib29sZWFuKTogVXBkYXRlciB7XHJcbiAgICAgICAgICAgIHZhciBhc3NldHMgPSB0aGlzLmFzc2V0cztcclxuICAgICAgICAgICAgdGhpcy5pbnZhbGlkYXRlKGFzc2V0cy5zdXJmYWNlQm91bmRzV2l0aENoaWxkcmVuKTtcclxuICAgICAgICAgICAgaWYgKGludlRyYW5zZm9ybXMpIHtcclxuICAgICAgICAgICAgICAgIGFzc2V0cy5kaXJ0eUZsYWdzIHw9IERpcnR5RmxhZ3MuTG9jYWxUcmFuc2Zvcm07XHJcbiAgICAgICAgICAgICAgICBVcGRhdGVyLiQkYWRkRG93bkRpcnR5KHRoaXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQm91bmRzKHRydWUpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGludmFsaWRhdGUgKHJlZ2lvbj86IFJlY3QpOiBVcGRhdGVyIHtcclxuICAgICAgICAgICAgdmFyIGFzc2V0cyA9IHRoaXMuYXNzZXRzO1xyXG4gICAgICAgICAgICBpZiAoIWFzc2V0cy50b3RhbElzUmVuZGVyVmlzaWJsZSB8fCAoYXNzZXRzLnRvdGFsT3BhY2l0eSAqIDI1NSkgPCAwLjUpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgYXNzZXRzLmRpcnR5RmxhZ3MgfD0gRGlydHlGbGFncy5JbnZhbGlkYXRlO1xyXG4gICAgICAgICAgICBVcGRhdGVyLiQkYWRkVXBEaXJ0eSh0aGlzKTtcclxuICAgICAgICAgICAgaWYgKCFyZWdpb24pXHJcbiAgICAgICAgICAgICAgICByZWdpb24gPSBhc3NldHMuc3VyZmFjZUJvdW5kc1dpdGhDaGlsZHJlbjtcclxuICAgICAgICAgICAgUmVjdC51bmlvbihhc3NldHMuZGlydHlSZWdpb24sIHJlZ2lvbik7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZmluZENoaWxkSW5MaXN0IChsaXN0OiBVcGRhdGVyW10pIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGxpc3QubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChsaXN0W2ldLnRyZWUudmlzdWFsUGFyZW50ID09PSB0aGlzKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vLy8vLy8gU1RBVElDIEhFTFBFUlNcclxuXHJcbiAgICAgICAgc3RhdGljICQkYWRkVXBEaXJ0eSAodXBkYXRlcjogVXBkYXRlcikge1xyXG4gICAgICAgICAgICB2YXIgc3VyZmFjZSA9IHVwZGF0ZXIudHJlZS5zdXJmYWNlO1xyXG4gICAgICAgICAgICBpZiAoc3VyZmFjZSAmJiAhdXBkYXRlci4kJGluVXBEaXJ0eSkge1xyXG4gICAgICAgICAgICAgICAgc3VyZmFjZS5hZGRVcERpcnR5KHVwZGF0ZXIpO1xyXG4gICAgICAgICAgICAgICAgdXBkYXRlci4kJGluVXBEaXJ0eSA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN0YXRpYyAkJGFkZERvd25EaXJ0eSAodXBkYXRlcjogVXBkYXRlcikge1xyXG4gICAgICAgICAgICB2YXIgc3VyZmFjZSA9IHVwZGF0ZXIudHJlZS5zdXJmYWNlO1xyXG4gICAgICAgICAgICBpZiAoc3VyZmFjZSAmJiAhdXBkYXRlci4kJGluRG93bkRpcnR5KSB7XHJcbiAgICAgICAgICAgICAgICBzdXJmYWNlLmFkZERvd25EaXJ0eSh1cGRhdGVyKTtcclxuICAgICAgICAgICAgICAgIHVwZGF0ZXIuJCRpbkRvd25EaXJ0eSA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN0YXRpYyAkJHByb3BhZ2F0ZVVpRmxhZ3NVcCAodXBkYXRlcjogVXBkYXRlciwgZmxhZ3M6IFVJRmxhZ3MpIHtcclxuICAgICAgICAgICAgdXBkYXRlci5hc3NldHMudWlGbGFncyB8PSBmbGFncztcclxuICAgICAgICAgICAgdmFyIHZwdSA9IHVwZGF0ZXI7XHJcbiAgICAgICAgICAgIHdoaWxlICgodnB1ID0gdnB1LnRyZWUudmlzdWFsUGFyZW50KSAhPSBudWxsICYmICh2cHUuYXNzZXRzLnVpRmxhZ3MgJiBmbGFncykgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIHZwdS5hc3NldHMudWlGbGFncyB8PSBmbGFncztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3RhdGljIHRyYW5zZm9ybVRvVmlzdWFsIChmcm9tVXBkYXRlcjogVXBkYXRlciwgdG9VcGRhdGVyPzogVXBkYXRlcik6IG51bWJlcltdIHtcclxuICAgICAgICAgICAgaWYgKCFmcm9tVXBkYXRlci50cmVlLnN1cmZhY2UgfHwgKHRvVXBkYXRlciAmJiAhdG9VcGRhdGVyLnRyZWUuc3VyZmFjZSkpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIC8vMS4gaW52ZXJ0IHRyYW5zZm9ybSBmcm9tIGlucHV0IGVsZW1lbnQgdG8gdG9wIGxldmVsXHJcbiAgICAgICAgICAgIC8vMi4gdHJhbnNmb3JtIGJhY2sgZG93biB0byB0aGlzIGVsZW1lbnRcclxuICAgICAgICAgICAgdmFyIG0gPSBtYXQzLmNyZWF0ZSgpO1xyXG4gICAgICAgICAgICB2YXIgYSA9IGZyb21VcGRhdGVyLmFzc2V0cy5hYnNvbHV0ZVhmb3JtO1xyXG4gICAgICAgICAgICAvLyBBID0gRnJvbSwgQiA9IFRvLCBNID0gd2hhdCB3ZSB3YW50XHJcbiAgICAgICAgICAgIC8vIEEgPSBNICogQlxyXG4gICAgICAgICAgICAvLyA9PiBNID0gQSAqIGludihCKVxyXG4gICAgICAgICAgICBpZiAodG9VcGRhdGVyKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaW52QiA9IG1hdDMuaW52ZXJzZSh0b1VwZGF0ZXIuYXNzZXRzLmFic29sdXRlWGZvcm0sIG1hdDMuY3JlYXRlKCkpO1xyXG4gICAgICAgICAgICAgICAgbWF0My5tdWx0aXBseShhLCBpbnZCLCBtKTsgLy9NID0gQSAqIGludihCKVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbWF0My5jb3B5VG8oYSwgbSk7IC8vTSA9IEFcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIG07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzdGF0aWMgdHJhbnNmb3JtUG9pbnQgKHVwZGF0ZXI6IFVwZGF0ZXIsIHA6IFBvaW50KSB7XHJcbiAgICAgICAgICAgIHZhciBpbnZlcnNlOiBudW1iZXJbXSA9IG1hdDMuaW52ZXJzZSh1cGRhdGVyLmFzc2V0cy5hYnNvbHV0ZVhmb3JtLCBtYXQzLmNyZWF0ZSgpKTtcclxuICAgICAgICAgICAgaWYgKCFpbnZlcnNlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJDb3VsZCBub3QgZ2V0IGludmVyc2Ugb2YgQWJzb2x1dGUgVHJhbnNmb3JtIGZvciBVSUVsZW1lbnQuXCIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgcDI6IG51bWJlcltdID0gdmVjMi5jcmVhdGUocC54LCBwLnkpO1xyXG4gICAgICAgICAgICBtYXQzLnRyYW5zZm9ybVZlYzIoaW52ZXJzZSwgcDIpO1xyXG4gICAgICAgICAgICBwLnggPSBwMlswXTtcclxuICAgICAgICAgICAgcC55ID0gcDJbMV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwidmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICBtaW5lcnZhLnZlcnNpb24gPSAnMC43LjYnO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIChmdW5jdGlvbiAoSG9yaXpvbnRhbEFsaWdubWVudCkge1xuICAgICAgICBIb3Jpem9udGFsQWxpZ25tZW50W0hvcml6b250YWxBbGlnbm1lbnRbXCJMZWZ0XCJdID0gMF0gPSBcIkxlZnRcIjtcbiAgICAgICAgSG9yaXpvbnRhbEFsaWdubWVudFtIb3Jpem9udGFsQWxpZ25tZW50W1wiQ2VudGVyXCJdID0gMV0gPSBcIkNlbnRlclwiO1xuICAgICAgICBIb3Jpem9udGFsQWxpZ25tZW50W0hvcml6b250YWxBbGlnbm1lbnRbXCJSaWdodFwiXSA9IDJdID0gXCJSaWdodFwiO1xuICAgICAgICBIb3Jpem9udGFsQWxpZ25tZW50W0hvcml6b250YWxBbGlnbm1lbnRbXCJTdHJldGNoXCJdID0gM10gPSBcIlN0cmV0Y2hcIjtcbiAgICB9KShtaW5lcnZhLkhvcml6b250YWxBbGlnbm1lbnQgfHwgKG1pbmVydmEuSG9yaXpvbnRhbEFsaWdubWVudCA9IHt9KSk7XG4gICAgdmFyIEhvcml6b250YWxBbGlnbm1lbnQgPSBtaW5lcnZhLkhvcml6b250YWxBbGlnbm1lbnQ7XG4gICAgKGZ1bmN0aW9uIChWZXJ0aWNhbEFsaWdubWVudCkge1xuICAgICAgICBWZXJ0aWNhbEFsaWdubWVudFtWZXJ0aWNhbEFsaWdubWVudFtcIlRvcFwiXSA9IDBdID0gXCJUb3BcIjtcbiAgICAgICAgVmVydGljYWxBbGlnbm1lbnRbVmVydGljYWxBbGlnbm1lbnRbXCJDZW50ZXJcIl0gPSAxXSA9IFwiQ2VudGVyXCI7XG4gICAgICAgIFZlcnRpY2FsQWxpZ25tZW50W1ZlcnRpY2FsQWxpZ25tZW50W1wiQm90dG9tXCJdID0gMl0gPSBcIkJvdHRvbVwiO1xuICAgICAgICBWZXJ0aWNhbEFsaWdubWVudFtWZXJ0aWNhbEFsaWdubWVudFtcIlN0cmV0Y2hcIl0gPSAzXSA9IFwiU3RyZXRjaFwiO1xuICAgIH0pKG1pbmVydmEuVmVydGljYWxBbGlnbm1lbnQgfHwgKG1pbmVydmEuVmVydGljYWxBbGlnbm1lbnQgPSB7fSkpO1xuICAgIHZhciBWZXJ0aWNhbEFsaWdubWVudCA9IG1pbmVydmEuVmVydGljYWxBbGlnbm1lbnQ7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIENvcm5lclJhZGl1cyA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIENvcm5lclJhZGl1cyh0b3BMZWZ0LCB0b3BSaWdodCwgYm90dG9tUmlnaHQsIGJvdHRvbUxlZnQpIHtcbiAgICAgICAgICAgIHRoaXMudG9wTGVmdCA9IHRvcExlZnQgPT0gbnVsbCA/IDAgOiB0b3BMZWZ0O1xuICAgICAgICAgICAgdGhpcy50b3BSaWdodCA9IHRvcFJpZ2h0ID09IG51bGwgPyAwIDogdG9wUmlnaHQ7XG4gICAgICAgICAgICB0aGlzLmJvdHRvbVJpZ2h0ID0gYm90dG9tUmlnaHQgPT0gbnVsbCA/IDAgOiBib3R0b21SaWdodDtcbiAgICAgICAgICAgIHRoaXMuYm90dG9tTGVmdCA9IGJvdHRvbUxlZnQgPT0gbnVsbCA/IDAgOiBib3R0b21MZWZ0O1xuICAgICAgICB9XG4gICAgICAgIENvcm5lclJhZGl1cy5pc0VtcHR5ID0gZnVuY3Rpb24gKGNyKSB7XG4gICAgICAgICAgICByZXR1cm4gY3IudG9wTGVmdCA9PT0gMFxuICAgICAgICAgICAgICAgICYmIGNyLnRvcFJpZ2h0ID09PSAwXG4gICAgICAgICAgICAgICAgJiYgY3IuYm90dG9tUmlnaHQgPT09IDBcbiAgICAgICAgICAgICAgICAmJiBjci5ib3R0b21MZWZ0ID09PSAwO1xuICAgICAgICB9O1xuICAgICAgICBDb3JuZXJSYWRpdXMuaXNFcXVhbCA9IGZ1bmN0aW9uIChjcjEsIGNyMikge1xuICAgICAgICAgICAgcmV0dXJuIGNyMS50b3BMZWZ0ID09PSBjcjIudG9wTGVmdFxuICAgICAgICAgICAgICAgICYmIGNyMS50b3BSaWdodCA9PT0gY3IyLnRvcFJpZ2h0XG4gICAgICAgICAgICAgICAgJiYgY3IxLmJvdHRvbVJpZ2h0ID09PSBjcjIuYm90dG9tUmlnaHRcbiAgICAgICAgICAgICAgICAmJiBjcjEuYm90dG9tTGVmdCA9PT0gY3IyLmJvdHRvbUxlZnQ7XG4gICAgICAgIH07XG4gICAgICAgIENvcm5lclJhZGl1cy5jbGVhciA9IGZ1bmN0aW9uIChkZXN0KSB7XG4gICAgICAgICAgICBkZXN0LnRvcExlZnQgPSBkZXN0LnRvcFJpZ2h0ID0gZGVzdC5ib3R0b21SaWdodCA9IGRlc3QuYm90dG9tTGVmdCA9IDA7XG4gICAgICAgIH07XG4gICAgICAgIENvcm5lclJhZGl1cy5jb3B5VG8gPSBmdW5jdGlvbiAoY3IyLCBkZXN0KSB7XG4gICAgICAgICAgICBkZXN0LnRvcExlZnQgPSBjcjIudG9wTGVmdDtcbiAgICAgICAgICAgIGRlc3QudG9wUmlnaHQgPSBjcjIudG9wUmlnaHQ7XG4gICAgICAgICAgICBkZXN0LmJvdHRvbVJpZ2h0ID0gY3IyLmJvdHRvbVJpZ2h0O1xuICAgICAgICAgICAgZGVzdC5ib3R0b21MZWZ0ID0gY3IyLmJvdHRvbUxlZnQ7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBDb3JuZXJSYWRpdXM7XG4gICAgfSkoKTtcbiAgICBtaW5lcnZhLkNvcm5lclJhZGl1cyA9IENvcm5lclJhZGl1cztcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICAoZnVuY3Rpb24gKE9yaWVudGF0aW9uKSB7XG4gICAgICAgIE9yaWVudGF0aW9uW09yaWVudGF0aW9uW1wiSG9yaXpvbnRhbFwiXSA9IDBdID0gXCJIb3Jpem9udGFsXCI7XG4gICAgICAgIE9yaWVudGF0aW9uW09yaWVudGF0aW9uW1wiVmVydGljYWxcIl0gPSAxXSA9IFwiVmVydGljYWxcIjtcbiAgICB9KShtaW5lcnZhLk9yaWVudGF0aW9uIHx8IChtaW5lcnZhLk9yaWVudGF0aW9uID0ge30pKTtcbiAgICB2YXIgT3JpZW50YXRpb24gPSBtaW5lcnZhLk9yaWVudGF0aW9uO1xuICAgIChmdW5jdGlvbiAoUGVuTGluZUpvaW4pIHtcbiAgICAgICAgUGVuTGluZUpvaW5bUGVuTGluZUpvaW5bXCJNaXRlclwiXSA9IDBdID0gXCJNaXRlclwiO1xuICAgICAgICBQZW5MaW5lSm9pbltQZW5MaW5lSm9pbltcIkJldmVsXCJdID0gMV0gPSBcIkJldmVsXCI7XG4gICAgICAgIFBlbkxpbmVKb2luW1BlbkxpbmVKb2luW1wiUm91bmRcIl0gPSAyXSA9IFwiUm91bmRcIjtcbiAgICB9KShtaW5lcnZhLlBlbkxpbmVKb2luIHx8IChtaW5lcnZhLlBlbkxpbmVKb2luID0ge30pKTtcbiAgICB2YXIgUGVuTGluZUpvaW4gPSBtaW5lcnZhLlBlbkxpbmVKb2luO1xuICAgIChmdW5jdGlvbiAoUGVuTGluZUNhcCkge1xuICAgICAgICBQZW5MaW5lQ2FwW1BlbkxpbmVDYXBbXCJGbGF0XCJdID0gMF0gPSBcIkZsYXRcIjtcbiAgICAgICAgUGVuTGluZUNhcFtQZW5MaW5lQ2FwW1wiU3F1YXJlXCJdID0gMV0gPSBcIlNxdWFyZVwiO1xuICAgICAgICBQZW5MaW5lQ2FwW1BlbkxpbmVDYXBbXCJSb3VuZFwiXSA9IDJdID0gXCJSb3VuZFwiO1xuICAgICAgICBQZW5MaW5lQ2FwW1BlbkxpbmVDYXBbXCJUcmlhbmdsZVwiXSA9IDNdID0gXCJUcmlhbmdsZVwiO1xuICAgIH0pKG1pbmVydmEuUGVuTGluZUNhcCB8fCAobWluZXJ2YS5QZW5MaW5lQ2FwID0ge30pKTtcbiAgICB2YXIgUGVuTGluZUNhcCA9IG1pbmVydmEuUGVuTGluZUNhcDtcbiAgICAoZnVuY3Rpb24gKEZpbGxSdWxlKSB7XG4gICAgICAgIEZpbGxSdWxlW0ZpbGxSdWxlW1wiRXZlbk9kZFwiXSA9IDBdID0gXCJFdmVuT2RkXCI7XG4gICAgICAgIEZpbGxSdWxlW0ZpbGxSdWxlW1wiTm9uWmVyb1wiXSA9IDFdID0gXCJOb25aZXJvXCI7XG4gICAgfSkobWluZXJ2YS5GaWxsUnVsZSB8fCAobWluZXJ2YS5GaWxsUnVsZSA9IHt9KSk7XG4gICAgdmFyIEZpbGxSdWxlID0gbWluZXJ2YS5GaWxsUnVsZTtcbiAgICAoZnVuY3Rpb24gKFN0cmV0Y2gpIHtcbiAgICAgICAgU3RyZXRjaFtTdHJldGNoW1wiTm9uZVwiXSA9IDBdID0gXCJOb25lXCI7XG4gICAgICAgIFN0cmV0Y2hbU3RyZXRjaFtcIkZpbGxcIl0gPSAxXSA9IFwiRmlsbFwiO1xuICAgICAgICBTdHJldGNoW1N0cmV0Y2hbXCJVbmlmb3JtXCJdID0gMl0gPSBcIlVuaWZvcm1cIjtcbiAgICAgICAgU3RyZXRjaFtTdHJldGNoW1wiVW5pZm9ybVRvRmlsbFwiXSA9IDNdID0gXCJVbmlmb3JtVG9GaWxsXCI7XG4gICAgfSkobWluZXJ2YS5TdHJldGNoIHx8IChtaW5lcnZhLlN0cmV0Y2ggPSB7fSkpO1xuICAgIHZhciBTdHJldGNoID0gbWluZXJ2YS5TdHJldGNoO1xuICAgIChmdW5jdGlvbiAoRmxvd0RpcmVjdGlvbikge1xuICAgICAgICBGbG93RGlyZWN0aW9uW0Zsb3dEaXJlY3Rpb25bXCJMZWZ0VG9SaWdodFwiXSA9IDBdID0gXCJMZWZ0VG9SaWdodFwiO1xuICAgICAgICBGbG93RGlyZWN0aW9uW0Zsb3dEaXJlY3Rpb25bXCJSaWdodFRvTGVmdFwiXSA9IDFdID0gXCJSaWdodFRvTGVmdFwiO1xuICAgIH0pKG1pbmVydmEuRmxvd0RpcmVjdGlvbiB8fCAobWluZXJ2YS5GbG93RGlyZWN0aW9uID0ge30pKTtcbiAgICB2YXIgRmxvd0RpcmVjdGlvbiA9IG1pbmVydmEuRmxvd0RpcmVjdGlvbjtcbiAgICAoZnVuY3Rpb24gKExpbmVTdGFja2luZ1N0cmF0ZWd5KSB7XG4gICAgICAgIExpbmVTdGFja2luZ1N0cmF0ZWd5W0xpbmVTdGFja2luZ1N0cmF0ZWd5W1wiTWF4SGVpZ2h0XCJdID0gMF0gPSBcIk1heEhlaWdodFwiO1xuICAgICAgICBMaW5lU3RhY2tpbmdTdHJhdGVneVtMaW5lU3RhY2tpbmdTdHJhdGVneVtcIkJsb2NrTGluZUhlaWdodFwiXSA9IDFdID0gXCJCbG9ja0xpbmVIZWlnaHRcIjtcbiAgICB9KShtaW5lcnZhLkxpbmVTdGFja2luZ1N0cmF0ZWd5IHx8IChtaW5lcnZhLkxpbmVTdGFja2luZ1N0cmF0ZWd5ID0ge30pKTtcbiAgICB2YXIgTGluZVN0YWNraW5nU3RyYXRlZ3kgPSBtaW5lcnZhLkxpbmVTdGFja2luZ1N0cmF0ZWd5O1xuICAgIChmdW5jdGlvbiAoVGV4dEFsaWdubWVudCkge1xuICAgICAgICBUZXh0QWxpZ25tZW50W1RleHRBbGlnbm1lbnRbXCJMZWZ0XCJdID0gMF0gPSBcIkxlZnRcIjtcbiAgICAgICAgVGV4dEFsaWdubWVudFtUZXh0QWxpZ25tZW50W1wiQ2VudGVyXCJdID0gMV0gPSBcIkNlbnRlclwiO1xuICAgICAgICBUZXh0QWxpZ25tZW50W1RleHRBbGlnbm1lbnRbXCJSaWdodFwiXSA9IDJdID0gXCJSaWdodFwiO1xuICAgICAgICBUZXh0QWxpZ25tZW50W1RleHRBbGlnbm1lbnRbXCJKdXN0aWZ5XCJdID0gM10gPSBcIkp1c3RpZnlcIjtcbiAgICB9KShtaW5lcnZhLlRleHRBbGlnbm1lbnQgfHwgKG1pbmVydmEuVGV4dEFsaWdubWVudCA9IHt9KSk7XG4gICAgdmFyIFRleHRBbGlnbm1lbnQgPSBtaW5lcnZhLlRleHRBbGlnbm1lbnQ7XG4gICAgKGZ1bmN0aW9uIChUZXh0VHJpbW1pbmcpIHtcbiAgICAgICAgVGV4dFRyaW1taW5nW1RleHRUcmltbWluZ1tcIk5vbmVcIl0gPSAwXSA9IFwiTm9uZVwiO1xuICAgICAgICBUZXh0VHJpbW1pbmdbVGV4dFRyaW1taW5nW1wiV29yZEVsbGlwc2lzXCJdID0gMV0gPSBcIldvcmRFbGxpcHNpc1wiO1xuICAgICAgICBUZXh0VHJpbW1pbmdbVGV4dFRyaW1taW5nW1wiQ2hhcmFjdGVyRWxsaXBzaXNcIl0gPSAyXSA9IFwiQ2hhcmFjdGVyRWxsaXBzaXNcIjtcbiAgICB9KShtaW5lcnZhLlRleHRUcmltbWluZyB8fCAobWluZXJ2YS5UZXh0VHJpbW1pbmcgPSB7fSkpO1xuICAgIHZhciBUZXh0VHJpbW1pbmcgPSBtaW5lcnZhLlRleHRUcmltbWluZztcbiAgICAoZnVuY3Rpb24gKFRleHRXcmFwcGluZykge1xuICAgICAgICBUZXh0V3JhcHBpbmdbVGV4dFdyYXBwaW5nW1wiTm9XcmFwXCJdID0gMF0gPSBcIk5vV3JhcFwiO1xuICAgICAgICBUZXh0V3JhcHBpbmdbVGV4dFdyYXBwaW5nW1wiV3JhcFwiXSA9IDFdID0gXCJXcmFwXCI7XG4gICAgICAgIFRleHRXcmFwcGluZ1tUZXh0V3JhcHBpbmdbXCJXcmFwV2l0aE92ZXJmbG93XCJdID0gMl0gPSBcIldyYXBXaXRoT3ZlcmZsb3dcIjtcbiAgICB9KShtaW5lcnZhLlRleHRXcmFwcGluZyB8fCAobWluZXJ2YS5UZXh0V3JhcHBpbmcgPSB7fSkpO1xuICAgIHZhciBUZXh0V3JhcHBpbmcgPSBtaW5lcnZhLlRleHRXcmFwcGluZztcbiAgICAoZnVuY3Rpb24gKFRleHREZWNvcmF0aW9ucykge1xuICAgICAgICBUZXh0RGVjb3JhdGlvbnNbVGV4dERlY29yYXRpb25zW1wiTm9uZVwiXSA9IDBdID0gXCJOb25lXCI7XG4gICAgICAgIFRleHREZWNvcmF0aW9uc1tUZXh0RGVjb3JhdGlvbnNbXCJVbmRlcmxpbmVcIl0gPSAxXSA9IFwiVW5kZXJsaW5lXCI7XG4gICAgfSkobWluZXJ2YS5UZXh0RGVjb3JhdGlvbnMgfHwgKG1pbmVydmEuVGV4dERlY29yYXRpb25zID0ge30pKTtcbiAgICB2YXIgVGV4dERlY29yYXRpb25zID0gbWluZXJ2YS5UZXh0RGVjb3JhdGlvbnM7XG4gICAgKGZ1bmN0aW9uIChGb250V2VpZ2h0KSB7XG4gICAgICAgIEZvbnRXZWlnaHRbRm9udFdlaWdodFtcIlRoaW5cIl0gPSAxMDBdID0gXCJUaGluXCI7XG4gICAgICAgIEZvbnRXZWlnaHRbRm9udFdlaWdodFtcIkV4dHJhTGlnaHRcIl0gPSAyMDBdID0gXCJFeHRyYUxpZ2h0XCI7XG4gICAgICAgIEZvbnRXZWlnaHRbRm9udFdlaWdodFtcIkxpZ2h0XCJdID0gMzAwXSA9IFwiTGlnaHRcIjtcbiAgICAgICAgRm9udFdlaWdodFtGb250V2VpZ2h0W1wiTm9ybWFsXCJdID0gNDAwXSA9IFwiTm9ybWFsXCI7XG4gICAgICAgIEZvbnRXZWlnaHRbRm9udFdlaWdodFtcIk1lZGl1bVwiXSA9IDUwMF0gPSBcIk1lZGl1bVwiO1xuICAgICAgICBGb250V2VpZ2h0W0ZvbnRXZWlnaHRbXCJTZW1pQm9sZFwiXSA9IDYwMF0gPSBcIlNlbWlCb2xkXCI7XG4gICAgICAgIEZvbnRXZWlnaHRbRm9udFdlaWdodFtcIkJvbGRcIl0gPSA3MDBdID0gXCJCb2xkXCI7XG4gICAgICAgIEZvbnRXZWlnaHRbRm9udFdlaWdodFtcIkV4dHJhQm9sZFwiXSA9IDgwMF0gPSBcIkV4dHJhQm9sZFwiO1xuICAgICAgICBGb250V2VpZ2h0W0ZvbnRXZWlnaHRbXCJCbGFja1wiXSA9IDkwMF0gPSBcIkJsYWNrXCI7XG4gICAgICAgIEZvbnRXZWlnaHRbRm9udFdlaWdodFtcIkV4dHJhQmxhY2tcIl0gPSA5NTBdID0gXCJFeHRyYUJsYWNrXCI7XG4gICAgfSkobWluZXJ2YS5Gb250V2VpZ2h0IHx8IChtaW5lcnZhLkZvbnRXZWlnaHQgPSB7fSkpO1xuICAgIHZhciBGb250V2VpZ2h0ID0gbWluZXJ2YS5Gb250V2VpZ2h0O1xuICAgIChmdW5jdGlvbiAoU3dlZXBEaXJlY3Rpb24pIHtcbiAgICAgICAgU3dlZXBEaXJlY3Rpb25bU3dlZXBEaXJlY3Rpb25bXCJDb3VudGVyY2xvY2t3aXNlXCJdID0gMF0gPSBcIkNvdW50ZXJjbG9ja3dpc2VcIjtcbiAgICAgICAgU3dlZXBEaXJlY3Rpb25bU3dlZXBEaXJlY3Rpb25bXCJDbG9ja3dpc2VcIl0gPSAxXSA9IFwiQ2xvY2t3aXNlXCI7XG4gICAgfSkobWluZXJ2YS5Td2VlcERpcmVjdGlvbiB8fCAobWluZXJ2YS5Td2VlcERpcmVjdGlvbiA9IHt9KSk7XG4gICAgdmFyIFN3ZWVwRGlyZWN0aW9uID0gbWluZXJ2YS5Td2VlcERpcmVjdGlvbjtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgaGl0VGVzdEN0eCA9IG51bGw7XG4gICAgZnVuY3Rpb24gZmluZEVsZW1lbnRzSW5Ib3N0U3BhY2UocG9zLCBob3N0KSB7XG4gICAgICAgIGhpdFRlc3RDdHggPSBoaXRUZXN0Q3R4IHx8IG5ldyBtaW5lcnZhLmNvcmUucmVuZGVyLlJlbmRlckNvbnRleHQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJykuZ2V0Q29udGV4dCgnMmQnKSk7XG4gICAgICAgIHZhciBpbnYgPSBtaW5lcnZhLm1hdDMuaW52ZXJzZShob3N0LmFzc2V0cy5yZW5kZXJYZm9ybSwgbWluZXJ2YS5tYXQzLmNyZWF0ZSgpKTtcbiAgICAgICAgaGl0VGVzdEN0eC5zYXZlKCk7XG4gICAgICAgIGhpdFRlc3RDdHgucHJlYXBwbHkoaW52KTtcbiAgICAgICAgdmFyIGxpc3QgPSBbXTtcbiAgICAgICAgaG9zdC5oaXRUZXN0KHBvcywgbGlzdCwgaGl0VGVzdEN0eCwgdHJ1ZSk7XG4gICAgICAgIGhpdFRlc3RDdHgucmVzdG9yZSgpO1xuICAgICAgICByZXR1cm4gbGlzdDtcbiAgICB9XG4gICAgbWluZXJ2YS5maW5kRWxlbWVudHNJbkhvc3RTcGFjZSA9IGZpbmRFbGVtZW50c0luSG9zdFNwYWNlO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIChmdW5jdGlvbiAoRGlydHlGbGFncykge1xuICAgICAgICBEaXJ0eUZsYWdzW0RpcnR5RmxhZ3NbXCJUcmFuc2Zvcm1cIl0gPSAxXSA9IFwiVHJhbnNmb3JtXCI7XG4gICAgICAgIERpcnR5RmxhZ3NbRGlydHlGbGFnc1tcIkxvY2FsVHJhbnNmb3JtXCJdID0gMl0gPSBcIkxvY2FsVHJhbnNmb3JtXCI7XG4gICAgICAgIERpcnR5RmxhZ3NbRGlydHlGbGFnc1tcIkNsaXBcIl0gPSA4XSA9IFwiQ2xpcFwiO1xuICAgICAgICBEaXJ0eUZsYWdzW0RpcnR5RmxhZ3NbXCJMb2NhbENsaXBcIl0gPSAxNl0gPSBcIkxvY2FsQ2xpcFwiO1xuICAgICAgICBEaXJ0eUZsYWdzW0RpcnR5RmxhZ3NbXCJMYXlvdXRDbGlwXCJdID0gMzJdID0gXCJMYXlvdXRDbGlwXCI7XG4gICAgICAgIERpcnR5RmxhZ3NbRGlydHlGbGFnc1tcIlJlbmRlclZpc2liaWxpdHlcIl0gPSA2NF0gPSBcIlJlbmRlclZpc2liaWxpdHlcIjtcbiAgICAgICAgRGlydHlGbGFnc1tEaXJ0eUZsYWdzW1wiSGl0VGVzdFZpc2liaWxpdHlcIl0gPSAxMjhdID0gXCJIaXRUZXN0VmlzaWJpbGl0eVwiO1xuICAgICAgICBEaXJ0eUZsYWdzW0RpcnR5RmxhZ3NbXCJJbWFnZU1ldHJpY3NcIl0gPSAyNTZdID0gXCJJbWFnZU1ldHJpY3NcIjtcbiAgICAgICAgRGlydHlGbGFnc1tEaXJ0eUZsYWdzW1wiTWVhc3VyZVwiXSA9IDUxMl0gPSBcIk1lYXN1cmVcIjtcbiAgICAgICAgRGlydHlGbGFnc1tEaXJ0eUZsYWdzW1wiQXJyYW5nZVwiXSA9IDEwMjRdID0gXCJBcnJhbmdlXCI7XG4gICAgICAgIERpcnR5RmxhZ3NbRGlydHlGbGFnc1tcIkJvdW5kc1wiXSA9IDEwNDg1NzZdID0gXCJCb3VuZHNcIjtcbiAgICAgICAgRGlydHlGbGFnc1tEaXJ0eUZsYWdzW1wiTmV3Qm91bmRzXCJdID0gMjA5NzE1Ml0gPSBcIk5ld0JvdW5kc1wiO1xuICAgICAgICBEaXJ0eUZsYWdzW0RpcnR5RmxhZ3NbXCJJbnZhbGlkYXRlXCJdID0gNDE5NDMwNF0gPSBcIkludmFsaWRhdGVcIjtcbiAgICAgICAgRGlydHlGbGFnc1tEaXJ0eUZsYWdzW1wiSW5VcERpcnR5TGlzdFwiXSA9IDEwNzM3NDE4MjRdID0gXCJJblVwRGlydHlMaXN0XCI7XG4gICAgICAgIERpcnR5RmxhZ3NbRGlydHlGbGFnc1tcIkluRG93bkRpcnR5TGlzdFwiXSA9IC0yMTQ3NDgzNjQ4XSA9IFwiSW5Eb3duRGlydHlMaXN0XCI7XG4gICAgICAgIERpcnR5RmxhZ3NbRGlydHlGbGFnc1tcIkRvd25EaXJ0eVN0YXRlXCJdID0gNTA3XSA9IFwiRG93bkRpcnR5U3RhdGVcIjtcbiAgICAgICAgRGlydHlGbGFnc1tEaXJ0eUZsYWdzW1wiVXBEaXJ0eVN0YXRlXCJdID0gNzM0MDAzMl0gPSBcIlVwRGlydHlTdGF0ZVwiO1xuICAgICAgICBEaXJ0eUZsYWdzW0RpcnR5RmxhZ3NbXCJQcm9wYWdhdGVEb3duXCJdID0gMjI1XSA9IFwiUHJvcGFnYXRlRG93blwiO1xuICAgIH0pKG1pbmVydmEuRGlydHlGbGFncyB8fCAobWluZXJ2YS5EaXJ0eUZsYWdzID0ge30pKTtcbiAgICB2YXIgRGlydHlGbGFncyA9IG1pbmVydmEuRGlydHlGbGFncztcbiAgICAoZnVuY3Rpb24gKFVJRmxhZ3MpIHtcbiAgICAgICAgVUlGbGFnc1tVSUZsYWdzW1wiTm9uZVwiXSA9IDBdID0gXCJOb25lXCI7XG4gICAgICAgIFVJRmxhZ3NbVUlGbGFnc1tcIlJlbmRlclZpc2libGVcIl0gPSAyXSA9IFwiUmVuZGVyVmlzaWJsZVwiO1xuICAgICAgICBVSUZsYWdzW1VJRmxhZ3NbXCJIaXRUZXN0VmlzaWJsZVwiXSA9IDRdID0gXCJIaXRUZXN0VmlzaWJsZVwiO1xuICAgICAgICBVSUZsYWdzW1VJRmxhZ3NbXCJUb3RhbFJlbmRlclZpc2libGVcIl0gPSA4XSA9IFwiVG90YWxSZW5kZXJWaXNpYmxlXCI7XG4gICAgICAgIFVJRmxhZ3NbVUlGbGFnc1tcIlRvdGFsSGl0VGVzdFZpc2libGVcIl0gPSAxNl0gPSBcIlRvdGFsSGl0VGVzdFZpc2libGVcIjtcbiAgICAgICAgVUlGbGFnc1tVSUZsYWdzW1wiTWVhc3VyZUhpbnRcIl0gPSAyMDQ4XSA9IFwiTWVhc3VyZUhpbnRcIjtcbiAgICAgICAgVUlGbGFnc1tVSUZsYWdzW1wiQXJyYW5nZUhpbnRcIl0gPSA0MDk2XSA9IFwiQXJyYW5nZUhpbnRcIjtcbiAgICAgICAgVUlGbGFnc1tVSUZsYWdzW1wiU2l6ZUhpbnRcIl0gPSA4MTkyXSA9IFwiU2l6ZUhpbnRcIjtcbiAgICAgICAgVUlGbGFnc1tVSUZsYWdzW1wiSGludHNcIl0gPSAxNDMzNl0gPSBcIkhpbnRzXCI7XG4gICAgfSkobWluZXJ2YS5VSUZsYWdzIHx8IChtaW5lcnZhLlVJRmxhZ3MgPSB7fSkpO1xuICAgIHZhciBVSUZsYWdzID0gbWluZXJ2YS5VSUZsYWdzO1xuICAgIChmdW5jdGlvbiAoU2hhcGVGbGFncykge1xuICAgICAgICBTaGFwZUZsYWdzW1NoYXBlRmxhZ3NbXCJOb25lXCJdID0gMF0gPSBcIk5vbmVcIjtcbiAgICAgICAgU2hhcGVGbGFnc1tTaGFwZUZsYWdzW1wiRW1wdHlcIl0gPSAxXSA9IFwiRW1wdHlcIjtcbiAgICAgICAgU2hhcGVGbGFnc1tTaGFwZUZsYWdzW1wiTm9ybWFsXCJdID0gMl0gPSBcIk5vcm1hbFwiO1xuICAgICAgICBTaGFwZUZsYWdzW1NoYXBlRmxhZ3NbXCJEZWdlbmVyYXRlXCJdID0gNF0gPSBcIkRlZ2VuZXJhdGVcIjtcbiAgICAgICAgU2hhcGVGbGFnc1tTaGFwZUZsYWdzW1wiUmFkaWlcIl0gPSA4XSA9IFwiUmFkaWlcIjtcbiAgICB9KShtaW5lcnZhLlNoYXBlRmxhZ3MgfHwgKG1pbmVydmEuU2hhcGVGbGFncyA9IHt9KSk7XG4gICAgdmFyIFNoYXBlRmxhZ3MgPSBtaW5lcnZhLlNoYXBlRmxhZ3M7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJFbnVtcy50c1wiIC8+XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIG1pbmVydmEuRm9udFN0eWxlID0ge1xuICAgICAgICBOb3JtYWw6IFwibm9ybWFsXCIsXG4gICAgICAgIEl0YWxpYzogXCJpdGFsaWNcIixcbiAgICAgICAgT2JsaXF1ZTogXCJvYmxpcXVlXCJcbiAgICB9O1xuICAgIG1pbmVydmEuRm9udFN0cmV0Y2ggPSB7XG4gICAgICAgIFVsdHJhQ29uZGVuc2VkOiBcInVsdHJhLWNvbmRlbnNlZFwiLFxuICAgICAgICBFeHRyYUNvbmRlbnNlZDogXCJleHRyYS1jb25kZW5zZWRcIixcbiAgICAgICAgQ29uZGVuc2VkOiBcImNvbmRlbnNlZFwiLFxuICAgICAgICBTZW1pQ29uZGVuc2VkOiBcInNlbWktY29uZGVuc2VkXCIsXG4gICAgICAgIE5vcm1hbDogXCJub3JtYWxcIixcbiAgICAgICAgU2VtaUV4cGFuZGVkOiBcInNlbWktZXhwYW5kZWRcIixcbiAgICAgICAgRXhwYW5kZWQ6IFwiZXhwYW5kZWRcIixcbiAgICAgICAgRXh0cmFFeHBhbmRlZDogXCJleHRyYS1leHBhbmRlZFwiLFxuICAgICAgICBVbHRyYUV4cGFuZGVkOiBcInVsdHJhLWV4cGFuZGVkXCJcbiAgICB9O1xuICAgIHZhciBGb250ID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gRm9udCgpIHtcbiAgICAgICAgICAgIHRoaXMuZmFtaWx5ID0gRm9udC5ERUZBVUxUX0ZBTUlMWTtcbiAgICAgICAgICAgIHRoaXMuc2l6ZSA9IEZvbnQuREVGQVVMVF9TSVpFO1xuICAgICAgICAgICAgdGhpcy5zdHJldGNoID0gRm9udC5ERUZBVUxUX1NUUkVUQ0g7XG4gICAgICAgICAgICB0aGlzLnN0eWxlID0gRm9udC5ERUZBVUxUX1NUWUxFO1xuICAgICAgICAgICAgdGhpcy53ZWlnaHQgPSBGb250LkRFRkFVTFRfV0VJR0hUO1xuICAgICAgICAgICAgdGhpcy4kJGNhY2hlZE9iaiA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLiQkY2FjaGVkSGVpZ2h0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBGb250Lm1lcmdlSW50byA9IGZ1bmN0aW9uIChmb250LCBmYW1pbHksIHNpemUsIHN0cmV0Y2gsIHN0eWxlLCB3ZWlnaHQpIHtcbiAgICAgICAgICAgIHZhciBjaGFuZ2VkID0gZm9udC5mYW1pbHkgIT09IGZhbWlseVxuICAgICAgICAgICAgICAgIHx8IGZvbnQuc2l6ZSAhPT0gc2l6ZVxuICAgICAgICAgICAgICAgIHx8IGZvbnQuc3RyZXRjaCAhPT0gc3RyZXRjaFxuICAgICAgICAgICAgICAgIHx8IGZvbnQuc3R5bGUgIT09IHN0eWxlXG4gICAgICAgICAgICAgICAgfHwgZm9udC53ZWlnaHQgIT09IHdlaWdodDtcbiAgICAgICAgICAgIGZvbnQuZmFtaWx5ID0gZmFtaWx5O1xuICAgICAgICAgICAgZm9udC5zaXplID0gc2l6ZTtcbiAgICAgICAgICAgIGZvbnQuc3RyZXRjaCA9IHN0cmV0Y2g7XG4gICAgICAgICAgICBmb250LnN0eWxlID0gc3R5bGU7XG4gICAgICAgICAgICBmb250LndlaWdodCA9IHdlaWdodDtcbiAgICAgICAgICAgIGlmIChjaGFuZ2VkKSB7XG4gICAgICAgICAgICAgICAgZm9udC4kJGNhY2hlZE9iaiA9IG51bGw7XG4gICAgICAgICAgICAgICAgZm9udC4kJGNhY2hlZEhlaWdodCA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY2hhbmdlZDtcbiAgICAgICAgfTtcbiAgICAgICAgRm9udC5wcm90b3R5cGUudG9IdG1sNU9iamVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiQkY2FjaGVkT2JqID0gdGhpcy4kJGNhY2hlZE9iaiB8fCB0cmFuc2xhdGVGb250KHRoaXMpO1xuICAgICAgICB9O1xuICAgICAgICBGb250LnByb3RvdHlwZS5nZXRIZWlnaHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy4kJGNhY2hlZEhlaWdodCA9PSBudWxsKVxuICAgICAgICAgICAgICAgIHRoaXMuJCRjYWNoZWRIZWlnaHQgPSBtaW5lcnZhLmZvbnRIZWlnaHQuZ2V0KHRoaXMpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuJCRjYWNoZWRIZWlnaHQ7XG4gICAgICAgIH07XG4gICAgICAgIEZvbnQucHJvdG90eXBlLmdldEFzY2VuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH07XG4gICAgICAgIEZvbnQucHJvdG90eXBlLmdldERlc2NlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9O1xuICAgICAgICBGb250LkRFRkFVTFRfRkFNSUxZID0gXCJTZWdvZSBVSSwgTHVjaWRhIEdyYW5kZSwgVmVyZGFuYVwiO1xuICAgICAgICBGb250LkRFRkFVTFRfU1RSRVRDSCA9IG1pbmVydmEuRm9udFN0cmV0Y2guTm9ybWFsO1xuICAgICAgICBGb250LkRFRkFVTFRfU1RZTEUgPSBtaW5lcnZhLkZvbnRTdHlsZS5Ob3JtYWw7XG4gICAgICAgIEZvbnQuREVGQVVMVF9XRUlHSFQgPSBtaW5lcnZhLkZvbnRXZWlnaHQuTm9ybWFsO1xuICAgICAgICBGb250LkRFRkFVTFRfU0laRSA9IDE0O1xuICAgICAgICByZXR1cm4gRm9udDtcbiAgICB9KSgpO1xuICAgIG1pbmVydmEuRm9udCA9IEZvbnQ7XG4gICAgZnVuY3Rpb24gdHJhbnNsYXRlRm9udChmb250KSB7XG4gICAgICAgIHZhciBzID0gXCJcIjtcbiAgICAgICAgcyArPSBmb250LnN0eWxlLnRvU3RyaW5nKCkgKyBcIiBcIjtcbiAgICAgICAgcyArPSBcIm5vcm1hbCBcIjtcbiAgICAgICAgcyArPSBmb250LndlaWdodC50b1N0cmluZygpICsgXCIgXCI7XG4gICAgICAgIHMgKz0gZm9udC5zaXplICsgXCJweCBcIjtcbiAgICAgICAgcyArPSBmb250LmZhbWlseS50b1N0cmluZygpO1xuICAgICAgICByZXR1cm4gcztcbiAgICB9XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGZvbnRIZWlnaHQ7XG4gICAgKGZ1bmN0aW9uIChmb250SGVpZ2h0KSB7XG4gICAgICAgIHZhciBoZWlnaHRzID0gW107XG4gICAgICAgIGZvbnRIZWlnaHQuY2FjaGUgPSB7XG4gICAgICAgICAgICBoaXRzOiAwLFxuICAgICAgICAgICAgbWlzc2VzOiAwXG4gICAgICAgIH07XG4gICAgICAgIGZ1bmN0aW9uIGdldChmb250KSB7XG4gICAgICAgICAgICB2YXIgc2VyaWFsID0gZm9udC50b0h0bWw1T2JqZWN0KCk7XG4gICAgICAgICAgICB2YXIgaGVpZ2h0ID0gaGVpZ2h0c1tzZXJpYWxdO1xuICAgICAgICAgICAgaWYgKGhlaWdodCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaGVpZ2h0c1tzZXJpYWxdID0gaGVpZ2h0ID0gbWVhc3VyZShzZXJpYWwpO1xuICAgICAgICAgICAgICAgIGZvbnRIZWlnaHQuY2FjaGUubWlzc2VzKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBmb250SGVpZ2h0LmNhY2hlLmhpdHMrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBoZWlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgZm9udEhlaWdodC5nZXQgPSBnZXQ7XG4gICAgICAgIHZhciBkdW1teTtcbiAgICAgICAgZnVuY3Rpb24gbWVhc3VyZShzZXJpYWwpIHtcbiAgICAgICAgICAgIHBlcmZleC50aW1lci5zdGFydCgnTWVhc3VyZUZvbnRIZWlnaHQnLCBzZXJpYWwpO1xuICAgICAgICAgICAgaWYgKCFkdW1teSkge1xuICAgICAgICAgICAgICAgIGR1bW15ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgICAgICBkdW1teS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShcIkhnXCIpKTtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGR1bW15KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGR1bW15LnN0eWxlLmRpc3BsYXkgPSBcIlwiO1xuICAgICAgICAgICAgZHVtbXkuc3R5bGUuZm9udCA9IHNlcmlhbDtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBkdW1teS5vZmZzZXRIZWlnaHQ7XG4gICAgICAgICAgICBkdW1teS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgICAgICBwZXJmZXgudGltZXIuc3RvcCgpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgIH0pKGZvbnRIZWlnaHQgPSBtaW5lcnZhLmZvbnRIZWlnaHQgfHwgKG1pbmVydmEuZm9udEhlaWdodCA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIEZha2VCcnVzaCA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIEZha2VCcnVzaChyYXcpIHtcbiAgICAgICAgICAgIHRoaXMucmF3ID0gcmF3O1xuICAgICAgICB9XG4gICAgICAgIEZha2VCcnVzaC5wcm90b3R5cGUuaXNUcmFuc3BhcmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfTtcbiAgICAgICAgRmFrZUJydXNoLnByb3RvdHlwZS5zZXR1cEJydXNoID0gZnVuY3Rpb24gKGN0eCwgcmVnaW9uKSB7XG4gICAgICAgIH07XG4gICAgICAgIEZha2VCcnVzaC5wcm90b3R5cGUudG9IdG1sNU9iamVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJhdztcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIEZha2VCcnVzaDtcbiAgICB9KSgpO1xuICAgIG1pbmVydmEuRmFrZUJydXNoID0gRmFrZUJydXNoO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIG1pbmVydmEuTk9fU0laRV9VUERBVEVSID0ge1xuICAgICAgICBzZXRBY3R1YWxXaWR0aDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIH0sXG4gICAgICAgIHNldEFjdHVhbEhlaWdodDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIH0sXG4gICAgICAgIG9uU2l6ZUNoYW5nZWQ6IGZ1bmN0aW9uIChvbGRTaXplLCBuZXdTaXplKSB7XG4gICAgICAgIH1cbiAgICB9O1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIChmdW5jdGlvbiAoV2Fsa0RpcmVjdGlvbikge1xuICAgICAgICBXYWxrRGlyZWN0aW9uW1dhbGtEaXJlY3Rpb25bXCJGb3J3YXJkXCJdID0gMF0gPSBcIkZvcndhcmRcIjtcbiAgICAgICAgV2Fsa0RpcmVjdGlvbltXYWxrRGlyZWN0aW9uW1wiUmV2ZXJzZVwiXSA9IDFdID0gXCJSZXZlcnNlXCI7XG4gICAgICAgIFdhbGtEaXJlY3Rpb25bV2Fsa0RpcmVjdGlvbltcIlpGb3J3YXJkXCJdID0gMl0gPSBcIlpGb3J3YXJkXCI7XG4gICAgICAgIFdhbGtEaXJlY3Rpb25bV2Fsa0RpcmVjdGlvbltcIlpSZXZlcnNlXCJdID0gM10gPSBcIlpSZXZlcnNlXCI7XG4gICAgfSkobWluZXJ2YS5XYWxrRGlyZWN0aW9uIHx8IChtaW5lcnZhLldhbGtEaXJlY3Rpb24gPSB7fSkpO1xuICAgIHZhciBXYWxrRGlyZWN0aW9uID0gbWluZXJ2YS5XYWxrRGlyZWN0aW9uO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIG1pbmVydmEuZXJyb3JzID0gW107XG4gICAgZnVuY3Rpb24gbGF5b3V0RXJyb3IodHJlZSwgcGlwZWRlZiwgbWVzc2FnZSkge1xuICAgICAgICBtaW5lcnZhLmVycm9ycy5wdXNoKHtcbiAgICAgICAgICAgIHRyZWU6IHRyZWUsXG4gICAgICAgICAgICBwaXBlZGVmOiBwaXBlZGVmLFxuICAgICAgICAgICAgbWVzc2FnZTogbWVzc2FnZVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgbWluZXJ2YS5sYXlvdXRFcnJvciA9IGxheW91dEVycm9yO1xuICAgIGZ1bmN0aW9uIGNsZWFyRXJyb3JzKCkge1xuICAgICAgICBtaW5lcnZhLmVycm9ycy5sZW5ndGggPSAwO1xuICAgIH1cbiAgICBtaW5lcnZhLmNsZWFyRXJyb3JzID0gY2xlYXJFcnJvcnM7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgZnVuY3Rpb24gZ2V0TmF0dXJhbENhbnZhc1NpemUoY2FudmFzKSB7XG4gICAgICAgIHZhciB6b29tRmFjdG9yID0gbWluZXJ2YS56b29tLmNhbGMoKTtcbiAgICAgICAgcmV0dXJuIG5ldyBtaW5lcnZhLlNpemUoY2FudmFzLm9mZnNldFdpZHRoICogem9vbUZhY3RvciwgY2FudmFzLm9mZnNldEhlaWdodCAqIHpvb21GYWN0b3IpO1xuICAgIH1cbiAgICBtaW5lcnZhLmdldE5hdHVyYWxDYW52YXNTaXplID0gZ2V0TmF0dXJhbENhbnZhc1NpemU7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIFBvaW50ID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gUG9pbnQoeCwgeSkge1xuICAgICAgICAgICAgdGhpcy54ID0geCA9PSBudWxsID8gMCA6IHg7XG4gICAgICAgICAgICB0aGlzLnkgPSB5ID09IG51bGwgPyAwIDogeTtcbiAgICAgICAgfVxuICAgICAgICBQb2ludC5pc0VxdWFsID0gZnVuY3Rpb24gKHAxLCBwMikge1xuICAgICAgICAgICAgcmV0dXJuIHAxLnggPT09IHAyLnhcbiAgICAgICAgICAgICAgICAmJiBwMS55ID09PSBwMi55O1xuICAgICAgICB9O1xuICAgICAgICBQb2ludC5jb3B5VG8gPSBmdW5jdGlvbiAoc3JjLCBkZXN0KSB7XG4gICAgICAgICAgICBkZXN0LnggPSBzcmMueDtcbiAgICAgICAgICAgIGRlc3QueSA9IHNyYy55O1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gUG9pbnQ7XG4gICAgfSkoKTtcbiAgICBtaW5lcnZhLlBvaW50ID0gUG9pbnQ7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNyZWF0ZVR5cGVkQXJyYXk7XG4gICAgaWYgKHR5cGVvZiBGbG9hdDMyQXJyYXkgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgY3JlYXRlVHlwZWRBcnJheSA9IGZ1bmN0aW9uIChsZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KGxlbmd0aCk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjcmVhdGVUeXBlZEFycmF5ID0gZnVuY3Rpb24gKGxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBBcnJheShsZW5ndGgpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBtaW5lcnZhLnZlYzIgPSB7XG4gICAgICAgIGNyZWF0ZTogZnVuY3Rpb24gKHgsIHkpIHtcbiAgICAgICAgICAgIHZhciBkZXN0ID0gY3JlYXRlVHlwZWRBcnJheSgyKTtcbiAgICAgICAgICAgIGRlc3RbMF0gPSB4O1xuICAgICAgICAgICAgZGVzdFsxXSA9IHk7XG4gICAgICAgICAgICByZXR1cm4gZGVzdDtcbiAgICAgICAgfSxcbiAgICAgICAgaW5pdDogZnVuY3Rpb24gKHgsIHksIGRlc3QpIHtcbiAgICAgICAgICAgIGlmICghZGVzdClcbiAgICAgICAgICAgICAgICBkZXN0ID0gY3JlYXRlVHlwZWRBcnJheSgyKTtcbiAgICAgICAgICAgIGRlc3RbMF0gPSB4O1xuICAgICAgICAgICAgZGVzdFsxXSA9IHk7XG4gICAgICAgICAgICByZXR1cm4gZGVzdDtcbiAgICAgICAgfVxuICAgIH07XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciB2ZWMyID0gbWluZXJ2YS52ZWMyO1xuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIm1hdC92ZWMyXCIgLz5cbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgKGZ1bmN0aW9uIChSZWN0T3ZlcmxhcCkge1xuICAgICAgICBSZWN0T3ZlcmxhcFtSZWN0T3ZlcmxhcFtcIk91dFwiXSA9IDBdID0gXCJPdXRcIjtcbiAgICAgICAgUmVjdE92ZXJsYXBbUmVjdE92ZXJsYXBbXCJJblwiXSA9IDFdID0gXCJJblwiO1xuICAgICAgICBSZWN0T3ZlcmxhcFtSZWN0T3ZlcmxhcFtcIlBhcnRcIl0gPSAyXSA9IFwiUGFydFwiO1xuICAgIH0pKG1pbmVydmEuUmVjdE92ZXJsYXAgfHwgKG1pbmVydmEuUmVjdE92ZXJsYXAgPSB7fSkpO1xuICAgIHZhciBSZWN0T3ZlcmxhcCA9IG1pbmVydmEuUmVjdE92ZXJsYXA7XG4gICAgdmFyIHAxID0gbWluZXJ2YS52ZWMyLmNyZWF0ZSgwLCAwKTtcbiAgICB2YXIgcDIgPSBtaW5lcnZhLnZlYzIuY3JlYXRlKDAsIDApO1xuICAgIHZhciBwMyA9IG1pbmVydmEudmVjMi5jcmVhdGUoMCwgMCk7XG4gICAgdmFyIHA0ID0gbWluZXJ2YS52ZWMyLmNyZWF0ZSgwLCAwKTtcbiAgICB2YXIgUmVjdCA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIFJlY3QoeCwgeSwgd2lkdGgsIGhlaWdodCkge1xuICAgICAgICAgICAgdGhpcy54ID0geCA9PSBudWxsID8gMCA6IHg7XG4gICAgICAgICAgICB0aGlzLnkgPSB5ID09IG51bGwgPyAwIDogeTtcbiAgICAgICAgICAgIHRoaXMud2lkdGggPSB3aWR0aCA9PSBudWxsID8gMCA6IHdpZHRoO1xuICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQgPT0gbnVsbCA/IDAgOiBoZWlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgUmVjdC5jbGVhciA9IGZ1bmN0aW9uIChyZWN0KSB7XG4gICAgICAgICAgICByZWN0LnggPSByZWN0LnkgPSByZWN0LndpZHRoID0gcmVjdC5oZWlnaHQgPSAwO1xuICAgICAgICB9O1xuICAgICAgICBSZWN0LmdldEJvdHRvbSA9IGZ1bmN0aW9uIChyZWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gcmVjdC55ICsgcmVjdC5oZWlnaHQ7XG4gICAgICAgIH07XG4gICAgICAgIFJlY3QuZ2V0UmlnaHQgPSBmdW5jdGlvbiAocmVjdCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlY3QueCArIHJlY3Qud2lkdGg7XG4gICAgICAgIH07XG4gICAgICAgIFJlY3QuaXNFcXVhbCA9IGZ1bmN0aW9uIChyZWN0MSwgcmVjdDIpIHtcbiAgICAgICAgICAgIHJldHVybiByZWN0MS54ID09PSByZWN0Mi54XG4gICAgICAgICAgICAgICAgJiYgcmVjdDEueSA9PT0gcmVjdDIueVxuICAgICAgICAgICAgICAgICYmIHJlY3QxLndpZHRoID09PSByZWN0Mi53aWR0aFxuICAgICAgICAgICAgICAgICYmIHJlY3QxLmhlaWdodCA9PT0gcmVjdDIuaGVpZ2h0O1xuICAgICAgICB9O1xuICAgICAgICBSZWN0LmlzRW1wdHkgPSBmdW5jdGlvbiAoc3JjKSB7XG4gICAgICAgICAgICByZXR1cm4gc3JjLndpZHRoID09PSAwXG4gICAgICAgICAgICAgICAgfHwgc3JjLmhlaWdodCA9PT0gMDtcbiAgICAgICAgfTtcbiAgICAgICAgUmVjdC5jb3B5VG8gPSBmdW5jdGlvbiAoc3JjLCBkZXN0KSB7XG4gICAgICAgICAgICBkZXN0LnggPSBzcmMueDtcbiAgICAgICAgICAgIGRlc3QueSA9IHNyYy55O1xuICAgICAgICAgICAgZGVzdC53aWR0aCA9IHNyYy53aWR0aDtcbiAgICAgICAgICAgIGRlc3QuaGVpZ2h0ID0gc3JjLmhlaWdodDtcbiAgICAgICAgfTtcbiAgICAgICAgUmVjdC5yb3VuZE91dCA9IGZ1bmN0aW9uIChkZXN0KSB7XG4gICAgICAgICAgICB2YXIgeCA9IE1hdGguZmxvb3IoZGVzdC54KTtcbiAgICAgICAgICAgIHZhciB5ID0gTWF0aC5mbG9vcihkZXN0LnkpO1xuICAgICAgICAgICAgZGVzdC53aWR0aCA9IE1hdGguY2VpbChkZXN0LnggKyBkZXN0LndpZHRoKSAtIHg7XG4gICAgICAgICAgICBkZXN0LmhlaWdodCA9IE1hdGguY2VpbChkZXN0LnkgKyBkZXN0LmhlaWdodCkgLSB5O1xuICAgICAgICAgICAgZGVzdC54ID0geDtcbiAgICAgICAgICAgIGRlc3QueSA9IHk7XG4gICAgICAgIH07XG4gICAgICAgIFJlY3Qucm91bmRJbiA9IGZ1bmN0aW9uIChkZXN0KSB7XG4gICAgICAgICAgICB2YXIgeCA9IE1hdGguY2VpbChkZXN0LngpO1xuICAgICAgICAgICAgdmFyIHkgPSBNYXRoLmNlaWwoZGVzdC55KTtcbiAgICAgICAgICAgIGRlc3Qud2lkdGggPSBNYXRoLmZsb29yKGRlc3QueCArIGRlc3Qud2lkdGgpIC0gTWF0aC5jZWlsKGRlc3QueCk7XG4gICAgICAgICAgICBkZXN0LmhlaWdodCA9IE1hdGguZmxvb3IoZGVzdC55ICsgZGVzdC5oZWlnaHQpIC0gTWF0aC5jZWlsKGRlc3QueSk7XG4gICAgICAgICAgICBkZXN0LnggPSB4O1xuICAgICAgICAgICAgZGVzdC55ID0geTtcbiAgICAgICAgICAgIHJldHVybiBkZXN0O1xuICAgICAgICB9O1xuICAgICAgICBSZWN0LmludGVyc2VjdGlvbiA9IGZ1bmN0aW9uIChkZXN0LCByZWN0Mikge1xuICAgICAgICAgICAgdmFyIHggPSBNYXRoLm1heChkZXN0LngsIHJlY3QyLngpO1xuICAgICAgICAgICAgdmFyIHkgPSBNYXRoLm1heChkZXN0LnksIHJlY3QyLnkpO1xuICAgICAgICAgICAgZGVzdC53aWR0aCA9IE1hdGgubWF4KDAsIE1hdGgubWluKGRlc3QueCArIGRlc3Qud2lkdGgsIHJlY3QyLnggKyByZWN0Mi53aWR0aCkgLSB4KTtcbiAgICAgICAgICAgIGRlc3QuaGVpZ2h0ID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oZGVzdC55ICsgZGVzdC5oZWlnaHQsIHJlY3QyLnkgKyByZWN0Mi5oZWlnaHQpIC0geSk7XG4gICAgICAgICAgICBkZXN0LnggPSB4O1xuICAgICAgICAgICAgZGVzdC55ID0geTtcbiAgICAgICAgfTtcbiAgICAgICAgUmVjdC51bmlvbiA9IGZ1bmN0aW9uIChkZXN0LCByZWN0Mikge1xuICAgICAgICAgICAgaWYgKHJlY3QyLndpZHRoIDw9IDAgfHwgcmVjdDIuaGVpZ2h0IDw9IDApXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgaWYgKGRlc3Qud2lkdGggPD0gMCB8fCBkZXN0LmhlaWdodCA8PSAwKSB7XG4gICAgICAgICAgICAgICAgUmVjdC5jb3B5VG8ocmVjdDIsIGRlc3QpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB4ID0gTWF0aC5taW4oZGVzdC54LCByZWN0Mi54KTtcbiAgICAgICAgICAgIHZhciB5ID0gTWF0aC5taW4oZGVzdC55LCByZWN0Mi55KTtcbiAgICAgICAgICAgIGRlc3Qud2lkdGggPSBNYXRoLm1heChkZXN0LnggKyBkZXN0LndpZHRoLCByZWN0Mi54ICsgcmVjdDIud2lkdGgpIC0geDtcbiAgICAgICAgICAgIGRlc3QuaGVpZ2h0ID0gTWF0aC5tYXgoZGVzdC55ICsgZGVzdC5oZWlnaHQsIHJlY3QyLnkgKyByZWN0Mi5oZWlnaHQpIC0geTtcbiAgICAgICAgICAgIGRlc3QueCA9IHg7XG4gICAgICAgICAgICBkZXN0LnkgPSB5O1xuICAgICAgICB9O1xuICAgICAgICBSZWN0LmlzQ29udGFpbmVkSW4gPSBmdW5jdGlvbiAoc3JjLCB0ZXN0KSB7XG4gICAgICAgICAgICB2YXIgc2wgPSBzcmMueDtcbiAgICAgICAgICAgIHZhciBzdCA9IHNyYy55O1xuICAgICAgICAgICAgdmFyIHNyID0gc3JjLnggKyBzcmMud2lkdGg7XG4gICAgICAgICAgICB2YXIgc2IgPSBzcmMueSArIHNyYy5oZWlnaHQ7XG4gICAgICAgICAgICB2YXIgdGwgPSB0ZXN0Lng7XG4gICAgICAgICAgICB2YXIgdHQgPSB0ZXN0Lnk7XG4gICAgICAgICAgICB2YXIgdHIgPSB0ZXN0LnggKyB0ZXN0LndpZHRoO1xuICAgICAgICAgICAgdmFyIHRiID0gdGVzdC55ICsgdGVzdC5oZWlnaHQ7XG4gICAgICAgICAgICBpZiAoc2wgPCB0bCB8fCBzdCA8IHR0IHx8IHNsID4gdHIgfHwgc3QgPiB0YilcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICBpZiAoc3IgPCB0bCB8fCBzYiA8IHR0IHx8IHNyID4gdHIgfHwgc2IgPiB0YilcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfTtcbiAgICAgICAgUmVjdC5jb250YWluc1BvaW50ID0gZnVuY3Rpb24gKHJlY3QxLCBwKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVjdDEueCA8PSBwLnhcbiAgICAgICAgICAgICAgICAmJiByZWN0MS55IDw9IHAueVxuICAgICAgICAgICAgICAgICYmIChyZWN0MS54ICsgcmVjdDEud2lkdGgpID49IHAueFxuICAgICAgICAgICAgICAgICYmIChyZWN0MS55ICsgcmVjdDEuaGVpZ2h0KSA+PSBwLnk7XG4gICAgICAgIH07XG4gICAgICAgIFJlY3QuZXh0ZW5kVG8gPSBmdW5jdGlvbiAoZGVzdCwgeCwgeSkge1xuICAgICAgICAgICAgdmFyIHJ4ID0gZGVzdC54O1xuICAgICAgICAgICAgdmFyIHJ5ID0gZGVzdC55O1xuICAgICAgICAgICAgdmFyIHJ3ID0gZGVzdC53aWR0aDtcbiAgICAgICAgICAgIHZhciByaCA9IGRlc3QuaGVpZ2h0O1xuICAgICAgICAgICAgaWYgKHggPCByeCB8fCB4ID4gKHJ4ICsgcncpKVxuICAgICAgICAgICAgICAgIHJ3ID0gTWF0aC5tYXgoTWF0aC5hYnMoeCAtIHJ4KSwgTWF0aC5hYnMoeCAtIHJ4IC0gcncpKTtcbiAgICAgICAgICAgIGlmICh5IDwgcnkgfHwgeSA+IChyeSArIHJoKSlcbiAgICAgICAgICAgICAgICByaCA9IE1hdGgubWF4KE1hdGguYWJzKHkgLSByeSksIE1hdGguYWJzKHkgLSByeSAtIHJoKSk7XG4gICAgICAgICAgICBkZXN0LnggPSBNYXRoLm1pbihyeCwgeCk7XG4gICAgICAgICAgICBkZXN0LnkgPSBNYXRoLm1pbihyeSwgeSk7XG4gICAgICAgICAgICBkZXN0LndpZHRoID0gcnc7XG4gICAgICAgICAgICBkZXN0LmhlaWdodCA9IHJoO1xuICAgICAgICB9O1xuICAgICAgICBSZWN0Lmdyb3cgPSBmdW5jdGlvbiAoZGVzdCwgbGVmdCwgdG9wLCByaWdodCwgYm90dG9tKSB7XG4gICAgICAgICAgICBkZXN0LnggLT0gbGVmdDtcbiAgICAgICAgICAgIGRlc3QueSAtPSB0b3A7XG4gICAgICAgICAgICBkZXN0LndpZHRoICs9IGxlZnQgKyByaWdodDtcbiAgICAgICAgICAgIGRlc3QuaGVpZ2h0ICs9IHRvcCArIGJvdHRvbTtcbiAgICAgICAgICAgIGlmIChkZXN0LndpZHRoIDwgMClcbiAgICAgICAgICAgICAgICBkZXN0LndpZHRoID0gMDtcbiAgICAgICAgICAgIGlmIChkZXN0LmhlaWdodCA8IDApXG4gICAgICAgICAgICAgICAgZGVzdC5oZWlnaHQgPSAwO1xuICAgICAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgICAgIH07XG4gICAgICAgIFJlY3Quc2hyaW5rID0gZnVuY3Rpb24gKGRlc3QsIGxlZnQsIHRvcCwgcmlnaHQsIGJvdHRvbSkge1xuICAgICAgICAgICAgZGVzdC54ICs9IGxlZnQ7XG4gICAgICAgICAgICBkZXN0LnkgKz0gdG9wO1xuICAgICAgICAgICAgZGVzdC53aWR0aCAtPSBsZWZ0ICsgcmlnaHQ7XG4gICAgICAgICAgICBkZXN0LmhlaWdodCAtPSB0b3AgKyBib3R0b207XG4gICAgICAgICAgICBpZiAoZGVzdC53aWR0aCA8IDApXG4gICAgICAgICAgICAgICAgZGVzdC53aWR0aCA9IDA7XG4gICAgICAgICAgICBpZiAoZGVzdC5oZWlnaHQgPCAwKVxuICAgICAgICAgICAgICAgIGRlc3QuaGVpZ2h0ID0gMDtcbiAgICAgICAgfTtcbiAgICAgICAgUmVjdC5yZWN0SW4gPSBmdW5jdGlvbiAocmVjdDEsIHJlY3QyKSB7XG4gICAgICAgICAgICB2YXIgY29weSA9IG5ldyBSZWN0KCk7XG4gICAgICAgICAgICBSZWN0LmNvcHlUbyhyZWN0MSwgY29weSk7XG4gICAgICAgICAgICBSZWN0LmludGVyc2VjdGlvbihjb3B5LCByZWN0Mik7XG4gICAgICAgICAgICBpZiAoUmVjdC5pc0VtcHR5KGNvcHkpKVxuICAgICAgICAgICAgICAgIHJldHVybiBSZWN0T3ZlcmxhcC5PdXQ7XG4gICAgICAgICAgICBpZiAoUmVjdC5pc0VxdWFsKGNvcHksIHJlY3QyKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gUmVjdE92ZXJsYXAuSW47XG4gICAgICAgICAgICByZXR1cm4gUmVjdE92ZXJsYXAuUGFydDtcbiAgICAgICAgfTtcbiAgICAgICAgUmVjdC50cmFuc2Zvcm0gPSBmdW5jdGlvbiAoZGVzdCwgbWF0KSB7XG4gICAgICAgICAgICBpZiAoIW1hdClcbiAgICAgICAgICAgICAgICByZXR1cm4gZGVzdDtcbiAgICAgICAgICAgIHZhciB4ID0gZGVzdC54O1xuICAgICAgICAgICAgdmFyIHkgPSBkZXN0Lnk7XG4gICAgICAgICAgICB2YXIgd2lkdGggPSBkZXN0LndpZHRoO1xuICAgICAgICAgICAgdmFyIGhlaWdodCA9IGRlc3QuaGVpZ2h0O1xuICAgICAgICAgICAgbWluZXJ2YS52ZWMyLmluaXQoeCwgeSwgcDEpO1xuICAgICAgICAgICAgbWluZXJ2YS52ZWMyLmluaXQoeCArIHdpZHRoLCB5LCBwMik7XG4gICAgICAgICAgICBtaW5lcnZhLnZlYzIuaW5pdCh4ICsgd2lkdGgsIHkgKyBoZWlnaHQsIHAzKTtcbiAgICAgICAgICAgIG1pbmVydmEudmVjMi5pbml0KHgsIHkgKyBoZWlnaHQsIHA0KTtcbiAgICAgICAgICAgIG1pbmVydmEubWF0My50cmFuc2Zvcm1WZWMyKG1hdCwgcDEpO1xuICAgICAgICAgICAgbWluZXJ2YS5tYXQzLnRyYW5zZm9ybVZlYzIobWF0LCBwMik7XG4gICAgICAgICAgICBtaW5lcnZhLm1hdDMudHJhbnNmb3JtVmVjMihtYXQsIHAzKTtcbiAgICAgICAgICAgIG1pbmVydmEubWF0My50cmFuc2Zvcm1WZWMyKG1hdCwgcDQpO1xuICAgICAgICAgICAgdmFyIGwgPSBNYXRoLm1pbihwMVswXSwgcDJbMF0sIHAzWzBdLCBwNFswXSk7XG4gICAgICAgICAgICB2YXIgdCA9IE1hdGgubWluKHAxWzFdLCBwMlsxXSwgcDNbMV0sIHA0WzFdKTtcbiAgICAgICAgICAgIHZhciByID0gTWF0aC5tYXgocDFbMF0sIHAyWzBdLCBwM1swXSwgcDRbMF0pO1xuICAgICAgICAgICAgdmFyIGIgPSBNYXRoLm1heChwMVsxXSwgcDJbMV0sIHAzWzFdLCBwNFsxXSk7XG4gICAgICAgICAgICBkZXN0LnggPSBsO1xuICAgICAgICAgICAgZGVzdC55ID0gdDtcbiAgICAgICAgICAgIGRlc3Qud2lkdGggPSByIC0gbDtcbiAgICAgICAgICAgIGRlc3QuaGVpZ2h0ID0gYiAtIHQ7XG4gICAgICAgICAgICByZXR1cm4gZGVzdDtcbiAgICAgICAgfTtcbiAgICAgICAgUmVjdC50cmFuc2Zvcm00ID0gZnVuY3Rpb24gKGRlc3QsIHByb2plY3Rpb24pIHtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIFJlY3Q7XG4gICAgfSkoKTtcbiAgICBtaW5lcnZhLlJlY3QgPSBSZWN0O1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIGZ1bmN0aW9uIHNpbmdsZXRvbih0eXBlKSB7XG4gICAgICAgIHZhciB4ID0gdHlwZTtcbiAgICAgICAgaWYgKCF4LiQkaW5zdGFuY2UpXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoeCwgJyQkaW5zdGFuY2UnLCB7IHZhbHVlOiBuZXcgeCgpLCBlbnVtZXJhYmxlOiBmYWxzZSB9KTtcbiAgICAgICAgcmV0dXJuIHguJCRpbnN0YW5jZTtcbiAgICB9XG4gICAgbWluZXJ2YS5zaW5nbGV0b24gPSBzaW5nbGV0b247XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIFNpemUgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBTaXplKHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgICAgIHRoaXMud2lkdGggPSB3aWR0aCA9PSBudWxsID8gMCA6IHdpZHRoO1xuICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQgPT0gbnVsbCA/IDAgOiBoZWlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgU2l6ZS5jb3B5VG8gPSBmdW5jdGlvbiAoc3JjLCBkZXN0KSB7XG4gICAgICAgICAgICBkZXN0LndpZHRoID0gc3JjLndpZHRoO1xuICAgICAgICAgICAgZGVzdC5oZWlnaHQgPSBzcmMuaGVpZ2h0O1xuICAgICAgICB9O1xuICAgICAgICBTaXplLmlzRXF1YWwgPSBmdW5jdGlvbiAoc2l6ZTEsIHNpemUyKSB7XG4gICAgICAgICAgICByZXR1cm4gc2l6ZTEud2lkdGggPT09IHNpemUyLndpZHRoXG4gICAgICAgICAgICAgICAgJiYgc2l6ZTEuaGVpZ2h0ID09PSBzaXplMi5oZWlnaHQ7XG4gICAgICAgIH07XG4gICAgICAgIFNpemUuaXNFbXB0eSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gICAgICAgICAgICByZXR1cm4gc2l6ZS53aWR0aCA9PT0gMFxuICAgICAgICAgICAgICAgIHx8IHNpemUuaGVpZ2h0ID09PSAwO1xuICAgICAgICB9O1xuICAgICAgICBTaXplLm1pbiA9IGZ1bmN0aW9uIChkZXN0LCBzaXplMikge1xuICAgICAgICAgICAgZGVzdC53aWR0aCA9IE1hdGgubWluKGRlc3Qud2lkdGgsIHNpemUyLndpZHRoKTtcbiAgICAgICAgICAgIGRlc3QuaGVpZ2h0ID0gTWF0aC5taW4oZGVzdC5oZWlnaHQsIHNpemUyLmhlaWdodCk7XG4gICAgICAgIH07XG4gICAgICAgIFNpemUuaXNVbmRlZiA9IGZ1bmN0aW9uIChzaXplKSB7XG4gICAgICAgICAgICByZXR1cm4gaXNOYU4oc2l6ZS53aWR0aCkgJiYgaXNOYU4oc2l6ZS5oZWlnaHQpO1xuICAgICAgICB9O1xuICAgICAgICBTaXplLnVuZGVmID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgICAgICAgICAgIHNpemUud2lkdGggPSBOYU47XG4gICAgICAgICAgICBzaXplLmhlaWdodCA9IE5hTjtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIFNpemU7XG4gICAgfSkoKTtcbiAgICBtaW5lcnZhLlNpemUgPSBTaXplO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBUaGlja25lc3MgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBUaGlja25lc3MobGVmdCwgdG9wLCByaWdodCwgYm90dG9tKSB7XG4gICAgICAgICAgICB0aGlzLmxlZnQgPSBsZWZ0ID09IG51bGwgPyAwIDogbGVmdDtcbiAgICAgICAgICAgIHRoaXMudG9wID0gdG9wID09IG51bGwgPyAwIDogdG9wO1xuICAgICAgICAgICAgdGhpcy5yaWdodCA9IHJpZ2h0ID09IG51bGwgPyAwIDogcmlnaHQ7XG4gICAgICAgICAgICB0aGlzLmJvdHRvbSA9IGJvdHRvbSA9PSBudWxsID8gMCA6IGJvdHRvbTtcbiAgICAgICAgfVxuICAgICAgICBUaGlja25lc3MuYWRkID0gZnVuY3Rpb24gKGRlc3QsIHQyKSB7XG4gICAgICAgICAgICBkZXN0LmxlZnQgKz0gdDIubGVmdDtcbiAgICAgICAgICAgIGRlc3QudG9wICs9IHQyLnRvcDtcbiAgICAgICAgICAgIGRlc3QucmlnaHQgKz0gdDIucmlnaHQ7XG4gICAgICAgICAgICBkZXN0LmJvdHRvbSArPSB0Mi5ib3R0b207XG4gICAgICAgIH07XG4gICAgICAgIFRoaWNrbmVzcy5jb3B5VG8gPSBmdW5jdGlvbiAodGhpY2tuZXNzLCBkZXN0KSB7XG4gICAgICAgICAgICBkZXN0LmxlZnQgPSB0aGlja25lc3MubGVmdDtcbiAgICAgICAgICAgIGRlc3QudG9wID0gdGhpY2tuZXNzLnRvcDtcbiAgICAgICAgICAgIGRlc3QucmlnaHQgPSB0aGlja25lc3MucmlnaHQ7XG4gICAgICAgICAgICBkZXN0LmJvdHRvbSA9IHRoaWNrbmVzcy5ib3R0b207XG4gICAgICAgIH07XG4gICAgICAgIFRoaWNrbmVzcy5pc0VtcHR5ID0gZnVuY3Rpb24gKHRoaWNrbmVzcykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaWNrbmVzcy5sZWZ0ID09PSAwICYmIHRoaWNrbmVzcy50b3AgPT09IDAgJiYgdGhpY2tuZXNzLnJpZ2h0ID09PSAwICYmIHRoaWNrbmVzcy5ib3R0b20gPT09IDA7XG4gICAgICAgIH07XG4gICAgICAgIFRoaWNrbmVzcy5pc0JhbGFuY2VkID0gZnVuY3Rpb24gKHRoaWNrbmVzcykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaWNrbmVzcy5sZWZ0ID09PSB0aGlja25lc3MudG9wXG4gICAgICAgICAgICAgICAgJiYgdGhpY2tuZXNzLmxlZnQgPT09IHRoaWNrbmVzcy5yaWdodFxuICAgICAgICAgICAgICAgICYmIHRoaWNrbmVzcy5sZWZ0ID09PSB0aGlja25lc3MuYm90dG9tO1xuICAgICAgICB9O1xuICAgICAgICBUaGlja25lc3Muc2hyaW5rU2l6ZSA9IGZ1bmN0aW9uICh0aGlja25lc3MsIGRlc3QpIHtcbiAgICAgICAgICAgIHZhciB3ID0gZGVzdC53aWR0aDtcbiAgICAgICAgICAgIHZhciBoID0gZGVzdC5oZWlnaHQ7XG4gICAgICAgICAgICBpZiAodyAhPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkpXG4gICAgICAgICAgICAgICAgdyAtPSB0aGlja25lc3MubGVmdCArIHRoaWNrbmVzcy5yaWdodDtcbiAgICAgICAgICAgIGlmIChoICE9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSlcbiAgICAgICAgICAgICAgICBoIC09IHRoaWNrbmVzcy50b3AgKyB0aGlja25lc3MuYm90dG9tO1xuICAgICAgICAgICAgZGVzdC53aWR0aCA9IHcgPiAwID8gdyA6IDA7XG4gICAgICAgICAgICBkZXN0LmhlaWdodCA9IGggPiAwID8gaCA6IDA7XG4gICAgICAgICAgICByZXR1cm4gZGVzdDtcbiAgICAgICAgfTtcbiAgICAgICAgVGhpY2tuZXNzLnNocmlua1JlY3QgPSBmdW5jdGlvbiAodGhpY2tuZXNzLCBkZXN0KSB7XG4gICAgICAgICAgICBkZXN0LnggKz0gdGhpY2tuZXNzLmxlZnQ7XG4gICAgICAgICAgICBkZXN0LnkgKz0gdGhpY2tuZXNzLnRvcDtcbiAgICAgICAgICAgIGRlc3Qud2lkdGggLT0gdGhpY2tuZXNzLmxlZnQgKyB0aGlja25lc3MucmlnaHQ7XG4gICAgICAgICAgICBkZXN0LmhlaWdodCAtPSB0aGlja25lc3MudG9wICsgdGhpY2tuZXNzLmJvdHRvbTtcbiAgICAgICAgICAgIGlmIChkZXN0LndpZHRoIDwgMClcbiAgICAgICAgICAgICAgICBkZXN0LndpZHRoID0gMDtcbiAgICAgICAgICAgIGlmIChkZXN0LmhlaWdodCA8IDApXG4gICAgICAgICAgICAgICAgZGVzdC5oZWlnaHQgPSAwO1xuICAgICAgICB9O1xuICAgICAgICBUaGlja25lc3Muc2hyaW5rQ29ybmVyUmFkaXVzID0gZnVuY3Rpb24gKHRoaWNrbmVzcywgZGVzdCkge1xuICAgICAgICAgICAgZGVzdC50b3BMZWZ0ID0gTWF0aC5tYXgoZGVzdC50b3BMZWZ0IC0gTWF0aC5tYXgodGhpY2tuZXNzLmxlZnQsIHRoaWNrbmVzcy50b3ApICogMC41LCAwKTtcbiAgICAgICAgICAgIGRlc3QudG9wUmlnaHQgPSBNYXRoLm1heChkZXN0LnRvcFJpZ2h0IC0gTWF0aC5tYXgodGhpY2tuZXNzLnJpZ2h0LCB0aGlja25lc3MudG9wKSAqIDAuNSwgMCk7XG4gICAgICAgICAgICBkZXN0LmJvdHRvbVJpZ2h0ID0gTWF0aC5tYXgoZGVzdC5ib3R0b21SaWdodCAtIE1hdGgubWF4KHRoaWNrbmVzcy5yaWdodCwgdGhpY2tuZXNzLmJvdHRvbSkgKiAwLjUsIDApO1xuICAgICAgICAgICAgZGVzdC5ib3R0b21MZWZ0ID0gTWF0aC5tYXgoZGVzdC5ib3R0b21MZWZ0IC0gTWF0aC5tYXgodGhpY2tuZXNzLmxlZnQsIHRoaWNrbmVzcy5ib3R0b20pICogMC41LCAwKTtcbiAgICAgICAgfTtcbiAgICAgICAgVGhpY2tuZXNzLmdyb3dTaXplID0gZnVuY3Rpb24gKHRoaWNrbmVzcywgZGVzdCkge1xuICAgICAgICAgICAgdmFyIHcgPSBkZXN0LndpZHRoO1xuICAgICAgICAgICAgdmFyIGggPSBkZXN0LmhlaWdodDtcbiAgICAgICAgICAgIGlmICh3ICE9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSlcbiAgICAgICAgICAgICAgICB3ICs9IHRoaWNrbmVzcy5sZWZ0ICsgdGhpY2tuZXNzLnJpZ2h0O1xuICAgICAgICAgICAgaWYgKGggIT0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZKVxuICAgICAgICAgICAgICAgIGggKz0gdGhpY2tuZXNzLnRvcCArIHRoaWNrbmVzcy5ib3R0b207XG4gICAgICAgICAgICBkZXN0LndpZHRoID0gdyA+IDAgPyB3IDogMDtcbiAgICAgICAgICAgIGRlc3QuaGVpZ2h0ID0gaCA+IDAgPyBoIDogMDtcbiAgICAgICAgICAgIHJldHVybiBkZXN0O1xuICAgICAgICB9O1xuICAgICAgICBUaGlja25lc3MuZ3Jvd1JlY3QgPSBmdW5jdGlvbiAodGhpY2tuZXNzLCBkZXN0KSB7XG4gICAgICAgICAgICBkZXN0LnggLT0gdGhpY2tuZXNzLmxlZnQ7XG4gICAgICAgICAgICBkZXN0LnkgLT0gdGhpY2tuZXNzLnRvcDtcbiAgICAgICAgICAgIGRlc3Qud2lkdGggKz0gdGhpY2tuZXNzLmxlZnQgKyB0aGlja25lc3MucmlnaHQ7XG4gICAgICAgICAgICBkZXN0LmhlaWdodCArPSB0aGlja25lc3MudG9wICsgdGhpY2tuZXNzLmJvdHRvbTtcbiAgICAgICAgICAgIGlmIChkZXN0LndpZHRoIDwgMClcbiAgICAgICAgICAgICAgICBkZXN0LndpZHRoID0gMDtcbiAgICAgICAgICAgIGlmIChkZXN0LmhlaWdodCA8IDApXG4gICAgICAgICAgICAgICAgZGVzdC5oZWlnaHQgPSAwO1xuICAgICAgICB9O1xuICAgICAgICBUaGlja25lc3MuZ3Jvd0Nvcm5lclJhZGl1cyA9IGZ1bmN0aW9uICh0aGlja25lc3MsIGRlc3QpIHtcbiAgICAgICAgICAgIGRlc3QudG9wTGVmdCA9IGRlc3QudG9wTGVmdCA/IE1hdGgubWF4KGRlc3QudG9wTGVmdCArIE1hdGgubWF4KHRoaWNrbmVzcy5sZWZ0LCB0aGlja25lc3MudG9wKSAqIDAuNSwgMCkgOiAwO1xuICAgICAgICAgICAgZGVzdC50b3BSaWdodCA9IGRlc3QudG9wUmlnaHQgPyBNYXRoLm1heChkZXN0LnRvcFJpZ2h0ICsgTWF0aC5tYXgodGhpY2tuZXNzLnJpZ2h0LCB0aGlja25lc3MudG9wKSAqIDAuNSwgMCkgOiAwO1xuICAgICAgICAgICAgZGVzdC5ib3R0b21SaWdodCA9IGRlc3QuYm90dG9tUmlnaHQgPyBNYXRoLm1heChkZXN0LmJvdHRvbVJpZ2h0ICsgTWF0aC5tYXgodGhpY2tuZXNzLnJpZ2h0LCB0aGlja25lc3MuYm90dG9tKSAqIDAuNSwgMCkgOiAwO1xuICAgICAgICAgICAgZGVzdC5ib3R0b21MZWZ0ID0gZGVzdC5ib3R0b21MZWZ0ID8gTWF0aC5tYXgoZGVzdC5ib3R0b21MZWZ0ICsgTWF0aC5tYXgodGhpY2tuZXNzLmxlZnQsIHRoaWNrbmVzcy5ib3R0b20pICogMC41LCAwKSA6IDA7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBUaGlja25lc3M7XG4gICAgfSkoKTtcbiAgICBtaW5lcnZhLlRoaWNrbmVzcyA9IFRoaWNrbmVzcztcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgVmVjdG9yO1xuICAgIChmdW5jdGlvbiAoVmVjdG9yKSB7XG4gICAgICAgIHZhciBFUFNJTE9OID0gMWUtMTA7XG4gICAgICAgIGZ1bmN0aW9uIGNyZWF0ZSh4LCB5KSB7XG4gICAgICAgICAgICByZXR1cm4gW3gsIHldO1xuICAgICAgICB9XG4gICAgICAgIFZlY3Rvci5jcmVhdGUgPSBjcmVhdGU7XG4gICAgICAgIGZ1bmN0aW9uIHJldmVyc2Uodikge1xuICAgICAgICAgICAgdlswXSA9IC12WzBdO1xuICAgICAgICAgICAgdlsxXSA9IC12WzFdO1xuICAgICAgICAgICAgcmV0dXJuIHY7XG4gICAgICAgIH1cbiAgICAgICAgVmVjdG9yLnJldmVyc2UgPSByZXZlcnNlO1xuICAgICAgICBmdW5jdGlvbiBvcnRob2dvbmFsKHYpIHtcbiAgICAgICAgICAgIHZhciB4ID0gdlswXSwgeSA9IHZbMV07XG4gICAgICAgICAgICB2WzBdID0gLXk7XG4gICAgICAgICAgICB2WzFdID0geDtcbiAgICAgICAgICAgIHJldHVybiB2O1xuICAgICAgICB9XG4gICAgICAgIFZlY3Rvci5vcnRob2dvbmFsID0gb3J0aG9nb25hbDtcbiAgICAgICAgZnVuY3Rpb24gbm9ybWFsaXplKHYpIHtcbiAgICAgICAgICAgIHZhciB4ID0gdlswXSwgeSA9IHZbMV07XG4gICAgICAgICAgICB2YXIgbGVuID0gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkpO1xuICAgICAgICAgICAgdlswXSA9IHggLyBsZW47XG4gICAgICAgICAgICB2WzFdID0geSAvIGxlbjtcbiAgICAgICAgICAgIHJldHVybiB2O1xuICAgICAgICB9XG4gICAgICAgIFZlY3Rvci5ub3JtYWxpemUgPSBub3JtYWxpemU7XG4gICAgICAgIGZ1bmN0aW9uIHJvdGF0ZSh2LCB0aGV0YSkge1xuICAgICAgICAgICAgdmFyIGMgPSBNYXRoLmNvcyh0aGV0YSk7XG4gICAgICAgICAgICB2YXIgcyA9IE1hdGguc2luKHRoZXRhKTtcbiAgICAgICAgICAgIHZhciB4ID0gdlswXTtcbiAgICAgICAgICAgIHZhciB5ID0gdlsxXTtcbiAgICAgICAgICAgIHZbMF0gPSB4ICogYyAtIHkgKiBzO1xuICAgICAgICAgICAgdlsxXSA9IHggKiBzICsgeSAqIGM7XG4gICAgICAgICAgICByZXR1cm4gdjtcbiAgICAgICAgfVxuICAgICAgICBWZWN0b3Iucm90YXRlID0gcm90YXRlO1xuICAgICAgICBmdW5jdGlvbiBhbmdsZUJldHdlZW4odSwgdikge1xuICAgICAgICAgICAgdmFyIHV4ID0gdVswXSwgdXkgPSB1WzFdLCB2eCA9IHZbMF0sIHZ5ID0gdlsxXTtcbiAgICAgICAgICAgIHZhciBudW0gPSB1eCAqIHZ4ICsgdXkgKiB2eTtcbiAgICAgICAgICAgIHZhciBkZW4gPSBNYXRoLnNxcnQodXggKiB1eCArIHV5ICogdXkpICogTWF0aC5zcXJ0KHZ4ICogdnggKyB2eSAqIHZ5KTtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLmFjb3MobnVtIC8gZGVuKTtcbiAgICAgICAgfVxuICAgICAgICBWZWN0b3IuYW5nbGVCZXR3ZWVuID0gYW5nbGVCZXR3ZWVuO1xuICAgICAgICBmdW5jdGlvbiBpc0Nsb2Nrd2lzZVRvKHYxLCB2Mikge1xuICAgICAgICAgICAgdmFyIHRoZXRhID0gYW5nbGVCZXR3ZWVuKHYxLCB2Mik7XG4gICAgICAgICAgICB2YXIgbnYxID0gbm9ybWFsaXplKHYxLnNsaWNlKDApKTtcbiAgICAgICAgICAgIHZhciBudjIgPSBub3JtYWxpemUodjIuc2xpY2UoMCkpO1xuICAgICAgICAgICAgcm90YXRlKG52MSwgdGhldGEpO1xuICAgICAgICAgICAgdmFyIG54ID0gTWF0aC5hYnMobnYxWzBdIC0gbnYyWzBdKTtcbiAgICAgICAgICAgIHZhciBueSA9IE1hdGguYWJzKG52MVsxXSAtIG52MlsxXSk7XG4gICAgICAgICAgICByZXR1cm4gbnggPCBFUFNJTE9OXG4gICAgICAgICAgICAgICAgJiYgbnkgPCBFUFNJTE9OO1xuICAgICAgICB9XG4gICAgICAgIFZlY3Rvci5pc0Nsb2Nrd2lzZVRvID0gaXNDbG9ja3dpc2VUbztcbiAgICAgICAgZnVuY3Rpb24gaW50ZXJzZWN0aW9uKHMxLCBkMSwgczIsIGQyKSB7XG4gICAgICAgICAgICB2YXIgeDEgPSBzMVswXTtcbiAgICAgICAgICAgIHZhciB5MSA9IHMxWzFdO1xuICAgICAgICAgICAgdmFyIHgyID0geDEgKyBkMVswXTtcbiAgICAgICAgICAgIHZhciB5MiA9IHkxICsgZDFbMV07XG4gICAgICAgICAgICB2YXIgeDMgPSBzMlswXTtcbiAgICAgICAgICAgIHZhciB5MyA9IHMyWzFdO1xuICAgICAgICAgICAgdmFyIHg0ID0geDMgKyBkMlswXTtcbiAgICAgICAgICAgIHZhciB5NCA9IHkzICsgZDJbMV07XG4gICAgICAgICAgICB2YXIgZGV0ID0gKHgxIC0geDIpICogKHkzIC0geTQpIC0gKHkxIC0geTIpICogKHgzIC0geDQpO1xuICAgICAgICAgICAgaWYgKGRldCA9PT0gMClcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIHZhciB4biA9ICgoeDEgKiB5MiAtIHkxICogeDIpICogKHgzIC0geDQpKSAtICgoeDEgLSB4MikgKiAoeDMgKiB5NCAtIHkzICogeDQpKTtcbiAgICAgICAgICAgIHZhciB5biA9ICgoeDEgKiB5MiAtIHkxICogeDIpICogKHkzIC0geTQpKSAtICgoeTEgLSB5MikgKiAoeDMgKiB5NCAtIHkzICogeDQpKTtcbiAgICAgICAgICAgIHJldHVybiBbeG4gLyBkZXQsIHluIC8gZGV0XTtcbiAgICAgICAgfVxuICAgICAgICBWZWN0b3IuaW50ZXJzZWN0aW9uID0gaW50ZXJzZWN0aW9uO1xuICAgIH0pKFZlY3RvciA9IG1pbmVydmEuVmVjdG9yIHx8IChtaW5lcnZhLlZlY3RvciA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgKGZ1bmN0aW9uIChWaXNpYmlsaXR5KSB7XG4gICAgICAgIFZpc2liaWxpdHlbVmlzaWJpbGl0eVtcIlZpc2libGVcIl0gPSAwXSA9IFwiVmlzaWJsZVwiO1xuICAgICAgICBWaXNpYmlsaXR5W1Zpc2liaWxpdHlbXCJDb2xsYXBzZWRcIl0gPSAxXSA9IFwiQ29sbGFwc2VkXCI7XG4gICAgfSkobWluZXJ2YS5WaXNpYmlsaXR5IHx8IChtaW5lcnZhLlZpc2liaWxpdHkgPSB7fSkpO1xuICAgIHZhciBWaXNpYmlsaXR5ID0gbWluZXJ2YS5WaXNpYmlsaXR5O1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciB6b29tO1xuICAgIChmdW5jdGlvbiAoem9vbV8xKSB7XG4gICAgICAgIHpvb21fMS5jYWxjID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChkb2N1bWVudC5mcmFtZXMpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGllKCk7XG4gICAgICAgICAgICByZXR1cm4gY2hyb21lKCk7XG4gICAgICAgIH0pKCk7XG4gICAgICAgIGZ1bmN0aW9uIGllKCkge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2NyZWVuID0gZG9jdW1lbnQuZnJhbWVzLnNjcmVlbjtcbiAgICAgICAgICAgICAgICB2YXIgem9vbSA9IHNjcmVlbi5kZXZpY2VYRFBJIC8gc2NyZWVuLnN5c3RlbVhEUEk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoem9vbSAqIDEwMCkgLyAxMDA7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGNocm9tZSgpIHtcbiAgICAgICAgICAgIHZhciBzdmc7XG4gICAgICAgICAgICBmdW5jdGlvbiBtZW1vaXplU3ZnKCkge1xuICAgICAgICAgICAgICAgIGlmICghIXN2ZyB8fCAhZG9jdW1lbnQuYm9keSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIHN2ZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAnc3ZnJyk7XG4gICAgICAgICAgICAgICAgc3ZnLnNldEF0dHJpYnV0ZSgneG1sbnMnLCAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnKTtcbiAgICAgICAgICAgICAgICBzdmcuc2V0QXR0cmlidXRlKCd2ZXJzaW9uJywgJzEuMScpO1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc3ZnKTtcbiAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHN0eWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlLm9wYWNpdHkgPSBcIjAuMFwiO1xuICAgICAgICAgICAgICAgICAgICBzdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcbiAgICAgICAgICAgICAgICAgICAgc3R5bGUubGVmdCA9IFwiLTMwMHB4XCI7XG4gICAgICAgICAgICAgICAgfSkoc3ZnLnN0eWxlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgbWVtb2l6ZVN2ZygpO1xuICAgICAgICAgICAgICAgIHJldHVybiAhc3ZnID8gMSA6IHN2Zy5jdXJyZW50U2NhbGU7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfSkoem9vbSA9IG1pbmVydmEuem9vbSB8fCAobWluZXJ2YS56b29tID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29yZTtcbiAgICAoZnVuY3Rpb24gKGNvcmUpIHtcbiAgICAgICAgdmFyIFVwZGF0ZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZnVuY3Rpb24gVXBkYXRlcigpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiQkbWVhc3VyZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy4kJG1lYXN1cmVCaW5kZXIgPSBudWxsO1xuICAgICAgICAgICAgICAgIHRoaXMuJCRhcnJhbmdlID0gbnVsbDtcbiAgICAgICAgICAgICAgICB0aGlzLiQkYXJyYW5nZUJpbmRlciA9IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy4kJHNpemluZyA9IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy4kJHByb2Nlc3Nkb3duID0gbnVsbDtcbiAgICAgICAgICAgICAgICB0aGlzLiQkcHJvY2Vzc3VwID0gbnVsbDtcbiAgICAgICAgICAgICAgICB0aGlzLiQkcmVuZGVyID0gbnVsbDtcbiAgICAgICAgICAgICAgICB0aGlzLiQkaGl0dGVzdCA9IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy4kJGluRG93bkRpcnR5ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy4kJGluVXBEaXJ0eSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMuJCRhdHRhY2hlZCA9IHt9O1xuICAgICAgICAgICAgICAgIHRoaXMuJCRzaXpldXBkYXRlciA9IG1pbmVydmEuTk9fU0laRV9VUERBVEVSO1xuICAgICAgICAgICAgICAgIHRoaXMuYXNzZXRzID0ge1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogTmFOLFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IE5hTixcbiAgICAgICAgICAgICAgICAgICAgbWluV2lkdGg6IDAuMCxcbiAgICAgICAgICAgICAgICAgICAgbWluSGVpZ2h0OiAwLjAsXG4gICAgICAgICAgICAgICAgICAgIG1heFdpZHRoOiBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFksXG4gICAgICAgICAgICAgICAgICAgIG1heEhlaWdodDogTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLFxuICAgICAgICAgICAgICAgICAgICB1c2VMYXlvdXRSb3VuZGluZzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiBuZXcgbWluZXJ2YS5UaGlja25lc3MoKSxcbiAgICAgICAgICAgICAgICAgICAgaG9yaXpvbnRhbEFsaWdubWVudDogbWluZXJ2YS5Ib3Jpem9udGFsQWxpZ25tZW50LlN0cmV0Y2gsXG4gICAgICAgICAgICAgICAgICAgIHZlcnRpY2FsQWxpZ25tZW50OiBtaW5lcnZhLlZlcnRpY2FsQWxpZ25tZW50LlN0cmV0Y2gsXG4gICAgICAgICAgICAgICAgICAgIGNsaXA6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIGVmZmVjdDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgdmlzaWJpbGl0eTogbWluZXJ2YS5WaXNpYmlsaXR5LlZpc2libGUsXG4gICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEuMCxcbiAgICAgICAgICAgICAgICAgICAgaXNIaXRUZXN0VmlzaWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyVHJhbnNmb3JtOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICByZW5kZXJUcmFuc2Zvcm1PcmlnaW46IG5ldyBtaW5lcnZhLlBvaW50KCksXG4gICAgICAgICAgICAgICAgICAgIGVmZmVjdFBhZGRpbmc6IG5ldyBtaW5lcnZhLlRoaWNrbmVzcygpLFxuICAgICAgICAgICAgICAgICAgICBwcmV2aW91c0NvbnN0cmFpbnQ6IG5ldyBtaW5lcnZhLlNpemUoKSxcbiAgICAgICAgICAgICAgICAgICAgZGVzaXJlZFNpemU6IG5ldyBtaW5lcnZhLlNpemUoKSxcbiAgICAgICAgICAgICAgICAgICAgaGlkZGVuRGVzaXJlOiBuZXcgbWluZXJ2YS5TaXplKE51bWJlci5ORUdBVElWRV9JTkZJTklUWSwgTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZKSxcbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyU2l6ZTogbmV3IG1pbmVydmEuU2l6ZSgpLFxuICAgICAgICAgICAgICAgICAgICB2aXN1YWxPZmZzZXQ6IG5ldyBtaW5lcnZhLlBvaW50KCksXG4gICAgICAgICAgICAgICAgICAgIGxhc3RSZW5kZXJTaXplOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgIGxheW91dFNsb3Q6IG5ldyBtaW5lcnZhLlJlY3QoKSxcbiAgICAgICAgICAgICAgICAgICAgbGF5b3V0Q2xpcDogbmV3IG1pbmVydmEuUmVjdCgpLFxuICAgICAgICAgICAgICAgICAgICBjb21wb3NpdGVMYXlvdXRDbGlwOiBuZXcgbWluZXJ2YS5SZWN0KCksXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrTGF5b3V0Q2xpcDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGFjdHVhbFdpZHRoOiAwLFxuICAgICAgICAgICAgICAgICAgICBhY3R1YWxIZWlnaHQ6IDAsXG4gICAgICAgICAgICAgICAgICAgIHo6IE5hTixcbiAgICAgICAgICAgICAgICAgICAgdG90YWxJc1JlbmRlclZpc2libGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHRvdGFsT3BhY2l0eTogMS4wLFxuICAgICAgICAgICAgICAgICAgICB0b3RhbElzSGl0VGVzdFZpc2libGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGV4dGVudHM6IG5ldyBtaW5lcnZhLlJlY3QoKSxcbiAgICAgICAgICAgICAgICAgICAgZXh0ZW50c1dpdGhDaGlsZHJlbjogbmV3IG1pbmVydmEuUmVjdCgpLFxuICAgICAgICAgICAgICAgICAgICBzdXJmYWNlQm91bmRzV2l0aENoaWxkcmVuOiBuZXcgbWluZXJ2YS5SZWN0KCksXG4gICAgICAgICAgICAgICAgICAgIGdsb2JhbEJvdW5kc1dpdGhDaGlsZHJlbjogbmV3IG1pbmVydmEuUmVjdCgpLFxuICAgICAgICAgICAgICAgICAgICBsYXlvdXRYZm9ybTogbWluZXJ2YS5tYXQzLmlkZW50aXR5KCksXG4gICAgICAgICAgICAgICAgICAgIGNhcnJpZXJYZm9ybTogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyWGZvcm06IG1pbmVydmEubWF0My5pZGVudGl0eSgpLFxuICAgICAgICAgICAgICAgICAgICBhYnNvbHV0ZVhmb3JtOiBtaW5lcnZhLm1hdDMuaWRlbnRpdHkoKSxcbiAgICAgICAgICAgICAgICAgICAgZGlydHlSZWdpb246IG5ldyBtaW5lcnZhLlJlY3QoKSxcbiAgICAgICAgICAgICAgICAgICAgZGlydHlGbGFnczogMCxcbiAgICAgICAgICAgICAgICAgICAgdWlGbGFnczogbWluZXJ2YS5VSUZsYWdzLlJlbmRlclZpc2libGUgfCBtaW5lcnZhLlVJRmxhZ3MuSGl0VGVzdFZpc2libGUsXG4gICAgICAgICAgICAgICAgICAgIGZvcmNlSW52YWxpZGF0ZTogZmFsc2VcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHRoaXMudHJlZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgcGVyZmV4LnRpbWVyLnN0YXJ0KFwiQ3JlYXRlVXBkYXRlclwiLCBudWxsKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldE1lYXN1cmVCaW5kZXIoKVxuICAgICAgICAgICAgICAgICAgICAuc2V0QXJyYW5nZUJpbmRlcigpXG4gICAgICAgICAgICAgICAgICAgIC5pbml0KCk7XG4gICAgICAgICAgICAgICAgcGVyZmV4LnRpbWVyLnN0b3AoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFVwZGF0ZXIucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRUcmVlKHRoaXMudHJlZSk7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLiQkbWVhc3VyZSlcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRNZWFzdXJlUGlwZSgpO1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy4kJGFycmFuZ2UpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0QXJyYW5nZVBpcGUoKTtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuJCRzaXppbmcpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U2l6aW5nUGlwZSgpO1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy4kJHByb2Nlc3Nkb3duKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFByb2Nlc3NEb3duUGlwZSgpO1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy4kJHByb2Nlc3N1cClcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRQcm9jZXNzVXBQaXBlKCk7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLiQkcmVuZGVyKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFJlbmRlclBpcGUoKTtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuJCRoaXR0ZXN0KVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEhpdFRlc3RQaXBlKCk7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLiQkaGl0dGVzdC5kYXRhLnRyZWUpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJCRoaXR0ZXN0LmRhdGEudHJlZSA9IHRoaXMudHJlZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBVcGRhdGVyLnByb3RvdHlwZS5zZXRUcmVlID0gZnVuY3Rpb24gKHRyZWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRyZWUgPSB0cmVlIHx8IG5ldyBjb3JlLlVwZGF0ZXJUcmVlKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgVXBkYXRlci5wcm90b3R5cGUuZ2V0QXR0YWNoZWRWYWx1ZSA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuJCRhdHRhY2hlZFtuYW1lXTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBVcGRhdGVyLnByb3RvdHlwZS5zZXRBdHRhY2hlZFZhbHVlID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kJGF0dGFjaGVkW25hbWVdID0gdmFsdWU7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgVXBkYXRlci5wcm90b3R5cGUub25EZXRhY2hlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBjb3JlLnJlYWN0VG8uaGVscGVycy5pbnZhbGlkYXRlUGFyZW50KHRoaXMpO1xuICAgICAgICAgICAgICAgIHRoaXMuaW52YWxpZGF0ZU1lYXN1cmUoKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy50cmVlLnZpc3VhbFBhcmVudClcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50cmVlLnZpc3VhbFBhcmVudC5pbnZhbGlkYXRlTWVhc3VyZSgpO1xuICAgICAgICAgICAgICAgIHZhciBscyA9IHRoaXMuYXNzZXRzLmxheW91dFNsb3Q7XG4gICAgICAgICAgICAgICAgbHMueCA9IGxzLnkgPSBscy53aWR0aCA9IGxzLmhlaWdodCA9IDA7XG4gICAgICAgICAgICAgICAgdmFyIGxjID0gdGhpcy5hc3NldHMubGF5b3V0Q2xpcDtcbiAgICAgICAgICAgICAgICBsYy54ID0gbGMueSA9IGxjLndpZHRoID0gbGMuaGVpZ2h0ID0gMDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBVcGRhdGVyLnByb3RvdHlwZS5vbkF0dGFjaGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBhc3NldHMgPSB0aGlzLmFzc2V0cztcbiAgICAgICAgICAgICAgICBtaW5lcnZhLlNpemUudW5kZWYoYXNzZXRzLnByZXZpb3VzQ29uc3RyYWludCk7XG4gICAgICAgICAgICAgICAgYXNzZXRzLmRpcnR5RmxhZ3MgfD0gKG1pbmVydmEuRGlydHlGbGFncy5SZW5kZXJWaXNpYmlsaXR5IHwgbWluZXJ2YS5EaXJ0eUZsYWdzLkhpdFRlc3RWaXNpYmlsaXR5IHwgbWluZXJ2YS5EaXJ0eUZsYWdzLkxvY2FsVHJhbnNmb3JtKTtcbiAgICAgICAgICAgICAgICB2YXIgbGMgPSBhc3NldHMubGF5b3V0Q2xpcDtcbiAgICAgICAgICAgICAgICBsYy54ID0gbGMueSA9IGxjLndpZHRoID0gbGMuaGVpZ2h0ID0gMDtcbiAgICAgICAgICAgICAgICB2YXIgcnMgPSBhc3NldHMucmVuZGVyU2l6ZTtcbiAgICAgICAgICAgICAgICBycy53aWR0aCA9IHJzLmhlaWdodCA9IDA7XG4gICAgICAgICAgICAgICAgdGhpcy5pbnZhbGlkYXRlTWVhc3VyZSgpXG4gICAgICAgICAgICAgICAgICAgIC5pbnZhbGlkYXRlQXJyYW5nZSgpXG4gICAgICAgICAgICAgICAgICAgIC5pbnZhbGlkYXRlKClcbiAgICAgICAgICAgICAgICAgICAgLnVwZGF0ZUJvdW5kcyh0cnVlKTtcbiAgICAgICAgICAgICAgICBVcGRhdGVyLiQkYWRkRG93bkRpcnR5KHRoaXMpO1xuICAgICAgICAgICAgICAgIGlmICgoYXNzZXRzLnVpRmxhZ3MgJiBtaW5lcnZhLlVJRmxhZ3MuU2l6ZUhpbnQpID4gMCB8fCBhc3NldHMubGFzdFJlbmRlclNpemUgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgVXBkYXRlci4kJHByb3BhZ2F0ZVVpRmxhZ3NVcCh0aGlzLCBtaW5lcnZhLlVJRmxhZ3MuU2l6ZUhpbnQpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFVwZGF0ZXIucHJvdG90eXBlLnNldFZpc3VhbFBhcmVudCA9IGZ1bmN0aW9uICh2aXN1YWxQYXJlbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXZpc3VhbFBhcmVudCAmJiB0aGlzLnRyZWUudmlzdWFsUGFyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25EZXRhY2hlZCgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRyZWUudmlzdWFsUGFyZW50LnRyZWUub25DaGlsZERldGFjaGVkKHRoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnRyZWUudmlzdWFsUGFyZW50ID0gdmlzdWFsUGFyZW50O1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3VyZmFjZSh2aXN1YWxQYXJlbnQgPyB2aXN1YWxQYXJlbnQudHJlZS5zdXJmYWNlIDogdW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgICBpZiAodmlzdWFsUGFyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHZpc3VhbFBhcmVudC50cmVlLm9uQ2hpbGRBdHRhY2hlZCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkF0dGFjaGVkKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFVwZGF0ZXIucHJvdG90eXBlLnNldFN1cmZhY2UgPSBmdW5jdGlvbiAoc3VyZmFjZSkge1xuICAgICAgICAgICAgICAgIHZhciBjdXI7XG4gICAgICAgICAgICAgICAgdmFyIG5ld1VwcyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIHdhbGtlciA9IHRoaXMud2Fsa0RlZXAoKTsgd2Fsa2VyLnN0ZXAoKTspIHtcbiAgICAgICAgICAgICAgICAgICAgY3VyID0gd2Fsa2VyLmN1cnJlbnQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXIudHJlZS5zdXJmYWNlID09PSBzdXJmYWNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3YWxrZXIuc2tpcEJyYW5jaCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIG9sZHMgPSBjdXIudHJlZS5zdXJmYWNlO1xuICAgICAgICAgICAgICAgICAgICBjdXIudHJlZS5zdXJmYWNlID0gc3VyZmFjZTtcbiAgICAgICAgICAgICAgICAgICAgY3VyLm9uU3VyZmFjZUNoYW5nZWQob2xkcywgc3VyZmFjZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdXJmYWNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKGN1ci5hc3NldHMuZGlydHlGbGFncyAmIG1pbmVydmEuRGlydHlGbGFncy5Eb3duRGlydHlTdGF0ZSkgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VyLiQkaW5Eb3duRGlydHkgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1cmZhY2UuYWRkRG93bkRpcnR5KGN1cik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKGN1ci5hc3NldHMuZGlydHlGbGFncyAmIG1pbmVydmEuRGlydHlGbGFncy5VcERpcnR5U3RhdGUpID4gMClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdVcHMucHVzaChjdXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHdoaWxlICgoY3VyID0gbmV3VXBzLnBvcCgpKSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGN1ci4kJGluVXBEaXJ0eSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHN1cmZhY2UuYWRkVXBEaXJ0eShjdXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBVcGRhdGVyLnByb3RvdHlwZS5vblN1cmZhY2VDaGFuZ2VkID0gZnVuY3Rpb24gKG9sZFN1cmZhY2UsIG5ld1N1cmZhY2UpIHtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBVcGRhdGVyLnByb3RvdHlwZS53YWxrRGVlcCA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICAgICAgICAgICAgICB2YXIgbGFzdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB2YXIgd2Fsa0xpc3QgPSBbdGhpc107XG4gICAgICAgICAgICAgICAgZGlyID0gZGlyIHx8IG1pbmVydmEuV2Fsa0RpcmVjdGlvbi5Gb3J3YXJkO1xuICAgICAgICAgICAgICAgIHZhciByZXZkaXIgPSAoZGlyID09PSBtaW5lcnZhLldhbGtEaXJlY3Rpb24uRm9yd2FyZCB8fCBkaXIgPT09IG1pbmVydmEuV2Fsa0RpcmVjdGlvbi5aRm9yd2FyZCkgPyBkaXIgKyAxIDogZGlyIC0gMTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50OiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgIHN0ZXA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgc3Vid2Fsa2VyID0gbGFzdC50cmVlLndhbGsocmV2ZGlyKTsgc3Vid2Fsa2VyLnN0ZXAoKTspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2Fsa0xpc3QudW5zaGlmdChzdWJ3YWxrZXIuY3VycmVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50ID0gbGFzdCA9IHdhbGtMaXN0LnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50ICE9PSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHNraXBCcmFuY2g6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFVwZGF0ZXIucHJvdG90eXBlLnNldE1lYXN1cmVQaXBlID0gZnVuY3Rpb24gKHBpcGVkZWYpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy4kJG1lYXN1cmUpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICAgIHZhciBkZWYgPSBwaXBlZGVmIHx8IG5ldyBjb3JlLm1lYXN1cmUuTWVhc3VyZVBpcGVEZWYoKTtcbiAgICAgICAgICAgICAgICB0aGlzLiQkbWVhc3VyZSA9IG1pbmVydmEucGlwZS5jcmVhdGVUcmlQaXBlKGRlZik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgVXBkYXRlci5wcm90b3R5cGUuc2V0TWVhc3VyZUJpbmRlciA9IGZ1bmN0aW9uIChtYikge1xuICAgICAgICAgICAgICAgIHRoaXMuJCRtZWFzdXJlQmluZGVyID0gbWIgfHwgbmV3IGNvcmUubWVhc3VyZS5NZWFzdXJlQmluZGVyKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgVXBkYXRlci5wcm90b3R5cGUuc2V0QXJyYW5nZVBpcGUgPSBmdW5jdGlvbiAocGlwZWRlZikge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLiQkYXJyYW5nZSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICAgICAgdmFyIGRlZiA9IHBpcGVkZWYgfHwgbmV3IGNvcmUuYXJyYW5nZS5BcnJhbmdlUGlwZURlZigpO1xuICAgICAgICAgICAgICAgIHRoaXMuJCRhcnJhbmdlID0gbWluZXJ2YS5waXBlLmNyZWF0ZVRyaVBpcGUoZGVmKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBVcGRhdGVyLnByb3RvdHlwZS5zZXRBcnJhbmdlQmluZGVyID0gZnVuY3Rpb24gKGFiKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kJGFycmFuZ2VCaW5kZXIgPSBhYiB8fCBuZXcgY29yZS5hcnJhbmdlLkFycmFuZ2VCaW5kZXIoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBVcGRhdGVyLnByb3RvdHlwZS5zZXRTaXppbmdQaXBlID0gZnVuY3Rpb24gKHBpcGVkZWYpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy4kJHNpemluZylcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICAgICAgdmFyIGRlZiA9IHBpcGVkZWY7XG4gICAgICAgICAgICAgICAgaWYgKCFkZWYpXG4gICAgICAgICAgICAgICAgICAgIGRlZiA9IG5ldyBjb3JlLnNpemluZy5TaXppbmdQaXBlRGVmKCk7XG4gICAgICAgICAgICAgICAgdGhpcy4kJHNpemluZyA9IG1pbmVydmEucGlwZS5jcmVhdGVUcmlQaXBlKGRlZik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgVXBkYXRlci5wcm90b3R5cGUuc2V0UHJvY2Vzc0Rvd25QaXBlID0gZnVuY3Rpb24gKHBpcGVkZWYpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGVmID0gcGlwZWRlZjtcbiAgICAgICAgICAgICAgICBpZiAoIWRlZilcbiAgICAgICAgICAgICAgICAgICAgZGVmID0gbmV3IGNvcmUucHJvY2Vzc2Rvd24uUHJvY2Vzc0Rvd25QaXBlRGVmKCk7XG4gICAgICAgICAgICAgICAgdGhpcy4kJHByb2Nlc3Nkb3duID0gbWluZXJ2YS5waXBlLmNyZWF0ZVRyaVBpcGUoZGVmKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBVcGRhdGVyLnByb3RvdHlwZS5zZXRQcm9jZXNzVXBQaXBlID0gZnVuY3Rpb24gKHBpcGVkZWYpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy4kJHByb2Nlc3N1cClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICAgICAgdmFyIGRlZiA9IHBpcGVkZWY7XG4gICAgICAgICAgICAgICAgaWYgKCFkZWYpXG4gICAgICAgICAgICAgICAgICAgIGRlZiA9IG5ldyBjb3JlLnByb2Nlc3N1cC5Qcm9jZXNzVXBQaXBlRGVmKCk7XG4gICAgICAgICAgICAgICAgdGhpcy4kJHByb2Nlc3N1cCA9IG1pbmVydmEucGlwZS5jcmVhdGVUcmlQaXBlKGRlZik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgVXBkYXRlci5wcm90b3R5cGUuc2V0UmVuZGVyUGlwZSA9IGZ1bmN0aW9uIChwaXBlZGVmKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuJCRyZW5kZXIpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICAgIHZhciBkZWYgPSBwaXBlZGVmIHx8IG5ldyBjb3JlLnJlbmRlci5SZW5kZXJQaXBlRGVmKCk7XG4gICAgICAgICAgICAgICAgdGhpcy4kJHJlbmRlciA9IG1pbmVydmEucGlwZS5jcmVhdGVUcmlQaXBlKGRlZik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgVXBkYXRlci5wcm90b3R5cGUuc2V0SGl0VGVzdFBpcGUgPSBmdW5jdGlvbiAocGlwZWRlZikge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLiQkaGl0dGVzdClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICAgICAgdmFyIGRlZiA9IHBpcGVkZWYgfHwgbmV3IGNvcmUuaGl0dGVzdC5IaXRUZXN0UGlwZURlZigpO1xuICAgICAgICAgICAgICAgIHRoaXMuJCRoaXR0ZXN0ID0ge1xuICAgICAgICAgICAgICAgICAgICBkZWY6IGRlZixcbiAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlcjogdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFzc2V0czogdGhpcy5hc3NldHMsXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmVlOiB0aGlzLnRyZWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBoaXRDaGlsZHJlbjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBib3VuZHM6IG5ldyBtaW5lcnZhLlJlY3QoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxheW91dENsaXBCb3VuZHM6IG5ldyBtaW5lcnZhLlJlY3QoKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBVcGRhdGVyLnByb3RvdHlwZS5kb01lYXN1cmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kJG1lYXN1cmVCaW5kZXIuYmluZCh0aGlzKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBVcGRhdGVyLnByb3RvdHlwZS5tZWFzdXJlID0gZnVuY3Rpb24gKGF2YWlsYWJsZVNpemUpIHtcbiAgICAgICAgICAgICAgICB2YXIgcGlwZSA9IHRoaXMuJCRtZWFzdXJlO1xuICAgICAgICAgICAgICAgIHZhciBvdXRwdXQgPSBwaXBlLm91dHB1dDtcbiAgICAgICAgICAgICAgICB2YXIgc3VjY2VzcyA9IHBpcGUuZGVmLnJ1bih0aGlzLmFzc2V0cywgcGlwZS5zdGF0ZSwgb3V0cHV0LCB0aGlzLnRyZWUsIGF2YWlsYWJsZVNpemUpO1xuICAgICAgICAgICAgICAgIGlmIChvdXRwdXQubmV3VXBEaXJ0eSlcbiAgICAgICAgICAgICAgICAgICAgVXBkYXRlci4kJGFkZFVwRGlydHkodGhpcyk7XG4gICAgICAgICAgICAgICAgaWYgKG91dHB1dC5uZXdEb3duRGlydHkpXG4gICAgICAgICAgICAgICAgICAgIFVwZGF0ZXIuJCRhZGREb3duRGlydHkodGhpcyk7XG4gICAgICAgICAgICAgICAgaWYgKG91dHB1dC5uZXdVaUZsYWdzKVxuICAgICAgICAgICAgICAgICAgICBVcGRhdGVyLiQkcHJvcGFnYXRlVWlGbGFnc1VwKHRoaXMsIG91dHB1dC5uZXdVaUZsYWdzKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3VjY2VzcztcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBVcGRhdGVyLnByb3RvdHlwZS5kb0FycmFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kJGFycmFuZ2VCaW5kZXIuYmluZCh0aGlzKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBVcGRhdGVyLnByb3RvdHlwZS5hcnJhbmdlID0gZnVuY3Rpb24gKGZpbmFsUmVjdCkge1xuICAgICAgICAgICAgICAgIHZhciBwaXBlID0gdGhpcy4kJGFycmFuZ2U7XG4gICAgICAgICAgICAgICAgdmFyIG91dHB1dCA9IHBpcGUub3V0cHV0O1xuICAgICAgICAgICAgICAgIHZhciBzdWNjZXNzID0gcGlwZS5kZWYucnVuKHRoaXMuYXNzZXRzLCBwaXBlLnN0YXRlLCBvdXRwdXQsIHRoaXMudHJlZSwgZmluYWxSZWN0KTtcbiAgICAgICAgICAgICAgICBpZiAob3V0cHV0Lm5ld1VwRGlydHkpXG4gICAgICAgICAgICAgICAgICAgIFVwZGF0ZXIuJCRhZGRVcERpcnR5KHRoaXMpO1xuICAgICAgICAgICAgICAgIGlmIChvdXRwdXQubmV3RG93bkRpcnR5KVxuICAgICAgICAgICAgICAgICAgICBVcGRhdGVyLiQkYWRkRG93bkRpcnR5KHRoaXMpO1xuICAgICAgICAgICAgICAgIGlmIChvdXRwdXQubmV3VWlGbGFncylcbiAgICAgICAgICAgICAgICAgICAgVXBkYXRlci4kJHByb3BhZ2F0ZVVpRmxhZ3NVcCh0aGlzLCBvdXRwdXQubmV3VWlGbGFncyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN1Y2Nlc3M7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgVXBkYXRlci5wcm90b3R5cGUuc2l6aW5nID0gZnVuY3Rpb24gKG9sZFNpemUsIG5ld1NpemUpIHtcbiAgICAgICAgICAgICAgICB2YXIgcGlwZSA9IHRoaXMuJCRzaXppbmc7XG4gICAgICAgICAgICAgICAgdmFyIGFzc2V0cyA9IHRoaXMuYXNzZXRzO1xuICAgICAgICAgICAgICAgIGlmIChhc3NldHMubGFzdFJlbmRlclNpemUpXG4gICAgICAgICAgICAgICAgICAgIG1pbmVydmEuU2l6ZS5jb3B5VG8oYXNzZXRzLmxhc3RSZW5kZXJTaXplLCBvbGRTaXplKTtcbiAgICAgICAgICAgICAgICB2YXIgc3VjY2VzcyA9IHBpcGUuZGVmLnJ1bihhc3NldHMsIHBpcGUuc3RhdGUsIHBpcGUub3V0cHV0LCB0aGlzLnRyZWUpO1xuICAgICAgICAgICAgICAgIG1pbmVydmEuU2l6ZS5jb3B5VG8ocGlwZS5vdXRwdXQuYWN0dWFsU2l6ZSwgbmV3U2l6ZSk7XG4gICAgICAgICAgICAgICAgdGhpcy4kJHNpemV1cGRhdGVyLnNldEFjdHVhbFdpZHRoKG5ld1NpemUud2lkdGgpO1xuICAgICAgICAgICAgICAgIHRoaXMuJCRzaXpldXBkYXRlci5zZXRBY3R1YWxIZWlnaHQobmV3U2l6ZS5oZWlnaHQpO1xuICAgICAgICAgICAgICAgIGFzc2V0cy5sYXN0UmVuZGVyU2l6ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3VjY2VzcztcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBVcGRhdGVyLnByb3RvdHlwZS5wcm9jZXNzRG93biA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMudHJlZS5zdXJmYWNlKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLiQkaW5Eb3duRGlydHkgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuJCRpbkRvd25EaXJ0eSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgdmFyIHZwID0gdGhpcy50cmVlLnZpc3VhbFBhcmVudDtcbiAgICAgICAgICAgICAgICBpZiAodnAgJiYgdnAuJCRpbkRvd25EaXJ0eSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBwaXBlID0gdGhpcy4kJHByb2Nlc3Nkb3duO1xuICAgICAgICAgICAgICAgIHZhciBzdWNjZXNzID0gcGlwZS5kZWYucnVuKHRoaXMuYXNzZXRzLCBwaXBlLnN0YXRlLCBwaXBlLm91dHB1dCwgdnAgPyB2cC5hc3NldHMgOiBudWxsLCB0aGlzLnRyZWUpO1xuICAgICAgICAgICAgICAgIHRoaXMuJCRpbkRvd25EaXJ0eSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGlmIChwaXBlLm91dHB1dC5uZXdVcERpcnR5KVxuICAgICAgICAgICAgICAgICAgICBVcGRhdGVyLiQkYWRkVXBEaXJ0eSh0aGlzKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3VjY2VzcztcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBVcGRhdGVyLnByb3RvdHlwZS5wcm9jZXNzVXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLnRyZWUuc3VyZmFjZSlcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kJGluVXBEaXJ0eSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy4kJGluVXBEaXJ0eSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgdmFyIHBpcGUgPSB0aGlzLiQkcHJvY2Vzc3VwO1xuICAgICAgICAgICAgICAgIHZhciBzdWNjZXNzID0gcGlwZS5kZWYucnVuKHRoaXMuYXNzZXRzLCBwaXBlLnN0YXRlLCBwaXBlLm91dHB1dCwgdGhpcy50cmVlKTtcbiAgICAgICAgICAgICAgICB0aGlzLiQkaW5VcERpcnR5ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN1Y2Nlc3M7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgVXBkYXRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKGN0eCwgcmVnaW9uKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBpcGUgPSB0aGlzLiQkcmVuZGVyO1xuICAgICAgICAgICAgICAgIHJldHVybiBwaXBlLmRlZi5ydW4odGhpcy5hc3NldHMsIHBpcGUuc3RhdGUsIHBpcGUub3V0cHV0LCBjdHgsIHJlZ2lvbiwgdGhpcy50cmVlKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBVcGRhdGVyLnByb3RvdHlwZS5wcmVSZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgVXBkYXRlci5wcm90b3R5cGUuaGl0VGVzdCA9IGZ1bmN0aW9uIChwb3MsIGxpc3QsIGN0eCwgaW5jbHVkZUFsbCkge1xuICAgICAgICAgICAgICAgIHZhciBwaXBlID0gdGhpcy4kJGhpdHRlc3Q7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBpcGUuZGVmLnJ1bihwaXBlLmRhdGEsIHBvcywgbGlzdCwgY3R4LCBpbmNsdWRlQWxsID09PSB0cnVlKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBVcGRhdGVyLnByb3RvdHlwZS5vblNpemVDaGFuZ2VkID0gZnVuY3Rpb24gKG9sZFNpemUsIG5ld1NpemUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiQkc2l6ZXVwZGF0ZXIub25TaXplQ2hhbmdlZChvbGRTaXplLCBuZXdTaXplKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBVcGRhdGVyLnByb3RvdHlwZS5zZXRTaXplVXBkYXRlciA9IGZ1bmN0aW9uICh1cGRhdGVyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kJHNpemV1cGRhdGVyID0gdXBkYXRlciB8fCBtaW5lcnZhLk5PX1NJWkVfVVBEQVRFUjtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBVcGRhdGVyLnByb3RvdHlwZS5pbnZhbGlkYXRlTWVhc3VyZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFzc2V0cy5kaXJ0eUZsYWdzIHw9IG1pbmVydmEuRGlydHlGbGFncy5NZWFzdXJlO1xuICAgICAgICAgICAgICAgIFVwZGF0ZXIuJCRwcm9wYWdhdGVVaUZsYWdzVXAodGhpcywgbWluZXJ2YS5VSUZsYWdzLk1lYXN1cmVIaW50KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBVcGRhdGVyLnByb3RvdHlwZS5pbnZhbGlkYXRlQXJyYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFzc2V0cy5kaXJ0eUZsYWdzIHw9IG1pbmVydmEuRGlydHlGbGFncy5BcnJhbmdlO1xuICAgICAgICAgICAgICAgIFVwZGF0ZXIuJCRwcm9wYWdhdGVVaUZsYWdzVXAodGhpcywgbWluZXJ2YS5VSUZsYWdzLkFycmFuZ2VIaW50KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBVcGRhdGVyLnByb3RvdHlwZS51cGRhdGVCb3VuZHMgPSBmdW5jdGlvbiAoZm9yY2VSZWRyYXcpIHtcbiAgICAgICAgICAgICAgICB2YXIgYXNzZXRzID0gdGhpcy5hc3NldHM7XG4gICAgICAgICAgICAgICAgYXNzZXRzLmRpcnR5RmxhZ3MgfD0gbWluZXJ2YS5EaXJ0eUZsYWdzLkJvdW5kcztcbiAgICAgICAgICAgICAgICBVcGRhdGVyLiQkYWRkVXBEaXJ0eSh0aGlzKTtcbiAgICAgICAgICAgICAgICBpZiAoZm9yY2VSZWRyYXcgPT09IHRydWUpXG4gICAgICAgICAgICAgICAgICAgIGFzc2V0cy5mb3JjZUludmFsaWRhdGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFVwZGF0ZXIucHJvdG90eXBlLmZ1bGxJbnZhbGlkYXRlID0gZnVuY3Rpb24gKGludlRyYW5zZm9ybXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgYXNzZXRzID0gdGhpcy5hc3NldHM7XG4gICAgICAgICAgICAgICAgdGhpcy5pbnZhbGlkYXRlKGFzc2V0cy5zdXJmYWNlQm91bmRzV2l0aENoaWxkcmVuKTtcbiAgICAgICAgICAgICAgICBpZiAoaW52VHJhbnNmb3Jtcykge1xuICAgICAgICAgICAgICAgICAgICBhc3NldHMuZGlydHlGbGFncyB8PSBtaW5lcnZhLkRpcnR5RmxhZ3MuTG9jYWxUcmFuc2Zvcm07XG4gICAgICAgICAgICAgICAgICAgIFVwZGF0ZXIuJCRhZGREb3duRGlydHkodGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlQm91bmRzKHRydWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFVwZGF0ZXIucHJvdG90eXBlLmludmFsaWRhdGUgPSBmdW5jdGlvbiAocmVnaW9uKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFzc2V0cyA9IHRoaXMuYXNzZXRzO1xuICAgICAgICAgICAgICAgIGlmICghYXNzZXRzLnRvdGFsSXNSZW5kZXJWaXNpYmxlIHx8IChhc3NldHMudG90YWxPcGFjaXR5ICogMjU1KSA8IDAuNSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICAgICAgYXNzZXRzLmRpcnR5RmxhZ3MgfD0gbWluZXJ2YS5EaXJ0eUZsYWdzLkludmFsaWRhdGU7XG4gICAgICAgICAgICAgICAgVXBkYXRlci4kJGFkZFVwRGlydHkodGhpcyk7XG4gICAgICAgICAgICAgICAgaWYgKCFyZWdpb24pXG4gICAgICAgICAgICAgICAgICAgIHJlZ2lvbiA9IGFzc2V0cy5zdXJmYWNlQm91bmRzV2l0aENoaWxkcmVuO1xuICAgICAgICAgICAgICAgIG1pbmVydmEuUmVjdC51bmlvbihhc3NldHMuZGlydHlSZWdpb24sIHJlZ2lvbik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgVXBkYXRlci5wcm90b3R5cGUuZmluZENoaWxkSW5MaXN0ID0gZnVuY3Rpb24gKGxpc3QpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gbGlzdC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAobGlzdFtpXS50cmVlLnZpc3VhbFBhcmVudCA9PT0gdGhpcylcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgVXBkYXRlci4kJGFkZFVwRGlydHkgPSBmdW5jdGlvbiAodXBkYXRlcikge1xuICAgICAgICAgICAgICAgIHZhciBzdXJmYWNlID0gdXBkYXRlci50cmVlLnN1cmZhY2U7XG4gICAgICAgICAgICAgICAgaWYgKHN1cmZhY2UgJiYgIXVwZGF0ZXIuJCRpblVwRGlydHkpIHtcbiAgICAgICAgICAgICAgICAgICAgc3VyZmFjZS5hZGRVcERpcnR5KHVwZGF0ZXIpO1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVyLiQkaW5VcERpcnR5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgVXBkYXRlci4kJGFkZERvd25EaXJ0eSA9IGZ1bmN0aW9uICh1cGRhdGVyKSB7XG4gICAgICAgICAgICAgICAgdmFyIHN1cmZhY2UgPSB1cGRhdGVyLnRyZWUuc3VyZmFjZTtcbiAgICAgICAgICAgICAgICBpZiAoc3VyZmFjZSAmJiAhdXBkYXRlci4kJGluRG93bkRpcnR5KSB7XG4gICAgICAgICAgICAgICAgICAgIHN1cmZhY2UuYWRkRG93bkRpcnR5KHVwZGF0ZXIpO1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVyLiQkaW5Eb3duRGlydHkgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBVcGRhdGVyLiQkcHJvcGFnYXRlVWlGbGFnc1VwID0gZnVuY3Rpb24gKHVwZGF0ZXIsIGZsYWdzKSB7XG4gICAgICAgICAgICAgICAgdXBkYXRlci5hc3NldHMudWlGbGFncyB8PSBmbGFncztcbiAgICAgICAgICAgICAgICB2YXIgdnB1ID0gdXBkYXRlcjtcbiAgICAgICAgICAgICAgICB3aGlsZSAoKHZwdSA9IHZwdS50cmVlLnZpc3VhbFBhcmVudCkgIT0gbnVsbCAmJiAodnB1LmFzc2V0cy51aUZsYWdzICYgZmxhZ3MpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHZwdS5hc3NldHMudWlGbGFncyB8PSBmbGFncztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgVXBkYXRlci50cmFuc2Zvcm1Ub1Zpc3VhbCA9IGZ1bmN0aW9uIChmcm9tVXBkYXRlciwgdG9VcGRhdGVyKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFmcm9tVXBkYXRlci50cmVlLnN1cmZhY2UgfHwgKHRvVXBkYXRlciAmJiAhdG9VcGRhdGVyLnRyZWUuc3VyZmFjZSkpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIHZhciBtID0gbWluZXJ2YS5tYXQzLmNyZWF0ZSgpO1xuICAgICAgICAgICAgICAgIHZhciBhID0gZnJvbVVwZGF0ZXIuYXNzZXRzLmFic29sdXRlWGZvcm07XG4gICAgICAgICAgICAgICAgaWYgKHRvVXBkYXRlcikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW52QiA9IG1pbmVydmEubWF0My5pbnZlcnNlKHRvVXBkYXRlci5hc3NldHMuYWJzb2x1dGVYZm9ybSwgbWluZXJ2YS5tYXQzLmNyZWF0ZSgpKTtcbiAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5tYXQzLm11bHRpcGx5KGEsIGludkIsIG0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5tYXQzLmNvcHlUbyhhLCBtKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgVXBkYXRlci50cmFuc2Zvcm1Qb2ludCA9IGZ1bmN0aW9uICh1cGRhdGVyLCBwKSB7XG4gICAgICAgICAgICAgICAgdmFyIGludmVyc2UgPSBtaW5lcnZhLm1hdDMuaW52ZXJzZSh1cGRhdGVyLmFzc2V0cy5hYnNvbHV0ZVhmb3JtLCBtaW5lcnZhLm1hdDMuY3JlYXRlKCkpO1xuICAgICAgICAgICAgICAgIGlmICghaW52ZXJzZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJDb3VsZCBub3QgZ2V0IGludmVyc2Ugb2YgQWJzb2x1dGUgVHJhbnNmb3JtIGZvciBVSUVsZW1lbnQuXCIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBwMiA9IG1pbmVydmEudmVjMi5jcmVhdGUocC54LCBwLnkpO1xuICAgICAgICAgICAgICAgIG1pbmVydmEubWF0My50cmFuc2Zvcm1WZWMyKGludmVyc2UsIHAyKTtcbiAgICAgICAgICAgICAgICBwLnggPSBwMlswXTtcbiAgICAgICAgICAgICAgICBwLnkgPSBwMlsxXTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gVXBkYXRlcjtcbiAgICAgICAgfSkoKTtcbiAgICAgICAgY29yZS5VcGRhdGVyID0gVXBkYXRlcjtcbiAgICB9KShjb3JlID0gbWluZXJ2YS5jb3JlIHx8IChtaW5lcnZhLmNvcmUgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vY29yZS9VcGRhdGVyXCIgLz5cbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59O1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgYW5vbjtcbiAgICAoZnVuY3Rpb24gKGFub24pIHtcbiAgICAgICAgdmFyIEFub255bW91c1VwZGF0ZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgX19leHRlbmRzKEFub255bW91c1VwZGF0ZXIsIF9zdXBlcik7XG4gICAgICAgICAgICBmdW5jdGlvbiBBbm9ueW1vdXNVcGRhdGVyKCkge1xuICAgICAgICAgICAgICAgIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgQW5vbnltb3VzVXBkYXRlci5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldE1lYXN1cmVQaXBlKG5ldyBhbm9uLm1lYXN1cmUuQW5vbnltb3VzTWVhc3VyZVBpcGVEZWYodGhpcykpXG4gICAgICAgICAgICAgICAgICAgIC5zZXRBcnJhbmdlUGlwZShuZXcgYW5vbi5hcnJhbmdlLkFub255bW91c0FycmFuZ2VQaXBlRGVmKHRoaXMpKTtcbiAgICAgICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLmluaXQuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBBbm9ueW1vdXNVcGRhdGVyLnByb3RvdHlwZS5tZWFzdXJlT3ZlcnJpZGUgPSBmdW5jdGlvbiAoYXZhaWxhYmxlU2l6ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhdmFpbGFibGVTaXplO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIEFub255bW91c1VwZGF0ZXIucHJvdG90eXBlLmFycmFuZ2VPdmVycmlkZSA9IGZ1bmN0aW9uIChhcnJhbmdlU2l6ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhcnJhbmdlU2l6ZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gQW5vbnltb3VzVXBkYXRlcjtcbiAgICAgICAgfSkobWluZXJ2YS5jb3JlLlVwZGF0ZXIpO1xuICAgICAgICBhbm9uLkFub255bW91c1VwZGF0ZXIgPSBBbm9ueW1vdXNVcGRhdGVyO1xuICAgIH0pKGFub24gPSBtaW5lcnZhLmFub24gfHwgKG1pbmVydmEuYW5vbiA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvcmU7XG4gICAgKGZ1bmN0aW9uIChjb3JlKSB7XG4gICAgICAgIHZhciBoZWxwZXJzO1xuICAgICAgICAoZnVuY3Rpb24gKGhlbHBlcnMpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGNvZXJjZVNpemUoc2l6ZSwgYXNzZXRzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGN3ID0gTWF0aC5tYXgoYXNzZXRzLm1pbldpZHRoLCBzaXplLndpZHRoKTtcbiAgICAgICAgICAgICAgICB2YXIgY2ggPSBNYXRoLm1heChhc3NldHMubWluSGVpZ2h0LCBzaXplLmhlaWdodCk7XG4gICAgICAgICAgICAgICAgaWYgKCFpc05hTihhc3NldHMud2lkdGgpKVxuICAgICAgICAgICAgICAgICAgICBjdyA9IGFzc2V0cy53aWR0aDtcbiAgICAgICAgICAgICAgICBpZiAoIWlzTmFOKGFzc2V0cy5oZWlnaHQpKVxuICAgICAgICAgICAgICAgICAgICBjaCA9IGFzc2V0cy5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgY3cgPSBNYXRoLm1heChNYXRoLm1pbihjdywgYXNzZXRzLm1heFdpZHRoKSwgYXNzZXRzLm1pbldpZHRoKTtcbiAgICAgICAgICAgICAgICBjaCA9IE1hdGgubWF4KE1hdGgubWluKGNoLCBhc3NldHMubWF4SGVpZ2h0KSwgYXNzZXRzLm1pbkhlaWdodCk7XG4gICAgICAgICAgICAgICAgaWYgKGFzc2V0cy51c2VMYXlvdXRSb3VuZGluZykge1xuICAgICAgICAgICAgICAgICAgICBjdyA9IE1hdGgucm91bmQoY3cpO1xuICAgICAgICAgICAgICAgICAgICBjaCA9IE1hdGgucm91bmQoY2gpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzaXplLndpZHRoID0gY3c7XG4gICAgICAgICAgICAgICAgc2l6ZS5oZWlnaHQgPSBjaDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGhlbHBlcnMuY29lcmNlU2l6ZSA9IGNvZXJjZVNpemU7XG4gICAgICAgICAgICBmdW5jdGlvbiBpbnRlcnNlY3RCb3VuZHNXaXRoQ2xpcFBhdGgoZGVzdCwgc3JjLCB0aGlja25lc3MsIHhmb3JtLCBjbGlwLCBsYXlvdXRDbGlwKSB7XG4gICAgICAgICAgICAgICAgbWluZXJ2YS5SZWN0LmNvcHlUbyhzcmMsIGRlc3QpO1xuICAgICAgICAgICAgICAgIG1pbmVydmEuVGhpY2tuZXNzLmdyb3dSZWN0KHRoaWNrbmVzcywgZGVzdCk7XG4gICAgICAgICAgICAgICAgaWYgKGNsaXApXG4gICAgICAgICAgICAgICAgICAgIG1pbmVydmEuUmVjdC5pbnRlcnNlY3Rpb24oZGVzdCwgY2xpcC5HZXRCb3VuZHMoKSk7XG4gICAgICAgICAgICAgICAgaWYgKCFtaW5lcnZhLlJlY3QuaXNFbXB0eShsYXlvdXRDbGlwKSlcbiAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5SZWN0LmludGVyc2VjdGlvbihkZXN0LCBsYXlvdXRDbGlwKTtcbiAgICAgICAgICAgICAgICBpZiAoeGZvcm0pXG4gICAgICAgICAgICAgICAgICAgIG1pbmVydmEuUmVjdC50cmFuc2Zvcm0oZGVzdCwgeGZvcm0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaGVscGVycy5pbnRlcnNlY3RCb3VuZHNXaXRoQ2xpcFBhdGggPSBpbnRlcnNlY3RCb3VuZHNXaXRoQ2xpcFBhdGg7XG4gICAgICAgICAgICB2YXIgb2Zmc2V0ID0gbmV3IG1pbmVydmEuUG9pbnQoKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIHJlbmRlckxheW91dENsaXAoY3R4LCBhc3NldHMsIHRyZWUpIHtcbiAgICAgICAgICAgICAgICB2YXIgbGM7XG4gICAgICAgICAgICAgICAgb2Zmc2V0LnggPSAwO1xuICAgICAgICAgICAgICAgIG9mZnNldC55ID0gMDtcbiAgICAgICAgICAgICAgICB2YXIgcmF3ID0gY3R4LnJhdztcbiAgICAgICAgICAgICAgICB2YXIgY3VyO1xuICAgICAgICAgICAgICAgIHdoaWxlIChhc3NldHMpIHtcbiAgICAgICAgICAgICAgICAgICAgbGMgPSBhc3NldHMubGF5b3V0Q2xpcDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFtaW5lcnZhLlJlY3QuaXNFbXB0eShsYykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhdy5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhdy5yZWN0KGxjLngsIGxjLnksIGxjLndpZHRoLCBsYy5oZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmF3LmNsaXAoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoYXNzZXRzLmJyZWFrTGF5b3V0Q2xpcClcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdm8gPSBhc3NldHMudmlzdWFsT2Zmc2V0O1xuICAgICAgICAgICAgICAgICAgICBvZmZzZXQueCArPSB2by54O1xuICAgICAgICAgICAgICAgICAgICBvZmZzZXQueSArPSB2by55O1xuICAgICAgICAgICAgICAgICAgICBjdHgudHJhbnNsYXRlKC12by54LCAtdm8ueSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdHJlZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjdXIgPSB0cmVlLnZpc3VhbFBhcmVudDtcbiAgICAgICAgICAgICAgICAgICAgdHJlZSA9IGN1ciA/IGN1ci50cmVlIDogbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXRzID0gKGN1ciA/IGN1ci5hc3NldHMgOiBudWxsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY3R4LnRyYW5zbGF0ZShvZmZzZXQueCwgb2Zmc2V0LnkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaGVscGVycy5yZW5kZXJMYXlvdXRDbGlwID0gcmVuZGVyTGF5b3V0Q2xpcDtcbiAgICAgICAgfSkoaGVscGVycyA9IGNvcmUuaGVscGVycyB8fCAoY29yZS5oZWxwZXJzID0ge30pKTtcbiAgICB9KShjb3JlID0gbWluZXJ2YS5jb3JlIHx8IChtaW5lcnZhLmNvcmUgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb3JlO1xuICAgIChmdW5jdGlvbiAoY29yZSkge1xuICAgICAgICB2YXIgcmVhY3RUbztcbiAgICAgICAgKGZ1bmN0aW9uIChyZWFjdFRvKSB7XG4gICAgICAgICAgICB2YXIgaGVscGVycztcbiAgICAgICAgICAgIChmdW5jdGlvbiAoaGVscGVycykge1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGludmFsaWRhdGVQYXJlbnQodXBkYXRlcikge1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVyLnRyZWUudmlzdWFsT3duZXIuaW52YWxpZGF0ZSh1cGRhdGVyLmFzc2V0cy5zdXJmYWNlQm91bmRzV2l0aENoaWxkcmVuKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaGVscGVycy5pbnZhbGlkYXRlUGFyZW50ID0gaW52YWxpZGF0ZVBhcmVudDtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBzaXplQ2hhbmdlZCh1cGRhdGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2cCA9IHVwZGF0ZXIudHJlZS52aXN1YWxQYXJlbnQ7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2cClcbiAgICAgICAgICAgICAgICAgICAgICAgIHZwLmludmFsaWRhdGVNZWFzdXJlKCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBvcmlnaW4gPSB1cGRhdGVyLmFzc2V0cy5yZW5kZXJUcmFuc2Zvcm1PcmlnaW47XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZXIuZnVsbEludmFsaWRhdGUob3JpZ2luLnggIT09IDAuMCB8fCBvcmlnaW4ueSAhPT0gMClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5pbnZhbGlkYXRlTWVhc3VyZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAuaW52YWxpZGF0ZUFycmFuZ2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaGVscGVycy5zaXplQ2hhbmdlZCA9IHNpemVDaGFuZ2VkO1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGFsaWdubWVudENoYW5nZWQodXBkYXRlcikge1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVyLmludmFsaWRhdGVBcnJhbmdlKCk7XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZXIuZnVsbEludmFsaWRhdGUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGhlbHBlcnMuYWxpZ25tZW50Q2hhbmdlZCA9IGFsaWdubWVudENoYW5nZWQ7XG4gICAgICAgICAgICB9KShoZWxwZXJzID0gcmVhY3RUby5oZWxwZXJzIHx8IChyZWFjdFRvLmhlbHBlcnMgPSB7fSkpO1xuICAgICAgICAgICAgZnVuY3Rpb24gaXNIaXRUZXN0VmlzaWJsZSh1cGRhdGVyLCBvbGRWYWx1ZSwgbmV3VmFsdWUpIHtcbiAgICAgICAgICAgICAgICB1cGRhdGVyLmFzc2V0cy5kaXJ0eUZsYWdzIHw9IG1pbmVydmEuRGlydHlGbGFncy5IaXRUZXN0VmlzaWJpbGl0eTtcbiAgICAgICAgICAgICAgICBjb3JlLlVwZGF0ZXIuJCRhZGREb3duRGlydHkodXBkYXRlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZWFjdFRvLmlzSGl0VGVzdFZpc2libGUgPSBpc0hpdFRlc3RWaXNpYmxlO1xuICAgICAgICAgICAgZnVuY3Rpb24gdXNlTGF5b3V0Um91bmRpbmcodXBkYXRlciwgb2xkVmFsdWUsIG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdXBkYXRlci5pbnZhbGlkYXRlTWVhc3VyZSgpO1xuICAgICAgICAgICAgICAgIHVwZGF0ZXIuaW52YWxpZGF0ZUFycmFuZ2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlYWN0VG8udXNlTGF5b3V0Um91bmRpbmcgPSB1c2VMYXlvdXRSb3VuZGluZztcbiAgICAgICAgICAgIGZ1bmN0aW9uIG9wYWNpdHkodXBkYXRlciwgb2xkVmFsdWUsIG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdXBkYXRlci5hc3NldHMuZGlydHlGbGFncyB8PSBtaW5lcnZhLkRpcnR5RmxhZ3MuUmVuZGVyVmlzaWJpbGl0eTtcbiAgICAgICAgICAgICAgICBjb3JlLlVwZGF0ZXIuJCRhZGREb3duRGlydHkodXBkYXRlcik7XG4gICAgICAgICAgICAgICAgaGVscGVycy5pbnZhbGlkYXRlUGFyZW50KHVwZGF0ZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVhY3RUby5vcGFjaXR5ID0gb3BhY2l0eTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIHZpc2liaWxpdHkodXBkYXRlciwgb2xkVmFsdWUsIG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdXBkYXRlci5hc3NldHMuZGlydHlGbGFncyB8PSBtaW5lcnZhLkRpcnR5RmxhZ3MuUmVuZGVyVmlzaWJpbGl0eTtcbiAgICAgICAgICAgICAgICBjb3JlLlVwZGF0ZXIuJCRhZGREb3duRGlydHkodXBkYXRlcik7XG4gICAgICAgICAgICAgICAgaGVscGVycy5pbnZhbGlkYXRlUGFyZW50KHVwZGF0ZXIpO1xuICAgICAgICAgICAgICAgIHVwZGF0ZXIuaW52YWxpZGF0ZU1lYXN1cmUoKTtcbiAgICAgICAgICAgICAgICB2YXIgdnAgPSB1cGRhdGVyLnRyZWUudmlzdWFsUGFyZW50O1xuICAgICAgICAgICAgICAgIGlmICh2cClcbiAgICAgICAgICAgICAgICAgICAgdnAuaW52YWxpZGF0ZU1lYXN1cmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlYWN0VG8udmlzaWJpbGl0eSA9IHZpc2liaWxpdHk7XG4gICAgICAgICAgICBmdW5jdGlvbiBlZmZlY3QodXBkYXRlciwgb2xkVmFsdWUsIG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaGVscGVycy5pbnZhbGlkYXRlUGFyZW50KHVwZGF0ZXIpO1xuICAgICAgICAgICAgICAgIHZhciBjaGFuZ2VkID0gKG5ld1ZhbHVlKSA/IG5ld1ZhbHVlLkdldFBhZGRpbmcodXBkYXRlci5hc3NldHMuZWZmZWN0UGFkZGluZykgOiBmYWxzZTtcbiAgICAgICAgICAgICAgICBpZiAoY2hhbmdlZClcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlci51cGRhdGVCb3VuZHMoKTtcbiAgICAgICAgICAgICAgICBpZiAob2xkVmFsdWUgIT09IG5ld1ZhbHVlICYmIHVwZGF0ZXIudHJlZS5zdXJmYWNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZXIuYXNzZXRzLmRpcnR5RmxhZ3MgfD0gbWluZXJ2YS5EaXJ0eUZsYWdzLkxvY2FsVHJhbnNmb3JtO1xuICAgICAgICAgICAgICAgICAgICBjb3JlLlVwZGF0ZXIuJCRhZGREb3duRGlydHkodXBkYXRlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVhY3RUby5lZmZlY3QgPSBlZmZlY3Q7XG4gICAgICAgICAgICBmdW5jdGlvbiBjbGlwKHVwZGF0ZXIsIG9sZFZhbHVlLCBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgICAgIHZhciBhc3NldHMgPSB1cGRhdGVyLmFzc2V0cztcbiAgICAgICAgICAgICAgICBoZWxwZXJzLmludmFsaWRhdGVQYXJlbnQodXBkYXRlcik7XG4gICAgICAgICAgICAgICAgdXBkYXRlci51cGRhdGVCb3VuZHModHJ1ZSk7XG4gICAgICAgICAgICAgICAgYXNzZXRzLmRpcnR5RmxhZ3MgfD0gbWluZXJ2YS5EaXJ0eUZsYWdzLkxvY2FsQ2xpcDtcbiAgICAgICAgICAgICAgICBjb3JlLlVwZGF0ZXIuJCRhZGREb3duRGlydHkodXBkYXRlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZWFjdFRvLmNsaXAgPSBjbGlwO1xuICAgICAgICAgICAgZnVuY3Rpb24gcmVuZGVyVHJhbnNmb3JtKHVwZGF0ZXIsIG9sZFZhbHVlLCBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgICAgIHVwZGF0ZXIuYXNzZXRzLmRpcnR5RmxhZ3MgfD0gbWluZXJ2YS5EaXJ0eUZsYWdzLkxvY2FsVHJhbnNmb3JtO1xuICAgICAgICAgICAgICAgIGNvcmUuVXBkYXRlci4kJGFkZERvd25EaXJ0eSh1cGRhdGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlYWN0VG8ucmVuZGVyVHJhbnNmb3JtID0gcmVuZGVyVHJhbnNmb3JtO1xuICAgICAgICAgICAgZnVuY3Rpb24gcmVuZGVyVHJhbnNmb3JtT3JpZ2luKHVwZGF0ZXIsIG9sZFZhbHVlLCBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgICAgIHVwZGF0ZXIuYXNzZXRzLmRpcnR5RmxhZ3MgfD0gbWluZXJ2YS5EaXJ0eUZsYWdzLkxvY2FsVHJhbnNmb3JtO1xuICAgICAgICAgICAgICAgIGNvcmUuVXBkYXRlci4kJGFkZERvd25EaXJ0eSh1cGRhdGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlYWN0VG8ucmVuZGVyVHJhbnNmb3JtT3JpZ2luID0gcmVuZGVyVHJhbnNmb3JtT3JpZ2luO1xuICAgICAgICAgICAgcmVhY3RUby53aWR0aCA9IGhlbHBlcnMuc2l6ZUNoYW5nZWQ7XG4gICAgICAgICAgICByZWFjdFRvLmhlaWdodCA9IGhlbHBlcnMuc2l6ZUNoYW5nZWQ7XG4gICAgICAgICAgICByZWFjdFRvLm1pbldpZHRoID0gaGVscGVycy5zaXplQ2hhbmdlZDtcbiAgICAgICAgICAgIHJlYWN0VG8ubWluSGVpZ2h0ID0gaGVscGVycy5zaXplQ2hhbmdlZDtcbiAgICAgICAgICAgIHJlYWN0VG8ubWF4V2lkdGggPSBoZWxwZXJzLnNpemVDaGFuZ2VkO1xuICAgICAgICAgICAgcmVhY3RUby5tYXhIZWlnaHQgPSBoZWxwZXJzLnNpemVDaGFuZ2VkO1xuICAgICAgICAgICAgcmVhY3RUby5tYXJnaW4gPSBoZWxwZXJzLnNpemVDaGFuZ2VkO1xuICAgICAgICAgICAgcmVhY3RUby5mbG93RGlyZWN0aW9uID0gaGVscGVycy5zaXplQ2hhbmdlZDtcbiAgICAgICAgICAgIHJlYWN0VG8uaG9yaXpvbnRhbEFsaWdubWVudCA9IGhlbHBlcnMuYWxpZ25tZW50Q2hhbmdlZDtcbiAgICAgICAgICAgIHJlYWN0VG8udmVydGljYWxBbGlnbm1lbnQgPSBoZWxwZXJzLmFsaWdubWVudENoYW5nZWQ7XG4gICAgICAgIH0pKHJlYWN0VG8gPSBjb3JlLnJlYWN0VG8gfHwgKGNvcmUucmVhY3RUbyA9IHt9KSk7XG4gICAgfSkoY29yZSA9IG1pbmVydmEuY29yZSB8fCAobWluZXJ2YS5jb3JlID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29yZTtcbiAgICAoZnVuY3Rpb24gKGNvcmUpIHtcbiAgICAgICAgdmFyIE5PX1ZPID0ge1xuICAgICAgICAgICAgdXBkYXRlQm91bmRzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaW52YWxpZGF0ZTogZnVuY3Rpb24gKHJlZ2lvbikge1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB2YXIgVXBkYXRlclRyZWUgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZnVuY3Rpb24gVXBkYXRlclRyZWUoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pc1RvcCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMuc3VyZmFjZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy52aXN1YWxQYXJlbnQgPSBudWxsO1xuICAgICAgICAgICAgICAgIHRoaXMuaXNDb250YWluZXIgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLmlzTGF5b3V0Q29udGFpbmVyID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5zdWJ0cmVlID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShVcGRhdGVyVHJlZS5wcm90b3R5cGUsIFwidmlzdWFsT3duZXJcIiwge1xuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy52aXN1YWxQYXJlbnQpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52aXN1YWxQYXJlbnQ7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzVG9wICYmIHRoaXMuc3VyZmFjZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnN1cmZhY2U7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBOT19WTztcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIFVwZGF0ZXJUcmVlLnByb3RvdHlwZS53YWxrID0gZnVuY3Rpb24gKGRpcmVjdGlvbikge1xuICAgICAgICAgICAgICAgIHZhciB2aXNpdGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50OiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgIHN0ZXA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2aXNpdGVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpc2l0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50ID0gX3RoaXMuc3VidHJlZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnQgIT0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgVXBkYXRlclRyZWUucHJvdG90eXBlLm9uQ2hpbGRBdHRhY2hlZCA9IGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3VidHJlZSA9IGNoaWxkO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFVwZGF0ZXJUcmVlLnByb3RvdHlwZS5vbkNoaWxkRGV0YWNoZWQgPSBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN1YnRyZWUgPSBudWxsO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFVwZGF0ZXJUcmVlLnByb3RvdHlwZS5zZXRUZW1wbGF0ZUFwcGxpZXIgPSBmdW5jdGlvbiAoYXBwbGllcikge1xuICAgICAgICAgICAgICAgIHRoaXMuYXBwbHlUZW1wbGF0ZSA9IGFwcGxpZXI7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgVXBkYXRlclRyZWUucHJvdG90eXBlLmFwcGx5VGVtcGxhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBVcGRhdGVyVHJlZTtcbiAgICAgICAgfSkoKTtcbiAgICAgICAgY29yZS5VcGRhdGVyVHJlZSA9IFVwZGF0ZXJUcmVlO1xuICAgIH0pKGNvcmUgPSBtaW5lcnZhLmNvcmUgfHwgKG1pbmVydmEuY29yZSA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGVuZ2luZTtcbiAgICAoZnVuY3Rpb24gKGVuZ2luZSkge1xuICAgICAgICBmdW5jdGlvbiBkcmFmdChsYXllcnMsIGRyYWZ0UGlwZSwgcGFzcykge1xuICAgICAgICAgICAgdmFyIHVwZGF0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBsYXllcnMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICBwYXNzLnVwZGF0ZXIgPSBsYXllcnNbaV07XG4gICAgICAgICAgICAgICAgaWYgKChwYXNzLnVwZGF0ZXIuYXNzZXRzLnVpRmxhZ3MgJiBtaW5lcnZhLlVJRmxhZ3MuSGludHMpID09PSAwKVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBwYXNzLnRyZWUgPSBwYXNzLnVwZGF0ZXIudHJlZTtcbiAgICAgICAgICAgICAgICBwYXNzLmFzc2V0cyA9IHBhc3MudXBkYXRlci5hc3NldHM7XG4gICAgICAgICAgICAgICAgd2hpbGUgKHBhc3MuY291bnQgPCBwYXNzLm1heENvdW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZHJhZnRQaXBlLnJ1bihwYXNzKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcGFzcy5jb3VudCsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB1cGRhdGVkO1xuICAgICAgICB9XG4gICAgICAgIGVuZ2luZS5kcmFmdCA9IGRyYWZ0O1xuICAgIH0pKGVuZ2luZSA9IG1pbmVydmEuZW5naW5lIHx8IChtaW5lcnZhLmVuZ2luZSA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGVuZ2luZTtcbiAgICAoZnVuY3Rpb24gKGVuZ2luZSkge1xuICAgICAgICBmdW5jdGlvbiBwcm9jZXNzKGRvd24sIHVwKSB7XG4gICAgICAgICAgICB2YXIgdXBkYXRlZCA9IGRvd24ubGVuZ3RoID4gMCB8fCB1cC5sZW5ndGggPiAwO1xuICAgICAgICAgICAgcHJvY2Vzc0Rvd24oZG93bik7XG4gICAgICAgICAgICBwcm9jZXNzVXAodXApO1xuICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZWQ7XG4gICAgICAgIH1cbiAgICAgICAgZW5naW5lLnByb2Nlc3MgPSBwcm9jZXNzO1xuICAgICAgICBmdW5jdGlvbiBwcm9jZXNzRG93bihsaXN0KSB7XG4gICAgICAgICAgICBmb3IgKHZhciB1cGRhdGVyOyAodXBkYXRlciA9IGxpc3RbMF0pICE9IG51bGw7KSB7XG4gICAgICAgICAgICAgICAgaWYgKHVwZGF0ZXIucHJvY2Vzc0Rvd24oKSkge1xuICAgICAgICAgICAgICAgICAgICBsaXN0LnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBsaXN0LnB1c2gobGlzdC5zaGlmdCgpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobGlzdC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiW01JTkVSVkFdIEZpbmlzaGVkIERvd25EaXJ0eSBwYXNzLCBub3QgZW1wdHkuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHByb2Nlc3NVcChsaXN0KSB7XG4gICAgICAgICAgICBmb3IgKHZhciB1cGRhdGVyOyAodXBkYXRlciA9IGxpc3RbMF0pICE9IG51bGw7KSB7XG4gICAgICAgICAgICAgICAgdmFyIGNoaWxkSW5kZXggPSB1cGRhdGVyLmZpbmRDaGlsZEluTGlzdChsaXN0KTtcbiAgICAgICAgICAgICAgICBpZiAoY2hpbGRJbmRleCA+IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIGxpc3Quc3BsaWNlKGNoaWxkSW5kZXggKyAxLCAwLCBsaXN0LnNoaWZ0KCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh1cGRhdGVyLnByb2Nlc3NVcCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGxpc3Quc2hpZnQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobGlzdC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiW01JTkVSVkFdIEZpbmlzaGVkIFVwRGlydHkgcGFzcywgbm90IGVtcHR5LlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pKGVuZ2luZSA9IG1pbmVydmEuZW5naW5lIHx8IChtaW5lcnZhLmVuZ2luZSA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGVuZ2luZTtcbiAgICAoZnVuY3Rpb24gKGVuZ2luZSkge1xuICAgICAgICB2YXIgZm9udEN0eCA9IG51bGw7XG4gICAgICAgIHZhciBoaXRUZXN0Q3R4ID0gbnVsbDtcbiAgICAgICAgdmFyIFN1cmZhY2UgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZnVuY3Rpb24gU3VyZmFjZSgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiQkbGF5b3V0ID0gbmV3IG1pbmVydmEuY29yZS5kcmFmdC5EcmFmdFBpcGVEZWYoKTtcbiAgICAgICAgICAgICAgICB0aGlzLiQkY2FudmFzID0gbnVsbDtcbiAgICAgICAgICAgICAgICB0aGlzLiQkY3R4ID0gbnVsbDtcbiAgICAgICAgICAgICAgICB0aGlzLiQkbGF5ZXJzID0gW107XG4gICAgICAgICAgICAgICAgdGhpcy4kJHByZXJlbmRlcmhvb2tzID0gW107XG4gICAgICAgICAgICAgICAgdGhpcy4kJGRvd25EaXJ0eSA9IFtdO1xuICAgICAgICAgICAgICAgIHRoaXMuJCR1cERpcnR5ID0gW107XG4gICAgICAgICAgICAgICAgdGhpcy4kJGRpcnR5UmVnaW9uID0gbnVsbDtcbiAgICAgICAgICAgICAgICB0aGlzLiQkd2lkdGggPSAwO1xuICAgICAgICAgICAgICAgIHRoaXMuJCRoZWlnaHQgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFN1cmZhY2UucHJvdG90eXBlLCBcIndpZHRoXCIsIHtcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuJCR3aWR0aDtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTdXJmYWNlLnByb3RvdHlwZSwgXCJoZWlnaHRcIiwge1xuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy4kJGhlaWdodDtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIFN1cmZhY2UucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoY2FudmFzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kJGNhbnZhcyA9IGNhbnZhcztcbiAgICAgICAgICAgICAgICB0aGlzLiQkY3R4ID0gbmV3IG1pbmVydmEuY29yZS5yZW5kZXIuUmVuZGVyQ29udGV4dChjYW52YXMuZ2V0Q29udGV4dCgnMmQnLCB7IGFscGhhOiBmYWxzZSB9KSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgU3VyZmFjZS5wcm90b3R5cGUuYXR0YWNoTGF5ZXIgPSBmdW5jdGlvbiAobGF5ZXIsIHJvb3QpIHtcbiAgICAgICAgICAgICAgICBpZiAocm9vdCA9PT0gdHJ1ZSlcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kJGxheWVycy51bnNoaWZ0KGxheWVyKTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJCRsYXllcnMucHVzaChsYXllcik7XG4gICAgICAgICAgICAgICAgbGF5ZXIudHJlZS5pc1RvcCA9IHRydWU7XG4gICAgICAgICAgICAgICAgbGF5ZXIuaW52YWxpZGF0ZU1lYXN1cmUoKTtcbiAgICAgICAgICAgICAgICBsYXllci5mdWxsSW52YWxpZGF0ZSgpO1xuICAgICAgICAgICAgICAgIGxheWVyLnNldFN1cmZhY2UodGhpcyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgU3VyZmFjZS5wcm90b3R5cGUuZGV0YWNoTGF5ZXIgPSBmdW5jdGlvbiAobGF5ZXIpIHtcbiAgICAgICAgICAgICAgICBsYXllci50cmVlLmlzVG9wID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgbGF5ZXIuc2V0U3VyZmFjZShudWxsKTtcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLiQkbGF5ZXJzLmluZGV4T2YobGF5ZXIpO1xuICAgICAgICAgICAgICAgIGlmIChpbmRleCA+IC0xKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLiQkbGF5ZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICAgICAgdGhpcy5pbnZhbGlkYXRlKGxheWVyLmFzc2V0cy5zdXJmYWNlQm91bmRzV2l0aENoaWxkcmVuKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBTdXJmYWNlLnByb3RvdHlwZS53YWxrTGF5ZXJzID0gZnVuY3Rpb24gKHJldmVyc2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgbGF5ZXJzID0gdGhpcy4kJGxheWVycztcbiAgICAgICAgICAgICAgICB2YXIgaSA9IC0xO1xuICAgICAgICAgICAgICAgIGlmIChyZXZlcnNlID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGkgPSBsYXllcnMubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RlcDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGktLTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnQgPSBsYXllcnNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudCAhPT0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0ZXA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50ID0gbGF5ZXJzW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnQgIT09IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgU3VyZmFjZS5wcm90b3R5cGUudXBkYXRlQm91bmRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFN1cmZhY2UucHJvdG90eXBlLmludmFsaWRhdGUgPSBmdW5jdGlvbiAocmVnaW9uKSB7XG4gICAgICAgICAgICAgICAgcmVnaW9uID0gcmVnaW9uIHx8IG5ldyBtaW5lcnZhLlJlY3QoMCwgMCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy4kJGRpcnR5UmVnaW9uKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLiQkZGlydHlSZWdpb24gPSBuZXcgbWluZXJ2YS5SZWN0KHJlZ2lvbi54LCByZWdpb24ueSwgcmVnaW9uLndpZHRoLCByZWdpb24uaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIG1pbmVydmEuUmVjdC51bmlvbih0aGlzLiQkZGlydHlSZWdpb24sIHJlZ2lvbik7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgU3VyZmFjZS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBob29rcyA9IHRoaXMuJCRwcmVyZW5kZXJob29rczsgaSA8IGhvb2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGhvb2tzW2ldLnByZVJlbmRlcigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgcmVnaW9uID0gdGhpcy4kJGRpcnR5UmVnaW9uO1xuICAgICAgICAgICAgICAgIGlmICghcmVnaW9uIHx8IG1pbmVydmEuUmVjdC5pc0VtcHR5KHJlZ2lvbikpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB0aGlzLiQkZGlydHlSZWdpb24gPSBudWxsO1xuICAgICAgICAgICAgICAgIG1pbmVydmEuUmVjdC5yb3VuZE91dChyZWdpb24pO1xuICAgICAgICAgICAgICAgIHZhciBjdHggPSB0aGlzLiQkY3R4O1xuICAgICAgICAgICAgICAgIGN0eC5zaXplLmNvbW1pdFJlc2l6ZSgpO1xuICAgICAgICAgICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgICAgICAgICAgY3R4LmFwcGx5RHBpUmF0aW8oKTtcbiAgICAgICAgICAgICAgICBjdHgucmF3LmZpbGxTdHlsZSA9IFwiI2ZmZmZmZlwiO1xuICAgICAgICAgICAgICAgIGN0eC5yYXcuZmlsbFJlY3QocmVnaW9uLngsIHJlZ2lvbi55LCByZWdpb24ud2lkdGgsIHJlZ2lvbi5oZWlnaHQpO1xuICAgICAgICAgICAgICAgIGN0eC5jbGlwUmVjdChyZWdpb24pO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGxheWVycyA9IHRoaXMuJCRsYXllcnMsIGkgPSAwLCBsZW4gPSBsYXllcnMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgbGF5ZXJzW2ldLnJlbmRlcihjdHgsIHJlZ2lvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgU3VyZmFjZS5wcm90b3R5cGUuaG9va1ByZXJlbmRlciA9IGZ1bmN0aW9uICh1cGRhdGVyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kJHByZXJlbmRlcmhvb2tzLnB1c2godXBkYXRlcik7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgU3VyZmFjZS5wcm90b3R5cGUudW5ob29rUHJlcmVuZGVyID0gZnVuY3Rpb24gKHVwZGF0ZXIpIHtcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLiQkcHJlcmVuZGVyaG9va3MuaW5kZXhPZih1cGRhdGVyKTtcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiQkcHJlcmVuZGVyaG9va3Muc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgU3VyZmFjZS5wcm90b3R5cGUuYWRkVXBEaXJ0eSA9IGZ1bmN0aW9uICh1cGRhdGVyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kJHVwRGlydHkucHVzaCh1cGRhdGVyKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBTdXJmYWNlLnByb3RvdHlwZS5hZGREb3duRGlydHkgPSBmdW5jdGlvbiAodXBkYXRlcikge1xuICAgICAgICAgICAgICAgIHRoaXMuJCRkb3duRGlydHkucHVzaCh1cGRhdGVyKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBTdXJmYWNlLnByb3RvdHlwZS51cGRhdGVMYXlvdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBhc3MgPSB7XG4gICAgICAgICAgICAgICAgICAgIGNvdW50OiAwLFxuICAgICAgICAgICAgICAgICAgICBtYXhDb3VudDogMjUwLFxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBhc3NldHM6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHRyZWU6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIGZsYWc6IG1pbmVydmEuVUlGbGFncy5Ob25lLFxuICAgICAgICAgICAgICAgICAgICBtZWFzdXJlTGlzdDogW10sXG4gICAgICAgICAgICAgICAgICAgIGFycmFuZ2VMaXN0OiBbXSxcbiAgICAgICAgICAgICAgICAgICAgc2l6aW5nTGlzdDogW10sXG4gICAgICAgICAgICAgICAgICAgIHN1cmZhY2VTaXplOiBuZXcgbWluZXJ2YS5TaXplKHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KSxcbiAgICAgICAgICAgICAgICAgICAgc2l6aW5nVXBkYXRlczogW11cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHZhciB1cGRhdGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdmFyIGxheWVyc1VwZGF0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHdoaWxlIChwYXNzLmNvdW50IDwgcGFzcy5tYXhDb3VudCAmJiBsYXllcnNVcGRhdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGxheWVyc1VwZGF0ZWQgPSBlbmdpbmUuZHJhZnQodGhpcy4kJGxheWVycywgdGhpcy4kJGxheW91dCwgcGFzcyk7XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZWQgPSBlbmdpbmUucHJvY2Vzcyh0aGlzLiQkZG93bkRpcnR5LCB0aGlzLiQkdXBEaXJ0eSkgfHwgbGF5ZXJzVXBkYXRlZCB8fCB1cGRhdGVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocGFzcy5jb3VudCA+PSBwYXNzLm1heENvdW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJbTUlORVJWQV0gQWJvcnRpbmcgaW5maW5pdGUgdXBkYXRlIGxvb3BcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB1cGRhdGVkO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFN1cmZhY2UucHJvdG90eXBlLnJlc2l6ZSA9IGZ1bmN0aW9uICh3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuJCR3aWR0aCA9PT0gd2lkdGggJiYgdGhpcy4kJGhlaWdodCA9PT0gaGVpZ2h0KVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgdmFyIHJlZ2lvbiA9IG5ldyBtaW5lcnZhLlJlY3QoMCwgMCwgdGhpcy4kJHdpZHRoLCB0aGlzLiQkaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICBtaW5lcnZhLlJlY3QudW5pb24ocmVnaW9uLCBuZXcgbWluZXJ2YS5SZWN0KDAsIDAsIHdpZHRoLCBoZWlnaHQpKTtcbiAgICAgICAgICAgICAgICBtaW5lcnZhLlJlY3Qucm91bmRPdXQocmVnaW9uKTtcbiAgICAgICAgICAgICAgICB0aGlzLiQkd2lkdGggPSB3aWR0aDtcbiAgICAgICAgICAgICAgICB0aGlzLiQkaGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgICAgICAgICAgIHRoaXMuJCRjdHguc2l6ZS5xdWV1ZVJlc2l6ZSh3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICB0aGlzLmludmFsaWRhdGUocmVnaW9uKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBsYXllcnMgPSB0aGlzLiQkbGF5ZXJzLCBpID0gMDsgaSA8IGxheWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBsYXllcnNbaV0uaW52YWxpZGF0ZU1lYXN1cmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgU3VyZmFjZS5wcm90b3R5cGUuaGl0VGVzdCA9IGZ1bmN0aW9uIChwb3MpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy4kJGxheWVycy5sZW5ndGggPCAxKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICBoaXRUZXN0Q3R4ID0gaGl0VGVzdEN0eCB8fCBuZXcgbWluZXJ2YS5jb3JlLnJlbmRlci5SZW5kZXJDb250ZXh0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpLmdldENvbnRleHQoJzJkJykpO1xuICAgICAgICAgICAgICAgIGhpdFRlc3RDdHguc2l6ZVxuICAgICAgICAgICAgICAgICAgICAucXVldWVSZXNpemUodGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpXG4gICAgICAgICAgICAgICAgICAgIC5jb21taXRSZXNpemUoKTtcbiAgICAgICAgICAgICAgICB2YXIgbGlzdCA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGxheWVycyA9IHRoaXMuJCRsYXllcnMsIGkgPSBsYXllcnMubGVuZ3RoIC0gMTsgaSA+PSAwICYmIGxpc3QubGVuZ3RoID09PSAwOyBpLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgbGF5ZXJzW2ldLmhpdFRlc3QocG9zLCBsaXN0LCBoaXRUZXN0Q3R4LCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBsaXN0O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFN1cmZhY2UucHJvdG90eXBlLnVwZGF0ZURwaVJhdGlvID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLiQkY3R4LnNpemUudXBkYXRlRHBpUmF0aW8oKSlcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnZhbGlkYXRlKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgU3VyZmFjZS5tZWFzdXJlV2lkdGggPSBmdW5jdGlvbiAodGV4dCwgZm9udCkge1xuICAgICAgICAgICAgICAgIGZvbnRDdHggPSBmb250Q3R4IHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpLmdldENvbnRleHQoJzJkJyk7XG4gICAgICAgICAgICAgICAgZm9udEN0eC5mb250ID0gZm9udC50b0h0bWw1T2JqZWN0KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZvbnRDdHgubWVhc3VyZVRleHQodGV4dCkud2lkdGg7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIFN1cmZhY2U7XG4gICAgICAgIH0pKCk7XG4gICAgICAgIGVuZ2luZS5TdXJmYWNlID0gU3VyZmFjZTtcbiAgICB9KShlbmdpbmUgPSBtaW5lcnZhLmVuZ2luZSB8fCAobWluZXJ2YS5lbmdpbmUgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBGTE9BVF9FUFNJTE9OID0gMC4wMDAwMDE7XG4gICAgdmFyIGNyZWF0ZVR5cGVkQXJyYXk7XG4gICAgaWYgKHR5cGVvZiBGbG9hdDMyQXJyYXkgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgY3JlYXRlVHlwZWRBcnJheSA9IGZ1bmN0aW9uIChsZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KGxlbmd0aCk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjcmVhdGVUeXBlZEFycmF5ID0gZnVuY3Rpb24gKGxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBBcnJheShsZW5ndGgpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBtaW5lcnZhLm1hdDMgPSB7XG4gICAgICAgIGNyZWF0ZTogZnVuY3Rpb24gKHNyYykge1xuICAgICAgICAgICAgdmFyIGRlc3QgPSBjcmVhdGVUeXBlZEFycmF5KDYpO1xuICAgICAgICAgICAgaWYgKHNyYykge1xuICAgICAgICAgICAgICAgIGRlc3RbMF0gPSBzcmNbMF07XG4gICAgICAgICAgICAgICAgZGVzdFsxXSA9IHNyY1sxXTtcbiAgICAgICAgICAgICAgICBkZXN0WzJdID0gc3JjWzJdO1xuICAgICAgICAgICAgICAgIGRlc3RbM10gPSBzcmNbM107XG4gICAgICAgICAgICAgICAgZGVzdFs0XSA9IHNyY1s0XTtcbiAgICAgICAgICAgICAgICBkZXN0WzVdID0gc3JjWzVdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZGVzdFswXSA9IGRlc3RbMV0gPSBkZXN0WzJdID0gZGVzdFszXSA9IGRlc3RbNF0gPSBkZXN0WzVdID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkZXN0O1xuICAgICAgICB9LFxuICAgICAgICBjb3B5VG86IGZ1bmN0aW9uIChzcmMsIGRlc3QpIHtcbiAgICAgICAgICAgIGRlc3RbMF0gPSBzcmNbMF07XG4gICAgICAgICAgICBkZXN0WzFdID0gc3JjWzFdO1xuICAgICAgICAgICAgZGVzdFsyXSA9IHNyY1syXTtcbiAgICAgICAgICAgIGRlc3RbM10gPSBzcmNbM107XG4gICAgICAgICAgICBkZXN0WzRdID0gc3JjWzRdO1xuICAgICAgICAgICAgZGVzdFs1XSA9IHNyY1s1XTtcbiAgICAgICAgICAgIHJldHVybiBkZXN0O1xuICAgICAgICB9LFxuICAgICAgICBpbml0OiBmdW5jdGlvbiAoZGVzdCwgbTExLCBtMTIsIG0yMSwgbTIyLCB4MCwgeTApIHtcbiAgICAgICAgICAgIGRlc3RbMF0gPSBtMTE7XG4gICAgICAgICAgICBkZXN0WzFdID0gbTEyO1xuICAgICAgICAgICAgZGVzdFsyXSA9IG0yMTtcbiAgICAgICAgICAgIGRlc3RbM10gPSBtMjI7XG4gICAgICAgICAgICBkZXN0WzRdID0geDA7XG4gICAgICAgICAgICBkZXN0WzVdID0geTA7XG4gICAgICAgICAgICByZXR1cm4gZGVzdDtcbiAgICAgICAgfSxcbiAgICAgICAgaWRlbnRpdHk6IGZ1bmN0aW9uIChkZXN0KSB7XG4gICAgICAgICAgICBpZiAoIWRlc3QpXG4gICAgICAgICAgICAgICAgZGVzdCA9IG1pbmVydmEubWF0My5jcmVhdGUoKTtcbiAgICAgICAgICAgIGRlc3RbMF0gPSAxO1xuICAgICAgICAgICAgZGVzdFsxXSA9IDA7XG4gICAgICAgICAgICBkZXN0WzJdID0gMDtcbiAgICAgICAgICAgIGRlc3RbM10gPSAxO1xuICAgICAgICAgICAgZGVzdFs0XSA9IDA7XG4gICAgICAgICAgICBkZXN0WzVdID0gMDtcbiAgICAgICAgICAgIHJldHVybiBkZXN0O1xuICAgICAgICB9LFxuICAgICAgICBlcXVhbDogZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgIHJldHVybiBhID09PSBiIHx8IChNYXRoLmFicyhhWzBdIC0gYlswXSkgPCBGTE9BVF9FUFNJTE9OICYmXG4gICAgICAgICAgICAgICAgTWF0aC5hYnMoYVsxXSAtIGJbMV0pIDwgRkxPQVRfRVBTSUxPTiAmJlxuICAgICAgICAgICAgICAgIE1hdGguYWJzKGFbMl0gLSBiWzJdKSA8IEZMT0FUX0VQU0lMT04gJiZcbiAgICAgICAgICAgICAgICBNYXRoLmFicyhhWzNdIC0gYlszXSkgPCBGTE9BVF9FUFNJTE9OICYmXG4gICAgICAgICAgICAgICAgTWF0aC5hYnMoYVs0XSAtIGJbNF0pIDwgRkxPQVRfRVBTSUxPTiAmJlxuICAgICAgICAgICAgICAgIE1hdGguYWJzKGFbNV0gLSBiWzVdKSA8IEZMT0FUX0VQU0lMT04pO1xuICAgICAgICB9LFxuICAgICAgICBtdWx0aXBseTogZnVuY3Rpb24gKGEsIGIsIGRlc3QpIHtcbiAgICAgICAgICAgIGlmICghZGVzdClcbiAgICAgICAgICAgICAgICBkZXN0ID0gYTtcbiAgICAgICAgICAgIHZhciBhMTEgPSBhWzBdLCBhMTIgPSBhWzFdLCBhMjEgPSBhWzJdLCBhMjIgPSBhWzNdLCBheDAgPSBhWzRdLCBheTAgPSBhWzVdLCBiMTEgPSBiWzBdLCBiMTIgPSBiWzFdLCBiMjEgPSBiWzJdLCBiMjIgPSBiWzNdLCBieDAgPSBiWzRdLCBieTAgPSBiWzVdO1xuICAgICAgICAgICAgZGVzdFswXSA9IGExMSAqIGIxMSArIGExMiAqIGIyMTtcbiAgICAgICAgICAgIGRlc3RbMV0gPSBhMTEgKiBiMTIgKyBhMTIgKiBiMjI7XG4gICAgICAgICAgICBkZXN0WzJdID0gYTIxICogYjExICsgYTIyICogYjIxO1xuICAgICAgICAgICAgZGVzdFszXSA9IGEyMSAqIGIxMiArIGEyMiAqIGIyMjtcbiAgICAgICAgICAgIGRlc3RbNF0gPSBheDAgKiBiMTEgKyBheTAgKiBiMjEgKyBieDA7XG4gICAgICAgICAgICBkZXN0WzVdID0gYXgwICogYjEyICsgYXkwICogYjIyICsgYnkwO1xuICAgICAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgICAgIH0sXG4gICAgICAgIGludmVyc2U6IGZ1bmN0aW9uIChtYXQsIGRlc3QpIHtcbiAgICAgICAgICAgIGlmIChNYXRoLmFicyhtYXRbMV0pIDwgRkxPQVRfRVBTSUxPTiAmJiBNYXRoLmFicyhtYXRbMl0pIDwgRkxPQVRfRVBTSUxPTilcbiAgICAgICAgICAgICAgICByZXR1cm4gc2ltcGxlX2ludmVyc2UobWF0LCBkZXN0KTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tcGxleF9pbnZlcnNlKG1hdCwgZGVzdCk7XG4gICAgICAgIH0sXG4gICAgICAgIHRyYW5zZm9ybVZlYzI6IGZ1bmN0aW9uIChtYXQsIHZlYywgZGVzdCkge1xuICAgICAgICAgICAgaWYgKCFkZXN0KVxuICAgICAgICAgICAgICAgIGRlc3QgPSB2ZWM7XG4gICAgICAgICAgICB2YXIgeCA9IHZlY1swXSwgeSA9IHZlY1sxXTtcbiAgICAgICAgICAgIGRlc3RbMF0gPSAobWF0WzBdICogeCkgKyAobWF0WzJdICogeSkgKyBtYXRbNF07XG4gICAgICAgICAgICBkZXN0WzFdID0gKG1hdFsxXSAqIHgpICsgKG1hdFszXSAqIHkpICsgbWF0WzVdO1xuICAgICAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgICAgIH0sXG4gICAgICAgIGNyZWF0ZVRyYW5zbGF0ZTogZnVuY3Rpb24gKHgsIHksIGRlc3QpIHtcbiAgICAgICAgICAgIGlmICghZGVzdClcbiAgICAgICAgICAgICAgICBkZXN0ID0gbWluZXJ2YS5tYXQzLmNyZWF0ZSgpO1xuICAgICAgICAgICAgZGVzdFswXSA9IDE7XG4gICAgICAgICAgICBkZXN0WzFdID0gMDtcbiAgICAgICAgICAgIGRlc3RbMl0gPSAwO1xuICAgICAgICAgICAgZGVzdFszXSA9IDE7XG4gICAgICAgICAgICBkZXN0WzRdID0geDtcbiAgICAgICAgICAgIGRlc3RbNV0gPSB5O1xuICAgICAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgICAgIH0sXG4gICAgICAgIHRyYW5zbGF0ZTogZnVuY3Rpb24gKG1hdCwgeCwgeSkge1xuICAgICAgICAgICAgbWF0WzRdICs9IHg7XG4gICAgICAgICAgICBtYXRbNV0gKz0geTtcbiAgICAgICAgICAgIHJldHVybiBtYXQ7XG4gICAgICAgIH0sXG4gICAgICAgIGNyZWF0ZVNjYWxlOiBmdW5jdGlvbiAoc3gsIHN5LCBkZXN0KSB7XG4gICAgICAgICAgICBpZiAoIWRlc3QpXG4gICAgICAgICAgICAgICAgZGVzdCA9IG1pbmVydmEubWF0My5jcmVhdGUoKTtcbiAgICAgICAgICAgIGRlc3RbMF0gPSBzeDtcbiAgICAgICAgICAgIGRlc3RbMV0gPSAwO1xuICAgICAgICAgICAgZGVzdFsyXSA9IDA7XG4gICAgICAgICAgICBkZXN0WzNdID0gc3k7XG4gICAgICAgICAgICBkZXN0WzRdID0gMDtcbiAgICAgICAgICAgIGRlc3RbNV0gPSAwO1xuICAgICAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgICAgIH0sXG4gICAgICAgIHNjYWxlOiBmdW5jdGlvbiAobWF0LCBzeCwgc3kpIHtcbiAgICAgICAgICAgIG1hdFswXSAqPSBzeDtcbiAgICAgICAgICAgIG1hdFsyXSAqPSBzeDtcbiAgICAgICAgICAgIG1hdFs0XSAqPSBzeDtcbiAgICAgICAgICAgIG1hdFsxXSAqPSBzeTtcbiAgICAgICAgICAgIG1hdFszXSAqPSBzeTtcbiAgICAgICAgICAgIG1hdFs1XSAqPSBzeTtcbiAgICAgICAgICAgIHJldHVybiBtYXQ7XG4gICAgICAgIH0sXG4gICAgICAgIGNyZWF0ZVJvdGF0ZTogZnVuY3Rpb24gKGFuZ2xlUmFkLCBkZXN0KSB7XG4gICAgICAgICAgICBpZiAoIWRlc3QpXG4gICAgICAgICAgICAgICAgZGVzdCA9IG1pbmVydmEubWF0My5jcmVhdGUoKTtcbiAgICAgICAgICAgIHZhciBjID0gTWF0aC5jb3MoYW5nbGVSYWQpO1xuICAgICAgICAgICAgdmFyIHMgPSBNYXRoLnNpbihhbmdsZVJhZCk7XG4gICAgICAgICAgICBkZXN0WzBdID0gYztcbiAgICAgICAgICAgIGRlc3RbMV0gPSBzO1xuICAgICAgICAgICAgZGVzdFsyXSA9IC1zO1xuICAgICAgICAgICAgZGVzdFszXSA9IGM7XG4gICAgICAgICAgICBkZXN0WzRdID0gMDtcbiAgICAgICAgICAgIGRlc3RbNV0gPSAwO1xuICAgICAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgICAgIH0sXG4gICAgICAgIGNyZWF0ZVNrZXc6IGZ1bmN0aW9uIChhbmdsZVJhZFgsIGFuZ2xlUmFkWSwgZGVzdCkge1xuICAgICAgICAgICAgaWYgKCFkZXN0KVxuICAgICAgICAgICAgICAgIGRlc3QgPSBtaW5lcnZhLm1hdDMuY3JlYXRlKCk7XG4gICAgICAgICAgICBkZXN0WzBdID0gMTtcbiAgICAgICAgICAgIGRlc3RbMV0gPSBNYXRoLnRhbihhbmdsZVJhZFkpO1xuICAgICAgICAgICAgZGVzdFsyXSA9IE1hdGgudGFuKGFuZ2xlUmFkWCk7XG4gICAgICAgICAgICBkZXN0WzNdID0gMTtcbiAgICAgICAgICAgIGRlc3RbNF0gPSAwO1xuICAgICAgICAgICAgZGVzdFs1XSA9IDA7XG4gICAgICAgICAgICByZXR1cm4gZGVzdDtcbiAgICAgICAgfSxcbiAgICAgICAgcHJlYXBwbHk6IGZ1bmN0aW9uIChkZXN0LCBtYXQpIHtcbiAgICAgICAgICAgIHJldHVybiBtaW5lcnZhLm1hdDMubXVsdGlwbHkobWF0LCBkZXN0LCBkZXN0KTtcbiAgICAgICAgfSxcbiAgICAgICAgYXBwbHk6IGZ1bmN0aW9uIChkZXN0LCBtYXQpIHtcbiAgICAgICAgICAgIHJldHVybiBtaW5lcnZhLm1hdDMubXVsdGlwbHkoZGVzdCwgbWF0LCBkZXN0KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgZnVuY3Rpb24gc2ltcGxlX2ludmVyc2UobWF0LCBkZXN0KSB7XG4gICAgICAgIHZhciBtMTEgPSBtYXRbMF07XG4gICAgICAgIGlmIChNYXRoLmFicyhtMTEpIDwgRkxPQVRfRVBTSUxPTilcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB2YXIgbTIyID0gbWF0WzNdO1xuICAgICAgICBpZiAoTWF0aC5hYnMobTIyKSA8IEZMT0FUX0VQU0lMT04pXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgaWYgKCFkZXN0KSB7XG4gICAgICAgICAgICBkZXN0ID0gbWF0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZGVzdFsxXSA9IG1hdFsxXTtcbiAgICAgICAgICAgIGRlc3RbMl0gPSBtYXRbMl07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHgwID0gLW1hdFs0XTtcbiAgICAgICAgdmFyIHkwID0gLW1hdFs1XTtcbiAgICAgICAgaWYgKE1hdGguYWJzKG0xMSAtIDEpID4gRkxPQVRfRVBTSUxPTikge1xuICAgICAgICAgICAgbTExID0gMSAvIG0xMTtcbiAgICAgICAgICAgIHgwICo9IG0xMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoTWF0aC5hYnMobTIyIC0gMSkgPiBGTE9BVF9FUFNJTE9OKSB7XG4gICAgICAgICAgICBtMjIgPSAxIC8gbTIyO1xuICAgICAgICAgICAgeTAgKj0gbTIyO1xuICAgICAgICB9XG4gICAgICAgIGRlc3RbMF0gPSBtMTE7XG4gICAgICAgIGRlc3RbM10gPSBtMjI7XG4gICAgICAgIGRlc3RbNF0gPSB4MDtcbiAgICAgICAgZGVzdFs1XSA9IHkwO1xuICAgICAgICByZXR1cm4gZGVzdDtcbiAgICB9XG4gICAgZnVuY3Rpb24gY29tcGxleF9pbnZlcnNlKG1hdCwgZGVzdCkge1xuICAgICAgICBpZiAoIWRlc3QpXG4gICAgICAgICAgICBkZXN0ID0gbWF0O1xuICAgICAgICB2YXIgbTExID0gbWF0WzBdLCBtMTIgPSBtYXRbMV0sIG0yMSA9IG1hdFsyXSwgbTIyID0gbWF0WzNdO1xuICAgICAgICB2YXIgZGV0ID0gbTExICogbTIyIC0gbTEyICogbTIxO1xuICAgICAgICBpZiAoZGV0ID09PSAwIHx8ICFpc0Zpbml0ZShkZXQpKVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIHZhciBpZCA9IDEgLyBkZXQ7XG4gICAgICAgIHZhciB4MCA9IG1hdFs0XSwgeTAgPSBtYXRbNV07XG4gICAgICAgIGRlc3RbMF0gPSBtMjIgKiBpZDtcbiAgICAgICAgZGVzdFsxXSA9IC1tMTIgKiBpZDtcbiAgICAgICAgZGVzdFsyXSA9IC1tMjEgKiBpZDtcbiAgICAgICAgZGVzdFszXSA9IG0xMSAqIGlkO1xuICAgICAgICBkZXN0WzRdID0gKG0yMSAqIHkwIC0gbTIyICogeDApICogaWQ7XG4gICAgICAgIGRlc3RbNV0gPSAobTEyICogeDAgLSBtMTEgKiB5MCkgKiBpZDtcbiAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfVxufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWF0MyA9IG1pbmVydmEubWF0MztcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIEluZGV4ZXM7XG4gICAgKGZ1bmN0aW9uIChJbmRleGVzKSB7XG4gICAgICAgIEluZGV4ZXNbSW5kZXhlc1tcIk0xMVwiXSA9IDBdID0gXCJNMTFcIjtcbiAgICAgICAgSW5kZXhlc1tJbmRleGVzW1wiTTEyXCJdID0gMV0gPSBcIk0xMlwiO1xuICAgICAgICBJbmRleGVzW0luZGV4ZXNbXCJNMTNcIl0gPSAyXSA9IFwiTTEzXCI7XG4gICAgICAgIEluZGV4ZXNbSW5kZXhlc1tcIk0xNFwiXSA9IDNdID0gXCJNMTRcIjtcbiAgICAgICAgSW5kZXhlc1tJbmRleGVzW1wiTTIxXCJdID0gNF0gPSBcIk0yMVwiO1xuICAgICAgICBJbmRleGVzW0luZGV4ZXNbXCJNMjJcIl0gPSA1XSA9IFwiTTIyXCI7XG4gICAgICAgIEluZGV4ZXNbSW5kZXhlc1tcIk0yM1wiXSA9IDZdID0gXCJNMjNcIjtcbiAgICAgICAgSW5kZXhlc1tJbmRleGVzW1wiTTI0XCJdID0gN10gPSBcIk0yNFwiO1xuICAgICAgICBJbmRleGVzW0luZGV4ZXNbXCJNMzFcIl0gPSA4XSA9IFwiTTMxXCI7XG4gICAgICAgIEluZGV4ZXNbSW5kZXhlc1tcIk0zMlwiXSA9IDldID0gXCJNMzJcIjtcbiAgICAgICAgSW5kZXhlc1tJbmRleGVzW1wiTTMzXCJdID0gMTBdID0gXCJNMzNcIjtcbiAgICAgICAgSW5kZXhlc1tJbmRleGVzW1wiTTM0XCJdID0gMTFdID0gXCJNMzRcIjtcbiAgICAgICAgSW5kZXhlc1tJbmRleGVzW1wiT2Zmc2V0WFwiXSA9IDEyXSA9IFwiT2Zmc2V0WFwiO1xuICAgICAgICBJbmRleGVzW0luZGV4ZXNbXCJPZmZzZXRZXCJdID0gMTNdID0gXCJPZmZzZXRZXCI7XG4gICAgICAgIEluZGV4ZXNbSW5kZXhlc1tcIk9mZnNldFpcIl0gPSAxNF0gPSBcIk9mZnNldFpcIjtcbiAgICAgICAgSW5kZXhlc1tJbmRleGVzW1wiTTQ0XCJdID0gMTVdID0gXCJNNDRcIjtcbiAgICB9KShJbmRleGVzIHx8IChJbmRleGVzID0ge30pKTtcbiAgICB2YXIgRkxPQVRfRVBTSUxPTiA9IDAuMDAwMDAxO1xuICAgIHZhciBjcmVhdGVUeXBlZEFycmF5O1xuICAgIGlmICh0eXBlb2YgRmxvYXQzMkFycmF5ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGNyZWF0ZVR5cGVkQXJyYXkgPSBmdW5jdGlvbiAobGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEZsb2F0MzJBcnJheShsZW5ndGgpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY3JlYXRlVHlwZWRBcnJheSA9IGZ1bmN0aW9uIChsZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQXJyYXkobGVuZ3RoKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgbWluZXJ2YS5tYXQ0ID0ge1xuICAgICAgICBjcmVhdGU6IGZ1bmN0aW9uIChzcmMpIHtcbiAgICAgICAgICAgIHZhciBkZXN0ID0gY3JlYXRlVHlwZWRBcnJheSgxNik7XG4gICAgICAgICAgICBpZiAoc3JjKSB7XG4gICAgICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0xMV0gPSBzcmNbSW5kZXhlcy5NMTFdO1xuICAgICAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMTJdID0gc3JjW0luZGV4ZXMuTTEyXTtcbiAgICAgICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTEzXSA9IHNyY1tJbmRleGVzLk0xM107XG4gICAgICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0xNF0gPSBzcmNbSW5kZXhlcy5NMTRdO1xuICAgICAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMjFdID0gc3JjW0luZGV4ZXMuTTIxXTtcbiAgICAgICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTIyXSA9IHNyY1tJbmRleGVzLk0yMl07XG4gICAgICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0yM10gPSBzcmNbSW5kZXhlcy5NMjNdO1xuICAgICAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMjRdID0gc3JjW0luZGV4ZXMuTTI0XTtcbiAgICAgICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTMxXSA9IHNyY1tJbmRleGVzLk0zMV07XG4gICAgICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0zMl0gPSBzcmNbSW5kZXhlcy5NMzJdO1xuICAgICAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMzNdID0gc3JjW0luZGV4ZXMuTTMzXTtcbiAgICAgICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTM0XSA9IHNyY1tJbmRleGVzLk0zNF07XG4gICAgICAgICAgICAgICAgZGVzdFtJbmRleGVzLk9mZnNldFhdID0gc3JjW0luZGV4ZXMuT2Zmc2V0WF07XG4gICAgICAgICAgICAgICAgZGVzdFtJbmRleGVzLk9mZnNldFldID0gc3JjW0luZGV4ZXMuT2Zmc2V0WV07XG4gICAgICAgICAgICAgICAgZGVzdFtJbmRleGVzLk9mZnNldFpdID0gc3JjW0luZGV4ZXMuT2Zmc2V0Wl07XG4gICAgICAgICAgICAgICAgZGVzdFtJbmRleGVzLk00NF0gPSBzcmNbSW5kZXhlcy5NNDRdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgICAgIH0sXG4gICAgICAgIGNvcHlUbzogZnVuY3Rpb24gKHNyYywgZGVzdCkge1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0xMV0gPSBzcmNbSW5kZXhlcy5NMTFdO1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0xMl0gPSBzcmNbSW5kZXhlcy5NMTJdO1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0xM10gPSBzcmNbSW5kZXhlcy5NMTNdO1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0xNF0gPSBzcmNbSW5kZXhlcy5NMTRdO1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0yMV0gPSBzcmNbSW5kZXhlcy5NMjFdO1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0yMl0gPSBzcmNbSW5kZXhlcy5NMjJdO1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0yM10gPSBzcmNbSW5kZXhlcy5NMjNdO1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0yNF0gPSBzcmNbSW5kZXhlcy5NMjRdO1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0zMV0gPSBzcmNbSW5kZXhlcy5NMzFdO1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0zMl0gPSBzcmNbSW5kZXhlcy5NMzJdO1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0zM10gPSBzcmNbSW5kZXhlcy5NMzNdO1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0zNF0gPSBzcmNbSW5kZXhlcy5NMzRdO1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk9mZnNldFhdID0gc3JjW0luZGV4ZXMuT2Zmc2V0WF07XG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuT2Zmc2V0WV0gPSBzcmNbSW5kZXhlcy5PZmZzZXRZXTtcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5PZmZzZXRaXSA9IHNyY1tJbmRleGVzLk9mZnNldFpdO1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk00NF0gPSBzcmNbSW5kZXhlcy5NNDRdO1xuICAgICAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgICAgIH0sXG4gICAgICAgIGlkZW50aXR5OiBmdW5jdGlvbiAoZGVzdCkge1xuICAgICAgICAgICAgaWYgKCFkZXN0KVxuICAgICAgICAgICAgICAgIGRlc3QgPSBtaW5lcnZhLm1hdDQuY3JlYXRlKCk7XG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTExXSA9IDE7XG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTEyXSA9IDA7XG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTEzXSA9IDA7XG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTE0XSA9IDA7XG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTIxXSA9IDA7XG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTIyXSA9IDE7XG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTIzXSA9IDA7XG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTI0XSA9IDA7XG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTMxXSA9IDA7XG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTMyXSA9IDA7XG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTMzXSA9IDE7XG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTM0XSA9IDA7XG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuT2Zmc2V0WF0gPSAwO1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk9mZnNldFldID0gMDtcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5PZmZzZXRaXSA9IDA7XG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTQ0XSA9IDE7XG4gICAgICAgICAgICByZXR1cm4gZGVzdDtcbiAgICAgICAgfSxcbiAgICAgICAgZXF1YWw6IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gYSA9PT0gYiB8fCAoTWF0aC5hYnMoYVtJbmRleGVzLk0xMV0gLSBiW0luZGV4ZXMuTTExXSkgPCBGTE9BVF9FUFNJTE9OICYmXG4gICAgICAgICAgICAgICAgTWF0aC5hYnMoYVtJbmRleGVzLk0xMl0gLSBiW0luZGV4ZXMuTTEyXSkgPCBGTE9BVF9FUFNJTE9OICYmXG4gICAgICAgICAgICAgICAgTWF0aC5hYnMoYVtJbmRleGVzLk0xM10gLSBiW0luZGV4ZXMuTTEzXSkgPCBGTE9BVF9FUFNJTE9OICYmXG4gICAgICAgICAgICAgICAgTWF0aC5hYnMoYVtJbmRleGVzLk0xNF0gLSBiW0luZGV4ZXMuTTE0XSkgPCBGTE9BVF9FUFNJTE9OICYmXG4gICAgICAgICAgICAgICAgTWF0aC5hYnMoYVtJbmRleGVzLk0yMV0gLSBiW0luZGV4ZXMuTTIxXSkgPCBGTE9BVF9FUFNJTE9OICYmXG4gICAgICAgICAgICAgICAgTWF0aC5hYnMoYVtJbmRleGVzLk0yMl0gLSBiW0luZGV4ZXMuTTIyXSkgPCBGTE9BVF9FUFNJTE9OICYmXG4gICAgICAgICAgICAgICAgTWF0aC5hYnMoYVtJbmRleGVzLk0yM10gLSBiW0luZGV4ZXMuTTIzXSkgPCBGTE9BVF9FUFNJTE9OICYmXG4gICAgICAgICAgICAgICAgTWF0aC5hYnMoYVtJbmRleGVzLk0yNF0gLSBiW0luZGV4ZXMuTTI0XSkgPCBGTE9BVF9FUFNJTE9OICYmXG4gICAgICAgICAgICAgICAgTWF0aC5hYnMoYVtJbmRleGVzLk0zMV0gLSBiW0luZGV4ZXMuTTMxXSkgPCBGTE9BVF9FUFNJTE9OICYmXG4gICAgICAgICAgICAgICAgTWF0aC5hYnMoYVtJbmRleGVzLk0zMl0gLSBiW0luZGV4ZXMuTTMyXSkgPCBGTE9BVF9FUFNJTE9OICYmXG4gICAgICAgICAgICAgICAgTWF0aC5hYnMoYVtJbmRleGVzLk0zM10gLSBiW0luZGV4ZXMuTTMzXSkgPCBGTE9BVF9FUFNJTE9OICYmXG4gICAgICAgICAgICAgICAgTWF0aC5hYnMoYVtJbmRleGVzLk0zNF0gLSBiW0luZGV4ZXMuTTM0XSkgPCBGTE9BVF9FUFNJTE9OICYmXG4gICAgICAgICAgICAgICAgTWF0aC5hYnMoYVtJbmRleGVzLk9mZnNldFhdIC0gYltJbmRleGVzLk9mZnNldFhdKSA8IEZMT0FUX0VQU0lMT04gJiZcbiAgICAgICAgICAgICAgICBNYXRoLmFicyhhW0luZGV4ZXMuT2Zmc2V0WV0gLSBiW0luZGV4ZXMuT2Zmc2V0WV0pIDwgRkxPQVRfRVBTSUxPTiAmJlxuICAgICAgICAgICAgICAgIE1hdGguYWJzKGFbSW5kZXhlcy5PZmZzZXRaXSAtIGJbSW5kZXhlcy5PZmZzZXRaXSkgPCBGTE9BVF9FUFNJTE9OICYmXG4gICAgICAgICAgICAgICAgTWF0aC5hYnMoYVtJbmRleGVzLk00NF0gLSBiW0luZGV4ZXMuTTQ0XSkgPCBGTE9BVF9FUFNJTE9OKTtcbiAgICAgICAgfSxcbiAgICAgICAgbXVsdGlwbHk6IGZ1bmN0aW9uIChhLCBiLCBkZXN0KSB7XG4gICAgICAgICAgICBpZiAoIWRlc3QpXG4gICAgICAgICAgICAgICAgZGVzdCA9IGE7XG4gICAgICAgICAgICB2YXIgbTExID0gYVtJbmRleGVzLk0xMV0sIG0xMiA9IGFbSW5kZXhlcy5NMTJdLCBtMTMgPSBhW0luZGV4ZXMuTTEzXSwgbTE0ID0gYVtJbmRleGVzLk0xNF0sIG0yMSA9IGFbSW5kZXhlcy5NMjFdLCBtMjIgPSBhW0luZGV4ZXMuTTIyXSwgbTIzID0gYVtJbmRleGVzLk0yM10sIG0yNCA9IGFbSW5kZXhlcy5NMjRdLCBtMzEgPSBhW0luZGV4ZXMuTTMxXSwgbTMyID0gYVtJbmRleGVzLk0zMl0sIG0zMyA9IGFbSW5kZXhlcy5NMzNdLCBtMzQgPSBhW0luZGV4ZXMuTTM0XSwgbXgwID0gYVtJbmRleGVzLk9mZnNldFhdLCBteTAgPSBhW0luZGV4ZXMuT2Zmc2V0WV0sIG16MCA9IGFbSW5kZXhlcy5PZmZzZXRaXSwgbTQ0ID0gYVtJbmRleGVzLk00NF07XG4gICAgICAgICAgICB2YXIgbjExID0gYltJbmRleGVzLk0xMV0sIG4xMiA9IGJbSW5kZXhlcy5NMTJdLCBuMTMgPSBiW0luZGV4ZXMuTTEzXSwgbjE0ID0gYltJbmRleGVzLk0xNF0sIG4yMSA9IGJbSW5kZXhlcy5NMjFdLCBuMjIgPSBiW0luZGV4ZXMuTTIyXSwgbjIzID0gYltJbmRleGVzLk0yM10sIG4yNCA9IGJbSW5kZXhlcy5NMjRdLCBuMzEgPSBiW0luZGV4ZXMuTTMxXSwgbjMyID0gYltJbmRleGVzLk0zMl0sIG4zMyA9IGJbSW5kZXhlcy5NMzNdLCBuMzQgPSBiW0luZGV4ZXMuTTM0XSwgbngwID0gYltJbmRleGVzLk9mZnNldFhdLCBueTAgPSBiW0luZGV4ZXMuT2Zmc2V0WV0sIG56MCA9IGJbSW5kZXhlcy5PZmZzZXRaXSwgbjQ0ID0gYltJbmRleGVzLk00NF07XG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTExXSA9IG0xMSAqIG4xMSArIG0xMiAqIG4yMSArIG0xMyAqIG4zMSArIG0xNCAqIG54MDtcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMTJdID0gbTExICogbjEyICsgbTEyICogbjIyICsgbTEzICogbjMyICsgbTE0ICogbnkwO1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0xM10gPSBtMTEgKiBuMTMgKyBtMTIgKiBuMjMgKyBtMTMgKiBuMzMgKyBtMTQgKiBuejA7XG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTE0XSA9IG0xMSAqIG4xNCArIG0xMiAqIG4yNCArIG0xMyAqIG4zNCArIG0xNCAqIG40NDtcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMjFdID0gbTIxICogbjExICsgbTIyICogbjIxICsgbTIzICogbjMxICsgbTI0ICogbngwO1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0yMl0gPSBtMjEgKiBuMTIgKyBtMjIgKiBuMjIgKyBtMjMgKiBuMzIgKyBtMjQgKiBueTA7XG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTIzXSA9IG0yMSAqIG4xMyArIG0yMiAqIG4yMyArIG0yMyAqIG4zMyArIG0yNCAqIG56MDtcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMjRdID0gbTIxICogbjE0ICsgbTIyICogbjI0ICsgbTIzICogbjM0ICsgbTI0ICogbjQ0O1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0zMV0gPSBtMzEgKiBuMTEgKyBtMzIgKiBuMjEgKyBtMzMgKiBuMzEgKyBtMzQgKiBueDA7XG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTMyXSA9IG0zMSAqIG4xMiArIG0zMiAqIG4yMiArIG0zMyAqIG4zMiArIG0zNCAqIG55MDtcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMzNdID0gbTMxICogbjEzICsgbTMyICogbjIzICsgbTMzICogbjMzICsgbTM0ICogbnowO1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0zNF0gPSBtMzEgKiBuMTQgKyBtMzIgKiBuMjQgKyBtMzMgKiBuMzQgKyBtMzQgKiBuNDQ7XG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuT2Zmc2V0WF0gPSBteDAgKiBuMTEgKyBteTAgKiBuMjEgKyBtejAgKiBuMzEgKyBtNDQgKiBueDA7XG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuT2Zmc2V0WV0gPSBteDAgKiBuMTIgKyBteTAgKiBuMjIgKyBtejAgKiBuMzIgKyBtNDQgKiBueTA7XG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuT2Zmc2V0Wl0gPSBteDAgKiBuMTMgKyBteTAgKiBuMjMgKyBtejAgKiBuMzMgKyBtNDQgKiBuejA7XG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTQ0XSA9IG14MCAqIG4xNCArIG15MCAqIG4yNCArIG16MCAqIG4zNCArIG00NCAqIG40NDtcbiAgICAgICAgICAgIHJldHVybiBkZXN0O1xuICAgICAgICB9LFxuICAgICAgICBpbnZlcnNlOiBmdW5jdGlvbiAobWF0LCBkZXN0KSB7XG4gICAgICAgICAgICBpZiAoIWRlc3QpXG4gICAgICAgICAgICAgICAgZGVzdCA9IG1hdDtcbiAgICAgICAgICAgIHZhciBhMDAgPSBtYXRbSW5kZXhlcy5NMTFdLCBhMDEgPSBtYXRbSW5kZXhlcy5NMTJdLCBhMDIgPSBtYXRbSW5kZXhlcy5NMTNdLCBhMDMgPSBtYXRbSW5kZXhlcy5NMTRdLCBhMTAgPSBtYXRbSW5kZXhlcy5NMjFdLCBhMTEgPSBtYXRbSW5kZXhlcy5NMjJdLCBhMTIgPSBtYXRbSW5kZXhlcy5NMjNdLCBhMTMgPSBtYXRbSW5kZXhlcy5NMjRdLCBhMjAgPSBtYXRbSW5kZXhlcy5NMzFdLCBhMjEgPSBtYXRbSW5kZXhlcy5NMzJdLCBhMjIgPSBtYXRbSW5kZXhlcy5NMzNdLCBhMjMgPSBtYXRbSW5kZXhlcy5NMzRdLCBhMzAgPSBtYXRbSW5kZXhlcy5PZmZzZXRYXSwgYTMxID0gbWF0W0luZGV4ZXMuT2Zmc2V0WV0sIGEzMiA9IG1hdFtJbmRleGVzLk9mZnNldFpdLCBhMzMgPSBtYXRbSW5kZXhlcy5NNDRdLCBiMDAgPSBhMDAgKiBhMTEgLSBhMDEgKiBhMTAsIGIwMSA9IGEwMCAqIGExMiAtIGEwMiAqIGExMCwgYjAyID0gYTAwICogYTEzIC0gYTAzICogYTEwLCBiMDMgPSBhMDEgKiBhMTIgLSBhMDIgKiBhMTEsIGIwNCA9IGEwMSAqIGExMyAtIGEwMyAqIGExMSwgYjA1ID0gYTAyICogYTEzIC0gYTAzICogYTEyLCBiMDYgPSBhMjAgKiBhMzEgLSBhMjEgKiBhMzAsIGIwNyA9IGEyMCAqIGEzMiAtIGEyMiAqIGEzMCwgYjA4ID0gYTIwICogYTMzIC0gYTIzICogYTMwLCBiMDkgPSBhMjEgKiBhMzIgLSBhMjIgKiBhMzEsIGIxMCA9IGEyMSAqIGEzMyAtIGEyMyAqIGEzMSwgYjExID0gYTIyICogYTMzIC0gYTIzICogYTMyO1xuICAgICAgICAgICAgdmFyIGQgPSAoYjAwICogYjExIC0gYjAxICogYjEwICsgYjAyICogYjA5ICsgYjAzICogYjA4IC0gYjA0ICogYjA3ICsgYjA1ICogYjA2KTtcbiAgICAgICAgICAgIGlmICghaXNGaW5pdGUoZCkgfHwgIWQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB2YXIgaWQgPSAxIC8gZDtcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMTFdID0gKGExMSAqIGIxMSAtIGExMiAqIGIxMCArIGExMyAqIGIwOSkgKiBpZDtcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMTJdID0gKC1hMDEgKiBiMTEgKyBhMDIgKiBiMTAgLSBhMDMgKiBiMDkpICogaWQ7XG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTEzXSA9IChhMzEgKiBiMDUgLSBhMzIgKiBiMDQgKyBhMzMgKiBiMDMpICogaWQ7XG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTE0XSA9ICgtYTIxICogYjA1ICsgYTIyICogYjA0IC0gYTIzICogYjAzKSAqIGlkO1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0yMV0gPSAoLWExMCAqIGIxMSArIGExMiAqIGIwOCAtIGExMyAqIGIwNykgKiBpZDtcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMjJdID0gKGEwMCAqIGIxMSAtIGEwMiAqIGIwOCArIGEwMyAqIGIwNykgKiBpZDtcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMjNdID0gKC1hMzAgKiBiMDUgKyBhMzIgKiBiMDIgLSBhMzMgKiBiMDEpICogaWQ7XG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTI0XSA9IChhMjAgKiBiMDUgLSBhMjIgKiBiMDIgKyBhMjMgKiBiMDEpICogaWQ7XG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTMxXSA9IChhMTAgKiBiMTAgLSBhMTEgKiBiMDggKyBhMTMgKiBiMDYpICogaWQ7XG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTMyXSA9ICgtYTAwICogYjEwICsgYTAxICogYjA4IC0gYTAzICogYjA2KSAqIGlkO1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0zM10gPSAoYTMwICogYjA0IC0gYTMxICogYjAyICsgYTMzICogYjAwKSAqIGlkO1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0zNF0gPSAoLWEyMCAqIGIwNCArIGEyMSAqIGIwMiAtIGEyMyAqIGIwMCkgKiBpZDtcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5PZmZzZXRYXSA9ICgtYTEwICogYjA5ICsgYTExICogYjA3IC0gYTEyICogYjA2KSAqIGlkO1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk9mZnNldFldID0gKGEwMCAqIGIwOSAtIGEwMSAqIGIwNyArIGEwMiAqIGIwNikgKiBpZDtcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5PZmZzZXRaXSA9ICgtYTMwICogYjAzICsgYTMxICogYjAxIC0gYTMyICogYjAwKSAqIGlkO1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk00NF0gPSAoYTIwICogYjAzIC0gYTIxICogYjAxICsgYTIyICogYjAwKSAqIGlkO1xuICAgICAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgICAgIH0sXG4gICAgICAgIHRyYW5zcG9zZTogZnVuY3Rpb24gKG1hdCwgZGVzdCkge1xuICAgICAgICAgICAgaWYgKCFkZXN0KVxuICAgICAgICAgICAgICAgIGRlc3QgPSBtYXQ7XG4gICAgICAgICAgICB2YXIgYTAwID0gbWF0W0luZGV4ZXMuTTExXSwgYTAxID0gbWF0W0luZGV4ZXMuTTEyXSwgYTAyID0gbWF0W0luZGV4ZXMuTTEzXSwgYTAzID0gbWF0W0luZGV4ZXMuTTE0XSwgYTEwID0gbWF0W0luZGV4ZXMuTTIxXSwgYTExID0gbWF0W0luZGV4ZXMuTTIyXSwgYTEyID0gbWF0W0luZGV4ZXMuTTIzXSwgYTEzID0gbWF0W0luZGV4ZXMuTTI0XSwgYTIwID0gbWF0W0luZGV4ZXMuTTMxXSwgYTIxID0gbWF0W0luZGV4ZXMuTTMyXSwgYTIyID0gbWF0W0luZGV4ZXMuTTMzXSwgYTIzID0gbWF0W0luZGV4ZXMuTTM0XSwgYTMwID0gbWF0W0luZGV4ZXMuT2Zmc2V0WF0sIGEzMSA9IG1hdFtJbmRleGVzLk9mZnNldFldLCBhMzIgPSBtYXRbSW5kZXhlcy5PZmZzZXRaXSwgYTMzID0gbWF0W0luZGV4ZXMuTTQ0XTtcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMTFdID0gYTAwO1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0yMV0gPSBhMDE7XG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTMxXSA9IGEwMjtcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5PZmZzZXRYXSA9IGEwMztcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMTJdID0gYTEwO1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0yMl0gPSBhMTE7XG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTMyXSA9IGExMjtcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5PZmZzZXRZXSA9IGExMztcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMTNdID0gYTIwO1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0yM10gPSBhMjE7XG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTMzXSA9IGEyMjtcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5PZmZzZXRaXSA9IGEyMztcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMTRdID0gYTMwO1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0yNF0gPSBhMzE7XG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTM0XSA9IGEzMjtcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NNDRdID0gYTMzO1xuICAgICAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgICAgIH0sXG4gICAgICAgIHRyYW5zZm9ybVZlYzQ6IGZ1bmN0aW9uIChtYXQsIHZlYywgZGVzdCkge1xuICAgICAgICAgICAgaWYgKCFkZXN0KVxuICAgICAgICAgICAgICAgIGRlc3QgPSB2ZWM7XG4gICAgICAgICAgICB2YXIgeCA9IHZlY1swXSwgeSA9IHZlY1sxXSwgeiA9IHZlY1syXSwgdyA9IHZlY1szXTtcbiAgICAgICAgICAgIHZhciBtMTEgPSBtYXRbSW5kZXhlcy5NMTFdLCBtMTIgPSBtYXRbSW5kZXhlcy5NMTJdLCBtMTMgPSBtYXRbSW5kZXhlcy5NMTNdLCBtMTQgPSBtYXRbSW5kZXhlcy5NMTRdLCBtMjEgPSBtYXRbSW5kZXhlcy5NMjFdLCBtMjIgPSBtYXRbSW5kZXhlcy5NMjJdLCBtMjMgPSBtYXRbSW5kZXhlcy5NMjNdLCBtMjQgPSBtYXRbSW5kZXhlcy5NMjRdLCBtMzEgPSBtYXRbSW5kZXhlcy5NMzFdLCBtMzIgPSBtYXRbSW5kZXhlcy5NMzJdLCBtMzMgPSBtYXRbSW5kZXhlcy5NMzNdLCBtMzQgPSBtYXRbSW5kZXhlcy5NMzRdLCBteDAgPSBtYXRbSW5kZXhlcy5PZmZzZXRYXSwgbXkwID0gbWF0W0luZGV4ZXMuT2Zmc2V0WV0sIG16MCA9IG1hdFtJbmRleGVzLk9mZnNldFpdLCBtNDQgPSBtYXRbSW5kZXhlcy5NNDRdO1xuICAgICAgICAgICAgZGVzdFswXSA9IG0xMSAqIHggKyBtMTIgKiB5ICsgbTEzICogeiArIG0xNCAqIHc7XG4gICAgICAgICAgICBkZXN0WzFdID0gbTIxICogeCArIG0yMiAqIHkgKyBtMjMgKiB6ICsgbTI0ICogdztcbiAgICAgICAgICAgIGRlc3RbMl0gPSBtMzEgKiB4ICsgbTMyICogeSArIG0zMyAqIHogKyBtMzQgKiB3O1xuICAgICAgICAgICAgZGVzdFszXSA9IG14MCAqIHggKyBteTAgKiB5ICsgbXowICogeiArIG00NCAqIHc7XG4gICAgICAgICAgICByZXR1cm4gZGVzdDtcbiAgICAgICAgfSxcbiAgICAgICAgY3JlYXRlVHJhbnNsYXRlOiBmdW5jdGlvbiAoeCwgeSwgeiwgZGVzdCkge1xuICAgICAgICAgICAgaWYgKCFkZXN0KVxuICAgICAgICAgICAgICAgIGRlc3QgPSBtaW5lcnZhLm1hdDQuY3JlYXRlKCk7XG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTExXSA9IDE7XG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTEyXSA9IDA7XG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTEzXSA9IDA7XG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTE0XSA9IDA7XG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTIxXSA9IDA7XG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTIyXSA9IDE7XG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTIzXSA9IDA7XG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTI0XSA9IDA7XG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTMxXSA9IDA7XG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTMyXSA9IDA7XG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTMzXSA9IDE7XG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTM0XSA9IDA7XG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuT2Zmc2V0WF0gPSB4O1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk9mZnNldFldID0geTtcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5PZmZzZXRaXSA9IHo7XG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTQ0XSA9IDE7XG4gICAgICAgICAgICByZXR1cm4gZGVzdDtcbiAgICAgICAgfSxcbiAgICAgICAgY3JlYXRlU2NhbGU6IGZ1bmN0aW9uICh4LCB5LCB6LCBkZXN0KSB7XG4gICAgICAgICAgICBpZiAoIWRlc3QpXG4gICAgICAgICAgICAgICAgZGVzdCA9IG1pbmVydmEubWF0NC5jcmVhdGUoKTtcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMTFdID0geDtcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMTJdID0gMDtcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMTNdID0gMDtcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMTRdID0gMDtcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMTFdID0gMDtcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMTJdID0geTtcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMTNdID0gMDtcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMTRdID0gMDtcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMzFdID0gMDtcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMzJdID0gMDtcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMzNdID0gejtcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMzRdID0gMDtcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5PZmZzZXRYXSA9IDA7XG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuT2Zmc2V0WV0gPSAwO1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk9mZnNldFpdID0gMDtcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NNDRdID0gMTtcbiAgICAgICAgICAgIHJldHVybiBkZXN0O1xuICAgICAgICB9LFxuICAgICAgICBjcmVhdGVSb3RhdGVYOiBmdW5jdGlvbiAodGhldGEsIGRlc3QpIHtcbiAgICAgICAgICAgIGlmICghZGVzdClcbiAgICAgICAgICAgICAgICBkZXN0ID0gbWluZXJ2YS5tYXQ0LmNyZWF0ZSgpO1xuICAgICAgICAgICAgdmFyIHMgPSBNYXRoLnNpbih0aGV0YSk7XG4gICAgICAgICAgICB2YXIgYyA9IE1hdGguY29zKHRoZXRhKTtcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMTFdID0gMTtcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMTJdID0gMDtcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMTNdID0gMDtcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMTRdID0gMDtcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMjFdID0gMDtcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMjJdID0gYztcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMjNdID0gcztcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMjRdID0gMDtcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMzFdID0gMDtcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMzJdID0gLXM7XG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTMzXSA9IGM7XG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTM0XSA9IDA7XG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuT2Zmc2V0WF0gPSAwO1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk9mZnNldFldID0gMDtcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5PZmZzZXRaXSA9IDA7XG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTQ0XSA9IDE7XG4gICAgICAgICAgICByZXR1cm4gZGVzdDtcbiAgICAgICAgfSxcbiAgICAgICAgY3JlYXRlUm90YXRlWTogZnVuY3Rpb24gKHRoZXRhLCBkZXN0KSB7XG4gICAgICAgICAgICBpZiAoIWRlc3QpXG4gICAgICAgICAgICAgICAgZGVzdCA9IG1pbmVydmEubWF0NC5jcmVhdGUoKTtcbiAgICAgICAgICAgIHZhciBzID0gTWF0aC5zaW4odGhldGEpO1xuICAgICAgICAgICAgdmFyIGMgPSBNYXRoLmNvcyh0aGV0YSk7XG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTExXSA9IGM7XG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTEyXSA9IDA7XG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTEzXSA9IC1zO1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0xNF0gPSAwO1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0yMV0gPSAwO1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0yMl0gPSAxO1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0yM10gPSAwO1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0yNF0gPSAwO1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0zMV0gPSBzO1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0zMl0gPSAwO1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0zM10gPSBjO1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0zNF0gPSAwO1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk9mZnNldFhdID0gMDtcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5PZmZzZXRZXSA9IDA7XG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuT2Zmc2V0Wl0gPSAwO1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk00NF0gPSAxO1xuICAgICAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgICAgIH0sXG4gICAgICAgIGNyZWF0ZVJvdGF0ZVo6IGZ1bmN0aW9uICh0aGV0YSwgZGVzdCkge1xuICAgICAgICAgICAgaWYgKCFkZXN0KVxuICAgICAgICAgICAgICAgIGRlc3QgPSBtaW5lcnZhLm1hdDQuY3JlYXRlKCk7XG4gICAgICAgICAgICB2YXIgcyA9IE1hdGguc2luKHRoZXRhKTtcbiAgICAgICAgICAgIHZhciBjID0gTWF0aC5jb3ModGhldGEpO1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0xMV0gPSBjO1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0xMl0gPSBzO1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0xM10gPSAwO1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0xNF0gPSAwO1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0yMV0gPSAtcztcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMjJdID0gYztcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMjNdID0gMDtcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMjRdID0gMDtcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMzFdID0gMDtcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMzJdID0gMDtcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMzNdID0gMTtcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMzRdID0gMDtcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5PZmZzZXRYXSA9IDA7XG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuT2Zmc2V0WV0gPSAwO1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk9mZnNldFpdID0gMDtcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NNDRdID0gMTtcbiAgICAgICAgICAgIHJldHVybiBkZXN0O1xuICAgICAgICB9LFxuICAgICAgICBjcmVhdGVQZXJzcGVjdGl2ZTogZnVuY3Rpb24gKGZpZWxkT2ZWaWV3WSwgYXNwZWN0UmF0aW8sIHpOZWFyUGxhbmUsIHpGYXJQbGFuZSwgZGVzdCkge1xuICAgICAgICAgICAgaWYgKCFkZXN0KVxuICAgICAgICAgICAgICAgIGRlc3QgPSBtaW5lcnZhLm1hdDQuY3JlYXRlKCk7XG4gICAgICAgICAgICB2YXIgaGVpZ2h0ID0gMS4wIC8gTWF0aC50YW4oZmllbGRPZlZpZXdZIC8gMi4wKTtcbiAgICAgICAgICAgIHZhciB3aWR0aCA9IGhlaWdodCAvIGFzcGVjdFJhdGlvO1xuICAgICAgICAgICAgdmFyIGQgPSB6TmVhclBsYW5lIC0gekZhclBsYW5lO1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0xMV0gPSB3aWR0aDtcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMTJdID0gMDtcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMTNdID0gMDtcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMTRdID0gMDtcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMjFdID0gMDtcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMjJdID0gaGVpZ2h0O1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0yM10gPSAwO1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0yNF0gPSAwO1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0zMV0gPSAwO1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0zMl0gPSAwO1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0zM10gPSB6RmFyUGxhbmUgLyBkO1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0zNF0gPSAtMS4wO1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk9mZnNldFhdID0gMDtcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5PZmZzZXRZXSA9IDA7XG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuT2Zmc2V0Wl0gPSB6TmVhclBsYW5lICogekZhclBsYW5lIC8gZDtcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NNDRdID0gMC4wO1xuICAgICAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgICAgIH0sXG4gICAgICAgIGNyZWF0ZVZpZXdwb3J0OiBmdW5jdGlvbiAod2lkdGgsIGhlaWdodCwgZGVzdCkge1xuICAgICAgICAgICAgaWYgKCFkZXN0KVxuICAgICAgICAgICAgICAgIGRlc3QgPSBtaW5lcnZhLm1hdDQuY3JlYXRlKCk7XG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTExXSA9IHdpZHRoIC8gMi4wO1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0xMl0gPSAwO1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0xM10gPSAwO1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0xNF0gPSAwO1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0yMV0gPSAwO1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0yMl0gPSAtaGVpZ2h0IC8gMi4wO1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0yM10gPSAwO1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0yNF0gPSAwO1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0zMV0gPSAwO1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0zMl0gPSAwO1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0zM10gPSAxO1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0zNF0gPSAwO1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk9mZnNldFhdID0gd2lkdGggLyAyLjA7XG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuT2Zmc2V0WV0gPSBoZWlnaHQgLyAyLjA7XG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuT2Zmc2V0Wl0gPSAwO1xuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk00NF0gPSAxO1xuICAgICAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgICAgIH1cbiAgICB9O1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWF0NCA9IG1pbmVydmEubWF0NDtcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9SZWN0XCIgLz5cbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgbWluZXJ2YS5SZWN0LnRyYW5zZm9ybTQgPSBmdW5jdGlvbiAoZGVzdCwgcHJvamVjdGlvbikge1xuICAgICAgICBjb25zb2xlLndhcm4oXCJbUmVjdC50cmFuc2Zvcm00XSBOb3QgaW1wbGVtZW50ZWRcIik7XG4gICAgfTtcbiAgICBmdW5jdGlvbiBjbGlwbWFzayhjbGlwKSB7XG4gICAgICAgIHZhciBtYXNrID0gMDtcbiAgICAgICAgaWYgKC1jbGlwWzBdICsgY2xpcFszXSA8IDApXG4gICAgICAgICAgICBtYXNrIHw9ICgxIDw8IDApO1xuICAgICAgICBpZiAoY2xpcFswXSArIGNsaXBbM10gPCAwKVxuICAgICAgICAgICAgbWFzayB8PSAoMSA8PCAxKTtcbiAgICAgICAgaWYgKC1jbGlwWzFdICsgY2xpcFszXSA8IDApXG4gICAgICAgICAgICBtYXNrIHw9ICgxIDw8IDIpO1xuICAgICAgICBpZiAoY2xpcFsxXSArIGNsaXBbM10gPCAwKVxuICAgICAgICAgICAgbWFzayB8PSAoMSA8PCAzKTtcbiAgICAgICAgaWYgKGNsaXBbMl0gKyBjbGlwWzNdIDwgMClcbiAgICAgICAgICAgIG1hc2sgfD0gKDEgPDwgNCk7XG4gICAgICAgIGlmICgtY2xpcFsyXSArIGNsaXBbM10gPCAwKVxuICAgICAgICAgICAgbWFzayB8PSAoMSA8PCA1KTtcbiAgICAgICAgcmV0dXJuIG1hc2s7XG4gICAgfVxufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjcmVhdGVUeXBlZEFycmF5O1xuICAgIGlmICh0eXBlb2YgRmxvYXQzMkFycmF5ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGNyZWF0ZVR5cGVkQXJyYXkgPSBmdW5jdGlvbiAobGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEZsb2F0MzJBcnJheShsZW5ndGgpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY3JlYXRlVHlwZWRBcnJheSA9IGZ1bmN0aW9uIChsZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQXJyYXkobGVuZ3RoKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgbWluZXJ2YS52ZWM0ID0ge1xuICAgICAgICBjcmVhdGU6IGZ1bmN0aW9uICh4LCB5LCB6LCB3KSB7XG4gICAgICAgICAgICB2YXIgZGVzdCA9IGNyZWF0ZVR5cGVkQXJyYXkoNCk7XG4gICAgICAgICAgICBkZXN0WzBdID0geDtcbiAgICAgICAgICAgIGRlc3RbMV0gPSB5O1xuICAgICAgICAgICAgZGVzdFsyXSA9IHo7XG4gICAgICAgICAgICBkZXN0WzNdID0gdztcbiAgICAgICAgICAgIHJldHVybiBkZXN0O1xuICAgICAgICB9LFxuICAgICAgICBpbml0OiBmdW5jdGlvbiAoeCwgeSwgeiwgdywgZGVzdCkge1xuICAgICAgICAgICAgaWYgKCFkZXN0KVxuICAgICAgICAgICAgICAgIGRlc3QgPSBjcmVhdGVUeXBlZEFycmF5KDQpO1xuICAgICAgICAgICAgZGVzdFswXSA9IHg7XG4gICAgICAgICAgICBkZXN0WzFdID0geTtcbiAgICAgICAgICAgIGRlc3RbMl0gPSB6O1xuICAgICAgICAgICAgZGVzdFszXSA9IHc7XG4gICAgICAgICAgICByZXR1cm4gZGVzdDtcbiAgICAgICAgfVxuICAgIH07XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciB2ZWM0ID0gbWluZXJ2YS52ZWM0O1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgcGF0aDtcbiAgICAoZnVuY3Rpb24gKHBhdGhfMSkge1xuICAgICAgICB2YXIgUGF0aCA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBQYXRoKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuJCRlbnRyaWVzID0gW107XG4gICAgICAgICAgICAgICAgdGhpcy4kJGVuZFggPSAwLjA7XG4gICAgICAgICAgICAgICAgdGhpcy4kJGVuZFkgPSAwLjA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUGF0aC5wcm90b3R5cGUsIFwiZW5kWFwiLCB7XG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLiQkZW5kWDtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShQYXRoLnByb3RvdHlwZSwgXCJlbmRZXCIsIHtcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuJCRlbmRZO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgUGF0aC5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kJGVudHJpZXMubGVuZ3RoID0gMDtcbiAgICAgICAgICAgICAgICB0aGlzLiQkZW5kWCA9IDA7XG4gICAgICAgICAgICAgICAgdGhpcy4kJGVuZFkgPSAwO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFBhdGgucHJvdG90eXBlLm1vdmUgPSBmdW5jdGlvbiAoeCwgeSkge1xuICAgICAgICAgICAgICAgIHRoaXMuJCRlbnRyaWVzLnB1c2gocGF0aF8xLnNlZ21lbnRzLm1vdmUoeCwgeSkpO1xuICAgICAgICAgICAgICAgIHRoaXMuJCRlbmRYID0geDtcbiAgICAgICAgICAgICAgICB0aGlzLiQkZW5kWSA9IHk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgUGF0aC5wcm90b3R5cGUubGluZSA9IGZ1bmN0aW9uICh4LCB5KSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kJGVudHJpZXMucHVzaChwYXRoXzEuc2VnbWVudHMubGluZSh4LCB5KSk7XG4gICAgICAgICAgICAgICAgdGhpcy4kJGVuZFggPSB4O1xuICAgICAgICAgICAgICAgIHRoaXMuJCRlbmRZID0geTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBQYXRoLnByb3RvdHlwZS5xdWFkcmF0aWNCZXppZXIgPSBmdW5jdGlvbiAoY3B4LCBjcHksIHgsIHkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiQkZW50cmllcy5wdXNoKHBhdGhfMS5zZWdtZW50cy5xdWFkcmF0aWNCZXppZXIoY3B4LCBjcHksIHgsIHkpKTtcbiAgICAgICAgICAgICAgICB0aGlzLiQkZW5kWCA9IHg7XG4gICAgICAgICAgICAgICAgdGhpcy4kJGVuZFkgPSB5O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFBhdGgucHJvdG90eXBlLmN1YmljQmV6aWVyID0gZnVuY3Rpb24gKGNwMXgsIGNwMXksIGNwMngsIGNwMnksIHgsIHkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiQkZW50cmllcy5wdXNoKHBhdGhfMS5zZWdtZW50cy5jdWJpY0JlemllcihjcDF4LCBjcDF5LCBjcDJ4LCBjcDJ5LCB4LCB5KSk7XG4gICAgICAgICAgICAgICAgdGhpcy4kJGVuZFggPSB4O1xuICAgICAgICAgICAgICAgIHRoaXMuJCRlbmRZID0geTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBQYXRoLnByb3RvdHlwZS5lbGxpcHNlID0gZnVuY3Rpb24gKHgsIHksIHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiQkZW50cmllcy5wdXNoKHBhdGhfMS5zZWdtZW50cy5lbGxpcHNlKHgsIHksIHdpZHRoLCBoZWlnaHQpKTtcbiAgICAgICAgICAgICAgICB0aGlzLiQkZW5kWCA9IHg7XG4gICAgICAgICAgICAgICAgdGhpcy4kJGVuZFkgPSB5O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFBhdGgucHJvdG90eXBlLmVsbGlwdGljYWxBcmMgPSBmdW5jdGlvbiAocngsIHJ5LCByb3RhdGlvbkFuZ2xlLCBpc0xhcmdlQXJjRmxhZywgc3dlZXBEaXJlY3Rpb25GbGFnLCBleCwgZXkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiQkZW50cmllcy5wdXNoKHBhdGhfMS5zZWdtZW50cy5lbGxpcHRpY2FsQXJjKHJ4LCByeSwgcm90YXRpb25BbmdsZSwgaXNMYXJnZUFyY0ZsYWcsIHN3ZWVwRGlyZWN0aW9uRmxhZywgZXgsIGV5KSk7XG4gICAgICAgICAgICAgICAgdGhpcy4kJGVuZFggPSBleDtcbiAgICAgICAgICAgICAgICB0aGlzLiQkZW5kWSA9IGV5O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFBhdGgucHJvdG90eXBlLmFyYyA9IGZ1bmN0aW9uICh4LCB5LCByLCBzQW5nbGUsIGVBbmdsZSwgYUNsb2Nrd2lzZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuJCRlbnRyaWVzLnB1c2gocGF0aF8xLnNlZ21lbnRzLmFyYyh4LCB5LCByLCBzQW5nbGUsIGVBbmdsZSwgYUNsb2Nrd2lzZSkpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFBhdGgucHJvdG90eXBlLmFyY1RvID0gZnVuY3Rpb24gKGNweCwgY3B5LCB4LCB5LCByYWRpdXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgYXJjdG8gPSBwYXRoXzEuc2VnbWVudHMuYXJjVG8oY3B4LCBjcHksIHgsIHksIHJhZGl1cyk7XG4gICAgICAgICAgICAgICAgdGhpcy4kJGVudHJpZXMucHVzaChhcmN0byk7XG4gICAgICAgICAgICAgICAgdGhpcy4kJGVuZFggPSBhcmN0by5leDtcbiAgICAgICAgICAgICAgICB0aGlzLiQkZW5kWSA9IGFyY3RvLmV5O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFBhdGgucHJvdG90eXBlLnJlY3QgPSBmdW5jdGlvbiAoeCwgeSwgd2lkdGgsIGhlaWdodCkge1xuICAgICAgICAgICAgICAgIHRoaXMuJCRlbnRyaWVzLnB1c2gocGF0aF8xLnNlZ21lbnRzLnJlY3QoeCwgeSwgd2lkdGgsIGhlaWdodCkpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFBhdGgucHJvdG90eXBlLnJvdW5kZWRSZWN0ID0gZnVuY3Rpb24gKHgsIHksIHdpZHRoLCBoZWlnaHQsIHJhZGl1c1gsIHJhZGl1c1kpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiQkZW50cmllcy5wdXNoKHBhdGhfMS5zZWdtZW50cy5yb3VuZGVkUmVjdCh4LCB5LCB3aWR0aCwgaGVpZ2h0LCByYWRpdXNYLCByYWRpdXNZKSk7XG4gICAgICAgICAgICAgICAgdGhpcy4kJGVuZFggPSB4O1xuICAgICAgICAgICAgICAgIHRoaXMuJCRlbmRZID0geTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBQYXRoLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiQkZW50cmllcy5wdXNoKHBhdGhfMS5zZWdtZW50cy5jbG9zZSgpKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBQYXRoLnByb3RvdHlwZS5kcmF3ID0gZnVuY3Rpb24gKGN0eCkge1xuICAgICAgICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgICAgICB2YXIgcGF0aCA9IHRoaXMuJCRlbnRyaWVzO1xuICAgICAgICAgICAgICAgIHZhciBsZW4gPSBwYXRoLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhdGhbaV0uZHJhdyhjdHgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBQYXRoLnByb3RvdHlwZS5jYWxjQm91bmRzID0gZnVuY3Rpb24gKHBhcnMpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy4kJGVudHJpZXMubGVuZ3RoIDw9IDApXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgbWluZXJ2YS5SZWN0KCk7XG4gICAgICAgICAgICAgICAgdmFyIGJveCA9IHBhcnMgJiYgcGFycy5zdHJva2VUaGlja25lc3MgPiAxID8gdGhpcy4kJGNhbGNTdHJva2VCb3gocGFycykgOiB0aGlzLiQkY2FsY0ZpbGxCb3goKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IG1pbmVydmEuUmVjdChib3gubCwgYm94LnQsIE1hdGgubWF4KDAsIGJveC5yIC0gYm94LmwpLCBNYXRoLm1heCgwLCBib3guYiAtIGJveC50KSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgUGF0aC5wcm90b3R5cGUuJCRjYWxjRmlsbEJveCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgcGF0aCA9IHRoaXMuJCRlbnRyaWVzO1xuICAgICAgICAgICAgICAgIHZhciBsZW4gPSBwYXRoLmxlbmd0aDtcbiAgICAgICAgICAgICAgICB2YXIgYm94ID0ge1xuICAgICAgICAgICAgICAgICAgICBsOiBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFksXG4gICAgICAgICAgICAgICAgICAgIHI6IE51bWJlci5ORUdBVElWRV9JTkZJTklUWSxcbiAgICAgICAgICAgICAgICAgICAgdDogTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLFxuICAgICAgICAgICAgICAgICAgICBiOiBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFlcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHZhciBjdXJ4ID0gbnVsbDtcbiAgICAgICAgICAgICAgICB2YXIgY3VyeSA9IG51bGw7XG4gICAgICAgICAgICAgICAgdmFyIGVudHJ5O1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgZW50cnkgPSBwYXRoW2ldO1xuICAgICAgICAgICAgICAgICAgICBlbnRyeS5zeCA9IGN1cng7XG4gICAgICAgICAgICAgICAgICAgIGVudHJ5LnN5ID0gY3VyeTtcbiAgICAgICAgICAgICAgICAgICAgZW50cnkuZXh0ZW5kRmlsbEJveChib3gpO1xuICAgICAgICAgICAgICAgICAgICBjdXJ4ID0gZW50cnkuZXggfHwgMDtcbiAgICAgICAgICAgICAgICAgICAgY3VyeSA9IGVudHJ5LmV5IHx8IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBib3g7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgUGF0aC5wcm90b3R5cGUuJCRjYWxjU3Ryb2tlQm94ID0gZnVuY3Rpb24gKHBhcnMpIHtcbiAgICAgICAgICAgICAgICB2YXIgYm94ID0ge1xuICAgICAgICAgICAgICAgICAgICBsOiBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFksXG4gICAgICAgICAgICAgICAgICAgIHI6IE51bWJlci5ORUdBVElWRV9JTkZJTklUWSxcbiAgICAgICAgICAgICAgICAgICAgdDogTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLFxuICAgICAgICAgICAgICAgICAgICBiOiBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFlcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHByb2Nlc3NTdHJva2VkQm91bmRzKGJveCwgdGhpcy4kJGVudHJpZXMsIHBhcnMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBib3g7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgUGF0aC5NZXJnZSA9IGZ1bmN0aW9uIChwYXRoMSwgcGF0aDIpIHtcbiAgICAgICAgICAgICAgICBwYXRoMS4kJGVudHJpZXMucHVzaC5hcHBseShwYXRoMS4kJGVudHJpZXMsIHBhdGgyLiQkZW50cmllcyk7XG4gICAgICAgICAgICAgICAgcGF0aDEuJCRlbmRYICs9IHBhdGgyLiQkZW5kWDtcbiAgICAgICAgICAgICAgICBwYXRoMS4kJGVuZFkgKz0gcGF0aDIuJCRlbmRZO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFBhdGgucHJvdG90eXBlLlNlcmlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgcGF0aCA9IHRoaXMuJCRlbnRyaWVzO1xuICAgICAgICAgICAgICAgIHZhciBsZW4gPSBwYXRoLmxlbmd0aDtcbiAgICAgICAgICAgICAgICB2YXIgcyA9IFwiXCI7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaSA+IDApXG4gICAgICAgICAgICAgICAgICAgICAgICBzICs9IFwiIFwiO1xuICAgICAgICAgICAgICAgICAgICBzICs9IHBhdGhbaV0udG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHM7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIFBhdGg7XG4gICAgICAgIH0pKCk7XG4gICAgICAgIHBhdGhfMS5QYXRoID0gUGF0aDtcbiAgICAgICAgZnVuY3Rpb24gZXhwYW5kU3RhcnRDYXAoYm94LCBlbnRyeSwgcGFycykge1xuICAgICAgICAgICAgdmFyIHY7XG4gICAgICAgICAgICB2YXIgaHMgPSBwYXJzLnN0cm9rZVRoaWNrbmVzcyAvIDIuMDtcbiAgICAgICAgICAgIHZhciBjYXAgPSBwYXJzLnN0cm9rZVN0YXJ0TGluZUNhcCB8fCBwYXJzLnN0cm9rZUVuZExpbmVDYXAgfHwgMDtcbiAgICAgICAgICAgIHN3aXRjaCAoY2FwKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBtaW5lcnZhLlBlbkxpbmVDYXAuUm91bmQ6XG4gICAgICAgICAgICAgICAgICAgIGJveC5sID0gTWF0aC5taW4oYm94LmwsIGVudHJ5LnN4IC0gaHMpO1xuICAgICAgICAgICAgICAgICAgICBib3guciA9IE1hdGgubWF4KGJveC5yLCBlbnRyeS5zeCArIGhzKTtcbiAgICAgICAgICAgICAgICAgICAgYm94LnQgPSBNYXRoLm1pbihib3gudCwgZW50cnkuc3kgLSBocyk7XG4gICAgICAgICAgICAgICAgICAgIGJveC5iID0gTWF0aC5tYXgoYm94LmIsIGVudHJ5LnN5ICsgaHMpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIG1pbmVydmEuUGVuTGluZUNhcC5TcXVhcmU6XG4gICAgICAgICAgICAgICAgICAgIGlmICghKHYgPSBlbnRyeS5nZXRTdGFydFZlY3RvcigpKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF2WzBdIHx8ICF2WzFdKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2QgPSBtaW5lcnZhLlZlY3Rvci5yZXZlcnNlKG1pbmVydmEuVmVjdG9yLm5vcm1hbGl6ZSh2LnNsaWNlKDApKSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzZG8gPSBtaW5lcnZhLlZlY3Rvci5vcnRob2dvbmFsKHNkLnNsaWNlKDApKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHgxID0gZW50cnkuc3ggKyBocyAqIChzZFswXSArIHNkb1swXSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciB4MiA9IGVudHJ5LnN4ICsgaHMgKiAoc2RbMF0gLSBzZG9bMF0pO1xuICAgICAgICAgICAgICAgICAgICB2YXIgeTEgPSBlbnRyeS5zeSArIGhzICogKHNkWzFdICsgc2RvWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHkyID0gZW50cnkuc3kgKyBocyAqIChzZFsxXSAtIHNkb1sxXSk7XG4gICAgICAgICAgICAgICAgICAgIGJveC5sID0gTWF0aC5taW4oYm94LmwsIHgxLCB4Mik7XG4gICAgICAgICAgICAgICAgICAgIGJveC5yID0gTWF0aC5tYXgoYm94LnIsIHgxLCB4Mik7XG4gICAgICAgICAgICAgICAgICAgIGJveC50ID0gTWF0aC5taW4oYm94LnQsIHkxLCB5Mik7XG4gICAgICAgICAgICAgICAgICAgIGJveC5iID0gTWF0aC5tYXgoYm94LmIsIHkxLCB5Mik7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgbWluZXJ2YS5QZW5MaW5lQ2FwLkZsYXQ6XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodiA9IGVudHJ5LmdldFN0YXJ0VmVjdG9yKCkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXZbMF0gfHwgIXZbMV0pXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIHZhciBzZG8gPSBtaW5lcnZhLlZlY3Rvci5vcnRob2dvbmFsKG1pbmVydmEuVmVjdG9yLm5vcm1hbGl6ZSh2LnNsaWNlKDApKSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciB4MSA9IGVudHJ5LnN4ICsgaHMgKiBzZG9bMF07XG4gICAgICAgICAgICAgICAgICAgIHZhciB4MiA9IGVudHJ5LnN4ICsgaHMgKiAtc2RvWzBdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgeTEgPSBlbnRyeS5zeSArIGhzICogc2RvWzFdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgeTIgPSBlbnRyeS5zeSArIGhzICogLXNkb1sxXTtcbiAgICAgICAgICAgICAgICAgICAgYm94LmwgPSBNYXRoLm1pbihib3gubCwgeDEsIHgyKTtcbiAgICAgICAgICAgICAgICAgICAgYm94LnIgPSBNYXRoLm1heChib3guciwgeDEsIHgyKTtcbiAgICAgICAgICAgICAgICAgICAgYm94LnQgPSBNYXRoLm1pbihib3gudCwgeTEsIHkyKTtcbiAgICAgICAgICAgICAgICAgICAgYm94LmIgPSBNYXRoLm1heChib3guYiwgeTEsIHkyKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZXhwYW5kRW5kQ2FwKGJveCwgZW50cnksIHBhcnMpIHtcbiAgICAgICAgICAgIHZhciBleCA9IGVudHJ5LmV4O1xuICAgICAgICAgICAgdmFyIGV5ID0gZW50cnkuZXk7XG4gICAgICAgICAgICB2YXIgdjtcbiAgICAgICAgICAgIHZhciBocyA9IHBhcnMuc3Ryb2tlVGhpY2tuZXNzIC8gMi4wO1xuICAgICAgICAgICAgdmFyIGNhcCA9IHBhcnMuc3Ryb2tlU3RhcnRMaW5lQ2FwIHx8IHBhcnMuc3Ryb2tlRW5kTGluZUNhcCB8fCAwO1xuICAgICAgICAgICAgc3dpdGNoIChjYXApIHtcbiAgICAgICAgICAgICAgICBjYXNlIG1pbmVydmEuUGVuTGluZUNhcC5Sb3VuZDpcbiAgICAgICAgICAgICAgICAgICAgYm94LmwgPSBNYXRoLm1pbihib3gubCwgZXggLSBocyk7XG4gICAgICAgICAgICAgICAgICAgIGJveC5yID0gTWF0aC5tYXgoYm94LnIsIGV4ICsgaHMpO1xuICAgICAgICAgICAgICAgICAgICBib3gudCA9IE1hdGgubWluKGJveC50LCBleSAtIGhzKTtcbiAgICAgICAgICAgICAgICAgICAgYm94LmIgPSBNYXRoLm1heChib3guYiwgZXkgKyBocyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgbWluZXJ2YS5QZW5MaW5lQ2FwLlNxdWFyZTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodiA9IGVudHJ5LmdldEVuZFZlY3RvcigpKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF2WzBdIHx8ICF2WzFdKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZWQgPSBtaW5lcnZhLlZlY3Rvci5ub3JtYWxpemUodi5zbGljZSgwKSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlZG8gPSBtaW5lcnZhLlZlY3Rvci5vcnRob2dvbmFsKGVkLnNsaWNlKDApKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHgxID0gZXggKyBocyAqIChlZFswXSArIGVkb1swXSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciB4MiA9IGV4ICsgaHMgKiAoZWRbMF0gLSBlZG9bMF0pO1xuICAgICAgICAgICAgICAgICAgICB2YXIgeTEgPSBleSArIGhzICogKGVkWzFdICsgZWRvWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHkyID0gZXkgKyBocyAqIChlZFsxXSAtIGVkb1sxXSk7XG4gICAgICAgICAgICAgICAgICAgIGJveC5sID0gTWF0aC5taW4oYm94LmwsIHgxLCB4Mik7XG4gICAgICAgICAgICAgICAgICAgIGJveC5yID0gTWF0aC5tYXgoYm94LnIsIHgxLCB4Mik7XG4gICAgICAgICAgICAgICAgICAgIGJveC50ID0gTWF0aC5taW4oYm94LnQsIHkxLCB5Mik7XG4gICAgICAgICAgICAgICAgICAgIGJveC5iID0gTWF0aC5tYXgoYm94LmIsIHkxLCB5Mik7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgbWluZXJ2YS5QZW5MaW5lQ2FwLkZsYXQ6XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodiA9IGVudHJ5LmdldEVuZFZlY3RvcigpKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF2WzBdIHx8ICF2WzFdKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZWRvID0gbWluZXJ2YS5WZWN0b3Iub3J0aG9nb25hbChtaW5lcnZhLlZlY3Rvci5ub3JtYWxpemUodi5zbGljZSgwKSkpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgeDEgPSBleCArIGhzICogZWRvWzBdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgeDIgPSBleCArIGhzICogLWVkb1swXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHkxID0gZXkgKyBocyAqIGVkb1sxXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHkyID0gZXkgKyBocyAqIC1lZG9bMV07XG4gICAgICAgICAgICAgICAgICAgIGJveC5sID0gTWF0aC5taW4oYm94LmwsIHgxLCB4Mik7XG4gICAgICAgICAgICAgICAgICAgIGJveC5yID0gTWF0aC5tYXgoYm94LnIsIHgxLCB4Mik7XG4gICAgICAgICAgICAgICAgICAgIGJveC50ID0gTWF0aC5taW4oYm94LnQsIHkxLCB5Mik7XG4gICAgICAgICAgICAgICAgICAgIGJveC5iID0gTWF0aC5tYXgoYm94LmIsIHkxLCB5Mik7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGV4cGFuZExpbmVKb2luKGJveCwgcHJldmlvdXMsIGVudHJ5LCBwYXJzKSB7XG4gICAgICAgICAgICB2YXIgaHMgPSBwYXJzLnN0cm9rZVRoaWNrbmVzcyAvIDIuMDtcbiAgICAgICAgICAgIGlmIChwYXJzLnN0cm9rZUxpbmVKb2luID09PSBtaW5lcnZhLlBlbkxpbmVKb2luLlJvdW5kKSB7XG4gICAgICAgICAgICAgICAgYm94LmwgPSBNYXRoLm1pbihib3gubCwgZW50cnkuc3ggLSBocyk7XG4gICAgICAgICAgICAgICAgYm94LnIgPSBNYXRoLm1heChib3guciwgZW50cnkuc3ggKyBocyk7XG4gICAgICAgICAgICAgICAgYm94LnQgPSBNYXRoLm1pbihib3gudCwgZW50cnkuc3kgLSBocyk7XG4gICAgICAgICAgICAgICAgYm94LmIgPSBNYXRoLm1heChib3guYiwgZW50cnkuc3kgKyBocyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgdGlwcyA9IChwYXJzLnN0cm9rZUxpbmVKb2luID09PSBtaW5lcnZhLlBlbkxpbmVKb2luLk1pdGVyKSA/IGZpbmRNaXRlclRpcHMocHJldmlvdXMsIGVudHJ5LCBocywgcGFycy5zdHJva2VNaXRlckxpbWl0KSA6IGZpbmRCZXZlbFRpcHMocHJldmlvdXMsIGVudHJ5LCBocyk7XG4gICAgICAgICAgICBpZiAoIXRpcHMpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgdmFyIHgxID0gdGlwc1swXS54O1xuICAgICAgICAgICAgdmFyIHgyID0gdGlwc1sxXS54O1xuICAgICAgICAgICAgdmFyIHkxID0gdGlwc1swXS55O1xuICAgICAgICAgICAgdmFyIHkyID0gdGlwc1sxXS55O1xuICAgICAgICAgICAgYm94LmwgPSBNYXRoLm1pbihib3gubCwgeDEsIHgyKTtcbiAgICAgICAgICAgIGJveC5yID0gTWF0aC5tYXgoYm94LnIsIHgxLCB4Mik7XG4gICAgICAgICAgICBib3gudCA9IE1hdGgubWluKGJveC50LCB5MSwgeTIpO1xuICAgICAgICAgICAgYm94LmIgPSBNYXRoLm1heChib3guYiwgeTEsIHkyKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBwcm9jZXNzU3Ryb2tlZEJvdW5kcyhib3gsIHNlZ3MsIHBhcnMpIHtcbiAgICAgICAgICAgIHZhciBsZW4gPSBzZWdzLmxlbmd0aDtcbiAgICAgICAgICAgIHZhciBsYXN0ID0gbnVsbDtcbiAgICAgICAgICAgIHZhciBjdXJ4ID0gbnVsbDtcbiAgICAgICAgICAgIHZhciBjdXJ5ID0gbnVsbDtcbiAgICAgICAgICAgIHZhciBzeCA9IG51bGw7XG4gICAgICAgICAgICB2YXIgc3kgPSBudWxsO1xuICAgICAgICAgICAgdmFyIGlzTGFzdEVudHJ5TW92ZSA9IGZhbHNlO1xuICAgICAgICAgICAgZnVuY3Rpb24gcHJvY2Vzc0VudHJ5KGVudHJ5LCBpKSB7XG4gICAgICAgICAgICAgICAgZW50cnkuc3ggPSBjdXJ4O1xuICAgICAgICAgICAgICAgIGVudHJ5LnN5ID0gY3VyeTtcbiAgICAgICAgICAgICAgICBpZiAoIWVudHJ5LmlzU2luZ2xlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZW50cnkuaXNNb3ZlICYmIGlzTGFzdEVudHJ5TW92ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3ggPSBlbnRyeS5zeDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN5ID0gZW50cnkuc3k7XG4gICAgICAgICAgICAgICAgICAgICAgICBleHBhbmRTdGFydENhcChib3gsIGVudHJ5LCBwYXJzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzTGFzdEVudHJ5TW92ZSAmJiBpID4gMClcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cGFuZExpbmVKb2luKGJveCwgbGFzdCwgZW50cnksIHBhcnMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbnRyeS5leHRlbmRTdHJva2VCb3goYm94LCBwYXJzKTtcbiAgICAgICAgICAgICAgICBjdXJ4ID0gZW50cnkuZXggfHwgMDtcbiAgICAgICAgICAgICAgICBjdXJ5ID0gZW50cnkuZXkgfHwgMDtcbiAgICAgICAgICAgICAgICBpc0xhc3RFbnRyeU1vdmUgPSAhIWVudHJ5LmlzTW92ZTtcbiAgICAgICAgICAgICAgICBsYXN0ID0gZW50cnk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcHJvY2Vzc0VudHJ5KHNlZ3NbaV0sIGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGVuZCA9IHNlZ3NbbGVuIC0gMV07XG4gICAgICAgICAgICBpZiAoZW5kICYmICFlbmQuaXNTaW5nbGUpXG4gICAgICAgICAgICAgICAgZXhwYW5kRW5kQ2FwKGJveCwgZW5kLCBwYXJzKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBmaW5kTWl0ZXJUaXBzKHByZXZpb3VzLCBlbnRyeSwgaHMsIG1pdGVyTGltaXQpIHtcbiAgICAgICAgICAgIHZhciB4ID0gZW50cnkuc3g7XG4gICAgICAgICAgICB2YXIgeSA9IGVudHJ5LnN5O1xuICAgICAgICAgICAgdmFyIGF2ID0gcHJldmlvdXMuZ2V0RW5kVmVjdG9yKCk7XG4gICAgICAgICAgICB2YXIgYnYgPSBlbnRyeS5nZXRTdGFydFZlY3RvcigpO1xuICAgICAgICAgICAgaWYgKCFhdiB8fCAhYnYpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICBtaW5lcnZhLlZlY3Rvci5yZXZlcnNlKGF2KTtcbiAgICAgICAgICAgIHZhciB0YXUgPSBtaW5lcnZhLlZlY3Rvci5hbmdsZUJldHdlZW4oYXYsIGJ2KSAvIDI7XG4gICAgICAgICAgICBpZiAoaXNOYU4odGF1KSlcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIHZhciBtaXRlclJhdGlvID0gMSAvIE1hdGguc2luKHRhdSk7XG4gICAgICAgICAgICBpZiAobWl0ZXJSYXRpbyA+IG1pdGVyTGltaXQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZpbmRCZXZlbFRpcHMocHJldmlvdXMsIGVudHJ5LCBocyk7XG4gICAgICAgICAgICB2YXIgY3YgPSBtaW5lcnZhLlZlY3Rvci5pc0Nsb2Nrd2lzZVRvKGF2LCBidikgPyBhdi5zbGljZSgwKSA6IGJ2LnNsaWNlKDApO1xuICAgICAgICAgICAgbWluZXJ2YS5WZWN0b3Iubm9ybWFsaXplKG1pbmVydmEuVmVjdG9yLnJldmVyc2UobWluZXJ2YS5WZWN0b3Iucm90YXRlKGN2LCB0YXUpKSk7XG4gICAgICAgICAgICB2YXIgbWl0ZXJMZW4gPSBocyAqIG1pdGVyUmF0aW87XG4gICAgICAgICAgICB2YXIgdGlwID0geyB4OiB4ICsgbWl0ZXJMZW4gKiBjdlswXSwgeTogeSArIG1pdGVyTGVuICogY3ZbMV0gfTtcbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgdGlwLFxuICAgICAgICAgICAgICAgIHRpcFxuICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuICAgICAgICBwYXRoXzEuZmluZE1pdGVyVGlwcyA9IGZpbmRNaXRlclRpcHM7XG4gICAgICAgIGZ1bmN0aW9uIGZpbmRCZXZlbFRpcHMocHJldmlvdXMsIGVudHJ5LCBocykge1xuICAgICAgICAgICAgdmFyIHggPSBlbnRyeS5zeDtcbiAgICAgICAgICAgIHZhciB5ID0gZW50cnkuc3k7XG4gICAgICAgICAgICB2YXIgYXYgPSBwcmV2aW91cy5nZXRFbmRWZWN0b3IoKTtcbiAgICAgICAgICAgIHZhciBidiA9IGVudHJ5LmdldFN0YXJ0VmVjdG9yKCk7XG4gICAgICAgICAgICBpZiAoIWF2IHx8ICFidilcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBtaW5lcnZhLlZlY3Rvci5ub3JtYWxpemUobWluZXJ2YS5WZWN0b3IucmV2ZXJzZShhdikpO1xuICAgICAgICAgICAgbWluZXJ2YS5WZWN0b3Iubm9ybWFsaXplKGJ2KTtcbiAgICAgICAgICAgIHZhciBhdm8sIGJ2bztcbiAgICAgICAgICAgIGlmIChtaW5lcnZhLlZlY3Rvci5pc0Nsb2Nrd2lzZVRvKGF2LCBidikpIHtcbiAgICAgICAgICAgICAgICBhdm8gPSBtaW5lcnZhLlZlY3Rvci5vcnRob2dvbmFsKGF2LnNsaWNlKDApKTtcbiAgICAgICAgICAgICAgICBidm8gPSBtaW5lcnZhLlZlY3Rvci5yZXZlcnNlKG1pbmVydmEuVmVjdG9yLm9ydGhvZ29uYWwoYnYuc2xpY2UoMCkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGF2byA9IG1pbmVydmEuVmVjdG9yLnJldmVyc2UobWluZXJ2YS5WZWN0b3Iub3J0aG9nb25hbChhdi5zbGljZSgwKSkpO1xuICAgICAgICAgICAgICAgIGJ2byA9IG1pbmVydmEuVmVjdG9yLm9ydGhvZ29uYWwoYnYuc2xpY2UoMCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICB7IHg6IHggLSBocyAqIGF2b1swXSwgeTogeSAtIGhzICogYXZvWzFdIH0sXG4gICAgICAgICAgICAgICAgeyB4OiB4IC0gaHMgKiBidm9bMF0sIHk6IHkgLSBocyAqIGJ2b1sxXSB9XG4gICAgICAgICAgICBdO1xuICAgICAgICB9XG4gICAgICAgIHBhdGhfMS5maW5kQmV2ZWxUaXBzID0gZmluZEJldmVsVGlwcztcbiAgICB9KShwYXRoID0gbWluZXJ2YS5wYXRoIHx8IChtaW5lcnZhLnBhdGggPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBwaXBlO1xuICAgIChmdW5jdGlvbiAocGlwZSkge1xuICAgICAgICB2YXIgSVRyaVBpcGUgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZnVuY3Rpb24gSVRyaVBpcGUoKSB7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gSVRyaVBpcGU7XG4gICAgICAgIH0pKCk7XG4gICAgICAgIHBpcGUuSVRyaVBpcGUgPSBJVHJpUGlwZTtcbiAgICAgICAgZnVuY3Rpb24gY3JlYXRlVHJpUGlwZShwaXBlZGVmKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGRlZjogcGlwZWRlZixcbiAgICAgICAgICAgICAgICBzdGF0ZTogcGlwZWRlZi5jcmVhdGVTdGF0ZSgpLFxuICAgICAgICAgICAgICAgIG91dHB1dDogcGlwZWRlZi5jcmVhdGVPdXRwdXQoKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBwaXBlLmNyZWF0ZVRyaVBpcGUgPSBjcmVhdGVUcmlQaXBlO1xuICAgIH0pKHBpcGUgPSBtaW5lcnZhLnBpcGUgfHwgKG1pbmVydmEucGlwZSA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIHBpcGU7XG4gICAgKGZ1bmN0aW9uIChwaXBlKSB7XG4gICAgICAgIHZhciBQaXBlRGVmID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIFBpcGVEZWYoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kJG5hbWVzID0gW107XG4gICAgICAgICAgICAgICAgdGhpcy4kJHRhcGlucyA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgUGlwZURlZi5wcm90b3R5cGUuYWRkVGFwaW4gPSBmdW5jdGlvbiAobmFtZSwgdGFwaW4pIHtcbiAgICAgICAgICAgICAgICB0aGlzLiQkbmFtZXMucHVzaChuYW1lKTtcbiAgICAgICAgICAgICAgICB0aGlzLiQkdGFwaW5zLnB1c2godGFwaW4pO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFBpcGVEZWYucHJvdG90eXBlLmFkZFRhcGluQmVmb3JlID0gZnVuY3Rpb24gKGJlZm9yZSwgbmFtZSwgdGFwaW4pIHtcbiAgICAgICAgICAgICAgICB2YXIgbmFtZXMgPSB0aGlzLiQkbmFtZXM7XG4gICAgICAgICAgICAgICAgdmFyIHRhcGlucyA9IHRoaXMuJCR0YXBpbnM7XG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gIWJlZm9yZSA/IC0xIDogbmFtZXMuaW5kZXhPZihiZWZvcmUpO1xuICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZXMudW5zaGlmdChuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgdGFwaW5zLnVuc2hpZnQodGFwaW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZXMuc3BsaWNlKGluZGV4LCAwLCBuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgdGFwaW5zLnNwbGljZShpbmRleCwgMCwgdGFwaW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBQaXBlRGVmLnByb3RvdHlwZS5hZGRUYXBpbkFmdGVyID0gZnVuY3Rpb24gKGFmdGVyLCBuYW1lLCB0YXBpbikge1xuICAgICAgICAgICAgICAgIHZhciBuYW1lcyA9IHRoaXMuJCRuYW1lcztcbiAgICAgICAgICAgICAgICB2YXIgdGFwaW5zID0gdGhpcy4kJHRhcGlucztcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSAhYWZ0ZXIgPyAtMSA6IG5hbWVzLmluZGV4T2YoYWZ0ZXIpO1xuICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PT0gLTEgfHwgaW5kZXggPT09IG5hbWVzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZXMucHVzaChuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgdGFwaW5zLnB1c2godGFwaW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZXMuc3BsaWNlKGluZGV4ICsgMSwgMCwgbmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIHRhcGlucy5zcGxpY2UoaW5kZXggKyAxLCAwLCB0YXBpbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFBpcGVEZWYucHJvdG90eXBlLnJlcGxhY2VUYXBpbiA9IGZ1bmN0aW9uIChuYW1lLCB0YXBpbikge1xuICAgICAgICAgICAgICAgIHZhciBuYW1lcyA9IHRoaXMuJCRuYW1lcztcbiAgICAgICAgICAgICAgICB2YXIgdGFwaW5zID0gdGhpcy4kJHRhcGlucztcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBuYW1lcy5pbmRleE9mKG5hbWUpO1xuICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PT0gLTEpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCByZXBsYWNlIHBpcGUgdGFwLWluLiBObyBwaXBlIHRhcC1pbiBuYW1lZCBgXCIgKyBuYW1lICsgXCJgLlwiKTtcbiAgICAgICAgICAgICAgICB0YXBpbnNbaW5kZXhdID0gdGFwaW47XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgUGlwZURlZi5wcm90b3R5cGUucmVtb3ZlVGFwaW4gPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgICAgIHZhciBuYW1lcyA9IHRoaXMuJCRuYW1lcztcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBuYW1lcy5pbmRleE9mKG5hbWUpO1xuICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PT0gLTEpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCByZXBsYWNlIHBpcGUgdGFwLWluLiBObyBwaXBlIHRhcC1pbiBuYW1lZCBgXCIgKyBuYW1lICsgXCJgLlwiKTtcbiAgICAgICAgICAgICAgICBuYW1lcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgICAgIHRoaXMuJCR0YXBpbnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBQaXBlRGVmLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIHZhciBjb250ZXh0cyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHRzW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb250ZXh0cy51bnNoaWZ0KGRhdGEpO1xuICAgICAgICAgICAgICAgIHRoaXMucHJlcGFyZS5hcHBseSh0aGlzLCBjb250ZXh0cyk7XG4gICAgICAgICAgICAgICAgdmFyIGZsYWcgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCB0YXBpbnMgPSB0aGlzLiQkdGFwaW5zLCBsZW4gPSB0YXBpbnMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0YXBpbnNbaV0uYXBwbHkodGhpcywgY29udGV4dHMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmbGFnID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmZsdXNoLmFwcGx5KHRoaXMsIGNvbnRleHRzKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmxhZztcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBQaXBlRGVmLnByb3RvdHlwZS5wcmVwYXJlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICB2YXIgY29udGV4dHMgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgICAgICBjb250ZXh0c1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgUGlwZURlZi5wcm90b3R5cGUuZmx1c2ggPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIHZhciBjb250ZXh0cyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHRzW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gUGlwZURlZjtcbiAgICAgICAgfSkoKTtcbiAgICAgICAgcGlwZS5QaXBlRGVmID0gUGlwZURlZjtcbiAgICB9KShwaXBlID0gbWluZXJ2YS5waXBlIHx8IChtaW5lcnZhLnBpcGUgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBwaXBlO1xuICAgIChmdW5jdGlvbiAocGlwZSkge1xuICAgICAgICB2YXIgVHJpUGlwZURlZiA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBUcmlQaXBlRGVmKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuJCRuYW1lcyA9IFtdO1xuICAgICAgICAgICAgICAgIHRoaXMuJCR0YXBpbnMgPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFRyaVBpcGVEZWYucHJvdG90eXBlLmFkZFRhcGluID0gZnVuY3Rpb24gKG5hbWUsIHRhcGluKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kJG5hbWVzLnB1c2gobmFtZSk7XG4gICAgICAgICAgICAgICAgdGhpcy4kJHRhcGlucy5wdXNoKHRhcGluKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBUcmlQaXBlRGVmLnByb3RvdHlwZS5hZGRUYXBpbkJlZm9yZSA9IGZ1bmN0aW9uIChiZWZvcmUsIG5hbWUsIHRhcGluKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5hbWVzID0gdGhpcy4kJG5hbWVzO1xuICAgICAgICAgICAgICAgIHZhciB0YXBpbnMgPSB0aGlzLiQkdGFwaW5zO1xuICAgICAgICAgICAgICAgIHZhciBpbmRleCA9ICFiZWZvcmUgPyAtMSA6IG5hbWVzLmluZGV4T2YoYmVmb3JlKTtcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWVzLnVuc2hpZnQobmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIHRhcGlucy51bnNoaWZ0KHRhcGluKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWVzLnNwbGljZShpbmRleCwgMCwgbmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIHRhcGlucy5zcGxpY2UoaW5kZXgsIDAsIHRhcGluKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgVHJpUGlwZURlZi5wcm90b3R5cGUuYWRkVGFwaW5BZnRlciA9IGZ1bmN0aW9uIChhZnRlciwgbmFtZSwgdGFwaW4pIHtcbiAgICAgICAgICAgICAgICB2YXIgbmFtZXMgPSB0aGlzLiQkbmFtZXM7XG4gICAgICAgICAgICAgICAgdmFyIHRhcGlucyA9IHRoaXMuJCR0YXBpbnM7XG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gIWFmdGVyID8gLTEgOiBuYW1lcy5pbmRleE9mKGFmdGVyKTtcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPT09IC0xIHx8IGluZGV4ID09PSBuYW1lcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWVzLnB1c2gobmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIHRhcGlucy5wdXNoKHRhcGluKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWVzLnNwbGljZShpbmRleCArIDEsIDAsIG5hbWUpO1xuICAgICAgICAgICAgICAgICAgICB0YXBpbnMuc3BsaWNlKGluZGV4ICsgMSwgMCwgdGFwaW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBUcmlQaXBlRGVmLnByb3RvdHlwZS5yZXBsYWNlVGFwaW4gPSBmdW5jdGlvbiAobmFtZSwgdGFwaW4pIHtcbiAgICAgICAgICAgICAgICB2YXIgbmFtZXMgPSB0aGlzLiQkbmFtZXM7XG4gICAgICAgICAgICAgICAgdmFyIHRhcGlucyA9IHRoaXMuJCR0YXBpbnM7XG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gbmFtZXMuaW5kZXhPZihuYW1lKTtcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPT09IC0xKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZCBub3QgcmVwbGFjZSBwaXBlIHRhcC1pbi4gTm8gcGlwZSB0YXAtaW4gbmFtZWQgYFwiICsgbmFtZSArIFwiYC5cIik7XG4gICAgICAgICAgICAgICAgdGFwaW5zW2luZGV4XSA9IHRhcGluO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFRyaVBpcGVEZWYucHJvdG90eXBlLnJlbW92ZVRhcGluID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgICAgICB2YXIgbmFtZXMgPSB0aGlzLiQkbmFtZXM7XG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gbmFtZXMuaW5kZXhPZihuYW1lKTtcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPT09IC0xKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZCBub3QgcmVwbGFjZSBwaXBlIHRhcC1pbi4gTm8gcGlwZSB0YXAtaW4gbmFtZWQgYFwiICsgbmFtZSArIFwiYC5cIik7XG4gICAgICAgICAgICAgICAgbmFtZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICB0aGlzLiQkdGFwaW5zLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgVHJpUGlwZURlZi5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKGlucHV0LCBzdGF0ZSwgb3V0cHV0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbnRleHRzID0gW107XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAzOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dHNbX2kgLSAzXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnRleHRzLnVuc2hpZnQob3V0cHV0KTtcbiAgICAgICAgICAgICAgICBjb250ZXh0cy51bnNoaWZ0KHN0YXRlKTtcbiAgICAgICAgICAgICAgICBjb250ZXh0cy51bnNoaWZ0KGlucHV0KTtcbiAgICAgICAgICAgICAgICB0aGlzLnByZXBhcmUuYXBwbHkodGhpcywgY29udGV4dHMpO1xuICAgICAgICAgICAgICAgIHZhciBmbGFnID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgdGFwaW5zID0gdGhpcy4kJHRhcGlucywgbGVuID0gdGFwaW5zLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdGFwaW5zW2ldLmFwcGx5KHRoaXMsIGNvbnRleHRzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmxhZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5mbHVzaC5hcHBseSh0aGlzLCBjb250ZXh0cyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZsYWc7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgVHJpUGlwZURlZi5wcm90b3R5cGUuY3JlYXRlU3RhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgVHJpUGlwZURlZi5wcm90b3R5cGUuY3JlYXRlT3V0cHV0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFRyaVBpcGVEZWYucHJvdG90eXBlLnByZXBhcmUgPSBmdW5jdGlvbiAoaW5wdXQsIHN0YXRlLCBvdXRwdXQpIHtcbiAgICAgICAgICAgICAgICB2YXIgY29udGV4dHMgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDM7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgICAgICBjb250ZXh0c1tfaSAtIDNdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgVHJpUGlwZURlZi5wcm90b3R5cGUuZmx1c2ggPSBmdW5jdGlvbiAoaW5wdXQsIHN0YXRlLCBvdXRwdXQpIHtcbiAgICAgICAgICAgICAgICB2YXIgY29udGV4dHMgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDM7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgICAgICBjb250ZXh0c1tfaSAtIDNdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIFRyaVBpcGVEZWY7XG4gICAgICAgIH0pKCk7XG4gICAgICAgIHBpcGUuVHJpUGlwZURlZiA9IFRyaVBpcGVEZWY7XG4gICAgfSkocGlwZSA9IG1pbmVydmEucGlwZSB8fCAobWluZXJ2YS5waXBlID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xuKGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgaWYgKCFjb250ZXh0LnBlcmZleCkge1xuICAgICAgICBjb250ZXh0LnBlcmZleCA9IHt9O1xuICAgIH1cbiAgICBpZiAoIWNvbnRleHQucGVyZmV4LnRpbWVyKSB7XG4gICAgICAgIGNvbnRleHQucGVyZmV4LnRpbWVyID0ge1xuICAgICAgICAgICAgYWxsOiBbXSxcbiAgICAgICAgICAgIHJlc2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3RhcnQ6IGZ1bmN0aW9uICh0YWcpIHtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdG9wOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuICAgIGlmICghY29udGV4dC5wZXJmZXgucGhhc2VzKSB7XG4gICAgICAgIGNvbnRleHQucGVyZmV4LnBoYXNlcyA9IHtcbiAgICAgICAgICAgIGN1cnJlbnQ6IG51bGwsXG4gICAgICAgICAgICBhbGw6IFtdLFxuICAgICAgICAgICAgc3RhcnQ6IGZ1bmN0aW9uICh0YWcpIHtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG59KSh3aW5kb3cpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgdGV4dDtcbiAgICAoZnVuY3Rpb24gKHRleHRfMSkge1xuICAgICAgICB2YXIgRG9jdW1lbnRMYXlvdXREZWYgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZnVuY3Rpb24gRG9jdW1lbnRMYXlvdXREZWYoKSB7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBEb2N1bWVudExheW91dERlZi5wcm90b3R5cGUuY3JlYXRlQXNzZXRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGF2YWlsYWJsZVdpZHRoOiBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFksXG4gICAgICAgICAgICAgICAgICAgIGFjdHVhbFdpZHRoOiBOYU4sXG4gICAgICAgICAgICAgICAgICAgIGFjdHVhbEhlaWdodDogTmFOLFxuICAgICAgICAgICAgICAgICAgICBtYXhXaWR0aDogTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLFxuICAgICAgICAgICAgICAgICAgICBtYXhIZWlnaHQ6IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSxcbiAgICAgICAgICAgICAgICAgICAgbGluZXM6IFtdLFxuICAgICAgICAgICAgICAgICAgICBzZWxDYWNoZWQ6IGZhbHNlXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBEb2N1bWVudExheW91dERlZi5wcm90b3R5cGUuc2V0TWF4V2lkdGggPSBmdW5jdGlvbiAoZG9jY3R4LCBkb2Nhc3NldHMsIHdpZHRoKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRvY2Fzc2V0cy5tYXhXaWR0aCA9PT0gd2lkdGgpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICBkb2Nhc3NldHMubWF4V2lkdGggPSB3aWR0aDtcbiAgICAgICAgICAgICAgICBkb2Nhc3NldHMuYWN0dWFsV2lkdGggPSBOYU47XG4gICAgICAgICAgICAgICAgZG9jYXNzZXRzLmFjdHVhbEhlaWdodCA9IE5hTjtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBEb2N1bWVudExheW91dERlZi5wcm90b3R5cGUubGF5b3V0ID0gZnVuY3Rpb24gKGRvY2N0eCwgZG9jYXNzZXRzLCBjb25zdHJhaW50LCB3YWxrZXIpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWlzTmFOKGRvY2Fzc2V0cy5hY3R1YWxXaWR0aCkpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICBkb2Nhc3NldHMubWF4V2lkdGggPSBjb25zdHJhaW50LndpZHRoO1xuICAgICAgICAgICAgICAgIGRvY2Fzc2V0cy5hY3R1YWxXaWR0aCA9IDAuMDtcbiAgICAgICAgICAgICAgICBkb2Nhc3NldHMuYWN0dWFsSGVpZ2h0ID0gMC4wO1xuICAgICAgICAgICAgICAgIGRvY2Fzc2V0cy5saW5lcyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIG9mZnNldCA9IDA7IHdhbGtlci5zdGVwKCk7KSB7XG4gICAgICAgICAgICAgICAgICAgIG9mZnNldCArPSB3YWxrZXIuY3VycmVudC5sYXlvdXQoZG9jY3R4LCBkb2Nhc3NldHMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBEb2N1bWVudExheW91dERlZi5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKGN0eCwgZG9jY3R4LCBkb2Nhc3NldHMpIHtcbiAgICAgICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHRoaXMuc3BsaXRTZWxlY3Rpb24oZG9jY3R4LCBkb2Nhc3NldHMpO1xuICAgICAgICAgICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgICAgICAgICAgZG9jYXNzZXRzLmxpbmVzLmZvckVhY2goZnVuY3Rpb24gKGxpbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhhbGlnbiA9IF90aGlzLmdldEhvcml6b250YWxBbGlnbm1lbnRYKGRvY2N0eCwgZG9jYXNzZXRzLCBsaW5lLndpZHRoKTtcbiAgICAgICAgICAgICAgICAgICAgY3R4LnRyYW5zbGF0ZShoYWxpZ24sIDApO1xuICAgICAgICAgICAgICAgICAgICBsaW5lLnJ1bnMuZm9yRWFjaChmdW5jdGlvbiAocnVuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocnVuLnByZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHRfMS5sYXlvdXQuQ2x1c3Rlci5yZW5kZXIocnVuLnByZSwgcnVuLmF0dHJzLCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0eC50cmFuc2xhdGUocnVuLnByZS53aWR0aCwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocnVuLnNlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHRfMS5sYXlvdXQuQ2x1c3Rlci5yZW5kZXIocnVuLnNlbCwgcnVuLmF0dHJzLCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0eC50cmFuc2xhdGUocnVuLnNlbC53aWR0aCwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocnVuLnBvc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0XzEubGF5b3V0LkNsdXN0ZXIucmVuZGVyKHJ1bi5wb3N0LCBydW4uYXR0cnMsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3R4LnRyYW5zbGF0ZShydW4ucG9zdC53aWR0aCwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBjdHgudHJhbnNsYXRlKC1saW5lLndpZHRoIC0gaGFsaWduLCBsaW5lLmhlaWdodCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBEb2N1bWVudExheW91dERlZi5wcm90b3R5cGUuZ2V0Q3Vyc29yRnJvbVBvaW50ID0gZnVuY3Rpb24gKHBvaW50LCBkb2NjdHgsIGRvY2Fzc2V0cykge1xuICAgICAgICAgICAgICAgIHZhciBsaW5lID0gZG9jYXNzZXRzLmxpbmVzWzBdO1xuICAgICAgICAgICAgICAgIGlmICghbGluZSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICAgICAgdmFyIGFkdmFuY2UgPSAwO1xuICAgICAgICAgICAgICAgIGlmIChwb2ludC55ID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBjdXJ5ID0gMCwgbGluZXMgPSBkb2Nhc3NldHMubGluZXMsIGkgPSAwLCBsZW4gPSBsaW5lcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGluZSA9IGxpbmVzW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBvaW50LnkgPD0gKGN1cnkgKyBsaW5lLmhlaWdodCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZHZhbmNlICs9IGxpbmUucnVucy5yZWR1Y2UoZnVuY3Rpb24gKGFnZywgcikgeyByZXR1cm4gYWdnICsgci5sZW5ndGg7IH0sIDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VyeSArPSBsaW5lLmhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgcHggPSBwb2ludC54IC0gdGhpcy5nZXRIb3Jpem9udGFsQWxpZ25tZW50WChkb2NjdHgsIGRvY2Fzc2V0cywgbGluZS53aWR0aCk7XG4gICAgICAgICAgICAgICAgaWYgKHB4IDwgMClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFkdmFuY2U7XG4gICAgICAgICAgICAgICAgdmFyIGN1cnggPSAwO1xuICAgICAgICAgICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBydW5zID0gbGluZS5ydW5zLCBsZW4gPSBydW5zLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBydW4gPSBydW5zW2ldO1xuICAgICAgICAgICAgICAgICAgICBpZiAocHggPD0gKGN1cnggKyBydW4ud2lkdGgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGFkdmFuY2UgKz0gcnVuLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgY3VyeCArPSBydW4ud2lkdGg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBydW4gPSBydW5zW2ldO1xuICAgICAgICAgICAgICAgIGlmICghcnVuKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWR2YW5jZTtcbiAgICAgICAgICAgICAgICB2YXIgZW5kID0gTWF0aC5tYXgoMCwgTWF0aC5taW4ocnVuLnRleHQubGVuZ3RoLCBNYXRoLmNlaWwoKHB4IC0gY3VyeCkgLyBydW4ud2lkdGggKiBydW4udGV4dC5sZW5ndGgpKSk7XG4gICAgICAgICAgICAgICAgdmFyIHVzZWRUZXh0ID0gcnVuLnRleHQuc3Vic3RyKDAsIGVuZCk7XG4gICAgICAgICAgICAgICAgdmFyIHdpZHRoO1xuICAgICAgICAgICAgICAgIHdoaWxlIChlbmQgPiAwICYmICh3aWR0aCA9IHRoaXMubWVhc3VyZVRleHRXaWR0aCh1c2VkVGV4dCwgcnVuLmF0dHJzLmZvbnQpKSA+IHB4KSB7XG4gICAgICAgICAgICAgICAgICAgIGVuZC0tO1xuICAgICAgICAgICAgICAgICAgICB1c2VkVGV4dCA9IHJ1bi50ZXh0LnN1YnN0cigwLCBlbmQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgbGFzdEVuZCA9IGVuZDtcbiAgICAgICAgICAgICAgICB3aGlsZSAoZW5kIDwgcnVuLnRleHQubGVuZ3RoICYmICh3aWR0aCA9IHRoaXMubWVhc3VyZVRleHRXaWR0aCh1c2VkVGV4dCwgcnVuLmF0dHJzLmZvbnQpKSA8IHB4KSB7XG4gICAgICAgICAgICAgICAgICAgIGxhc3RFbmQgPSBlbmQ7XG4gICAgICAgICAgICAgICAgICAgIGVuZCsrO1xuICAgICAgICAgICAgICAgICAgICB1c2VkVGV4dCA9IHJ1bi50ZXh0LnN1YnN0cigwLCBlbmQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gYWR2YW5jZSArIGxhc3RFbmQ7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgRG9jdW1lbnRMYXlvdXREZWYucHJvdG90eXBlLmdldENhcmV0RnJvbUN1cnNvciA9IGZ1bmN0aW9uIChkb2NjdHgsIGRvY2Fzc2V0cykge1xuICAgICAgICAgICAgICAgIHZhciBjdXJzb3IgPSBkb2NjdHguc2VsZWN0aW9uU3RhcnQ7XG4gICAgICAgICAgICAgICAgdmFyIGFkdmFuY2UgPSAwO1xuICAgICAgICAgICAgICAgIHZhciBjciA9IG5ldyBtaW5lcnZhLlJlY3QoMCwgMCwgMSwgMCk7XG4gICAgICAgICAgICAgICAgdmFyIGxhc3RMaW5lSGVpZ2h0ID0gMDtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBsaW5lcyA9IGRvY2Fzc2V0cy5saW5lcywgaSA9IDAsIGxlbiA9IGxpbmVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsaW5lID0gbGluZXNbaV07XG4gICAgICAgICAgICAgICAgICAgIGNyLnggPSB0aGlzLmdldEhvcml6b250YWxBbGlnbm1lbnRYKGRvY2N0eCwgZG9jYXNzZXRzLCBsaW5lLndpZHRoKTtcbiAgICAgICAgICAgICAgICAgICAgY3IuaGVpZ2h0ID0gbGluZS5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHJ1bnMgPSBsaW5lLnJ1bnMsIGogPSAwLCBsZW4yID0gcnVucy5sZW5ndGg7IGogPCBsZW4yOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBydW4gPSBydW5zW2pdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChhZHZhbmNlICsgcnVuLmxlbmd0aCkgPiBjdXJzb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjci54ICs9IHRoaXMubWVhc3VyZVRleHRXaWR0aChydW4udGV4dC5zdWJzdHIoMCwgY3Vyc29yIC0gYWR2YW5jZSksIHJ1bi5hdHRycy5mb250KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3I7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBhZHZhbmNlICs9IHJ1bi5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBjci54ICs9IGxpbmUud2lkdGg7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY3IueSArPSBsaW5lLmhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgbGFzdExpbmVIZWlnaHQgPSBsaW5lLmhlaWdodDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY3IueSAtPSBsYXN0TGluZUhlaWdodDtcbiAgICAgICAgICAgICAgICByZXR1cm4gY3I7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgRG9jdW1lbnRMYXlvdXREZWYucHJvdG90eXBlLnNwbGl0U2VsZWN0aW9uID0gZnVuY3Rpb24gKGRvY2N0eCwgYXNzZXRzKSB7XG4gICAgICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgICAgICBpZiAoYXNzZXRzLnNlbENhY2hlZClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIHZhciBzdGFydCA9IGRvY2N0eC5zZWxlY3Rpb25TdGFydDtcbiAgICAgICAgICAgICAgICBhc3NldHMubGluZXMuZm9yRWFjaChmdW5jdGlvbiAobGluZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbGluZS5ydW5zLmZvckVhY2goZnVuY3Rpb24gKHJ1bikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dF8xLmxheW91dC5SdW4uc3BsaXRTZWxlY3Rpb24ocnVuLCBzdGFydCwgc3RhcnQgKyBkb2NjdHguc2VsZWN0aW9uTGVuZ3RoLCBmdW5jdGlvbiAodGV4dCwgYXR0cnMpIHsgcmV0dXJuIF90aGlzLm1lYXN1cmVUZXh0V2lkdGgodGV4dCwgYXR0cnMuZm9udCk7IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQgLT0gcnVuLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgYXNzZXRzLnNlbENhY2hlZCA9IHRydWU7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgRG9jdW1lbnRMYXlvdXREZWYucHJvdG90eXBlLmdldEhvcml6b250YWxBbGlnbm1lbnRYID0gZnVuY3Rpb24gKGRvY2N0eCwgYXNzZXRzLCBsaW5lV2lkdGgpIHtcbiAgICAgICAgICAgICAgICBpZiAoZG9jY3R4LnRleHRBbGlnbm1lbnQgPT09IG1pbmVydmEuVGV4dEFsaWdubWVudC5MZWZ0IHx8IGRvY2N0eC50ZXh0QWxpZ25tZW50ID09PSBtaW5lcnZhLlRleHRBbGlnbm1lbnQuSnVzdGlmeVxuICAgICAgICAgICAgICAgICAgICB8fCAoZG9jY3R4LnRleHRXcmFwcGluZyA9PT0gbWluZXJ2YS5UZXh0V3JhcHBpbmcuTm9XcmFwICYmIGRvY2N0eC50ZXh0VHJpbW1pbmcgIT09IG1pbmVydmEuVGV4dFRyaW1taW5nLk5vbmUpKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgICAgICB2YXIgd2lkdGggPSBnZXRXaWR0aENvbnN0cmFpbnQoYXNzZXRzKTtcbiAgICAgICAgICAgICAgICBpZiAobGluZVdpZHRoID49IHdpZHRoKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgICAgICBpZiAoZG9jY3R4LnRleHRBbGlnbm1lbnQgPT09IG1pbmVydmEuVGV4dEFsaWdubWVudC5DZW50ZXIpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAod2lkdGggLSBsaW5lV2lkdGgpIC8gMi4wO1xuICAgICAgICAgICAgICAgIHJldHVybiB3aWR0aCAtIGxpbmVXaWR0aDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBEb2N1bWVudExheW91dERlZi5wcm90b3R5cGUubWVhc3VyZVRleHRXaWR0aCA9IGZ1bmN0aW9uICh0ZXh0LCBmb250KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1pbmVydmEuZW5naW5lLlN1cmZhY2UubWVhc3VyZVdpZHRoKHRleHQsIGZvbnQpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBEb2N1bWVudExheW91dERlZjtcbiAgICAgICAgfSkoKTtcbiAgICAgICAgdGV4dF8xLkRvY3VtZW50TGF5b3V0RGVmID0gRG9jdW1lbnRMYXlvdXREZWY7XG4gICAgICAgIGZ1bmN0aW9uIGdldFdpZHRoQ29uc3RyYWludChhc3NldHMpIHtcbiAgICAgICAgICAgIGlmIChpc0Zpbml0ZShhc3NldHMuYXZhaWxhYmxlV2lkdGgpKVxuICAgICAgICAgICAgICAgIHJldHVybiBhc3NldHMuYXZhaWxhYmxlV2lkdGg7XG4gICAgICAgICAgICBpZiAoIWlzRmluaXRlKGFzc2V0cy5tYXhXaWR0aCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFzc2V0cy5hY3R1YWxXaWR0aDtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLm1pbihhc3NldHMuYWN0dWFsV2lkdGgsIGFzc2V0cy5tYXhXaWR0aCk7XG4gICAgICAgIH1cbiAgICB9KSh0ZXh0ID0gbWluZXJ2YS50ZXh0IHx8IChtaW5lcnZhLnRleHQgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciB0ZXh0O1xuICAgIChmdW5jdGlvbiAodGV4dCkge1xuICAgICAgICBmdW5jdGlvbiBjcmVhdGVEb2N1bWVudExheW91dChkZWYpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZGVmOiBkZWYsXG4gICAgICAgICAgICAgICAgYXNzZXRzOiBkZWYuY3JlYXRlQXNzZXRzKClcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgdGV4dC5jcmVhdGVEb2N1bWVudExheW91dCA9IGNyZWF0ZURvY3VtZW50TGF5b3V0O1xuICAgIH0pKHRleHQgPSBtaW5lcnZhLnRleHQgfHwgKG1pbmVydmEudGV4dCA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIHRleHQ7XG4gICAgKGZ1bmN0aW9uICh0ZXh0KSB7XG4gICAgICAgIHZhciBUZXh0VXBkYXRlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBUZXh0VXBkYXRlcigpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFzc2V0cyA9IHtcbiAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogbWluZXJ2YS5Gb250LkRFRkFVTFRfRkFNSUxZLFxuICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogbWluZXJ2YS5Gb250LkRFRkFVTFRfU0laRSxcbiAgICAgICAgICAgICAgICAgICAgZm9udFN0cmV0Y2g6IG1pbmVydmEuRm9udC5ERUZBVUxUX1NUUkVUQ0gsXG4gICAgICAgICAgICAgICAgICAgIGZvbnRTdHlsZTogbWluZXJ2YS5Gb250LkRFRkFVTFRfU1RZTEUsXG4gICAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IG1pbmVydmEuRm9udC5ERUZBVUxUX1dFSUdIVCxcbiAgICAgICAgICAgICAgICAgICAgdGV4dERlY29yYXRpb25zOiBtaW5lcnZhLlRleHREZWNvcmF0aW9ucy5Ob25lLFxuICAgICAgICAgICAgICAgICAgICBsYW5ndWFnZTogXCJcIixcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uQmFja2dyb3VuZDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgZm9yZWdyb3VuZDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uRm9yZWdyb3VuZDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgaXNVbmRlcmxpbmVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgZm9udDogbmV3IG1pbmVydmEuRm9udCgpLFxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiBcIlwiXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB0aGlzLmluaXQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFRleHRVcGRhdGVyLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0VGV4dExheW91dCgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFRleHRVcGRhdGVyLnByb3RvdHlwZS5zZXRUZXh0TGF5b3V0ID0gZnVuY3Rpb24gKHRsZGVmKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuJCR0ZXh0bGF5b3V0KVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgICB0aGlzLiQkdGV4dGxheW91dCA9IHRsZGVmIHx8IG5ldyB0ZXh0LnJ1bi5SdW5MYXlvdXREZWYoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBUZXh0VXBkYXRlci5wcm90b3R5cGUubGF5b3V0ID0gZnVuY3Rpb24gKGRvY2N0eCwgZG9jYXNzZXRzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kJHRleHRsYXlvdXQubGF5b3V0KGRvY2N0eCwgZG9jYXNzZXRzLCB0aGlzLmFzc2V0cyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXNzZXRzLnRleHQubGVuZ3RoO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFRleHRVcGRhdGVyLnByb3RvdHlwZS5pbnZhbGlkYXRlRm9udCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgYXNzZXRzID0gdGhpcy5hc3NldHM7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1pbmVydmEuRm9udC5tZXJnZUludG8oYXNzZXRzLmZvbnQsIGFzc2V0cy5mb250RmFtaWx5LCBhc3NldHMuZm9udFNpemUsIGFzc2V0cy5mb250U3RyZXRjaCwgYXNzZXRzLmZvbnRTdHlsZSwgYXNzZXRzLmZvbnRXZWlnaHQpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBUZXh0VXBkYXRlcjtcbiAgICAgICAgfSkoKTtcbiAgICAgICAgdGV4dC5UZXh0VXBkYXRlciA9IFRleHRVcGRhdGVyO1xuICAgIH0pKHRleHQgPSBtaW5lcnZhLnRleHQgfHwgKG1pbmVydmEudGV4dCA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvcmU7XG4gICAgKGZ1bmN0aW9uIChjb3JlKSB7XG4gICAgICAgIHZhciBhcnJhbmdlO1xuICAgICAgICAoZnVuY3Rpb24gKGFycmFuZ2UpIHtcbiAgICAgICAgICAgIHZhciBBcnJhbmdlUGlwZURlZiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICAgICAgX19leHRlbmRzKEFycmFuZ2VQaXBlRGVmLCBfc3VwZXIpO1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIEFycmFuZ2VQaXBlRGVmKCkge1xuICAgICAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRUYXBpbigndmFsaWRhdGVGaW5hbFJlY3QnLCBhcnJhbmdlLnRhcGlucy52YWxpZGF0ZUZpbmFsUmVjdClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRUYXBpbignYXBwbHlSb3VuZGluZycsIGFycmFuZ2UudGFwaW5zLmFwcGx5Um91bmRpbmcpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkVGFwaW4oJ3ZhbGlkYXRlVmlzaWJpbGl0eScsIGFycmFuZ2UudGFwaW5zLnZhbGlkYXRlVmlzaWJpbGl0eSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRUYXBpbignY2hlY2tOZWVkQXJyYW5nZScsIGFycmFuZ2UudGFwaW5zLmNoZWNrTmVlZEFycmFuZ2UpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkVGFwaW4oJ2ludmFsaWRhdGVGdXR1cmUnLCBhcnJhbmdlLnRhcGlucy5pbnZhbGlkYXRlRnV0dXJlKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZFRhcGluKCdjYWxjU3RyZXRjaGVkJywgYXJyYW5nZS50YXBpbnMuY2FsY1N0cmV0Y2hlZClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRUYXBpbigncHJlcGFyZU92ZXJyaWRlJywgYXJyYW5nZS50YXBpbnMucHJlcGFyZU92ZXJyaWRlKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZFRhcGluKCdkb092ZXJyaWRlJywgYXJyYW5nZS50YXBpbnMuZG9PdmVycmlkZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRUYXBpbignY29tcGxldGVPdmVycmlkZScsIGFycmFuZ2UudGFwaW5zLmNvbXBsZXRlT3ZlcnJpZGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkVGFwaW4oJ2NhbGNGbGlwJywgYXJyYW5nZS50YXBpbnMuY2FsY0ZsaXApXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkVGFwaW4oJ2NhbGNWaXN1YWxPZmZzZXQnLCBhcnJhbmdlLnRhcGlucy5jYWxjVmlzdWFsT2Zmc2V0KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZFRhcGluKCdidWlsZExheW91dENsaXAnLCBhcnJhbmdlLnRhcGlucy5idWlsZExheW91dENsaXApXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkVGFwaW4oJ2J1aWxkTGF5b3V0WGZvcm0nLCBhcnJhbmdlLnRhcGlucy5idWlsZExheW91dFhmb3JtKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZFRhcGluKCdidWlsZFJlbmRlclNpemUnLCBhcnJhbmdlLnRhcGlucy5idWlsZFJlbmRlclNpemUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBBcnJhbmdlUGlwZURlZi5wcm90b3R5cGUuY3JlYXRlU3RhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcnJhbmdlZFNpemU6IG5ldyBtaW5lcnZhLlNpemUoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsUmVjdDogbmV3IG1pbmVydmEuUmVjdCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxTaXplOiBuZXcgbWluZXJ2YS5TaXplKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZFJlY3Q6IG5ldyBtaW5lcnZhLlJlY3QoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1ld29yazogbmV3IG1pbmVydmEuU2l6ZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RyZXRjaGVkOiBuZXcgbWluZXJ2YS5TaXplKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdHJhaW5lZDogbmV3IG1pbmVydmEuU2l6ZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmxpcEhvcml6b250YWw6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBBcnJhbmdlUGlwZURlZi5wcm90b3R5cGUuY3JlYXRlT3V0cHV0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlydHlGbGFnczogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVpRmxhZ3M6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXlvdXRTbG90OiBuZXcgbWluZXJ2YS5SZWN0KCksXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXlvdXRYZm9ybTogbWluZXJ2YS5tYXQzLmlkZW50aXR5KCksXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXlvdXRDbGlwOiBuZXcgbWluZXJ2YS5SZWN0KCksXG4gICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJTaXplOiBuZXcgbWluZXJ2YS5TaXplKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0UmVuZGVyU2l6ZTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmlzdWFsT2Zmc2V0OiBuZXcgbWluZXJ2YS5Qb2ludCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ0RpcnR5RmxhZ3M6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBvcmlnVWlGbGFnczogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld1VwRGlydHk6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdEb3duRGlydHk6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdVaUZsYWdzOiAwXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBBcnJhbmdlUGlwZURlZi5wcm90b3R5cGUucHJlcGFyZSA9IGZ1bmN0aW9uIChpbnB1dCwgc3RhdGUsIG91dHB1dCkge1xuICAgICAgICAgICAgICAgICAgICBvdXRwdXQub3JpZ0RpcnR5RmxhZ3MgPSBvdXRwdXQuZGlydHlGbGFncyA9IGlucHV0LmRpcnR5RmxhZ3M7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dC5vcmlnVWlGbGFncyA9IG91dHB1dC51aUZsYWdzID0gaW5wdXQudWlGbGFncztcbiAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5SZWN0LmNvcHlUbyhpbnB1dC5sYXlvdXRTbG90LCBvdXRwdXQubGF5b3V0U2xvdCk7XG4gICAgICAgICAgICAgICAgICAgIG1pbmVydmEuUmVjdC5jb3B5VG8oaW5wdXQubGF5b3V0Q2xpcCwgb3V0cHV0LmxheW91dENsaXApO1xuICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLlNpemUuY29weVRvKGlucHV0LnJlbmRlclNpemUsIG91dHB1dC5yZW5kZXJTaXplKTtcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0Lmxhc3RSZW5kZXJTaXplID0gaW5wdXQubGFzdFJlbmRlclNpemU7XG4gICAgICAgICAgICAgICAgICAgIG1pbmVydmEubWF0My5jb3B5VG8oaW5wdXQubGF5b3V0WGZvcm0sIG91dHB1dC5sYXlvdXRYZm9ybSk7XG4gICAgICAgICAgICAgICAgICAgIG1pbmVydmEuUG9pbnQuY29weVRvKGlucHV0LnZpc3VhbE9mZnNldCwgb3V0cHV0LnZpc3VhbE9mZnNldCk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBBcnJhbmdlUGlwZURlZi5wcm90b3R5cGUuZmx1c2ggPSBmdW5jdGlvbiAoaW5wdXQsIHN0YXRlLCBvdXRwdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5ld0RpcnR5ID0gKG91dHB1dC5kaXJ0eUZsYWdzIHwgaW5wdXQuZGlydHlGbGFncykgJiB+b3V0cHV0Lm9yaWdEaXJ0eUZsYWdzO1xuICAgICAgICAgICAgICAgICAgICBvdXRwdXQubmV3VXBEaXJ0eSA9IG5ld0RpcnR5ICYgbWluZXJ2YS5EaXJ0eUZsYWdzLlVwRGlydHlTdGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0Lm5ld0Rvd25EaXJ0eSA9IG5ld0RpcnR5ICYgbWluZXJ2YS5EaXJ0eUZsYWdzLkRvd25EaXJ0eVN0YXRlO1xuICAgICAgICAgICAgICAgICAgICBvdXRwdXQubmV3VWlGbGFncyA9IChvdXRwdXQudWlGbGFncyB8IGlucHV0LnVpRmxhZ3MpICYgfm91dHB1dC5vcmlnVWlGbGFncztcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQuZGlydHlGbGFncyA9IG91dHB1dC5kaXJ0eUZsYWdzO1xuICAgICAgICAgICAgICAgICAgICBpbnB1dC51aUZsYWdzID0gb3V0cHV0LnVpRmxhZ3M7XG4gICAgICAgICAgICAgICAgICAgIG1pbmVydmEuUmVjdC5jb3B5VG8ob3V0cHV0LmxheW91dFNsb3QsIGlucHV0LmxheW91dFNsb3QpO1xuICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLlJlY3QuY29weVRvKG91dHB1dC5sYXlvdXRDbGlwLCBpbnB1dC5sYXlvdXRDbGlwKTtcbiAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5TaXplLmNvcHlUbyhvdXRwdXQucmVuZGVyU2l6ZSwgaW5wdXQucmVuZGVyU2l6ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0Lmxhc3RSZW5kZXJTaXplID0gb3V0cHV0Lmxhc3RSZW5kZXJTaXplO1xuICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLm1hdDMuY29weVRvKG91dHB1dC5sYXlvdXRYZm9ybSwgaW5wdXQubGF5b3V0WGZvcm0pO1xuICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLlBvaW50LmNvcHlUbyhvdXRwdXQudmlzdWFsT2Zmc2V0LCBpbnB1dC52aXN1YWxPZmZzZXQpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIEFycmFuZ2VQaXBlRGVmO1xuICAgICAgICAgICAgfSkobWluZXJ2YS5waXBlLlRyaVBpcGVEZWYpO1xuICAgICAgICAgICAgYXJyYW5nZS5BcnJhbmdlUGlwZURlZiA9IEFycmFuZ2VQaXBlRGVmO1xuICAgICAgICB9KShhcnJhbmdlID0gY29yZS5hcnJhbmdlIHx8IChjb3JlLmFycmFuZ2UgPSB7fSkpO1xuICAgIH0pKGNvcmUgPSBtaW5lcnZhLmNvcmUgfHwgKG1pbmVydmEuY29yZSA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9jb3JlL2FycmFuZ2UvQXJyYW5nZVBpcGVEZWZcIiAvPlxudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgYW5vbjtcbiAgICAoZnVuY3Rpb24gKGFub24pIHtcbiAgICAgICAgdmFyIGFycmFuZ2U7XG4gICAgICAgIChmdW5jdGlvbiAoYXJyYW5nZSkge1xuICAgICAgICAgICAgdmFyIEFub255bW91c0FycmFuZ2VQaXBlRGVmID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgICAgICBfX2V4dGVuZHMoQW5vbnltb3VzQXJyYW5nZVBpcGVEZWYsIF9zdXBlcik7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gQW5vbnltb3VzQXJyYW5nZVBpcGVEZWYodXBkKSB7XG4gICAgICAgICAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlcGxhY2VUYXBpbignZG9PdmVycmlkZScsIGZ1bmN0aW9uIChpbnB1dCwgc3RhdGUsIG91dHB1dCwgdHJlZSwgZmluYWxSZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmluYWxTaXplID0gbmV3IG1pbmVydmEuU2l6ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5TaXplLmNvcHlUbyhzdGF0ZS5maW5hbFNpemUsIGZpbmFsU2l6ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsID0gdXBkLmFycmFuZ2VPdmVycmlkZShmaW5hbFNpemUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5TaXplLmNvcHlUbyh2YWwsIHN0YXRlLmFycmFuZ2VkU2l6ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBBbm9ueW1vdXNBcnJhbmdlUGlwZURlZjtcbiAgICAgICAgICAgIH0pKG1pbmVydmEuY29yZS5hcnJhbmdlLkFycmFuZ2VQaXBlRGVmKTtcbiAgICAgICAgICAgIGFycmFuZ2UuQW5vbnltb3VzQXJyYW5nZVBpcGVEZWYgPSBBbm9ueW1vdXNBcnJhbmdlUGlwZURlZjtcbiAgICAgICAgfSkoYXJyYW5nZSA9IGFub24uYXJyYW5nZSB8fCAoYW5vbi5hcnJhbmdlID0ge30pKTtcbiAgICB9KShhbm9uID0gbWluZXJ2YS5hbm9uIHx8IChtaW5lcnZhLmFub24gPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb3JlO1xuICAgIChmdW5jdGlvbiAoY29yZSkge1xuICAgICAgICB2YXIgbWVhc3VyZTtcbiAgICAgICAgKGZ1bmN0aW9uIChtZWFzdXJlKSB7XG4gICAgICAgICAgICB2YXIgTWVhc3VyZVBpcGVEZWYgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgICAgIF9fZXh0ZW5kcyhNZWFzdXJlUGlwZURlZiwgX3N1cGVyKTtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBNZWFzdXJlUGlwZURlZigpIHtcbiAgICAgICAgICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkVGFwaW4oJ3ZhbGlkYXRlJywgbWVhc3VyZS50YXBpbnMudmFsaWRhdGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkVGFwaW4oJ3ZhbGlkYXRlVmlzaWJpbGl0eScsIG1lYXN1cmUudGFwaW5zLnZhbGlkYXRlVmlzaWJpbGl0eSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRUYXBpbignYXBwbHlUZW1wbGF0ZScsIG1lYXN1cmUudGFwaW5zLmFwcGx5VGVtcGxhdGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkVGFwaW4oJ2NoZWNrTmVlZE1lYXN1cmUnLCBtZWFzdXJlLnRhcGlucy5jaGVja05lZWRNZWFzdXJlKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZFRhcGluKCdpbnZhbGlkYXRlRnV0dXJlJywgbWVhc3VyZS50YXBpbnMuaW52YWxpZGF0ZUZ1dHVyZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRUYXBpbigncHJlcGFyZU92ZXJyaWRlJywgbWVhc3VyZS50YXBpbnMucHJlcGFyZU92ZXJyaWRlKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZFRhcGluKCdkb092ZXJyaWRlJywgbWVhc3VyZS50YXBpbnMuZG9PdmVycmlkZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRUYXBpbignY29tcGxldGVPdmVycmlkZScsIG1lYXN1cmUudGFwaW5zLmNvbXBsZXRlT3ZlcnJpZGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkVGFwaW4oJ2ZpbmlzaERlc2lyZWQnLCBtZWFzdXJlLnRhcGlucy5maW5pc2hEZXNpcmVkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgTWVhc3VyZVBpcGVEZWYucHJvdG90eXBlLmNyZWF0ZVN0YXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlU2l6ZTogbmV3IG1pbmVydmEuU2l6ZSgpXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBNZWFzdXJlUGlwZURlZi5wcm90b3R5cGUuY3JlYXRlT3V0cHV0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNDb25zdHJhaW50OiBuZXcgbWluZXJ2YS5TaXplKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNpcmVkU2l6ZTogbmV3IG1pbmVydmEuU2l6ZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgaGlkZGVuRGVzaXJlOiBuZXcgbWluZXJ2YS5TaXplKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXJ0eUZsYWdzOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgdWlGbGFnczogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9yaWdEaXJ0eUZsYWdzOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ1VpRmxhZ3M6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdVcERpcnR5OiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3RG93bkRpcnR5OiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3VWlGbGFnczogMFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgTWVhc3VyZVBpcGVEZWYucHJvdG90eXBlLnByZXBhcmUgPSBmdW5jdGlvbiAoaW5wdXQsIHN0YXRlLCBvdXRwdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5TaXplLmNvcHlUbyhpbnB1dC5wcmV2aW91c0NvbnN0cmFpbnQsIG91dHB1dC5wcmV2aW91c0NvbnN0cmFpbnQpO1xuICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLlNpemUuY29weVRvKGlucHV0LmRlc2lyZWRTaXplLCBvdXRwdXQuZGVzaXJlZFNpemUpO1xuICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLlNpemUuY29weVRvKGlucHV0LmhpZGRlbkRlc2lyZSwgb3V0cHV0LmhpZGRlbkRlc2lyZSk7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dC5vcmlnRGlydHlGbGFncyA9IG91dHB1dC5kaXJ0eUZsYWdzID0gaW5wdXQuZGlydHlGbGFncztcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0Lm9yaWdVaUZsYWdzID0gb3V0cHV0LnVpRmxhZ3MgPSBpbnB1dC51aUZsYWdzO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgTWVhc3VyZVBpcGVEZWYucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24gKGlucHV0LCBzdGF0ZSwgb3V0cHV0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXdEaXJ0eSA9IChvdXRwdXQuZGlydHlGbGFncyB8IGlucHV0LmRpcnR5RmxhZ3MpICYgfm91dHB1dC5vcmlnRGlydHlGbGFncztcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0Lm5ld1VwRGlydHkgPSBuZXdEaXJ0eSAmIG1pbmVydmEuRGlydHlGbGFncy5VcERpcnR5U3RhdGU7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dC5uZXdEb3duRGlydHkgPSBuZXdEaXJ0eSAmIG1pbmVydmEuRGlydHlGbGFncy5Eb3duRGlydHlTdGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0Lm5ld1VpRmxhZ3MgPSAob3V0cHV0LnVpRmxhZ3MgfCBpbnB1dC51aUZsYWdzKSAmIH5vdXRwdXQub3JpZ1VpRmxhZ3M7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0LmRpcnR5RmxhZ3MgPSBvdXRwdXQuZGlydHlGbGFncztcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQudWlGbGFncyA9IG91dHB1dC51aUZsYWdzO1xuICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLlNpemUuY29weVRvKG91dHB1dC5wcmV2aW91c0NvbnN0cmFpbnQsIGlucHV0LnByZXZpb3VzQ29uc3RyYWludCk7XG4gICAgICAgICAgICAgICAgICAgIG1pbmVydmEuU2l6ZS5jb3B5VG8ob3V0cHV0LmhpZGRlbkRlc2lyZSwgaW5wdXQuaGlkZGVuRGVzaXJlKTtcbiAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5TaXplLmNvcHlUbyhvdXRwdXQuZGVzaXJlZFNpemUsIGlucHV0LmRlc2lyZWRTaXplKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybiBNZWFzdXJlUGlwZURlZjtcbiAgICAgICAgICAgIH0pKG1pbmVydmEucGlwZS5UcmlQaXBlRGVmKTtcbiAgICAgICAgICAgIG1lYXN1cmUuTWVhc3VyZVBpcGVEZWYgPSBNZWFzdXJlUGlwZURlZjtcbiAgICAgICAgfSkobWVhc3VyZSA9IGNvcmUubWVhc3VyZSB8fCAoY29yZS5tZWFzdXJlID0ge30pKTtcbiAgICB9KShjb3JlID0gbWluZXJ2YS5jb3JlIHx8IChtaW5lcnZhLmNvcmUgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vY29yZS9tZWFzdXJlL01lYXN1cmVQaXBlRGVmXCIgLz5cbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGFub247XG4gICAgKGZ1bmN0aW9uIChhbm9uKSB7XG4gICAgICAgIHZhciBtZWFzdXJlO1xuICAgICAgICAoZnVuY3Rpb24gKG1lYXN1cmUpIHtcbiAgICAgICAgICAgIHZhciBBbm9ueW1vdXNNZWFzdXJlUGlwZURlZiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICAgICAgX19leHRlbmRzKEFub255bW91c01lYXN1cmVQaXBlRGVmLCBfc3VwZXIpO1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIEFub255bW91c01lYXN1cmVQaXBlRGVmKHVwZCkge1xuICAgICAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXBsYWNlVGFwaW4oJ2RvT3ZlcnJpZGUnLCBmdW5jdGlvbiAoaW5wdXQsIHN0YXRlLCBvdXRwdXQsIHRyZWUsIGF2YWlsYWJsZVNpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhdmFpbGFibGVTaXplID0gbmV3IG1pbmVydmEuU2l6ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5TaXplLmNvcHlUbyhzdGF0ZS5hdmFpbGFibGVTaXplLCBhdmFpbGFibGVTaXplKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWwgPSB1cGQubWVhc3VyZU92ZXJyaWRlKGF2YWlsYWJsZVNpemUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5TaXplLmNvcHlUbyh2YWwsIG91dHB1dC5kZXNpcmVkU2l6ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBBbm9ueW1vdXNNZWFzdXJlUGlwZURlZjtcbiAgICAgICAgICAgIH0pKG1pbmVydmEuY29yZS5tZWFzdXJlLk1lYXN1cmVQaXBlRGVmKTtcbiAgICAgICAgICAgIG1lYXN1cmUuQW5vbnltb3VzTWVhc3VyZVBpcGVEZWYgPSBBbm9ueW1vdXNNZWFzdXJlUGlwZURlZjtcbiAgICAgICAgfSkobWVhc3VyZSA9IGFub24ubWVhc3VyZSB8fCAoYW5vbi5tZWFzdXJlID0ge30pKTtcbiAgICB9KShhbm9uID0gbWluZXJ2YS5hbm9uIHx8IChtaW5lcnZhLmFub24gPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vY29yZS9VcGRhdGVyXCIgLz5cbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvbnRyb2xzO1xuICAgIChmdW5jdGlvbiAoY29udHJvbHMpIHtcbiAgICAgICAgdmFyIGJvcmRlcjtcbiAgICAgICAgKGZ1bmN0aW9uIChib3JkZXIpIHtcbiAgICAgICAgICAgIHZhciBCb3JkZXJVcGRhdGVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgICAgICBfX2V4dGVuZHMoQm9yZGVyVXBkYXRlciwgX3N1cGVyKTtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBCb3JkZXJVcGRhdGVyKCkge1xuICAgICAgICAgICAgICAgICAgICBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgQm9yZGVyVXBkYXRlci5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRUcmVlKG5ldyBib3JkZXIuQm9yZGVyVXBkYXRlclRyZWUoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRNZWFzdXJlUGlwZShtaW5lcnZhLnNpbmdsZXRvbihib3JkZXIubWVhc3VyZS5Cb3JkZXJNZWFzdXJlUGlwZURlZikpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0QXJyYW5nZVBpcGUobWluZXJ2YS5zaW5nbGV0b24oYm9yZGVyLmFycmFuZ2UuQm9yZGVyQXJyYW5nZVBpcGVEZWYpKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFJlbmRlclBpcGUobWluZXJ2YS5zaW5nbGV0b24obWluZXJ2YS5jb3JlLnJlbmRlci5SZW5kZXJDb250ZXh0Lmhhc0ZpbGxSdWxlID8gYm9yZGVyLnJlbmRlci5Cb3JkZXJSZW5kZXJQaXBlRGVmIDogYm9yZGVyLnJlbmRlci5TaGltQm9yZGVyUmVuZGVyUGlwZURlZikpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0SGl0VGVzdFBpcGUobWluZXJ2YS5zaW5nbGV0b24oYm9yZGVyLmhpdHRlc3QuQm9yZGVySGl0VGVzdFBpcGVEZWYpKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFzc2V0cyA9IHRoaXMuYXNzZXRzO1xuICAgICAgICAgICAgICAgICAgICBhc3NldHMucGFkZGluZyA9IG5ldyBtaW5lcnZhLlRoaWNrbmVzcygpO1xuICAgICAgICAgICAgICAgICAgICBhc3NldHMuYm9yZGVyVGhpY2tuZXNzID0gbmV3IG1pbmVydmEuVGhpY2tuZXNzKCk7XG4gICAgICAgICAgICAgICAgICAgIGFzc2V0cy5jb3JuZXJSYWRpdXMgPSBuZXcgbWluZXJ2YS5Db3JuZXJSYWRpdXMoKTtcbiAgICAgICAgICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5pbml0LmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gQm9yZGVyVXBkYXRlcjtcbiAgICAgICAgICAgIH0pKG1pbmVydmEuY29yZS5VcGRhdGVyKTtcbiAgICAgICAgICAgIGJvcmRlci5Cb3JkZXJVcGRhdGVyID0gQm9yZGVyVXBkYXRlcjtcbiAgICAgICAgfSkoYm9yZGVyID0gY29udHJvbHMuYm9yZGVyIHx8IChjb250cm9scy5ib3JkZXIgPSB7fSkpO1xuICAgIH0pKGNvbnRyb2xzID0gbWluZXJ2YS5jb250cm9scyB8fCAobWluZXJ2YS5jb250cm9scyA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9jb3JlL1VwZGF0ZXJUcmVlXCIgLz5cbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvbnRyb2xzO1xuICAgIChmdW5jdGlvbiAoY29udHJvbHMpIHtcbiAgICAgICAgdmFyIGJvcmRlcjtcbiAgICAgICAgKGZ1bmN0aW9uIChib3JkZXIpIHtcbiAgICAgICAgICAgIHZhciBCb3JkZXJVcGRhdGVyVHJlZSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICAgICAgX19leHRlbmRzKEJvcmRlclVwZGF0ZXJUcmVlLCBfc3VwZXIpO1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIEJvcmRlclVwZGF0ZXJUcmVlKCkge1xuICAgICAgICAgICAgICAgICAgICBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0xheW91dENvbnRhaW5lciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNDb250YWluZXIgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBCb3JkZXJVcGRhdGVyVHJlZS5wcm90b3R5cGUud2FsayA9IGZ1bmN0aW9uIChkaXJlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZpc2l0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0ZXA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnQgPSAhdmlzaXRlZCA/IF90aGlzLnN1YnRyZWUgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlzaXRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudCAhPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIEJvcmRlclVwZGF0ZXJUcmVlO1xuICAgICAgICAgICAgfSkobWluZXJ2YS5jb3JlLlVwZGF0ZXJUcmVlKTtcbiAgICAgICAgICAgIGJvcmRlci5Cb3JkZXJVcGRhdGVyVHJlZSA9IEJvcmRlclVwZGF0ZXJUcmVlO1xuICAgICAgICB9KShib3JkZXIgPSBjb250cm9scy5ib3JkZXIgfHwgKGNvbnRyb2xzLmJvcmRlciA9IHt9KSk7XG4gICAgfSkoY29udHJvbHMgPSBtaW5lcnZhLmNvbnRyb2xzIHx8IChtaW5lcnZhLmNvbnRyb2xzID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29udHJvbHM7XG4gICAgKGZ1bmN0aW9uIChjb250cm9scykge1xuICAgICAgICB2YXIgcGFuZWw7XG4gICAgICAgIChmdW5jdGlvbiAocGFuZWwpIHtcbiAgICAgICAgICAgIHZhciBQYW5lbFVwZGF0ZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgICAgIF9fZXh0ZW5kcyhQYW5lbFVwZGF0ZXIsIF9zdXBlcik7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gUGFuZWxVcGRhdGVyKCkge1xuICAgICAgICAgICAgICAgICAgICBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgUGFuZWxVcGRhdGVyLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYXNzZXRzID0gdGhpcy5hc3NldHM7XG4gICAgICAgICAgICAgICAgICAgIGFzc2V0cy5iYWNrZ3JvdW5kID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRUcmVlKG5ldyBwYW5lbC5QYW5lbFVwZGF0ZXJUcmVlKCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0TWVhc3VyZVBpcGUobWluZXJ2YS5zaW5nbGV0b24ocGFuZWwubWVhc3VyZS5QYW5lbE1lYXN1cmVQaXBlRGVmKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRBcnJhbmdlUGlwZShtaW5lcnZhLnNpbmdsZXRvbihwYW5lbC5hcnJhbmdlLlBhbmVsQXJyYW5nZVBpcGVEZWYpKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFByb2Nlc3NVcFBpcGUobWluZXJ2YS5zaW5nbGV0b24ocGFuZWwucHJvY2Vzc3VwLlBhbmVsUHJvY2Vzc1VwUGlwZURlZikpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0UmVuZGVyUGlwZShtaW5lcnZhLnNpbmdsZXRvbihwYW5lbC5yZW5kZXIuUGFuZWxSZW5kZXJQaXBlRGVmKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRIaXRUZXN0UGlwZShtaW5lcnZhLnNpbmdsZXRvbihwYW5lbC5oaXR0ZXN0LlBhbmVsSGl0VGVzdFBpcGVEZWYpKTtcbiAgICAgICAgICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5pbml0LmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBQYW5lbFVwZGF0ZXIucHJvdG90eXBlLnNldENoaWxkcmVuID0gZnVuY3Rpb24gKGNoaWxkcmVuKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudHJlZS5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybiBQYW5lbFVwZGF0ZXI7XG4gICAgICAgICAgICB9KShtaW5lcnZhLmNvcmUuVXBkYXRlcik7XG4gICAgICAgICAgICBwYW5lbC5QYW5lbFVwZGF0ZXIgPSBQYW5lbFVwZGF0ZXI7XG4gICAgICAgICAgICB2YXIgcmVhY3RUbztcbiAgICAgICAgICAgIChmdW5jdGlvbiAocmVhY3RUbykge1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHpJbmRleCh1cGRhdGVyLCBvbGRWYWx1ZSwgbmV3VmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZwID0gdXBkYXRlci50cmVlLnZpc3VhbFBhcmVudDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZwKVxuICAgICAgICAgICAgICAgICAgICAgICAgdnAudHJlZS56U29ydGVkID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVhY3RUby56SW5kZXggPSB6SW5kZXg7XG4gICAgICAgICAgICB9KShyZWFjdFRvID0gcGFuZWwucmVhY3RUbyB8fCAocGFuZWwucmVhY3RUbyA9IHt9KSk7XG4gICAgICAgIH0pKHBhbmVsID0gY29udHJvbHMucGFuZWwgfHwgKGNvbnRyb2xzLnBhbmVsID0ge30pKTtcbiAgICB9KShjb250cm9scyA9IG1pbmVydmEuY29udHJvbHMgfHwgKG1pbmVydmEuY29udHJvbHMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vcGFuZWwvUGFuZWxVcGRhdGVyXCIgLz5cbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvbnRyb2xzO1xuICAgIChmdW5jdGlvbiAoY29udHJvbHMpIHtcbiAgICAgICAgdmFyIGNhbnZhcztcbiAgICAgICAgKGZ1bmN0aW9uIChjYW52YXMpIHtcbiAgICAgICAgICAgIHZhciBDYW52YXNVcGRhdGVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgICAgICBfX2V4dGVuZHMoQ2FudmFzVXBkYXRlciwgX3N1cGVyKTtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBDYW52YXNVcGRhdGVyKCkge1xuICAgICAgICAgICAgICAgICAgICBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgQ2FudmFzVXBkYXRlci5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRNZWFzdXJlUGlwZShtaW5lcnZhLnNpbmdsZXRvbihjYW52YXMubWVhc3VyZS5DYW52YXNNZWFzdXJlUGlwZURlZikpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0QXJyYW5nZVBpcGUobWluZXJ2YS5zaW5nbGV0b24oY2FudmFzLmFycmFuZ2UuQ2FudmFzQXJyYW5nZVBpcGVEZWYpKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFByb2Nlc3NEb3duUGlwZShtaW5lcnZhLnNpbmdsZXRvbihjYW52YXMucHJvY2Vzc2Rvd24uQ2FudmFzUHJvY2Vzc0Rvd25QaXBlRGVmKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRQcm9jZXNzVXBQaXBlKG1pbmVydmEuc2luZ2xldG9uKGNhbnZhcy5wcm9jZXNzdXAuQ2FudmFzUHJvY2Vzc1VwUGlwZURlZikpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYXNzZXRzID0gdGhpcy5hc3NldHM7XG4gICAgICAgICAgICAgICAgICAgIGFzc2V0cy5icmVha0xheW91dENsaXAgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLmluaXQuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybiBDYW52YXNVcGRhdGVyO1xuICAgICAgICAgICAgfSkoY29udHJvbHMucGFuZWwuUGFuZWxVcGRhdGVyKTtcbiAgICAgICAgICAgIGNhbnZhcy5DYW52YXNVcGRhdGVyID0gQ2FudmFzVXBkYXRlcjtcbiAgICAgICAgICAgIHZhciByZWFjdFRvO1xuICAgICAgICAgICAgKGZ1bmN0aW9uIChyZWFjdFRvKSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gbGVmdCh1cGRhdGVyLCBvbGRWYWx1ZSwgbmV3VmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaW52YWxpZGF0ZVRvcExlZnQodXBkYXRlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlYWN0VG8ubGVmdCA9IGxlZnQ7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gdG9wKHVwZGF0ZXIsIG9sZFZhbHVlLCBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBpbnZhbGlkYXRlVG9wTGVmdCh1cGRhdGVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVhY3RUby50b3AgPSB0b3A7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gaW52YWxpZGF0ZVRvcExlZnQodXBkYXRlcikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdnAgPSB1cGRhdGVyLnRyZWUudmlzdWFsUGFyZW50O1xuICAgICAgICAgICAgICAgICAgICBpZiAodXBkYXRlciBpbnN0YW5jZW9mIENhbnZhc1VwZGF0ZXIgJiYgIXZwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVyLmFzc2V0cy5kaXJ0eUZsYWdzIHw9IG1pbmVydmEuRGlydHlGbGFncy5Mb2NhbFRyYW5zZm9ybTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbmVydmEuY29yZS5VcGRhdGVyLiQkYWRkRG93bkRpcnR5KHVwZGF0ZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlci5pbnZhbGlkYXRlQXJyYW5nZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICghKHZwIGluc3RhbmNlb2YgQ2FudmFzVXBkYXRlcikpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIHZhciBscyA9IHVwZGF0ZXIuYXNzZXRzLmxheW91dFNsb3Q7XG4gICAgICAgICAgICAgICAgICAgIG1pbmVydmEuU2l6ZS5jb3B5VG8odXBkYXRlci5hc3NldHMuZGVzaXJlZFNpemUsIGxzKTtcbiAgICAgICAgICAgICAgICAgICAgbHMueCA9IHVwZGF0ZXIuZ2V0QXR0YWNoZWRWYWx1ZShcIkNhbnZhcy5MZWZ0XCIpIHx8IDA7XG4gICAgICAgICAgICAgICAgICAgIGxzLnkgPSB1cGRhdGVyLmdldEF0dGFjaGVkVmFsdWUoXCJDYW52YXMuVG9wXCIpIHx8IDA7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1cGRhdGVyLmFzc2V0cy51c2VMYXlvdXRSb3VuZGluZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbHMueCA9IE1hdGgucm91bmQobHMueCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBscy55ID0gTWF0aC5yb3VuZChscy55KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxzLndpZHRoID0gTWF0aC5yb3VuZChscy53aWR0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBscy5oZWlnaHQgPSBNYXRoLnJvdW5kKGxzLmhlaWdodCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlci5pbnZhbGlkYXRlQXJyYW5nZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKHJlYWN0VG8gPSBjYW52YXMucmVhY3RUbyB8fCAoY2FudmFzLnJlYWN0VG8gPSB7fSkpO1xuICAgICAgICB9KShjYW52YXMgPSBjb250cm9scy5jYW52YXMgfHwgKGNvbnRyb2xzLmNhbnZhcyA9IHt9KSk7XG4gICAgfSkoY29udHJvbHMgPSBtaW5lcnZhLmNvbnRyb2xzIHx8IChtaW5lcnZhLmNvbnRyb2xzID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29udHJvbHM7XG4gICAgKGZ1bmN0aW9uIChjb250cm9scykge1xuICAgICAgICB2YXIgY29udHJvbDtcbiAgICAgICAgKGZ1bmN0aW9uIChjb250cm9sKSB7XG4gICAgICAgICAgICB2YXIgQ29udHJvbFVwZGF0ZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgICAgIF9fZXh0ZW5kcyhDb250cm9sVXBkYXRlciwgX3N1cGVyKTtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBDb250cm9sVXBkYXRlcigpIHtcbiAgICAgICAgICAgICAgICAgICAgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIENvbnRyb2xVcGRhdGVyLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFRyZWUobmV3IGNvbnRyb2wuQ29udHJvbFVwZGF0ZXJUcmVlKCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0SGl0VGVzdFBpcGUobWluZXJ2YS5zaW5nbGV0b24oY29udHJvbC5oaXR0ZXN0LkNvbnRyb2xIaXRUZXN0UGlwZURlZikpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFzc2V0cy5pc0VuYWJsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLmluaXQuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybiBDb250cm9sVXBkYXRlcjtcbiAgICAgICAgICAgIH0pKG1pbmVydmEuY29yZS5VcGRhdGVyKTtcbiAgICAgICAgICAgIGNvbnRyb2wuQ29udHJvbFVwZGF0ZXIgPSBDb250cm9sVXBkYXRlcjtcbiAgICAgICAgfSkoY29udHJvbCA9IGNvbnRyb2xzLmNvbnRyb2wgfHwgKGNvbnRyb2xzLmNvbnRyb2wgPSB7fSkpO1xuICAgIH0pKGNvbnRyb2xzID0gbWluZXJ2YS5jb250cm9scyB8fCAobWluZXJ2YS5jb250cm9scyA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvbnRyb2xzO1xuICAgIChmdW5jdGlvbiAoY29udHJvbHMpIHtcbiAgICAgICAgdmFyIGNvbnRyb2w7XG4gICAgICAgIChmdW5jdGlvbiAoY29udHJvbCkge1xuICAgICAgICAgICAgdmFyIENvbnRyb2xVcGRhdGVyVHJlZSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICAgICAgX19leHRlbmRzKENvbnRyb2xVcGRhdGVyVHJlZSwgX3N1cGVyKTtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBDb250cm9sVXBkYXRlclRyZWUoKSB7XG4gICAgICAgICAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzQ29udGFpbmVyID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0xheW91dENvbnRhaW5lciA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBDb250cm9sVXBkYXRlclRyZWU7XG4gICAgICAgICAgICB9KShtaW5lcnZhLmNvcmUuVXBkYXRlclRyZWUpO1xuICAgICAgICAgICAgY29udHJvbC5Db250cm9sVXBkYXRlclRyZWUgPSBDb250cm9sVXBkYXRlclRyZWU7XG4gICAgICAgIH0pKGNvbnRyb2wgPSBjb250cm9scy5jb250cm9sIHx8IChjb250cm9scy5jb250cm9sID0ge30pKTtcbiAgICB9KShjb250cm9scyA9IG1pbmVydmEuY29udHJvbHMgfHwgKG1pbmVydmEuY29udHJvbHMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb250cm9scztcbiAgICAoZnVuY3Rpb24gKGNvbnRyb2xzKSB7XG4gICAgICAgIHZhciBncmlkO1xuICAgICAgICAoZnVuY3Rpb24gKGdyaWQpIHtcbiAgICAgICAgICAgIChmdW5jdGlvbiAoR3JpZFVuaXRUeXBlKSB7XG4gICAgICAgICAgICAgICAgR3JpZFVuaXRUeXBlW0dyaWRVbml0VHlwZVtcIkF1dG9cIl0gPSAwXSA9IFwiQXV0b1wiO1xuICAgICAgICAgICAgICAgIEdyaWRVbml0VHlwZVtHcmlkVW5pdFR5cGVbXCJQaXhlbFwiXSA9IDFdID0gXCJQaXhlbFwiO1xuICAgICAgICAgICAgICAgIEdyaWRVbml0VHlwZVtHcmlkVW5pdFR5cGVbXCJTdGFyXCJdID0gMl0gPSBcIlN0YXJcIjtcbiAgICAgICAgICAgIH0pKGdyaWQuR3JpZFVuaXRUeXBlIHx8IChncmlkLkdyaWRVbml0VHlwZSA9IHt9KSk7XG4gICAgICAgICAgICB2YXIgR3JpZFVuaXRUeXBlID0gZ3JpZC5HcmlkVW5pdFR5cGU7XG4gICAgICAgIH0pKGdyaWQgPSBjb250cm9scy5ncmlkIHx8IChjb250cm9scy5ncmlkID0ge30pKTtcbiAgICB9KShjb250cm9scyA9IG1pbmVydmEuY29udHJvbHMgfHwgKG1pbmVydmEuY29udHJvbHMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb250cm9scztcbiAgICAoZnVuY3Rpb24gKGNvbnRyb2xzKSB7XG4gICAgICAgIHZhciBncmlkO1xuICAgICAgICAoZnVuY3Rpb24gKGdyaWQpIHtcbiAgICAgICAgICAgIHZhciBHcmlkVXBkYXRlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICAgICAgX19leHRlbmRzKEdyaWRVcGRhdGVyLCBfc3VwZXIpO1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIEdyaWRVcGRhdGVyKCkge1xuICAgICAgICAgICAgICAgICAgICBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgR3JpZFVwZGF0ZXIucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0TWVhc3VyZVBpcGUobWluZXJ2YS5zaW5nbGV0b24oZ3JpZC5tZWFzdXJlLkdyaWRNZWFzdXJlUGlwZURlZikpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0QXJyYW5nZVBpcGUobWluZXJ2YS5zaW5nbGV0b24oZ3JpZC5hcnJhbmdlLkdyaWRBcnJhbmdlUGlwZURlZikpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0UHJvY2Vzc1VwUGlwZShtaW5lcnZhLnNpbmdsZXRvbihncmlkLnByb2Nlc3N1cC5HcmlkUHJvY2Vzc1VwUGlwZURlZikpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0UmVuZGVyUGlwZShtaW5lcnZhLnNpbmdsZXRvbihncmlkLnJlbmRlci5HcmlkUmVuZGVyUGlwZURlZikpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYXNzZXRzID0gdGhpcy5hc3NldHM7XG4gICAgICAgICAgICAgICAgICAgIGFzc2V0cy5zaG93R3JpZExpbmVzID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGFzc2V0cy5jb2x1bW5EZWZpbml0aW9ucyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBhc3NldHMucm93RGVmaW5pdGlvbnMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXRzLmdyaWRTdGF0ZSA9IGdyaWQuY3JlYXRlR3JpZFN0YXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuaW5pdC5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIEdyaWRVcGRhdGVyO1xuICAgICAgICAgICAgfSkoY29udHJvbHMucGFuZWwuUGFuZWxVcGRhdGVyKTtcbiAgICAgICAgICAgIGdyaWQuR3JpZFVwZGF0ZXIgPSBHcmlkVXBkYXRlcjtcbiAgICAgICAgICAgIHZhciByZWFjdFRvO1xuICAgICAgICAgICAgKGZ1bmN0aW9uIChyZWFjdFRvKSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gaW52YWxpZGF0ZUNlbGwodXBkYXRlcikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdnAgPSB1cGRhdGVyLnRyZWUudmlzdWFsUGFyZW50O1xuICAgICAgICAgICAgICAgICAgICBpZiAodnAgaW5zdGFuY2VvZiBHcmlkVXBkYXRlcilcbiAgICAgICAgICAgICAgICAgICAgICAgIHZwLmludmFsaWRhdGVNZWFzdXJlKCk7XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZXIuaW52YWxpZGF0ZU1lYXN1cmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gc2hvd0dyaWRMaW5lcyh1cGRhdGVyLCBvdiwgbnYpIHtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlci5pbnZhbGlkYXRlTWVhc3VyZSgpO1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVyLmludmFsaWRhdGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVhY3RUby5zaG93R3JpZExpbmVzID0gc2hvd0dyaWRMaW5lcztcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBjb2x1bW4odXBkYXRlciwgb3YsIG52KSB7XG4gICAgICAgICAgICAgICAgICAgIGludmFsaWRhdGVDZWxsKHVwZGF0ZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZWFjdFRvLmNvbHVtbiA9IGNvbHVtbjtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBjb2x1bW5TcGFuKHVwZGF0ZXIsIG92LCBudikge1xuICAgICAgICAgICAgICAgICAgICBpbnZhbGlkYXRlQ2VsbCh1cGRhdGVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVhY3RUby5jb2x1bW5TcGFuID0gY29sdW1uU3BhbjtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiByb3codXBkYXRlciwgb3YsIG52KSB7XG4gICAgICAgICAgICAgICAgICAgIGludmFsaWRhdGVDZWxsKHVwZGF0ZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZWFjdFRvLnJvdyA9IHJvdztcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiByb3dTcGFuKHVwZGF0ZXIsIG92LCBudikge1xuICAgICAgICAgICAgICAgICAgICBpbnZhbGlkYXRlQ2VsbCh1cGRhdGVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVhY3RUby5yb3dTcGFuID0gcm93U3BhbjtcbiAgICAgICAgICAgIH0pKHJlYWN0VG8gPSBncmlkLnJlYWN0VG8gfHwgKGdyaWQucmVhY3RUbyA9IHt9KSk7XG4gICAgICAgIH0pKGdyaWQgPSBjb250cm9scy5ncmlkIHx8IChjb250cm9scy5ncmlkID0ge30pKTtcbiAgICB9KShjb250cm9scyA9IG1pbmVydmEuY29udHJvbHMgfHwgKG1pbmVydmEuY29udHJvbHMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb250cm9scztcbiAgICAoZnVuY3Rpb24gKGNvbnRyb2xzKSB7XG4gICAgICAgIHZhciBncmlkO1xuICAgICAgICAoZnVuY3Rpb24gKGdyaWQpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGNyZWF0ZUdyaWRTdGF0ZSgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICByb3dNYXRyaXg6IFtdLFxuICAgICAgICAgICAgICAgICAgICBjb2xNYXRyaXg6IFtdXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGdyaWQuY3JlYXRlR3JpZFN0YXRlID0gY3JlYXRlR3JpZFN0YXRlO1xuICAgICAgICB9KShncmlkID0gY29udHJvbHMuZ3JpZCB8fCAoY29udHJvbHMuZ3JpZCA9IHt9KSk7XG4gICAgfSkoY29udHJvbHMgPSBtaW5lcnZhLmNvbnRyb2xzIHx8IChtaW5lcnZhLmNvbnRyb2xzID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29udHJvbHM7XG4gICAgKGZ1bmN0aW9uIChjb250cm9scykge1xuICAgICAgICB2YXIgZ3JpZDtcbiAgICAgICAgKGZ1bmN0aW9uIChncmlkKSB7XG4gICAgICAgICAgICB2YXIgU2VnbWVudCA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gU2VnbWVudCgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kZXNpcmVkID0gMC4wO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9mZmVyZWQgPSAwLjA7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub3JpZ2luYWwgPSAwLjA7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWluID0gMC4wO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1heCA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFycyA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudHlwZSA9IGdyaWQuR3JpZFVuaXRUeXBlLlBpeGVsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBTZWdtZW50LnByb3RvdHlwZS5jbGFtcCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPCB0aGlzLm1pbilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1pbjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlID4gdGhpcy5tYXgpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tYXg7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIFNlZ21lbnQuaW5pdCA9IGZ1bmN0aW9uIChzZWdtZW50LCBvZmZlcmVkLCBtaW4sIG1heCwgdW5pdFR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VnbWVudC5kZXNpcmVkID0gMC4wO1xuICAgICAgICAgICAgICAgICAgICBzZWdtZW50LnN0YXJzID0gMDtcbiAgICAgICAgICAgICAgICAgICAgc2VnbWVudC5vZmZlcmVkID0gb2ZmZXJlZCB8fCAwLjA7XG4gICAgICAgICAgICAgICAgICAgIHNlZ21lbnQubWluID0gbWluIHx8IDAuMDtcbiAgICAgICAgICAgICAgICAgICAgc2VnbWVudC5tYXggPSBtYXggIT0gbnVsbCA/IG1heCA6IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICAgICAgICAgICAgICAgICAgc2VnbWVudC50eXBlID0gdW5pdFR5cGUgIT0gbnVsbCA/IHVuaXRUeXBlIDogZ3JpZC5HcmlkVW5pdFR5cGUuUGl4ZWw7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWdtZW50Lm9mZmVyZWQgPCBtaW4pXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWdtZW50Lm9mZmVyZWQgPSBtaW47XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNlZ21lbnQub2ZmZXJlZCA+IG1heClcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlZ21lbnQub2ZmZXJlZCA9IG1heDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlZ21lbnQ7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gU2VnbWVudDtcbiAgICAgICAgICAgIH0pKCk7XG4gICAgICAgICAgICBncmlkLlNlZ21lbnQgPSBTZWdtZW50O1xuICAgICAgICB9KShncmlkID0gY29udHJvbHMuZ3JpZCB8fCAoY29udHJvbHMuZ3JpZCA9IHt9KSk7XG4gICAgfSkoY29udHJvbHMgPSBtaW5lcnZhLmNvbnRyb2xzIHx8IChtaW5lcnZhLmNvbnRyb2xzID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29udHJvbHM7XG4gICAgKGZ1bmN0aW9uIChjb250cm9scykge1xuICAgICAgICB2YXIgaW1hZ2U7XG4gICAgICAgIChmdW5jdGlvbiAoaW1hZ2UpIHtcbiAgICAgICAgICAgIHZhciBJbWFnZVVwZGF0ZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgICAgIF9fZXh0ZW5kcyhJbWFnZVVwZGF0ZXIsIF9zdXBlcik7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gSW1hZ2VVcGRhdGVyKCkge1xuICAgICAgICAgICAgICAgICAgICBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgSW1hZ2VVcGRhdGVyLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldE1lYXN1cmVQaXBlKG1pbmVydmEuc2luZ2xldG9uKGltYWdlLm1lYXN1cmUuSW1hZ2VNZWFzdXJlUGlwZURlZikpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0QXJyYW5nZVBpcGUobWluZXJ2YS5zaW5nbGV0b24oaW1hZ2UuYXJyYW5nZS5JbWFnZUFycmFuZ2VQaXBlRGVmKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRQcm9jZXNzRG93blBpcGUobWluZXJ2YS5zaW5nbGV0b24oaW1hZ2UucHJvY2Vzc2Rvd24uSW1hZ2VQcm9jZXNzRG93blBpcGVEZWYpKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFJlbmRlclBpcGUobWluZXJ2YS5zaW5nbGV0b24oaW1hZ2UucmVuZGVyLkltYWdlUmVuZGVyUGlwZURlZikpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0SGl0VGVzdFBpcGUobWluZXJ2YS5zaW5nbGV0b24oaW1hZ2UuaGl0dGVzdC5JbWFnZUhpdFRlc3RQaXBlRGVmKSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhc3NldHMgPSB0aGlzLmFzc2V0cztcbiAgICAgICAgICAgICAgICAgICAgYXNzZXRzLnNvdXJjZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIGFzc2V0cy5zdHJldGNoID0gbWluZXJ2YS5TdHJldGNoLlVuaWZvcm07XG4gICAgICAgICAgICAgICAgICAgIGFzc2V0cy5vdmVybGFwID0gbWluZXJ2YS5SZWN0T3ZlcmxhcC5JbjtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXRzLmltZ1hmb3JtID0gbWluZXJ2YS5tYXQzLmlkZW50aXR5KCk7XG4gICAgICAgICAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuaW5pdC5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgSW1hZ2VVcGRhdGVyLnByb3RvdHlwZS5pbnZhbGlkYXRlTWV0cmljcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hc3NldHMuZGlydHlGbGFncyB8PSBtaW5lcnZhLkRpcnR5RmxhZ3MuSW1hZ2VNZXRyaWNzO1xuICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLmNvcmUuVXBkYXRlci4kJGFkZERvd25EaXJ0eSh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gSW1hZ2VVcGRhdGVyO1xuICAgICAgICAgICAgfSkobWluZXJ2YS5jb3JlLlVwZGF0ZXIpO1xuICAgICAgICAgICAgaW1hZ2UuSW1hZ2VVcGRhdGVyID0gSW1hZ2VVcGRhdGVyO1xuICAgICAgICB9KShpbWFnZSA9IGNvbnRyb2xzLmltYWdlIHx8IChjb250cm9scy5pbWFnZSA9IHt9KSk7XG4gICAgfSkoY29udHJvbHMgPSBtaW5lcnZhLmNvbnRyb2xzIHx8IChtaW5lcnZhLmNvbnRyb2xzID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29udHJvbHM7XG4gICAgKGZ1bmN0aW9uIChjb250cm9scykge1xuICAgICAgICB2YXIgb3ZlcmxheTtcbiAgICAgICAgKGZ1bmN0aW9uIChvdmVybGF5KSB7XG4gICAgICAgICAgICB2YXIgT3ZlcmxheVVwZGF0ZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgICAgIF9fZXh0ZW5kcyhPdmVybGF5VXBkYXRlciwgX3N1cGVyKTtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBPdmVybGF5VXBkYXRlcigpIHtcbiAgICAgICAgICAgICAgICAgICAgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIE92ZXJsYXlVcGRhdGVyLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFRyZWUobmV3IG92ZXJsYXkuT3ZlcmxheVVwZGF0ZXJUcmVlKCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0UHJvY2Vzc1VwUGlwZShtaW5lcnZhLnNpbmdsZXRvbihvdmVybGF5LnByb2Nlc3N1cC5PdmVybGF5UHJvY2Vzc1VwUGlwZURlZikpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0SGl0VGVzdFBpcGUobWluZXJ2YS5zaW5nbGV0b24ob3ZlcmxheS5oaXR0ZXN0Lk92ZXJsYXlIaXRUZXN0UGlwZURlZikpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYXNzZXRzID0gdGhpcy5hc3NldHM7XG4gICAgICAgICAgICAgICAgICAgIGFzc2V0cy5pc1Zpc2libGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXRzLmlzT3BlbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLmluaXQuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIE92ZXJsYXlVcGRhdGVyLnByb3RvdHlwZS5zZXRJbml0aWF0b3IgPSBmdW5jdGlvbiAoaW5pdGlhdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudHJlZS5pbml0aWF0b3JTdXJmYWNlID0gaW5pdGlhdG9yLnRyZWUuc3VyZmFjZTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIE92ZXJsYXlVcGRhdGVyLnByb3RvdHlwZS5zZXRMYXllciA9IGZ1bmN0aW9uIChsYXllcikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50cmVlLmxheWVyID0gbGF5ZXI7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmFzc2V0cy5pc09wZW4pXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3coKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIE92ZXJsYXlVcGRhdGVyLnByb3RvdHlwZS5oaWRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbGF5ZXIgPSB0aGlzLnRyZWUubGF5ZXI7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5hc3NldHMuaXNWaXNpYmxlIHx8ICFsYXllcilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hc3NldHMuaXNWaXNpYmxlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdXJmYWNlID0gdGhpcy50cmVlLmluaXRpYXRvclN1cmZhY2U7XG4gICAgICAgICAgICAgICAgICAgIGlmICghc3VyZmFjZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgc3VyZmFjZS5kZXRhY2hMYXllcihsYXllcik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgT3ZlcmxheVVwZGF0ZXIucHJvdG90eXBlLnNob3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsYXllciA9IHRoaXMudHJlZS5sYXllcjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYXNzZXRzLmlzVmlzaWJsZSB8fCAhbGF5ZXIpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXNzZXRzLmlzVmlzaWJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdXJmYWNlID0gdGhpcy50cmVlLmluaXRpYXRvclN1cmZhY2U7XG4gICAgICAgICAgICAgICAgICAgIGlmICghc3VyZmFjZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgc3VyZmFjZS5hdHRhY2hMYXllcihsYXllcik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIE92ZXJsYXlVcGRhdGVyO1xuICAgICAgICAgICAgfSkobWluZXJ2YS5jb3JlLlVwZGF0ZXIpO1xuICAgICAgICAgICAgb3ZlcmxheS5PdmVybGF5VXBkYXRlciA9IE92ZXJsYXlVcGRhdGVyO1xuICAgICAgICAgICAgdmFyIHJlYWN0VG87XG4gICAgICAgICAgICAoZnVuY3Rpb24gKHJlYWN0VG8pIHtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBpc09wZW4odXBkYXRlciwgb2xkVmFsdWUsIG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIChuZXdWYWx1ZSA9PT0gdHJ1ZSkgPyB1cGRhdGVyLnNob3coKSA6IHVwZGF0ZXIuaGlkZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZWFjdFRvLmlzT3BlbiA9IGlzT3BlbjtcbiAgICAgICAgICAgIH0pKHJlYWN0VG8gPSBvdmVybGF5LnJlYWN0VG8gfHwgKG92ZXJsYXkucmVhY3RUbyA9IHt9KSk7XG4gICAgICAgIH0pKG92ZXJsYXkgPSBjb250cm9scy5vdmVybGF5IHx8IChjb250cm9scy5vdmVybGF5ID0ge30pKTtcbiAgICB9KShjb250cm9scyA9IG1pbmVydmEuY29udHJvbHMgfHwgKG1pbmVydmEuY29udHJvbHMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vY29yZS9VcGRhdGVyVHJlZVwiIC8+XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb250cm9scztcbiAgICAoZnVuY3Rpb24gKGNvbnRyb2xzKSB7XG4gICAgICAgIHZhciBvdmVybGF5O1xuICAgICAgICAoZnVuY3Rpb24gKG92ZXJsYXkpIHtcbiAgICAgICAgICAgIHZhciBPdmVybGF5VXBkYXRlclRyZWUgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgICAgIF9fZXh0ZW5kcyhPdmVybGF5VXBkYXRlclRyZWUsIF9zdXBlcik7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gT3ZlcmxheVVwZGF0ZXJUcmVlKCkge1xuICAgICAgICAgICAgICAgICAgICBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sYXllciA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbml0aWF0b3JTdXJmYWNlID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gT3ZlcmxheVVwZGF0ZXJUcmVlO1xuICAgICAgICAgICAgfSkobWluZXJ2YS5jb3JlLlVwZGF0ZXJUcmVlKTtcbiAgICAgICAgICAgIG92ZXJsYXkuT3ZlcmxheVVwZGF0ZXJUcmVlID0gT3ZlcmxheVVwZGF0ZXJUcmVlO1xuICAgICAgICB9KShvdmVybGF5ID0gY29udHJvbHMub3ZlcmxheSB8fCAoY29udHJvbHMub3ZlcmxheSA9IHt9KSk7XG4gICAgfSkoY29udHJvbHMgPSBtaW5lcnZhLmNvbnRyb2xzIHx8IChtaW5lcnZhLmNvbnRyb2xzID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29udHJvbHM7XG4gICAgKGZ1bmN0aW9uIChjb250cm9scykge1xuICAgICAgICB2YXIgcGFuZWw7XG4gICAgICAgIChmdW5jdGlvbiAocGFuZWwpIHtcbiAgICAgICAgICAgIHZhciBQYW5lbFVwZGF0ZXJUcmVlID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgICAgICBfX2V4dGVuZHMoUGFuZWxVcGRhdGVyVHJlZSwgX3N1cGVyKTtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBQYW5lbFVwZGF0ZXJUcmVlKCkge1xuICAgICAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGlsZHJlbiA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuelNvcnRlZCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNDb250YWluZXIgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzTGF5b3V0Q29udGFpbmVyID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgUGFuZWxVcGRhdGVyVHJlZS5wcm90b3R5cGUud2FsayA9IGZ1bmN0aW9uIChkaXJlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gbWluZXJ2YS5XYWxrRGlyZWN0aW9uLlpGb3J3YXJkIHx8IGRpcmVjdGlvbiA9PT0gbWluZXJ2YS5XYWxrRGlyZWN0aW9uLlpSZXZlcnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnpTb3J0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gd2Fsa0FycmF5KHRoaXMuelNvcnRlZCwgZGlyZWN0aW9uID09PSBtaW5lcnZhLldhbGtEaXJlY3Rpb24uWlJldmVyc2UpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB3YWxrQXJyYXkodGhpcy5jaGlsZHJlbiwgZGlyZWN0aW9uID09PSBtaW5lcnZhLldhbGtEaXJlY3Rpb24uUmV2ZXJzZSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBQYW5lbFVwZGF0ZXJUcmVlLnByb3RvdHlwZS56U29ydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHpzID0gdGhpcy56U29ydGVkO1xuICAgICAgICAgICAgICAgICAgICBpZiAoenMpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIHpzID0gdGhpcy56U29ydGVkID0gW107XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCB3YWxrZXIgPSB0aGlzLndhbGsoKTsgd2Fsa2VyLnN0ZXAoKTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VyID0gd2Fsa2VyLmN1cnJlbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXIuc2V0QXR0YWNoZWRWYWx1ZShcIlBhbmVsLkluZGV4XCIsIGkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgenMucHVzaChjdXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHpzLnNvcnQoekluZGV4Q29tcGFyZXIpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgUGFuZWxVcGRhdGVyVHJlZS5wcm90b3R5cGUub25DaGlsZEF0dGFjaGVkID0gZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuelNvcnRlZCA9IG51bGw7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBQYW5lbFVwZGF0ZXJUcmVlLnByb3RvdHlwZS5vbkNoaWxkRGV0YWNoZWQgPSBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy56U29ydGVkID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybiBQYW5lbFVwZGF0ZXJUcmVlO1xuICAgICAgICAgICAgfSkobWluZXJ2YS5jb3JlLlVwZGF0ZXJUcmVlKTtcbiAgICAgICAgICAgIHBhbmVsLlBhbmVsVXBkYXRlclRyZWUgPSBQYW5lbFVwZGF0ZXJUcmVlO1xuICAgICAgICAgICAgZnVuY3Rpb24gd2Fsa0FycmF5KGFyciwgcmV2ZXJzZSkge1xuICAgICAgICAgICAgICAgIHZhciBsZW4gPSBhcnIubGVuZ3RoO1xuICAgICAgICAgICAgICAgIHZhciBlID0geyBzdGVwOiB1bmRlZmluZWQsIGN1cnJlbnQ6IHVuZGVmaW5lZCB9O1xuICAgICAgICAgICAgICAgIHZhciBpbmRleDtcbiAgICAgICAgICAgICAgICBpZiAocmV2ZXJzZSkge1xuICAgICAgICAgICAgICAgICAgICBpbmRleCA9IGxlbjtcbiAgICAgICAgICAgICAgICAgICAgZS5zdGVwID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXgtLTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLmN1cnJlbnQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZS5jdXJyZW50ID0gYXJyW2luZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaW5kZXggPSAtMTtcbiAgICAgICAgICAgICAgICAgICAgZS5zdGVwID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXgrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCA+PSBsZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLmN1cnJlbnQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZS5jdXJyZW50ID0gYXJyW2luZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIHpJbmRleENvbXBhcmVyKHVwZDEsIHVwZDIpIHtcbiAgICAgICAgICAgICAgICB2YXIgemkxID0gdXBkMS5nZXRBdHRhY2hlZFZhbHVlKFwiUGFuZWwuWkluZGV4XCIpO1xuICAgICAgICAgICAgICAgIHZhciB6aTIgPSB1cGQyLmdldEF0dGFjaGVkVmFsdWUoXCJQYW5lbC5aSW5kZXhcIik7XG4gICAgICAgICAgICAgICAgaWYgKHppMSA9PSBudWxsICYmIHppMiA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHppMSA9IHVwZDEuZ2V0QXR0YWNoZWRWYWx1ZShcIlBhbmVsLkluZGV4XCIpO1xuICAgICAgICAgICAgICAgICAgICB6aTIgPSB1cGQyLmdldEF0dGFjaGVkVmFsdWUoXCJQYW5lbC5JbmRleFwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoemkxID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHppMiA+IDAgPyAtMSA6IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHppMiA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB6aTEgPiAwID8gMSA6IC0xO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gemkxID09PSB6aTIgPyAwIDogKCh6aTEgPCB6aTIpID8gLTEgOiAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkocGFuZWwgPSBjb250cm9scy5wYW5lbCB8fCAoY29udHJvbHMucGFuZWwgPSB7fSkpO1xuICAgIH0pKGNvbnRyb2xzID0gbWluZXJ2YS5jb250cm9scyB8fCAobWluZXJ2YS5jb250cm9scyA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvbnRyb2xzO1xuICAgIChmdW5jdGlvbiAoY29udHJvbHMpIHtcbiAgICAgICAgdmFyIHBvcHVwO1xuICAgICAgICAoZnVuY3Rpb24gKHBvcHVwKSB7XG4gICAgICAgICAgICB2YXIgUG9wdXBVcGRhdGVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgICAgICBfX2V4dGVuZHMoUG9wdXBVcGRhdGVyLCBfc3VwZXIpO1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIFBvcHVwVXBkYXRlcigpIHtcbiAgICAgICAgICAgICAgICAgICAgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFBvcHVwVXBkYXRlci5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRUcmVlKG5ldyBwb3B1cC5Qb3B1cFVwZGF0ZXJUcmVlKCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0UHJvY2Vzc0Rvd25QaXBlKG1pbmVydmEuc2luZ2xldG9uKHBvcHVwLnByb2Nlc3Nkb3duLlBvcHVwUHJvY2Vzc0Rvd25QaXBlRGVmKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRQcm9jZXNzVXBQaXBlKG1pbmVydmEuc2luZ2xldG9uKHBvcHVwLnByb2Nlc3N1cC5Qb3B1cFByb2Nlc3NVcFBpcGVEZWYpKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldEhpdFRlc3RQaXBlKG1pbmVydmEuc2luZ2xldG9uKHBvcHVwLmhpdHRlc3QuUG9wdXBIaXRUZXN0UGlwZURlZikpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYXNzZXRzID0gdGhpcy5hc3NldHM7XG4gICAgICAgICAgICAgICAgICAgIGFzc2V0cy5ob3Jpem9udGFsT2Zmc2V0ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXRzLnZlcnRpY2FsT2Zmc2V0ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXRzLmlzVmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBhc3NldHMuaXNPcGVuID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuaW5pdC5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgUG9wdXBVcGRhdGVyLnByb3RvdHlwZS5zZXRJbml0aWF0b3IgPSBmdW5jdGlvbiAoaW5pdGlhdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudHJlZS5pbml0aWF0b3JTdXJmYWNlID0gaW5pdGlhdG9yLnRyZWUuc3VyZmFjZTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIFBvcHVwVXBkYXRlci5wcm90b3R5cGUuc2V0Q2hpbGQgPSBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9sZCA9IHRoaXMudHJlZS5wb3B1cENoaWxkO1xuICAgICAgICAgICAgICAgICAgICBpZiAob2xkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvbGQuYXNzZXRzLmNhcnJpZXJYZm9ybSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy50cmVlLnBvcHVwQ2hpbGQgPSBjaGlsZDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZC5hc3NldHMuY2Fycmllclhmb3JtID0gbWluZXJ2YS5tYXQzLmlkZW50aXR5KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIFBvcHVwVXBkYXRlci5wcm90b3R5cGUuc2V0TGF5ZXIgPSBmdW5jdGlvbiAobGF5ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudHJlZS5sYXllciA9IGxheWVyO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5hc3NldHMuaXNPcGVuKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93KCk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBQb3B1cFVwZGF0ZXIucHJvdG90eXBlLmhpZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsYXllciA9IHRoaXMudHJlZS5sYXllcjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmFzc2V0cy5pc1Zpc2libGUgfHwgIWxheWVyKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFzc2V0cy5pc1Zpc2libGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN1cmZhY2UgPSB0aGlzLnRyZWUuaW5pdGlhdG9yU3VyZmFjZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzdXJmYWNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBzdXJmYWNlLmRldGFjaExheWVyKGxheWVyKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBQb3B1cFVwZGF0ZXIucHJvdG90eXBlLnNob3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsYXllciA9IHRoaXMudHJlZS5sYXllcjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYXNzZXRzLmlzVmlzaWJsZSB8fCAhbGF5ZXIpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXNzZXRzLmlzVmlzaWJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdXJmYWNlID0gdGhpcy50cmVlLmluaXRpYXRvclN1cmZhY2U7XG4gICAgICAgICAgICAgICAgICAgIGlmICghc3VyZmFjZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgc3VyZmFjZS5hdHRhY2hMYXllcihsYXllcik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIFBvcHVwVXBkYXRlcjtcbiAgICAgICAgICAgIH0pKG1pbmVydmEuY29yZS5VcGRhdGVyKTtcbiAgICAgICAgICAgIHBvcHVwLlBvcHVwVXBkYXRlciA9IFBvcHVwVXBkYXRlcjtcbiAgICAgICAgICAgIHZhciByZWFjdFRvO1xuICAgICAgICAgICAgKGZ1bmN0aW9uIChyZWFjdFRvKSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gaXNPcGVuKHVwZGF0ZXIsIG9sZFZhbHVlLCBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAobmV3VmFsdWUgPT09IHRydWUpID8gdXBkYXRlci5zaG93KCkgOiB1cGRhdGVyLmhpZGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVhY3RUby5pc09wZW4gPSBpc09wZW47XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gaG9yaXpvbnRhbE9mZnNldCh1cGRhdGVyLCBvbGRWYWx1ZSwgbmV3VmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRyZWUgPSB1cGRhdGVyLnRyZWU7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IHRyZWUucG9wdXBDaGlsZDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjaGlsZClcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHR3ZWVuWCA9IG5ld1ZhbHVlIC0gb2xkVmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0d2VlblggPT09IDApXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIHR3ZWVuT2Zmc2V0KGNoaWxkLCB0d2VlblgsIDApO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHJlZS5sYXllcilcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyZWUubGF5ZXIuaW52YWxpZGF0ZU1lYXN1cmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVhY3RUby5ob3Jpem9udGFsT2Zmc2V0ID0gaG9yaXpvbnRhbE9mZnNldDtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiB2ZXJ0aWNhbE9mZnNldCh1cGRhdGVyLCBvbGRWYWx1ZSwgbmV3VmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRyZWUgPSB1cGRhdGVyLnRyZWU7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IHRyZWUucG9wdXBDaGlsZDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjaGlsZClcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHR3ZWVuWSA9IG5ld1ZhbHVlIC0gb2xkVmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0d2VlblkgPT09IDApXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIHR3ZWVuT2Zmc2V0KGNoaWxkLCAwLCB0d2VlblkpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHJlZS5sYXllcilcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyZWUubGF5ZXIuaW52YWxpZGF0ZU1lYXN1cmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVhY3RUby52ZXJ0aWNhbE9mZnNldCA9IHZlcnRpY2FsT2Zmc2V0O1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHR3ZWVuT2Zmc2V0KGNoaWxkLCB0d2VlblgsIHR3ZWVuWSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGQuYXNzZXRzLmNhcnJpZXJYZm9ybSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5tYXQzLnRyYW5zbGF0ZShjaGlsZC5hc3NldHMuY2Fycmllclhmb3JtLCB0d2VlblgsIHR3ZWVuWSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KShyZWFjdFRvID0gcG9wdXAucmVhY3RUbyB8fCAocG9wdXAucmVhY3RUbyA9IHt9KSk7XG4gICAgICAgIH0pKHBvcHVwID0gY29udHJvbHMucG9wdXAgfHwgKGNvbnRyb2xzLnBvcHVwID0ge30pKTtcbiAgICB9KShjb250cm9scyA9IG1pbmVydmEuY29udHJvbHMgfHwgKG1pbmVydmEuY29udHJvbHMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vY29yZS9VcGRhdGVyVHJlZVwiIC8+XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb250cm9scztcbiAgICAoZnVuY3Rpb24gKGNvbnRyb2xzKSB7XG4gICAgICAgIHZhciBwb3B1cDtcbiAgICAgICAgKGZ1bmN0aW9uIChwb3B1cCkge1xuICAgICAgICAgICAgdmFyIFBvcHVwVXBkYXRlclRyZWUgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgICAgIF9fZXh0ZW5kcyhQb3B1cFVwZGF0ZXJUcmVlLCBfc3VwZXIpO1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIFBvcHVwVXBkYXRlclRyZWUoKSB7XG4gICAgICAgICAgICAgICAgICAgIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBvcHVwQ2hpbGQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGF5ZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5pdGlhdG9yU3VyZmFjZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIFBvcHVwVXBkYXRlclRyZWU7XG4gICAgICAgICAgICB9KShtaW5lcnZhLmNvcmUuVXBkYXRlclRyZWUpO1xuICAgICAgICAgICAgcG9wdXAuUG9wdXBVcGRhdGVyVHJlZSA9IFBvcHVwVXBkYXRlclRyZWU7XG4gICAgICAgIH0pKHBvcHVwID0gY29udHJvbHMucG9wdXAgfHwgKGNvbnRyb2xzLnBvcHVwID0ge30pKTtcbiAgICB9KShjb250cm9scyA9IG1pbmVydmEuY29udHJvbHMgfHwgKG1pbmVydmEuY29udHJvbHMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb250cm9scztcbiAgICAoZnVuY3Rpb24gKGNvbnRyb2xzKSB7XG4gICAgICAgIHZhciBzY3JvbGxjb250ZW50cHJlc2VudGVyO1xuICAgICAgICAoZnVuY3Rpb24gKHNjcm9sbGNvbnRlbnRwcmVzZW50ZXIpIHtcbiAgICAgICAgICAgIHZhciBoZWxwZXJzO1xuICAgICAgICAgICAgKGZ1bmN0aW9uIChoZWxwZXJzKSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gY2xhbXBPZmZzZXRzKHNkKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGFuZ2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjbGFtcFggPSBjbGFtcEhvcml6b250YWwoc2QsIHNkLmNhY2hlZE9mZnNldFgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWFyZUNsb3NlKGNsYW1wWCwgc2Qub2Zmc2V0WCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNkLm9mZnNldFggPSBjbGFtcFg7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgY2xhbXBZID0gY2xhbXBWZXJ0aWNhbChzZCwgc2QuY2FjaGVkT2Zmc2V0WSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghYXJlQ2xvc2UoY2xhbXBZLCBzZC5vZmZzZXRZKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2Qub2Zmc2V0WSA9IGNsYW1wWTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjaGFuZ2VkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBoZWxwZXJzLmNsYW1wT2Zmc2V0cyA9IGNsYW1wT2Zmc2V0cztcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBjbGFtcEhvcml6b250YWwoc2QsIHgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzZC5jYW5Ib3Jpem9udGFsbHlTY3JvbGwpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgubWF4KDAsIE1hdGgubWluKHgsIHNkLmV4dGVudFdpZHRoIC0gc2Qudmlld3BvcnRXaWR0aCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBjbGFtcFZlcnRpY2FsKHNkLCB5KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghc2QuY2FuVmVydGljYWxseVNjcm9sbClcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5tYXgoMCwgTWF0aC5taW4oeSwgc2QuZXh0ZW50SGVpZ2h0IC0gc2Qudmlld3BvcnRIZWlnaHQpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGVwc2lsb24gPSAxLjE5MjA5M0UtMDc7XG4gICAgICAgICAgICAgICAgdmFyIGFkanVzdG1lbnQgPSAxMDtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBhcmVDbG9zZSh2YWwxLCB2YWwyKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWwxID09PSB2YWwyKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzb2Z0ZGlmZiA9IChNYXRoLmFicyh2YWwxKSArIE1hdGguYWJzKHZhbDIpICsgYWRqdXN0bWVudCkgKiBlcHNpbG9uO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGlmZiA9IHZhbDEgLSB2YWwyO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gLXNvZnRkaWZmIDwgZGlmZiAmJiBkaWZmIDwgc29mdGRpZmY7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkoaGVscGVycyA9IHNjcm9sbGNvbnRlbnRwcmVzZW50ZXIuaGVscGVycyB8fCAoc2Nyb2xsY29udGVudHByZXNlbnRlci5oZWxwZXJzID0ge30pKTtcbiAgICAgICAgfSkoc2Nyb2xsY29udGVudHByZXNlbnRlciA9IGNvbnRyb2xzLnNjcm9sbGNvbnRlbnRwcmVzZW50ZXIgfHwgKGNvbnRyb2xzLnNjcm9sbGNvbnRlbnRwcmVzZW50ZXIgPSB7fSkpO1xuICAgIH0pKGNvbnRyb2xzID0gbWluZXJ2YS5jb250cm9scyB8fCAobWluZXJ2YS5jb250cm9scyA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvbnRyb2xzO1xuICAgIChmdW5jdGlvbiAoY29udHJvbHMpIHtcbiAgICAgICAgdmFyIHNjcm9sbGNvbnRlbnRwcmVzZW50ZXI7XG4gICAgICAgIChmdW5jdGlvbiAoc2Nyb2xsY29udGVudHByZXNlbnRlcikge1xuICAgICAgICAgICAgdmFyIFNjcm9sbENvbnRlbnRQcmVzZW50ZXJVcGRhdGVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgICAgICBfX2V4dGVuZHMoU2Nyb2xsQ29udGVudFByZXNlbnRlclVwZGF0ZXIsIF9zdXBlcik7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gU2Nyb2xsQ29udGVudFByZXNlbnRlclVwZGF0ZXIoKSB7XG4gICAgICAgICAgICAgICAgICAgIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBTY3JvbGxDb250ZW50UHJlc2VudGVyVXBkYXRlci5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRNZWFzdXJlUGlwZShtaW5lcnZhLnNpbmdsZXRvbihzY3JvbGxjb250ZW50cHJlc2VudGVyLm1lYXN1cmUuU2Nyb2xsQ29udGVudFByZXNlbnRlck1lYXN1cmVQaXBlRGVmKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRBcnJhbmdlUGlwZShtaW5lcnZhLnNpbmdsZXRvbihzY3JvbGxjb250ZW50cHJlc2VudGVyLmFycmFuZ2UuU2Nyb2xsQ29udGVudFByZXNlbnRlckFycmFuZ2VQaXBlRGVmKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRSZW5kZXJQaXBlKG1pbmVydmEuc2luZ2xldG9uKHNjcm9sbGNvbnRlbnRwcmVzZW50ZXIucmVuZGVyLlNjcm9sbENvbnRlbnRQcmVzZW50ZXJSZW5kZXJQaXBlRGVmKSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhc3NldHMgPSB0aGlzLmFzc2V0cztcbiAgICAgICAgICAgICAgICAgICAgYXNzZXRzLmludGVybmFsQ2xpcCA9IG5ldyBtaW5lcnZhLlJlY3QoKTtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXRzLnNjcm9sbERhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYW5Ib3Jpem9udGFsbHlTY3JvbGw6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FuVmVydGljYWxseVNjcm9sbDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXRYOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WTogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlZE9mZnNldFg6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWNoZWRPZmZzZXRZOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmlld3BvcnRXaWR0aDogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdwb3J0SGVpZ2h0OiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXh0ZW50V2lkdGg6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBleHRlbnRIZWlnaHQ6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXhEZXNpcmVkV2lkdGg6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXhEZXNpcmVkSGVpZ2h0OiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgaW52YWxpZGF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLmluaXQuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybiBTY3JvbGxDb250ZW50UHJlc2VudGVyVXBkYXRlcjtcbiAgICAgICAgICAgIH0pKG1pbmVydmEuY29yZS5VcGRhdGVyKTtcbiAgICAgICAgICAgIHNjcm9sbGNvbnRlbnRwcmVzZW50ZXIuU2Nyb2xsQ29udGVudFByZXNlbnRlclVwZGF0ZXIgPSBTY3JvbGxDb250ZW50UHJlc2VudGVyVXBkYXRlcjtcbiAgICAgICAgfSkoc2Nyb2xsY29udGVudHByZXNlbnRlciA9IGNvbnRyb2xzLnNjcm9sbGNvbnRlbnRwcmVzZW50ZXIgfHwgKGNvbnRyb2xzLnNjcm9sbGNvbnRlbnRwcmVzZW50ZXIgPSB7fSkpO1xuICAgIH0pKGNvbnRyb2xzID0gbWluZXJ2YS5jb250cm9scyB8fCAobWluZXJ2YS5jb250cm9scyA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvbnRyb2xzO1xuICAgIChmdW5jdGlvbiAoY29udHJvbHMpIHtcbiAgICAgICAgdmFyIHN0YWNrcGFuZWw7XG4gICAgICAgIChmdW5jdGlvbiAoc3RhY2twYW5lbCkge1xuICAgICAgICAgICAgdmFyIFN0YWNrUGFuZWxVcGRhdGVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgICAgICBfX2V4dGVuZHMoU3RhY2tQYW5lbFVwZGF0ZXIsIF9zdXBlcik7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gU3RhY2tQYW5lbFVwZGF0ZXIoKSB7XG4gICAgICAgICAgICAgICAgICAgIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBTdGFja1BhbmVsVXBkYXRlci5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRNZWFzdXJlUGlwZShtaW5lcnZhLnNpbmdsZXRvbihzdGFja3BhbmVsLm1lYXN1cmUuU3RhY2tQYW5lbE1lYXN1cmVQaXBlRGVmKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRBcnJhbmdlUGlwZShtaW5lcnZhLnNpbmdsZXRvbihzdGFja3BhbmVsLmFycmFuZ2UuU3RhY2tQYW5lbEFycmFuZ2VQaXBlRGVmKSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXNzZXRzLm9yaWVudGF0aW9uID0gbWluZXJ2YS5PcmllbnRhdGlvbi5WZXJ0aWNhbDtcbiAgICAgICAgICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5pbml0LmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gU3RhY2tQYW5lbFVwZGF0ZXI7XG4gICAgICAgICAgICB9KShjb250cm9scy5wYW5lbC5QYW5lbFVwZGF0ZXIpO1xuICAgICAgICAgICAgc3RhY2twYW5lbC5TdGFja1BhbmVsVXBkYXRlciA9IFN0YWNrUGFuZWxVcGRhdGVyO1xuICAgICAgICB9KShzdGFja3BhbmVsID0gY29udHJvbHMuc3RhY2twYW5lbCB8fCAoY29udHJvbHMuc3RhY2twYW5lbCA9IHt9KSk7XG4gICAgfSkoY29udHJvbHMgPSBtaW5lcnZhLmNvbnRyb2xzIHx8IChtaW5lcnZhLmNvbnRyb2xzID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29udHJvbHM7XG4gICAgKGZ1bmN0aW9uIChjb250cm9scykge1xuICAgICAgICB2YXIgdGV4dGJsb2NrO1xuICAgICAgICAoZnVuY3Rpb24gKHRleHRibG9jaykge1xuICAgICAgICAgICAgdmFyIFRleHRCbG9ja1VwZGF0ZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgICAgIF9fZXh0ZW5kcyhUZXh0QmxvY2tVcGRhdGVyLCBfc3VwZXIpO1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIFRleHRCbG9ja1VwZGF0ZXIoKSB7XG4gICAgICAgICAgICAgICAgICAgIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBUZXh0QmxvY2tVcGRhdGVyLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFRyZWUobmV3IHRleHRibG9jay5UZXh0QmxvY2tVcGRhdGVyVHJlZSgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldE1lYXN1cmVQaXBlKG1pbmVydmEuc2luZ2xldG9uKHRleHRibG9jay5tZWFzdXJlLlRleHRCbG9ja01lYXN1cmVQaXBlRGVmKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRBcnJhbmdlUGlwZShtaW5lcnZhLnNpbmdsZXRvbih0ZXh0YmxvY2suYXJyYW5nZS5UZXh0QmxvY2tBcnJhbmdlUGlwZURlZikpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0UHJvY2Vzc1VwUGlwZShtaW5lcnZhLnNpbmdsZXRvbih0ZXh0YmxvY2sucHJvY2Vzc3VwLlRleHRCbG9ja1Byb2Nlc3NVcFBpcGVEZWYpKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFJlbmRlclBpcGUobWluZXJ2YS5zaW5nbGV0b24odGV4dGJsb2NrLnJlbmRlci5UZXh0QmxvY2tSZW5kZXJQaXBlRGVmKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRIaXRUZXN0UGlwZShtaW5lcnZhLnNpbmdsZXRvbih0ZXh0YmxvY2suaGl0dGVzdC5UZXh0QmxvY2tIaXRUZXN0UGlwZURlZikpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldERvY3VtZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhc3NldHMgPSB0aGlzLmFzc2V0cztcbiAgICAgICAgICAgICAgICAgICAgYXNzZXRzLnBhZGRpbmcgPSBuZXcgbWluZXJ2YS5UaGlja25lc3MoKTtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXRzLnNlbGVjdGlvblN0YXJ0ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXRzLnNlbGVjdGlvbkxlbmd0aCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGFzc2V0cy50ZXh0V3JhcHBpbmcgPSBtaW5lcnZhLlRleHRXcmFwcGluZy5Ob1dyYXA7XG4gICAgICAgICAgICAgICAgICAgIGFzc2V0cy50ZXh0QWxpZ25tZW50ID0gbWluZXJ2YS5UZXh0QWxpZ25tZW50LkxlZnQ7XG4gICAgICAgICAgICAgICAgICAgIGFzc2V0cy50ZXh0VHJpbW1pbmcgPSBtaW5lcnZhLlRleHRUcmltbWluZy5Ob25lO1xuICAgICAgICAgICAgICAgICAgICBhc3NldHMubGluZVN0YWNraW5nU3RyYXRlZ3kgPSBtaW5lcnZhLkxpbmVTdGFja2luZ1N0cmF0ZWd5Lk1heEhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXRzLmxpbmVIZWlnaHQgPSBOYU47XG4gICAgICAgICAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuaW5pdC5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgVGV4dEJsb2NrVXBkYXRlci5wcm90b3R5cGUuc2V0RG9jdW1lbnQgPSBmdW5jdGlvbiAoZG9jZGVmKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnRyZWUuZG9jKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudHJlZS5kb2MgPSBtaW5lcnZhLnRleHQuY3JlYXRlRG9jdW1lbnRMYXlvdXQoZG9jZGVmIHx8IG5ldyBtaW5lcnZhLnRleHQuRG9jdW1lbnRMYXlvdXREZWYoKSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgVGV4dEJsb2NrVXBkYXRlci5wcm90b3R5cGUuaW52YWxpZGF0ZUZvbnQgPSBmdW5jdGlvbiAoZnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZnVsbCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnZhbGlkYXRlTWVhc3VyZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnZhbGlkYXRlQXJyYW5nZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVCb3VuZHModHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnZhbGlkYXRlKCk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBUZXh0QmxvY2tVcGRhdGVyLnByb3RvdHlwZS5pbnZhbGlkYXRlVGV4dE1ldHJpY3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW52YWxpZGF0ZU1lYXN1cmUoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnZhbGlkYXRlQXJyYW5nZSgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUJvdW5kcyh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnZhbGlkYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkb2Nhc3NldHMgPSB0aGlzLnRyZWUuZG9jLmFzc2V0cztcbiAgICAgICAgICAgICAgICAgICAgZG9jYXNzZXRzLmFjdHVhbFdpZHRoID0gTmFOO1xuICAgICAgICAgICAgICAgICAgICBkb2Nhc3NldHMuYWN0dWFsSGVpZ2h0ID0gTmFOO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIFRleHRCbG9ja1VwZGF0ZXI7XG4gICAgICAgICAgICB9KShtaW5lcnZhLmNvcmUuVXBkYXRlcik7XG4gICAgICAgICAgICB0ZXh0YmxvY2suVGV4dEJsb2NrVXBkYXRlciA9IFRleHRCbG9ja1VwZGF0ZXI7XG4gICAgICAgIH0pKHRleHRibG9jayA9IGNvbnRyb2xzLnRleHRibG9jayB8fCAoY29udHJvbHMudGV4dGJsb2NrID0ge30pKTtcbiAgICB9KShjb250cm9scyA9IG1pbmVydmEuY29udHJvbHMgfHwgKG1pbmVydmEuY29udHJvbHMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb250cm9scztcbiAgICAoZnVuY3Rpb24gKGNvbnRyb2xzKSB7XG4gICAgICAgIHZhciB0ZXh0YmxvY2s7XG4gICAgICAgIChmdW5jdGlvbiAodGV4dGJsb2NrKSB7XG4gICAgICAgICAgICB2YXIgVGV4dEJsb2NrVXBkYXRlclRyZWUgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgICAgIF9fZXh0ZW5kcyhUZXh0QmxvY2tVcGRhdGVyVHJlZSwgX3N1cGVyKTtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBUZXh0QmxvY2tVcGRhdGVyVHJlZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4gPSBbXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgVGV4dEJsb2NrVXBkYXRlclRyZWUucHJvdG90eXBlLnNldE1heFdpZHRoID0gZnVuY3Rpb24gKHdpZHRoLCBkb2NjdHgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZG9jLmRlZi5zZXRNYXhXaWR0aChkb2NjdHgsIHRoaXMuZG9jLmFzc2V0cywgd2lkdGgpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgVGV4dEJsb2NrVXBkYXRlclRyZWUucHJvdG90eXBlLmxheW91dCA9IGZ1bmN0aW9uIChjb25zdHJhaW50LCBkb2NjdHgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRvYyA9IHRoaXMuZG9jO1xuICAgICAgICAgICAgICAgICAgICBkb2MuZGVmLmxheW91dChkb2NjdHgsIGRvYy5hc3NldHMsIGNvbnN0cmFpbnQsIHRoaXMud2Fsa1RleHQoKSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgbWluZXJ2YS5TaXplKGRvYy5hc3NldHMuYWN0dWFsV2lkdGgsIGRvYy5hc3NldHMuYWN0dWFsSGVpZ2h0KTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIFRleHRCbG9ja1VwZGF0ZXJUcmVlLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoY3R4LCBkb2NjdHgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRvYyA9IHRoaXMuZG9jO1xuICAgICAgICAgICAgICAgICAgICBkb2MuZGVmLnJlbmRlcihjdHgsIGRvY2N0eCwgZG9jLmFzc2V0cyk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBUZXh0QmxvY2tVcGRhdGVyVHJlZS5wcm90b3R5cGUuc2V0QXZhaWxhYmxlV2lkdGggPSBmdW5jdGlvbiAod2lkdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kb2MuYXNzZXRzLmF2YWlsYWJsZVdpZHRoID0gd2lkdGg7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBUZXh0QmxvY2tVcGRhdGVyVHJlZS5wcm90b3R5cGUuZ2V0SG9yaXpvbnRhbE9mZnNldCA9IGZ1bmN0aW9uIChkb2NjdHgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRvYyA9IHRoaXMuZG9jO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZG9jLmRlZi5nZXRIb3Jpem9udGFsQWxpZ25tZW50WChkb2NjdHgsIGRvYy5hc3NldHMsIGRvYy5hc3NldHMuYWN0dWFsV2lkdGgpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgVGV4dEJsb2NrVXBkYXRlclRyZWUucHJvdG90eXBlLmNsZWFyVGV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5sZW5ndGggPSAwO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgVGV4dEJsb2NrVXBkYXRlclRyZWUucHJvdG90eXBlLndhbGtUZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IC0xO1xuICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RlcDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnQgPSBjaGlsZHJlbltpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50ICE9PSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBUZXh0QmxvY2tVcGRhdGVyVHJlZS5wcm90b3R5cGUub25UZXh0QXR0YWNoZWQgPSBmdW5jdGlvbiAoY2hpbGQsIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PSBudWxsIHx8IGluZGV4IDwgMCB8fCBpbmRleCA+PSB0aGlzLmNoaWxkcmVuLmxlbmd0aClcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChjaGlsZCk7XG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4uc3BsaWNlKGluZGV4LCAwLCBjaGlsZCk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBUZXh0QmxvY2tVcGRhdGVyVHJlZS5wcm90b3R5cGUub25UZXh0RGV0YWNoZWQgPSBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5jaGlsZHJlbi5pbmRleE9mKGNoaWxkKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ID4gLTEpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNoaWxkcmVuLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gVGV4dEJsb2NrVXBkYXRlclRyZWU7XG4gICAgICAgICAgICB9KShtaW5lcnZhLmNvcmUuVXBkYXRlclRyZWUpO1xuICAgICAgICAgICAgdGV4dGJsb2NrLlRleHRCbG9ja1VwZGF0ZXJUcmVlID0gVGV4dEJsb2NrVXBkYXRlclRyZWU7XG4gICAgICAgIH0pKHRleHRibG9jayA9IGNvbnRyb2xzLnRleHRibG9jayB8fCAoY29udHJvbHMudGV4dGJsb2NrID0ge30pKTtcbiAgICB9KShjb250cm9scyA9IG1pbmVydmEuY29udHJvbHMgfHwgKG1pbmVydmEuY29udHJvbHMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb250cm9scztcbiAgICAoZnVuY3Rpb24gKGNvbnRyb2xzKSB7XG4gICAgICAgIHZhciB0ZXh0Ym94dmlldztcbiAgICAgICAgKGZ1bmN0aW9uICh0ZXh0Ym94dmlldykge1xuICAgICAgICAgICAgdmFyIENVUlNPUl9CTElOS19ESVZJREVSID0gMztcbiAgICAgICAgICAgIHZhciBDVVJTT1JfQkxJTktfT0ZGX01VTFRJUExJRVIgPSAyO1xuICAgICAgICAgICAgdmFyIENVUlNPUl9CTElOS19ERUxBWV9NVUxUSVBMSUVSID0gMztcbiAgICAgICAgICAgIHZhciBDVVJTT1JfQkxJTktfT05fTVVMVElQTElFUiA9IDQ7XG4gICAgICAgICAgICB2YXIgQ1VSU09SX0JMSU5LX1RJTUVPVVRfREVGQVVMVCA9IDkwMDtcbiAgICAgICAgICAgIHZhciBCbGlua2VyID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBCbGlua2VyKG9uQ2hhbmdlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNFbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc1Zpc2libGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kJGJsaW5rX2RlbGF5ID0gQ1VSU09SX0JMSU5LX1RJTUVPVVRfREVGQVVMVDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kJHRpbWVvdXQgPSAwO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiQkb25DaGFuZ2UgPSBvbkNoYW5nZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgQmxpbmtlci5wcm90b3R5cGUuZGVsYXkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJGRpc2Nvbm5lY3QoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kY29ubmVjdChDVVJTT1JfQkxJTktfREVMQVlfTVVMVElQTElFUik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJHNob3coKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIEJsaW5rZXIucHJvdG90eXBlLmJlZ2luID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy4kJHRpbWVvdXQgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJGNvbm5lY3QoQ1VSU09SX0JMSU5LX09OX01VTFRJUExJRVIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kc2hvdygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBCbGlua2VyLnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJGRpc2Nvbm5lY3QoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kaGlkZSgpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgQmxpbmtlci5wcm90b3R5cGUuJGNvbm5lY3QgPSBmdW5jdGlvbiAobXVsdGlwbGllcikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGVsYXkgPSB0aGlzLiQkYmxpbmtfZGVsYXkgKiBtdWx0aXBsaWVyIC8gQ1VSU09SX0JMSU5LX0RJVklERVI7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJCR0aW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuJGJsaW5rKCk7IH0sIGRlbGF5KTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIEJsaW5rZXIucHJvdG90eXBlLiRkaXNjb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy4kJHRpbWVvdXQgIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQodGhpcy4kJHRpbWVvdXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kJHRpbWVvdXQgPSAwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBCbGlua2VyLnByb3RvdHlwZS4kYmxpbmsgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzVmlzaWJsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kY29ubmVjdChDVVJTT1JfQkxJTktfT0ZGX01VTFRJUExJRVIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kc2hvdygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kY29ubmVjdChDVVJTT1JfQkxJTktfT05fTVVMVElQTElFUik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIEJsaW5rZXIucHJvdG90eXBlLiRzaG93ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pc1Zpc2libGUpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNWaXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kJG9uQ2hhbmdlICYmIHRoaXMuJCRvbkNoYW5nZSh0cnVlKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIEJsaW5rZXIucHJvdG90eXBlLiRoaWRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNWaXNpYmxlKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzVmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiQkb25DaGFuZ2UgJiYgdGhpcy4kJG9uQ2hhbmdlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybiBCbGlua2VyO1xuICAgICAgICAgICAgfSkoKTtcbiAgICAgICAgICAgIHRleHRib3h2aWV3LkJsaW5rZXIgPSBCbGlua2VyO1xuICAgICAgICB9KSh0ZXh0Ym94dmlldyA9IGNvbnRyb2xzLnRleHRib3h2aWV3IHx8IChjb250cm9scy50ZXh0Ym94dmlldyA9IHt9KSk7XG4gICAgfSkoY29udHJvbHMgPSBtaW5lcnZhLmNvbnRyb2xzIHx8IChtaW5lcnZhLmNvbnRyb2xzID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29udHJvbHM7XG4gICAgKGZ1bmN0aW9uIChjb250cm9scykge1xuICAgICAgICB2YXIgdGV4dGJveHZpZXc7XG4gICAgICAgIChmdW5jdGlvbiAodGV4dGJveHZpZXcpIHtcbiAgICAgICAgICAgIHZhciBUZXh0Qm94Vmlld1VwZGF0ZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgICAgIF9fZXh0ZW5kcyhUZXh0Qm94Vmlld1VwZGF0ZXIsIF9zdXBlcik7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gVGV4dEJveFZpZXdVcGRhdGVyKCkge1xuICAgICAgICAgICAgICAgICAgICBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgVGV4dEJveFZpZXdVcGRhdGVyLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFRyZWUobmV3IHRleHRib3h2aWV3LlRleHRCb3hWaWV3VXBkYXRlclRyZWUoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRNZWFzdXJlUGlwZShtaW5lcnZhLnNpbmdsZXRvbih0ZXh0Ym94dmlldy5tZWFzdXJlLlRleHRCb3hWaWV3TWVhc3VyZVBpcGVEZWYpKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldEFycmFuZ2VQaXBlKG1pbmVydmEuc2luZ2xldG9uKHRleHRib3h2aWV3LmFycmFuZ2UuVGV4dEJveFZpZXdBcnJhbmdlUGlwZURlZikpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0UHJvY2Vzc1VwUGlwZShtaW5lcnZhLnNpbmdsZXRvbih0ZXh0Ym94dmlldy5wcm9jZXNzdXAuVGV4dEJveFZpZXdQcm9jZXNzVXBQaXBlRGVmKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRSZW5kZXJQaXBlKG1pbmVydmEuc2luZ2xldG9uKHRleHRib3h2aWV3LnJlbmRlci5UZXh0Qm94Vmlld1JlbmRlclBpcGVEZWYpKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldEhpdFRlc3RQaXBlKG1pbmVydmEuc2luZ2xldG9uKHRleHRib3h2aWV3LmhpdHRlc3QuVGV4dEJveFZpZXdIaXRUZXN0UGlwZURlZikpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldERvY3VtZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhc3NldHMgPSB0aGlzLmFzc2V0cztcbiAgICAgICAgICAgICAgICAgICAgYXNzZXRzLnNlbGVjdGlvblN0YXJ0ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXRzLnNlbGVjdGlvbkxlbmd0aCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGFzc2V0cy50ZXh0V3JhcHBpbmcgPSBtaW5lcnZhLlRleHRXcmFwcGluZy5Ob1dyYXA7XG4gICAgICAgICAgICAgICAgICAgIGFzc2V0cy50ZXh0QWxpZ25tZW50ID0gbWluZXJ2YS5UZXh0QWxpZ25tZW50LkxlZnQ7XG4gICAgICAgICAgICAgICAgICAgIGFzc2V0cy5saW5lU3RhY2tpbmdTdHJhdGVneSA9IG1pbmVydmEuTGluZVN0YWNraW5nU3RyYXRlZ3kuTWF4SGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICBhc3NldHMubGluZUhlaWdodCA9IE5hTjtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXRzLmlzQ2FyZXRWaXNpYmxlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGFzc2V0cy5jYXJldEJydXNoID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXRzLmNhcmV0UmVnaW9uID0gbmV3IG1pbmVydmEuUmVjdCgpO1xuICAgICAgICAgICAgICAgICAgICBhc3NldHMuaXNSZWFkT25seSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmJsaW5rZXIgPSBuZXcgdGV4dGJveHZpZXcuQmxpbmtlcihmdW5jdGlvbiAoaXNWaXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5hc3NldHMuaXNDYXJldFZpc2libGUgPSBpc1Zpc2libGU7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5pbnZhbGlkYXRlQ2FyZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuaW5pdC5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgVGV4dEJveFZpZXdVcGRhdGVyLnByb3RvdHlwZS5zZXREb2N1bWVudCA9IGZ1bmN0aW9uIChkb2NkZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMudHJlZS5kb2MpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50cmVlLmRvYyA9IG1pbmVydmEudGV4dC5jcmVhdGVEb2N1bWVudExheW91dChkb2NkZWYgfHwgbmV3IG1pbmVydmEudGV4dC5Eb2N1bWVudExheW91dERlZigpKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBUZXh0Qm94Vmlld1VwZGF0ZXIucHJvdG90eXBlLmdldEN1cnNvckZyb21Qb2ludCA9IGZ1bmN0aW9uIChwb2ludCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZG9jID0gdGhpcy50cmVlLmRvYztcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRvYy5kZWYuZ2V0Q3Vyc29yRnJvbVBvaW50KHBvaW50LCB0aGlzLmFzc2V0cywgZG9jLmFzc2V0cyk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBUZXh0Qm94Vmlld1VwZGF0ZXIucHJvdG90eXBlLmludmFsaWRhdGVGb250ID0gZnVuY3Rpb24gKGZ1bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZ1bGwgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW52YWxpZGF0ZU1lYXN1cmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW52YWxpZGF0ZUFycmFuZ2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlQm91bmRzKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW52YWxpZGF0ZSgpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgVGV4dEJveFZpZXdVcGRhdGVyLnByb3RvdHlwZS5pbnZhbGlkYXRlVGV4dE1ldHJpY3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW52YWxpZGF0ZU1lYXN1cmUoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmludmFsaWRhdGVBcnJhbmdlKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC51cGRhdGVCb3VuZHModHJ1ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5pbnZhbGlkYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgVGV4dEJveFZpZXdVcGRhdGVyLnByb3RvdHlwZS5pbnZhbGlkYXRlTWVhc3VyZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5pbnZhbGlkYXRlTWVhc3VyZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZG9jYXNzZXRzID0gdGhpcy50cmVlLmRvYy5hc3NldHM7XG4gICAgICAgICAgICAgICAgICAgIGRvY2Fzc2V0cy5hY3R1YWxXaWR0aCA9IE5hTjtcbiAgICAgICAgICAgICAgICAgICAgZG9jYXNzZXRzLmFjdHVhbEhlaWdodCA9IE5hTjtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBUZXh0Qm94Vmlld1VwZGF0ZXIucHJvdG90eXBlLmludmFsaWRhdGVDYXJldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFzc2V0cyA9IHRoaXMuYXNzZXRzO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVnaW9uID0gbmV3IG1pbmVydmEuUmVjdCgpO1xuICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLlJlY3QuY29weVRvKGFzc2V0cy5jYXJldFJlZ2lvbiwgcmVnaW9uKTtcbiAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5SZWN0LnRyYW5zZm9ybShyZWdpb24sIGFzc2V0cy5hYnNvbHV0ZVhmb3JtKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnZhbGlkYXRlKHJlZ2lvbik7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBUZXh0Qm94Vmlld1VwZGF0ZXIucHJvdG90eXBlLmludmFsaWRhdGVTZWxlY3Rpb25TdGFydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50cmVlLmRvYy5hc3NldHMuc2VsQ2FjaGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW52YWxpZGF0ZUNhcmV0UmVnaW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVzZXRDYXJldEJsaW5rZXIodHJ1ZSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBUZXh0Qm94Vmlld1VwZGF0ZXIucHJvdG90eXBlLmludmFsaWRhdGVTZWxlY3Rpb25MZW5ndGggPSBmdW5jdGlvbiAoc3dpdGNoaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudHJlZS5kb2MuYXNzZXRzLnNlbENhY2hlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmludmFsaWRhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXNldENhcmV0Qmxpbmtlcihzd2l0Y2hpbmcpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3dpdGNoaW5nKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnZhbGlkYXRlQ2FyZXRSZWdpb24oKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIFRleHRCb3hWaWV3VXBkYXRlci5wcm90b3R5cGUuaW52YWxpZGF0ZUNhcmV0UmVnaW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmludmFsaWRhdGVDYXJldCgpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgY3IgPSB0aGlzLmFzc2V0cy5jYXJldFJlZ2lvbjtcbiAgICAgICAgICAgICAgICAgICAgY3IueCA9IGNyLnkgPSBjci53aWR0aCA9IGNyLmhlaWdodCA9IDA7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBUZXh0Qm94Vmlld1VwZGF0ZXIucHJvdG90eXBlLnJlc2V0Q2FyZXRCbGlua2VyID0gZnVuY3Rpb24gKHNob3VsZERlbGF5KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhc3NldHMgPSB0aGlzLmFzc2V0cztcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJsaW5rZXIgPSB0aGlzLmJsaW5rZXI7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhc3NldHMuc2VsZWN0aW9uTGVuZ3RoID4gMCB8fCBhc3NldHMuaXNSZWFkT25seSB8fCAhYXNzZXRzLmlzRm9jdXNlZClcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBibGlua2VyLmVuZCgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2hvdWxkRGVsYXkpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYmxpbmtlci5kZWxheSgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYmxpbmtlci5iZWdpbigpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIFRleHRCb3hWaWV3VXBkYXRlcjtcbiAgICAgICAgICAgIH0pKG1pbmVydmEuY29yZS5VcGRhdGVyKTtcbiAgICAgICAgICAgIHRleHRib3h2aWV3LlRleHRCb3hWaWV3VXBkYXRlciA9IFRleHRCb3hWaWV3VXBkYXRlcjtcbiAgICAgICAgfSkodGV4dGJveHZpZXcgPSBjb250cm9scy50ZXh0Ym94dmlldyB8fCAoY29udHJvbHMudGV4dGJveHZpZXcgPSB7fSkpO1xuICAgIH0pKGNvbnRyb2xzID0gbWluZXJ2YS5jb250cm9scyB8fCAobWluZXJ2YS5jb250cm9scyA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvbnRyb2xzO1xuICAgIChmdW5jdGlvbiAoY29udHJvbHMpIHtcbiAgICAgICAgdmFyIHRleHRib3h2aWV3O1xuICAgICAgICAoZnVuY3Rpb24gKHRleHRib3h2aWV3KSB7XG4gICAgICAgICAgICB2YXIgVGV4dEJveFZpZXdVcGRhdGVyVHJlZSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICAgICAgX19leHRlbmRzKFRleHRCb3hWaWV3VXBkYXRlclRyZWUsIF9zdXBlcik7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gVGV4dEJveFZpZXdVcGRhdGVyVHJlZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4gPSBbXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgVGV4dEJveFZpZXdVcGRhdGVyVHJlZS5wcm90b3R5cGUuc2V0TWF4V2lkdGggPSBmdW5jdGlvbiAod2lkdGgsIGRvY2N0eCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kb2MuZGVmLnNldE1heFdpZHRoKGRvY2N0eCwgdGhpcy5kb2MuYXNzZXRzLCB3aWR0aCk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBUZXh0Qm94Vmlld1VwZGF0ZXJUcmVlLnByb3RvdHlwZS5sYXlvdXQgPSBmdW5jdGlvbiAoY29uc3RyYWludCwgZG9jY3R4KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkb2MgPSB0aGlzLmRvYztcbiAgICAgICAgICAgICAgICAgICAgZG9jLmRlZi5sYXlvdXQoZG9jY3R4LCBkb2MuYXNzZXRzLCBjb25zdHJhaW50LCB0aGlzLndhbGtUZXh0KCkpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IG1pbmVydmEuU2l6ZShkb2MuYXNzZXRzLmFjdHVhbFdpZHRoLCBkb2MuYXNzZXRzLmFjdHVhbEhlaWdodCk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBUZXh0Qm94Vmlld1VwZGF0ZXJUcmVlLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoY3R4LCBkb2NjdHgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRvYyA9IHRoaXMuZG9jO1xuICAgICAgICAgICAgICAgICAgICBkb2MuZGVmLnJlbmRlcihjdHgsIGRvY2N0eCwgZG9jLmFzc2V0cyk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBUZXh0Qm94Vmlld1VwZGF0ZXJUcmVlLnByb3RvdHlwZS5zZXRBdmFpbGFibGVXaWR0aCA9IGZ1bmN0aW9uICh3aWR0aCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRvYy5hc3NldHMuYXZhaWxhYmxlV2lkdGggPSB3aWR0aDtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIFRleHRCb3hWaWV3VXBkYXRlclRyZWUucHJvdG90eXBlLmdldEhvcml6b250YWxPZmZzZXQgPSBmdW5jdGlvbiAoZG9jY3R4KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkb2MgPSB0aGlzLmRvYztcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRvYy5kZWYuZ2V0SG9yaXpvbnRhbEFsaWdubWVudFgoZG9jY3R4LCBkb2MuYXNzZXRzLCBkb2MuYXNzZXRzLmFjdHVhbFdpZHRoKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIFRleHRCb3hWaWV3VXBkYXRlclRyZWUucHJvdG90eXBlLmdldENhcmV0UmVnaW9uID0gZnVuY3Rpb24gKGRvY2N0eCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZG9jID0gdGhpcy5kb2M7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkb2MuZGVmLmdldENhcmV0RnJvbUN1cnNvcihkb2NjdHgsIGRvYy5hc3NldHMpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgVGV4dEJveFZpZXdVcGRhdGVyVHJlZS5wcm90b3R5cGUuY2xlYXJUZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoaWxkcmVuLmxlbmd0aCA9IDA7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBUZXh0Qm94Vmlld1VwZGF0ZXJUcmVlLnByb3RvdHlwZS53YWxrVGV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSAtMTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0ZXA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50ID0gY2hpbGRyZW5baV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudCAhPT0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgVGV4dEJveFZpZXdVcGRhdGVyVHJlZS5wcm90b3R5cGUub25UZXh0QXR0YWNoZWQgPSBmdW5jdGlvbiAoY2hpbGQsIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PSBudWxsIHx8IGluZGV4IDwgMCB8fCBpbmRleCA+PSB0aGlzLmNoaWxkcmVuLmxlbmd0aClcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChjaGlsZCk7XG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4uc3BsaWNlKGluZGV4LCAwLCBjaGlsZCk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBUZXh0Qm94Vmlld1VwZGF0ZXJUcmVlLnByb3RvdHlwZS5vblRleHREZXRhY2hlZCA9IGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmNoaWxkcmVuLmluZGV4T2YoY2hpbGQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPiAtMSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4uc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybiBUZXh0Qm94Vmlld1VwZGF0ZXJUcmVlO1xuICAgICAgICAgICAgfSkobWluZXJ2YS5jb3JlLlVwZGF0ZXJUcmVlKTtcbiAgICAgICAgICAgIHRleHRib3h2aWV3LlRleHRCb3hWaWV3VXBkYXRlclRyZWUgPSBUZXh0Qm94Vmlld1VwZGF0ZXJUcmVlO1xuICAgICAgICB9KSh0ZXh0Ym94dmlldyA9IGNvbnRyb2xzLnRleHRib3h2aWV3IHx8IChjb250cm9scy50ZXh0Ym94dmlldyA9IHt9KSk7XG4gICAgfSkoY29udHJvbHMgPSBtaW5lcnZhLmNvbnRyb2xzIHx8IChtaW5lcnZhLmNvbnRyb2xzID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29udHJvbHM7XG4gICAgKGZ1bmN0aW9uIChjb250cm9scykge1xuICAgICAgICB2YXIgdXNlcmNvbnRyb2w7XG4gICAgICAgIChmdW5jdGlvbiAodXNlcmNvbnRyb2wpIHtcbiAgICAgICAgICAgIHZhciBVc2VyQ29udHJvbFVwZGF0ZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgICAgIF9fZXh0ZW5kcyhVc2VyQ29udHJvbFVwZGF0ZXIsIF9zdXBlcik7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gVXNlckNvbnRyb2xVcGRhdGVyKCkge1xuICAgICAgICAgICAgICAgICAgICBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgVXNlckNvbnRyb2xVcGRhdGVyLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldE1lYXN1cmVQaXBlKG1pbmVydmEuc2luZ2xldG9uKHVzZXJjb250cm9sLm1lYXN1cmUuVXNlckNvbnRyb2xNZWFzdXJlUGlwZURlZikpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0QXJyYW5nZVBpcGUobWluZXJ2YS5zaW5nbGV0b24odXNlcmNvbnRyb2wuYXJyYW5nZS5Vc2VyQ29udHJvbEFycmFuZ2VQaXBlRGVmKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRQcm9jZXNzRG93blBpcGUobWluZXJ2YS5zaW5nbGV0b24odXNlcmNvbnRyb2wucHJvY2Vzc2Rvd24uVXNlckNvbnRyb2xQcm9jZXNzRG93blBpcGVEZWYpKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFzc2V0cyA9IHRoaXMuYXNzZXRzO1xuICAgICAgICAgICAgICAgICAgICBhc3NldHMuYnJlYWtMYXlvdXRDbGlwID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXRzLnBhZGRpbmcgPSBuZXcgbWluZXJ2YS5UaGlja25lc3MoKTtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXRzLmJvcmRlclRoaWNrbmVzcyA9IG5ldyBtaW5lcnZhLlRoaWNrbmVzcygpO1xuICAgICAgICAgICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLmluaXQuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybiBVc2VyQ29udHJvbFVwZGF0ZXI7XG4gICAgICAgICAgICB9KShjb250cm9scy5jb250cm9sLkNvbnRyb2xVcGRhdGVyKTtcbiAgICAgICAgICAgIHVzZXJjb250cm9sLlVzZXJDb250cm9sVXBkYXRlciA9IFVzZXJDb250cm9sVXBkYXRlcjtcbiAgICAgICAgfSkodXNlcmNvbnRyb2wgPSBjb250cm9scy51c2VyY29udHJvbCB8fCAoY29udHJvbHMudXNlcmNvbnRyb2wgPSB7fSkpO1xuICAgIH0pKGNvbnRyb2xzID0gbWluZXJ2YS5jb250cm9scyB8fCAobWluZXJ2YS5jb250cm9scyA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvbnRyb2xzO1xuICAgIChmdW5jdGlvbiAoY29udHJvbHMpIHtcbiAgICAgICAgdmFyIHZpZGVvO1xuICAgICAgICAoZnVuY3Rpb24gKHZpZGVvKSB7XG4gICAgICAgICAgICB2YXIgVmlkZW9VcGRhdGVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgICAgICBfX2V4dGVuZHMoVmlkZW9VcGRhdGVyLCBfc3VwZXIpO1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIFZpZGVvVXBkYXRlcigpIHtcbiAgICAgICAgICAgICAgICAgICAgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFZpZGVvVXBkYXRlci5wcm90b3R5cGUub25TdXJmYWNlQ2hhbmdlZCA9IGZ1bmN0aW9uIChvbGRTdXJmYWNlLCBuZXdTdXJmYWNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvbGRTdXJmYWNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgb2xkU3VyZmFjZS51bmhvb2tQcmVyZW5kZXIodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXdTdXJmYWNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3U3VyZmFjZS5ob29rUHJlcmVuZGVyKHRoaXMpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgVmlkZW9VcGRhdGVyLnByb3RvdHlwZS5wcmVSZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhc3NldHMgPSB0aGlzLmFzc2V0cztcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFzc2V0cy5zb3VyY2UgJiYgYXNzZXRzLnNvdXJjZS5nZXRJc1BsYXlpbmcoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW52YWxpZGF0ZSgpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIFZpZGVvVXBkYXRlcjtcbiAgICAgICAgICAgIH0pKGNvbnRyb2xzLmltYWdlLkltYWdlVXBkYXRlcik7XG4gICAgICAgICAgICB2aWRlby5WaWRlb1VwZGF0ZXIgPSBWaWRlb1VwZGF0ZXI7XG4gICAgICAgIH0pKHZpZGVvID0gY29udHJvbHMudmlkZW8gfHwgKGNvbnRyb2xzLnZpZGVvID0ge30pKTtcbiAgICB9KShjb250cm9scyA9IG1pbmVydmEuY29udHJvbHMgfHwgKG1pbmVydmEuY29udHJvbHMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb250cm9scztcbiAgICAoZnVuY3Rpb24gKGNvbnRyb2xzKSB7XG4gICAgICAgIHZhciB2aXJ0dWFsaXppbmdwYW5lbDtcbiAgICAgICAgKGZ1bmN0aW9uICh2aXJ0dWFsaXppbmdwYW5lbCkge1xuICAgICAgICAgICAgdmFyIFZpcnR1YWxpemluZ1BhbmVsVXBkYXRlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICAgICAgX19leHRlbmRzKFZpcnR1YWxpemluZ1BhbmVsVXBkYXRlciwgX3N1cGVyKTtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBWaXJ0dWFsaXppbmdQYW5lbFVwZGF0ZXIoKSB7XG4gICAgICAgICAgICAgICAgICAgIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBWaXJ0dWFsaXppbmdQYW5lbFVwZGF0ZXIucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0VHJlZShuZXcgdmlydHVhbGl6aW5ncGFuZWwuVmlydHVhbGl6aW5nUGFuZWxVcGRhdGVyVHJlZSgpKTtcbiAgICAgICAgICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5pbml0LmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gVmlydHVhbGl6aW5nUGFuZWxVcGRhdGVyO1xuICAgICAgICAgICAgfSkoY29udHJvbHMucGFuZWwuUGFuZWxVcGRhdGVyKTtcbiAgICAgICAgICAgIHZpcnR1YWxpemluZ3BhbmVsLlZpcnR1YWxpemluZ1BhbmVsVXBkYXRlciA9IFZpcnR1YWxpemluZ1BhbmVsVXBkYXRlcjtcbiAgICAgICAgfSkodmlydHVhbGl6aW5ncGFuZWwgPSBjb250cm9scy52aXJ0dWFsaXppbmdwYW5lbCB8fCAoY29udHJvbHMudmlydHVhbGl6aW5ncGFuZWwgPSB7fSkpO1xuICAgIH0pKGNvbnRyb2xzID0gbWluZXJ2YS5jb250cm9scyB8fCAobWluZXJ2YS5jb250cm9scyA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvbnRyb2xzO1xuICAgIChmdW5jdGlvbiAoY29udHJvbHMpIHtcbiAgICAgICAgdmFyIHZpcnR1YWxpemluZ3BhbmVsO1xuICAgICAgICAoZnVuY3Rpb24gKHZpcnR1YWxpemluZ3BhbmVsKSB7XG4gICAgICAgICAgICB2aXJ0dWFsaXppbmdwYW5lbC5OT19DT05UQUlORVJfT1dORVIgPSB7XG4gICAgICAgICAgICAgICAgaXRlbUNvdW50OiAwLFxuICAgICAgICAgICAgICAgIGNyZWF0ZUdlbmVyYXRvcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIChpbmRleCwgY291bnQpIHtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdmFyIFZpcnR1YWxpemluZ1BhbmVsVXBkYXRlclRyZWUgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgICAgIF9fZXh0ZW5kcyhWaXJ0dWFsaXppbmdQYW5lbFVwZGF0ZXJUcmVlLCBfc3VwZXIpO1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIFZpcnR1YWxpemluZ1BhbmVsVXBkYXRlclRyZWUoKSB7XG4gICAgICAgICAgICAgICAgICAgIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRhaW5lck93bmVyID0gdmlydHVhbGl6aW5ncGFuZWwuTk9fQ09OVEFJTkVSX09XTkVSO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gVmlydHVhbGl6aW5nUGFuZWxVcGRhdGVyVHJlZTtcbiAgICAgICAgICAgIH0pKGNvbnRyb2xzLnBhbmVsLlBhbmVsVXBkYXRlclRyZWUpO1xuICAgICAgICAgICAgdmlydHVhbGl6aW5ncGFuZWwuVmlydHVhbGl6aW5nUGFuZWxVcGRhdGVyVHJlZSA9IFZpcnR1YWxpemluZ1BhbmVsVXBkYXRlclRyZWU7XG4gICAgICAgIH0pKHZpcnR1YWxpemluZ3BhbmVsID0gY29udHJvbHMudmlydHVhbGl6aW5ncGFuZWwgfHwgKGNvbnRyb2xzLnZpcnR1YWxpemluZ3BhbmVsID0ge30pKTtcbiAgICB9KShjb250cm9scyA9IG1pbmVydmEuY29udHJvbHMgfHwgKG1pbmVydmEuY29udHJvbHMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vdmlydHVhbGl6aW5ncGFuZWwvVmlydHVhbGl6aW5nUGFuZWxVcGRhdGVyXCIgLz5cbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvbnRyb2xzO1xuICAgIChmdW5jdGlvbiAoY29udHJvbHMpIHtcbiAgICAgICAgdmFyIHZpcnR1YWxpemluZ3N0YWNrcGFuZWw7XG4gICAgICAgIChmdW5jdGlvbiAodmlydHVhbGl6aW5nc3RhY2twYW5lbCkge1xuICAgICAgICAgICAgdmFyIFZpcnR1YWxpemluZ1N0YWNrUGFuZWxVcGRhdGVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgICAgICBfX2V4dGVuZHMoVmlydHVhbGl6aW5nU3RhY2tQYW5lbFVwZGF0ZXIsIF9zdXBlcik7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gVmlydHVhbGl6aW5nU3RhY2tQYW5lbFVwZGF0ZXIoKSB7XG4gICAgICAgICAgICAgICAgICAgIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBWaXJ0dWFsaXppbmdTdGFja1BhbmVsVXBkYXRlci5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRNZWFzdXJlUGlwZShtaW5lcnZhLnNpbmdsZXRvbih2aXJ0dWFsaXppbmdzdGFja3BhbmVsLm1lYXN1cmUuVmlydHVhbGl6aW5nU3RhY2tQYW5lbE1lYXN1cmVQaXBlRGVmKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRBcnJhbmdlUGlwZShtaW5lcnZhLnNpbmdsZXRvbih2aXJ0dWFsaXppbmdzdGFja3BhbmVsLmFycmFuZ2UuVmlydHVhbGl6aW5nU3RhY2tQYW5lbEFycmFuZ2VQaXBlRGVmKSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhc3NldHMgPSB0aGlzLmFzc2V0cztcbiAgICAgICAgICAgICAgICAgICAgYXNzZXRzLm9yaWVudGF0aW9uID0gbWluZXJ2YS5PcmllbnRhdGlvbi5WZXJ0aWNhbDtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXRzLnNjcm9sbERhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYW5Ib3Jpem9udGFsbHlTY3JvbGw6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FuVmVydGljYWxseVNjcm9sbDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXRYOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WTogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlZE9mZnNldFg6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWNoZWRPZmZzZXRZOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmlld3BvcnRXaWR0aDogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdwb3J0SGVpZ2h0OiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXh0ZW50V2lkdGg6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBleHRlbnRIZWlnaHQ6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXhEZXNpcmVkV2lkdGg6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXhEZXNpcmVkSGVpZ2h0OiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgaW52YWxpZGF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLmluaXQuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybiBWaXJ0dWFsaXppbmdTdGFja1BhbmVsVXBkYXRlcjtcbiAgICAgICAgICAgIH0pKGNvbnRyb2xzLnZpcnR1YWxpemluZ3BhbmVsLlZpcnR1YWxpemluZ1BhbmVsVXBkYXRlcik7XG4gICAgICAgICAgICB2aXJ0dWFsaXppbmdzdGFja3BhbmVsLlZpcnR1YWxpemluZ1N0YWNrUGFuZWxVcGRhdGVyID0gVmlydHVhbGl6aW5nU3RhY2tQYW5lbFVwZGF0ZXI7XG4gICAgICAgIH0pKHZpcnR1YWxpemluZ3N0YWNrcGFuZWwgPSBjb250cm9scy52aXJ0dWFsaXppbmdzdGFja3BhbmVsIHx8IChjb250cm9scy52aXJ0dWFsaXppbmdzdGFja3BhbmVsID0ge30pKTtcbiAgICB9KShjb250cm9scyA9IG1pbmVydmEuY29udHJvbHMgfHwgKG1pbmVydmEuY29udHJvbHMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb3JlO1xuICAgIChmdW5jdGlvbiAoY29yZSkge1xuICAgICAgICB2YXIgYXJyYW5nZTtcbiAgICAgICAgKGZ1bmN0aW9uIChhcnJhbmdlKSB7XG4gICAgICAgICAgICB2YXIgQXJyYW5nZUJpbmRlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gQXJyYW5nZUJpbmRlcigpIHtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgQXJyYW5nZUJpbmRlci5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uICh1cGRhdGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhc3NldHMgPSB1cGRhdGVyLmFzc2V0cztcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRyZWUgPSB1cGRhdGVyLnRyZWU7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsYXN0ID0gYXNzZXRzLmxheW91dFNsb3QgfHwgdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXRyZWUudmlzdWFsUGFyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0ID0gbmV3IG1pbmVydmEuUmVjdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5leHBhbmRWaWV3cG9ydChsYXN0LCBhc3NldHMsIHRyZWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zaGlmdFZpZXdwb3J0KGxhc3QsIHVwZGF0ZXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChsYXN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXBkYXRlci5hcnJhbmdlKGxhc3QpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRyZWUudmlzdWFsUGFyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmVlLnZpc3VhbFBhcmVudC5pbnZhbGlkYXRlQXJyYW5nZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIEFycmFuZ2VCaW5kZXIucHJvdG90eXBlLmV4cGFuZFZpZXdwb3J0ID0gZnVuY3Rpb24gKHZpZXdwb3J0LCBhc3NldHMsIHRyZWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRyZWUuaXNMYXlvdXRDb250YWluZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbmVydmEuU2l6ZS5jb3B5VG8oYXNzZXRzLmRlc2lyZWRTaXplLCB2aWV3cG9ydCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHJlZS5zdXJmYWNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1lYXN1cmUgPSBhc3NldHMucHJldmlvdXNDb25zdHJhaW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbWluZXJ2YS5TaXplLmlzVW5kZWYobWVhc3VyZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlld3BvcnQud2lkdGggPSBNYXRoLm1heCh2aWV3cG9ydC53aWR0aCwgbWVhc3VyZS53aWR0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdwb3J0LmhlaWdodCA9IE1hdGgubWF4KHZpZXdwb3J0LmhlaWdodCwgbWVhc3VyZS5oZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlld3BvcnQud2lkdGggPSB0cmVlLnN1cmZhY2Uud2lkdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdwb3J0LmhlaWdodCA9IHRyZWUuc3VyZmFjZS5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmlld3BvcnQud2lkdGggPSBhc3NldHMuYWN0dWFsV2lkdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICB2aWV3cG9ydC5oZWlnaHQgPSBhc3NldHMuYWN0dWFsSGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBBcnJhbmdlQmluZGVyLnByb3RvdHlwZS5zaGlmdFZpZXdwb3J0ID0gZnVuY3Rpb24gKHZpZXdwb3J0LCB1cGRhdGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHZpZXdwb3J0LnggPSB1cGRhdGVyLmdldEF0dGFjaGVkVmFsdWUoXCJDYW52YXMuTGVmdFwiKSB8fCAwO1xuICAgICAgICAgICAgICAgICAgICB2aWV3cG9ydC55ID0gdXBkYXRlci5nZXRBdHRhY2hlZFZhbHVlKFwiQ2FudmFzLlRvcFwiKSB8fCAwO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIEFycmFuZ2VCaW5kZXI7XG4gICAgICAgICAgICB9KSgpO1xuICAgICAgICAgICAgYXJyYW5nZS5BcnJhbmdlQmluZGVyID0gQXJyYW5nZUJpbmRlcjtcbiAgICAgICAgfSkoYXJyYW5nZSA9IGNvcmUuYXJyYW5nZSB8fCAoY29yZS5hcnJhbmdlID0ge30pKTtcbiAgICB9KShjb3JlID0gbWluZXJ2YS5jb3JlIHx8IChtaW5lcnZhLmNvcmUgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb3JlO1xuICAgIChmdW5jdGlvbiAoY29yZSkge1xuICAgICAgICB2YXIgZHJhZnQ7XG4gICAgICAgIChmdW5jdGlvbiAoZHJhZnQpIHtcbiAgICAgICAgICAgIHZhciBEcmFmdFBpcGVEZWYgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgICAgIF9fZXh0ZW5kcyhEcmFmdFBpcGVEZWYsIF9zdXBlcik7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gRHJhZnRQaXBlRGVmKCkge1xuICAgICAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRUYXBpbignZmx1c2hQcmV2aW91cycsIGRyYWZ0LnRhcGlucy5mbHVzaFByZXZpb3VzKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZFRhcGluKCdkZXRlcm1pbmVQaGFzZScsIGRyYWZ0LnRhcGlucy5kZXRlcm1pbmVQaGFzZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRUYXBpbigncHJlcGFyZU1lYXN1cmUnLCBkcmFmdC50YXBpbnMucHJlcGFyZU1lYXN1cmUpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkVGFwaW4oJ21lYXN1cmUnLCBkcmFmdC50YXBpbnMubWVhc3VyZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRUYXBpbigncHJlcGFyZUFycmFuZ2UnLCBkcmFmdC50YXBpbnMucHJlcGFyZUFycmFuZ2UpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkVGFwaW4oJ2FycmFuZ2UnLCBkcmFmdC50YXBpbnMuYXJyYW5nZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRUYXBpbigncHJlcGFyZVNpemluZycsIGRyYWZ0LnRhcGlucy5wcmVwYXJlU2l6aW5nKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZFRhcGluKCdzaXppbmcnLCBkcmFmdC50YXBpbnMuc2l6aW5nKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZFRhcGluKCdub3RpZnlSZXNpemUnLCBkcmFmdC50YXBpbnMubm90aWZ5UmVzaXplKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgRHJhZnRQaXBlRGVmLnByb3RvdHlwZS5wcmVwYXJlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIERyYWZ0UGlwZURlZi5wcm90b3R5cGUuZmx1c2ggPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIERyYWZ0UGlwZURlZjtcbiAgICAgICAgICAgIH0pKG1pbmVydmEucGlwZS5QaXBlRGVmKTtcbiAgICAgICAgICAgIGRyYWZ0LkRyYWZ0UGlwZURlZiA9IERyYWZ0UGlwZURlZjtcbiAgICAgICAgfSkoZHJhZnQgPSBjb3JlLmRyYWZ0IHx8IChjb3JlLmRyYWZ0ID0ge30pKTtcbiAgICB9KShjb3JlID0gbWluZXJ2YS5jb3JlIHx8IChtaW5lcnZhLmNvcmUgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb3JlO1xuICAgIChmdW5jdGlvbiAoY29yZSkge1xuICAgICAgICB2YXIgaGl0dGVzdDtcbiAgICAgICAgKGZ1bmN0aW9uIChoaXR0ZXN0KSB7XG4gICAgICAgICAgICB2YXIgSGl0VGVzdFBpcGVEZWYgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgICAgIF9fZXh0ZW5kcyhIaXRUZXN0UGlwZURlZiwgX3N1cGVyKTtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBIaXRUZXN0UGlwZURlZigpIHtcbiAgICAgICAgICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkVGFwaW4oJ2NhbkhpdCcsIGhpdHRlc3QudGFwaW5zLmNhbkhpdClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRUYXBpbigncHJlcGFyZUN0eCcsIGhpdHRlc3QudGFwaW5zLnByZXBhcmVDdHgpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkVGFwaW4oJ2luc2lkZUNsaXAnLCBoaXR0ZXN0LnRhcGlucy5pbnNpZGVDbGlwKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZFRhcGluKCdpbnNpZGVDaGlsZHJlbicsIGhpdHRlc3QudGFwaW5zLmluc2lkZUNoaWxkcmVuKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZFRhcGluKCdjYW5IaXRJbnNpZGUnLCBoaXR0ZXN0LnRhcGlucy5jYW5IaXRJbnNpZGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkVGFwaW4oJ2luc2lkZU9iamVjdCcsIGhpdHRlc3QudGFwaW5zLmluc2lkZU9iamVjdClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRUYXBpbignaW5zaWRlTGF5b3V0Q2xpcCcsIGhpdHRlc3QudGFwaW5zLmluc2lkZUxheW91dENsaXApXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkVGFwaW4oJ2NvbXBsZXRlQ3R4JywgaGl0dGVzdC50YXBpbnMuY29tcGxldGVDdHgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gSGl0VGVzdFBpcGVEZWY7XG4gICAgICAgICAgICB9KShtaW5lcnZhLnBpcGUuUGlwZURlZik7XG4gICAgICAgICAgICBoaXR0ZXN0LkhpdFRlc3RQaXBlRGVmID0gSGl0VGVzdFBpcGVEZWY7XG4gICAgICAgIH0pKGhpdHRlc3QgPSBjb3JlLmhpdHRlc3QgfHwgKGNvcmUuaGl0dGVzdCA9IHt9KSk7XG4gICAgfSkoY29yZSA9IG1pbmVydmEuY29yZSB8fCAobWluZXJ2YS5jb3JlID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29yZTtcbiAgICAoZnVuY3Rpb24gKGNvcmUpIHtcbiAgICAgICAgdmFyIG1lYXN1cmU7XG4gICAgICAgIChmdW5jdGlvbiAobWVhc3VyZSkge1xuICAgICAgICAgICAgdmFyIE1lYXN1cmVCaW5kZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIE1lYXN1cmVCaW5kZXIoKSB7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIE1lYXN1cmVCaW5kZXIucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAodXBkYXRlcikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYXNzZXRzID0gdXBkYXRlci5hc3NldHM7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsYXN0ID0gYXNzZXRzLnByZXZpb3VzQ29uc3RyYWludDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9sZCA9IG5ldyBtaW5lcnZhLlNpemUoKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRyZWUgPSB1cGRhdGVyLnRyZWU7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdHJlZS5zdXJmYWNlICYmIG1pbmVydmEuU2l6ZS5pc1VuZGVmKGxhc3QpICYmICF0cmVlLnZpc3VhbFBhcmVudCAmJiB0cmVlLmlzTGF5b3V0Q29udGFpbmVyKVxuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdC53aWR0aCA9IGxhc3QuaGVpZ2h0ID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3VjY2VzcyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIW1pbmVydmEuU2l6ZS5pc1VuZGVmKGxhc3QpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLlNpemUuY29weVRvKGFzc2V0cy5kZXNpcmVkU2l6ZSwgb2xkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3MgPSB1cGRhdGVyLm1lYXN1cmUobGFzdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWluZXJ2YS5TaXplLmlzRXF1YWwob2xkLCBhc3NldHMuZGVzaXJlZFNpemUpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdWNjZXNzO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0cmVlLnZpc3VhbFBhcmVudClcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyZWUudmlzdWFsUGFyZW50LmludmFsaWRhdGVNZWFzdXJlKCk7XG4gICAgICAgICAgICAgICAgICAgIGFzc2V0cy5kaXJ0eUZsYWdzICY9IH5taW5lcnZhLkRpcnR5RmxhZ3MuTWVhc3VyZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN1Y2Nlc3M7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gTWVhc3VyZUJpbmRlcjtcbiAgICAgICAgICAgIH0pKCk7XG4gICAgICAgICAgICBtZWFzdXJlLk1lYXN1cmVCaW5kZXIgPSBNZWFzdXJlQmluZGVyO1xuICAgICAgICB9KShtZWFzdXJlID0gY29yZS5tZWFzdXJlIHx8IChjb3JlLm1lYXN1cmUgPSB7fSkpO1xuICAgIH0pKGNvcmUgPSBtaW5lcnZhLmNvcmUgfHwgKG1pbmVydmEuY29yZSA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvcmU7XG4gICAgKGZ1bmN0aW9uIChjb3JlKSB7XG4gICAgICAgIHZhciBwcm9jZXNzZG93bjtcbiAgICAgICAgKGZ1bmN0aW9uIChwcm9jZXNzZG93bikge1xuICAgICAgICAgICAgdmFyIFByb2Nlc3NEb3duUGlwZURlZiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICAgICAgX19leHRlbmRzKFByb2Nlc3NEb3duUGlwZURlZiwgX3N1cGVyKTtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBQcm9jZXNzRG93blBpcGVEZWYoKSB7XG4gICAgICAgICAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZFRhcGluKCdwcm9jZXNzUmVuZGVyVmlzaWJpbGl0eScsIHByb2Nlc3Nkb3duLnRhcGlucy5wcm9jZXNzUmVuZGVyVmlzaWJpbGl0eSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRUYXBpbigncHJvY2Vzc0hpdFRlc3RWaXNpYmlsaXR5JywgcHJvY2Vzc2Rvd24udGFwaW5zLnByb2Nlc3NIaXRUZXN0VmlzaWJpbGl0eSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRUYXBpbignY2FsY1hmb3JtT3JpZ2luJywgcHJvY2Vzc2Rvd24udGFwaW5zLmNhbGNYZm9ybU9yaWdpbilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRUYXBpbigncHJvY2Vzc0xvY2FsWGZvcm0nLCBwcm9jZXNzZG93bi50YXBpbnMucHJvY2Vzc0xvY2FsWGZvcm0pXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkVGFwaW4oJ2NhbGNSZW5kZXJYZm9ybScsIHByb2Nlc3Nkb3duLnRhcGlucy5jYWxjUmVuZGVyWGZvcm0pXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkVGFwaW4oJ2NhbGNBYnNvbHV0ZVhmb3JtJywgcHJvY2Vzc2Rvd24udGFwaW5zLmNhbGNBYnNvbHV0ZVhmb3JtKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZFRhcGluKCdwcm9jZXNzWGZvcm0nLCBwcm9jZXNzZG93bi50YXBpbnMucHJvY2Vzc1hmb3JtKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZFRhcGluKCdwcm9jZXNzTGF5b3V0Q2xpcCcsIHByb2Nlc3Nkb3duLnRhcGlucy5wcm9jZXNzTGF5b3V0Q2xpcClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRUYXBpbigncHJvcGFnYXRlRGlydHlUb0NoaWxkcmVuJywgcHJvY2Vzc2Rvd24udGFwaW5zLnByb3BhZ2F0ZURpcnR5VG9DaGlsZHJlbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFByb2Nlc3NEb3duUGlwZURlZi5wcm90b3R5cGUuY3JlYXRlU3RhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB4Zm9ybU9yaWdpbjogbmV3IG1pbmVydmEuUG9pbnQoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsWGZvcm06IG1pbmVydmEubWF0My5pZGVudGl0eSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3VidHJlZURvd25EaXJ0eTogMFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgUHJvY2Vzc0Rvd25QaXBlRGVmLnByb3RvdHlwZS5jcmVhdGVPdXRwdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b3RhbElzUmVuZGVyVmlzaWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3RhbE9wYWNpdHk6IDEuMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsSXNIaXRUZXN0VmlzaWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICB6OiBOYU4sXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wb3NpdGVMYXlvdXRDbGlwOiBuZXcgbWluZXJ2YS5SZWN0KCksXG4gICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJYZm9ybTogbWluZXJ2YS5tYXQzLmlkZW50aXR5KCksXG4gICAgICAgICAgICAgICAgICAgICAgICBhYnNvbHV0ZVhmb3JtOiBtaW5lcnZhLm1hdDMuaWRlbnRpdHkoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpcnR5RmxhZ3M6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdVcERpcnR5OiAwXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBQcm9jZXNzRG93blBpcGVEZWYucHJvdG90eXBlLnByZXBhcmUgPSBmdW5jdGlvbiAoaW5wdXQsIHN0YXRlLCBvdXRwdXQsIHZwaW5wdXQsIHRyZWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKChpbnB1dC5kaXJ0eUZsYWdzICYgbWluZXJ2YS5EaXJ0eUZsYWdzLkxvY2FsVHJhbnNmb3JtKSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LmRpcnR5RmxhZ3MgfD0gbWluZXJ2YS5EaXJ0eUZsYWdzLlRyYW5zZm9ybTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQuZGlydHlGbGFncyA9IGlucHV0LmRpcnR5RmxhZ3M7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dC50b3RhbElzUmVuZGVyVmlzaWJsZSA9IGlucHV0LnRvdGFsSXNSZW5kZXJWaXNpYmxlO1xuICAgICAgICAgICAgICAgICAgICBvdXRwdXQudG90YWxPcGFjaXR5ID0gaW5wdXQudG90YWxPcGFjaXR5O1xuICAgICAgICAgICAgICAgICAgICBvdXRwdXQudG90YWxJc0hpdFRlc3RWaXNpYmxlID0gaW5wdXQudG90YWxJc0hpdFRlc3RWaXNpYmxlO1xuICAgICAgICAgICAgICAgICAgICBvdXRwdXQueiA9IGlucHV0Lno7XG4gICAgICAgICAgICAgICAgICAgIG1pbmVydmEuUmVjdC5jb3B5VG8oaW5wdXQuY29tcG9zaXRlTGF5b3V0Q2xpcCwgb3V0cHV0LmNvbXBvc2l0ZUxheW91dENsaXApO1xuICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLm1hdDMuY29weVRvKGlucHV0LnJlbmRlclhmb3JtLCBvdXRwdXQucmVuZGVyWGZvcm0pO1xuICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLm1hdDMuY29weVRvKGlucHV0LmFic29sdXRlWGZvcm0sIG91dHB1dC5hYnNvbHV0ZVhmb3JtKTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUuc3VidHJlZURvd25EaXJ0eSA9IDA7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBQcm9jZXNzRG93blBpcGVEZWYucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24gKGlucHV0LCBzdGF0ZSwgb3V0cHV0LCB2cGlucHV0LCB0cmVlKSB7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dC5uZXdVcERpcnR5ID0gKG91dHB1dC5kaXJ0eUZsYWdzICYgfmlucHV0LmRpcnR5RmxhZ3MpICYgbWluZXJ2YS5EaXJ0eUZsYWdzLlVwRGlydHlTdGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQuZGlydHlGbGFncyA9IG91dHB1dC5kaXJ0eUZsYWdzICYgfm1pbmVydmEuRGlydHlGbGFncy5Eb3duRGlydHlTdGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQudG90YWxJc1JlbmRlclZpc2libGUgPSBvdXRwdXQudG90YWxJc1JlbmRlclZpc2libGU7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0LnRvdGFsT3BhY2l0eSA9IG91dHB1dC50b3RhbE9wYWNpdHk7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0LnRvdGFsSXNIaXRUZXN0VmlzaWJsZSA9IG91dHB1dC50b3RhbElzSGl0VGVzdFZpc2libGU7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0LnogPSBvdXRwdXQuejtcbiAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5SZWN0LmNvcHlUbyhvdXRwdXQuY29tcG9zaXRlTGF5b3V0Q2xpcCwgaW5wdXQuY29tcG9zaXRlTGF5b3V0Q2xpcCk7XG4gICAgICAgICAgICAgICAgICAgIG1pbmVydmEubWF0My5jb3B5VG8ob3V0cHV0LnJlbmRlclhmb3JtLCBpbnB1dC5yZW5kZXJYZm9ybSk7XG4gICAgICAgICAgICAgICAgICAgIG1pbmVydmEubWF0My5jb3B5VG8ob3V0cHV0LmFic29sdXRlWGZvcm0sIGlucHV0LmFic29sdXRlWGZvcm0pO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb2Nlc3NEb3duUGlwZURlZjtcbiAgICAgICAgICAgIH0pKG1pbmVydmEucGlwZS5UcmlQaXBlRGVmKTtcbiAgICAgICAgICAgIHByb2Nlc3Nkb3duLlByb2Nlc3NEb3duUGlwZURlZiA9IFByb2Nlc3NEb3duUGlwZURlZjtcbiAgICAgICAgfSkocHJvY2Vzc2Rvd24gPSBjb3JlLnByb2Nlc3Nkb3duIHx8IChjb3JlLnByb2Nlc3Nkb3duID0ge30pKTtcbiAgICB9KShjb3JlID0gbWluZXJ2YS5jb3JlIHx8IChtaW5lcnZhLmNvcmUgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb3JlO1xuICAgIChmdW5jdGlvbiAoY29yZSkge1xuICAgICAgICB2YXIgcHJvY2Vzc3VwO1xuICAgICAgICAoZnVuY3Rpb24gKHByb2Nlc3N1cCkge1xuICAgICAgICAgICAgdmFyIFByb2Nlc3NVcFBpcGVEZWYgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgICAgIF9fZXh0ZW5kcyhQcm9jZXNzVXBQaXBlRGVmLCBfc3VwZXIpO1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIFByb2Nlc3NVcFBpcGVEZWYoKSB7XG4gICAgICAgICAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZFRhcGluKCdjYWxjQWN0dWFsU2l6ZScsIHByb2Nlc3N1cC50YXBpbnMuY2FsY0FjdHVhbFNpemUpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkVGFwaW4oJ2NhbGNFeHRlbnRzJywgcHJvY2Vzc3VwLnRhcGlucy5jYWxjRXh0ZW50cylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRUYXBpbignY2FsY1BhaW50Qm91bmRzJywgcHJvY2Vzc3VwLnRhcGlucy5jYWxjUGFpbnRCb3VuZHMpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkVGFwaW4oJ3Byb2Nlc3NCb3VuZHMnLCBwcm9jZXNzdXAudGFwaW5zLnByb2Nlc3NCb3VuZHMpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkVGFwaW4oJ3Byb2Nlc3NOZXdCb3VuZHMnLCBwcm9jZXNzdXAudGFwaW5zLnByb2Nlc3NOZXdCb3VuZHMpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkVGFwaW4oJ3Byb2Nlc3NJbnZhbGlkYXRlJywgcHJvY2Vzc3VwLnRhcGlucy5wcm9jZXNzSW52YWxpZGF0ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFByb2Nlc3NVcFBpcGVEZWYucHJvdG90eXBlLmNyZWF0ZVN0YXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW52YWxpZGF0ZVN1YnRyZWVQYWludDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3R1YWxTaXplOiBuZXcgbWluZXJ2YS5TaXplKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBoYXNOZXdCb3VuZHM6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgaGFzSW52YWxpZGF0ZTogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIFByb2Nlc3NVcFBpcGVEZWYucHJvdG90eXBlLmNyZWF0ZU91dHB1dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4dGVudHM6IG5ldyBtaW5lcnZhLlJlY3QoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4dGVudHNXaXRoQ2hpbGRyZW46IG5ldyBtaW5lcnZhLlJlY3QoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbEJvdW5kc1dpdGhDaGlsZHJlbjogbmV3IG1pbmVydmEuUmVjdCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3VyZmFjZUJvdW5kc1dpdGhDaGlsZHJlbjogbmV3IG1pbmVydmEuUmVjdCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGlydHlGbGFnczogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpcnR5UmVnaW9uOiBuZXcgbWluZXJ2YS5SZWN0KCksXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JjZUludmFsaWRhdGU6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBQcm9jZXNzVXBQaXBlRGVmLnByb3RvdHlwZS5wcmVwYXJlID0gZnVuY3Rpb24gKGlucHV0LCBzdGF0ZSwgb3V0cHV0KSB7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dC5kaXJ0eUZsYWdzID0gaW5wdXQuZGlydHlGbGFncztcbiAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5SZWN0LmNvcHlUbyhpbnB1dC5leHRlbnRzLCBvdXRwdXQuZXh0ZW50cyk7XG4gICAgICAgICAgICAgICAgICAgIG1pbmVydmEuUmVjdC5jb3B5VG8oaW5wdXQuZXh0ZW50c1dpdGhDaGlsZHJlbiwgb3V0cHV0LmV4dGVudHNXaXRoQ2hpbGRyZW4pO1xuICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLlJlY3QuY29weVRvKGlucHV0Lmdsb2JhbEJvdW5kc1dpdGhDaGlsZHJlbiwgb3V0cHV0Lmdsb2JhbEJvdW5kc1dpdGhDaGlsZHJlbik7XG4gICAgICAgICAgICAgICAgICAgIG1pbmVydmEuUmVjdC5jb3B5VG8oaW5wdXQuc3VyZmFjZUJvdW5kc1dpdGhDaGlsZHJlbiwgb3V0cHV0LnN1cmZhY2VCb3VuZHNXaXRoQ2hpbGRyZW4pO1xuICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLlJlY3QuY29weVRvKGlucHV0LmRpcnR5UmVnaW9uLCBvdXRwdXQuZGlydHlSZWdpb24pO1xuICAgICAgICAgICAgICAgICAgICBvdXRwdXQuZm9yY2VJbnZhbGlkYXRlID0gaW5wdXQuZm9yY2VJbnZhbGlkYXRlO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgUHJvY2Vzc1VwUGlwZURlZi5wcm90b3R5cGUuZmx1c2ggPSBmdW5jdGlvbiAoaW5wdXQsIHN0YXRlLCBvdXRwdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQuZGlydHlGbGFncyA9IG91dHB1dC5kaXJ0eUZsYWdzICYgfm1pbmVydmEuRGlydHlGbGFncy5VcERpcnR5U3RhdGU7XG4gICAgICAgICAgICAgICAgICAgIG1pbmVydmEuUmVjdC5jb3B5VG8ob3V0cHV0LmV4dGVudHMsIGlucHV0LmV4dGVudHMpO1xuICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLlJlY3QuY29weVRvKG91dHB1dC5leHRlbnRzV2l0aENoaWxkcmVuLCBpbnB1dC5leHRlbnRzV2l0aENoaWxkcmVuKTtcbiAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5SZWN0LmNvcHlUbyhvdXRwdXQuZ2xvYmFsQm91bmRzV2l0aENoaWxkcmVuLCBpbnB1dC5nbG9iYWxCb3VuZHNXaXRoQ2hpbGRyZW4pO1xuICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLlJlY3QuY29weVRvKG91dHB1dC5zdXJmYWNlQm91bmRzV2l0aENoaWxkcmVuLCBpbnB1dC5zdXJmYWNlQm91bmRzV2l0aENoaWxkcmVuKTtcbiAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5SZWN0LmNvcHlUbyhvdXRwdXQuZGlydHlSZWdpb24sIGlucHV0LmRpcnR5UmVnaW9uKTtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQuZm9yY2VJbnZhbGlkYXRlID0gb3V0cHV0LmZvcmNlSW52YWxpZGF0ZTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9jZXNzVXBQaXBlRGVmO1xuICAgICAgICAgICAgfSkobWluZXJ2YS5waXBlLlRyaVBpcGVEZWYpO1xuICAgICAgICAgICAgcHJvY2Vzc3VwLlByb2Nlc3NVcFBpcGVEZWYgPSBQcm9jZXNzVXBQaXBlRGVmO1xuICAgICAgICB9KShwcm9jZXNzdXAgPSBjb3JlLnByb2Nlc3N1cCB8fCAoY29yZS5wcm9jZXNzdXAgPSB7fSkpO1xuICAgIH0pKGNvcmUgPSBtaW5lcnZhLmNvcmUgfHwgKG1pbmVydmEuY29yZSA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvcmU7XG4gICAgKGZ1bmN0aW9uIChjb3JlKSB7XG4gICAgICAgIHZhciByZW5kZXI7XG4gICAgICAgIChmdW5jdGlvbiAocmVuZGVyKSB7XG4gICAgICAgICAgICB2YXIgY2FwcyA9IFtcbiAgICAgICAgICAgICAgICBcImJ1dHRcIixcbiAgICAgICAgICAgICAgICBcInNxdWFyZVwiLFxuICAgICAgICAgICAgICAgIFwicm91bmRcIixcbiAgICAgICAgICAgICAgICBcImJ1dHRcIlxuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIHZhciBqb2lucyA9IFtcbiAgICAgICAgICAgICAgICBcIm1pdGVyXCIsXG4gICAgICAgICAgICAgICAgXCJiZXZlbFwiLFxuICAgICAgICAgICAgICAgIFwicm91bmRcIlxuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIHZhciBSZW5kZXJDb250ZXh0ID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBSZW5kZXJDb250ZXh0KGN0eCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiQkdHJhbnNmb3JtcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRUcmFuc2Zvcm0gPSBtaW5lcnZhLm1hdDMuaWRlbnRpdHkoKTtcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcywge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJyYXdcIjogeyB2YWx1ZTogY3R4LCB3cml0YWJsZTogZmFsc2UgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiY3VycmVudFRyYW5zZm9ybVwiOiB7IHZhbHVlOiBtaW5lcnZhLm1hdDMuaWRlbnRpdHkoKSwgd3JpdGFibGU6IGZhbHNlIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBcImhhc0ZpbGxSdWxlXCI6IHsgdmFsdWU6IFJlbmRlckNvbnRleHQuaGFzRmlsbFJ1bGUsIHdyaXRhYmxlOiBmYWxzZSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJzaXplXCI6IHsgdmFsdWU6IG5ldyByZW5kZXIuUmVuZGVyQ29udGV4dFNpemUoKSwgd3JpdGFibGU6IGZhbHNlIH0sXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNpemUuaW5pdChjdHgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVuZGVyQ29udGV4dCwgXCJoYXNGaWxsUnVsZVwiLCB7XG4gICAgICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5hdmlnYXRvci5hcHBOYW1lID09PSBcIk1pY3Jvc29mdCBJbnRlcm5ldCBFeHBsb3JlclwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZlcnNpb24gPSBnZXRJRVZlcnNpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmVyc2lvbiA8IDAgfHwgdmVyc2lvbiA+IDEwO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIFJlbmRlckNvbnRleHQucHJvdG90eXBlLmFwcGx5RHBpUmF0aW8gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByYXRpbyA9IHRoaXMuc2l6ZS5kcGlSYXRpbztcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zY2FsZShyYXRpbywgcmF0aW8pO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgUmVuZGVyQ29udGV4dC5wcm90b3R5cGUuc2F2ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kJHRyYW5zZm9ybXMucHVzaChtaW5lcnZhLm1hdDMuY3JlYXRlKHRoaXMuY3VycmVudFRyYW5zZm9ybSkpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJhdy5zYXZlKCk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBSZW5kZXJDb250ZXh0LnByb3RvdHlwZS5yZXN0b3JlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgb2xkID0gdGhpcy4kJHRyYW5zZm9ybXMucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvbGQpXG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLm1hdDMuY29weVRvKG9sZCwgdGhpcy5jdXJyZW50VHJhbnNmb3JtKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yYXcucmVzdG9yZSgpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgUmVuZGVyQ29udGV4dC5wcm90b3R5cGUuc2V0VHJhbnNmb3JtID0gZnVuY3Rpb24gKG0xMSwgbTEyLCBtMjEsIG0yMiwgZHgsIGR5KSB7XG4gICAgICAgICAgICAgICAgICAgIG1pbmVydmEubWF0My5jb3B5VG8oW20xMSwgbTEyLCBtMjEsIG0yMiwgZHgsIGR5XSwgdGhpcy5jdXJyZW50VHJhbnNmb3JtKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yYXcuc2V0VHJhbnNmb3JtKG0xMSwgbTEyLCBtMjEsIG0yMiwgZHgsIGR5KTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIFJlbmRlckNvbnRleHQucHJvdG90eXBlLnJlc2V0VHJhbnNmb3JtID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLm1hdDMuaWRlbnRpdHkodGhpcy5jdXJyZW50VHJhbnNmb3JtKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJhdyA9IHRoaXMucmF3O1xuICAgICAgICAgICAgICAgICAgICBpZiAocmF3LnJlc2V0VHJhbnNmb3JtKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmF3LnJlc2V0VHJhbnNmb3JtKCk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBSZW5kZXJDb250ZXh0LnByb3RvdHlwZS50cmFuc2Zvcm0gPSBmdW5jdGlvbiAobTExLCBtMTIsIG0yMSwgbTIyLCBkeCwgZHkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN0ID0gdGhpcy5jdXJyZW50VHJhbnNmb3JtO1xuICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLm1hdDMubXVsdGlwbHkoY3QsIG1pbmVydmEubWF0My5jcmVhdGUoW20xMSwgbTEyLCBtMjEsIG0yMiwgZHgsIGR5XSksIGN0KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yYXcudHJhbnNmb3JtKG0xMSwgbTEyLCBtMjEsIG0yMiwgZHgsIGR5KTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIFJlbmRlckNvbnRleHQucHJvdG90eXBlLnNjYWxlID0gZnVuY3Rpb24gKHgsIHkpIHtcbiAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5tYXQzLnNjYWxlKHRoaXMuY3VycmVudFRyYW5zZm9ybSwgeCwgeSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmF3LnNjYWxlKHgsIHkpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgUmVuZGVyQ29udGV4dC5wcm90b3R5cGUucm90YXRlID0gZnVuY3Rpb24gKGFuZ2xlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjdCA9IHRoaXMuY3VycmVudFRyYW5zZm9ybTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSBtaW5lcnZhLm1hdDMuY3JlYXRlUm90YXRlKGFuZ2xlKTtcbiAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5tYXQzLm11bHRpcGx5KGN0LCByLCBjdCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmF3LnJvdGF0ZShhbmdsZSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBSZW5kZXJDb250ZXh0LnByb3RvdHlwZS50cmFuc2xhdGUgPSBmdW5jdGlvbiAoeCwgeSkge1xuICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLm1hdDMudHJhbnNsYXRlKHRoaXMuY3VycmVudFRyYW5zZm9ybSwgeCwgeSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmF3LnRyYW5zbGF0ZSh4LCB5KTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIFJlbmRlckNvbnRleHQucHJvdG90eXBlLmFwcGx5ID0gZnVuY3Rpb24gKG1hdCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY3QgPSBtaW5lcnZhLm1hdDMuYXBwbHkodGhpcy5jdXJyZW50VHJhbnNmb3JtLCBtYXQpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJhdy5zZXRUcmFuc2Zvcm0oY3RbMF0sIGN0WzFdLCBjdFsyXSwgY3RbM10sIGN0WzRdLCBjdFs1XSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBSZW5kZXJDb250ZXh0LnByb3RvdHlwZS5wcmVhcHBseSA9IGZ1bmN0aW9uIChtYXQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN0ID0gbWluZXJ2YS5tYXQzLnByZWFwcGx5KHRoaXMuY3VycmVudFRyYW5zZm9ybSwgbWF0KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yYXcuc2V0VHJhbnNmb3JtKGN0WzBdLCBjdFsxXSwgY3RbMl0sIGN0WzNdLCBjdFs0XSwgY3RbNV0pO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgUmVuZGVyQ29udGV4dC5wcm90b3R5cGUuY2xpcEdlb21ldHJ5ID0gZnVuY3Rpb24gKGdlb20pIHtcbiAgICAgICAgICAgICAgICAgICAgZ2VvbS5EcmF3KHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJhdy5jbGlwKCk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBSZW5kZXJDb250ZXh0LnByb3RvdHlwZS5jbGlwUmVjdCA9IGZ1bmN0aW9uIChyZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByYXcgPSB0aGlzLnJhdztcbiAgICAgICAgICAgICAgICAgICAgcmF3LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgICAgICAgICByYXcucmVjdChyZWN0LngsIHJlY3QueSwgcmVjdC53aWR0aCwgcmVjdC5oZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICByYXcuY2xpcCgpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgUmVuZGVyQ29udGV4dC5wcm90b3R5cGUuZmlsbEV4ID0gZnVuY3Rpb24gKGJydXNoLCByZWdpb24sIGZpbGxSdWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByYXcgPSB0aGlzLnJhdztcbiAgICAgICAgICAgICAgICAgICAgYnJ1c2guc2V0dXBCcnVzaChyYXcsIHJlZ2lvbik7XG4gICAgICAgICAgICAgICAgICAgIHJhdy5maWxsU3R5bGUgPSBicnVzaC50b0h0bWw1T2JqZWN0KCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmaWxsUnVsZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByYXcuZmlsbFJ1bGUgPSByYXcubXNGaWxsUnVsZSA9IFwibm9uemVyb1wiO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmF3LmZpbGwoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmciA9IGZpbGxSdWxlID09PSBtaW5lcnZhLkZpbGxSdWxlLkV2ZW5PZGQgPyBcImV2ZW5vZGRcIiA6IFwibm9uemVyb1wiO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmF3LmZpbGxSdWxlID0gcmF3Lm1zRmlsbFJ1bGUgPSBmcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhdy5maWxsKGZyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgUmVuZGVyQ29udGV4dC5wcm90b3R5cGUuaXNQb2ludEluU3Ryb2tlRXggPSBmdW5jdGlvbiAoc3Ryb2tlUGFycywgeCwgeSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmF3ID0gdGhpcy5yYXc7XG4gICAgICAgICAgICAgICAgICAgIHJhdy5saW5lV2lkdGggPSBzdHJva2VQYXJzLnN0cm9rZVRoaWNrbmVzcztcbiAgICAgICAgICAgICAgICAgICAgcmF3LmxpbmVDYXAgPSBjYXBzW3N0cm9rZVBhcnMuc3Ryb2tlU3RhcnRMaW5lQ2FwIHx8IHN0cm9rZVBhcnMuc3Ryb2tlRW5kTGluZUNhcCB8fCAwXSB8fCBjYXBzWzBdO1xuICAgICAgICAgICAgICAgICAgICByYXcubGluZUpvaW4gPSBqb2luc1tzdHJva2VQYXJzLnN0cm9rZUxpbmVKb2luIHx8IDBdIHx8IGpvaW5zWzBdO1xuICAgICAgICAgICAgICAgICAgICByYXcubWl0ZXJMaW1pdCA9IHN0cm9rZVBhcnMuc3Ryb2tlTWl0ZXJMaW1pdDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJhdy5pc1BvaW50SW5TdHJva2UoeCwgeSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gUmVuZGVyQ29udGV4dDtcbiAgICAgICAgICAgIH0pKCk7XG4gICAgICAgICAgICByZW5kZXIuUmVuZGVyQ29udGV4dCA9IFJlbmRlckNvbnRleHQ7XG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRJRVZlcnNpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlID0gbmV3IFJlZ0V4cChcIk1TSUUgKFswLTldezEsfVtcXC4wLTldezAsfSlcIik7XG4gICAgICAgICAgICAgICAgaWYgKHJlLmV4ZWMobmF2aWdhdG9yLnVzZXJBZ2VudCkgIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQoUmVnRXhwLiQxKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKHJlbmRlciA9IGNvcmUucmVuZGVyIHx8IChjb3JlLnJlbmRlciA9IHt9KSk7XG4gICAgfSkoY29yZSA9IG1pbmVydmEuY29yZSB8fCAobWluZXJ2YS5jb3JlID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29yZTtcbiAgICAoZnVuY3Rpb24gKGNvcmUpIHtcbiAgICAgICAgdmFyIHJlbmRlcjtcbiAgICAgICAgKGZ1bmN0aW9uIChyZW5kZXIpIHtcbiAgICAgICAgICAgIHZhciBlcHNpbG9uID0gMWUtMTA7XG4gICAgICAgICAgICB2YXIgUmVuZGVyQ29udGV4dFNpemUgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIFJlbmRlckNvbnRleHRTaXplKCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiQkY3R4ID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kJGRlc2lyZWRXaWR0aCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJCRkZXNpcmVkSGVpZ2h0ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kJGNoYW5nZWQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiQkbGFzdERwaVJhdGlvID0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlbmRlckNvbnRleHRTaXplLnByb3RvdHlwZSwgXCJkZXNpcmVkV2lkdGhcIiwge1xuICAgICAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLiQkZGVzaXJlZFdpZHRoO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVuZGVyQ29udGV4dFNpemUucHJvdG90eXBlLCBcImRlc2lyZWRIZWlnaHRcIiwge1xuICAgICAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLiQkZGVzaXJlZEhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlbmRlckNvbnRleHRTaXplLnByb3RvdHlwZSwgXCJwYWludFdpZHRoXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy4kJGRlc2lyZWRXaWR0aCAqIHRoaXMuZHBpUmF0aW87XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZW5kZXJDb250ZXh0U2l6ZS5wcm90b3R5cGUsIFwicGFpbnRIZWlnaHRcIiwge1xuICAgICAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLiQkZGVzaXJlZEhlaWdodCAqIHRoaXMuZHBpUmF0aW87XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZW5kZXJDb250ZXh0U2l6ZS5wcm90b3R5cGUsIFwiZHBpUmF0aW9cIiwge1xuICAgICAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAod2luZG93LmRldmljZVBpeGVsUmF0aW8gfHwgMSkgLyB0aGlzLiQkY3R4LmJhY2tpbmdTdG9yZVBpeGVsUmF0aW87XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIFJlbmRlckNvbnRleHRTaXplLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKGN0eCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiQkY3R4ID0gY3R4O1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGVzaXJlZCA9IG1pbmVydmEuZ2V0TmF0dXJhbENhbnZhc1NpemUoY3R4LmNhbnZhcyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJCRkZXNpcmVkV2lkdGggPSBkZXNpcmVkLndpZHRoO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiQkZGVzaXJlZEhlaWdodCA9IGRlc2lyZWQuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiRhZGp1c3RDYW52YXMoKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIFJlbmRlckNvbnRleHRTaXplLnByb3RvdHlwZS5xdWV1ZVJlc2l6ZSA9IGZ1bmN0aW9uICh3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLiQkY2hhbmdlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kJGNoYW5nZWQud2lkdGggPSB3aWR0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJCRjaGFuZ2VkLmhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJCRjaGFuZ2VkID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIFJlbmRlckNvbnRleHRTaXplLnByb3RvdHlwZS5jb21taXRSZXNpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLiQkY2hhbmdlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKE1hdGguYWJzKHRoaXMuJCRjaGFuZ2VkLndpZHRoIC0gdGhpcy4kJGRlc2lyZWRXaWR0aCkgPCBlcHNpbG9uICYmIE1hdGguYWJzKHRoaXMuJCRjaGFuZ2VkLmhlaWdodCAtIHRoaXMuJCRkZXNpcmVkSGVpZ2h0KSA8IGVwc2lsb24pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kJGRlc2lyZWRXaWR0aCA9IHRoaXMuJCRjaGFuZ2VkLndpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kJGRlc2lyZWRIZWlnaHQgPSB0aGlzLiQkY2hhbmdlZC5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiQkY2hhbmdlZCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiRhZGp1c3RDYW52YXMoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIFJlbmRlckNvbnRleHRTaXplLnByb3RvdHlwZS51cGRhdGVEcGlSYXRpbyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuJCRsYXN0RHBpUmF0aW8gPT09IHRoaXMuZHBpUmF0aW8pXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJGFkanVzdENhbnZhcygpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIFJlbmRlckNvbnRleHRTaXplLnByb3RvdHlwZS4kYWRqdXN0Q2FudmFzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY2FudmFzID0gdGhpcy4kJGN0eC5jYW52YXM7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkcGlSYXRpbyA9IHRoaXMuZHBpUmF0aW87XG4gICAgICAgICAgICAgICAgICAgIGlmIChNYXRoLmFicyhkcGlSYXRpbyAtIDEpIDwgZXBzaWxvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FudmFzLndpZHRoID0gdGhpcy5kZXNpcmVkV2lkdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYW52YXMuaGVpZ2h0ID0gdGhpcy5kZXNpcmVkSGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FudmFzLndpZHRoID0gdGhpcy5wYWludFdpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FudmFzLmhlaWdodCA9IHRoaXMucGFpbnRIZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYW52YXMuc3R5bGUud2lkdGggPSB0aGlzLmRlc2lyZWRXaWR0aC50b1N0cmluZygpICsgXCJweFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FudmFzLnN0eWxlLmhlaWdodCA9IHRoaXMuZGVzaXJlZEhlaWdodC50b1N0cmluZygpICsgXCJweFwiO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJCRsYXN0RHBpUmF0aW8gPSBkcGlSYXRpbztcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybiBSZW5kZXJDb250ZXh0U2l6ZTtcbiAgICAgICAgICAgIH0pKCk7XG4gICAgICAgICAgICByZW5kZXIuUmVuZGVyQ29udGV4dFNpemUgPSBSZW5kZXJDb250ZXh0U2l6ZTtcbiAgICAgICAgfSkocmVuZGVyID0gY29yZS5yZW5kZXIgfHwgKGNvcmUucmVuZGVyID0ge30pKTtcbiAgICB9KShjb3JlID0gbWluZXJ2YS5jb3JlIHx8IChtaW5lcnZhLmNvcmUgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb3JlO1xuICAgIChmdW5jdGlvbiAoY29yZSkge1xuICAgICAgICB2YXIgcmVuZGVyO1xuICAgICAgICAoZnVuY3Rpb24gKHJlbmRlcikge1xuICAgICAgICAgICAgdmFyIFJlbmRlclBpcGVEZWYgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgICAgIF9fZXh0ZW5kcyhSZW5kZXJQaXBlRGVmLCBfc3VwZXIpO1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIFJlbmRlclBpcGVEZWYoKSB7XG4gICAgICAgICAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZFRhcGluKCd2YWxpZGF0ZScsIHJlbmRlci50YXBpbnMudmFsaWRhdGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkVGFwaW4oJ3ZhbGlkYXRlUmVnaW9uJywgcmVuZGVyLnRhcGlucy52YWxpZGF0ZVJlZ2lvbilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRUYXBpbigncHJlcGFyZUNvbnRleHQnLCByZW5kZXIudGFwaW5zLnByZXBhcmVDb250ZXh0KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZFRhcGluKCdhcHBseUNsaXAnLCByZW5kZXIudGFwaW5zLmFwcGx5Q2xpcClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRUYXBpbigncHJlUmVuZGVyJywgcmVuZGVyLnRhcGlucy5wcmVSZW5kZXIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkVGFwaW4oJ2RvUmVuZGVyJywgcmVuZGVyLnRhcGlucy5kb1JlbmRlcilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRUYXBpbigncG9zdFJlbmRlcicsIHJlbmRlci50YXBpbnMucG9zdFJlbmRlcilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRUYXBpbigncmVuZGVyQ2hpbGRyZW4nLCByZW5kZXIudGFwaW5zLnJlbmRlckNoaWxkcmVuKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZFRhcGluKCdyZXN0b3JlQ29udGV4dCcsIHJlbmRlci50YXBpbnMucmVzdG9yZUNvbnRleHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBSZW5kZXJQaXBlRGVmLnByb3RvdHlwZS5jcmVhdGVTdGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlclJlZ2lvbjogbmV3IG1pbmVydmEuUmVjdCgpXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBSZW5kZXJQaXBlRGVmLnByb3RvdHlwZS5jcmVhdGVPdXRwdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybiBSZW5kZXJQaXBlRGVmO1xuICAgICAgICAgICAgfSkobWluZXJ2YS5waXBlLlRyaVBpcGVEZWYpO1xuICAgICAgICAgICAgcmVuZGVyLlJlbmRlclBpcGVEZWYgPSBSZW5kZXJQaXBlRGVmO1xuICAgICAgICB9KShyZW5kZXIgPSBjb3JlLnJlbmRlciB8fCAoY29yZS5yZW5kZXIgPSB7fSkpO1xuICAgIH0pKGNvcmUgPSBtaW5lcnZhLmNvcmUgfHwgKG1pbmVydmEuY29yZSA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvcmU7XG4gICAgKGZ1bmN0aW9uIChjb3JlKSB7XG4gICAgICAgIHZhciBzaXppbmc7XG4gICAgICAgIChmdW5jdGlvbiAoc2l6aW5nKSB7XG4gICAgICAgICAgICB2YXIgU2l6aW5nUGlwZURlZiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICAgICAgX19leHRlbmRzKFNpemluZ1BpcGVEZWYsIF9zdXBlcik7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gU2l6aW5nUGlwZURlZigpIHtcbiAgICAgICAgICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkVGFwaW4oJ2NhbGNVc2VSZW5kZXInLCBzaXppbmcudGFwaW5zLmNhbGNVc2VSZW5kZXIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkVGFwaW4oJ2NvbXB1dGVBY3R1YWwnLCBzaXppbmcudGFwaW5zLmNvbXB1dGVBY3R1YWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBTaXppbmdQaXBlRGVmLnByb3RvdHlwZS5jcmVhdGVTdGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZVJlbmRlcjogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIFNpemluZ1BpcGVEZWYucHJvdG90eXBlLmNyZWF0ZU91dHB1dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdHVhbFNpemU6IG5ldyBtaW5lcnZhLlNpemUoKVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgU2l6aW5nUGlwZURlZi5wcm90b3R5cGUucHJlcGFyZSA9IGZ1bmN0aW9uIChpbnB1dCwgc3RhdGUsIG91dHB1dCwgdHJlZSkge1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgU2l6aW5nUGlwZURlZi5wcm90b3R5cGUuZmx1c2ggPSBmdW5jdGlvbiAoaW5wdXQsIHN0YXRlLCBvdXRwdXQsIHRyZWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFzID0gb3V0cHV0LmFjdHVhbFNpemU7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0LmFjdHVhbFdpZHRoID0gYXMud2lkdGg7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0LmFjdHVhbEhlaWdodCA9IGFzLmhlaWdodDtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybiBTaXppbmdQaXBlRGVmO1xuICAgICAgICAgICAgfSkobWluZXJ2YS5waXBlLlRyaVBpcGVEZWYpO1xuICAgICAgICAgICAgc2l6aW5nLlNpemluZ1BpcGVEZWYgPSBTaXppbmdQaXBlRGVmO1xuICAgICAgICB9KShzaXppbmcgPSBjb3JlLnNpemluZyB8fCAoY29yZS5zaXppbmcgPSB7fSkpO1xuICAgIH0pKGNvcmUgPSBtaW5lcnZhLmNvcmUgfHwgKG1pbmVydmEuY29yZSA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIHBhdGg7XG4gICAgKGZ1bmN0aW9uIChwYXRoKSB7XG4gICAgICAgIHZhciBzZWdtZW50cztcbiAgICAgICAgKGZ1bmN0aW9uIChzZWdtZW50cykge1xuICAgICAgICAgICAgZnVuY3Rpb24gYXJjKHgsIHksIHJhZGl1cywgc2EsIGVhLCBjYykge1xuICAgICAgICAgICAgICAgIHZhciBpbml0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB2YXIgc3g7XG4gICAgICAgICAgICAgICAgdmFyIHN5O1xuICAgICAgICAgICAgICAgIHZhciBleDtcbiAgICAgICAgICAgICAgICB2YXIgZXk7XG4gICAgICAgICAgICAgICAgdmFyIGw7XG4gICAgICAgICAgICAgICAgdmFyIHI7XG4gICAgICAgICAgICAgICAgdmFyIHQ7XG4gICAgICAgICAgICAgICAgdmFyIGI7XG4gICAgICAgICAgICAgICAgdmFyIGNsO1xuICAgICAgICAgICAgICAgIHZhciBjcjtcbiAgICAgICAgICAgICAgICB2YXIgY3Q7XG4gICAgICAgICAgICAgICAgdmFyIGNiO1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbml0ZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIHN4ID0geCArIChyYWRpdXMgKiBNYXRoLmNvcyhzYSkpO1xuICAgICAgICAgICAgICAgICAgICBzeSA9IHkgKyAocmFkaXVzICogTWF0aC5zaW4oc2EpKTtcbiAgICAgICAgICAgICAgICAgICAgZXggPSB4ICsgKHJhZGl1cyAqIE1hdGguY29zKGVhKSk7XG4gICAgICAgICAgICAgICAgICAgIGV5ID0geSArIChyYWRpdXMgKiBNYXRoLnNpbihlYSkpO1xuICAgICAgICAgICAgICAgICAgICBsID0geCAtIHJhZGl1cztcbiAgICAgICAgICAgICAgICAgICAgY2wgPSBhcmNDb250YWluc1BvaW50KHN4LCBzeSwgZXgsIGV5LCBsLCB5LCBjYyk7XG4gICAgICAgICAgICAgICAgICAgIHIgPSB4ICsgcmFkaXVzO1xuICAgICAgICAgICAgICAgICAgICBjciA9IGFyY0NvbnRhaW5zUG9pbnQoc3gsIHN5LCBleCwgZXksIHIsIHksIGNjKTtcbiAgICAgICAgICAgICAgICAgICAgdCA9IHkgLSByYWRpdXM7XG4gICAgICAgICAgICAgICAgICAgIGN0ID0gYXJjQ29udGFpbnNQb2ludChzeCwgc3ksIGV4LCBleSwgeCwgdCwgY2MpO1xuICAgICAgICAgICAgICAgICAgICBiID0geSArIHJhZGl1cztcbiAgICAgICAgICAgICAgICAgICAgY2IgPSBhcmNDb250YWluc1BvaW50KHN4LCBzeSwgZXgsIGV5LCB4LCBiLCBjYyk7XG4gICAgICAgICAgICAgICAgICAgIGluaXRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHN4OiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBzeTogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgaXNTaW5nbGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHg6IHgsXG4gICAgICAgICAgICAgICAgICAgIHk6IHksXG4gICAgICAgICAgICAgICAgICAgIGV4OiB4LFxuICAgICAgICAgICAgICAgICAgICBleTogeSxcbiAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiByYWRpdXMsXG4gICAgICAgICAgICAgICAgICAgIHNBbmdsZTogc2EsXG4gICAgICAgICAgICAgICAgICAgIGVBbmdsZTogZWEsXG4gICAgICAgICAgICAgICAgICAgIGFDbG9ja3dpc2U6IGNjLFxuICAgICAgICAgICAgICAgICAgICBkcmF3OiBmdW5jdGlvbiAoY3R4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHguYXJjKHgsIHksIHJhZGl1cywgc2EsIGVhLCBjYyk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGV4dGVuZEZpbGxCb3g6IGZ1bmN0aW9uIChib3gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlYSA9PT0gc2EpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5pdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5leCA9IGV4O1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5leSA9IGV5O1xuICAgICAgICAgICAgICAgICAgICAgICAgYm94LmwgPSBNYXRoLm1pbihib3gubCwgc3gsIGV4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJveC5yID0gTWF0aC5tYXgoYm94LnIsIHN4LCBleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3gudCA9IE1hdGgubWluKGJveC50LCBzeSwgZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYm94LmIgPSBNYXRoLm1heChib3guYiwgc3ksIGV5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjbClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3gubCA9IE1hdGgubWluKGJveC5sLCBsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjcilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3guciA9IE1hdGgubWF4KGJveC5yLCByKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3gudCA9IE1hdGgubWluKGJveC50LCB0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjYilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3guYiA9IE1hdGgubWF4KGJveC5iLCBiKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZXh0ZW5kU3Ryb2tlQm94OiBmdW5jdGlvbiAoYm94LCBwYXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWEgPT09IHNhKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluaXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZXggPSBleDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZXkgPSBleTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJveC5sID0gTWF0aC5taW4oYm94LmwsIHN4LCBleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3guciA9IE1hdGgubWF4KGJveC5yLCBzeCwgZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYm94LnQgPSBNYXRoLm1pbihib3gudCwgc3ksIGV5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJveC5iID0gTWF0aC5tYXgoYm94LmIsIHN5LCBleSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaHMgPSBwYXJzLnN0cm9rZVRoaWNrbmVzcyAvIDIuMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjbClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3gubCA9IE1hdGgubWluKGJveC5sLCBsIC0gaHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNyKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJveC5yID0gTWF0aC5tYXgoYm94LnIsIHIgKyBocyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3QpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYm94LnQgPSBNYXRoLm1pbihib3gudCwgdCAtIGhzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjYilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3guYiA9IE1hdGgubWF4KGJveC5iLCBiICsgaHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNhcCA9IHBhcnMuc3Ryb2tlU3RhcnRMaW5lQ2FwIHx8IHBhcnMuc3Ryb2tlRW5kTGluZUNhcCB8fCAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN2ID0gdGhpcy5nZXRTdGFydFZlY3RvcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3ZbMF0gPSAtc3ZbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICBzdlsxXSA9IC1zdlsxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzcyA9IGdldENhcFNwcmVhZChzeCwgc3ksIHBhcnMuc3Ryb2tlVGhpY2tuZXNzLCBjYXAsIHN2KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBldiA9IHRoaXMuZ2V0RW5kVmVjdG9yKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXMgPSBnZXRDYXBTcHJlYWQoZXgsIGV5LCBwYXJzLnN0cm9rZVRoaWNrbmVzcywgY2FwLCBldik7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3gubCA9IE1hdGgubWluKGJveC5sLCBzcy54MSwgc3MueDIsIGVzLngxLCBlcy54Mik7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3guciA9IE1hdGgubWF4KGJveC5yLCBzcy54MSwgc3MueDIsIGVzLngxLCBlcy54Mik7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3gudCA9IE1hdGgubWluKGJveC50LCBzcy55MSwgc3MueTIsIGVzLnkxLCBlcy55Mik7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3guYiA9IE1hdGgubWF4KGJveC5iLCBzcy55MSwgc3MueTIsIGVzLnkxLCBlcy55Mik7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZ2V0U3RhcnRWZWN0b3I6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBydiA9IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzeCAtIHgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3kgLSB5XG4gICAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNjKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbcnZbMV0sIC1ydlswXV07XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWy1ydlsxXSwgcnZbMF1dO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBnZXRFbmRWZWN0b3I6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBydiA9IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleCAtIHgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXkgLSB5XG4gICAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNjKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbcnZbMV0sIC1ydlswXV07XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWy1ydlsxXSwgcnZbMF1dO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWdtZW50cy5hcmMgPSBhcmM7XG4gICAgICAgICAgICBmdW5jdGlvbiBhcmNDb250YWluc1BvaW50KHN4LCBzeSwgZXgsIGV5LCBjcHgsIGNweSwgY2MpIHtcbiAgICAgICAgICAgICAgICB2YXIgbiA9IChleCAtIHN4KSAqIChjcHkgLSBzeSkgLSAoY3B4IC0gc3gpICogKGV5IC0gc3kpO1xuICAgICAgICAgICAgICAgIGlmIChuID09PSAwKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICBpZiAobiA+IDAgJiYgY2MpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIGlmIChuIDwgMCAmJiAhY2MpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldENhcFNwcmVhZCh4LCB5LCB0aGlja25lc3MsIGNhcCwgdmVjdG9yKSB7XG4gICAgICAgICAgICAgICAgdmFyIGhzID0gdGhpY2tuZXNzIC8gMi4wO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoY2FwKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgbWluZXJ2YS5QZW5MaW5lQ2FwLlJvdW5kOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4MTogeCAtIGhzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgyOiB4ICsgaHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeTE6IHkgLSBocyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5MjogeSArIGhzXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgbWluZXJ2YS5QZW5MaW5lQ2FwLlNxdWFyZTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlZCA9IG5vcm1hbGl6ZVZlY3Rvcih2ZWN0b3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVkbyA9IHBlcnBlbmRpY3VsYXJWZWN0b3IoZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4MTogeCArIGhzICogKGVkWzBdICsgZWRvWzBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4MjogeCArIGhzICogKGVkWzBdIC0gZWRvWzBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5MTogeSArIGhzICogKGVkWzFdICsgZWRvWzFdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5MjogeSArIGhzICogKGVkWzFdIC0gZWRvWzFdKVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIG1pbmVydmEuUGVuTGluZUNhcC5GbGF0OlxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVkID0gbm9ybWFsaXplVmVjdG9yKHZlY3Rvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZWRvID0gcGVycGVuZGljdWxhclZlY3RvcihlZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgxOiB4ICsgaHMgKiBlZG9bMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeDI6IHggKyBocyAqIC1lZG9bMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeTE6IHkgKyBocyAqIGVkb1sxXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5MjogeSArIGhzICogLWVkb1sxXVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIG5vcm1hbGl6ZVZlY3Rvcih2KSB7XG4gICAgICAgICAgICAgICAgdmFyIGxlbiA9IE1hdGguc3FydCh2WzBdICogdlswXSArIHZbMV0gKiB2WzFdKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgICAgICB2WzBdIC8gbGVuLFxuICAgICAgICAgICAgICAgICAgICB2WzFdIC8gbGVuXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIHBlcnBlbmRpY3VsYXJWZWN0b3Iodikge1xuICAgICAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgICAgIC12WzFdLFxuICAgICAgICAgICAgICAgICAgICB2WzBdXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkoc2VnbWVudHMgPSBwYXRoLnNlZ21lbnRzIHx8IChwYXRoLnNlZ21lbnRzID0ge30pKTtcbiAgICB9KShwYXRoID0gbWluZXJ2YS5wYXRoIHx8IChtaW5lcnZhLnBhdGggPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG5mdW5jdGlvbiByYWRUb0RlZ3JlZXMocmFkKSB7XG4gICAgcmV0dXJuIHJhZCAqIDE4MCAvIE1hdGguUEk7XG59XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBwYXRoO1xuICAgIChmdW5jdGlvbiAocGF0aCkge1xuICAgICAgICB2YXIgc2VnbWVudHM7XG4gICAgICAgIChmdW5jdGlvbiAoc2VnbWVudHMpIHtcbiAgICAgICAgICAgIHZhciBFUFNJTE9OID0gMWUtMTA7XG4gICAgICAgICAgICBmdW5jdGlvbiBhcmNUbyhjcHgsIGNweSwgeCwgeSwgcmFkaXVzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxpbmU7XG4gICAgICAgICAgICAgICAgdmFyIGFyYztcbiAgICAgICAgICAgICAgICB2YXIgaW5pdGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gaW5pdChwcmV2WCwgcHJldlkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluaXRlZClcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxpbmUgJiYgYXJjKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFyYztcbiAgICAgICAgICAgICAgICAgICAgdmFyIHYxID0gW2NweCAtIHByZXZYLCBjcHkgLSBwcmV2WV07XG4gICAgICAgICAgICAgICAgICAgIHZhciB2MiA9IFt4IC0gY3B4LCB5IC0gY3B5XTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlubmVyX3RoZXRhID0gTWF0aC5QSSAtIG1pbmVydmEuVmVjdG9yLmFuZ2xlQmV0d2Vlbih2MSwgdjIpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IGdldFRhbmdlbnRQb2ludChpbm5lcl90aGV0YSwgcmFkaXVzLCBbcHJldlgsIHByZXZZXSwgdjEsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYiA9IGdldFRhbmdlbnRQb2ludChpbm5lcl90aGV0YSwgcmFkaXVzLCBbY3B4LCBjcHldLCB2MiwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYyA9IGdldFBlcnBlbmRpY3VsYXJJbnRlcnNlY3Rpb25zKGEsIHYxLCBiLCB2Mik7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjYyA9ICFtaW5lcnZhLlZlY3Rvci5pc0Nsb2Nrd2lzZVRvKHYxLCB2Mik7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzYSA9IE1hdGguYXRhbjIoYVsxXSAtIGNbMV0sIGFbMF0gLSBjWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNhIDwgMClcbiAgICAgICAgICAgICAgICAgICAgICAgIHNhID0gKDIgKiBNYXRoLlBJKSArIHNhO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZWEgPSBNYXRoLmF0YW4yKGJbMV0gLSBjWzFdLCBiWzBdIC0gY1swXSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlYSA8IDApXG4gICAgICAgICAgICAgICAgICAgICAgICBlYSA9ICgyICogTWF0aC5QSSkgKyBlYTtcbiAgICAgICAgICAgICAgICAgICAgbGluZSA9IHNlZ21lbnRzLmxpbmUoYVswXSwgYVsxXSk7XG4gICAgICAgICAgICAgICAgICAgIGxpbmUuc3ggPSBwcmV2WDtcbiAgICAgICAgICAgICAgICAgICAgbGluZS5zeSA9IHByZXZZO1xuICAgICAgICAgICAgICAgICAgICBhcmMgPSBzZWdtZW50cy5hcmMoY1swXSwgY1sxXSwgcmFkaXVzLCBzYSwgZWEsIGNjKTtcbiAgICAgICAgICAgICAgICAgICAgaW5pdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgc3g6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHN5OiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBpc1NpbmdsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGNweDogY3B4LFxuICAgICAgICAgICAgICAgICAgICBjcHk6IGNweSxcbiAgICAgICAgICAgICAgICAgICAgeDogeCxcbiAgICAgICAgICAgICAgICAgICAgeTogeSxcbiAgICAgICAgICAgICAgICAgICAgZXg6IHgsXG4gICAgICAgICAgICAgICAgICAgIGV5OiB5LFxuICAgICAgICAgICAgICAgICAgICByYWRpdXM6IHJhZGl1cyxcbiAgICAgICAgICAgICAgICAgICAgZHJhdzogZnVuY3Rpb24gKGN0eCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3R4LmFyY1RvKGNweCwgY3B5LCB4LCB5LCByYWRpdXMpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBleHRlbmRGaWxsQm94OiBmdW5jdGlvbiAoYm94KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbml0KHRoaXMuc3gsIHRoaXMuc3kpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5leCA9IGFyYy5leDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZXkgPSBhcmMuZXk7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3gubCA9IE1hdGgubWluKGJveC5sLCB0aGlzLnN4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJveC5yID0gTWF0aC5tYXgoYm94LnIsIHRoaXMuc3gpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYm94LnQgPSBNYXRoLm1pbihib3gudCwgdGhpcy5zeSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3guYiA9IE1hdGgubWF4KGJveC5iLCB0aGlzLnN5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmUuZXh0ZW5kRmlsbEJveChib3gpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJjLmV4dGVuZEZpbGxCb3goYm94KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZXh0ZW5kU3Ryb2tlQm94OiBmdW5jdGlvbiAoYm94LCBwYXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbml0KHRoaXMuc3gsIHRoaXMuc3kpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5leCA9IGFyYy5leDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZXkgPSBhcmMuZXk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaHMgPSBwYXJzLnN0cm9rZVRoaWNrbmVzcyAvIDI7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3gubCA9IE1hdGgubWluKGJveC5sLCB0aGlzLnN4IC0gaHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYm94LnIgPSBNYXRoLm1heChib3guciwgdGhpcy5zeCArIGhzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJveC50ID0gTWF0aC5taW4oYm94LnQsIHRoaXMuc3kgLSBocyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3guYiA9IE1hdGgubWF4KGJveC5iLCB0aGlzLnN5ICsgaHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGluZS5leHRlbmRTdHJva2VCb3goYm94LCBwYXJzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyYy5leHRlbmRTdHJva2VCb3goYm94LCBwYXJzKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBnZXRTdGFydFZlY3RvcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5pdCh0aGlzLnN4LCB0aGlzLnN5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBsaW5lLmdldFN0YXJ0VmVjdG9yKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGdldEVuZFZlY3RvcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFyYy5nZXRFbmRWZWN0b3IoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWdtZW50cy5hcmNUbyA9IGFyY1RvO1xuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0VGFuZ2VudFBvaW50KHRoZXRhLCByYWRpdXMsIHMsIGQsIGludmVydCkge1xuICAgICAgICAgICAgICAgIHZhciBsZW4gPSBNYXRoLnNxcnQoZFswXSAqIGRbMF0gKyBkWzFdICogZFsxXSk7XG4gICAgICAgICAgICAgICAgdmFyIGYgPSByYWRpdXMgLyBNYXRoLnRhbih0aGV0YSAvIDIpO1xuICAgICAgICAgICAgICAgIHZhciB0ID0gZiAvIGxlbjtcbiAgICAgICAgICAgICAgICBpZiAoaW52ZXJ0KVxuICAgICAgICAgICAgICAgICAgICB0ID0gMSAtIHQ7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtzWzBdICsgdCAqIGRbMF0sIHNbMV0gKyB0ICogZFsxXV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRQZXJwZW5kaWN1bGFySW50ZXJzZWN0aW9ucyhzMSwgZDEsIHMyLCBkMikge1xuICAgICAgICAgICAgICAgIHJldHVybiBtaW5lcnZhLlZlY3Rvci5pbnRlcnNlY3Rpb24oczEsIG1pbmVydmEuVmVjdG9yLm9ydGhvZ29uYWwoZDEuc2xpY2UoMCkpLCBzMiwgbWluZXJ2YS5WZWN0b3Iub3J0aG9nb25hbChkMi5zbGljZSgwKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KShzZWdtZW50cyA9IHBhdGguc2VnbWVudHMgfHwgKHBhdGguc2VnbWVudHMgPSB7fSkpO1xuICAgIH0pKHBhdGggPSBtaW5lcnZhLnBhdGggfHwgKG1pbmVydmEucGF0aCA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIHBhdGg7XG4gICAgKGZ1bmN0aW9uIChwYXRoKSB7XG4gICAgICAgIHZhciBzZWdtZW50cztcbiAgICAgICAgKGZ1bmN0aW9uIChzZWdtZW50cykge1xuICAgICAgICAgICAgZnVuY3Rpb24gY2xvc2UoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgc3g6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHN5OiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBleDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgZXk6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIGlzU2luZ2xlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgaXNDbG9zZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZHJhdzogZnVuY3Rpb24gKGN0eCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBleHRlbmRGaWxsQm94OiBmdW5jdGlvbiAoYm94KSB7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGV4dGVuZFN0cm9rZUJveDogZnVuY3Rpb24gKGJveCwgcGFycykge1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB0b1N0cmluZzogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiWlwiO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBnZXRTdGFydFZlY3RvcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGdldEVuZFZlY3RvcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VnbWVudHMuY2xvc2UgPSBjbG9zZTtcbiAgICAgICAgfSkoc2VnbWVudHMgPSBwYXRoLnNlZ21lbnRzIHx8IChwYXRoLnNlZ21lbnRzID0ge30pKTtcbiAgICB9KShwYXRoID0gbWluZXJ2YS5wYXRoIHx8IChtaW5lcnZhLnBhdGggPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBwYXRoO1xuICAgIChmdW5jdGlvbiAocGF0aCkge1xuICAgICAgICB2YXIgc2VnbWVudHM7XG4gICAgICAgIChmdW5jdGlvbiAoc2VnbWVudHMpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGN1YmljQmV6aWVyKGNwMXgsIGNwMXksIGNwMngsIGNwMnksIHgsIHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBzeDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgc3k6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIGV4OiB4LFxuICAgICAgICAgICAgICAgICAgICBleTogeSxcbiAgICAgICAgICAgICAgICAgICAgaXNTaW5nbGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBjcDF4OiBjcDF4LFxuICAgICAgICAgICAgICAgICAgICBjcDF5OiBjcDF5LFxuICAgICAgICAgICAgICAgICAgICBjcDJ4OiBjcDJ4LFxuICAgICAgICAgICAgICAgICAgICBjcDJ5OiBjcDJ5LFxuICAgICAgICAgICAgICAgICAgICB4OiB4LFxuICAgICAgICAgICAgICAgICAgICB5OiB5LFxuICAgICAgICAgICAgICAgICAgICBkcmF3OiBmdW5jdGlvbiAoY3R4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHguYmV6aWVyQ3VydmVUbyhjcDF4LCBjcDF5LCBjcDJ4LCBjcDJ5LCB4LCB5KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZXh0ZW5kRmlsbEJveDogZnVuY3Rpb24gKGJveCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG0gPSBnZXRNYXhpbWEodGhpcy5zeCwgY3AxeCwgY3AyeCwgeCwgdGhpcy5zeSwgY3AxeSwgY3AyeSwgeSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobS54WzBdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3gubCA9IE1hdGgubWluKGJveC5sLCBtLnhbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJveC5yID0gTWF0aC5tYXgoYm94LnIsIG0ueFswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobS54WzFdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3gubCA9IE1hdGgubWluKGJveC5sLCBtLnhbMV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJveC5yID0gTWF0aC5tYXgoYm94LnIsIG0ueFsxXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobS55WzBdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3gudCA9IE1hdGgubWluKGJveC50LCBtLnlbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJveC5iID0gTWF0aC5tYXgoYm94LmIsIG0ueVswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobS55WzFdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3gudCA9IE1hdGgubWluKGJveC50LCBtLnlbMV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJveC5iID0gTWF0aC5tYXgoYm94LmIsIG0ueVsxXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBib3gubCA9IE1hdGgubWluKGJveC5sLCB4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJveC5yID0gTWF0aC5tYXgoYm94LnIsIHgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYm94LnQgPSBNYXRoLm1pbihib3gudCwgeSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3guYiA9IE1hdGgubWF4KGJveC5iLCB5KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZXh0ZW5kU3Ryb2tlQm94OiBmdW5jdGlvbiAoYm94LCBwYXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaHMgPSBwYXJzLnN0cm9rZVRoaWNrbmVzcyAvIDIuMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtID0gZ2V0TWF4aW1hKHRoaXMuc3gsIGNwMXgsIGNwMngsIHgsIHRoaXMuc3ksIGNwMXksIGNwMnksIHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG0ueFswXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYm94LmwgPSBNYXRoLm1pbihib3gubCwgbS54WzBdIC0gaHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJveC5yID0gTWF0aC5tYXgoYm94LnIsIG0ueFswXSArIGhzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtLnhbMV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJveC5sID0gTWF0aC5taW4oYm94LmwsIG0ueFsxXSAtIGhzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3guciA9IE1hdGgubWF4KGJveC5yLCBtLnhbMV0gKyBocyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobS55WzBdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3gudCA9IE1hdGgubWluKGJveC50LCBtLnlbMF0gLSBocyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYm94LmIgPSBNYXRoLm1heChib3guYiwgbS55WzBdICsgaHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG0ueVsxXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYm94LnQgPSBNYXRoLm1pbihib3gudCwgbS55WzFdIC0gaHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJveC5iID0gTWF0aC5tYXgoYm94LmIsIG0ueVsxXSArIGhzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJveC5sID0gTWF0aC5taW4oYm94LmwsIHgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYm94LnIgPSBNYXRoLm1heChib3guciwgeCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3gudCA9IE1hdGgubWluKGJveC50LCB5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJveC5iID0gTWF0aC5tYXgoYm94LmIsIHkpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB0b1N0cmluZzogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiQ1wiICsgY3AxeC50b1N0cmluZygpICsgXCIsXCIgKyBjcDF5LnRvU3RyaW5nKCkgKyBcIiBcIiArIGNwMngudG9TdHJpbmcoKSArIFwiLFwiICsgY3AyeS50b1N0cmluZygpICsgXCIgXCIgKyB4LnRvU3RyaW5nKCkgKyBcIixcIiArIHkudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZ2V0U3RhcnRWZWN0b3I6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgMyAqIChjcDF4IC0gdGhpcy5zeCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgMyAqIChjcDF5IC0gdGhpcy5zeSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGdldEVuZFZlY3RvcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAzICogKHggLSBjcDJ4KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAzICogKHkgLSBjcDJ5KVxuICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWdtZW50cy5jdWJpY0JlemllciA9IGN1YmljQmV6aWVyO1xuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0TWF4aW1hKHgxLCB4MiwgeDMsIHg0LCB5MSwgeTIsIHkzLCB5NCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHg6IGNvZCh4MSwgeDIsIHgzLCB4NCksXG4gICAgICAgICAgICAgICAgICAgIHk6IGNvZCh5MSwgeTIsIHkzLCB5NClcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gY29kKGEsIGIsIGMsIGQpIHtcbiAgICAgICAgICAgICAgICB2YXIgdSA9IDIgKiBhIC0gNCAqIGIgKyAyICogYztcbiAgICAgICAgICAgICAgICB2YXIgdiA9IGIgLSBhO1xuICAgICAgICAgICAgICAgIHZhciB3ID0gLWEgKyAzICogYiArIGQgLSAzICogYztcbiAgICAgICAgICAgICAgICB2YXIgcnQgPSBNYXRoLnNxcnQodSAqIHUgLSA0ICogdiAqIHcpO1xuICAgICAgICAgICAgICAgIHZhciBjb2RzID0gW251bGwsIG51bGxdO1xuICAgICAgICAgICAgICAgIGlmIChpc05hTihydCkpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb2RzO1xuICAgICAgICAgICAgICAgIHZhciB0LCBvdDtcbiAgICAgICAgICAgICAgICB0ID0gKC11ICsgcnQpIC8gKDIgKiB3KTtcbiAgICAgICAgICAgICAgICBpZiAodCA+PSAwICYmIHQgPD0gMSkge1xuICAgICAgICAgICAgICAgICAgICBvdCA9IDEgLSB0O1xuICAgICAgICAgICAgICAgICAgICBjb2RzWzBdID0gKGEgKiBvdCAqIG90ICogb3QpICsgKDMgKiBiICogdCAqIG90ICogb3QpICsgKDMgKiBjICogb3QgKiB0ICogdCkgKyAoZCAqIHQgKiB0ICogdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHQgPSAoLXUgLSBydCkgLyAoMiAqIHcpO1xuICAgICAgICAgICAgICAgIGlmICh0ID49IDAgJiYgdCA8PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIG90ID0gMSAtIHQ7XG4gICAgICAgICAgICAgICAgICAgIGNvZHNbMV0gPSAoYSAqIG90ICogb3QgKiBvdCkgKyAoMyAqIGIgKiB0ICogb3QgKiBvdCkgKyAoMyAqIGMgKiBvdCAqIHQgKiB0KSArIChkICogdCAqIHQgKiB0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvZHM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKHNlZ21lbnRzID0gcGF0aC5zZWdtZW50cyB8fCAocGF0aC5zZWdtZW50cyA9IHt9KSk7XG4gICAgfSkocGF0aCA9IG1pbmVydmEucGF0aCB8fCAobWluZXJ2YS5wYXRoID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgcGF0aDtcbiAgICAoZnVuY3Rpb24gKHBhdGgpIHtcbiAgICAgICAgdmFyIHNlZ21lbnRzO1xuICAgICAgICAoZnVuY3Rpb24gKHNlZ21lbnRzKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBlbGxpcHNlKHgsIHksIHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmFkaXVzWCA9IHdpZHRoIC8gMjtcbiAgICAgICAgICAgICAgICB2YXIgcmFkaXVzWSA9IGhlaWdodCAvIDI7XG4gICAgICAgICAgICAgICAgdmFyIHJpZ2h0ID0geCArIHdpZHRoO1xuICAgICAgICAgICAgICAgIHZhciBib3R0b20gPSB5ICsgaGVpZ2h0O1xuICAgICAgICAgICAgICAgIHZhciBjZW50ZXJYID0geCArIHJhZGl1c1g7XG4gICAgICAgICAgICAgICAgdmFyIGNlbnRlclkgPSB5ICsgcmFkaXVzWTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBzeDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgc3k6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIGV4OiB4LFxuICAgICAgICAgICAgICAgICAgICBleTogeSxcbiAgICAgICAgICAgICAgICAgICAgaXNTaW5nbGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHg6IHgsXG4gICAgICAgICAgICAgICAgICAgIHk6IHksXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgIGRyYXc6IGZ1bmN0aW9uIChjdHgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3aWR0aCA9PT0gaGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3R4LmFyYyhjZW50ZXJYLCBjZW50ZXJZLCByYWRpdXNYLCAwLCBNYXRoLlBJICogMiwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBrYXBwYSA9IC41NTIyODQ4O1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG94ID0gcmFkaXVzWCAqIGthcHBhO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG95ID0gcmFkaXVzWSAqIGthcHBhO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3R4Lm1vdmVUbyh4LCBjZW50ZXJZKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5iZXppZXJDdXJ2ZVRvKHgsIGNlbnRlclkgLSBveSwgY2VudGVyWCAtIG94LCB5LCBjZW50ZXJYLCB5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5iZXppZXJDdXJ2ZVRvKGNlbnRlclggKyBveCwgeSwgcmlnaHQsIGNlbnRlclkgLSBveSwgcmlnaHQsIGNlbnRlclkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3R4LmJlemllckN1cnZlVG8ocmlnaHQsIGNlbnRlclkgKyBveSwgY2VudGVyWCArIG94LCBib3R0b20sIGNlbnRlclgsIGJvdHRvbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHguYmV6aWVyQ3VydmVUbyhjZW50ZXJYIC0gb3gsIGJvdHRvbSwgeCwgY2VudGVyWSArIG95LCB4LCBjZW50ZXJZKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZXh0ZW5kRmlsbEJveDogZnVuY3Rpb24gKGJveCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYm94LmwgPSBNYXRoLm1pbihib3gubCwgeCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3guciA9IE1hdGgubWF4KGJveC5yLCB4ICsgd2lkdGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYm94LnQgPSBNYXRoLm1pbihib3gudCwgeSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3guYiA9IE1hdGgubWF4KGJveC5iLCB5ICsgaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZXh0ZW5kU3Ryb2tlQm94OiBmdW5jdGlvbiAoYm94LCBwYXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaHMgPSBwYXJzLnN0cm9rZVRoaWNrbmVzcyAvIDIuMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJveC5sID0gTWF0aC5taW4oYm94LmwsIHggLSBocyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3guciA9IE1hdGgubWF4KGJveC5yLCB4ICsgd2lkdGggKyBocyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3gudCA9IE1hdGgubWluKGJveC50LCB5IC0gaHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYm94LmIgPSBNYXRoLm1heChib3guYiwgeSArIGhlaWdodCArIGhzKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZ2V0U3RhcnRWZWN0b3I6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBnZXRFbmRWZWN0b3I6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlZ21lbnRzLmVsbGlwc2UgPSBlbGxpcHNlO1xuICAgICAgICB9KShzZWdtZW50cyA9IHBhdGguc2VnbWVudHMgfHwgKHBhdGguc2VnbWVudHMgPSB7fSkpO1xuICAgIH0pKHBhdGggPSBtaW5lcnZhLnBhdGggfHwgKG1pbmVydmEucGF0aCA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIHBhdGg7XG4gICAgKGZ1bmN0aW9uIChwYXRoKSB7XG4gICAgICAgIHZhciBzZWdtZW50cztcbiAgICAgICAgKGZ1bmN0aW9uIChzZWdtZW50c18xKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBlbGxpcHRpY2FsQXJjKHJ4LCByeSwgcm90YXRpb25BbmdsZSwgaXNMYXJnZUFyY0ZsYWcsIHN3ZWVwRGlyZWN0aW9uRmxhZywgZXgsIGV5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgc3g6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHN5OiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBpc1NpbmdsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHJ4OiByeCxcbiAgICAgICAgICAgICAgICAgICAgcnk6IHJ5LFxuICAgICAgICAgICAgICAgICAgICByb3RhdGlvbkFuZ2xlOiByb3RhdGlvbkFuZ2xlLFxuICAgICAgICAgICAgICAgICAgICBpc0xhcmdlQXJjRmxhZzogaXNMYXJnZUFyY0ZsYWcsXG4gICAgICAgICAgICAgICAgICAgIHN3ZWVwRGlyZWN0aW9uRmxhZzogc3dlZXBEaXJlY3Rpb25GbGFnLFxuICAgICAgICAgICAgICAgICAgICBleDogZXgsXG4gICAgICAgICAgICAgICAgICAgIGV5OiBleSxcbiAgICAgICAgICAgICAgICAgICAgc3ViOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBkcmF3OiBmdW5jdGlvbiAoY3R4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN1YiA9IHRoaXMuc3ViIHx8IGJ1aWxkU2VnbWVudHModGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgc3ViID0gdGhpcy5zdWIsIGxlbiA9IHN1Yi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YltpXS5kcmF3KGN0eCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGV4dGVuZEZpbGxCb3g6IGZ1bmN0aW9uIChib3gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3ViID0gdGhpcy5zdWIgfHwgYnVpbGRTZWdtZW50cyh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBzdWIgPSB0aGlzLnN1YiwgbGVuID0gc3ViLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViW2ldLmV4dGVuZEZpbGxCb3goYm94KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZXh0ZW5kU3Ryb2tlQm94OiBmdW5jdGlvbiAoYm94LCBwYXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN1YiA9IHRoaXMuc3ViIHx8IGJ1aWxkU2VnbWVudHModGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgc3ViID0gdGhpcy5zdWIsIGxlbiA9IHN1Yi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YltpXS5leHRlbmRTdHJva2VCb3goYm94LCBwYXJzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIkFcIiArIHJ4LnRvU3RyaW5nKCkgKyBcIixcIiArIHJ5LnRvU3RyaW5nKCkgKyBcIiBcIiArIHJvdGF0aW9uQW5nbGUudG9TdHJpbmcoKSArIFwiIFwiICsgaXNMYXJnZUFyY0ZsYWcudG9TdHJpbmcoKSArIFwiIFwiICsgc3dlZXBEaXJlY3Rpb25GbGFnLnRvU3RyaW5nKCkgKyBcIiBcIiArIGV4LnRvU3RyaW5nKCkgKyBcIixcIiArIGV5LnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGdldFN0YXJ0VmVjdG9yOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN1YiA9IHRoaXMuc3ViIHx8IGJ1aWxkU2VnbWVudHModGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3ViID0gdGhpcy5zdWJbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3ViID8gc3ViLmdldFN0YXJ0VmVjdG9yKCkgOiBbMCwgMF07XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGdldEVuZFZlY3RvcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdWIgPSB0aGlzLnN1YiB8fCBidWlsZFNlZ21lbnRzKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN1YiA9IHRoaXMuc3ViW3RoaXMuc3ViLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN1YiA/IHN1Yi5nZXRFbmRWZWN0b3IoKSA6IFswLCAwXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWdtZW50c18xLmVsbGlwdGljYWxBcmMgPSBlbGxpcHRpY2FsQXJjO1xuICAgICAgICAgICAgdmFyIE5PX0RSQVdfRVBTSUxPTiA9IDAuMDAwMDAyO1xuICAgICAgICAgICAgdmFyIFpFUk9fRVBTSUxPTiA9IDAuMDAwMDE5O1xuICAgICAgICAgICAgdmFyIFNNQUxMX0VQU0lMT04gPSAwLjAwMDExNztcbiAgICAgICAgICAgIGZ1bmN0aW9uIGJ1aWxkU2VnbWVudHMoZWEpIHtcbiAgICAgICAgICAgICAgICAvLyBmcm9tIHRlc3RzIGl0IHNlZW1zIHRoYXQgU2lsdmVybGlnaHQgY2xvc2VseSBmb2xsb3dzIFNWRyBhcmNcbiAgICAgICAgICAgICAgICAvLyBiZWhhdmlvciAod2hpY2ggaXMgdmVyeSBkaWZmZXJlbnQgZnJvbSB0aGUgbW9kZWwgdXNlZCB3aXRoIEdESSspXG4gICAgICAgICAgICAgICAgLy8gc29tZSBoZWxwZnVsIHN0dWZmIGlzIGF2YWlsYWJsZSBoZXJlOlxuICAgICAgICAgICAgICAgIC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL1NWRy9pbXBsbm90ZS5odG1sI0FyY0ltcGxlbWVudGF0aW9uTm90ZXNcbiAgICAgICAgICAgICAgICB2YXIgc2VnbWVudHMgPSBbXTtcbiAgICAgICAgICAgICAgICB2YXIgc3ggPSBlYS5zeCwgc3kgPSBlYS5zeSwgZXggPSBlYS5leCwgZXkgPSBlYS5leSwgcnggPSBlYS5yeCwgcnkgPSBlYS5yeTtcbiAgICAgICAgICAgICAgICBpZiAoTWF0aC5hYnMoZXggLSBzeCkgPCBOT19EUkFXX0VQU0lMT04gJiYgTWF0aC5hYnMoZXkgLSBzeSkgPCBOT19EUkFXX0VQU0lMT04pXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWdtZW50cztcbiAgICAgICAgICAgICAgICBpZiAoTWF0aC5hYnMocngpIDwgWkVST19FUFNJTE9OIHx8IE1hdGguYWJzKHJ5KSA8IFpFUk9fRVBTSUxPTikge1xuICAgICAgICAgICAgICAgICAgICBzZWdtZW50cy5wdXNoKHNlZ21lbnRzXzEubGluZShleCwgZXkpKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlZ21lbnRzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoTWF0aC5hYnMocngpIDwgU01BTExfRVBTSUxPTiB8fCBNYXRoLmFicyhyeSkgPCBTTUFMTF9FUFNJTE9OKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWdtZW50cztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcnggPSBNYXRoLmFicyhyeCk7XG4gICAgICAgICAgICAgICAgcnkgPSBNYXRoLmFicyhyeSk7XG4gICAgICAgICAgICAgICAgdmFyIGFuZ2xlID0gZWEucm90YXRpb25BbmdsZSAqIE1hdGguUEkgLyAxODAuMDtcbiAgICAgICAgICAgICAgICB2YXIgY29zX3BoaSA9IE1hdGguY29zKGFuZ2xlKTtcbiAgICAgICAgICAgICAgICB2YXIgc2luX3BoaSA9IE1hdGguc2luKGFuZ2xlKTtcbiAgICAgICAgICAgICAgICB2YXIgZHgyID0gKHN4IC0gZXgpIC8gMi4wO1xuICAgICAgICAgICAgICAgIHZhciBkeTIgPSAoc3kgLSBleSkgLyAyLjA7XG4gICAgICAgICAgICAgICAgdmFyIHgxcCA9IGNvc19waGkgKiBkeDIgKyBzaW5fcGhpICogZHkyO1xuICAgICAgICAgICAgICAgIHZhciB5MXAgPSBjb3NfcGhpICogZHkyIC0gc2luX3BoaSAqIGR4MjtcbiAgICAgICAgICAgICAgICB2YXIgeDFwMiA9IHgxcCAqIHgxcDtcbiAgICAgICAgICAgICAgICB2YXIgeTFwMiA9IHkxcCAqIHkxcDtcbiAgICAgICAgICAgICAgICB2YXIgcngyID0gcnggKiByeDtcbiAgICAgICAgICAgICAgICB2YXIgcnkyID0gcnkgKiByeTtcbiAgICAgICAgICAgICAgICB2YXIgbGFtYmRhID0gKHgxcDIgLyByeDIpICsgKHkxcDIgLyByeTIpO1xuICAgICAgICAgICAgICAgIGlmIChsYW1iZGEgPiAxLjApIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxhbWJkYV9yb290ID0gTWF0aC5zcXJ0KGxhbWJkYSk7XG4gICAgICAgICAgICAgICAgICAgIHJ4ICo9IGxhbWJkYV9yb290O1xuICAgICAgICAgICAgICAgICAgICByeSAqPSBsYW1iZGFfcm9vdDtcbiAgICAgICAgICAgICAgICAgICAgcngyID0gcnggKiByeDtcbiAgICAgICAgICAgICAgICAgICAgcnkyID0gcnkgKiByeTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGN4cCwgY3lwLCBjeCwgY3k7XG4gICAgICAgICAgICAgICAgdmFyIGMgPSAocngyICogcnkyKSAtIChyeDIgKiB5MXAyKSAtIChyeTIgKiB4MXAyKTtcbiAgICAgICAgICAgICAgICB2YXIgbGFyZ2UgPSBlYS5pc0xhcmdlQXJjRmxhZyA9PT0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB2YXIgc3dlZXAgPSBlYS5zd2VlcERpcmVjdGlvbkZsYWcgPT09IG1pbmVydmEuU3dlZXBEaXJlY3Rpb24uQ2xvY2t3aXNlO1xuICAgICAgICAgICAgICAgIGlmIChjIDwgMC4wKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzY2FsZSA9IE1hdGguc3FydCgxLjAgLSBjIC8gKHJ4MiAqIHJ5MikpO1xuICAgICAgICAgICAgICAgICAgICByeCAqPSBzY2FsZTtcbiAgICAgICAgICAgICAgICAgICAgcnkgKj0gc2NhbGU7XG4gICAgICAgICAgICAgICAgICAgIHJ4MiA9IHJ4ICogcng7XG4gICAgICAgICAgICAgICAgICAgIHJ5MiA9IHJ5ICogcnk7XG4gICAgICAgICAgICAgICAgICAgIGN4cCA9IDAuMDtcbiAgICAgICAgICAgICAgICAgICAgY3lwID0gMC4wO1xuICAgICAgICAgICAgICAgICAgICBjeCA9IDAuMDtcbiAgICAgICAgICAgICAgICAgICAgY3kgPSAwLjA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjID0gTWF0aC5zcXJ0KGMgLyAoKHJ4MiAqIHkxcDIpICsgKHJ5MiAqIHgxcDIpKSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChsYXJnZSA9PT0gc3dlZXApXG4gICAgICAgICAgICAgICAgICAgICAgICBjID0gLWM7XG4gICAgICAgICAgICAgICAgICAgIGN4cCA9IGMgKiAocnggKiB5MXAgLyByeSk7XG4gICAgICAgICAgICAgICAgICAgIGN5cCA9IGMgKiAoLXJ5ICogeDFwIC8gcngpO1xuICAgICAgICAgICAgICAgICAgICBjeCA9IGNvc19waGkgKiBjeHAgLSBzaW5fcGhpICogY3lwO1xuICAgICAgICAgICAgICAgICAgICBjeSA9IHNpbl9waGkgKiBjeHAgKyBjb3NfcGhpICogY3lwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjeCArPSAoc3ggKyBleCkgLyAyLjA7XG4gICAgICAgICAgICAgICAgY3kgKz0gKHN5ICsgZXkpIC8gMi4wO1xuICAgICAgICAgICAgICAgIHZhciBhdCA9IE1hdGguYXRhbjIoKCh5MXAgLSBjeXApIC8gcnkpLCAoKHgxcCAtIGN4cCkgLyByeCkpO1xuICAgICAgICAgICAgICAgIHZhciB0aGV0YTEgPSAoYXQgPCAwLjApID8gMi4wICogTWF0aC5QSSArIGF0IDogYXQ7XG4gICAgICAgICAgICAgICAgdmFyIG5hdCA9IE1hdGguYXRhbjIoKCgteTFwIC0gY3lwKSAvIHJ5KSwgKCgteDFwIC0gY3hwKSAvIHJ4KSk7XG4gICAgICAgICAgICAgICAgdmFyIGRlbHRhX3RoZXRhID0gKG5hdCA8IGF0KSA/IDIuMCAqIE1hdGguUEkgLSBhdCArIG5hdCA6IG5hdCAtIGF0O1xuICAgICAgICAgICAgICAgIGlmIChzd2VlcCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGVsdGFfdGhldGEgPCAwLjApXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWx0YV90aGV0YSArPSAyLjAgKiBNYXRoLlBJO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRlbHRhX3RoZXRhID4gMC4wKVxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsdGFfdGhldGEgLT0gMi4wICogTWF0aC5QSTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHNlZ21lbnRfY291bnQgPSBNYXRoLmZsb29yKE1hdGguYWJzKGRlbHRhX3RoZXRhIC8gKE1hdGguUEkgLyAyKSkpICsgMTtcbiAgICAgICAgICAgICAgICB2YXIgZGVsdGEgPSBkZWx0YV90aGV0YSAvIHNlZ21lbnRfY291bnQ7XG4gICAgICAgICAgICAgICAgdmFyIGJjcCA9IDQuMCAvIDMgKiAoMSAtIE1hdGguY29zKGRlbHRhIC8gMikpIC8gTWF0aC5zaW4oZGVsdGEgLyAyKTtcbiAgICAgICAgICAgICAgICB2YXIgY29zX3BoaV9yeCA9IGNvc19waGkgKiByeDtcbiAgICAgICAgICAgICAgICB2YXIgY29zX3BoaV9yeSA9IGNvc19waGkgKiByeTtcbiAgICAgICAgICAgICAgICB2YXIgc2luX3BoaV9yeCA9IHNpbl9waGkgKiByeDtcbiAgICAgICAgICAgICAgICB2YXIgc2luX3BoaV9yeSA9IHNpbl9waGkgKiByeTtcbiAgICAgICAgICAgICAgICB2YXIgY29zX3RoZXRhMSA9IE1hdGguY29zKHRoZXRhMSk7XG4gICAgICAgICAgICAgICAgdmFyIHNpbl90aGV0YTEgPSBNYXRoLnNpbih0aGV0YTEpO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VnbWVudF9jb3VudDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0aGV0YTIgPSB0aGV0YTEgKyBkZWx0YTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvc190aGV0YTIgPSBNYXRoLmNvcyh0aGV0YTIpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2luX3RoZXRhMiA9IE1hdGguc2luKHRoZXRhMik7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjMXggPSBzeCAtIGJjcCAqIChjb3NfcGhpX3J4ICogc2luX3RoZXRhMSArIHNpbl9waGlfcnkgKiBjb3NfdGhldGExKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGMxeSA9IHN5ICsgYmNwICogKGNvc19waGlfcnkgKiBjb3NfdGhldGExIC0gc2luX3BoaV9yeCAqIHNpbl90aGV0YTEpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgY3VyX2V4ID0gY3ggKyAoY29zX3BoaV9yeCAqIGNvc190aGV0YTIgLSBzaW5fcGhpX3J5ICogc2luX3RoZXRhMik7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjdXJfZXkgPSBjeSArIChzaW5fcGhpX3J4ICogY29zX3RoZXRhMiArIGNvc19waGlfcnkgKiBzaW5fdGhldGEyKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGMyeCA9IGN1cl9leCArIGJjcCAqIChjb3NfcGhpX3J4ICogc2luX3RoZXRhMiArIHNpbl9waGlfcnkgKiBjb3NfdGhldGEyKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGMyeSA9IGN1cl9leSArIGJjcCAqIChzaW5fcGhpX3J4ICogc2luX3RoZXRhMiAtIGNvc19waGlfcnkgKiBjb3NfdGhldGEyKTtcbiAgICAgICAgICAgICAgICAgICAgc2VnbWVudHMucHVzaChzZWdtZW50c18xLmN1YmljQmV6aWVyKGMxeCwgYzF5LCBjMngsIGMyeSwgY3VyX2V4LCBjdXJfZXkpKTtcbiAgICAgICAgICAgICAgICAgICAgc3ggPSBjdXJfZXg7XG4gICAgICAgICAgICAgICAgICAgIHN5ID0gY3VyX2V5O1xuICAgICAgICAgICAgICAgICAgICB0aGV0YTEgPSB0aGV0YTI7XG4gICAgICAgICAgICAgICAgICAgIGNvc190aGV0YTEgPSBjb3NfdGhldGEyO1xuICAgICAgICAgICAgICAgICAgICBzaW5fdGhldGExID0gc2luX3RoZXRhMjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlZ21lbnRzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KShzZWdtZW50cyA9IHBhdGguc2VnbWVudHMgfHwgKHBhdGguc2VnbWVudHMgPSB7fSkpO1xuICAgIH0pKHBhdGggPSBtaW5lcnZhLnBhdGggfHwgKG1pbmVydmEucGF0aCA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIHBhdGg7XG4gICAgKGZ1bmN0aW9uIChwYXRoKSB7XG4gICAgICAgIHZhciBzZWdtZW50cztcbiAgICAgICAgKGZ1bmN0aW9uIChzZWdtZW50cykge1xuICAgICAgICAgICAgZnVuY3Rpb24gbGluZSh4LCB5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgaXNTaW5nbGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBzeDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgc3k6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHg6IHgsXG4gICAgICAgICAgICAgICAgICAgIHk6IHksXG4gICAgICAgICAgICAgICAgICAgIGV4OiB4LFxuICAgICAgICAgICAgICAgICAgICBleTogeSxcbiAgICAgICAgICAgICAgICAgICAgZHJhdzogZnVuY3Rpb24gKGN0eCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3R4LmxpbmVUbyh4LCB5KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZXh0ZW5kRmlsbEJveDogZnVuY3Rpb24gKGJveCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYm94LmwgPSBNYXRoLm1pbihib3gubCwgeCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3guciA9IE1hdGgubWF4KGJveC5yLCB4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJveC50ID0gTWF0aC5taW4oYm94LnQsIHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYm94LmIgPSBNYXRoLm1heChib3guYiwgeSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGV4dGVuZFN0cm9rZUJveDogZnVuY3Rpb24gKGJveCwgcGFycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5leHRlbmRGaWxsQm94KGJveCk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJMXCIgKyB4LnRvU3RyaW5nKCkgKyBcIixcIiArIHkudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZ2V0U3RhcnRWZWN0b3I6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeCAtIHRoaXMuc3gsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeSAtIHRoaXMuc3lcbiAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGdldEVuZFZlY3RvcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4IC0gdGhpcy5zeCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5IC0gdGhpcy5zeVxuICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWdtZW50cy5saW5lID0gbGluZTtcbiAgICAgICAgfSkoc2VnbWVudHMgPSBwYXRoLnNlZ21lbnRzIHx8IChwYXRoLnNlZ21lbnRzID0ge30pKTtcbiAgICB9KShwYXRoID0gbWluZXJ2YS5wYXRoIHx8IChtaW5lcnZhLnBhdGggPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBwYXRoO1xuICAgIChmdW5jdGlvbiAocGF0aCkge1xuICAgICAgICB2YXIgc2VnbWVudHM7XG4gICAgICAgIChmdW5jdGlvbiAoc2VnbWVudHMpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIG1vdmUoeCwgeSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHN4OiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBzeTogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgZXg6IHgsXG4gICAgICAgICAgICAgICAgICAgIGV5OiB5LFxuICAgICAgICAgICAgICAgICAgICBpc1NpbmdsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGlzTW92ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgeDogeCxcbiAgICAgICAgICAgICAgICAgICAgeTogeSxcbiAgICAgICAgICAgICAgICAgICAgZHJhdzogZnVuY3Rpb24gKGN0eCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3R4Lm1vdmVUbyh4LCB5KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZXh0ZW5kRmlsbEJveDogZnVuY3Rpb24gKGJveCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYm94LmwgPSBNYXRoLm1pbihib3gubCwgeCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3guciA9IE1hdGgubWF4KGJveC5yLCB4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJveC50ID0gTWF0aC5taW4oYm94LnQsIHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYm94LmIgPSBNYXRoLm1heChib3guYiwgeSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGV4dGVuZFN0cm9rZUJveDogZnVuY3Rpb24gKGJveCwgcGFycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5leHRlbmRGaWxsQm94KGJveCk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJNXCIgKyB4LnRvU3RyaW5nKCkgKyBcIixcIiArIHkudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZ2V0U3RhcnRWZWN0b3I6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBnZXRFbmRWZWN0b3I6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlZ21lbnRzLm1vdmUgPSBtb3ZlO1xuICAgICAgICB9KShzZWdtZW50cyA9IHBhdGguc2VnbWVudHMgfHwgKHBhdGguc2VnbWVudHMgPSB7fSkpO1xuICAgIH0pKHBhdGggPSBtaW5lcnZhLnBhdGggfHwgKG1pbmVydmEucGF0aCA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIHBhdGg7XG4gICAgKGZ1bmN0aW9uIChwYXRoKSB7XG4gICAgICAgIHZhciBzZWdtZW50cztcbiAgICAgICAgKGZ1bmN0aW9uIChzZWdtZW50cykge1xuICAgICAgICAgICAgZnVuY3Rpb24gcXVhZHJhdGljQmV6aWVyKGNweCwgY3B5LCB4LCB5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgc3g6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHN5OiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBleDogeCxcbiAgICAgICAgICAgICAgICAgICAgZXk6IHksXG4gICAgICAgICAgICAgICAgICAgIGlzU2luZ2xlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgY3B4OiBjcHgsXG4gICAgICAgICAgICAgICAgICAgIGNweTogY3B5LFxuICAgICAgICAgICAgICAgICAgICB4OiB4LFxuICAgICAgICAgICAgICAgICAgICB5OiB5LFxuICAgICAgICAgICAgICAgICAgICBkcmF3OiBmdW5jdGlvbiAoY3R4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHgucXVhZHJhdGljQ3VydmVUbyhjcHgsIGNweSwgeCwgeSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGV4dGVuZEZpbGxCb3g6IGZ1bmN0aW9uIChib3gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtID0gZ2V0TWF4aW1hKHRoaXMuc3gsIGNweCwgeCwgdGhpcy5zeSwgY3B5LCB5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtLnggIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJveC5sID0gTWF0aC5taW4oYm94LmwsIG0ueCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYm94LnIgPSBNYXRoLm1heChib3guciwgbS54KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtLnkgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJveC50ID0gTWF0aC5taW4oYm94LnQsIG0ueSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYm94LmIgPSBNYXRoLm1heChib3guYiwgbS55KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJveC5sID0gTWF0aC5taW4oYm94LmwsIHgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYm94LnIgPSBNYXRoLm1heChib3guciwgeCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3gudCA9IE1hdGgubWluKGJveC50LCB5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJveC5iID0gTWF0aC5tYXgoYm94LmIsIHkpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBleHRlbmRTdHJva2VCb3g6IGZ1bmN0aW9uIChib3gsIHBhcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBocyA9IHBhcnMuc3Ryb2tlVGhpY2tuZXNzIC8gMi4wO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG0gPSBnZXRNYXhpbWEodGhpcy5zeCwgY3B4LCB4LCB0aGlzLnN5LCBjcHksIHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG0ueCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJveC5sID0gTWF0aC5taW4oYm94LmwsIG0ueCAtIGhzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3guciA9IE1hdGgubWF4KGJveC5yLCBtLnggKyBocyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobS55KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYm94LnQgPSBNYXRoLm1pbihib3gudCwgbS55IC0gaHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJveC5iID0gTWF0aC5tYXgoYm94LmIsIG0ueSArIGhzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJveC5sID0gTWF0aC5taW4oYm94LmwsIHgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYm94LnIgPSBNYXRoLm1heChib3guciwgeCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3gudCA9IE1hdGgubWluKGJveC50LCB5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJveC5iID0gTWF0aC5tYXgoYm94LmIsIHkpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB0b1N0cmluZzogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiUVwiICsgY3B4LnRvU3RyaW5nKCkgKyBcIixcIiArIGNweS50b1N0cmluZygpICsgXCIgXCIgKyB4LnRvU3RyaW5nKCkgKyBcIixcIiArIHkudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZ2V0U3RhcnRWZWN0b3I6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgMiAqIChjcHggLSB0aGlzLnN4KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAyICogKGNweSAtIHRoaXMuc3kpXG4gICAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBnZXRFbmRWZWN0b3I6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgMiAqICh4IC0gY3B4KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAyICogKHkgLSBjcHkpXG4gICAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlZ21lbnRzLnF1YWRyYXRpY0JlemllciA9IHF1YWRyYXRpY0JlemllcjtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldE1heGltYSh4MSwgeDIsIHgzLCB5MSwgeTIsIHkzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgeDogY29kKHgxLCB4MiwgeDMpLFxuICAgICAgICAgICAgICAgICAgICB5OiBjb2QoeTEsIHkyLCB5MylcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gY29kKGEsIGIsIGMpIHtcbiAgICAgICAgICAgICAgICB2YXIgdCA9IChhIC0gYikgLyAoYSAtIDIgKiBiICsgYyk7XG4gICAgICAgICAgICAgICAgaWYgKHQgPCAwIHx8IHQgPiAxKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICByZXR1cm4gKGEgKiBNYXRoLnBvdygxIC0gdCwgMikpICsgKDIgKiBiICogKDEgLSB0KSAqIHQpICsgKGMgKiBNYXRoLnBvdyh0LCAyKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKHNlZ21lbnRzID0gcGF0aC5zZWdtZW50cyB8fCAocGF0aC5zZWdtZW50cyA9IHt9KSk7XG4gICAgfSkocGF0aCA9IG1pbmVydmEucGF0aCB8fCAobWluZXJ2YS5wYXRoID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgcGF0aDtcbiAgICAoZnVuY3Rpb24gKHBhdGgpIHtcbiAgICAgICAgdmFyIHNlZ21lbnRzO1xuICAgICAgICAoZnVuY3Rpb24gKHNlZ21lbnRzKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiByZWN0KHgsIHksIHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBzeDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgc3k6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIGlzU2luZ2xlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICB4OiB4LFxuICAgICAgICAgICAgICAgICAgICB5OiB5LFxuICAgICAgICAgICAgICAgICAgICBleDogeCxcbiAgICAgICAgICAgICAgICAgICAgZXk6IHksXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgIGRyYXc6IGZ1bmN0aW9uIChjdHgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5yZWN0KHgsIHksIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBleHRlbmRGaWxsQm94OiBmdW5jdGlvbiAoYm94KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3gubCA9IE1hdGgubWluKGJveC5sLCB4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJveC5yID0gTWF0aC5tYXgoYm94LnIsIHggKyB3aWR0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3gudCA9IE1hdGgubWluKGJveC50LCB5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJveC5iID0gTWF0aC5tYXgoYm94LmIsIHkgKyBoZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBleHRlbmRTdHJva2VCb3g6IGZ1bmN0aW9uIChib3gsIHBhcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBocyA9IHBhcnMuc3Ryb2tlVGhpY2tuZXNzIC8gMi4wO1xuICAgICAgICAgICAgICAgICAgICAgICAgYm94LmwgPSBNYXRoLm1pbihib3gubCwgeCAtIGhzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJveC5yID0gTWF0aC5tYXgoYm94LnIsIHggKyB3aWR0aCArIGhzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJveC50ID0gTWF0aC5taW4oYm94LnQsIHkgLSBocyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3guYiA9IE1hdGgubWF4KGJveC5iLCB5ICsgaGVpZ2h0ICsgaHMpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBnZXRTdGFydFZlY3RvcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGdldEVuZFZlY3RvcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VnbWVudHMucmVjdCA9IHJlY3Q7XG4gICAgICAgIH0pKHNlZ21lbnRzID0gcGF0aC5zZWdtZW50cyB8fCAocGF0aC5zZWdtZW50cyA9IHt9KSk7XG4gICAgfSkocGF0aCA9IG1pbmVydmEucGF0aCB8fCAobWluZXJ2YS5wYXRoID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgcGF0aDtcbiAgICAoZnVuY3Rpb24gKHBhdGgpIHtcbiAgICAgICAgdmFyIHNlZ21lbnRzO1xuICAgICAgICAoZnVuY3Rpb24gKHNlZ21lbnRzKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiByb3VuZGVkUmVjdCh4LCB5LCB3aWR0aCwgaGVpZ2h0LCByYWRpdXNYLCByYWRpdXNZKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJhZGl1c1ggPT09IDAuMCAmJiByYWRpdXNZID09PSAwLjApXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWdtZW50cy5yZWN0KHgsIHksIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHN4OiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBzeTogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgZXg6IHgsXG4gICAgICAgICAgICAgICAgICAgIGV5OiB5LFxuICAgICAgICAgICAgICAgICAgICBpc1NpbmdsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgeDogeCxcbiAgICAgICAgICAgICAgICAgICAgeTogeSxcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgcmFkaXVzWDogcmFkaXVzWCxcbiAgICAgICAgICAgICAgICAgICAgcmFkaXVzWTogcmFkaXVzWSxcbiAgICAgICAgICAgICAgICAgICAgZHJhdzogZnVuY3Rpb24gKGN0eCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5zaGFwZXMucmVjdGFuZ2xlLmhlbHBlcnMuZHJhdyhjdHgsIHgsIHksIHdpZHRoLCBoZWlnaHQsIHJhZGl1c1gsIHJhZGl1c1kpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBleHRlbmRGaWxsQm94OiBmdW5jdGlvbiAoYm94KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3gubCA9IE1hdGgubWluKGJveC5sLCB4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJveC5yID0gTWF0aC5tYXgoYm94LnIsIHggKyB3aWR0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3gudCA9IE1hdGgubWluKGJveC50LCB5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJveC5iID0gTWF0aC5tYXgoYm94LmIsIHkgKyBoZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBleHRlbmRTdHJva2VCb3g6IGZ1bmN0aW9uIChib3gsIHBhcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBocyA9IHBhcnMuc3Ryb2tlVGhpY2tuZXNzIC8gMi4wO1xuICAgICAgICAgICAgICAgICAgICAgICAgYm94LmwgPSBNYXRoLm1pbihib3gubCwgeCAtIGhzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJveC5yID0gTWF0aC5tYXgoYm94LnIsIHggKyB3aWR0aCArIGhzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJveC50ID0gTWF0aC5taW4oYm94LnQsIHkgLSBocyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3guYiA9IE1hdGgubWF4KGJveC5iLCB5ICsgaGVpZ2h0ICsgaHMpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBnZXRTdGFydFZlY3RvcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGdldEVuZFZlY3RvcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VnbWVudHMucm91bmRlZFJlY3QgPSByb3VuZGVkUmVjdDtcbiAgICAgICAgfSkoc2VnbWVudHMgPSBwYXRoLnNlZ21lbnRzIHx8IChwYXRoLnNlZ21lbnRzID0ge30pKTtcbiAgICB9KShwYXRoID0gbWluZXJ2YS5wYXRoIHx8IChtaW5lcnZhLnBhdGggPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG5pZiAoIUNhbnZhc1JlbmRlcmluZ0NvbnRleHQyRC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkoXCJiYWNraW5nU3RvcmVQaXhlbFJhdGlvXCIpKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRC5wcm90b3R5cGUsIFwiYmFja2luZ1N0b3JlUGl4ZWxSYXRpb1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGN0eCA9IHRoaXM7XG4gICAgICAgICAgICByZXR1cm4gY3R4LndlYmtpdEJhY2tpbmdTdG9yZVBpeGVsUmF0aW9cbiAgICAgICAgICAgICAgICB8fCBjdHgubW96QmFja2luZ1N0b3JlUGl4ZWxSYXRpb1xuICAgICAgICAgICAgICAgIHx8IGN0eC5tc0JhY2tpbmdTdG9yZVBpeGVsUmF0aW9cbiAgICAgICAgICAgICAgICB8fCBjdHgub0JhY2tpbmdTdG9yZVBpeGVsUmF0aW9cbiAgICAgICAgICAgICAgICB8fCAxO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5pZiAoIUNhbnZhc1JlbmRlcmluZ0NvbnRleHQyRC5wcm90b3R5cGUuZWxsaXBzZSkge1xuICAgIENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRC5wcm90b3R5cGUuZWxsaXBzZSA9IGZ1bmN0aW9uICh4LCB5LCByYWRpdXNYLCByYWRpdXNZLCByb3RhdGlvbiwgc3RhcnRBbmdsZSwgZW5kQW5nbGUsIGFudGlDbG9ja3dpc2UpIHtcbiAgICAgICAgdGhpcy5zYXZlKCk7XG4gICAgICAgIHRoaXMudHJhbnNsYXRlKHgsIHkpO1xuICAgICAgICB0aGlzLnJvdGF0ZShyb3RhdGlvbik7XG4gICAgICAgIHRoaXMuc2NhbGUocmFkaXVzWCwgcmFkaXVzWSk7XG4gICAgICAgIHRoaXMuYXJjKDAsIDAsIDEsIHN0YXJ0QW5nbGUsIGVuZEFuZ2xlLCBhbnRpQ2xvY2t3aXNlKTtcbiAgICAgICAgdGhpcy5yZXN0b3JlKCk7XG4gICAgfTtcbn1cbmlmICghQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELnByb3RvdHlwZS5pc1BvaW50SW5TdHJva2UpIHtcbiAgICBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQucHJvdG90eXBlLmlzUG9pbnRJblN0cm9rZSA9IGZ1bmN0aW9uICh4LCB5KSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xufVxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2NvcmUvVXBkYXRlclwiIC8+XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBzaGFwZXM7XG4gICAgKGZ1bmN0aW9uIChzaGFwZXMpIHtcbiAgICAgICAgdmFyIHNoYXBlO1xuICAgICAgICAoZnVuY3Rpb24gKHNoYXBlKSB7XG4gICAgICAgICAgICB2YXIgU2hhcGVVcGRhdGVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgICAgICBfX2V4dGVuZHMoU2hhcGVVcGRhdGVyLCBfc3VwZXIpO1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIFNoYXBlVXBkYXRlcigpIHtcbiAgICAgICAgICAgICAgICAgICAgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFNoYXBlVXBkYXRlci5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRNZWFzdXJlUGlwZShtaW5lcnZhLnNpbmdsZXRvbihzaGFwZS5tZWFzdXJlLlNoYXBlTWVhc3VyZVBpcGVEZWYpKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldEFycmFuZ2VQaXBlKG1pbmVydmEuc2luZ2xldG9uKHNoYXBlLmFycmFuZ2UuU2hhcGVBcnJhbmdlUGlwZURlZikpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0UmVuZGVyUGlwZShtaW5lcnZhLnNpbmdsZXRvbihzaGFwZS5yZW5kZXIuU2hhcGVSZW5kZXJQaXBlRGVmKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRQcm9jZXNzVXBQaXBlKG1pbmVydmEuc2luZ2xldG9uKHNoYXBlLnByb2Nlc3N1cC5TaGFwZVByb2Nlc3NVcFBpcGVEZWYpKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldEhpdFRlc3RQaXBlKG1pbmVydmEuc2luZ2xldG9uKHNoYXBlLmhpdHRlc3QuU2hhcGVIaXRUZXN0UGlwZURlZikpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYXNzZXRzID0gdGhpcy5hc3NldHM7XG4gICAgICAgICAgICAgICAgICAgIGFzc2V0cy5uYXR1cmFsQm91bmRzID0gbmV3IG1pbmVydmEuUmVjdCgpO1xuICAgICAgICAgICAgICAgICAgICBhc3NldHMuc2hhcGVGbGFncyA9IG1pbmVydmEuU2hhcGVGbGFncy5Ob25lO1xuICAgICAgICAgICAgICAgICAgICBhc3NldHMuc2hhcGVSZWN0ID0gbmV3IG1pbmVydmEuUmVjdCgpO1xuICAgICAgICAgICAgICAgICAgICBhc3NldHMuZmlsbCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIGFzc2V0cy5zdHJldGNoID0gbWluZXJ2YS5TdHJldGNoLk5vbmU7XG4gICAgICAgICAgICAgICAgICAgIGFzc2V0cy5zdHJva2UgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICBhc3NldHMuc3Ryb2tlVGhpY2tuZXNzID0gMS4wO1xuICAgICAgICAgICAgICAgICAgICBhc3NldHMuc3Ryb2tlRGFzaEFycmF5ID0gW107XG4gICAgICAgICAgICAgICAgICAgIGFzc2V0cy5zdHJva2VEYXNoQ2FwID0gbWluZXJ2YS5QZW5MaW5lQ2FwLkZsYXQ7XG4gICAgICAgICAgICAgICAgICAgIGFzc2V0cy5zdHJva2VEYXNoT2Zmc2V0ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXRzLnN0cm9rZVN0YXJ0TGluZUNhcCA9IG1pbmVydmEuUGVuTGluZUNhcC5GbGF0O1xuICAgICAgICAgICAgICAgICAgICBhc3NldHMuc3Ryb2tlRW5kTGluZUNhcCA9IG1pbmVydmEuUGVuTGluZUNhcC5GbGF0O1xuICAgICAgICAgICAgICAgICAgICBhc3NldHMuc3Ryb2tlTGluZUpvaW4gPSBtaW5lcnZhLlBlbkxpbmVKb2luLk1pdGVyO1xuICAgICAgICAgICAgICAgICAgICBhc3NldHMuc3Ryb2tlTWl0ZXJMaW1pdCA9IDEwO1xuICAgICAgICAgICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLmluaXQuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIFNoYXBlVXBkYXRlci5wcm90b3R5cGUuaW52YWxpZGF0ZU5hdHVyYWxCb3VuZHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuYiA9IHRoaXMuYXNzZXRzLm5hdHVyYWxCb3VuZHM7XG4gICAgICAgICAgICAgICAgICAgIG5iLnggPSBuYi55ID0gbmIud2lkdGggPSBuYi5oZWlnaHQgPSAwO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmludmFsaWRhdGVNZWFzdXJlKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlQm91bmRzKHRydWUpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIFNoYXBlVXBkYXRlcjtcbiAgICAgICAgICAgIH0pKG1pbmVydmEuY29yZS5VcGRhdGVyKTtcbiAgICAgICAgICAgIHNoYXBlLlNoYXBlVXBkYXRlciA9IFNoYXBlVXBkYXRlcjtcbiAgICAgICAgfSkoc2hhcGUgPSBzaGFwZXMuc2hhcGUgfHwgKHNoYXBlcy5zaGFwZSA9IHt9KSk7XG4gICAgfSkoc2hhcGVzID0gbWluZXJ2YS5zaGFwZXMgfHwgKG1pbmVydmEuc2hhcGVzID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL3NoYXBlL1NoYXBlVXBkYXRlclwiIC8+XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBzaGFwZXM7XG4gICAgKGZ1bmN0aW9uIChzaGFwZXMpIHtcbiAgICAgICAgdmFyIGVsbGlwc2U7XG4gICAgICAgIChmdW5jdGlvbiAoZWxsaXBzZSkge1xuICAgICAgICAgICAgdmFyIEVsbGlwc2VVcGRhdGVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgICAgICBfX2V4dGVuZHMoRWxsaXBzZVVwZGF0ZXIsIF9zdXBlcik7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gRWxsaXBzZVVwZGF0ZXIoKSB7XG4gICAgICAgICAgICAgICAgICAgIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBFbGxpcHNlVXBkYXRlci5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRNZWFzdXJlUGlwZShtaW5lcnZhLnNpbmdsZXRvbihlbGxpcHNlLm1lYXN1cmUuRWxsaXBzZU1lYXN1cmVQaXBlRGVmKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRSZW5kZXJQaXBlKG1pbmVydmEuc2luZ2xldG9uKGVsbGlwc2UucmVuZGVyLkVsbGlwc2VSZW5kZXJQaXBlRGVmKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRIaXRUZXN0UGlwZShtaW5lcnZhLnNpbmdsZXRvbihlbGxpcHNlLmhpdHRlc3QuRWxsaXBzZUhpdFRlc3RQaXBlRGVmKSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhc3NldHMgPSB0aGlzLmFzc2V0cztcbiAgICAgICAgICAgICAgICAgICAgYXNzZXRzLnN0cmV0Y2ggPSBtaW5lcnZhLlN0cmV0Y2guRmlsbDtcbiAgICAgICAgICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5pbml0LmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gRWxsaXBzZVVwZGF0ZXI7XG4gICAgICAgICAgICB9KShzaGFwZXMuc2hhcGUuU2hhcGVVcGRhdGVyKTtcbiAgICAgICAgICAgIGVsbGlwc2UuRWxsaXBzZVVwZGF0ZXIgPSBFbGxpcHNlVXBkYXRlcjtcbiAgICAgICAgfSkoZWxsaXBzZSA9IHNoYXBlcy5lbGxpcHNlIHx8IChzaGFwZXMuZWxsaXBzZSA9IHt9KSk7XG4gICAgfSkoc2hhcGVzID0gbWluZXJ2YS5zaGFwZXMgfHwgKG1pbmVydmEuc2hhcGVzID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL3NoYXBlL1NoYXBlVXBkYXRlclwiIC8+XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBzaGFwZXM7XG4gICAgKGZ1bmN0aW9uIChzaGFwZXMpIHtcbiAgICAgICAgdmFyIHBhdGg7XG4gICAgICAgIChmdW5jdGlvbiAocGF0aCkge1xuICAgICAgICAgICAgdmFyIFBhdGhVcGRhdGVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgICAgICBfX2V4dGVuZHMoUGF0aFVwZGF0ZXIsIF9zdXBlcik7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gUGF0aFVwZGF0ZXIoKSB7XG4gICAgICAgICAgICAgICAgICAgIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBQYXRoVXBkYXRlci5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRNZWFzdXJlUGlwZShtaW5lcnZhLnNpbmdsZXRvbihwYXRoLm1lYXN1cmUuUGF0aE1lYXN1cmVQaXBlRGVmKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRQcm9jZXNzVXBQaXBlKG1pbmVydmEuc2luZ2xldG9uKHBhdGgucHJvY2Vzc3VwLlBhdGhQcm9jZXNzVXBQaXBlRGVmKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRSZW5kZXJQaXBlKG1pbmVydmEuc2luZ2xldG9uKHBhdGgucmVuZGVyLlBhdGhSZW5kZXJQaXBlRGVmKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRIaXRUZXN0UGlwZShtaW5lcnZhLnNpbmdsZXRvbihwYXRoLmhpdHRlc3QuUGF0aEhpdFRlc3RQaXBlRGVmKSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhc3NldHMgPSB0aGlzLmFzc2V0cztcbiAgICAgICAgICAgICAgICAgICAgYXNzZXRzLnN0cmV0Y2ggPSBtaW5lcnZhLlN0cmV0Y2guTm9uZTtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXRzLnN0cmV0Y2hYZm9ybSA9IG1pbmVydmEubWF0My5pZGVudGl0eSgpO1xuICAgICAgICAgICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLmluaXQuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybiBQYXRoVXBkYXRlcjtcbiAgICAgICAgICAgIH0pKHNoYXBlcy5zaGFwZS5TaGFwZVVwZGF0ZXIpO1xuICAgICAgICAgICAgcGF0aC5QYXRoVXBkYXRlciA9IFBhdGhVcGRhdGVyO1xuICAgICAgICB9KShwYXRoID0gc2hhcGVzLnBhdGggfHwgKHNoYXBlcy5wYXRoID0ge30pKTtcbiAgICB9KShzaGFwZXMgPSBtaW5lcnZhLnNoYXBlcyB8fCAobWluZXJ2YS5zaGFwZXMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vcGF0aC9QYXRoVXBkYXRlclwiIC8+XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBzaGFwZXM7XG4gICAgKGZ1bmN0aW9uIChzaGFwZXMpIHtcbiAgICAgICAgdmFyIGxpbmU7XG4gICAgICAgIChmdW5jdGlvbiAobGluZSkge1xuICAgICAgICAgICAgdmFyIExpbmVVcGRhdGVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgICAgICBfX2V4dGVuZHMoTGluZVVwZGF0ZXIsIF9zdXBlcik7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gTGluZVVwZGF0ZXIoKSB7XG4gICAgICAgICAgICAgICAgICAgIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBMaW5lVXBkYXRlci5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRNZWFzdXJlUGlwZShtaW5lcnZhLnNpbmdsZXRvbihsaW5lLm1lYXN1cmUuTGluZU1lYXN1cmVQaXBlRGVmKSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhc3NldHMgPSB0aGlzLmFzc2V0cztcbiAgICAgICAgICAgICAgICAgICAgYXNzZXRzLngxID0gMDtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXRzLnkxID0gMDtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXRzLngyID0gMDtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXRzLnkyID0gMDtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXRzLmRhdGEgPSBuZXcgc2hhcGVzLnBhdGguQW5vblBhdGhHZW9tZXRyeSgpO1xuICAgICAgICAgICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLmluaXQuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIExpbmVVcGRhdGVyLnByb3RvdHlwZS5pbnZhbGlkYXRlUGF0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hc3NldHMuZGF0YS5vbGQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmludmFsaWRhdGVOYXR1cmFsQm91bmRzKCk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gTGluZVVwZGF0ZXI7XG4gICAgICAgICAgICB9KShzaGFwZXMucGF0aC5QYXRoVXBkYXRlcik7XG4gICAgICAgICAgICBsaW5lLkxpbmVVcGRhdGVyID0gTGluZVVwZGF0ZXI7XG4gICAgICAgIH0pKGxpbmUgPSBzaGFwZXMubGluZSB8fCAoc2hhcGVzLmxpbmUgPSB7fSkpO1xuICAgIH0pKHNoYXBlcyA9IG1pbmVydmEuc2hhcGVzIHx8IChtaW5lcnZhLnNoYXBlcyA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIHNoYXBlcztcbiAgICAoZnVuY3Rpb24gKHNoYXBlcykge1xuICAgICAgICB2YXIgcGF0aDtcbiAgICAgICAgKGZ1bmN0aW9uIChwYXRoKSB7XG4gICAgICAgICAgICB2YXIgQW5vblBhdGhHZW9tZXRyeSA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gQW5vblBhdGhHZW9tZXRyeSgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbGQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBhdGggPSBuZXcgbWluZXJ2YS5wYXRoLlBhdGgoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5maWxsUnVsZSA9IG1pbmVydmEuRmlsbFJ1bGUuRXZlbk9kZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgQW5vblBhdGhHZW9tZXRyeS5wcm90b3R5cGUuRHJhdyA9IGZ1bmN0aW9uIChjdHgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXRoLmRyYXcoY3R4LnJhdyk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBBbm9uUGF0aEdlb21ldHJ5LnByb3RvdHlwZS5HZXRCb3VuZHMgPSBmdW5jdGlvbiAocGFycykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wYXRoLmNhbGNCb3VuZHMocGFycyk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gQW5vblBhdGhHZW9tZXRyeTtcbiAgICAgICAgICAgIH0pKCk7XG4gICAgICAgICAgICBwYXRoLkFub25QYXRoR2VvbWV0cnkgPSBBbm9uUGF0aEdlb21ldHJ5O1xuICAgICAgICB9KShwYXRoID0gc2hhcGVzLnBhdGggfHwgKHNoYXBlcy5wYXRoID0ge30pKTtcbiAgICB9KShzaGFwZXMgPSBtaW5lcnZhLnNoYXBlcyB8fCAobWluZXJ2YS5zaGFwZXMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vcGF0aC9QYXRoVXBkYXRlclwiIC8+XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBzaGFwZXM7XG4gICAgKGZ1bmN0aW9uIChzaGFwZXMpIHtcbiAgICAgICAgdmFyIHBvbHlsaW5lO1xuICAgICAgICAoZnVuY3Rpb24gKHBvbHlsaW5lKSB7XG4gICAgICAgICAgICB2YXIgUG9seWxpbmVVcGRhdGVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgICAgICBfX2V4dGVuZHMoUG9seWxpbmVVcGRhdGVyLCBfc3VwZXIpO1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIFBvbHlsaW5lVXBkYXRlcigpIHtcbiAgICAgICAgICAgICAgICAgICAgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFBvbHlsaW5lVXBkYXRlci5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRNZWFzdXJlUGlwZShtaW5lcnZhLnNpbmdsZXRvbihwb2x5bGluZS5tZWFzdXJlLlBvbHlsaW5lTWVhc3VyZVBpcGVEZWYpKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFzc2V0cyA9IHRoaXMuYXNzZXRzO1xuICAgICAgICAgICAgICAgICAgICBhc3NldHMuZGF0YSA9IG5ldyBzaGFwZXMucGF0aC5Bbm9uUGF0aEdlb21ldHJ5KCk7XG4gICAgICAgICAgICAgICAgICAgIGFzc2V0cy5pc0Nsb3NlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLmluaXQuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIFBvbHlsaW5lVXBkYXRlci5wcm90b3R5cGUuaW52YWxpZGF0ZUZpbGxSdWxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFzc2V0cy5kYXRhLmZpbGxSdWxlID0gdGhpcy5hc3NldHMuZmlsbFJ1bGU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW52YWxpZGF0ZSgpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgUG9seWxpbmVVcGRhdGVyLnByb3RvdHlwZS5pbnZhbGlkYXRlUGF0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hc3NldHMuZGF0YS5vbGQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmludmFsaWRhdGVOYXR1cmFsQm91bmRzKCk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gUG9seWxpbmVVcGRhdGVyO1xuICAgICAgICAgICAgfSkoc2hhcGVzLnBhdGguUGF0aFVwZGF0ZXIpO1xuICAgICAgICAgICAgcG9seWxpbmUuUG9seWxpbmVVcGRhdGVyID0gUG9seWxpbmVVcGRhdGVyO1xuICAgICAgICB9KShwb2x5bGluZSA9IHNoYXBlcy5wb2x5bGluZSB8fCAoc2hhcGVzLnBvbHlsaW5lID0ge30pKTtcbiAgICB9KShzaGFwZXMgPSBtaW5lcnZhLnNoYXBlcyB8fCAobWluZXJ2YS5zaGFwZXMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vcG9seWxpbmUvUG9seWxpbmVVcGRhdGVyXCIgLz5cbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIHNoYXBlcztcbiAgICAoZnVuY3Rpb24gKHNoYXBlcykge1xuICAgICAgICB2YXIgcG9seWdvbjtcbiAgICAgICAgKGZ1bmN0aW9uIChwb2x5Z29uKSB7XG4gICAgICAgICAgICB2YXIgUG9seWdvblVwZGF0ZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgICAgIF9fZXh0ZW5kcyhQb2x5Z29uVXBkYXRlciwgX3N1cGVyKTtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBQb2x5Z29uVXBkYXRlcigpIHtcbiAgICAgICAgICAgICAgICAgICAgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFBvbHlnb25VcGRhdGVyLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLmluaXQuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hc3NldHMuaXNDbG9zZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIFBvbHlnb25VcGRhdGVyO1xuICAgICAgICAgICAgfSkoc2hhcGVzLnBvbHlsaW5lLlBvbHlsaW5lVXBkYXRlcik7XG4gICAgICAgICAgICBwb2x5Z29uLlBvbHlnb25VcGRhdGVyID0gUG9seWdvblVwZGF0ZXI7XG4gICAgICAgIH0pKHBvbHlnb24gPSBzaGFwZXMucG9seWdvbiB8fCAoc2hhcGVzLnBvbHlnb24gPSB7fSkpO1xuICAgIH0pKHNoYXBlcyA9IG1pbmVydmEuc2hhcGVzIHx8IChtaW5lcnZhLnNoYXBlcyA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9zaGFwZS9TaGFwZVVwZGF0ZXJcIiAvPlxudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgc2hhcGVzO1xuICAgIChmdW5jdGlvbiAoc2hhcGVzKSB7XG4gICAgICAgIHZhciByZWN0YW5nbGU7XG4gICAgICAgIChmdW5jdGlvbiAocmVjdGFuZ2xlKSB7XG4gICAgICAgICAgICB2YXIgUmVjdGFuZ2xlVXBkYXRlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICAgICAgX19leHRlbmRzKFJlY3RhbmdsZVVwZGF0ZXIsIF9zdXBlcik7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gUmVjdGFuZ2xlVXBkYXRlcigpIHtcbiAgICAgICAgICAgICAgICAgICAgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFJlY3RhbmdsZVVwZGF0ZXIucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0TWVhc3VyZVBpcGUobWluZXJ2YS5zaW5nbGV0b24ocmVjdGFuZ2xlLm1lYXN1cmUuUmVjdGFuZ2xlTWVhc3VyZVBpcGVEZWYpKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFJlbmRlclBpcGUobWluZXJ2YS5zaW5nbGV0b24ocmVjdGFuZ2xlLnJlbmRlci5SZWN0YW5nbGVSZW5kZXJQaXBlRGVmKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRIaXRUZXN0UGlwZShtaW5lcnZhLnNpbmdsZXRvbihyZWN0YW5nbGUuaGl0dGVzdC5SZWN0YW5nbGVIaXRUZXN0UGlwZURlZikpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYXNzZXRzID0gdGhpcy5hc3NldHM7XG4gICAgICAgICAgICAgICAgICAgIGFzc2V0cy5zdHJldGNoID0gbWluZXJ2YS5TdHJldGNoLkZpbGw7XG4gICAgICAgICAgICAgICAgICAgIGFzc2V0cy5yYWRpdXNYID0gMDtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXRzLnJhZGl1c1kgPSAwO1xuICAgICAgICAgICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLmluaXQuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybiBSZWN0YW5nbGVVcGRhdGVyO1xuICAgICAgICAgICAgfSkoc2hhcGVzLnNoYXBlLlNoYXBlVXBkYXRlcik7XG4gICAgICAgICAgICByZWN0YW5nbGUuUmVjdGFuZ2xlVXBkYXRlciA9IFJlY3RhbmdsZVVwZGF0ZXI7XG4gICAgICAgIH0pKHJlY3RhbmdsZSA9IHNoYXBlcy5yZWN0YW5nbGUgfHwgKHNoYXBlcy5yZWN0YW5nbGUgPSB7fSkpO1xuICAgIH0pKHNoYXBlcyA9IG1pbmVydmEuc2hhcGVzIHx8IChtaW5lcnZhLnNoYXBlcyA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIHRleHQ7XG4gICAgKGZ1bmN0aW9uICh0ZXh0KSB7XG4gICAgICAgIHZhciBsYXlvdXQ7XG4gICAgICAgIChmdW5jdGlvbiAobGF5b3V0KSB7XG4gICAgICAgICAgICB2YXIgaXNGaXJlZm94ID0gL2ZpcmVmb3gvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgICAgICAgICAgdmFyIENsdXN0ZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIENsdXN0ZXIoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNTZWxlY3RlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRleHQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLndpZHRoID0gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgQ2x1c3Rlci5yZW5kZXIgPSBmdW5jdGlvbiAoY2x1c3RlciwgYXNzZXRzLCBjdHgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZvbnRIZWlnaHQgPSBhc3NldHMuZm9udC5nZXRIZWlnaHQoKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFyZWEgPSBuZXcgbWluZXJ2YS5SZWN0KDAsIDAsIGNsdXN0ZXIud2lkdGgsIGZvbnRIZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmF3ID0gY3R4LnJhdztcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJnID0gY2x1c3Rlci5pc1NlbGVjdGVkID8gKGFzc2V0cy5zZWxlY3Rpb25CYWNrZ3JvdW5kIHx8IENsdXN0ZXIuREVGQVVMVF9TRUxFQ1RJT05fQkcpIDogYXNzZXRzLmJhY2tncm91bmQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChiZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmF3LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmF3LnJlY3QoYXJlYS54LCBhcmVhLnksIGFyZWEud2lkdGgsIGFyZWEuaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5maWxsRXgoYmcsIGFyZWEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhciBmZyA9IGNsdXN0ZXIuaXNTZWxlY3RlZCA/IChhc3NldHMuc2VsZWN0aW9uRm9yZWdyb3VuZCB8fCBDbHVzdGVyLkRFRkFVTFRfU0VMRUNUSU9OX0ZHKSA6IGFzc2V0cy5mb3JlZ3JvdW5kO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZmc1ID0gXCIjMDAwMDAwXCI7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmcuc2V0dXBCcnVzaChyYXcsIGFyZWEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZmc1ID0gZmcudG9IdG1sNU9iamVjdCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJhdy5maWxsU3R5bGUgPSBmZzU7XG4gICAgICAgICAgICAgICAgICAgIHJhdy5mb250ID0gYXNzZXRzLmZvbnQudG9IdG1sNU9iamVjdCgpO1xuICAgICAgICAgICAgICAgICAgICByYXcudGV4dEFsaWduID0gXCJsZWZ0XCI7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0ZpcmVmb3gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhdy50ZXh0QmFzZWxpbmUgPSBcImJvdHRvbVwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmF3LmZpbGxUZXh0KGNsdXN0ZXIudGV4dCwgMCwgZm9udEhlaWdodCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByYXcudGV4dEJhc2VsaW5lID0gXCJ0b3BcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhdy5maWxsVGV4dChjbHVzdGVyLnRleHQsIDAsIDApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChhc3NldHMuaXNVbmRlcmxpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByYXcuYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByYXcubW92ZVRvKDAsIGZvbnRIZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmF3LmxpbmVUbyhjbHVzdGVyLndpZHRoLCBmb250SGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhdy5saW5lV2lkdGggPSAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmF3LnN0cm9rZVN0eWxlID0gZmc1O1xuICAgICAgICAgICAgICAgICAgICAgICAgcmF3LnN0cm9rZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBDbHVzdGVyLkRFRkFVTFRfU0VMRUNUSU9OX0JHID0gbmV3IG1pbmVydmEuRmFrZUJydXNoKFwiIzQ0NDQ0NFwiKTtcbiAgICAgICAgICAgICAgICBDbHVzdGVyLkRFRkFVTFRfU0VMRUNUSU9OX0ZHID0gbmV3IG1pbmVydmEuRmFrZUJydXNoKFwiI0ZGRkZGRlwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gQ2x1c3RlcjtcbiAgICAgICAgICAgIH0pKCk7XG4gICAgICAgICAgICBsYXlvdXQuQ2x1c3RlciA9IENsdXN0ZXI7XG4gICAgICAgIH0pKGxheW91dCA9IHRleHQubGF5b3V0IHx8ICh0ZXh0LmxheW91dCA9IHt9KSk7XG4gICAgfSkodGV4dCA9IG1pbmVydmEudGV4dCB8fCAobWluZXJ2YS50ZXh0ID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgdGV4dDtcbiAgICAoZnVuY3Rpb24gKHRleHRfMikge1xuICAgICAgICB2YXIgbGF5b3V0O1xuICAgICAgICAoZnVuY3Rpb24gKGxheW91dCkge1xuICAgICAgICAgICAgdmFyIExpbmUgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIExpbmUoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucnVucyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLndpZHRoID0gMDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBMaW5lLmdldExpbmVGcm9tWSA9IGZ1bmN0aW9uIChsaW5lcywgeSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbGluZTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIG95ID0gMC4wOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmUgPSBsaW5lc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG95ICs9IGxpbmUuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHkgPCBveSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbGluZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbGluZXNbbGluZXMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBMaW5lLmVsbGlwdGlmeSA9IGZ1bmN0aW9uIChkb2NjdHgsIGRvY2Fzc2V0cywgbGluZSwgbWVhc3VyZVRleHRXaWR0aCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZG9jY3R4LnRleHRUcmltbWluZyA9PT0gbWluZXJ2YS5UZXh0VHJpbW1pbmcuTm9uZVxuICAgICAgICAgICAgICAgICAgICAgICAgfHwgZG9jY3R4LnRleHRXcmFwcGluZyAhPT0gbWluZXJ2YS5UZXh0V3JhcHBpbmcuTm9XcmFwXG4gICAgICAgICAgICAgICAgICAgICAgICB8fCBsaW5lLndpZHRoIDw9IGRvY2Fzc2V0cy5tYXhXaWR0aClcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5ld1J1bnMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgcnVucyA9IGxpbmUucnVucywgdG90YWwgPSAwLCBpID0gMDsgaSA8IHJ1bnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBydW4gPSBydW5zW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgdG90YWwgKz0gcnVuLndpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3UnVucy5wdXNoKHJ1bik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodG90YWwgPj0gZG9jYXNzZXRzLm1heFdpZHRoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWwgLT0gcnVuLndpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheW91dC5SdW4uZWxsaXB0aWZ5KHJ1biwgZG9jYXNzZXRzLm1heFdpZHRoIC0gdG90YWwsIGRvY2N0eC50ZXh0VHJpbW1pbmcsIG1lYXN1cmVUZXh0V2lkdGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmUud2lkdGggPSB0b3RhbCArIHJ1bi53aWR0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBsaW5lLnJ1bnMgPSBuZXdSdW5zO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybiBMaW5lO1xuICAgICAgICAgICAgfSkoKTtcbiAgICAgICAgICAgIGxheW91dC5MaW5lID0gTGluZTtcbiAgICAgICAgfSkobGF5b3V0ID0gdGV4dF8yLmxheW91dCB8fCAodGV4dF8yLmxheW91dCA9IHt9KSk7XG4gICAgfSkodGV4dCA9IG1pbmVydmEudGV4dCB8fCAobWluZXJ2YS50ZXh0ID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgdGV4dDtcbiAgICAoZnVuY3Rpb24gKHRleHRfMykge1xuICAgICAgICB2YXIgbGF5b3V0O1xuICAgICAgICAoZnVuY3Rpb24gKGxheW91dCkge1xuICAgICAgICAgICAgdmFyIFJ1biA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gUnVuKCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRleHQgPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sZW5ndGggPSAwO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLndpZHRoID0gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgUnVuLnNwbGl0U2VsZWN0aW9uID0gZnVuY3Rpb24gKHJ1biwgc3RhcnQsIGVuZCwgbWVhc3VyZVdpZHRoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJ1bi5wcmUgPSBydW4uc2VsID0gcnVuLnBvc3QgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcnMgPSBydW4uc3RhcnQ7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZSA9IHJzICsgcnVuLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByZWxlbiA9IE1hdGgubWluKHJ1bi5sZW5ndGgsIE1hdGgubWF4KDAsIHN0YXJ0IC0gcnMpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHByZWxlbiA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwcmUgPSBydW4ucHJlID0gbmV3IGxheW91dC5DbHVzdGVyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcmUudGV4dCA9IHJ1bi50ZXh0LnN1YnN0cigwLCBwcmVsZW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJlLndpZHRoID0gbWVhc3VyZVdpZHRoKHByZS50ZXh0LCBydW4uYXR0cnMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhciBwb3N0bGVuID0gTWF0aC5taW4ocnVuLmxlbmd0aCwgTWF0aC5tYXgoMCwgcmUgLSBlbmQpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBvc3RsZW4gPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcG9zdCA9IHJ1bi5wb3N0ID0gbmV3IGxheW91dC5DbHVzdGVyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3N0LnRleHQgPSBydW4udGV4dC5zdWJzdHIocnVuLmxlbmd0aCAtIHBvc3RsZW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9zdC53aWR0aCA9IG1lYXN1cmVXaWR0aChwb3N0LnRleHQsIHJ1bi5hdHRycyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIHNzID0gTWF0aC5taW4ocmUsIE1hdGgubWF4KHJzLCBzdGFydCkpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2UgPSBNYXRoLm1heChycywgTWF0aC5taW4ocmUsIGVuZCkpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2VsbGVuID0gTWF0aC5tYXgoMCwgc2UgLSBzcyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWxsZW4gPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VsID0gcnVuLnNlbCA9IG5ldyBsYXlvdXQuQ2x1c3RlcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsLmlzU2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsLnRleHQgPSBydW4udGV4dC5zdWJzdHIoc3MgLSBycywgc2VsbGVuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbC53aWR0aCA9IG1lYXN1cmVXaWR0aChzZWwudGV4dCwgcnVuLmF0dHJzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgUnVuLmVsbGlwdGlmeSA9IGZ1bmN0aW9uIChydW4sIGF2YWlsYWJsZSwgdGV4dFRyaW1taW5nLCBtZWFzdXJlVGV4dFdpZHRoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChydW4ud2lkdGggPCBhdmFpbGFibGUpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIHZhciB0ZXh0ID0gcnVuLnRleHQ7XG4gICAgICAgICAgICAgICAgICAgIHZhciBmb250ID0gcnVuLmF0dHJzLmZvbnQ7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtZWFzdXJlID0gZnVuY3Rpb24gKGluZGV4KSB7IHJldHVybiBtZWFzdXJlVGV4dFdpZHRoKHRleHQuc3Vic3RyKDAsIGluZGV4KSwgZm9udCk7IH07XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ZXh0VHJpbW1pbmcgPT09IG1pbmVydmEuVGV4dFRyaW1taW5nLldvcmRFbGxpcHNpcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2hvcnRlbldvcmQocnVuLCBhdmFpbGFibGUgLSBtZWFzdXJlVGV4dFdpZHRoKFwiLi4uXCIsIGZvbnQpLCBtZWFzdXJlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3J0ZW5DaGFyKHJ1biwgYXZhaWxhYmxlIC0gbWVhc3VyZVRleHRXaWR0aChcIi4uLlwiLCBmb250KSwgbWVhc3VyZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybiBSdW47XG4gICAgICAgICAgICB9KSgpO1xuICAgICAgICAgICAgbGF5b3V0LlJ1biA9IFJ1bjtcbiAgICAgICAgICAgIGZ1bmN0aW9uIHNob3J0ZW5Xb3JkKHJ1biwgYXZhaWxhYmxlLCBtZWFzdXJlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGF2YWlsYWJsZSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxlbiA9IHJ1bi50ZXh0Lmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIG5leHQgPSAwOyAoaSA9IG5leHQpIDwgbGVuICYmIChuZXh0ID0gcnVuLnRleHQuaW5kZXhPZignICcsIGkgKyAxKSkgIT09IC0xOykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1lYXN1cmUobmV4dCkgPiBhdmFpbGFibGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBydW4udGV4dCA9IHJ1bi50ZXh0LnN1YnN0cigwLCBpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAobGVuID09PSBydW4udGV4dC5sZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBydW4udGV4dCA9IFwiXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJ1bi50ZXh0ICs9IFwiLi4uXCI7XG4gICAgICAgICAgICAgICAgcnVuLmxlbmd0aCA9IHJ1bi50ZXh0Lmxlbmd0aDtcbiAgICAgICAgICAgICAgICBydW4ud2lkdGggPSBtZWFzdXJlKHJ1bi5sZW5ndGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gc2hvcnRlbkNoYXIocnVuLCBhdmFpbGFibGUsIG1lYXN1cmUpIHtcbiAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbGVuID0gcnVuLnRleHQubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbG93ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhpZ2ggPSBsZW47XG4gICAgICAgICAgICAgICAgICAgIHZhciBpID0gTWF0aC5jZWlsKGxvdyArIChoaWdoIC0gbG93KSAvIDIpO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciByYXdyID0gMDsgKGhpZ2ggLSBsb3cpID4gMSAmJiByYXdyIDwgMTAwMDsgaSA9IE1hdGguY2VpbChsb3cgKyAoaGlnaCAtIGxvdykgLyAyKSwgcmF3cisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWVhc3VyZShpKSA+IGF2YWlsYWJsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpZ2ggPSBpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG93ID0gaTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBydW4udGV4dCA9IHJ1bi50ZXh0LnN1YnN0cigwLCBsb3cpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobGVuID09PSBydW4udGV4dC5sZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBydW4udGV4dCA9IFwiXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJ1bi50ZXh0ICs9IFwiLi4uXCI7XG4gICAgICAgICAgICAgICAgcnVuLmxlbmd0aCA9IHJ1bi50ZXh0Lmxlbmd0aDtcbiAgICAgICAgICAgICAgICBydW4ud2lkdGggPSBtZWFzdXJlKHJ1bi5sZW5ndGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KShsYXlvdXQgPSB0ZXh0XzMubGF5b3V0IHx8ICh0ZXh0XzMubGF5b3V0ID0ge30pKTtcbiAgICB9KSh0ZXh0ID0gbWluZXJ2YS50ZXh0IHx8IChtaW5lcnZhLnRleHQgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciB0ZXh0O1xuICAgIChmdW5jdGlvbiAodGV4dF80KSB7XG4gICAgICAgIHZhciBydW47XG4gICAgICAgIChmdW5jdGlvbiAocnVuXzEpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGRvTGF5b3V0Tm9XcmFwKGRvY2N0eCwgZG9jYXNzZXRzLCBhc3NldHMpIHtcbiAgICAgICAgICAgICAgICB2YXIgcGFzcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogYXNzZXRzLnRleHQsXG4gICAgICAgICAgICAgICAgICAgIGluZGV4OiAwLFxuICAgICAgICAgICAgICAgICAgICBtYXg6IGFzc2V0cy50ZXh0Lmxlbmd0aFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdmFyIGZvbnQgPSBhc3NldHMuZm9udDtcbiAgICAgICAgICAgICAgICB2YXIgbGluZSA9IG5ldyB0ZXh0XzQubGF5b3V0LkxpbmUoKTtcbiAgICAgICAgICAgICAgICBsaW5lLmhlaWdodCA9IGZvbnQuZ2V0SGVpZ2h0KCk7XG4gICAgICAgICAgICAgICAgZG9jYXNzZXRzLmFjdHVhbEhlaWdodCArPSBsaW5lLmhlaWdodDtcbiAgICAgICAgICAgICAgICBkb2Nhc3NldHMubGluZXMucHVzaChsaW5lKTtcbiAgICAgICAgICAgICAgICB2YXIgcnVuID0gbmV3IHRleHRfNC5sYXlvdXQuUnVuKCk7XG4gICAgICAgICAgICAgICAgcnVuLmF0dHJzID0gYXNzZXRzO1xuICAgICAgICAgICAgICAgIGxpbmUucnVucy5wdXNoKHJ1bik7XG4gICAgICAgICAgICAgICAgd2hpbGUgKHBhc3MuaW5kZXggPCBwYXNzLm1heCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaGl0YnJlYWsgPSBhZHZhbmNlKHJ1biwgcGFzcywgZm9udCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChoaXRicmVhaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZG9jYXNzZXRzLmFjdHVhbFdpZHRoID0gTWF0aC5tYXgoZG9jYXNzZXRzLmFjdHVhbFdpZHRoLCBydW4ud2lkdGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGluZS53aWR0aCA9IHJ1bi53aWR0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmUgPSBuZXcgdGV4dF80LmxheW91dC5MaW5lKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lLmhlaWdodCA9IGZvbnQuZ2V0SGVpZ2h0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkb2Nhc3NldHMuYWN0dWFsSGVpZ2h0ICs9IGxpbmUuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgZG9jYXNzZXRzLmxpbmVzLnB1c2gobGluZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBydW4gPSBuZXcgdGV4dF80LmxheW91dC5SdW4oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bi5hdHRycyA9IGFzc2V0cztcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmUucnVucy5wdXNoKHJ1bik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGluZS53aWR0aCA9IHJ1bi53aWR0aDtcbiAgICAgICAgICAgICAgICB0ZXh0XzQubGF5b3V0LkxpbmUuZWxsaXB0aWZ5KGRvY2N0eCwgZG9jYXNzZXRzLCBsaW5lLCBtZWFzdXJlVGV4dFdpZHRoKTtcbiAgICAgICAgICAgICAgICBkb2Nhc3NldHMuYWN0dWFsV2lkdGggPSBNYXRoLm1heChkb2Nhc3NldHMuYWN0dWFsV2lkdGgsIHJ1bi53aWR0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBydW5fMS5kb0xheW91dE5vV3JhcCA9IGRvTGF5b3V0Tm9XcmFwO1xuICAgICAgICAgICAgZnVuY3Rpb24gYWR2YW5jZShydW4sIHBhc3MsIGZvbnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVtYWluaW5nID0gcGFzcy50ZXh0LnN1YnN0cihwYXNzLmluZGV4KTtcbiAgICAgICAgICAgICAgICB2YXIgcmluZGV4ID0gcmVtYWluaW5nLmluZGV4T2YoJ1xccicpO1xuICAgICAgICAgICAgICAgIHZhciBuaW5kZXggPSByZW1haW5pbmcuaW5kZXhPZignXFxuJyk7XG4gICAgICAgICAgICAgICAgaWYgKHJpbmRleCA8IDAgJiYgbmluZGV4IDwgMCkge1xuICAgICAgICAgICAgICAgICAgICBydW4ubGVuZ3RoID0gcmVtYWluaW5nLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgcnVuLnRleHQgPSByZW1haW5pbmc7XG4gICAgICAgICAgICAgICAgICAgIHJ1bi53aWR0aCA9IG1lYXN1cmVUZXh0V2lkdGgocnVuLnRleHQsIGZvbnQpO1xuICAgICAgICAgICAgICAgICAgICBwYXNzLmluZGV4ICs9IHJ1bi5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHJpbmRleCA+IC0xICYmIHJpbmRleCArIDEgPT09IG5pbmRleCkge1xuICAgICAgICAgICAgICAgICAgICBydW4ubGVuZ3RoID0gbmluZGV4ICsgMTtcbiAgICAgICAgICAgICAgICAgICAgcnVuLnRleHQgPSByZW1haW5pbmcuc3Vic3RyKDAsIHJ1bi5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICBydW4ud2lkdGggPSBtZWFzdXJlVGV4dFdpZHRoKHJ1bi50ZXh0LCBmb250KTtcbiAgICAgICAgICAgICAgICAgICAgcGFzcy5pbmRleCArPSBydW4ubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHJpbmRleCA+IC0xICYmIHJpbmRleCA8IG5pbmRleCkge1xuICAgICAgICAgICAgICAgICAgICBydW4ubGVuZ3RoID0gcmluZGV4ICsgMTtcbiAgICAgICAgICAgICAgICAgICAgcnVuLnRleHQgPSByZW1haW5pbmcuc3Vic3RyKDAsIHJ1bi5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICBydW4ud2lkdGggPSBtZWFzdXJlVGV4dFdpZHRoKHJ1bi50ZXh0LCBmb250KTtcbiAgICAgICAgICAgICAgICAgICAgcGFzcy5pbmRleCArPSBydW4ubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcnVuLmxlbmd0aCA9IG5pbmRleCArIDE7XG4gICAgICAgICAgICAgICAgcnVuLnRleHQgPSByZW1haW5pbmcuc3Vic3RyKDAsIHJ1bi5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIHJ1bi53aWR0aCA9IG1lYXN1cmVUZXh0V2lkdGgocnVuLnRleHQsIGZvbnQpO1xuICAgICAgICAgICAgICAgIHBhc3MuaW5kZXggKz0gcnVuLmxlbmd0aDtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIG1lYXN1cmVUZXh0V2lkdGgodGV4dCwgZm9udCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtaW5lcnZhLmVuZ2luZS5TdXJmYWNlLm1lYXN1cmVXaWR0aCh0ZXh0LCBmb250KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkocnVuID0gdGV4dF80LnJ1biB8fCAodGV4dF80LnJ1biA9IHt9KSk7XG4gICAgfSkodGV4dCA9IG1pbmVydmEudGV4dCB8fCAobWluZXJ2YS50ZXh0ID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgdGV4dDtcbiAgICAoZnVuY3Rpb24gKHRleHRfNSkge1xuICAgICAgICB2YXIgcnVuO1xuICAgICAgICAoZnVuY3Rpb24gKHJ1bl8yKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBkb0xheW91dFdyYXAoZG9jY3R4LCBkb2Nhc3NldHMsIGFzc2V0cykge1xuICAgICAgICAgICAgICAgIHZhciBwYXNzID0ge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0OiBhc3NldHMudGV4dCxcbiAgICAgICAgICAgICAgICAgICAgaW5kZXg6IDAsXG4gICAgICAgICAgICAgICAgICAgIG1heDogYXNzZXRzLnRleHQubGVuZ3RoXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB2YXIgZm9udCA9IGFzc2V0cy5mb250O1xuICAgICAgICAgICAgICAgIHZhciBsaW5lID0gbmV3IHRleHRfNS5sYXlvdXQuTGluZSgpO1xuICAgICAgICAgICAgICAgIGxpbmUuaGVpZ2h0ID0gZm9udC5nZXRIZWlnaHQoKTtcbiAgICAgICAgICAgICAgICBkb2Nhc3NldHMuYWN0dWFsSGVpZ2h0ICs9IGxpbmUuaGVpZ2h0O1xuICAgICAgICAgICAgICAgIGRvY2Fzc2V0cy5saW5lcy5wdXNoKGxpbmUpO1xuICAgICAgICAgICAgICAgIHZhciBydW4gPSBuZXcgdGV4dF81LmxheW91dC5SdW4oKTtcbiAgICAgICAgICAgICAgICBydW4uYXR0cnMgPSBhc3NldHM7XG4gICAgICAgICAgICAgICAgbGluZS5ydW5zLnB1c2gocnVuKTtcbiAgICAgICAgICAgICAgICB3aGlsZSAocGFzcy5pbmRleCA8IHBhc3MubWF4KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBoaXRicmVhayA9IGlzRmluaXRlKGRvY2Fzc2V0cy5tYXhXaWR0aCkgPyBhZHZhbmNlRmluaXRlKHJ1biwgcGFzcywgZm9udCwgZG9jYXNzZXRzLm1heFdpZHRoKSA6IGFkdmFuY2VJbmZpbml0ZShydW4sIHBhc3MsIGZvbnQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaGl0YnJlYWspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvY2Fzc2V0cy5hY3R1YWxXaWR0aCA9IE1hdGgubWF4KGRvY2Fzc2V0cy5hY3R1YWxXaWR0aCwgcnVuLndpZHRoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmUud2lkdGggPSBydW4ud2lkdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lID0gbmV3IHRleHRfNS5sYXlvdXQuTGluZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGluZS5oZWlnaHQgPSBmb250LmdldEhlaWdodCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZG9jYXNzZXRzLmFjdHVhbEhlaWdodCArPSBsaW5lLmhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvY2Fzc2V0cy5saW5lcy5wdXNoKGxpbmUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcnVuID0gbmV3IHRleHRfNS5sYXlvdXQuUnVuKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBydW4uYXR0cnMgPSBhc3NldHM7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lLnJ1bnMucHVzaChydW4pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxpbmUud2lkdGggPSBydW4ud2lkdGg7XG4gICAgICAgICAgICAgICAgZG9jYXNzZXRzLmFjdHVhbFdpZHRoID0gTWF0aC5tYXgoZG9jYXNzZXRzLmFjdHVhbFdpZHRoLCBydW4ud2lkdGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcnVuXzIuZG9MYXlvdXRXcmFwID0gZG9MYXlvdXRXcmFwO1xuICAgICAgICAgICAgZnVuY3Rpb24gYWR2YW5jZUluZmluaXRlKHJ1biwgcGFzcywgZm9udCkge1xuICAgICAgICAgICAgICAgIHZhciByZW1haW5pbmcgPSBwYXNzLnRleHQuc3Vic3RyKHBhc3MuaW5kZXgpO1xuICAgICAgICAgICAgICAgIHZhciByaW5kZXggPSByZW1haW5pbmcuaW5kZXhPZignXFxyJyk7XG4gICAgICAgICAgICAgICAgdmFyIG5pbmRleCA9IHJlbWFpbmluZy5pbmRleE9mKCdcXG4nKTtcbiAgICAgICAgICAgICAgICBpZiAocmluZGV4IDwgMCAmJiBuaW5kZXggPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJ1bi5sZW5ndGggPSByZW1haW5pbmcubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICBydW4udGV4dCA9IHJlbWFpbmluZztcbiAgICAgICAgICAgICAgICAgICAgcnVuLndpZHRoID0gbWVhc3VyZVRleHRXaWR0aChydW4udGV4dCwgZm9udCk7XG4gICAgICAgICAgICAgICAgICAgIHBhc3MuaW5kZXggKz0gcnVuLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocmluZGV4ID4gLTEgJiYgcmluZGV4ICsgMSA9PT0gbmluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIHJ1bi5sZW5ndGggPSBuaW5kZXggKyAxO1xuICAgICAgICAgICAgICAgICAgICBydW4udGV4dCA9IHJlbWFpbmluZy5zdWJzdHIoMCwgcnVuLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgIHJ1bi53aWR0aCA9IG1lYXN1cmVUZXh0V2lkdGgocnVuLnRleHQsIGZvbnQpO1xuICAgICAgICAgICAgICAgICAgICBwYXNzLmluZGV4ICs9IHJ1bi5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocmluZGV4ID4gLTEgJiYgcmluZGV4IDwgbmluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIHJ1bi5sZW5ndGggPSByaW5kZXggKyAxO1xuICAgICAgICAgICAgICAgICAgICBydW4udGV4dCA9IHJlbWFpbmluZy5zdWJzdHIoMCwgcnVuLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgIHJ1bi53aWR0aCA9IG1lYXN1cmVUZXh0V2lkdGgocnVuLnRleHQsIGZvbnQpO1xuICAgICAgICAgICAgICAgICAgICBwYXNzLmluZGV4ICs9IHJ1bi5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBydW4ubGVuZ3RoID0gbmluZGV4ICsgMTtcbiAgICAgICAgICAgICAgICBydW4udGV4dCA9IHJlbWFpbmluZy5zdWJzdHIoMCwgcnVuLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgcnVuLndpZHRoID0gbWVhc3VyZVRleHRXaWR0aChydW4udGV4dCwgZm9udCk7XG4gICAgICAgICAgICAgICAgcGFzcy5pbmRleCArPSBydW4ubGVuZ3RoO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gYWR2YW5jZUZpbml0ZShydW4sIHBhc3MsIGZvbnQsIG1heFdpZHRoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRleHQgPSBwYXNzLnRleHQ7XG4gICAgICAgICAgICAgICAgdmFyIHN0YXJ0ID0gcGFzcy5pbmRleDtcbiAgICAgICAgICAgICAgICB2YXIgbGFzdFNwYWNlID0gLTE7XG4gICAgICAgICAgICAgICAgdmFyIGM7XG4gICAgICAgICAgICAgICAgdmFyIGN1clRleHQgPSBcIlwiO1xuICAgICAgICAgICAgICAgIHZhciBjdXJXaWR0aCA9IDA7XG4gICAgICAgICAgICAgICAgd2hpbGUgKHBhc3MuaW5kZXggPCBwYXNzLm1heCkge1xuICAgICAgICAgICAgICAgICAgICBjID0gdGV4dC5jaGFyQXQocGFzcy5pbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIGN1clRleHQgKz0gYztcbiAgICAgICAgICAgICAgICAgICAgY3VyV2lkdGggPSBtZWFzdXJlVGV4dFdpZHRoKGN1clRleHQsIGZvbnQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYyA9PT0gJ1xcbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bi5sZW5ndGggPSBwYXNzLmluZGV4IC0gc3RhcnQgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgcnVuLnRleHQgPSB0ZXh0LnN1YnN0cihzdGFydCwgcnVuLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBydW4ud2lkdGggPSBtZWFzdXJlVGV4dFdpZHRoKHJ1bi50ZXh0LCBmb250KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhc3MuaW5kZXgrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGMgPT09ICdcXHInKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBydW4ubGVuZ3RoID0gcGFzcy5pbmRleCAtIHN0YXJ0ICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhc3MuaW5kZXgrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ZXh0LmNoYXJBdChwYXNzLmluZGV4KSA9PT0gJ1xcbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBydW4ubGVuZ3RoKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFzcy5pbmRleCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcnVuLnRleHQgPSB0ZXh0LnN1YnN0cihzdGFydCwgcnVuLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBydW4ud2lkdGggPSBtZWFzdXJlVGV4dFdpZHRoKHJ1bi50ZXh0LCBmb250KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJXaWR0aCA+IG1heFdpZHRoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYnJlYWtJbmRleCA9IChsYXN0U3BhY2UgPiAtMSkgPyBsYXN0U3BhY2UgKyAxIDogcGFzcy5pbmRleDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bi5sZW5ndGggPSAoYnJlYWtJbmRleCAtIHN0YXJ0KSB8fCAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgcnVuLnRleHQgPSB0ZXh0LnN1YnN0cihzdGFydCwgcnVuLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBydW4ud2lkdGggPSBtZWFzdXJlVGV4dFdpZHRoKHJ1bi50ZXh0LCBmb250KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhc3MuaW5kZXggPSBzdGFydCArIHJ1bi5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFzcy5pbmRleCA8IHBhc3MubWF4O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChjID09PSAnICcpXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0U3BhY2UgPSBwYXNzLmluZGV4O1xuICAgICAgICAgICAgICAgICAgICBwYXNzLmluZGV4Kys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJ1bi50ZXh0ID0gdGV4dC5zdWJzdHIoc3RhcnQpO1xuICAgICAgICAgICAgICAgIHJ1bi5sZW5ndGggPSBydW4udGV4dC5sZW5ndGg7XG4gICAgICAgICAgICAgICAgcnVuLndpZHRoID0gbWVhc3VyZVRleHRXaWR0aChydW4udGV4dCwgZm9udCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gbWVhc3VyZVRleHRXaWR0aCh0ZXh0LCBmb250KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1pbmVydmEuZW5naW5lLlN1cmZhY2UubWVhc3VyZVdpZHRoKHRleHQsIGZvbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KShydW4gPSB0ZXh0XzUucnVuIHx8ICh0ZXh0XzUucnVuID0ge30pKTtcbiAgICB9KSh0ZXh0ID0gbWluZXJ2YS50ZXh0IHx8IChtaW5lcnZhLnRleHQgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciB0ZXh0O1xuICAgIChmdW5jdGlvbiAodGV4dF82KSB7XG4gICAgICAgIHZhciBydW47XG4gICAgICAgIChmdW5jdGlvbiAocnVuKSB7XG4gICAgICAgICAgICB2YXIgUnVuTGF5b3V0RGVmID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBSdW5MYXlvdXREZWYoKSB7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFJ1bkxheW91dERlZi5wcm90b3R5cGUubGF5b3V0ID0gZnVuY3Rpb24gKGRvY2N0eCwgZG9jYXNzZXRzLCBhc3NldHMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRleHQgPSBhc3NldHMudGV4dDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0ZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGluZSA9IG5ldyB0ZXh0XzYubGF5b3V0LkxpbmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmUuaGVpZ2h0ID0gYXNzZXRzLmZvbnQuZ2V0SGVpZ2h0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkb2Nhc3NldHMubGluZXMucHVzaChsaW5lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBydW4xID0gbmV3IHRleHRfNi5sYXlvdXQuUnVuKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBydW4xLmF0dHJzID0gYXNzZXRzO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGluZS5ydW5zLnB1c2gocnVuMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkb2Nhc3NldHMuYWN0dWFsSGVpZ2h0ID0gbGluZS5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGRvY2N0eC50ZXh0V3JhcHBpbmcgPT09IG1pbmVydmEuVGV4dFdyYXBwaW5nLk5vV3JhcClcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bi5kb0xheW91dE5vV3JhcChkb2NjdHgsIGRvY2Fzc2V0cywgYXNzZXRzKTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgcnVuLmRvTGF5b3V0V3JhcChkb2NjdHgsIGRvY2Fzc2V0cywgYXNzZXRzKTtcbiAgICAgICAgICAgICAgICAgICAgZG9jYXNzZXRzLnNlbENhY2hlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybiBSdW5MYXlvdXREZWY7XG4gICAgICAgICAgICB9KSgpO1xuICAgICAgICAgICAgcnVuLlJ1bkxheW91dERlZiA9IFJ1bkxheW91dERlZjtcbiAgICAgICAgfSkocnVuID0gdGV4dF82LnJ1biB8fCAodGV4dF82LnJ1biA9IHt9KSk7XG4gICAgfSkodGV4dCA9IG1pbmVydmEudGV4dCB8fCAobWluZXJ2YS50ZXh0ID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29udHJvbHM7XG4gICAgKGZ1bmN0aW9uIChjb250cm9scykge1xuICAgICAgICB2YXIgYm9yZGVyO1xuICAgICAgICAoZnVuY3Rpb24gKGJvcmRlcikge1xuICAgICAgICAgICAgdmFyIGFycmFuZ2U7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKGFycmFuZ2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgQm9yZGVyQXJyYW5nZVBpcGVEZWYgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgICAgICAgICBfX2V4dGVuZHMoQm9yZGVyQXJyYW5nZVBpcGVEZWYsIF9zdXBlcik7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIEJvcmRlckFycmFuZ2VQaXBlRGVmKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZFRhcGluQmVmb3JlKCdkb092ZXJyaWRlJywgJ3ByZU92ZXJyaWRlJywgcHJlT3ZlcnJpZGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2VUYXBpbignZG9PdmVycmlkZScsIGRvT3ZlcnJpZGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIEJvcmRlckFycmFuZ2VQaXBlRGVmLnByb3RvdHlwZS5jcmVhdGVTdGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdGF0ZSA9IF9zdXBlci5wcm90b3R5cGUuY3JlYXRlU3RhdGUuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLnRvdGFsQm9yZGVyID0gbmV3IG1pbmVydmEuVGhpY2tuZXNzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBCb3JkZXJBcnJhbmdlUGlwZURlZjtcbiAgICAgICAgICAgICAgICB9KShtaW5lcnZhLmNvcmUuYXJyYW5nZS5BcnJhbmdlUGlwZURlZik7XG4gICAgICAgICAgICAgICAgYXJyYW5nZS5Cb3JkZXJBcnJhbmdlUGlwZURlZiA9IEJvcmRlckFycmFuZ2VQaXBlRGVmO1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHByZU92ZXJyaWRlKGlucHV0LCBzdGF0ZSwgb3V0cHV0LCB0cmVlLCBmaW5hbFJlY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0cmVlLnN1YnRyZWUpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRiID0gc3RhdGUudG90YWxCb3JkZXI7XG4gICAgICAgICAgICAgICAgICAgIG1pbmVydmEuVGhpY2tuZXNzLmNvcHlUbyhpbnB1dC5wYWRkaW5nLCB0Yik7XG4gICAgICAgICAgICAgICAgICAgIG1pbmVydmEuVGhpY2tuZXNzLmFkZCh0YiwgaW5wdXQuYm9yZGVyVGhpY2tuZXNzKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNyID0gc3RhdGUuY2hpbGRSZWN0O1xuICAgICAgICAgICAgICAgICAgICBjci54ID0gY3IueSA9IDA7XG4gICAgICAgICAgICAgICAgICAgIG1pbmVydmEuU2l6ZS5jb3B5VG8oc3RhdGUuZmluYWxTaXplLCBjcik7XG4gICAgICAgICAgICAgICAgICAgIG1pbmVydmEuVGhpY2tuZXNzLnNocmlua1JlY3QodGIsIGNyKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGFycmFuZ2UucHJlT3ZlcnJpZGUgPSBwcmVPdmVycmlkZTtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBkb092ZXJyaWRlKGlucHV0LCBzdGF0ZSwgb3V0cHV0LCB0cmVlLCBmaW5hbFJlY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRyZWUuc3VidHJlZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyZWUuc3VidHJlZS5hcnJhbmdlKHN0YXRlLmNoaWxkUmVjdCk7XG4gICAgICAgICAgICAgICAgICAgIG1pbmVydmEuU2l6ZS5jb3B5VG8oc3RhdGUuZmluYWxTaXplLCBzdGF0ZS5hcnJhbmdlZFNpemUpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYXJyYW5nZS5kb092ZXJyaWRlID0gZG9PdmVycmlkZTtcbiAgICAgICAgICAgIH0pKGFycmFuZ2UgPSBib3JkZXIuYXJyYW5nZSB8fCAoYm9yZGVyLmFycmFuZ2UgPSB7fSkpO1xuICAgICAgICB9KShib3JkZXIgPSBjb250cm9scy5ib3JkZXIgfHwgKGNvbnRyb2xzLmJvcmRlciA9IHt9KSk7XG4gICAgfSkoY29udHJvbHMgPSBtaW5lcnZhLmNvbnRyb2xzIHx8IChtaW5lcnZhLmNvbnRyb2xzID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29udHJvbHM7XG4gICAgKGZ1bmN0aW9uIChjb250cm9scykge1xuICAgICAgICB2YXIgYm9yZGVyO1xuICAgICAgICAoZnVuY3Rpb24gKGJvcmRlcikge1xuICAgICAgICAgICAgdmFyIGhpdHRlc3Q7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKGhpdHRlc3QpIHtcbiAgICAgICAgICAgICAgICB2YXIgQm9yZGVySGl0VGVzdFBpcGVEZWYgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgICAgICAgICBfX2V4dGVuZHMoQm9yZGVySGl0VGVzdFBpcGVEZWYsIF9zdXBlcik7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIEJvcmRlckhpdFRlc3RQaXBlRGVmKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlcGxhY2VUYXBpbignY2FuSGl0SW5zaWRlJywgdGFwaW5zLmNhbkhpdEluc2lkZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEJvcmRlckhpdFRlc3RQaXBlRGVmO1xuICAgICAgICAgICAgICAgIH0pKG1pbmVydmEuY29yZS5oaXR0ZXN0LkhpdFRlc3RQaXBlRGVmKTtcbiAgICAgICAgICAgICAgICBoaXR0ZXN0LkJvcmRlckhpdFRlc3RQaXBlRGVmID0gQm9yZGVySGl0VGVzdFBpcGVEZWY7XG4gICAgICAgICAgICAgICAgdmFyIHRhcGlucztcbiAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBjYW5IaXRJbnNpZGUoZGF0YSwgcG9zLCBoaXRMaXN0LCBjdHgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLmhpdENoaWxkcmVuKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFkYXRhLmFzc2V0cy5iYWNrZ3JvdW5kICYmICFkYXRhLmFzc2V0cy5ib3JkZXJCcnVzaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpdExpc3Quc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRhcGlucy5jYW5IaXRJbnNpZGUgPSBjYW5IaXRJbnNpZGU7XG4gICAgICAgICAgICAgICAgfSkodGFwaW5zID0gaGl0dGVzdC50YXBpbnMgfHwgKGhpdHRlc3QudGFwaW5zID0ge30pKTtcbiAgICAgICAgICAgIH0pKGhpdHRlc3QgPSBib3JkZXIuaGl0dGVzdCB8fCAoYm9yZGVyLmhpdHRlc3QgPSB7fSkpO1xuICAgICAgICB9KShib3JkZXIgPSBjb250cm9scy5ib3JkZXIgfHwgKGNvbnRyb2xzLmJvcmRlciA9IHt9KSk7XG4gICAgfSkoY29udHJvbHMgPSBtaW5lcnZhLmNvbnRyb2xzIHx8IChtaW5lcnZhLmNvbnRyb2xzID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uLy4uL2NvcmUvbWVhc3VyZS9NZWFzdXJlUGlwZURlZlwiIC8+XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb250cm9scztcbiAgICAoZnVuY3Rpb24gKGNvbnRyb2xzKSB7XG4gICAgICAgIHZhciBib3JkZXI7XG4gICAgICAgIChmdW5jdGlvbiAoYm9yZGVyKSB7XG4gICAgICAgICAgICB2YXIgbWVhc3VyZTtcbiAgICAgICAgICAgIChmdW5jdGlvbiAobWVhc3VyZSkge1xuICAgICAgICAgICAgICAgIHZhciBCb3JkZXJNZWFzdXJlUGlwZURlZiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIF9fZXh0ZW5kcyhCb3JkZXJNZWFzdXJlUGlwZURlZiwgX3N1cGVyKTtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gQm9yZGVyTWVhc3VyZVBpcGVEZWYoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkVGFwaW5CZWZvcmUoJ2RvT3ZlcnJpZGUnLCAncHJlT3ZlcnJpZGUnLCBwcmVPdmVycmlkZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZVRhcGluKCdkb092ZXJyaWRlJywgZG9PdmVycmlkZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYWRkVGFwaW5BZnRlcignZG9PdmVycmlkZScsICdwb3N0T3ZlcnJpZGUnLCBwb3N0T3ZlcnJpZGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIEJvcmRlck1lYXN1cmVQaXBlRGVmLnByb3RvdHlwZS5jcmVhdGVTdGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdGF0ZSA9IF9zdXBlci5wcm90b3R5cGUuY3JlYXRlU3RhdGUuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLnRvdGFsQm9yZGVyID0gbmV3IG1pbmVydmEuVGhpY2tuZXNzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBCb3JkZXJNZWFzdXJlUGlwZURlZjtcbiAgICAgICAgICAgICAgICB9KShtaW5lcnZhLmNvcmUubWVhc3VyZS5NZWFzdXJlUGlwZURlZik7XG4gICAgICAgICAgICAgICAgbWVhc3VyZS5Cb3JkZXJNZWFzdXJlUGlwZURlZiA9IEJvcmRlck1lYXN1cmVQaXBlRGVmO1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHByZU92ZXJyaWRlKGlucHV0LCBzdGF0ZSwgb3V0cHV0LCB0cmVlLCBhdmFpbGFibGVTaXplKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0YiA9IHN0YXRlLnRvdGFsQm9yZGVyO1xuICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLlRoaWNrbmVzcy5jb3B5VG8oaW5wdXQucGFkZGluZywgdGIpO1xuICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLlRoaWNrbmVzcy5hZGQodGIsIGlucHV0LmJvcmRlclRoaWNrbmVzcyk7XG4gICAgICAgICAgICAgICAgICAgIG1pbmVydmEuVGhpY2tuZXNzLnNocmlua1NpemUodGIsIHN0YXRlLmF2YWlsYWJsZVNpemUpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbWVhc3VyZS5wcmVPdmVycmlkZSA9IHByZU92ZXJyaWRlO1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGRvT3ZlcnJpZGUoaW5wdXQsIHN0YXRlLCBvdXRwdXQsIHRyZWUsIGF2YWlsYWJsZVNpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRzID0gb3V0cHV0LmRlc2lyZWRTaXplO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHJlZS5zdWJ0cmVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmVlLnN1YnRyZWUubWVhc3VyZShzdGF0ZS5hdmFpbGFibGVTaXplKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbmVydmEuU2l6ZS5jb3B5VG8odHJlZS5zdWJ0cmVlLmFzc2V0cy5kZXNpcmVkU2l6ZSwgZHMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBtZWFzdXJlLmRvT3ZlcnJpZGUgPSBkb092ZXJyaWRlO1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHBvc3RPdmVycmlkZShpbnB1dCwgc3RhdGUsIG91dHB1dCwgdHJlZSwgYXZhaWxhYmxlU2l6ZSkge1xuICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLlRoaWNrbmVzcy5ncm93U2l6ZShzdGF0ZS50b3RhbEJvcmRlciwgb3V0cHV0LmRlc2lyZWRTaXplKTtcbiAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5TaXplLm1pbihvdXRwdXQuZGVzaXJlZFNpemUsIHN0YXRlLmF2YWlsYWJsZVNpemUpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbWVhc3VyZS5wb3N0T3ZlcnJpZGUgPSBwb3N0T3ZlcnJpZGU7XG4gICAgICAgICAgICB9KShtZWFzdXJlID0gYm9yZGVyLm1lYXN1cmUgfHwgKGJvcmRlci5tZWFzdXJlID0ge30pKTtcbiAgICAgICAgfSkoYm9yZGVyID0gY29udHJvbHMuYm9yZGVyIHx8IChjb250cm9scy5ib3JkZXIgPSB7fSkpO1xuICAgIH0pKGNvbnRyb2xzID0gbWluZXJ2YS5jb250cm9scyB8fCAobWluZXJ2YS5jb250cm9scyA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvbnRyb2xzO1xuICAgIChmdW5jdGlvbiAoY29udHJvbHMpIHtcbiAgICAgICAgdmFyIGJvcmRlcjtcbiAgICAgICAgKGZ1bmN0aW9uIChib3JkZXIpIHtcbiAgICAgICAgICAgIHZhciByZW5kZXI7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKHJlbmRlcikge1xuICAgICAgICAgICAgICAgIHZhciBCb3JkZXJSZW5kZXJQaXBlRGVmID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgX19leHRlbmRzKEJvcmRlclJlbmRlclBpcGVEZWYsIF9zdXBlcik7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIEJvcmRlclJlbmRlclBpcGVEZWYoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkVGFwaW5CZWZvcmUoJ2RvUmVuZGVyJywgJ2NhbGNTaG91bGRSZW5kZXInLCByZW5kZXIudGFwaW5zLmNhbGNTaG91bGRSZW5kZXIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFkZFRhcGluQmVmb3JlKCdkb1JlbmRlcicsICdjYWxjSW5uZXJPdXRlcicsIHJlbmRlci50YXBpbnMuY2FsY0lubmVyT3V0ZXIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2VUYXBpbignZG9SZW5kZXInLCByZW5kZXIudGFwaW5zLmRvUmVuZGVyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBCb3JkZXJSZW5kZXJQaXBlRGVmLnByb3RvdHlwZS5jcmVhdGVTdGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdGF0ZSA9IF9zdXBlci5wcm90b3R5cGUuY3JlYXRlU3RhdGUuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLmZpbGxFeHRlbnRzID0gbmV3IG1pbmVydmEuUmVjdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuaW5uZXJDb3JuZXJSYWRpdXMgPSBuZXcgbWluZXJ2YS5Db3JuZXJSYWRpdXMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLm91dGVyQ29ybmVyUmFkaXVzID0gbmV3IG1pbmVydmEuQ29ybmVyUmFkaXVzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBCb3JkZXJSZW5kZXJQaXBlRGVmO1xuICAgICAgICAgICAgICAgIH0pKG1pbmVydmEuY29yZS5yZW5kZXIuUmVuZGVyUGlwZURlZik7XG4gICAgICAgICAgICAgICAgcmVuZGVyLkJvcmRlclJlbmRlclBpcGVEZWYgPSBCb3JkZXJSZW5kZXJQaXBlRGVmO1xuICAgICAgICAgICAgfSkocmVuZGVyID0gYm9yZGVyLnJlbmRlciB8fCAoYm9yZGVyLnJlbmRlciA9IHt9KSk7XG4gICAgICAgIH0pKGJvcmRlciA9IGNvbnRyb2xzLmJvcmRlciB8fCAoY29udHJvbHMuYm9yZGVyID0ge30pKTtcbiAgICB9KShjb250cm9scyA9IG1pbmVydmEuY29udHJvbHMgfHwgKG1pbmVydmEuY29udHJvbHMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb250cm9scztcbiAgICAoZnVuY3Rpb24gKGNvbnRyb2xzKSB7XG4gICAgICAgIHZhciBib3JkZXI7XG4gICAgICAgIChmdW5jdGlvbiAoYm9yZGVyKSB7XG4gICAgICAgICAgICB2YXIgcmVuZGVyO1xuICAgICAgICAgICAgKGZ1bmN0aW9uIChyZW5kZXIpIHtcbiAgICAgICAgICAgICAgICB2YXIgU2hpbUJvcmRlclJlbmRlclBpcGVEZWYgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgICAgICAgICBfX2V4dGVuZHMoU2hpbUJvcmRlclJlbmRlclBpcGVEZWYsIF9zdXBlcik7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIFNoaW1Cb3JkZXJSZW5kZXJQaXBlRGVmKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZFRhcGluQmVmb3JlKCdkb1JlbmRlcicsICdjYWxjQmFsYW5jZWQnLCByZW5kZXIudGFwaW5zLnNoaW0uY2FsY0JhbGFuY2VkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRUYXBpbkJlZm9yZSgnZG9SZW5kZXInLCAnaW52YWxpZGF0ZVBhdHRlcm4nLCByZW5kZXIudGFwaW5zLnNoaW0uaW52YWxpZGF0ZVBhdHRlcm4pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFkZFRhcGluQmVmb3JlKCdkb1JlbmRlcicsICdjcmVhdGVQYXR0ZXJuJywgcmVuZGVyLnRhcGlucy5zaGltLmNyZWF0ZVBhdHRlcm4pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2VUYXBpbignZG9SZW5kZXInLCByZW5kZXIudGFwaW5zLnNoaW0uZG9SZW5kZXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFNoaW1Cb3JkZXJSZW5kZXJQaXBlRGVmLnByb3RvdHlwZS5jcmVhdGVTdGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdGF0ZSA9IF9zdXBlci5wcm90b3R5cGUuY3JlYXRlU3RhdGUuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLm1pZGRsZUNvcm5lclJhZGl1cyA9IG5ldyBtaW5lcnZhLkNvcm5lclJhZGl1cygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuc3Ryb2tlRXh0ZW50cyA9IG5ldyBtaW5lcnZhLlJlY3QoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLnBhdHRlcm4gPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUub2xkTWV0cmljcyA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBTaGltQm9yZGVyUmVuZGVyUGlwZURlZjtcbiAgICAgICAgICAgICAgICB9KShyZW5kZXIuQm9yZGVyUmVuZGVyUGlwZURlZik7XG4gICAgICAgICAgICAgICAgcmVuZGVyLlNoaW1Cb3JkZXJSZW5kZXJQaXBlRGVmID0gU2hpbUJvcmRlclJlbmRlclBpcGVEZWY7XG4gICAgICAgICAgICB9KShyZW5kZXIgPSBib3JkZXIucmVuZGVyIHx8IChib3JkZXIucmVuZGVyID0ge30pKTtcbiAgICAgICAgfSkoYm9yZGVyID0gY29udHJvbHMuYm9yZGVyIHx8IChjb250cm9scy5ib3JkZXIgPSB7fSkpO1xuICAgIH0pKGNvbnRyb2xzID0gbWluZXJ2YS5jb250cm9scyB8fCAobWluZXJ2YS5jb250cm9scyA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvbnRyb2xzO1xuICAgIChmdW5jdGlvbiAoY29udHJvbHMpIHtcbiAgICAgICAgdmFyIHBhbmVsO1xuICAgICAgICAoZnVuY3Rpb24gKHBhbmVsKSB7XG4gICAgICAgICAgICB2YXIgYXJyYW5nZTtcbiAgICAgICAgICAgIChmdW5jdGlvbiAoYXJyYW5nZSkge1xuICAgICAgICAgICAgICAgIHZhciBQYW5lbEFycmFuZ2VQaXBlRGVmID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgX19leHRlbmRzKFBhbmVsQXJyYW5nZVBpcGVEZWYsIF9zdXBlcik7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIFBhbmVsQXJyYW5nZVBpcGVEZWYoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVwbGFjZVRhcGluKCdkb092ZXJyaWRlJywgYXJyYW5nZS50YXBpbnMuZG9PdmVycmlkZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFBhbmVsQXJyYW5nZVBpcGVEZWY7XG4gICAgICAgICAgICAgICAgfSkobWluZXJ2YS5jb3JlLmFycmFuZ2UuQXJyYW5nZVBpcGVEZWYpO1xuICAgICAgICAgICAgICAgIGFycmFuZ2UuUGFuZWxBcnJhbmdlUGlwZURlZiA9IFBhbmVsQXJyYW5nZVBpcGVEZWY7XG4gICAgICAgICAgICB9KShhcnJhbmdlID0gcGFuZWwuYXJyYW5nZSB8fCAocGFuZWwuYXJyYW5nZSA9IHt9KSk7XG4gICAgICAgIH0pKHBhbmVsID0gY29udHJvbHMucGFuZWwgfHwgKGNvbnRyb2xzLnBhbmVsID0ge30pKTtcbiAgICB9KShjb250cm9scyA9IG1pbmVydmEuY29udHJvbHMgfHwgKG1pbmVydmEuY29udHJvbHMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vcGFuZWwvYXJyYW5nZS9QYW5lbEFycmFuZ2VQaXBlRGVmXCIgLz5cbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvbnRyb2xzO1xuICAgIChmdW5jdGlvbiAoY29udHJvbHMpIHtcbiAgICAgICAgdmFyIGNhbnZhcztcbiAgICAgICAgKGZ1bmN0aW9uIChjYW52YXMpIHtcbiAgICAgICAgICAgIHZhciBhcnJhbmdlO1xuICAgICAgICAgICAgKGZ1bmN0aW9uIChhcnJhbmdlKSB7XG4gICAgICAgICAgICAgICAgdmFyIENhbnZhc0FycmFuZ2VQaXBlRGVmID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgX19leHRlbmRzKENhbnZhc0FycmFuZ2VQaXBlRGVmLCBfc3VwZXIpO1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBDYW52YXNBcnJhbmdlUGlwZURlZigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXBsYWNlVGFwaW4oJ2RvT3ZlcnJpZGUnLCBhcnJhbmdlLnRhcGlucy5kb092ZXJyaWRlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlVGFwaW4oJ2J1aWxkTGF5b3V0Q2xpcCcsIGFycmFuZ2UudGFwaW5zLmJ1aWxkTGF5b3V0Q2xpcCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIENhbnZhc0FycmFuZ2VQaXBlRGVmO1xuICAgICAgICAgICAgICAgIH0pKGNvbnRyb2xzLnBhbmVsLmFycmFuZ2UuUGFuZWxBcnJhbmdlUGlwZURlZik7XG4gICAgICAgICAgICAgICAgYXJyYW5nZS5DYW52YXNBcnJhbmdlUGlwZURlZiA9IENhbnZhc0FycmFuZ2VQaXBlRGVmO1xuICAgICAgICAgICAgfSkoYXJyYW5nZSA9IGNhbnZhcy5hcnJhbmdlIHx8IChjYW52YXMuYXJyYW5nZSA9IHt9KSk7XG4gICAgICAgIH0pKGNhbnZhcyA9IGNvbnRyb2xzLmNhbnZhcyB8fCAoY29udHJvbHMuY2FudmFzID0ge30pKTtcbiAgICB9KShjb250cm9scyA9IG1pbmVydmEuY29udHJvbHMgfHwgKG1pbmVydmEuY29udHJvbHMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb250cm9scztcbiAgICAoZnVuY3Rpb24gKGNvbnRyb2xzKSB7XG4gICAgICAgIHZhciBwYW5lbDtcbiAgICAgICAgKGZ1bmN0aW9uIChwYW5lbCkge1xuICAgICAgICAgICAgdmFyIG1lYXN1cmU7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKG1lYXN1cmUpIHtcbiAgICAgICAgICAgICAgICB2YXIgUGFuZWxNZWFzdXJlUGlwZURlZiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIF9fZXh0ZW5kcyhQYW5lbE1lYXN1cmVQaXBlRGVmLCBfc3VwZXIpO1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBQYW5lbE1lYXN1cmVQaXBlRGVmKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlcGxhY2VUYXBpbignZG9PdmVycmlkZScsIGRvT3ZlcnJpZGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQYW5lbE1lYXN1cmVQaXBlRGVmO1xuICAgICAgICAgICAgICAgIH0pKG1pbmVydmEuY29yZS5tZWFzdXJlLk1lYXN1cmVQaXBlRGVmKTtcbiAgICAgICAgICAgICAgICBtZWFzdXJlLlBhbmVsTWVhc3VyZVBpcGVEZWYgPSBQYW5lbE1lYXN1cmVQaXBlRGVmO1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGRvT3ZlcnJpZGUoaW5wdXQsIHN0YXRlLCBvdXRwdXQsIHRyZWUsIGF2YWlsYWJsZVNpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRlc2lyZWQgPSBvdXRwdXQuZGVzaXJlZFNpemU7XG4gICAgICAgICAgICAgICAgICAgIGRlc2lyZWQud2lkdGggPSBkZXNpcmVkLmhlaWdodCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHdhbGtlciA9IHRyZWUud2FsaygpOyB3YWxrZXIuc3RlcCgpOykge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2Fsa2VyLmN1cnJlbnQubWVhc3VyZShzdGF0ZS5hdmFpbGFibGVTaXplKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZGRzID0gd2Fsa2VyLmN1cnJlbnQuYXNzZXRzLmRlc2lyZWRTaXplO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVzaXJlZC53aWR0aCA9IE1hdGgubWF4KGRlc2lyZWQud2lkdGgsIGNoaWxkZHMud2lkdGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVzaXJlZC5oZWlnaHQgPSBNYXRoLm1heChkZXNpcmVkLmhlaWdodCwgY2hpbGRkcy5oZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKG1lYXN1cmUgPSBwYW5lbC5tZWFzdXJlIHx8IChwYW5lbC5tZWFzdXJlID0ge30pKTtcbiAgICAgICAgfSkocGFuZWwgPSBjb250cm9scy5wYW5lbCB8fCAoY29udHJvbHMucGFuZWwgPSB7fSkpO1xuICAgIH0pKGNvbnRyb2xzID0gbWluZXJ2YS5jb250cm9scyB8fCAobWluZXJ2YS5jb250cm9scyA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9wYW5lbC9tZWFzdXJlL1BhbmVsTWVhc3VyZVBpcGVEZWZcIiAvPlxudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29udHJvbHM7XG4gICAgKGZ1bmN0aW9uIChjb250cm9scykge1xuICAgICAgICB2YXIgY2FudmFzO1xuICAgICAgICAoZnVuY3Rpb24gKGNhbnZhcykge1xuICAgICAgICAgICAgdmFyIG1lYXN1cmU7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKG1lYXN1cmUpIHtcbiAgICAgICAgICAgICAgICB2YXIgQ2FudmFzTWVhc3VyZVBpcGVEZWYgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgICAgICAgICBfX2V4dGVuZHMoQ2FudmFzTWVhc3VyZVBpcGVEZWYsIF9zdXBlcik7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIENhbnZhc01lYXN1cmVQaXBlRGVmKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlcGxhY2VUYXBpbignZG9PdmVycmlkZScsIG1lYXN1cmUudGFwaW5zLmRvT3ZlcnJpZGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBDYW52YXNNZWFzdXJlUGlwZURlZjtcbiAgICAgICAgICAgICAgICB9KShjb250cm9scy5wYW5lbC5tZWFzdXJlLlBhbmVsTWVhc3VyZVBpcGVEZWYpO1xuICAgICAgICAgICAgICAgIG1lYXN1cmUuQ2FudmFzTWVhc3VyZVBpcGVEZWYgPSBDYW52YXNNZWFzdXJlUGlwZURlZjtcbiAgICAgICAgICAgIH0pKG1lYXN1cmUgPSBjYW52YXMubWVhc3VyZSB8fCAoY2FudmFzLm1lYXN1cmUgPSB7fSkpO1xuICAgICAgICB9KShjYW52YXMgPSBjb250cm9scy5jYW52YXMgfHwgKGNvbnRyb2xzLmNhbnZhcyA9IHt9KSk7XG4gICAgfSkoY29udHJvbHMgPSBtaW5lcnZhLmNvbnRyb2xzIHx8IChtaW5lcnZhLmNvbnRyb2xzID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29udHJvbHM7XG4gICAgKGZ1bmN0aW9uIChjb250cm9scykge1xuICAgICAgICB2YXIgY2FudmFzO1xuICAgICAgICAoZnVuY3Rpb24gKGNhbnZhcykge1xuICAgICAgICAgICAgdmFyIHByb2Nlc3Nkb3duO1xuICAgICAgICAgICAgKGZ1bmN0aW9uIChwcm9jZXNzZG93bikge1xuICAgICAgICAgICAgICAgIHZhciBDYW52YXNQcm9jZXNzRG93blBpcGVEZWYgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgICAgICAgICBfX2V4dGVuZHMoQ2FudmFzUHJvY2Vzc0Rvd25QaXBlRGVmLCBfc3VwZXIpO1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBDYW52YXNQcm9jZXNzRG93blBpcGVEZWYoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVwbGFjZVRhcGluKCdwcm9jZXNzTGF5b3V0Q2xpcCcsIHRhcGlucy5wcm9jZXNzTGF5b3V0Q2xpcCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIENhbnZhc1Byb2Nlc3NEb3duUGlwZURlZjtcbiAgICAgICAgICAgICAgICB9KShtaW5lcnZhLmNvcmUucHJvY2Vzc2Rvd24uUHJvY2Vzc0Rvd25QaXBlRGVmKTtcbiAgICAgICAgICAgICAgICBwcm9jZXNzZG93bi5DYW52YXNQcm9jZXNzRG93blBpcGVEZWYgPSBDYW52YXNQcm9jZXNzRG93blBpcGVEZWY7XG4gICAgICAgICAgICAgICAgdmFyIHRhcGlucztcbiAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBwcm9jZXNzTGF5b3V0Q2xpcChpbnB1dCwgc3RhdGUsIG91dHB1dCwgdnBpbnB1dCwgdHJlZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChpbnB1dC5kaXJ0eUZsYWdzICYgbWluZXJ2YS5EaXJ0eUZsYWdzLkxheW91dENsaXApID09PSAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNsYyA9IGlucHV0LmNvbXBvc2l0ZUxheW91dENsaXA7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGMueCA9IGNsYy55ID0gY2xjLndpZHRoID0gY2xjLmhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRhcGlucy5wcm9jZXNzTGF5b3V0Q2xpcCA9IHByb2Nlc3NMYXlvdXRDbGlwO1xuICAgICAgICAgICAgICAgIH0pKHRhcGlucyA9IHByb2Nlc3Nkb3duLnRhcGlucyB8fCAocHJvY2Vzc2Rvd24udGFwaW5zID0ge30pKTtcbiAgICAgICAgICAgIH0pKHByb2Nlc3Nkb3duID0gY2FudmFzLnByb2Nlc3Nkb3duIHx8IChjYW52YXMucHJvY2Vzc2Rvd24gPSB7fSkpO1xuICAgICAgICB9KShjYW52YXMgPSBjb250cm9scy5jYW52YXMgfHwgKGNvbnRyb2xzLmNhbnZhcyA9IHt9KSk7XG4gICAgfSkoY29udHJvbHMgPSBtaW5lcnZhLmNvbnRyb2xzIHx8IChtaW5lcnZhLmNvbnRyb2xzID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29udHJvbHM7XG4gICAgKGZ1bmN0aW9uIChjb250cm9scykge1xuICAgICAgICB2YXIgY2FudmFzO1xuICAgICAgICAoZnVuY3Rpb24gKGNhbnZhcykge1xuICAgICAgICAgICAgdmFyIHByb2Nlc3N1cDtcbiAgICAgICAgICAgIChmdW5jdGlvbiAocHJvY2Vzc3VwKSB7XG4gICAgICAgICAgICAgICAgdmFyIENhbnZhc1Byb2Nlc3NVcFBpcGVEZWYgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgICAgICAgICBfX2V4dGVuZHMoQ2FudmFzUHJvY2Vzc1VwUGlwZURlZiwgX3N1cGVyKTtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gQ2FudmFzUHJvY2Vzc1VwUGlwZURlZigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXBsYWNlVGFwaW4oJ2NhbGNQYWludEJvdW5kcycsIHByb2Nlc3N1cC50YXBpbnMuY2FsY1BhaW50Qm91bmRzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ2FudmFzUHJvY2Vzc1VwUGlwZURlZjtcbiAgICAgICAgICAgICAgICB9KShtaW5lcnZhLmNvcmUucHJvY2Vzc3VwLlByb2Nlc3NVcFBpcGVEZWYpO1xuICAgICAgICAgICAgICAgIHByb2Nlc3N1cC5DYW52YXNQcm9jZXNzVXBQaXBlRGVmID0gQ2FudmFzUHJvY2Vzc1VwUGlwZURlZjtcbiAgICAgICAgICAgIH0pKHByb2Nlc3N1cCA9IGNhbnZhcy5wcm9jZXNzdXAgfHwgKGNhbnZhcy5wcm9jZXNzdXAgPSB7fSkpO1xuICAgICAgICB9KShjYW52YXMgPSBjb250cm9scy5jYW52YXMgfHwgKGNvbnRyb2xzLmNhbnZhcyA9IHt9KSk7XG4gICAgfSkoY29udHJvbHMgPSBtaW5lcnZhLmNvbnRyb2xzIHx8IChtaW5lcnZhLmNvbnRyb2xzID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29udHJvbHM7XG4gICAgKGZ1bmN0aW9uIChjb250cm9scykge1xuICAgICAgICB2YXIgY29udHJvbDtcbiAgICAgICAgKGZ1bmN0aW9uIChjb250cm9sKSB7XG4gICAgICAgICAgICB2YXIgaGl0dGVzdDtcbiAgICAgICAgICAgIChmdW5jdGlvbiAoaGl0dGVzdCkge1xuICAgICAgICAgICAgICAgIHZhciBDb250cm9sSGl0VGVzdFBpcGVEZWYgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgICAgICAgICBfX2V4dGVuZHMoQ29udHJvbEhpdFRlc3RQaXBlRGVmLCBfc3VwZXIpO1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBDb250cm9sSGl0VGVzdFBpcGVEZWYoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkVGFwaW5CZWZvcmUoJ2NhbkhpdCcsICdzaG91bGRTa2lwJywgdGFwaW5zLnNob3VsZFNraXApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2VUYXBpbignY2FuSGl0SW5zaWRlJywgdGFwaW5zLmNhbkhpdEluc2lkZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIENvbnRyb2xIaXRUZXN0UGlwZURlZjtcbiAgICAgICAgICAgICAgICB9KShtaW5lcnZhLmNvcmUuaGl0dGVzdC5IaXRUZXN0UGlwZURlZik7XG4gICAgICAgICAgICAgICAgaGl0dGVzdC5Db250cm9sSGl0VGVzdFBpcGVEZWYgPSBDb250cm9sSGl0VGVzdFBpcGVEZWY7XG4gICAgICAgICAgICAgICAgdmFyIHRhcGlucztcbiAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBzaG91bGRTa2lwKGRhdGEsIHBvcywgaGl0TGlzdCwgY3R4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gISFkYXRhLmFzc2V0cy5pc0VuYWJsZWQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGFwaW5zLnNob3VsZFNraXAgPSBzaG91bGRTa2lwO1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBjYW5IaXRJbnNpZGUoZGF0YSwgcG9zLCBoaXRMaXN0LCBjdHgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLmhpdENoaWxkcmVuKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaGl0TGlzdC5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0YXBpbnMuY2FuSGl0SW5zaWRlID0gY2FuSGl0SW5zaWRlO1xuICAgICAgICAgICAgICAgIH0pKHRhcGlucyA9IGhpdHRlc3QudGFwaW5zIHx8IChoaXR0ZXN0LnRhcGlucyA9IHt9KSk7XG4gICAgICAgICAgICB9KShoaXR0ZXN0ID0gY29udHJvbC5oaXR0ZXN0IHx8IChjb250cm9sLmhpdHRlc3QgPSB7fSkpO1xuICAgICAgICB9KShjb250cm9sID0gY29udHJvbHMuY29udHJvbCB8fCAoY29udHJvbHMuY29udHJvbCA9IHt9KSk7XG4gICAgfSkoY29udHJvbHMgPSBtaW5lcnZhLmNvbnRyb2xzIHx8IChtaW5lcnZhLmNvbnRyb2xzID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29udHJvbHM7XG4gICAgKGZ1bmN0aW9uIChjb250cm9scykge1xuICAgICAgICB2YXIgZ3JpZDtcbiAgICAgICAgKGZ1bmN0aW9uIChncmlkKSB7XG4gICAgICAgICAgICB2YXIgYXJyYW5nZTtcbiAgICAgICAgICAgIChmdW5jdGlvbiAoYXJyYW5nZSkge1xuICAgICAgICAgICAgICAgIHZhciBHcmlkQXJyYW5nZVBpcGVEZWYgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgICAgICAgICBfX2V4dGVuZHMoR3JpZEFycmFuZ2VQaXBlRGVmLCBfc3VwZXIpO1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBHcmlkQXJyYW5nZVBpcGVEZWYoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkVGFwaW5CZWZvcmUoJ2RvT3ZlcnJpZGUnLCAncmVzdG9yZU1lYXN1cmVSZXN1bHRzJywgYXJyYW5nZS50YXBpbnMucmVzdG9yZU1lYXN1cmVSZXN1bHRzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRUYXBpbkJlZm9yZSgnZG9PdmVycmlkZScsICdjYWxjQ29uc3VtZWQnLCBhcnJhbmdlLnRhcGlucy5jYWxjQ29uc3VtZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFkZFRhcGluQmVmb3JlKCdkb092ZXJyaWRlJywgJ3NldEFjdHVhbHMnLCBhcnJhbmdlLnRhcGlucy5zZXRBY3R1YWxzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlVGFwaW4oJ2RvT3ZlcnJpZGUnLCBhcnJhbmdlLnRhcGlucy5kb092ZXJyaWRlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBHcmlkQXJyYW5nZVBpcGVEZWYucHJvdG90eXBlLmNyZWF0ZVN0YXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXRlID0gX3N1cGVyLnByb3RvdHlwZS5jcmVhdGVTdGF0ZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuY29uc3VtZWQgPSBuZXcgbWluZXJ2YS5TaXplKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBHcmlkQXJyYW5nZVBpcGVEZWY7XG4gICAgICAgICAgICAgICAgfSkoY29udHJvbHMucGFuZWwuYXJyYW5nZS5QYW5lbEFycmFuZ2VQaXBlRGVmKTtcbiAgICAgICAgICAgICAgICBhcnJhbmdlLkdyaWRBcnJhbmdlUGlwZURlZiA9IEdyaWRBcnJhbmdlUGlwZURlZjtcbiAgICAgICAgICAgIH0pKGFycmFuZ2UgPSBncmlkLmFycmFuZ2UgfHwgKGdyaWQuYXJyYW5nZSA9IHt9KSk7XG4gICAgICAgIH0pKGdyaWQgPSBjb250cm9scy5ncmlkIHx8IChjb250cm9scy5ncmlkID0ge30pKTtcbiAgICB9KShjb250cm9scyA9IG1pbmVydmEuY29udHJvbHMgfHwgKG1pbmVydmEuY29udHJvbHMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb250cm9scztcbiAgICAoZnVuY3Rpb24gKGNvbnRyb2xzKSB7XG4gICAgICAgIHZhciBncmlkO1xuICAgICAgICAoZnVuY3Rpb24gKGdyaWQpIHtcbiAgICAgICAgICAgIHZhciBoZWxwZXJzO1xuICAgICAgICAgICAgKGZ1bmN0aW9uIChoZWxwZXJzKSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gYWxsb2NhdGVEZXNpcmVkU2l6ZShyb3dNYXQsIGNvbE1hdCkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDI7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1hdHJpeCA9IGkgPT09IDAgPyByb3dNYXQgOiBjb2xNYXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY291bnQgPSBtYXRyaXgubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgcm93ID0gY291bnQgLSAxOyByb3cgPj0gMDsgcm93LS0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBjb2wgPSByb3c7IGNvbCA+PSAwOyBjb2wtLSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3BhbnNTdGFyID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSByb3c7IGogPj0gY29sOyBqLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwYW5zU3RhciA9IHNwYW5zU3RhciB8fCAobWF0cml4W2pdW2pdLnR5cGUgPT09IGdyaWQuR3JpZFVuaXRUeXBlLlN0YXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJyZW50ID0gbWF0cml4W3Jvd11bY29sXS5kZXNpcmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG90YWxBbGxvY2F0ZWQgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBhID0gcm93OyBhID49IGNvbDsgYS0tKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEFsbG9jYXRlZCArPSBtYXRyaXhbYV1bYV0uZGVzaXJlZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodG90YWxBbGxvY2F0ZWQgPCBjdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWRkaXRpb25hbCA9IGN1cnJlbnQgLSB0b3RhbEFsbG9jYXRlZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzcGFuc1N0YXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRpdGlvbmFsID0gaGVscGVycy5hc3NpZ25TaXplKG1hdHJpeCwgY29sLCByb3csIGFkZGl0aW9uYWwsIGdyaWQuR3JpZFVuaXRUeXBlLlN0YXIsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkaXRpb25hbCA9IGhlbHBlcnMuYXNzaWduU2l6ZShtYXRyaXgsIGNvbCwgcm93LCBhZGRpdGlvbmFsLCBncmlkLkdyaWRVbml0VHlwZS5QaXhlbCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkaXRpb25hbCA9IGhlbHBlcnMuYXNzaWduU2l6ZShtYXRyaXgsIGNvbCwgcm93LCBhZGRpdGlvbmFsLCBncmlkLkdyaWRVbml0VHlwZS5BdXRvLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJvd01hdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcm93TWF0W2ldW2ldLm9mZmVyZWQgPSByb3dNYXRbaV1baV0uZGVzaXJlZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1hdHJpeC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sTWF0W2ldW2ldLm9mZmVyZWQgPSBjb2xNYXRbaV1baV0uZGVzaXJlZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBoZWxwZXJzLmFsbG9jYXRlRGVzaXJlZFNpemUgPSBhbGxvY2F0ZURlc2lyZWRTaXplO1xuICAgICAgICAgICAgfSkoaGVscGVycyA9IGdyaWQuaGVscGVycyB8fCAoZ3JpZC5oZWxwZXJzID0ge30pKTtcbiAgICAgICAgfSkoZ3JpZCA9IGNvbnRyb2xzLmdyaWQgfHwgKGNvbnRyb2xzLmdyaWQgPSB7fSkpO1xuICAgIH0pKGNvbnRyb2xzID0gbWluZXJ2YS5jb250cm9scyB8fCAobWluZXJ2YS5jb250cm9scyA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvbnRyb2xzO1xuICAgIChmdW5jdGlvbiAoY29udHJvbHMpIHtcbiAgICAgICAgdmFyIGdyaWQ7XG4gICAgICAgIChmdW5jdGlvbiAoZ3JpZCkge1xuICAgICAgICAgICAgdmFyIGhlbHBlcnM7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKGhlbHBlcnMpIHtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBhc3NpZ25TaXplKG1hdCwgc3RhcnQsIGVuZCwgc2l6ZSwgdW5pdFR5cGUsIGRlc2lyZWRTaXplKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjb3VudCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhc3NpZ25lZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2VnbWVudFNpemUgPSAwO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPD0gZW5kOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXIgPSBtYXRbaV1baV07XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWdtZW50U2l6ZSA9IGRlc2lyZWRTaXplID8gY3VyLmRlc2lyZWQgOiBjdXIub2ZmZXJlZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWdtZW50U2l6ZSA8IGN1ci5tYXgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnQgKz0gKHVuaXRUeXBlID09PSBncmlkLkdyaWRVbml0VHlwZS5TdGFyKSA/IGN1ci5zdGFycyA6IDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXNzaWduZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb250cmlidXRpb24gPSBzaXplIC8gY291bnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSBzdGFydDsgaSA8PSBlbmQ7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1ciA9IG1hdFtpXVtpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWdtZW50U2l6ZSA9IGRlc2lyZWRTaXplID8gY3VyLmRlc2lyZWQgOiBjdXIub2ZmZXJlZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShjdXIudHlwZSA9PT0gdW5pdFR5cGUgJiYgc2VnbWVudFNpemUgPCBjdXIubWF4KSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5ld1NpemUgPSBzZWdtZW50U2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdTaXplICs9IGNvbnRyaWJ1dGlvbiAqICh1bml0VHlwZSA9PT0gZ3JpZC5HcmlkVW5pdFR5cGUuU3RhciA/IGN1ci5zdGFycyA6IDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1NpemUgPSBNYXRoLm1pbihuZXdTaXplLCBjdXIubWF4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3NpZ25lZCA9IGFzc2lnbmVkIHx8IChuZXdTaXplID4gc2VnbWVudFNpemUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemUgLT0gbmV3U2l6ZSAtIHNlZ21lbnRTaXplO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZXNpcmVkU2l6ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VyLmRlc2lyZWQgPSBuZXdTaXplO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VyLm9mZmVyZWQgPSBuZXdTaXplO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IHdoaWxlIChhc3NpZ25lZCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzaXplO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBoZWxwZXJzLmFzc2lnblNpemUgPSBhc3NpZ25TaXplO1xuICAgICAgICAgICAgfSkoaGVscGVycyA9IGdyaWQuaGVscGVycyB8fCAoZ3JpZC5oZWxwZXJzID0ge30pKTtcbiAgICAgICAgfSkoZ3JpZCA9IGNvbnRyb2xzLmdyaWQgfHwgKGNvbnRyb2xzLmdyaWQgPSB7fSkpO1xuICAgIH0pKGNvbnRyb2xzID0gbWluZXJ2YS5jb250cm9scyB8fCAobWluZXJ2YS5jb250cm9scyA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvbnRyb2xzO1xuICAgIChmdW5jdGlvbiAoY29udHJvbHMpIHtcbiAgICAgICAgdmFyIGdyaWQ7XG4gICAgICAgIChmdW5jdGlvbiAoZ3JpZCkge1xuICAgICAgICAgICAgdmFyIGhlbHBlcnM7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKGhlbHBlcnMpIHtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBleHBhbmRTdGFyQ29scyhtYXQsIGNvbGRlZnMsIGF2YWlsYWJsZVNpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGF3ID0gYXZhaWxhYmxlU2l6ZS53aWR0aDtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXIgPSBtYXRbaV1baV07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VyLnR5cGUgPT09IGdyaWQuR3JpZFVuaXRUeXBlLlN0YXIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VyLm9mZmVyZWQgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3ID0gTWF0aC5tYXgoYXcgLSBjdXIub2ZmZXJlZCwgMCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYXcgPSBoZWxwZXJzLmFzc2lnblNpemUobWF0LCAwLCBtYXQubGVuZ3RoIC0gMSwgYXcsIGdyaWQuR3JpZFVuaXRUeXBlLlN0YXIsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb2xkZWZzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VyID0gbWF0W2ldW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1ci50eXBlID09PSBncmlkLkdyaWRVbml0VHlwZS5TdGFyKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbGRlZnNbaV0uc2V0QWN0dWFsV2lkdGgoY3VyLm9mZmVyZWQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGhlbHBlcnMuZXhwYW5kU3RhckNvbHMgPSBleHBhbmRTdGFyQ29scztcbiAgICAgICAgICAgIH0pKGhlbHBlcnMgPSBncmlkLmhlbHBlcnMgfHwgKGdyaWQuaGVscGVycyA9IHt9KSk7XG4gICAgICAgIH0pKGdyaWQgPSBjb250cm9scy5ncmlkIHx8IChjb250cm9scy5ncmlkID0ge30pKTtcbiAgICB9KShjb250cm9scyA9IG1pbmVydmEuY29udHJvbHMgfHwgKG1pbmVydmEuY29udHJvbHMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb250cm9scztcbiAgICAoZnVuY3Rpb24gKGNvbnRyb2xzKSB7XG4gICAgICAgIHZhciBncmlkO1xuICAgICAgICAoZnVuY3Rpb24gKGdyaWQpIHtcbiAgICAgICAgICAgIHZhciBoZWxwZXJzO1xuICAgICAgICAgICAgKGZ1bmN0aW9uIChoZWxwZXJzKSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZXhwYW5kU3RhclJvd3MobWF0LCByb3dkZWZzLCBhdmFpbGFibGVTaXplKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhaCA9IGF2YWlsYWJsZVNpemUuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1hdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1ciA9IG1hdFtpXVtpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXIudHlwZSA9PT0gZ3JpZC5HcmlkVW5pdFR5cGUuU3RhcilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXIub2ZmZXJlZCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWggPSBNYXRoLm1heChhaCAtIGN1ci5vZmZlcmVkLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBhaCA9IGhlbHBlcnMuYXNzaWduU2l6ZShtYXQsIDAsIG1hdC5sZW5ndGggLSAxLCBhaCwgZ3JpZC5HcmlkVW5pdFR5cGUuU3RhciwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJvd2RlZnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXIgPSBtYXRbaV1baV07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VyLnR5cGUgPT09IGdyaWQuR3JpZFVuaXRUeXBlLlN0YXIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93ZGVmc1tpXS5zZXRBY3R1YWxIZWlnaHQoY3VyLm9mZmVyZWQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGhlbHBlcnMuZXhwYW5kU3RhclJvd3MgPSBleHBhbmRTdGFyUm93cztcbiAgICAgICAgICAgIH0pKGhlbHBlcnMgPSBncmlkLmhlbHBlcnMgfHwgKGdyaWQuaGVscGVycyA9IHt9KSk7XG4gICAgICAgIH0pKGdyaWQgPSBjb250cm9scy5ncmlkIHx8IChjb250cm9scy5ncmlkID0ge30pKTtcbiAgICB9KShjb250cm9scyA9IG1pbmVydmEuY29udHJvbHMgfHwgKG1pbmVydmEuY29udHJvbHMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb250cm9scztcbiAgICAoZnVuY3Rpb24gKGNvbnRyb2xzKSB7XG4gICAgICAgIHZhciBncmlkO1xuICAgICAgICAoZnVuY3Rpb24gKGdyaWQpIHtcbiAgICAgICAgICAgIHZhciBtZWFzdXJlO1xuICAgICAgICAgICAgKGZ1bmN0aW9uIChtZWFzdXJlKSB7XG4gICAgICAgICAgICAgICAgdmFyIEdyaWRDaGlsZFBsYWNlbWVudCA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIEdyaWRDaGlsZFBsYWNlbWVudChtYXRyaXgsIHJvdywgY29sLCBzaXplKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1hdHJpeCA9IG1hdHJpeDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucm93ID0gcm93O1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb2wgPSBjb2w7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNpemUgPSBzaXplO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIEdyaWRDaGlsZFBsYWNlbWVudC5yb3cgPSBmdW5jdGlvbiAobWF0cml4LCBjaGlsZFNoYXBlLCBjaGlsZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBHcmlkQ2hpbGRQbGFjZW1lbnQobWF0cml4LCBjaGlsZFNoYXBlLnJvdyArIGNoaWxkU2hhcGUucm93c3BhbiAtIDEsIGNoaWxkU2hhcGUucm93LCBjaGlsZC5hc3NldHMuZGVzaXJlZFNpemUuaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgR3JpZENoaWxkUGxhY2VtZW50LmNvbCA9IGZ1bmN0aW9uIChtYXRyaXgsIGNoaWxkU2hhcGUsIGNoaWxkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEdyaWRDaGlsZFBsYWNlbWVudChtYXRyaXgsIGNoaWxkU2hhcGUuY29sICsgY2hpbGRTaGFwZS5jb2xzcGFuIC0gMSwgY2hpbGRTaGFwZS5jb2wsIGNoaWxkLmFzc2V0cy5kZXNpcmVkU2l6ZS53aWR0aCk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBHcmlkQ2hpbGRQbGFjZW1lbnQ7XG4gICAgICAgICAgICAgICAgfSkoKTtcbiAgICAgICAgICAgICAgICBtZWFzdXJlLkdyaWRDaGlsZFBsYWNlbWVudCA9IEdyaWRDaGlsZFBsYWNlbWVudDtcbiAgICAgICAgICAgIH0pKG1lYXN1cmUgPSBncmlkLm1lYXN1cmUgfHwgKGdyaWQubWVhc3VyZSA9IHt9KSk7XG4gICAgICAgIH0pKGdyaWQgPSBjb250cm9scy5ncmlkIHx8IChjb250cm9scy5ncmlkID0ge30pKTtcbiAgICB9KShjb250cm9scyA9IG1pbmVydmEuY29udHJvbHMgfHwgKG1pbmVydmEuY29udHJvbHMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb250cm9scztcbiAgICAoZnVuY3Rpb24gKGNvbnRyb2xzKSB7XG4gICAgICAgIHZhciBncmlkO1xuICAgICAgICAoZnVuY3Rpb24gKGdyaWQpIHtcbiAgICAgICAgICAgIHZhciBtZWFzdXJlO1xuICAgICAgICAgICAgKGZ1bmN0aW9uIChtZWFzdXJlKSB7XG4gICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChPdmVycmlkZVBhc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgT3ZlcnJpZGVQYXNzW092ZXJyaWRlUGFzc1tcIkF1dG9BdXRvXCJdID0gMF0gPSBcIkF1dG9BdXRvXCI7XG4gICAgICAgICAgICAgICAgICAgIE92ZXJyaWRlUGFzc1tPdmVycmlkZVBhc3NbXCJTdGFyQXV0b1wiXSA9IDFdID0gXCJTdGFyQXV0b1wiO1xuICAgICAgICAgICAgICAgICAgICBPdmVycmlkZVBhc3NbT3ZlcnJpZGVQYXNzW1wiQXV0b1N0YXJcIl0gPSAyXSA9IFwiQXV0b1N0YXJcIjtcbiAgICAgICAgICAgICAgICAgICAgT3ZlcnJpZGVQYXNzW092ZXJyaWRlUGFzc1tcIlN0YXJBdXRvQWdhaW5cIl0gPSAzXSA9IFwiU3RhckF1dG9BZ2FpblwiO1xuICAgICAgICAgICAgICAgICAgICBPdmVycmlkZVBhc3NbT3ZlcnJpZGVQYXNzW1wiTm9uU3RhclwiXSA9IDRdID0gXCJOb25TdGFyXCI7XG4gICAgICAgICAgICAgICAgICAgIE92ZXJyaWRlUGFzc1tPdmVycmlkZVBhc3NbXCJSZW1haW5pbmdTdGFyXCJdID0gNV0gPSBcIlJlbWFpbmluZ1N0YXJcIjtcbiAgICAgICAgICAgICAgICB9KShtZWFzdXJlLk92ZXJyaWRlUGFzcyB8fCAobWVhc3VyZS5PdmVycmlkZVBhc3MgPSB7fSkpO1xuICAgICAgICAgICAgICAgIHZhciBPdmVycmlkZVBhc3MgPSBtZWFzdXJlLk92ZXJyaWRlUGFzcztcbiAgICAgICAgICAgICAgICB2YXIgR3JpZENoaWxkU2hhcGUgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBHcmlkQ2hpbGRTaGFwZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBHcmlkQ2hpbGRTaGFwZS5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uIChjaGlsZCwgcm0sIGNtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29sID0gdGhpcy5jb2wgPSBNYXRoLm1pbihjaGlsZC5nZXRBdHRhY2hlZFZhbHVlKFwiR3JpZC5Db2x1bW5cIiksIGNtLmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzTmFOKGNvbCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb2wgPSBjb2wgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJvdyA9IHRoaXMucm93ID0gTWF0aC5taW4oY2hpbGQuZ2V0QXR0YWNoZWRWYWx1ZShcIkdyaWQuUm93XCIpLCBybS5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc05hTihyb3cpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucm93ID0gcm93ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb2xzcGFuID0gdGhpcy5jb2xzcGFuID0gTWF0aC5taW4oY2hpbGQuZ2V0QXR0YWNoZWRWYWx1ZShcIkdyaWQuQ29sdW1uU3BhblwiKSwgY20ubGVuZ3RoIC0gY29sKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc05hTihjb2xzcGFuKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbHNwYW4gPSBjb2xzcGFuID0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByb3dzcGFuID0gdGhpcy5yb3dzcGFuID0gTWF0aC5taW4oY2hpbGQuZ2V0QXR0YWNoZWRWYWx1ZShcIkdyaWQuUm93U3BhblwiKSwgcm0ubGVuZ3RoIC0gcm93KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc05hTihyb3dzcGFuKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJvd3NwYW4gPSByb3dzcGFuID0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhclJvdyA9IHRoaXMuYXV0b1JvdyA9IHRoaXMuc3RhckNvbCA9IHRoaXMuYXV0b0NvbCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IHJvdzsgaSA8IHJvdyArIHJvd3NwYW47IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhclJvdyA9IHRoaXMuc3RhclJvdyB8fCAocm1baV1baV0udHlwZSA9PT0gZ3JpZC5HcmlkVW5pdFR5cGUuU3Rhcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hdXRvUm93ID0gdGhpcy5hdXRvUm93IHx8IChybVtpXVtpXS50eXBlID09PSBncmlkLkdyaWRVbml0VHlwZS5BdXRvKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSBjb2w7IGkgPCBjb2wgKyBjb2xzcGFuOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXJDb2wgPSB0aGlzLnN0YXJDb2wgfHwgKGNtW2ldW2ldLnR5cGUgPT09IGdyaWQuR3JpZFVuaXRUeXBlLlN0YXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYXV0b0NvbCA9IHRoaXMuYXV0b0NvbCB8fCAoY21baV1baV0udHlwZSA9PT0gZ3JpZC5HcmlkVW5pdFR5cGUuQXV0byk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgR3JpZENoaWxkU2hhcGUucHJvdG90eXBlLnNob3VsZE1lYXN1cmVQYXNzID0gZnVuY3Rpb24gKGdyaWRTaGFwZSwgY2hpbGRTaXplLCBwYXNzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZFNpemUud2lkdGggPSBjaGlsZFNpemUuaGVpZ2h0ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmF1dG9Sb3cgJiYgdGhpcy5hdXRvQ29sICYmICF0aGlzLnN0YXJSb3cgJiYgIXRoaXMuc3RhckNvbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXNzICE9PSBPdmVycmlkZVBhc3MuQXV0b0F1dG8pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZFNpemUud2lkdGggPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRTaXplLmhlaWdodCA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnN0YXJSb3cgJiYgdGhpcy5hdXRvQ29sICYmICF0aGlzLnN0YXJDb2wpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFzcyAhPT0gT3ZlcnJpZGVQYXNzLlN0YXJBdXRvICYmIHBhc3MgIT09IE92ZXJyaWRlUGFzcy5TdGFyQXV0b0FnYWluKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhc3MgPT09IE92ZXJyaWRlUGFzcy5BdXRvQXV0byAmJiBncmlkU2hhcGUuaGFzQXV0b1N0YXIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkU2l6ZS5oZWlnaHQgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRTaXplLndpZHRoID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYXV0b1JvdyAmJiB0aGlzLnN0YXJDb2wgJiYgIXRoaXMuc3RhclJvdykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXNzICE9PSBPdmVycmlkZVBhc3MuQXV0b1N0YXIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZFNpemUuaGVpZ2h0ID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCh0aGlzLmF1dG9Sb3cgfHwgdGhpcy5hdXRvQ29sKSAmJiAhKHRoaXMuc3RhclJvdyB8fCB0aGlzLnN0YXJDb2wpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhc3MgIT09IE92ZXJyaWRlUGFzcy5Ob25TdGFyKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYXV0b1JvdylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRTaXplLmhlaWdodCA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5hdXRvQ29sKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZFNpemUud2lkdGggPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISh0aGlzLnN0YXJSb3cgfHwgdGhpcy5zdGFyQ29sKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFzcyA9PT0gT3ZlcnJpZGVQYXNzLk5vblN0YXI7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFzcyA9PT0gT3ZlcnJpZGVQYXNzLlJlbWFpbmluZ1N0YXI7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIEdyaWRDaGlsZFNoYXBlLnByb3RvdHlwZS5zaXplID0gZnVuY3Rpb24gKGNoaWxkU2l6ZSwgcm0sIGNtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gdGhpcy5yb3c7IGkgPCB0aGlzLnJvdyArIHRoaXMucm93c3BhbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRTaXplLmhlaWdodCArPSBybVtpXVtpXS5vZmZlcmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IHRoaXMuY29sOyBpIDwgdGhpcy5jb2wgKyB0aGlzLmNvbHNwYW47IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkU2l6ZS53aWR0aCArPSBjbVtpXVtpXS5vZmZlcmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gR3JpZENoaWxkU2hhcGU7XG4gICAgICAgICAgICAgICAgfSkoKTtcbiAgICAgICAgICAgICAgICBtZWFzdXJlLkdyaWRDaGlsZFNoYXBlID0gR3JpZENoaWxkU2hhcGU7XG4gICAgICAgICAgICB9KShtZWFzdXJlID0gZ3JpZC5tZWFzdXJlIHx8IChncmlkLm1lYXN1cmUgPSB7fSkpO1xuICAgICAgICB9KShncmlkID0gY29udHJvbHMuZ3JpZCB8fCAoY29udHJvbHMuZ3JpZCA9IHt9KSk7XG4gICAgfSkoY29udHJvbHMgPSBtaW5lcnZhLmNvbnRyb2xzIHx8IChtaW5lcnZhLmNvbnRyb2xzID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29udHJvbHM7XG4gICAgKGZ1bmN0aW9uIChjb250cm9scykge1xuICAgICAgICB2YXIgZ3JpZDtcbiAgICAgICAgKGZ1bmN0aW9uIChncmlkKSB7XG4gICAgICAgICAgICB2YXIgbWVhc3VyZTtcbiAgICAgICAgICAgIChmdW5jdGlvbiAobWVhc3VyZSkge1xuICAgICAgICAgICAgICAgIHZhciBHcmlkTWVhc3VyZVBpcGVEZWYgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgICAgICAgICBfX2V4dGVuZHMoR3JpZE1lYXN1cmVQaXBlRGVmLCBfc3VwZXIpO1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBHcmlkTWVhc3VyZVBpcGVEZWYoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkVGFwaW5CZWZvcmUoJ2RvT3ZlcnJpZGUnLCAnZW5zdXJlUm93TWF0cml4JywgbWVhc3VyZS50YXBpbnMuZW5zdXJlUm93TWF0cml4KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRUYXBpbkJlZm9yZSgnZG9PdmVycmlkZScsICdwcmVwYXJlUm93TWF0cml4JywgbWVhc3VyZS50YXBpbnMucHJlcGFyZVJvd01hdHJpeClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYWRkVGFwaW5CZWZvcmUoJ2RvT3ZlcnJpZGUnLCAnZW5zdXJlQ29sTWF0cml4JywgbWVhc3VyZS50YXBpbnMuZW5zdXJlQ29sTWF0cml4KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRUYXBpbkJlZm9yZSgnZG9PdmVycmlkZScsICdwcmVwYXJlQ29sTWF0cml4JywgbWVhc3VyZS50YXBpbnMucHJlcGFyZUNvbE1hdHJpeClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYWRkVGFwaW5CZWZvcmUoJ2RvT3ZlcnJpZGUnLCAnYnVpbGRTaGFwZScsIG1lYXN1cmUudGFwaW5zLmJ1aWxkU2hhcGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFkZFRhcGluQmVmb3JlKCdkb092ZXJyaWRlJywgJ2RvT3ZlcnJpZGVBdXRvQXV0bycsIG1lYXN1cmUudGFwaW5zLmNyZWF0ZURvT3ZlcnJpZGVQYXNzKG1lYXN1cmUuT3ZlcnJpZGVQYXNzLkF1dG9BdXRvKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYWRkVGFwaW5CZWZvcmUoJ2RvT3ZlcnJpZGUnLCAnZG9PdmVycmlkZVN0YXJBdXRvJywgbWVhc3VyZS50YXBpbnMuY3JlYXRlRG9PdmVycmlkZVBhc3MobWVhc3VyZS5PdmVycmlkZVBhc3MuU3RhckF1dG8pKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRUYXBpbkJlZm9yZSgnZG9PdmVycmlkZScsICdkb092ZXJyaWRlQXV0b1N0YXInLCBtZWFzdXJlLnRhcGlucy5jcmVhdGVEb092ZXJyaWRlUGFzcyhtZWFzdXJlLk92ZXJyaWRlUGFzcy5BdXRvU3RhcikpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFkZFRhcGluQmVmb3JlKCdkb092ZXJyaWRlJywgJ2RvT3ZlcnJpZGVTdGFyQXV0b0FnYWluJywgbWVhc3VyZS50YXBpbnMuY3JlYXRlRG9PdmVycmlkZVBhc3MobWVhc3VyZS5PdmVycmlkZVBhc3MuU3RhckF1dG9BZ2FpbikpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFkZFRhcGluQmVmb3JlKCdkb092ZXJyaWRlJywgJ2RvT3ZlcnJpZGVOb25TdGFyJywgbWVhc3VyZS50YXBpbnMuY3JlYXRlRG9PdmVycmlkZVBhc3MobWVhc3VyZS5PdmVycmlkZVBhc3MuTm9uU3RhcikpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFkZFRhcGluQmVmb3JlKCdkb092ZXJyaWRlJywgJ2RvT3ZlcnJpZGVSZW1haW5pbmdTdGFyJywgbWVhc3VyZS50YXBpbnMuY3JlYXRlRG9PdmVycmlkZVBhc3MobWVhc3VyZS5PdmVycmlkZVBhc3MuUmVtYWluaW5nU3RhcikpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2VUYXBpbignZG9PdmVycmlkZScsIG1lYXN1cmUudGFwaW5zLmRvT3ZlcnJpZGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFkZFRhcGluQWZ0ZXIoJ2RvT3ZlcnJpZGUnLCAnc2F2ZU1lYXN1cmVSZXN1bHRzJywgbWVhc3VyZS50YXBpbnMuc2F2ZU1lYXN1cmVSZXN1bHRzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBHcmlkTWVhc3VyZVBpcGVEZWYucHJvdG90eXBlLmNyZWF0ZVN0YXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXRlID0gX3N1cGVyLnByb3RvdHlwZS5jcmVhdGVTdGF0ZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUudG90YWxTdGFycyA9IG5ldyBtaW5lcnZhLlNpemUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLmdyaWRTaGFwZSA9IG5ldyBtZWFzdXJlLkdyaWRTaGFwZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuY2hpbGRTaGFwZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLmNoaWxkU2l6ZSA9IG5ldyBtaW5lcnZhLlNpemUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLnBsYWNlbWVudHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLnBsYWNlbWVudEluZGV4ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEdyaWRNZWFzdXJlUGlwZURlZjtcbiAgICAgICAgICAgICAgICB9KShjb250cm9scy5wYW5lbC5tZWFzdXJlLlBhbmVsTWVhc3VyZVBpcGVEZWYpO1xuICAgICAgICAgICAgICAgIG1lYXN1cmUuR3JpZE1lYXN1cmVQaXBlRGVmID0gR3JpZE1lYXN1cmVQaXBlRGVmO1xuICAgICAgICAgICAgfSkobWVhc3VyZSA9IGdyaWQubWVhc3VyZSB8fCAoZ3JpZC5tZWFzdXJlID0ge30pKTtcbiAgICAgICAgfSkoZ3JpZCA9IGNvbnRyb2xzLmdyaWQgfHwgKGNvbnRyb2xzLmdyaWQgPSB7fSkpO1xuICAgIH0pKGNvbnRyb2xzID0gbWluZXJ2YS5jb250cm9scyB8fCAobWluZXJ2YS5jb250cm9scyA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvbnRyb2xzO1xuICAgIChmdW5jdGlvbiAoY29udHJvbHMpIHtcbiAgICAgICAgdmFyIGdyaWQ7XG4gICAgICAgIChmdW5jdGlvbiAoZ3JpZCkge1xuICAgICAgICAgICAgdmFyIG1lYXN1cmU7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKG1lYXN1cmUpIHtcbiAgICAgICAgICAgICAgICB2YXIgR3JpZFNoYXBlID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gR3JpZFNoYXBlKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oYXNBdXRvQXV0byA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oYXNTdGFyQXV0byA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oYXNBdXRvU3RhciA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIEdyaWRTaGFwZS5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uIChjaGlsZFNoYXBlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oYXNBdXRvQXV0byA9IHRoaXMuaGFzU3RhckF1dG8gPSB0aGlzLmhhc0F1dG9TdGFyID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkU2hhcGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNzID0gY2hpbGRTaGFwZXNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oYXNBdXRvQXV0byA9IHRoaXMuaGFzQXV0b0F1dG8gfHwgKGNzLmF1dG9Sb3cgJiYgY3MuYXV0b0NvbCAmJiAhY3Muc3RhclJvdyAmJiAhY3Muc3RhckNvbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oYXNTdGFyQXV0byA9IHRoaXMuaGFzU3RhckF1dG8gfHwgKGNzLnN0YXJSb3cgJiYgY3MuYXV0b0NvbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oYXNBdXRvU3RhciA9IHRoaXMuaGFzQXV0b1N0YXIgfHwgKGNzLmF1dG9Sb3cgJiYgY3Muc3RhckNvbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBHcmlkU2hhcGU7XG4gICAgICAgICAgICAgICAgfSkoKTtcbiAgICAgICAgICAgICAgICBtZWFzdXJlLkdyaWRTaGFwZSA9IEdyaWRTaGFwZTtcbiAgICAgICAgICAgIH0pKG1lYXN1cmUgPSBncmlkLm1lYXN1cmUgfHwgKGdyaWQubWVhc3VyZSA9IHt9KSk7XG4gICAgICAgIH0pKGdyaWQgPSBjb250cm9scy5ncmlkIHx8IChjb250cm9scy5ncmlkID0ge30pKTtcbiAgICB9KShjb250cm9scyA9IG1pbmVydmEuY29udHJvbHMgfHwgKG1pbmVydmEuY29udHJvbHMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb250cm9scztcbiAgICAoZnVuY3Rpb24gKGNvbnRyb2xzKSB7XG4gICAgICAgIHZhciBwYW5lbDtcbiAgICAgICAgKGZ1bmN0aW9uIChwYW5lbCkge1xuICAgICAgICAgICAgdmFyIHByb2Nlc3N1cDtcbiAgICAgICAgICAgIChmdW5jdGlvbiAocHJvY2Vzc3VwKSB7XG4gICAgICAgICAgICAgICAgdmFyIFBhbmVsUHJvY2Vzc1VwUGlwZURlZiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIF9fZXh0ZW5kcyhQYW5lbFByb2Nlc3NVcFBpcGVEZWYsIF9zdXBlcik7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIFBhbmVsUHJvY2Vzc1VwUGlwZURlZigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRUYXBpbkJlZm9yZSgnY2FsY0V4dGVudHMnLCAncHJlQ2FsY0V4dGVudHMnLCBwcm9jZXNzdXAudGFwaW5zLnByZUNhbGNFeHRlbnRzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUGFuZWxQcm9jZXNzVXBQaXBlRGVmO1xuICAgICAgICAgICAgICAgIH0pKG1pbmVydmEuY29yZS5wcm9jZXNzdXAuUHJvY2Vzc1VwUGlwZURlZik7XG4gICAgICAgICAgICAgICAgcHJvY2Vzc3VwLlBhbmVsUHJvY2Vzc1VwUGlwZURlZiA9IFBhbmVsUHJvY2Vzc1VwUGlwZURlZjtcbiAgICAgICAgICAgIH0pKHByb2Nlc3N1cCA9IHBhbmVsLnByb2Nlc3N1cCB8fCAocGFuZWwucHJvY2Vzc3VwID0ge30pKTtcbiAgICAgICAgfSkocGFuZWwgPSBjb250cm9scy5wYW5lbCB8fCAoY29udHJvbHMucGFuZWwgPSB7fSkpO1xuICAgIH0pKGNvbnRyb2xzID0gbWluZXJ2YS5jb250cm9scyB8fCAobWluZXJ2YS5jb250cm9scyA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9wYW5lbC9wcm9jZXNzdXAvUGFuZWxQcm9jZXNzVXBQaXBlRGVmXCIgLz5cbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvbnRyb2xzO1xuICAgIChmdW5jdGlvbiAoY29udHJvbHMpIHtcbiAgICAgICAgdmFyIGdyaWQ7XG4gICAgICAgIChmdW5jdGlvbiAoZ3JpZCkge1xuICAgICAgICAgICAgdmFyIHByb2Nlc3N1cDtcbiAgICAgICAgICAgIChmdW5jdGlvbiAocHJvY2Vzc3VwKSB7XG4gICAgICAgICAgICAgICAgdmFyIEdyaWRQcm9jZXNzVXBQaXBlRGVmID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgX19leHRlbmRzKEdyaWRQcm9jZXNzVXBQaXBlRGVmLCBfc3VwZXIpO1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBHcmlkUHJvY2Vzc1VwUGlwZURlZigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXBsYWNlVGFwaW4oJ3ByZUNhbGNFeHRlbnRzJywgcHJvY2Vzc3VwLnRhcGlucy5wcmVDYWxjRXh0ZW50cylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZVRhcGluKCdjYWxjRXh0ZW50cycsIHByb2Nlc3N1cC50YXBpbnMuY2FsY0V4dGVudHMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBHcmlkUHJvY2Vzc1VwUGlwZURlZjtcbiAgICAgICAgICAgICAgICB9KShjb250cm9scy5wYW5lbC5wcm9jZXNzdXAuUGFuZWxQcm9jZXNzVXBQaXBlRGVmKTtcbiAgICAgICAgICAgICAgICBwcm9jZXNzdXAuR3JpZFByb2Nlc3NVcFBpcGVEZWYgPSBHcmlkUHJvY2Vzc1VwUGlwZURlZjtcbiAgICAgICAgICAgIH0pKHByb2Nlc3N1cCA9IGdyaWQucHJvY2Vzc3VwIHx8IChncmlkLnByb2Nlc3N1cCA9IHt9KSk7XG4gICAgICAgIH0pKGdyaWQgPSBjb250cm9scy5ncmlkIHx8IChjb250cm9scy5ncmlkID0ge30pKTtcbiAgICB9KShjb250cm9scyA9IG1pbmVydmEuY29udHJvbHMgfHwgKG1pbmVydmEuY29udHJvbHMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb250cm9scztcbiAgICAoZnVuY3Rpb24gKGNvbnRyb2xzKSB7XG4gICAgICAgIHZhciBwYW5lbDtcbiAgICAgICAgKGZ1bmN0aW9uIChwYW5lbCkge1xuICAgICAgICAgICAgdmFyIHJlbmRlcjtcbiAgICAgICAgICAgIChmdW5jdGlvbiAocmVuZGVyKSB7XG4gICAgICAgICAgICAgICAgdmFyIFBhbmVsUmVuZGVyUGlwZURlZiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIF9fZXh0ZW5kcyhQYW5lbFJlbmRlclBpcGVEZWYsIF9zdXBlcik7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIFBhbmVsUmVuZGVyUGlwZURlZigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXBsYWNlVGFwaW4oJ2RvUmVuZGVyJywgZG9SZW5kZXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQYW5lbFJlbmRlclBpcGVEZWY7XG4gICAgICAgICAgICAgICAgfSkobWluZXJ2YS5jb3JlLnJlbmRlci5SZW5kZXJQaXBlRGVmKTtcbiAgICAgICAgICAgICAgICByZW5kZXIuUGFuZWxSZW5kZXJQaXBlRGVmID0gUGFuZWxSZW5kZXJQaXBlRGVmO1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGRvUmVuZGVyKGlucHV0LCBzdGF0ZSwgb3V0cHV0LCBjdHgsIHJlZ2lvbiwgdHJlZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYmFja2dyb3VuZCA9IGlucHV0LmJhY2tncm91bmQ7XG4gICAgICAgICAgICAgICAgICAgIGlmICghYmFja2dyb3VuZCB8fCBiYWNrZ3JvdW5kLmlzVHJhbnNwYXJlbnQoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZXh0ZW50cyA9IGlucHV0LmV4dGVudHM7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtaW5lcnZhLlJlY3QuaXNFbXB0eShleHRlbnRzKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLmNvcmUuaGVscGVycy5yZW5kZXJMYXlvdXRDbGlwKGN0eCwgaW5wdXQsIHRyZWUpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmF3ID0gY3R4LnJhdztcbiAgICAgICAgICAgICAgICAgICAgcmF3LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgICAgICAgICByYXcucmVjdChleHRlbnRzLngsIGV4dGVudHMueSwgZXh0ZW50cy53aWR0aCwgZXh0ZW50cy5oZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICBjdHguZmlsbEV4KGJhY2tncm91bmQsIGV4dGVudHMpO1xuICAgICAgICAgICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KShyZW5kZXIgPSBwYW5lbC5yZW5kZXIgfHwgKHBhbmVsLnJlbmRlciA9IHt9KSk7XG4gICAgICAgIH0pKHBhbmVsID0gY29udHJvbHMucGFuZWwgfHwgKGNvbnRyb2xzLnBhbmVsID0ge30pKTtcbiAgICB9KShjb250cm9scyA9IG1pbmVydmEuY29udHJvbHMgfHwgKG1pbmVydmEuY29udHJvbHMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vcGFuZWwvcmVuZGVyL1BhbmVsUmVuZGVyUGlwZURlZlwiIC8+XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb250cm9scztcbiAgICAoZnVuY3Rpb24gKGNvbnRyb2xzKSB7XG4gICAgICAgIHZhciBncmlkO1xuICAgICAgICAoZnVuY3Rpb24gKGdyaWQpIHtcbiAgICAgICAgICAgIHZhciByZW5kZXI7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKHJlbmRlcikge1xuICAgICAgICAgICAgICAgIHZhciBHcmlkUmVuZGVyUGlwZURlZiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIF9fZXh0ZW5kcyhHcmlkUmVuZGVyUGlwZURlZiwgX3N1cGVyKTtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gR3JpZFJlbmRlclBpcGVEZWYoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkVGFwaW5BZnRlcignZG9SZW5kZXInLCAncmVuZGVyR3JpZExpbmVzJywgdGFwaW5zLnJlbmRlckdyaWRMaW5lcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgR3JpZFJlbmRlclBpcGVEZWYucHJvdG90eXBlLmNyZWF0ZVN0YXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXRlID0gX3N1cGVyLnByb3RvdHlwZS5jcmVhdGVTdGF0ZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuZnJhbWV3b3JrID0gbmV3IG1pbmVydmEuU2l6ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gR3JpZFJlbmRlclBpcGVEZWY7XG4gICAgICAgICAgICAgICAgfSkoY29udHJvbHMucGFuZWwucmVuZGVyLlBhbmVsUmVuZGVyUGlwZURlZik7XG4gICAgICAgICAgICAgICAgcmVuZGVyLkdyaWRSZW5kZXJQaXBlRGVmID0gR3JpZFJlbmRlclBpcGVEZWY7XG4gICAgICAgICAgICAgICAgdmFyIHRhcGlucztcbiAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiByZW5kZXJHcmlkTGluZXMoaW5wdXQsIHN0YXRlLCBvdXRwdXQsIGN0eCwgcmVnaW9uLCB0cmVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlucHV0LnNob3dHcmlkTGluZXMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZnJhbWV3b3JrID0gc3RhdGUuZnJhbWV3b3JrO1xuICAgICAgICAgICAgICAgICAgICAgICAgZnJhbWV3b3JrLndpZHRoID0gaW5wdXQuYWN0dWFsV2lkdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBmcmFtZXdvcmsuaGVpZ2h0ID0gaW5wdXQuYWN0dWFsSGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5jb3JlLmhlbHBlcnMuY29lcmNlU2l6ZShmcmFtZXdvcmssIGlucHV0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByYXcgPSBjdHgucmF3O1xuICAgICAgICAgICAgICAgICAgICAgICAgcmF3LnNhdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGNvbHMgPSBpbnB1dC5jb2x1bW5EZWZpbml0aW9ucywgaSA9IDAsIHggPSAwOyBpIDwgY29scy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHggKz0gY29sc1tpXS5BY3R1YWxXaWR0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXcuYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3LnNldExpbmVEYXNoKFs1XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3Lm1vdmVUbyh4LCAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXcubGluZVRvKHgsIGZyYW1ld29yay5oZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhdy5zdHJva2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHJvd3MgPSBpbnB1dC5yb3dEZWZpbml0aW9ucywgaSA9IDAsIHkgPSAwOyBpIDwgcm93cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHkgKz0gcm93c1tpXS5BY3R1YWxIZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhdy5zZXRMaW5lRGFzaChbNV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhdy5tb3ZlVG8oMCwgeSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3LmxpbmVUbyhmcmFtZXdvcmsud2lkdGgsIHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhdy5zdHJva2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJhdy5yZXN0b3JlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0YXBpbnMucmVuZGVyR3JpZExpbmVzID0gcmVuZGVyR3JpZExpbmVzO1xuICAgICAgICAgICAgICAgIH0pKHRhcGlucyA9IHJlbmRlci50YXBpbnMgfHwgKHJlbmRlci50YXBpbnMgPSB7fSkpO1xuICAgICAgICAgICAgfSkocmVuZGVyID0gZ3JpZC5yZW5kZXIgfHwgKGdyaWQucmVuZGVyID0ge30pKTtcbiAgICAgICAgfSkoZ3JpZCA9IGNvbnRyb2xzLmdyaWQgfHwgKGNvbnRyb2xzLmdyaWQgPSB7fSkpO1xuICAgIH0pKGNvbnRyb2xzID0gbWluZXJ2YS5jb250cm9scyB8fCAobWluZXJ2YS5jb250cm9scyA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvbnRyb2xzO1xuICAgIChmdW5jdGlvbiAoY29udHJvbHMpIHtcbiAgICAgICAgdmFyIGltYWdlO1xuICAgICAgICAoZnVuY3Rpb24gKGltYWdlKSB7XG4gICAgICAgICAgICB2YXIgYXJyYW5nZTtcbiAgICAgICAgICAgIChmdW5jdGlvbiAoYXJyYW5nZSkge1xuICAgICAgICAgICAgICAgIHZhciBJbWFnZUFycmFuZ2VQaXBlRGVmID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgX19leHRlbmRzKEltYWdlQXJyYW5nZVBpcGVEZWYsIF9zdXBlcik7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIEltYWdlQXJyYW5nZVBpcGVEZWYoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkVGFwaW5BZnRlcignaW52YWxpZGF0ZUZ1dHVyZScsICdpbnZhbGlkYXRlTWV0cmljcycsIGFycmFuZ2UudGFwaW5zLmludmFsaWRhdGVNZXRyaWNzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRUYXBpbkJlZm9yZSgnZG9PdmVycmlkZScsICdjYWxjSW1hZ2VCb3VuZHMnLCBhcnJhbmdlLnRhcGlucy5jYWxjSW1hZ2VCb3VuZHMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFkZFRhcGluQmVmb3JlKCdkb092ZXJyaWRlJywgJ2NhbGNTdHJldGNoJywgYXJyYW5nZS50YXBpbnMuY2FsY1N0cmV0Y2gpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2VUYXBpbignZG9PdmVycmlkZScsIGFycmFuZ2UudGFwaW5zLmRvT3ZlcnJpZGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIEltYWdlQXJyYW5nZVBpcGVEZWYucHJvdG90eXBlLmNyZWF0ZVN0YXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXRlID0gX3N1cGVyLnByb3RvdHlwZS5jcmVhdGVTdGF0ZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuaW1hZ2VCb3VuZHMgPSBuZXcgbWluZXJ2YS5SZWN0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5zdHJldGNoWCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5zdHJldGNoWSA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBJbWFnZUFycmFuZ2VQaXBlRGVmO1xuICAgICAgICAgICAgICAgIH0pKG1pbmVydmEuY29yZS5hcnJhbmdlLkFycmFuZ2VQaXBlRGVmKTtcbiAgICAgICAgICAgICAgICBhcnJhbmdlLkltYWdlQXJyYW5nZVBpcGVEZWYgPSBJbWFnZUFycmFuZ2VQaXBlRGVmO1xuICAgICAgICAgICAgfSkoYXJyYW5nZSA9IGltYWdlLmFycmFuZ2UgfHwgKGltYWdlLmFycmFuZ2UgPSB7fSkpO1xuICAgICAgICB9KShpbWFnZSA9IGNvbnRyb2xzLmltYWdlIHx8IChjb250cm9scy5pbWFnZSA9IHt9KSk7XG4gICAgfSkoY29udHJvbHMgPSBtaW5lcnZhLmNvbnRyb2xzIHx8IChtaW5lcnZhLmNvbnRyb2xzID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29udHJvbHM7XG4gICAgKGZ1bmN0aW9uIChjb250cm9scykge1xuICAgICAgICB2YXIgaW1hZ2U7XG4gICAgICAgIChmdW5jdGlvbiAoaW1hZ2UpIHtcbiAgICAgICAgICAgIHZhciBoaXR0ZXN0O1xuICAgICAgICAgICAgKGZ1bmN0aW9uIChoaXR0ZXN0KSB7XG4gICAgICAgICAgICAgICAgdmFyIEltYWdlSGl0VGVzdFBpcGVEZWYgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgICAgICAgICBfX2V4dGVuZHMoSW1hZ2VIaXRUZXN0UGlwZURlZiwgX3N1cGVyKTtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gSW1hZ2VIaXRUZXN0UGlwZURlZigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXBsYWNlVGFwaW4oJ2luc2lkZUNoaWxkcmVuJywgaGl0dGVzdC50YXBpbnMuaW5zaWRlQ2hpbGRyZW4pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2VUYXBpbignY2FuSGl0SW5zaWRlJywgaGl0dGVzdC50YXBpbnMuY2FuSGl0SW5zaWRlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRUYXBpbkFmdGVyKCdpbnNpZGVPYmplY3QnLCAnaW5zaWRlU3RyZXRjaCcsIGhpdHRlc3QudGFwaW5zLmluc2lkZVN0cmV0Y2gpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIEltYWdlSGl0VGVzdFBpcGVEZWYucHJvdG90eXBlLnByZXBhcmUgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5pbWdSZWN0ID0gZGF0YS5pbWdSZWN0IHx8IG5ldyBtaW5lcnZhLlJlY3QoKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEltYWdlSGl0VGVzdFBpcGVEZWY7XG4gICAgICAgICAgICAgICAgfSkobWluZXJ2YS5jb3JlLmhpdHRlc3QuSGl0VGVzdFBpcGVEZWYpO1xuICAgICAgICAgICAgICAgIGhpdHRlc3QuSW1hZ2VIaXRUZXN0UGlwZURlZiA9IEltYWdlSGl0VGVzdFBpcGVEZWY7XG4gICAgICAgICAgICB9KShoaXR0ZXN0ID0gaW1hZ2UuaGl0dGVzdCB8fCAoaW1hZ2UuaGl0dGVzdCA9IHt9KSk7XG4gICAgICAgIH0pKGltYWdlID0gY29udHJvbHMuaW1hZ2UgfHwgKGNvbnRyb2xzLmltYWdlID0ge30pKTtcbiAgICB9KShjb250cm9scyA9IG1pbmVydmEuY29udHJvbHMgfHwgKG1pbmVydmEuY29udHJvbHMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb250cm9scztcbiAgICAoZnVuY3Rpb24gKGNvbnRyb2xzKSB7XG4gICAgICAgIHZhciBpbWFnZTtcbiAgICAgICAgKGZ1bmN0aW9uIChpbWFnZSkge1xuICAgICAgICAgICAgdmFyIG1lYXN1cmU7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKG1lYXN1cmUpIHtcbiAgICAgICAgICAgICAgICB2YXIgSW1hZ2VNZWFzdXJlUGlwZURlZiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIF9fZXh0ZW5kcyhJbWFnZU1lYXN1cmVQaXBlRGVmLCBfc3VwZXIpO1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBJbWFnZU1lYXN1cmVQaXBlRGVmKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZFRhcGluQmVmb3JlKCdkb092ZXJyaWRlJywgJ2NhbGNJbWFnZUJvdW5kcycsIG1lYXN1cmUudGFwaW5zLmNhbGNJbWFnZUJvdW5kcylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYWRkVGFwaW5CZWZvcmUoJ2RvT3ZlcnJpZGUnLCAnY2FsY1N0cmV0Y2gnLCBtZWFzdXJlLnRhcGlucy5jYWxjU3RyZXRjaClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZVRhcGluKCdkb092ZXJyaWRlJywgbWVhc3VyZS50YXBpbnMuZG9PdmVycmlkZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgSW1hZ2VNZWFzdXJlUGlwZURlZi5wcm90b3R5cGUuY3JlYXRlU3RhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RhdGUgPSBfc3VwZXIucHJvdG90eXBlLmNyZWF0ZVN0YXRlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5pbWFnZUJvdW5kcyA9IG5ldyBtaW5lcnZhLlJlY3QoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLnN0cmV0Y2hYID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLnN0cmV0Y2hZID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEltYWdlTWVhc3VyZVBpcGVEZWY7XG4gICAgICAgICAgICAgICAgfSkobWluZXJ2YS5jb3JlLm1lYXN1cmUuTWVhc3VyZVBpcGVEZWYpO1xuICAgICAgICAgICAgICAgIG1lYXN1cmUuSW1hZ2VNZWFzdXJlUGlwZURlZiA9IEltYWdlTWVhc3VyZVBpcGVEZWY7XG4gICAgICAgICAgICB9KShtZWFzdXJlID0gaW1hZ2UubWVhc3VyZSB8fCAoaW1hZ2UubWVhc3VyZSA9IHt9KSk7XG4gICAgICAgIH0pKGltYWdlID0gY29udHJvbHMuaW1hZ2UgfHwgKGNvbnRyb2xzLmltYWdlID0ge30pKTtcbiAgICB9KShjb250cm9scyA9IG1pbmVydmEuY29udHJvbHMgfHwgKG1pbmVydmEuY29udHJvbHMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb250cm9scztcbiAgICAoZnVuY3Rpb24gKGNvbnRyb2xzKSB7XG4gICAgICAgIHZhciBpbWFnZTtcbiAgICAgICAgKGZ1bmN0aW9uIChpbWFnZSkge1xuICAgICAgICAgICAgdmFyIHByb2Nlc3Nkb3duO1xuICAgICAgICAgICAgKGZ1bmN0aW9uIChwcm9jZXNzZG93bikge1xuICAgICAgICAgICAgICAgIHZhciBJbWFnZVByb2Nlc3NEb3duUGlwZURlZiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIF9fZXh0ZW5kcyhJbWFnZVByb2Nlc3NEb3duUGlwZURlZiwgX3N1cGVyKTtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gSW1hZ2VQcm9jZXNzRG93blBpcGVEZWYoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkVGFwaW5CZWZvcmUoJ3Byb2Nlc3NMYXlvdXRDbGlwJywgJ2NoZWNrTmVlZEltYWdlTWV0cmljcycsIHByb2Nlc3Nkb3duLnRhcGlucy5jaGVja05lZWRJbWFnZU1ldHJpY3MpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFkZFRhcGluQWZ0ZXIoJ2NoZWNrTmVlZEltYWdlTWV0cmljcycsICdwcmVwYXJlSW1hZ2VNZXRyaWNzJywgcHJvY2Vzc2Rvd24udGFwaW5zLnByZXBhcmVJbWFnZU1ldHJpY3MpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFkZFRhcGluQWZ0ZXIoJ3ByZXBhcmVJbWFnZU1ldHJpY3MnLCAnY2FsY0ltYWdlVHJhbnNmb3JtJywgcHJvY2Vzc2Rvd24udGFwaW5zLmNhbGNJbWFnZVRyYW5zZm9ybSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYWRkVGFwaW5BZnRlcignY2FsY0ltYWdlVHJhbnNmb3JtJywgJ2NhbGNPdmVybGFwJywgcHJvY2Vzc2Rvd24udGFwaW5zLmNhbGNPdmVybGFwKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBJbWFnZVByb2Nlc3NEb3duUGlwZURlZi5wcm90b3R5cGUuY3JlYXRlU3RhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RhdGUgPSBfc3VwZXIucHJvdG90eXBlLmNyZWF0ZVN0YXRlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5pbWdSZWN0ID0gbmV3IG1pbmVydmEuUmVjdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUucGFpbnRSZWN0ID0gbmV3IG1pbmVydmEuUmVjdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuY2FsY0ltYWdlTWV0cmljcyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuaW1nQWRqdXN0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIEltYWdlUHJvY2Vzc0Rvd25QaXBlRGVmLnByb3RvdHlwZS5jcmVhdGVPdXRwdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb3V0cHV0ID0gX3N1cGVyLnByb3RvdHlwZS5jcmVhdGVPdXRwdXQuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dC5pbWdYZm9ybSA9IG1pbmVydmEubWF0My5pZGVudGl0eSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0Lm92ZXJsYXAgPSBtaW5lcnZhLlJlY3RPdmVybGFwLkluO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgSW1hZ2VQcm9jZXNzRG93blBpcGVEZWYucHJvdG90eXBlLnByZXBhcmUgPSBmdW5jdGlvbiAoaW5wdXQsIHN0YXRlLCBvdXRwdXQsIHZwaW5wdXQsIHRyZWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUucHJlcGFyZS5jYWxsKHRoaXMsIGlucHV0LCBzdGF0ZSwgb3V0cHV0LCB2cGlucHV0LCB0cmVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dC5vdmVybGFwID0gaW5wdXQub3ZlcmxhcDtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbmVydmEubWF0My5jb3B5VG8oaW5wdXQuaW1nWGZvcm0sIG91dHB1dC5pbWdYZm9ybSk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIEltYWdlUHJvY2Vzc0Rvd25QaXBlRGVmLnByb3RvdHlwZS5mbHVzaCA9IGZ1bmN0aW9uIChpbnB1dCwgc3RhdGUsIG91dHB1dCwgdnBpbnB1dCwgdHJlZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5mbHVzaC5jYWxsKHRoaXMsIGlucHV0LCBzdGF0ZSwgb3V0cHV0LCB2cGlucHV0LCB0cmVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0Lm92ZXJsYXAgPSBvdXRwdXQub3ZlcmxhcDtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbmVydmEubWF0My5jb3B5VG8ob3V0cHV0LmltZ1hmb3JtLCBpbnB1dC5pbWdYZm9ybSk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBJbWFnZVByb2Nlc3NEb3duUGlwZURlZjtcbiAgICAgICAgICAgICAgICB9KShtaW5lcnZhLmNvcmUucHJvY2Vzc2Rvd24uUHJvY2Vzc0Rvd25QaXBlRGVmKTtcbiAgICAgICAgICAgICAgICBwcm9jZXNzZG93bi5JbWFnZVByb2Nlc3NEb3duUGlwZURlZiA9IEltYWdlUHJvY2Vzc0Rvd25QaXBlRGVmO1xuICAgICAgICAgICAgfSkocHJvY2Vzc2Rvd24gPSBpbWFnZS5wcm9jZXNzZG93biB8fCAoaW1hZ2UucHJvY2Vzc2Rvd24gPSB7fSkpO1xuICAgICAgICB9KShpbWFnZSA9IGNvbnRyb2xzLmltYWdlIHx8IChjb250cm9scy5pbWFnZSA9IHt9KSk7XG4gICAgfSkoY29udHJvbHMgPSBtaW5lcnZhLmNvbnRyb2xzIHx8IChtaW5lcnZhLmNvbnRyb2xzID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29udHJvbHM7XG4gICAgKGZ1bmN0aW9uIChjb250cm9scykge1xuICAgICAgICB2YXIgaW1hZ2U7XG4gICAgICAgIChmdW5jdGlvbiAoaW1hZ2UpIHtcbiAgICAgICAgICAgIHZhciByZW5kZXI7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKHJlbmRlcikge1xuICAgICAgICAgICAgICAgIHZhciBJbWFnZVJlbmRlclBpcGVEZWYgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgICAgICAgICBfX2V4dGVuZHMoSW1hZ2VSZW5kZXJQaXBlRGVmLCBfc3VwZXIpO1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBJbWFnZVJlbmRlclBpcGVEZWYoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVwbGFjZVRhcGluKCdkb1JlbmRlcicsIHJlbmRlci50YXBpbnMuZG9SZW5kZXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBJbWFnZVJlbmRlclBpcGVEZWY7XG4gICAgICAgICAgICAgICAgfSkobWluZXJ2YS5jb3JlLnJlbmRlci5SZW5kZXJQaXBlRGVmKTtcbiAgICAgICAgICAgICAgICByZW5kZXIuSW1hZ2VSZW5kZXJQaXBlRGVmID0gSW1hZ2VSZW5kZXJQaXBlRGVmO1xuICAgICAgICAgICAgfSkocmVuZGVyID0gaW1hZ2UucmVuZGVyIHx8IChpbWFnZS5yZW5kZXIgPSB7fSkpO1xuICAgICAgICB9KShpbWFnZSA9IGNvbnRyb2xzLmltYWdlIHx8IChjb250cm9scy5pbWFnZSA9IHt9KSk7XG4gICAgfSkoY29udHJvbHMgPSBtaW5lcnZhLmNvbnRyb2xzIHx8IChtaW5lcnZhLmNvbnRyb2xzID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29udHJvbHM7XG4gICAgKGZ1bmN0aW9uIChjb250cm9scykge1xuICAgICAgICB2YXIgb3ZlcmxheTtcbiAgICAgICAgKGZ1bmN0aW9uIChvdmVybGF5KSB7XG4gICAgICAgICAgICB2YXIgaGl0dGVzdDtcbiAgICAgICAgICAgIChmdW5jdGlvbiAoaGl0dGVzdCkge1xuICAgICAgICAgICAgICAgIHZhciBPdmVybGF5SGl0VGVzdFBpcGVEZWYgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgICAgICAgICBfX2V4dGVuZHMoT3ZlcmxheUhpdFRlc3RQaXBlRGVmLCBfc3VwZXIpO1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBPdmVybGF5SGl0VGVzdFBpcGVEZWYoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkVGFwaW5CZWZvcmUoJ2NhbkhpdCcsICdzaG91bGRTa2lwJywgdGFwaW5zLnNob3VsZFNraXApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBPdmVybGF5SGl0VGVzdFBpcGVEZWY7XG4gICAgICAgICAgICAgICAgfSkobWluZXJ2YS5jb3JlLmhpdHRlc3QuSGl0VGVzdFBpcGVEZWYpO1xuICAgICAgICAgICAgICAgIGhpdHRlc3QuT3ZlcmxheUhpdFRlc3RQaXBlRGVmID0gT3ZlcmxheUhpdFRlc3RQaXBlRGVmO1xuICAgICAgICAgICAgICAgIHZhciB0YXBpbnM7XG4gICAgICAgICAgICAgICAgKGZ1bmN0aW9uICh0YXBpbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gc2hvdWxkU2tpcChkYXRhLCBwb3MsIGhpdExpc3QsIGN0eCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICEhZGF0YS5hc3NldHMuaXNWaXNpYmxlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRhcGlucy5zaG91bGRTa2lwID0gc2hvdWxkU2tpcDtcbiAgICAgICAgICAgICAgICB9KSh0YXBpbnMgPSBoaXR0ZXN0LnRhcGlucyB8fCAoaGl0dGVzdC50YXBpbnMgPSB7fSkpO1xuICAgICAgICAgICAgfSkoaGl0dGVzdCA9IG92ZXJsYXkuaGl0dGVzdCB8fCAob3ZlcmxheS5oaXR0ZXN0ID0ge30pKTtcbiAgICAgICAgfSkob3ZlcmxheSA9IGNvbnRyb2xzLm92ZXJsYXkgfHwgKGNvbnRyb2xzLm92ZXJsYXkgPSB7fSkpO1xuICAgIH0pKGNvbnRyb2xzID0gbWluZXJ2YS5jb250cm9scyB8fCAobWluZXJ2YS5jb250cm9scyA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvbnRyb2xzO1xuICAgIChmdW5jdGlvbiAoY29udHJvbHMpIHtcbiAgICAgICAgdmFyIG92ZXJsYXk7XG4gICAgICAgIChmdW5jdGlvbiAob3ZlcmxheSkge1xuICAgICAgICAgICAgdmFyIHByb2Nlc3N1cDtcbiAgICAgICAgICAgIChmdW5jdGlvbiAocHJvY2Vzc3VwKSB7XG4gICAgICAgICAgICAgICAgdmFyIE92ZXJsYXlQcm9jZXNzVXBQaXBlRGVmID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgX19leHRlbmRzKE92ZXJsYXlQcm9jZXNzVXBQaXBlRGVmLCBfc3VwZXIpO1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBPdmVybGF5UHJvY2Vzc1VwUGlwZURlZigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVUYXBpbignY2FsY0FjdHVhbFNpemUnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVUYXBpbignY2FsY0V4dGVudHMnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVUYXBpbignY2FsY1BhaW50Qm91bmRzJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE92ZXJsYXlQcm9jZXNzVXBQaXBlRGVmO1xuICAgICAgICAgICAgICAgIH0pKG1pbmVydmEuY29yZS5wcm9jZXNzdXAuUHJvY2Vzc1VwUGlwZURlZik7XG4gICAgICAgICAgICAgICAgcHJvY2Vzc3VwLk92ZXJsYXlQcm9jZXNzVXBQaXBlRGVmID0gT3ZlcmxheVByb2Nlc3NVcFBpcGVEZWY7XG4gICAgICAgICAgICB9KShwcm9jZXNzdXAgPSBvdmVybGF5LnByb2Nlc3N1cCB8fCAob3ZlcmxheS5wcm9jZXNzdXAgPSB7fSkpO1xuICAgICAgICB9KShvdmVybGF5ID0gY29udHJvbHMub3ZlcmxheSB8fCAoY29udHJvbHMub3ZlcmxheSA9IHt9KSk7XG4gICAgfSkoY29udHJvbHMgPSBtaW5lcnZhLmNvbnRyb2xzIHx8IChtaW5lcnZhLmNvbnRyb2xzID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29udHJvbHM7XG4gICAgKGZ1bmN0aW9uIChjb250cm9scykge1xuICAgICAgICB2YXIgcGFuZWw7XG4gICAgICAgIChmdW5jdGlvbiAocGFuZWwpIHtcbiAgICAgICAgICAgIHZhciBoaXR0ZXN0O1xuICAgICAgICAgICAgKGZ1bmN0aW9uIChoaXR0ZXN0KSB7XG4gICAgICAgICAgICAgICAgdmFyIFBhbmVsSGl0VGVzdFBpcGVEZWYgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgICAgICAgICBfX2V4dGVuZHMoUGFuZWxIaXRUZXN0UGlwZURlZiwgX3N1cGVyKTtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gUGFuZWxIaXRUZXN0UGlwZURlZigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXBsYWNlVGFwaW4oJ2NhbkhpdEluc2lkZScsIHRhcGlucy5jYW5IaXRJbnNpZGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQYW5lbEhpdFRlc3RQaXBlRGVmO1xuICAgICAgICAgICAgICAgIH0pKG1pbmVydmEuY29yZS5oaXR0ZXN0LkhpdFRlc3RQaXBlRGVmKTtcbiAgICAgICAgICAgICAgICBoaXR0ZXN0LlBhbmVsSGl0VGVzdFBpcGVEZWYgPSBQYW5lbEhpdFRlc3RQaXBlRGVmO1xuICAgICAgICAgICAgICAgIHZhciB0YXBpbnM7XG4gICAgICAgICAgICAgICAgKGZ1bmN0aW9uICh0YXBpbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gY2FuSGl0SW5zaWRlKGRhdGEsIHBvcywgaGl0TGlzdCwgY3R4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5oaXRDaGlsZHJlbilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZGF0YS5hc3NldHMuYmFja2dyb3VuZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpdExpc3Quc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRhcGlucy5jYW5IaXRJbnNpZGUgPSBjYW5IaXRJbnNpZGU7XG4gICAgICAgICAgICAgICAgfSkodGFwaW5zID0gaGl0dGVzdC50YXBpbnMgfHwgKGhpdHRlc3QudGFwaW5zID0ge30pKTtcbiAgICAgICAgICAgIH0pKGhpdHRlc3QgPSBwYW5lbC5oaXR0ZXN0IHx8IChwYW5lbC5oaXR0ZXN0ID0ge30pKTtcbiAgICAgICAgfSkocGFuZWwgPSBjb250cm9scy5wYW5lbCB8fCAoY29udHJvbHMucGFuZWwgPSB7fSkpO1xuICAgIH0pKGNvbnRyb2xzID0gbWluZXJ2YS5jb250cm9scyB8fCAobWluZXJ2YS5jb250cm9scyA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvbnRyb2xzO1xuICAgIChmdW5jdGlvbiAoY29udHJvbHMpIHtcbiAgICAgICAgdmFyIHBvcHVwO1xuICAgICAgICAoZnVuY3Rpb24gKHBvcHVwKSB7XG4gICAgICAgICAgICB2YXIgaGl0dGVzdDtcbiAgICAgICAgICAgIChmdW5jdGlvbiAoaGl0dGVzdCkge1xuICAgICAgICAgICAgICAgIHZhciBQb3B1cEhpdFRlc3RQaXBlRGVmID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgX19leHRlbmRzKFBvcHVwSGl0VGVzdFBpcGVEZWYsIF9zdXBlcik7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIFBvcHVwSGl0VGVzdFBpcGVEZWYoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkVGFwaW5CZWZvcmUoJ2NhbkhpdCcsICdzaG91bGRTa2lwJywgdGFwaW5zLnNob3VsZFNraXApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQb3B1cEhpdFRlc3RQaXBlRGVmO1xuICAgICAgICAgICAgICAgIH0pKG1pbmVydmEuY29yZS5oaXR0ZXN0LkhpdFRlc3RQaXBlRGVmKTtcbiAgICAgICAgICAgICAgICBoaXR0ZXN0LlBvcHVwSGl0VGVzdFBpcGVEZWYgPSBQb3B1cEhpdFRlc3RQaXBlRGVmO1xuICAgICAgICAgICAgICAgIHZhciB0YXBpbnM7XG4gICAgICAgICAgICAgICAgKGZ1bmN0aW9uICh0YXBpbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gc2hvdWxkU2tpcChkYXRhLCBwb3MsIGhpdExpc3QsIGN0eCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICEhZGF0YS5hc3NldHMuaXNWaXNpYmxlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRhcGlucy5zaG91bGRTa2lwID0gc2hvdWxkU2tpcDtcbiAgICAgICAgICAgICAgICB9KSh0YXBpbnMgPSBoaXR0ZXN0LnRhcGlucyB8fCAoaGl0dGVzdC50YXBpbnMgPSB7fSkpO1xuICAgICAgICAgICAgfSkoaGl0dGVzdCA9IHBvcHVwLmhpdHRlc3QgfHwgKHBvcHVwLmhpdHRlc3QgPSB7fSkpO1xuICAgICAgICB9KShwb3B1cCA9IGNvbnRyb2xzLnBvcHVwIHx8IChjb250cm9scy5wb3B1cCA9IHt9KSk7XG4gICAgfSkoY29udHJvbHMgPSBtaW5lcnZhLmNvbnRyb2xzIHx8IChtaW5lcnZhLmNvbnRyb2xzID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29udHJvbHM7XG4gICAgKGZ1bmN0aW9uIChjb250cm9scykge1xuICAgICAgICB2YXIgcG9wdXA7XG4gICAgICAgIChmdW5jdGlvbiAocG9wdXApIHtcbiAgICAgICAgICAgIHZhciBwcm9jZXNzZG93bjtcbiAgICAgICAgICAgIChmdW5jdGlvbiAocHJvY2Vzc2Rvd24pIHtcbiAgICAgICAgICAgICAgICB2YXIgUG9wdXBQcm9jZXNzRG93blBpcGVEZWYgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgICAgICAgICBfX2V4dGVuZHMoUG9wdXBQcm9jZXNzRG93blBpcGVEZWYsIF9zdXBlcik7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIFBvcHVwUHJvY2Vzc0Rvd25QaXBlRGVmKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZFRhcGluQmVmb3JlKCdwcm9jZXNzWGZvcm0nLCAncHJlUHJvY2Vzc1hmb3JtJywgcHJvY2Vzc2Rvd24udGFwaW5zLnByZVByb2Nlc3NYZm9ybSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYWRkVGFwaW5BZnRlcigncHJvY2Vzc1hmb3JtJywgJ3Bvc3RQcm9jZXNzWGZvcm0nLCBwcm9jZXNzZG93bi50YXBpbnMucG9zdFByb2Nlc3NYZm9ybSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFBvcHVwUHJvY2Vzc0Rvd25QaXBlRGVmO1xuICAgICAgICAgICAgICAgIH0pKG1pbmVydmEuY29yZS5wcm9jZXNzZG93bi5Qcm9jZXNzRG93blBpcGVEZWYpO1xuICAgICAgICAgICAgICAgIHByb2Nlc3Nkb3duLlBvcHVwUHJvY2Vzc0Rvd25QaXBlRGVmID0gUG9wdXBQcm9jZXNzRG93blBpcGVEZWY7XG4gICAgICAgICAgICB9KShwcm9jZXNzZG93biA9IHBvcHVwLnByb2Nlc3Nkb3duIHx8IChwb3B1cC5wcm9jZXNzZG93biA9IHt9KSk7XG4gICAgICAgIH0pKHBvcHVwID0gY29udHJvbHMucG9wdXAgfHwgKGNvbnRyb2xzLnBvcHVwID0ge30pKTtcbiAgICB9KShjb250cm9scyA9IG1pbmVydmEuY29udHJvbHMgfHwgKG1pbmVydmEuY29udHJvbHMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb250cm9scztcbiAgICAoZnVuY3Rpb24gKGNvbnRyb2xzKSB7XG4gICAgICAgIHZhciBwb3B1cDtcbiAgICAgICAgKGZ1bmN0aW9uIChwb3B1cCkge1xuICAgICAgICAgICAgdmFyIHByb2Nlc3N1cDtcbiAgICAgICAgICAgIChmdW5jdGlvbiAocHJvY2Vzc3VwKSB7XG4gICAgICAgICAgICAgICAgdmFyIFBvcHVwUHJvY2Vzc1VwUGlwZURlZiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIF9fZXh0ZW5kcyhQb3B1cFByb2Nlc3NVcFBpcGVEZWYsIF9zdXBlcik7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIFBvcHVwUHJvY2Vzc1VwUGlwZURlZigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVUYXBpbignY2FsY0FjdHVhbFNpemUnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVUYXBpbignY2FsY0V4dGVudHMnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVUYXBpbignY2FsY1BhaW50Qm91bmRzJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFBvcHVwUHJvY2Vzc1VwUGlwZURlZjtcbiAgICAgICAgICAgICAgICB9KShtaW5lcnZhLmNvcmUucHJvY2Vzc3VwLlByb2Nlc3NVcFBpcGVEZWYpO1xuICAgICAgICAgICAgICAgIHByb2Nlc3N1cC5Qb3B1cFByb2Nlc3NVcFBpcGVEZWYgPSBQb3B1cFByb2Nlc3NVcFBpcGVEZWY7XG4gICAgICAgICAgICB9KShwcm9jZXNzdXAgPSBwb3B1cC5wcm9jZXNzdXAgfHwgKHBvcHVwLnByb2Nlc3N1cCA9IHt9KSk7XG4gICAgICAgIH0pKHBvcHVwID0gY29udHJvbHMucG9wdXAgfHwgKGNvbnRyb2xzLnBvcHVwID0ge30pKTtcbiAgICB9KShjb250cm9scyA9IG1pbmVydmEuY29udHJvbHMgfHwgKG1pbmVydmEuY29udHJvbHMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb250cm9scztcbiAgICAoZnVuY3Rpb24gKGNvbnRyb2xzKSB7XG4gICAgICAgIHZhciBzY3JvbGxjb250ZW50cHJlc2VudGVyO1xuICAgICAgICAoZnVuY3Rpb24gKHNjcm9sbGNvbnRlbnRwcmVzZW50ZXIpIHtcbiAgICAgICAgICAgIHZhciBhcnJhbmdlO1xuICAgICAgICAgICAgKGZ1bmN0aW9uIChhcnJhbmdlKSB7XG4gICAgICAgICAgICAgICAgdmFyIFNjcm9sbENvbnRlbnRQcmVzZW50ZXJBcnJhbmdlUGlwZURlZiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIF9fZXh0ZW5kcyhTY3JvbGxDb250ZW50UHJlc2VudGVyQXJyYW5nZVBpcGVEZWYsIF9zdXBlcik7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIFNjcm9sbENvbnRlbnRQcmVzZW50ZXJBcnJhbmdlUGlwZURlZigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXBsYWNlVGFwaW4oJ2RvT3ZlcnJpZGUnLCBhcnJhbmdlLnRhcGlucy5kb092ZXJyaWRlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRUYXBpbkFmdGVyKCdjb21wbGV0ZU92ZXJyaWRlJywgJ3VwZGF0ZUNsaXAnLCBhcnJhbmdlLnRhcGlucy51cGRhdGVDbGlwKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRUYXBpbkFmdGVyKCd1cGRhdGVDbGlwJywgJ3VwZGF0ZUV4dGVudHMnLCBhcnJhbmdlLnRhcGlucy51cGRhdGVFeHRlbnRzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBTY3JvbGxDb250ZW50UHJlc2VudGVyQXJyYW5nZVBpcGVEZWYucHJvdG90eXBlLmNyZWF0ZU91dHB1dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvdXRwdXQgPSBfc3VwZXIucHJvdG90eXBlLmNyZWF0ZU91dHB1dC5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0LmludGVybmFsQ2xpcCA9IG5ldyBtaW5lcnZhLlJlY3QoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIFNjcm9sbENvbnRlbnRQcmVzZW50ZXJBcnJhbmdlUGlwZURlZi5wcm90b3R5cGUucHJlcGFyZSA9IGZ1bmN0aW9uIChpbnB1dCwgc3RhdGUsIG91dHB1dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5SZWN0LmNvcHlUbyhpbnB1dC5pbnRlcm5hbENsaXAsIG91dHB1dC5pbnRlcm5hbENsaXApO1xuICAgICAgICAgICAgICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5wcmVwYXJlLmNhbGwodGhpcywgaW5wdXQsIHN0YXRlLCBvdXRwdXQpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBTY3JvbGxDb250ZW50UHJlc2VudGVyQXJyYW5nZVBpcGVEZWYucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24gKGlucHV0LCBzdGF0ZSwgb3V0cHV0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLmZsdXNoLmNhbGwodGhpcywgaW5wdXQsIHN0YXRlLCBvdXRwdXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5SZWN0LmNvcHlUbyhvdXRwdXQuaW50ZXJuYWxDbGlwLCBpbnB1dC5pbnRlcm5hbENsaXApO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gU2Nyb2xsQ29udGVudFByZXNlbnRlckFycmFuZ2VQaXBlRGVmO1xuICAgICAgICAgICAgICAgIH0pKG1pbmVydmEuY29yZS5hcnJhbmdlLkFycmFuZ2VQaXBlRGVmKTtcbiAgICAgICAgICAgICAgICBhcnJhbmdlLlNjcm9sbENvbnRlbnRQcmVzZW50ZXJBcnJhbmdlUGlwZURlZiA9IFNjcm9sbENvbnRlbnRQcmVzZW50ZXJBcnJhbmdlUGlwZURlZjtcbiAgICAgICAgICAgIH0pKGFycmFuZ2UgPSBzY3JvbGxjb250ZW50cHJlc2VudGVyLmFycmFuZ2UgfHwgKHNjcm9sbGNvbnRlbnRwcmVzZW50ZXIuYXJyYW5nZSA9IHt9KSk7XG4gICAgICAgIH0pKHNjcm9sbGNvbnRlbnRwcmVzZW50ZXIgPSBjb250cm9scy5zY3JvbGxjb250ZW50cHJlc2VudGVyIHx8IChjb250cm9scy5zY3JvbGxjb250ZW50cHJlc2VudGVyID0ge30pKTtcbiAgICB9KShjb250cm9scyA9IG1pbmVydmEuY29udHJvbHMgfHwgKG1pbmVydmEuY29udHJvbHMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb250cm9scztcbiAgICAoZnVuY3Rpb24gKGNvbnRyb2xzKSB7XG4gICAgICAgIHZhciBzY3JvbGxjb250ZW50cHJlc2VudGVyO1xuICAgICAgICAoZnVuY3Rpb24gKHNjcm9sbGNvbnRlbnRwcmVzZW50ZXIpIHtcbiAgICAgICAgICAgIHZhciBtZWFzdXJlO1xuICAgICAgICAgICAgKGZ1bmN0aW9uIChtZWFzdXJlKSB7XG4gICAgICAgICAgICAgICAgdmFyIFNjcm9sbENvbnRlbnRQcmVzZW50ZXJNZWFzdXJlUGlwZURlZiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIF9fZXh0ZW5kcyhTY3JvbGxDb250ZW50UHJlc2VudGVyTWVhc3VyZVBpcGVEZWYsIF9zdXBlcik7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIFNjcm9sbENvbnRlbnRQcmVzZW50ZXJNZWFzdXJlUGlwZURlZigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXBsYWNlVGFwaW4oJ2RvT3ZlcnJpZGUnLCBtZWFzdXJlLnRhcGlucy5kb092ZXJyaWRlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRUYXBpbkFmdGVyKCdkb092ZXJyaWRlJywgJ3VwZGF0ZUV4dGVudHMnLCBtZWFzdXJlLnRhcGlucy51cGRhdGVFeHRlbnRzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRUYXBpbkFmdGVyKCd1cGRhdGVFeHRlbnRzJywgJ2ZpbmlzaERvT3ZlcnJpZGUnLCBtZWFzdXJlLnRhcGlucy5maW5pc2hEb092ZXJyaWRlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBTY3JvbGxDb250ZW50UHJlc2VudGVyTWVhc3VyZVBpcGVEZWYucHJvdG90eXBlLmNyZWF0ZVN0YXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXRlID0gX3N1cGVyLnByb3RvdHlwZS5jcmVhdGVTdGF0ZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuaWRlYWxTaXplID0gbmV3IG1pbmVydmEuU2l6ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gU2Nyb2xsQ29udGVudFByZXNlbnRlck1lYXN1cmVQaXBlRGVmO1xuICAgICAgICAgICAgICAgIH0pKG1pbmVydmEuY29yZS5tZWFzdXJlLk1lYXN1cmVQaXBlRGVmKTtcbiAgICAgICAgICAgICAgICBtZWFzdXJlLlNjcm9sbENvbnRlbnRQcmVzZW50ZXJNZWFzdXJlUGlwZURlZiA9IFNjcm9sbENvbnRlbnRQcmVzZW50ZXJNZWFzdXJlUGlwZURlZjtcbiAgICAgICAgICAgIH0pKG1lYXN1cmUgPSBzY3JvbGxjb250ZW50cHJlc2VudGVyLm1lYXN1cmUgfHwgKHNjcm9sbGNvbnRlbnRwcmVzZW50ZXIubWVhc3VyZSA9IHt9KSk7XG4gICAgICAgIH0pKHNjcm9sbGNvbnRlbnRwcmVzZW50ZXIgPSBjb250cm9scy5zY3JvbGxjb250ZW50cHJlc2VudGVyIHx8IChjb250cm9scy5zY3JvbGxjb250ZW50cHJlc2VudGVyID0ge30pKTtcbiAgICB9KShjb250cm9scyA9IG1pbmVydmEuY29udHJvbHMgfHwgKG1pbmVydmEuY29udHJvbHMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb250cm9scztcbiAgICAoZnVuY3Rpb24gKGNvbnRyb2xzKSB7XG4gICAgICAgIHZhciBzY3JvbGxjb250ZW50cHJlc2VudGVyO1xuICAgICAgICAoZnVuY3Rpb24gKHNjcm9sbGNvbnRlbnRwcmVzZW50ZXIpIHtcbiAgICAgICAgICAgIHZhciByZW5kZXI7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKHJlbmRlcikge1xuICAgICAgICAgICAgICAgIHZhciBTY3JvbGxDb250ZW50UHJlc2VudGVyUmVuZGVyUGlwZURlZiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIF9fZXh0ZW5kcyhTY3JvbGxDb250ZW50UHJlc2VudGVyUmVuZGVyUGlwZURlZiwgX3N1cGVyKTtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gU2Nyb2xsQ29udGVudFByZXNlbnRlclJlbmRlclBpcGVEZWYoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkVGFwaW5BZnRlcignYXBwbHlDbGlwJywgJ2FwcGx5SW50ZXJuYWxDbGlwJywgdGFwaW5zLmFwcGx5SW50ZXJuYWxDbGlwKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gU2Nyb2xsQ29udGVudFByZXNlbnRlclJlbmRlclBpcGVEZWY7XG4gICAgICAgICAgICAgICAgfSkobWluZXJ2YS5jb3JlLnJlbmRlci5SZW5kZXJQaXBlRGVmKTtcbiAgICAgICAgICAgICAgICByZW5kZXIuU2Nyb2xsQ29udGVudFByZXNlbnRlclJlbmRlclBpcGVEZWYgPSBTY3JvbGxDb250ZW50UHJlc2VudGVyUmVuZGVyUGlwZURlZjtcbiAgICAgICAgICAgICAgICB2YXIgdGFwaW5zO1xuICAgICAgICAgICAgICAgIChmdW5jdGlvbiAodGFwaW5zKSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGFwcGx5SW50ZXJuYWxDbGlwKGlucHV0LCBzdGF0ZSwgb3V0cHV0LCBjdHgsIHJlZ2lvbiwgdHJlZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1pbmVydmEuUmVjdC5pc0VtcHR5KGlucHV0LmludGVybmFsQ2xpcCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHguY2xpcFJlY3QoaW5wdXQuaW50ZXJuYWxDbGlwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRhcGlucy5hcHBseUludGVybmFsQ2xpcCA9IGFwcGx5SW50ZXJuYWxDbGlwO1xuICAgICAgICAgICAgICAgIH0pKHRhcGlucyA9IHJlbmRlci50YXBpbnMgfHwgKHJlbmRlci50YXBpbnMgPSB7fSkpO1xuICAgICAgICAgICAgfSkocmVuZGVyID0gc2Nyb2xsY29udGVudHByZXNlbnRlci5yZW5kZXIgfHwgKHNjcm9sbGNvbnRlbnRwcmVzZW50ZXIucmVuZGVyID0ge30pKTtcbiAgICAgICAgfSkoc2Nyb2xsY29udGVudHByZXNlbnRlciA9IGNvbnRyb2xzLnNjcm9sbGNvbnRlbnRwcmVzZW50ZXIgfHwgKGNvbnRyb2xzLnNjcm9sbGNvbnRlbnRwcmVzZW50ZXIgPSB7fSkpO1xuICAgIH0pKGNvbnRyb2xzID0gbWluZXJ2YS5jb250cm9scyB8fCAobWluZXJ2YS5jb250cm9scyA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvbnRyb2xzO1xuICAgIChmdW5jdGlvbiAoY29udHJvbHMpIHtcbiAgICAgICAgdmFyIHN0YWNrcGFuZWw7XG4gICAgICAgIChmdW5jdGlvbiAoc3RhY2twYW5lbCkge1xuICAgICAgICAgICAgdmFyIGFycmFuZ2U7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKGFycmFuZ2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgU3RhY2tQYW5lbEFycmFuZ2VQaXBlRGVmID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgX19leHRlbmRzKFN0YWNrUGFuZWxBcnJhbmdlUGlwZURlZiwgX3N1cGVyKTtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gU3RhY2tQYW5lbEFycmFuZ2VQaXBlRGVmKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlcGxhY2VUYXBpbignZG9PdmVycmlkZScsIGFycmFuZ2UudGFwaW5zLmRvT3ZlcnJpZGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFkZFRhcGluQWZ0ZXIoJ2RvT3ZlcnJpZGUnLCAnZG9Ib3Jpem9udGFsJywgYXJyYW5nZS50YXBpbnMuZG9Ib3Jpem9udGFsKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRUYXBpbkFmdGVyKCdkb092ZXJyaWRlJywgJ2RvVmVydGljYWwnLCBhcnJhbmdlLnRhcGlucy5kb1ZlcnRpY2FsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gU3RhY2tQYW5lbEFycmFuZ2VQaXBlRGVmO1xuICAgICAgICAgICAgICAgIH0pKGNvbnRyb2xzLnBhbmVsLmFycmFuZ2UuUGFuZWxBcnJhbmdlUGlwZURlZik7XG4gICAgICAgICAgICAgICAgYXJyYW5nZS5TdGFja1BhbmVsQXJyYW5nZVBpcGVEZWYgPSBTdGFja1BhbmVsQXJyYW5nZVBpcGVEZWY7XG4gICAgICAgICAgICB9KShhcnJhbmdlID0gc3RhY2twYW5lbC5hcnJhbmdlIHx8IChzdGFja3BhbmVsLmFycmFuZ2UgPSB7fSkpO1xuICAgICAgICB9KShzdGFja3BhbmVsID0gY29udHJvbHMuc3RhY2twYW5lbCB8fCAoY29udHJvbHMuc3RhY2twYW5lbCA9IHt9KSk7XG4gICAgfSkoY29udHJvbHMgPSBtaW5lcnZhLmNvbnRyb2xzIHx8IChtaW5lcnZhLmNvbnRyb2xzID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29udHJvbHM7XG4gICAgKGZ1bmN0aW9uIChjb250cm9scykge1xuICAgICAgICB2YXIgc3RhY2twYW5lbDtcbiAgICAgICAgKGZ1bmN0aW9uIChzdGFja3BhbmVsKSB7XG4gICAgICAgICAgICB2YXIgbWVhc3VyZTtcbiAgICAgICAgICAgIChmdW5jdGlvbiAobWVhc3VyZSkge1xuICAgICAgICAgICAgICAgIHZhciBTdGFja1BhbmVsTWVhc3VyZVBpcGVEZWYgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgICAgICAgICBfX2V4dGVuZHMoU3RhY2tQYW5lbE1lYXN1cmVQaXBlRGVmLCBfc3VwZXIpO1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBTdGFja1BhbmVsTWVhc3VyZVBpcGVEZWYoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVwbGFjZVRhcGluKCdkb092ZXJyaWRlJywgbWVhc3VyZS50YXBpbnMuZG9PdmVycmlkZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYWRkVGFwaW5BZnRlcignZG9PdmVycmlkZScsICdkb0hvcml6b250YWwnLCBtZWFzdXJlLnRhcGlucy5kb0hvcml6b250YWwpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFkZFRhcGluQWZ0ZXIoJ2RvT3ZlcnJpZGUnLCAnZG9WZXJ0aWNhbCcsIG1lYXN1cmUudGFwaW5zLmRvVmVydGljYWwpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFN0YWNrUGFuZWxNZWFzdXJlUGlwZURlZi5wcm90b3R5cGUuY3JlYXRlU3RhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RhdGUgPSBfc3VwZXIucHJvdG90eXBlLmNyZWF0ZVN0YXRlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5jaGlsZEF2YWlsYWJsZSA9IG5ldyBtaW5lcnZhLlNpemUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFN0YWNrUGFuZWxNZWFzdXJlUGlwZURlZjtcbiAgICAgICAgICAgICAgICB9KShjb250cm9scy5wYW5lbC5tZWFzdXJlLlBhbmVsTWVhc3VyZVBpcGVEZWYpO1xuICAgICAgICAgICAgICAgIG1lYXN1cmUuU3RhY2tQYW5lbE1lYXN1cmVQaXBlRGVmID0gU3RhY2tQYW5lbE1lYXN1cmVQaXBlRGVmO1xuICAgICAgICAgICAgfSkobWVhc3VyZSA9IHN0YWNrcGFuZWwubWVhc3VyZSB8fCAoc3RhY2twYW5lbC5tZWFzdXJlID0ge30pKTtcbiAgICAgICAgfSkoc3RhY2twYW5lbCA9IGNvbnRyb2xzLnN0YWNrcGFuZWwgfHwgKGNvbnRyb2xzLnN0YWNrcGFuZWwgPSB7fSkpO1xuICAgIH0pKGNvbnRyb2xzID0gbWluZXJ2YS5jb250cm9scyB8fCAobWluZXJ2YS5jb250cm9scyA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvbnRyb2xzO1xuICAgIChmdW5jdGlvbiAoY29udHJvbHMpIHtcbiAgICAgICAgdmFyIHRleHRibG9jaztcbiAgICAgICAgKGZ1bmN0aW9uICh0ZXh0YmxvY2spIHtcbiAgICAgICAgICAgIHZhciBhcnJhbmdlO1xuICAgICAgICAgICAgKGZ1bmN0aW9uIChhcnJhbmdlKSB7XG4gICAgICAgICAgICAgICAgdmFyIFRleHRCbG9ja0FycmFuZ2VQaXBlRGVmID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgX19leHRlbmRzKFRleHRCbG9ja0FycmFuZ2VQaXBlRGVmLCBfc3VwZXIpO1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBUZXh0QmxvY2tBcnJhbmdlUGlwZURlZigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXBsYWNlVGFwaW4oJ2RvT3ZlcnJpZGUnLCB0YXBpbnMuZG9PdmVycmlkZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFRleHRCbG9ja0FycmFuZ2VQaXBlRGVmO1xuICAgICAgICAgICAgICAgIH0pKG1pbmVydmEuY29yZS5hcnJhbmdlLkFycmFuZ2VQaXBlRGVmKTtcbiAgICAgICAgICAgICAgICBhcnJhbmdlLlRleHRCbG9ja0FycmFuZ2VQaXBlRGVmID0gVGV4dEJsb2NrQXJyYW5nZVBpcGVEZWY7XG4gICAgICAgICAgICAgICAgdmFyIHRhcGlucztcbiAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBkb092ZXJyaWRlKGlucHV0LCBzdGF0ZSwgb3V0cHV0LCB0cmVlLCBmaW5hbFJlY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmcyA9IHN0YXRlLmZpbmFsU2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhcyA9IHN0YXRlLmFycmFuZ2VkU2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbmVydmEuVGhpY2tuZXNzLnNocmlua1NpemUoaW5wdXQucGFkZGluZywgZnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5TaXplLmNvcHlUbyh0cmVlLmxheW91dChmcywgaW5wdXQpLCBhcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcy53aWR0aCA9IE1hdGgubWF4KGFzLndpZHRoLCBmcy53aWR0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcy5oZWlnaHQgPSBNYXRoLm1heChhcy5oZWlnaHQsIGZzLmhlaWdodCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmVlLnNldEF2YWlsYWJsZVdpZHRoKGZzLndpZHRoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbmVydmEuVGhpY2tuZXNzLmdyb3dTaXplKGlucHV0LnBhZGRpbmcsIGFzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRhcGlucy5kb092ZXJyaWRlID0gZG9PdmVycmlkZTtcbiAgICAgICAgICAgICAgICB9KSh0YXBpbnMgPSBhcnJhbmdlLnRhcGlucyB8fCAoYXJyYW5nZS50YXBpbnMgPSB7fSkpO1xuICAgICAgICAgICAgfSkoYXJyYW5nZSA9IHRleHRibG9jay5hcnJhbmdlIHx8ICh0ZXh0YmxvY2suYXJyYW5nZSA9IHt9KSk7XG4gICAgICAgIH0pKHRleHRibG9jayA9IGNvbnRyb2xzLnRleHRibG9jayB8fCAoY29udHJvbHMudGV4dGJsb2NrID0ge30pKTtcbiAgICB9KShjb250cm9scyA9IG1pbmVydmEuY29udHJvbHMgfHwgKG1pbmVydmEuY29udHJvbHMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb250cm9scztcbiAgICAoZnVuY3Rpb24gKGNvbnRyb2xzKSB7XG4gICAgICAgIHZhciB0ZXh0YmxvY2s7XG4gICAgICAgIChmdW5jdGlvbiAodGV4dGJsb2NrKSB7XG4gICAgICAgICAgICB2YXIgaGl0dGVzdDtcbiAgICAgICAgICAgIChmdW5jdGlvbiAoaGl0dGVzdCkge1xuICAgICAgICAgICAgICAgIHZhciBUZXh0QmxvY2tIaXRUZXN0UGlwZURlZiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIF9fZXh0ZW5kcyhUZXh0QmxvY2tIaXRUZXN0UGlwZURlZiwgX3N1cGVyKTtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gVGV4dEJsb2NrSGl0VGVzdFBpcGVEZWYoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVwbGFjZVRhcGluKCdjYW5IaXRJbnNpZGUnLCB0YXBpbnMuY2FuSGl0SW5zaWRlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gVGV4dEJsb2NrSGl0VGVzdFBpcGVEZWY7XG4gICAgICAgICAgICAgICAgfSkobWluZXJ2YS5jb3JlLmhpdHRlc3QuSGl0VGVzdFBpcGVEZWYpO1xuICAgICAgICAgICAgICAgIGhpdHRlc3QuVGV4dEJsb2NrSGl0VGVzdFBpcGVEZWYgPSBUZXh0QmxvY2tIaXRUZXN0UGlwZURlZjtcbiAgICAgICAgICAgICAgICB2YXIgdGFwaW5zO1xuICAgICAgICAgICAgICAgIChmdW5jdGlvbiAodGFwaW5zKSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNhbkhpdEluc2lkZShkYXRhLCBwb3MsIGhpdExpc3QsIGN0eCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGFwaW5zLmNhbkhpdEluc2lkZSA9IGNhbkhpdEluc2lkZTtcbiAgICAgICAgICAgICAgICB9KSh0YXBpbnMgPSBoaXR0ZXN0LnRhcGlucyB8fCAoaGl0dGVzdC50YXBpbnMgPSB7fSkpO1xuICAgICAgICAgICAgfSkoaGl0dGVzdCA9IHRleHRibG9jay5oaXR0ZXN0IHx8ICh0ZXh0YmxvY2suaGl0dGVzdCA9IHt9KSk7XG4gICAgICAgIH0pKHRleHRibG9jayA9IGNvbnRyb2xzLnRleHRibG9jayB8fCAoY29udHJvbHMudGV4dGJsb2NrID0ge30pKTtcbiAgICB9KShjb250cm9scyA9IG1pbmVydmEuY29udHJvbHMgfHwgKG1pbmVydmEuY29udHJvbHMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb250cm9scztcbiAgICAoZnVuY3Rpb24gKGNvbnRyb2xzKSB7XG4gICAgICAgIHZhciB0ZXh0YmxvY2s7XG4gICAgICAgIChmdW5jdGlvbiAodGV4dGJsb2NrKSB7XG4gICAgICAgICAgICB2YXIgbWVhc3VyZTtcbiAgICAgICAgICAgIChmdW5jdGlvbiAobWVhc3VyZSkge1xuICAgICAgICAgICAgICAgIHZhciBUZXh0QmxvY2tNZWFzdXJlUGlwZURlZiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIF9fZXh0ZW5kcyhUZXh0QmxvY2tNZWFzdXJlUGlwZURlZiwgX3N1cGVyKTtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gVGV4dEJsb2NrTWVhc3VyZVBpcGVEZWYoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVwbGFjZVRhcGluKCdkb092ZXJyaWRlJywgdGFwaW5zLmRvT3ZlcnJpZGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBUZXh0QmxvY2tNZWFzdXJlUGlwZURlZjtcbiAgICAgICAgICAgICAgICB9KShtaW5lcnZhLmNvcmUubWVhc3VyZS5NZWFzdXJlUGlwZURlZik7XG4gICAgICAgICAgICAgICAgbWVhc3VyZS5UZXh0QmxvY2tNZWFzdXJlUGlwZURlZiA9IFRleHRCbG9ja01lYXN1cmVQaXBlRGVmO1xuICAgICAgICAgICAgICAgIHZhciB0YXBpbnM7XG4gICAgICAgICAgICAgICAgKGZ1bmN0aW9uICh0YXBpbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZG9PdmVycmlkZShpbnB1dCwgc3RhdGUsIG91dHB1dCwgdHJlZSwgYXZhaWxhYmxlU2l6ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRzID0gb3V0cHV0LmRlc2lyZWRTaXplO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5UaGlja25lc3Muc2hyaW5rU2l6ZShpbnB1dC5wYWRkaW5nLCBzdGF0ZS5hdmFpbGFibGVTaXplKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyZWUuc2V0TWF4V2lkdGgoc3RhdGUuYXZhaWxhYmxlU2l6ZS53aWR0aCwgaW5wdXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5TaXplLmNvcHlUbyh0cmVlLmxheW91dChzdGF0ZS5hdmFpbGFibGVTaXplLCBpbnB1dCksIGRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbmVydmEuVGhpY2tuZXNzLmdyb3dTaXplKGlucHV0LnBhZGRpbmcsIGRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRhcGlucy5kb092ZXJyaWRlID0gZG9PdmVycmlkZTtcbiAgICAgICAgICAgICAgICB9KSh0YXBpbnMgPSBtZWFzdXJlLnRhcGlucyB8fCAobWVhc3VyZS50YXBpbnMgPSB7fSkpO1xuICAgICAgICAgICAgfSkobWVhc3VyZSA9IHRleHRibG9jay5tZWFzdXJlIHx8ICh0ZXh0YmxvY2subWVhc3VyZSA9IHt9KSk7XG4gICAgICAgIH0pKHRleHRibG9jayA9IGNvbnRyb2xzLnRleHRibG9jayB8fCAoY29udHJvbHMudGV4dGJsb2NrID0ge30pKTtcbiAgICB9KShjb250cm9scyA9IG1pbmVydmEuY29udHJvbHMgfHwgKG1pbmVydmEuY29udHJvbHMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb250cm9scztcbiAgICAoZnVuY3Rpb24gKGNvbnRyb2xzKSB7XG4gICAgICAgIHZhciB0ZXh0YmxvY2s7XG4gICAgICAgIChmdW5jdGlvbiAodGV4dGJsb2NrKSB7XG4gICAgICAgICAgICB2YXIgcHJvY2Vzc3VwO1xuICAgICAgICAgICAgKGZ1bmN0aW9uIChwcm9jZXNzdXApIHtcbiAgICAgICAgICAgICAgICB2YXIgVGV4dEJsb2NrUHJvY2Vzc1VwUGlwZURlZiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIF9fZXh0ZW5kcyhUZXh0QmxvY2tQcm9jZXNzVXBQaXBlRGVmLCBfc3VwZXIpO1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBUZXh0QmxvY2tQcm9jZXNzVXBQaXBlRGVmKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlcGxhY2VUYXBpbignY2FsY0FjdHVhbFNpemUnLCB0YXBpbnMuY2FsY0FjdHVhbFNpemUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2VUYXBpbignY2FsY0V4dGVudHMnLCB0YXBpbnMuY2FsY0V4dGVudHMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBUZXh0QmxvY2tQcm9jZXNzVXBQaXBlRGVmO1xuICAgICAgICAgICAgICAgIH0pKG1pbmVydmEuY29yZS5wcm9jZXNzdXAuUHJvY2Vzc1VwUGlwZURlZik7XG4gICAgICAgICAgICAgICAgcHJvY2Vzc3VwLlRleHRCbG9ja1Byb2Nlc3NVcFBpcGVEZWYgPSBUZXh0QmxvY2tQcm9jZXNzVXBQaXBlRGVmO1xuICAgICAgICAgICAgICAgIHZhciB0YXBpbnM7XG4gICAgICAgICAgICAgICAgKGZ1bmN0aW9uICh0YXBpbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gY2FsY0FjdHVhbFNpemUoaW5wdXQsIHN0YXRlLCBvdXRwdXQsIHRyZWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoaW5wdXQuZGlydHlGbGFncyAmIG1pbmVydmEuRGlydHlGbGFncy5Cb3VuZHMpID09PSAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFjdHVhbCA9IHN0YXRlLmFjdHVhbFNpemU7XG4gICAgICAgICAgICAgICAgICAgICAgICBhY3R1YWwud2lkdGggPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhY3R1YWwuaGVpZ2h0ID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5jb3JlLmhlbHBlcnMuY29lcmNlU2l6ZShhY3R1YWwsIGlucHV0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbmVydmEuVGhpY2tuZXNzLnNocmlua1NpemUoaW5wdXQucGFkZGluZywgYWN0dWFsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbmVydmEuU2l6ZS5jb3B5VG8odHJlZS5sYXlvdXQoYWN0dWFsLCBpbnB1dCksIGFjdHVhbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLlRoaWNrbmVzcy5ncm93U2l6ZShpbnB1dC5wYWRkaW5nLCBhY3R1YWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGFwaW5zLmNhbGNBY3R1YWxTaXplID0gY2FsY0FjdHVhbFNpemU7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNhbGNFeHRlbnRzKGlucHV0LCBzdGF0ZSwgb3V0cHV0LCB0cmVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKGlucHV0LmRpcnR5RmxhZ3MgJiBtaW5lcnZhLkRpcnR5RmxhZ3MuQm91bmRzKSA9PT0gMClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlID0gb3V0cHV0LmV4dGVudHM7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLnggPSB0cmVlLmdldEhvcml6b250YWxPZmZzZXQoaW5wdXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZS55ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbmVydmEuU2l6ZS5jb3B5VG8oc3RhdGUuYWN0dWFsU2l6ZSwgZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFkZGluZyA9IGlucHV0LnBhZGRpbmc7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLnggKz0gcGFkZGluZy5sZWZ0O1xuICAgICAgICAgICAgICAgICAgICAgICAgZS55ICs9IHBhZGRpbmcudG9wO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5SZWN0LmNvcHlUbyhlLCBvdXRwdXQuZXh0ZW50c1dpdGhDaGlsZHJlbik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0YXBpbnMuY2FsY0V4dGVudHMgPSBjYWxjRXh0ZW50cztcbiAgICAgICAgICAgICAgICB9KSh0YXBpbnMgPSBwcm9jZXNzdXAudGFwaW5zIHx8IChwcm9jZXNzdXAudGFwaW5zID0ge30pKTtcbiAgICAgICAgICAgIH0pKHByb2Nlc3N1cCA9IHRleHRibG9jay5wcm9jZXNzdXAgfHwgKHRleHRibG9jay5wcm9jZXNzdXAgPSB7fSkpO1xuICAgICAgICB9KSh0ZXh0YmxvY2sgPSBjb250cm9scy50ZXh0YmxvY2sgfHwgKGNvbnRyb2xzLnRleHRibG9jayA9IHt9KSk7XG4gICAgfSkoY29udHJvbHMgPSBtaW5lcnZhLmNvbnRyb2xzIHx8IChtaW5lcnZhLmNvbnRyb2xzID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29udHJvbHM7XG4gICAgKGZ1bmN0aW9uIChjb250cm9scykge1xuICAgICAgICB2YXIgdGV4dGJsb2NrO1xuICAgICAgICAoZnVuY3Rpb24gKHRleHRibG9jaykge1xuICAgICAgICAgICAgdmFyIHJlbmRlcjtcbiAgICAgICAgICAgIChmdW5jdGlvbiAocmVuZGVyKSB7XG4gICAgICAgICAgICAgICAgdmFyIFRleHRCbG9ja1JlbmRlclBpcGVEZWYgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgICAgICAgICBfX2V4dGVuZHMoVGV4dEJsb2NrUmVuZGVyUGlwZURlZiwgX3N1cGVyKTtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gVGV4dEJsb2NrUmVuZGVyUGlwZURlZigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXBsYWNlVGFwaW4oJ2RvUmVuZGVyJywgdGFwaW5zLmRvUmVuZGVyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gVGV4dEJsb2NrUmVuZGVyUGlwZURlZjtcbiAgICAgICAgICAgICAgICB9KShtaW5lcnZhLmNvcmUucmVuZGVyLlJlbmRlclBpcGVEZWYpO1xuICAgICAgICAgICAgICAgIHJlbmRlci5UZXh0QmxvY2tSZW5kZXJQaXBlRGVmID0gVGV4dEJsb2NrUmVuZGVyUGlwZURlZjtcbiAgICAgICAgICAgICAgICB2YXIgdGFwaW5zO1xuICAgICAgICAgICAgICAgIChmdW5jdGlvbiAodGFwaW5zKSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGRvUmVuZGVyKGlucHV0LCBzdGF0ZSwgb3V0cHV0LCBjdHgsIHJlZ2lvbiwgdHJlZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbmVydmEuY29yZS5oZWxwZXJzLnJlbmRlckxheW91dENsaXAoY3R4LCBpbnB1dCwgdHJlZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFkZGluZyA9IGlucHV0LnBhZGRpbmc7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFkZGluZylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHgudHJhbnNsYXRlKHBhZGRpbmcubGVmdCwgcGFkZGluZy50b3ApO1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJlZS5yZW5kZXIoY3R4LCBpbnB1dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGFwaW5zLmRvUmVuZGVyID0gZG9SZW5kZXI7XG4gICAgICAgICAgICAgICAgfSkodGFwaW5zID0gcmVuZGVyLnRhcGlucyB8fCAocmVuZGVyLnRhcGlucyA9IHt9KSk7XG4gICAgICAgICAgICB9KShyZW5kZXIgPSB0ZXh0YmxvY2sucmVuZGVyIHx8ICh0ZXh0YmxvY2sucmVuZGVyID0ge30pKTtcbiAgICAgICAgfSkodGV4dGJsb2NrID0gY29udHJvbHMudGV4dGJsb2NrIHx8IChjb250cm9scy50ZXh0YmxvY2sgPSB7fSkpO1xuICAgIH0pKGNvbnRyb2xzID0gbWluZXJ2YS5jb250cm9scyB8fCAobWluZXJ2YS5jb250cm9scyA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvbnRyb2xzO1xuICAgIChmdW5jdGlvbiAoY29udHJvbHMpIHtcbiAgICAgICAgdmFyIHRleHRib3h2aWV3O1xuICAgICAgICAoZnVuY3Rpb24gKHRleHRib3h2aWV3KSB7XG4gICAgICAgICAgICB2YXIgYXJyYW5nZTtcbiAgICAgICAgICAgIChmdW5jdGlvbiAoYXJyYW5nZSkge1xuICAgICAgICAgICAgICAgIHZhciBUZXh0Qm94Vmlld0FycmFuZ2VQaXBlRGVmID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgX19leHRlbmRzKFRleHRCb3hWaWV3QXJyYW5nZVBpcGVEZWYsIF9zdXBlcik7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIFRleHRCb3hWaWV3QXJyYW5nZVBpcGVEZWYoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVwbGFjZVRhcGluKCdkb092ZXJyaWRlJywgdGFwaW5zLmRvT3ZlcnJpZGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBUZXh0Qm94Vmlld0FycmFuZ2VQaXBlRGVmO1xuICAgICAgICAgICAgICAgIH0pKG1pbmVydmEuY29yZS5hcnJhbmdlLkFycmFuZ2VQaXBlRGVmKTtcbiAgICAgICAgICAgICAgICBhcnJhbmdlLlRleHRCb3hWaWV3QXJyYW5nZVBpcGVEZWYgPSBUZXh0Qm94Vmlld0FycmFuZ2VQaXBlRGVmO1xuICAgICAgICAgICAgICAgIHZhciB0YXBpbnM7XG4gICAgICAgICAgICAgICAgKGZ1bmN0aW9uICh0YXBpbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZG9PdmVycmlkZShpbnB1dCwgc3RhdGUsIG91dHB1dCwgdHJlZSwgZmluYWxSZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZnMgPSBzdGF0ZS5maW5hbFNpemU7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXMgPSBzdGF0ZS5hcnJhbmdlZFNpemU7XG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLlNpemUuY29weVRvKHRyZWUubGF5b3V0KGZzLCBpbnB1dCksIGFzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFzLndpZHRoID0gTWF0aC5tYXgoYXMud2lkdGgsIGZzLndpZHRoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFzLmhlaWdodCA9IE1hdGgubWF4KGFzLmhlaWdodCwgZnMuaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyZWUuc2V0QXZhaWxhYmxlV2lkdGgoZnMud2lkdGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGFwaW5zLmRvT3ZlcnJpZGUgPSBkb092ZXJyaWRlO1xuICAgICAgICAgICAgICAgIH0pKHRhcGlucyA9IGFycmFuZ2UudGFwaW5zIHx8IChhcnJhbmdlLnRhcGlucyA9IHt9KSk7XG4gICAgICAgICAgICB9KShhcnJhbmdlID0gdGV4dGJveHZpZXcuYXJyYW5nZSB8fCAodGV4dGJveHZpZXcuYXJyYW5nZSA9IHt9KSk7XG4gICAgICAgIH0pKHRleHRib3h2aWV3ID0gY29udHJvbHMudGV4dGJveHZpZXcgfHwgKGNvbnRyb2xzLnRleHRib3h2aWV3ID0ge30pKTtcbiAgICB9KShjb250cm9scyA9IG1pbmVydmEuY29udHJvbHMgfHwgKG1pbmVydmEuY29udHJvbHMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb250cm9scztcbiAgICAoZnVuY3Rpb24gKGNvbnRyb2xzKSB7XG4gICAgICAgIHZhciB0ZXh0Ym94dmlldztcbiAgICAgICAgKGZ1bmN0aW9uICh0ZXh0Ym94dmlldykge1xuICAgICAgICAgICAgdmFyIGhpdHRlc3Q7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKGhpdHRlc3QpIHtcbiAgICAgICAgICAgICAgICB2YXIgVGV4dEJveFZpZXdIaXRUZXN0UGlwZURlZiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIF9fZXh0ZW5kcyhUZXh0Qm94Vmlld0hpdFRlc3RQaXBlRGVmLCBfc3VwZXIpO1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBUZXh0Qm94Vmlld0hpdFRlc3RQaXBlRGVmKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlcGxhY2VUYXBpbignY2FuSGl0SW5zaWRlJywgdGFwaW5zLmNhbkhpdEluc2lkZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFRleHRCb3hWaWV3SGl0VGVzdFBpcGVEZWY7XG4gICAgICAgICAgICAgICAgfSkobWluZXJ2YS5jb3JlLmhpdHRlc3QuSGl0VGVzdFBpcGVEZWYpO1xuICAgICAgICAgICAgICAgIGhpdHRlc3QuVGV4dEJveFZpZXdIaXRUZXN0UGlwZURlZiA9IFRleHRCb3hWaWV3SGl0VGVzdFBpcGVEZWY7XG4gICAgICAgICAgICAgICAgdmFyIHRhcGlucztcbiAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBjYW5IaXRJbnNpZGUoZGF0YSwgcG9zLCBoaXRMaXN0LCBjdHgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRhcGlucy5jYW5IaXRJbnNpZGUgPSBjYW5IaXRJbnNpZGU7XG4gICAgICAgICAgICAgICAgfSkodGFwaW5zID0gaGl0dGVzdC50YXBpbnMgfHwgKGhpdHRlc3QudGFwaW5zID0ge30pKTtcbiAgICAgICAgICAgIH0pKGhpdHRlc3QgPSB0ZXh0Ym94dmlldy5oaXR0ZXN0IHx8ICh0ZXh0Ym94dmlldy5oaXR0ZXN0ID0ge30pKTtcbiAgICAgICAgfSkodGV4dGJveHZpZXcgPSBjb250cm9scy50ZXh0Ym94dmlldyB8fCAoY29udHJvbHMudGV4dGJveHZpZXcgPSB7fSkpO1xuICAgIH0pKGNvbnRyb2xzID0gbWluZXJ2YS5jb250cm9scyB8fCAobWluZXJ2YS5jb250cm9scyA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvbnRyb2xzO1xuICAgIChmdW5jdGlvbiAoY29udHJvbHMpIHtcbiAgICAgICAgdmFyIHRleHRib3h2aWV3O1xuICAgICAgICAoZnVuY3Rpb24gKHRleHRib3h2aWV3KSB7XG4gICAgICAgICAgICB2YXIgbWVhc3VyZTtcbiAgICAgICAgICAgIChmdW5jdGlvbiAobWVhc3VyZSkge1xuICAgICAgICAgICAgICAgIHZhciBUZXh0Qm94Vmlld01lYXN1cmVQaXBlRGVmID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgX19leHRlbmRzKFRleHRCb3hWaWV3TWVhc3VyZVBpcGVEZWYsIF9zdXBlcik7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIFRleHRCb3hWaWV3TWVhc3VyZVBpcGVEZWYoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVwbGFjZVRhcGluKCdkb092ZXJyaWRlJywgdGFwaW5zLmRvT3ZlcnJpZGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBUZXh0Qm94Vmlld01lYXN1cmVQaXBlRGVmO1xuICAgICAgICAgICAgICAgIH0pKG1pbmVydmEuY29yZS5tZWFzdXJlLk1lYXN1cmVQaXBlRGVmKTtcbiAgICAgICAgICAgICAgICBtZWFzdXJlLlRleHRCb3hWaWV3TWVhc3VyZVBpcGVEZWYgPSBUZXh0Qm94Vmlld01lYXN1cmVQaXBlRGVmO1xuICAgICAgICAgICAgICAgIHZhciB0YXBpbnM7XG4gICAgICAgICAgICAgICAgKGZ1bmN0aW9uICh0YXBpbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZG9PdmVycmlkZShpbnB1dCwgc3RhdGUsIG91dHB1dCwgdHJlZSwgYXZhaWxhYmxlU2l6ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRzID0gb3V0cHV0LmRlc2lyZWRTaXplO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGF2YWlsYWJsZSA9IHN0YXRlLmF2YWlsYWJsZVNpemU7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmVlLnNldE1heFdpZHRoKGF2YWlsYWJsZS53aWR0aCwgaW5wdXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5TaXplLmNvcHlUbyh0cmVlLmxheW91dChhdmFpbGFibGUsIGlucHV0KSwgZHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc0Zpbml0ZShhdmFpbGFibGUud2lkdGgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRzLndpZHRoID0gTWF0aC5tYXgoZHMud2lkdGgsIDExKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRzLndpZHRoID0gTWF0aC5taW4oZHMud2lkdGgsIGF2YWlsYWJsZS53aWR0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkcy5oZWlnaHQgPSBNYXRoLm1pbihkcy5oZWlnaHQsIGF2YWlsYWJsZS5oZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGFwaW5zLmRvT3ZlcnJpZGUgPSBkb092ZXJyaWRlO1xuICAgICAgICAgICAgICAgIH0pKHRhcGlucyA9IG1lYXN1cmUudGFwaW5zIHx8IChtZWFzdXJlLnRhcGlucyA9IHt9KSk7XG4gICAgICAgICAgICB9KShtZWFzdXJlID0gdGV4dGJveHZpZXcubWVhc3VyZSB8fCAodGV4dGJveHZpZXcubWVhc3VyZSA9IHt9KSk7XG4gICAgICAgIH0pKHRleHRib3h2aWV3ID0gY29udHJvbHMudGV4dGJveHZpZXcgfHwgKGNvbnRyb2xzLnRleHRib3h2aWV3ID0ge30pKTtcbiAgICB9KShjb250cm9scyA9IG1pbmVydmEuY29udHJvbHMgfHwgKG1pbmVydmEuY29udHJvbHMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb250cm9scztcbiAgICAoZnVuY3Rpb24gKGNvbnRyb2xzKSB7XG4gICAgICAgIHZhciB0ZXh0Ym94dmlldztcbiAgICAgICAgKGZ1bmN0aW9uICh0ZXh0Ym94dmlldykge1xuICAgICAgICAgICAgdmFyIHByb2Nlc3N1cDtcbiAgICAgICAgICAgIChmdW5jdGlvbiAocHJvY2Vzc3VwKSB7XG4gICAgICAgICAgICAgICAgdmFyIFRleHRCb3hWaWV3UHJvY2Vzc1VwUGlwZURlZiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIF9fZXh0ZW5kcyhUZXh0Qm94Vmlld1Byb2Nlc3NVcFBpcGVEZWYsIF9zdXBlcik7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIFRleHRCb3hWaWV3UHJvY2Vzc1VwUGlwZURlZigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXBsYWNlVGFwaW4oJ2NhbGNBY3R1YWxTaXplJywgdGFwaW5zLmNhbGNBY3R1YWxTaXplKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlVGFwaW4oJ2NhbGNFeHRlbnRzJywgdGFwaW5zLmNhbGNFeHRlbnRzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gVGV4dEJveFZpZXdQcm9jZXNzVXBQaXBlRGVmO1xuICAgICAgICAgICAgICAgIH0pKG1pbmVydmEuY29yZS5wcm9jZXNzdXAuUHJvY2Vzc1VwUGlwZURlZik7XG4gICAgICAgICAgICAgICAgcHJvY2Vzc3VwLlRleHRCb3hWaWV3UHJvY2Vzc1VwUGlwZURlZiA9IFRleHRCb3hWaWV3UHJvY2Vzc1VwUGlwZURlZjtcbiAgICAgICAgICAgICAgICB2YXIgdGFwaW5zO1xuICAgICAgICAgICAgICAgIChmdW5jdGlvbiAodGFwaW5zKSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNhbGNBY3R1YWxTaXplKGlucHV0LCBzdGF0ZSwgb3V0cHV0LCB0cmVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKGlucHV0LmRpcnR5RmxhZ3MgJiBtaW5lcnZhLkRpcnR5RmxhZ3MuQm91bmRzKSA9PT0gMClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhcyA9IHN0YXRlLmFjdHVhbFNpemU7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcy53aWR0aCA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFzLmhlaWdodCA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbmVydmEuY29yZS5oZWxwZXJzLmNvZXJjZVNpemUoYXMsIGlucHV0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbmVydmEuU2l6ZS5jb3B5VG8odHJlZS5sYXlvdXQoYXMsIGlucHV0KSwgYXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGFwaW5zLmNhbGNBY3R1YWxTaXplID0gY2FsY0FjdHVhbFNpemU7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNhbGNFeHRlbnRzKGlucHV0LCBzdGF0ZSwgb3V0cHV0LCB0cmVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKGlucHV0LmRpcnR5RmxhZ3MgJiBtaW5lcnZhLkRpcnR5RmxhZ3MuQm91bmRzKSA9PT0gMClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlID0gb3V0cHV0LmV4dGVudHM7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLnggPSBlLnkgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5TaXplLmNvcHlUbyhzdGF0ZS5hY3R1YWxTaXplLCBlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbmVydmEuUmVjdC5jb3B5VG8oZSwgb3V0cHV0LmV4dGVudHNXaXRoQ2hpbGRyZW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0LmV4dGVudHNXaXRoQ2hpbGRyZW4ud2lkdGgrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRhcGlucy5jYWxjRXh0ZW50cyA9IGNhbGNFeHRlbnRzO1xuICAgICAgICAgICAgICAgIH0pKHRhcGlucyA9IHByb2Nlc3N1cC50YXBpbnMgfHwgKHByb2Nlc3N1cC50YXBpbnMgPSB7fSkpO1xuICAgICAgICAgICAgfSkocHJvY2Vzc3VwID0gdGV4dGJveHZpZXcucHJvY2Vzc3VwIHx8ICh0ZXh0Ym94dmlldy5wcm9jZXNzdXAgPSB7fSkpO1xuICAgICAgICB9KSh0ZXh0Ym94dmlldyA9IGNvbnRyb2xzLnRleHRib3h2aWV3IHx8IChjb250cm9scy50ZXh0Ym94dmlldyA9IHt9KSk7XG4gICAgfSkoY29udHJvbHMgPSBtaW5lcnZhLmNvbnRyb2xzIHx8IChtaW5lcnZhLmNvbnRyb2xzID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29udHJvbHM7XG4gICAgKGZ1bmN0aW9uIChjb250cm9scykge1xuICAgICAgICB2YXIgdGV4dGJveHZpZXc7XG4gICAgICAgIChmdW5jdGlvbiAodGV4dGJveHZpZXcpIHtcbiAgICAgICAgICAgIHZhciByZW5kZXI7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKHJlbmRlcikge1xuICAgICAgICAgICAgICAgIHZhciBUZXh0Qm94Vmlld1JlbmRlclBpcGVEZWYgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgICAgICAgICBfX2V4dGVuZHMoVGV4dEJveFZpZXdSZW5kZXJQaXBlRGVmLCBfc3VwZXIpO1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBUZXh0Qm94Vmlld1JlbmRlclBpcGVEZWYoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVwbGFjZVRhcGluKCdkb1JlbmRlcicsIHRhcGlucy5kb1JlbmRlcilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYWRkVGFwaW5BZnRlcignZG9SZW5kZXInLCAnY2FsY0NhcmV0UmVnaW9uJywgdGFwaW5zLmNhbGNDYXJldFJlZ2lvbilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYWRkVGFwaW5BZnRlcignY2FsY0NhcmV0UmVnaW9uJywgJ3JlbmRlckNhcmV0JywgdGFwaW5zLnJlbmRlckNhcmV0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBUZXh0Qm94Vmlld1JlbmRlclBpcGVEZWYucHJvdG90eXBlLmNyZWF0ZU91dHB1dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvdXRwdXQgPSBfc3VwZXIucHJvdG90eXBlLmNyZWF0ZU91dHB1dC5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0LmNhcmV0UmVnaW9uID0gbmV3IG1pbmVydmEuUmVjdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgVGV4dEJveFZpZXdSZW5kZXJQaXBlRGVmLnByb3RvdHlwZS5wcmVwYXJlID0gZnVuY3Rpb24gKGlucHV0LCBzdGF0ZSwgb3V0cHV0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLlJlY3QuY29weVRvKGlucHV0LmNhcmV0UmVnaW9uLCBvdXRwdXQuY2FyZXRSZWdpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5wcmVwYXJlLmNhbGwodGhpcywgaW5wdXQsIHN0YXRlLCBvdXRwdXQpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBUZXh0Qm94Vmlld1JlbmRlclBpcGVEZWYucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24gKGlucHV0LCBzdGF0ZSwgb3V0cHV0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLmZsdXNoLmNhbGwodGhpcywgaW5wdXQsIHN0YXRlLCBvdXRwdXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5SZWN0LmNvcHlUbyhvdXRwdXQuY2FyZXRSZWdpb24sIGlucHV0LmNhcmV0UmVnaW9uKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFRleHRCb3hWaWV3UmVuZGVyUGlwZURlZjtcbiAgICAgICAgICAgICAgICB9KShtaW5lcnZhLmNvcmUucmVuZGVyLlJlbmRlclBpcGVEZWYpO1xuICAgICAgICAgICAgICAgIHJlbmRlci5UZXh0Qm94Vmlld1JlbmRlclBpcGVEZWYgPSBUZXh0Qm94Vmlld1JlbmRlclBpcGVEZWY7XG4gICAgICAgICAgICAgICAgdmFyIHRhcGlucztcbiAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBkb1JlbmRlcihpbnB1dCwgc3RhdGUsIG91dHB1dCwgY3R4LCByZWdpb24sIHRyZWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLmNvcmUuaGVscGVycy5yZW5kZXJMYXlvdXRDbGlwKGN0eCwgaW5wdXQsIHRyZWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJlZS5yZW5kZXIoY3R4LCBpbnB1dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGFwaW5zLmRvUmVuZGVyID0gZG9SZW5kZXI7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNhbGNDYXJldFJlZ2lvbihpbnB1dCwgc3RhdGUsIG91dHB1dCwgY3R4LCByZWdpb24sIHRyZWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbWluZXJ2YS5SZWN0LmlzRW1wdHkob3V0cHV0LmNhcmV0UmVnaW9uKSB8fCBpbnB1dC5zZWxlY3Rpb25MZW5ndGggPiAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5SZWN0LmNvcHlUbyh0cmVlLmdldENhcmV0UmVnaW9uKGlucHV0KSwgb3V0cHV0LmNhcmV0UmVnaW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRhcGlucy5jYWxjQ2FyZXRSZWdpb24gPSBjYWxjQ2FyZXRSZWdpb247XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHJlbmRlckNhcmV0KGlucHV0LCBzdGF0ZSwgb3V0cHV0LCBjdHgsIHJlZ2lvbiwgdHJlZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpbnB1dC5pc0NhcmV0VmlzaWJsZSB8fCBpbnB1dC5zZWxlY3Rpb25MZW5ndGggPiAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlZ2lvbiA9IG91dHB1dC5jYXJldFJlZ2lvbjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBicnVzaCA9IGlucHV0LmNhcmV0QnJ1c2g7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmF3ID0gY3R4LnJhdztcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhdy5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhdy5tb3ZlVG8ocmVnaW9uLnggKyAwLjUsIHJlZ2lvbi55KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhdy5saW5lVG8ocmVnaW9uLnggKyAwLjUsIHJlZ2lvbi55ICsgcmVnaW9uLmhlaWdodCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByYXcubGluZVdpZHRoID0gMS4wO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJydXNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJ1c2guc2V0dXBCcnVzaChyYXcsIHJlZ2lvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3LnN0cm9rZVN0eWxlID0gYnJ1c2gudG9IdG1sNU9iamVjdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3LnN0cm9rZVN0eWxlID0gXCIjMDAwMDAwXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByYXcuc3Ryb2tlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0YXBpbnMucmVuZGVyQ2FyZXQgPSByZW5kZXJDYXJldDtcbiAgICAgICAgICAgICAgICB9KSh0YXBpbnMgPSByZW5kZXIudGFwaW5zIHx8IChyZW5kZXIudGFwaW5zID0ge30pKTtcbiAgICAgICAgICAgIH0pKHJlbmRlciA9IHRleHRib3h2aWV3LnJlbmRlciB8fCAodGV4dGJveHZpZXcucmVuZGVyID0ge30pKTtcbiAgICAgICAgfSkodGV4dGJveHZpZXcgPSBjb250cm9scy50ZXh0Ym94dmlldyB8fCAoY29udHJvbHMudGV4dGJveHZpZXcgPSB7fSkpO1xuICAgIH0pKGNvbnRyb2xzID0gbWluZXJ2YS5jb250cm9scyB8fCAobWluZXJ2YS5jb250cm9scyA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvbnRyb2xzO1xuICAgIChmdW5jdGlvbiAoY29udHJvbHMpIHtcbiAgICAgICAgdmFyIHVzZXJjb250cm9sO1xuICAgICAgICAoZnVuY3Rpb24gKHVzZXJjb250cm9sKSB7XG4gICAgICAgICAgICB2YXIgYXJyYW5nZTtcbiAgICAgICAgICAgIChmdW5jdGlvbiAoYXJyYW5nZSkge1xuICAgICAgICAgICAgICAgIHZhciBVc2VyQ29udHJvbEFycmFuZ2VQaXBlRGVmID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgX19leHRlbmRzKFVzZXJDb250cm9sQXJyYW5nZVBpcGVEZWYsIF9zdXBlcik7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIFVzZXJDb250cm9sQXJyYW5nZVBpcGVEZWYoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkVGFwaW5CZWZvcmUoJ2RvT3ZlcnJpZGUnLCAncHJlT3ZlcnJpZGUnLCBhcnJhbmdlLnRhcGlucy5wcmVPdmVycmlkZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZVRhcGluKCdkb092ZXJyaWRlJywgYXJyYW5nZS50YXBpbnMuZG9PdmVycmlkZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgVXNlckNvbnRyb2xBcnJhbmdlUGlwZURlZi5wcm90b3R5cGUuY3JlYXRlU3RhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RhdGUgPSBfc3VwZXIucHJvdG90eXBlLmNyZWF0ZVN0YXRlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS50b3RhbEJvcmRlciA9IG5ldyBtaW5lcnZhLlRoaWNrbmVzcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gVXNlckNvbnRyb2xBcnJhbmdlUGlwZURlZjtcbiAgICAgICAgICAgICAgICB9KShtaW5lcnZhLmNvcmUuYXJyYW5nZS5BcnJhbmdlUGlwZURlZik7XG4gICAgICAgICAgICAgICAgYXJyYW5nZS5Vc2VyQ29udHJvbEFycmFuZ2VQaXBlRGVmID0gVXNlckNvbnRyb2xBcnJhbmdlUGlwZURlZjtcbiAgICAgICAgICAgIH0pKGFycmFuZ2UgPSB1c2VyY29udHJvbC5hcnJhbmdlIHx8ICh1c2VyY29udHJvbC5hcnJhbmdlID0ge30pKTtcbiAgICAgICAgfSkodXNlcmNvbnRyb2wgPSBjb250cm9scy51c2VyY29udHJvbCB8fCAoY29udHJvbHMudXNlcmNvbnRyb2wgPSB7fSkpO1xuICAgIH0pKGNvbnRyb2xzID0gbWluZXJ2YS5jb250cm9scyB8fCAobWluZXJ2YS5jb250cm9scyA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvbnRyb2xzO1xuICAgIChmdW5jdGlvbiAoY29udHJvbHMpIHtcbiAgICAgICAgdmFyIHVzZXJjb250cm9sO1xuICAgICAgICAoZnVuY3Rpb24gKHVzZXJjb250cm9sKSB7XG4gICAgICAgICAgICB2YXIgbWVhc3VyZTtcbiAgICAgICAgICAgIChmdW5jdGlvbiAobWVhc3VyZSkge1xuICAgICAgICAgICAgICAgIHZhciBVc2VyQ29udHJvbE1lYXN1cmVQaXBlRGVmID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgX19leHRlbmRzKFVzZXJDb250cm9sTWVhc3VyZVBpcGVEZWYsIF9zdXBlcik7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIFVzZXJDb250cm9sTWVhc3VyZVBpcGVEZWYoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkVGFwaW5CZWZvcmUoJ2RvT3ZlcnJpZGUnLCAncHJlT3ZlcnJpZGUnLCBtZWFzdXJlLnRhcGlucy5wcmVPdmVycmlkZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZVRhcGluKCdkb092ZXJyaWRlJywgbWVhc3VyZS50YXBpbnMuZG9PdmVycmlkZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYWRkVGFwaW5BZnRlcignZG9PdmVycmlkZScsICdwb3N0T3ZlcnJpZGUnLCBtZWFzdXJlLnRhcGlucy5wb3N0T3ZlcnJpZGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFVzZXJDb250cm9sTWVhc3VyZVBpcGVEZWYucHJvdG90eXBlLmNyZWF0ZVN0YXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXRlID0gX3N1cGVyLnByb3RvdHlwZS5jcmVhdGVTdGF0ZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUudG90YWxCb3JkZXIgPSBuZXcgbWluZXJ2YS5UaGlja25lc3MoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFVzZXJDb250cm9sTWVhc3VyZVBpcGVEZWY7XG4gICAgICAgICAgICAgICAgfSkobWluZXJ2YS5jb3JlLm1lYXN1cmUuTWVhc3VyZVBpcGVEZWYpO1xuICAgICAgICAgICAgICAgIG1lYXN1cmUuVXNlckNvbnRyb2xNZWFzdXJlUGlwZURlZiA9IFVzZXJDb250cm9sTWVhc3VyZVBpcGVEZWY7XG4gICAgICAgICAgICB9KShtZWFzdXJlID0gdXNlcmNvbnRyb2wubWVhc3VyZSB8fCAodXNlcmNvbnRyb2wubWVhc3VyZSA9IHt9KSk7XG4gICAgICAgIH0pKHVzZXJjb250cm9sID0gY29udHJvbHMudXNlcmNvbnRyb2wgfHwgKGNvbnRyb2xzLnVzZXJjb250cm9sID0ge30pKTtcbiAgICB9KShjb250cm9scyA9IG1pbmVydmEuY29udHJvbHMgfHwgKG1pbmVydmEuY29udHJvbHMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb250cm9scztcbiAgICAoZnVuY3Rpb24gKGNvbnRyb2xzKSB7XG4gICAgICAgIHZhciB1c2VyY29udHJvbDtcbiAgICAgICAgKGZ1bmN0aW9uICh1c2VyY29udHJvbCkge1xuICAgICAgICAgICAgdmFyIHByb2Nlc3Nkb3duO1xuICAgICAgICAgICAgKGZ1bmN0aW9uIChwcm9jZXNzZG93bikge1xuICAgICAgICAgICAgICAgIHZhciBVc2VyQ29udHJvbFByb2Nlc3NEb3duUGlwZURlZiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIF9fZXh0ZW5kcyhVc2VyQ29udHJvbFByb2Nlc3NEb3duUGlwZURlZiwgX3N1cGVyKTtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gVXNlckNvbnRyb2xQcm9jZXNzRG93blBpcGVEZWYoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVwbGFjZVRhcGluKCdwcm9jZXNzTGF5b3V0Q2xpcCcsIHRhcGlucy5wcm9jZXNzTGF5b3V0Q2xpcCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFVzZXJDb250cm9sUHJvY2Vzc0Rvd25QaXBlRGVmO1xuICAgICAgICAgICAgICAgIH0pKG1pbmVydmEuY29yZS5wcm9jZXNzZG93bi5Qcm9jZXNzRG93blBpcGVEZWYpO1xuICAgICAgICAgICAgICAgIHByb2Nlc3Nkb3duLlVzZXJDb250cm9sUHJvY2Vzc0Rvd25QaXBlRGVmID0gVXNlckNvbnRyb2xQcm9jZXNzRG93blBpcGVEZWY7XG4gICAgICAgICAgICAgICAgdmFyIHRhcGlucztcbiAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBwcm9jZXNzTGF5b3V0Q2xpcChpbnB1dCwgc3RhdGUsIG91dHB1dCwgdnBpbnB1dCwgdHJlZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChpbnB1dC5kaXJ0eUZsYWdzICYgbWluZXJ2YS5EaXJ0eUZsYWdzLkxheW91dENsaXApID09PSAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNsYyA9IGlucHV0LmNvbXBvc2l0ZUxheW91dENsaXA7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGMueCA9IGNsYy55ID0gY2xjLndpZHRoID0gY2xjLmhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRhcGlucy5wcm9jZXNzTGF5b3V0Q2xpcCA9IHByb2Nlc3NMYXlvdXRDbGlwO1xuICAgICAgICAgICAgICAgIH0pKHRhcGlucyA9IHByb2Nlc3Nkb3duLnRhcGlucyB8fCAocHJvY2Vzc2Rvd24udGFwaW5zID0ge30pKTtcbiAgICAgICAgICAgIH0pKHByb2Nlc3Nkb3duID0gdXNlcmNvbnRyb2wucHJvY2Vzc2Rvd24gfHwgKHVzZXJjb250cm9sLnByb2Nlc3Nkb3duID0ge30pKTtcbiAgICAgICAgfSkodXNlcmNvbnRyb2wgPSBjb250cm9scy51c2VyY29udHJvbCB8fCAoY29udHJvbHMudXNlcmNvbnRyb2wgPSB7fSkpO1xuICAgIH0pKGNvbnRyb2xzID0gbWluZXJ2YS5jb250cm9scyB8fCAobWluZXJ2YS5jb250cm9scyA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvbnRyb2xzO1xuICAgIChmdW5jdGlvbiAoY29udHJvbHMpIHtcbiAgICAgICAgdmFyIHZpcnR1YWxpemluZ3N0YWNrcGFuZWw7XG4gICAgICAgIChmdW5jdGlvbiAodmlydHVhbGl6aW5nc3RhY2twYW5lbCkge1xuICAgICAgICAgICAgdmFyIGFycmFuZ2U7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKGFycmFuZ2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgVmlydHVhbGl6aW5nU3RhY2tQYW5lbEFycmFuZ2VQaXBlRGVmID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgX19leHRlbmRzKFZpcnR1YWxpemluZ1N0YWNrUGFuZWxBcnJhbmdlUGlwZURlZiwgX3N1cGVyKTtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gVmlydHVhbGl6aW5nU3RhY2tQYW5lbEFycmFuZ2VQaXBlRGVmKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlcGxhY2VUYXBpbignZG9PdmVycmlkZScsIGFycmFuZ2UudGFwaW5zLmRvT3ZlcnJpZGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFkZFRhcGluQWZ0ZXIoJ2RvT3ZlcnJpZGUnLCAnZG9Ib3Jpem9udGFsJywgYXJyYW5nZS50YXBpbnMuZG9Ib3Jpem9udGFsKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRUYXBpbkFmdGVyKCdkb092ZXJyaWRlJywgJ2RvVmVydGljYWwnLCBhcnJhbmdlLnRhcGlucy5kb1ZlcnRpY2FsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gVmlydHVhbGl6aW5nU3RhY2tQYW5lbEFycmFuZ2VQaXBlRGVmO1xuICAgICAgICAgICAgICAgIH0pKGNvbnRyb2xzLnBhbmVsLmFycmFuZ2UuUGFuZWxBcnJhbmdlUGlwZURlZik7XG4gICAgICAgICAgICAgICAgYXJyYW5nZS5WaXJ0dWFsaXppbmdTdGFja1BhbmVsQXJyYW5nZVBpcGVEZWYgPSBWaXJ0dWFsaXppbmdTdGFja1BhbmVsQXJyYW5nZVBpcGVEZWY7XG4gICAgICAgICAgICB9KShhcnJhbmdlID0gdmlydHVhbGl6aW5nc3RhY2twYW5lbC5hcnJhbmdlIHx8ICh2aXJ0dWFsaXppbmdzdGFja3BhbmVsLmFycmFuZ2UgPSB7fSkpO1xuICAgICAgICB9KSh2aXJ0dWFsaXppbmdzdGFja3BhbmVsID0gY29udHJvbHMudmlydHVhbGl6aW5nc3RhY2twYW5lbCB8fCAoY29udHJvbHMudmlydHVhbGl6aW5nc3RhY2twYW5lbCA9IHt9KSk7XG4gICAgfSkoY29udHJvbHMgPSBtaW5lcnZhLmNvbnRyb2xzIHx8IChtaW5lcnZhLmNvbnRyb2xzID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29udHJvbHM7XG4gICAgKGZ1bmN0aW9uIChjb250cm9scykge1xuICAgICAgICB2YXIgdmlydHVhbGl6aW5nc3RhY2twYW5lbDtcbiAgICAgICAgKGZ1bmN0aW9uICh2aXJ0dWFsaXppbmdzdGFja3BhbmVsKSB7XG4gICAgICAgICAgICB2YXIgbWVhc3VyZTtcbiAgICAgICAgICAgIChmdW5jdGlvbiAobWVhc3VyZSkge1xuICAgICAgICAgICAgICAgIHZhciBWaXJ0dWFsaXppbmdTdGFja1BhbmVsTWVhc3VyZVBpcGVEZWYgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgICAgICAgICBfX2V4dGVuZHMoVmlydHVhbGl6aW5nU3RhY2tQYW5lbE1lYXN1cmVQaXBlRGVmLCBfc3VwZXIpO1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBWaXJ0dWFsaXppbmdTdGFja1BhbmVsTWVhc3VyZVBpcGVEZWYoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVwbGFjZVRhcGluKCdkb092ZXJyaWRlJywgbWVhc3VyZS50YXBpbnMuZG9PdmVycmlkZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYWRkVGFwaW5BZnRlcignZG9PdmVycmlkZScsICdkb0hvcml6b250YWwnLCBtZWFzdXJlLnRhcGlucy5kb0hvcml6b250YWwpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFkZFRhcGluQWZ0ZXIoJ2RvT3ZlcnJpZGUnLCAnZG9WZXJ0aWNhbCcsIG1lYXN1cmUudGFwaW5zLmRvVmVydGljYWwpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFZpcnR1YWxpemluZ1N0YWNrUGFuZWxNZWFzdXJlUGlwZURlZi5wcm90b3R5cGUuY3JlYXRlU3RhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RhdGUgPSBfc3VwZXIucHJvdG90eXBlLmNyZWF0ZVN0YXRlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5jaGlsZEF2YWlsYWJsZSA9IG5ldyBtaW5lcnZhLlNpemUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFZpcnR1YWxpemluZ1N0YWNrUGFuZWxNZWFzdXJlUGlwZURlZjtcbiAgICAgICAgICAgICAgICB9KShjb250cm9scy5wYW5lbC5tZWFzdXJlLlBhbmVsTWVhc3VyZVBpcGVEZWYpO1xuICAgICAgICAgICAgICAgIG1lYXN1cmUuVmlydHVhbGl6aW5nU3RhY2tQYW5lbE1lYXN1cmVQaXBlRGVmID0gVmlydHVhbGl6aW5nU3RhY2tQYW5lbE1lYXN1cmVQaXBlRGVmO1xuICAgICAgICAgICAgfSkobWVhc3VyZSA9IHZpcnR1YWxpemluZ3N0YWNrcGFuZWwubWVhc3VyZSB8fCAodmlydHVhbGl6aW5nc3RhY2twYW5lbC5tZWFzdXJlID0ge30pKTtcbiAgICAgICAgfSkodmlydHVhbGl6aW5nc3RhY2twYW5lbCA9IGNvbnRyb2xzLnZpcnR1YWxpemluZ3N0YWNrcGFuZWwgfHwgKGNvbnRyb2xzLnZpcnR1YWxpemluZ3N0YWNrcGFuZWwgPSB7fSkpO1xuICAgIH0pKGNvbnRyb2xzID0gbWluZXJ2YS5jb250cm9scyB8fCAobWluZXJ2YS5jb250cm9scyA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvcmU7XG4gICAgKGZ1bmN0aW9uIChjb3JlKSB7XG4gICAgICAgIHZhciBhcnJhbmdlO1xuICAgICAgICAoZnVuY3Rpb24gKGFycmFuZ2UpIHtcbiAgICAgICAgICAgIHZhciB0YXBpbnM7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgIHRhcGlucy5hcHBseVJvdW5kaW5nID0gZnVuY3Rpb24gKGlucHV0LCBzdGF0ZSwgb3V0cHV0LCB0cmVlLCBmaW5hbFJlY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZyID0gc3RhdGUuZmluYWxSZWN0O1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQudXNlTGF5b3V0Um91bmRpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyLnggPSBNYXRoLnJvdW5kKGZpbmFsUmVjdC54KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyLnkgPSBNYXRoLnJvdW5kKGZpbmFsUmVjdC55KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyLndpZHRoID0gTWF0aC5yb3VuZChmaW5hbFJlY3Qud2lkdGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZnIuaGVpZ2h0ID0gTWF0aC5yb3VuZChmaW5hbFJlY3QuaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbmVydmEuUmVjdC5jb3B5VG8oZmluYWxSZWN0LCBmcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pKHRhcGlucyA9IGFycmFuZ2UudGFwaW5zIHx8IChhcnJhbmdlLnRhcGlucyA9IHt9KSk7XG4gICAgICAgIH0pKGFycmFuZ2UgPSBjb3JlLmFycmFuZ2UgfHwgKGNvcmUuYXJyYW5nZSA9IHt9KSk7XG4gICAgfSkoY29yZSA9IG1pbmVydmEuY29yZSB8fCAobWluZXJ2YS5jb3JlID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29yZTtcbiAgICAoZnVuY3Rpb24gKGNvcmUpIHtcbiAgICAgICAgdmFyIGFycmFuZ2U7XG4gICAgICAgIChmdW5jdGlvbiAoYXJyYW5nZSkge1xuICAgICAgICAgICAgdmFyIHRhcGlucztcbiAgICAgICAgICAgIChmdW5jdGlvbiAodGFwaW5zKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRlc3RSZWN0ID0gbmV3IG1pbmVydmEuUmVjdCgpO1xuICAgICAgICAgICAgICAgIHZhciBmd0NsaXAgPSBuZXcgbWluZXJ2YS5SZWN0KCk7XG4gICAgICAgICAgICAgICAgdGFwaW5zLmJ1aWxkTGF5b3V0Q2xpcCA9IGZ1bmN0aW9uIChpbnB1dCwgc3RhdGUsIG91dHB1dCwgdHJlZSwgZmluYWxSZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsYyA9IG91dHB1dC5sYXlvdXRDbGlwO1xuICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLlJlY3QuY29weVRvKHN0YXRlLmZpbmFsUmVjdCwgbGMpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdm8gPSBvdXRwdXQudmlzdWFsT2Zmc2V0O1xuICAgICAgICAgICAgICAgICAgICBsYy54ID0gTWF0aC5tYXgobGMueCAtIHZvLngsIDApO1xuICAgICAgICAgICAgICAgICAgICBsYy55ID0gTWF0aC5tYXgobGMueSAtIHZvLnksIDApO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQudXNlTGF5b3V0Um91bmRpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxjLnggPSBNYXRoLnJvdW5kKGxjLngpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGMueSA9IE1hdGgucm91bmQobGMueSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGVzdFJlY3QueCA9IHRlc3RSZWN0LnkgPSAwO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYXMgPSBzdGF0ZS5hcnJhbmdlZFNpemU7XG4gICAgICAgICAgICAgICAgICAgIG1pbmVydmEuU2l6ZS5jb3B5VG8oYXMsIHRlc3RSZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCghdHJlZS5pc1RvcCAmJiAhbWluZXJ2YS5SZWN0LmlzQ29udGFpbmVkSW4odGVzdFJlY3QsIGxjKSkgfHwgIW1pbmVydmEuU2l6ZS5pc0VxdWFsKHN0YXRlLmNvbnN0cmFpbmVkLCBhcykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ3Q2xpcC54ID0gZndDbGlwLnkgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgZndDbGlwLndpZHRoID0gZndDbGlwLmhlaWdodCA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvcmUuaGVscGVycy5jb2VyY2VTaXplKGZ3Q2xpcCwgaW5wdXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5SZWN0LmludGVyc2VjdGlvbihsYywgZndDbGlwKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxjLnggPSBsYy55ID0gbGMud2lkdGggPSBsYy5oZWlnaHQgPSAwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICghbWluZXJ2YS5SZWN0LmlzRXF1YWwob3V0cHV0LmxheW91dENsaXAsIGlucHV0LmxheW91dENsaXApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXQuZGlydHlGbGFncyB8PSBtaW5lcnZhLkRpcnR5RmxhZ3MuTGF5b3V0Q2xpcDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSkodGFwaW5zID0gYXJyYW5nZS50YXBpbnMgfHwgKGFycmFuZ2UudGFwaW5zID0ge30pKTtcbiAgICAgICAgfSkoYXJyYW5nZSA9IGNvcmUuYXJyYW5nZSB8fCAoY29yZS5hcnJhbmdlID0ge30pKTtcbiAgICB9KShjb3JlID0gbWluZXJ2YS5jb3JlIHx8IChtaW5lcnZhLmNvcmUgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb3JlO1xuICAgIChmdW5jdGlvbiAoY29yZSkge1xuICAgICAgICB2YXIgYXJyYW5nZTtcbiAgICAgICAgKGZ1bmN0aW9uIChhcnJhbmdlKSB7XG4gICAgICAgICAgICB2YXIgdGFwaW5zO1xuICAgICAgICAgICAgKGZ1bmN0aW9uICh0YXBpbnMpIHtcbiAgICAgICAgICAgICAgICB0YXBpbnMuYnVpbGRMYXlvdXRYZm9ybSA9IGZ1bmN0aW9uIChpbnB1dCwgc3RhdGUsIG91dHB1dCwgdHJlZSwgZmluYWxSZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2byA9IG91dHB1dC52aXN1YWxPZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsYXlvdXRYZm9ybSA9IG1pbmVydmEubWF0My5jcmVhdGVUcmFuc2xhdGUodm8ueCwgdm8ueSwgb3V0cHV0LmxheW91dFhmb3JtKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlLmZsaXBIb3Jpem9udGFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLm1hdDMudHJhbnNsYXRlKGxheW91dFhmb3JtLCBzdGF0ZS5hcnJhbmdlZFNpemUud2lkdGgsIDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5tYXQzLnNjYWxlKGxheW91dFhmb3JtLCAtMSwgMSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFtaW5lcnZhLm1hdDMuZXF1YWwoaW5wdXQubGF5b3V0WGZvcm0sIG91dHB1dC5sYXlvdXRYZm9ybSkpXG4gICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXQuZGlydHlGbGFncyB8PSBtaW5lcnZhLkRpcnR5RmxhZ3MuTG9jYWxUcmFuc2Zvcm07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KSh0YXBpbnMgPSBhcnJhbmdlLnRhcGlucyB8fCAoYXJyYW5nZS50YXBpbnMgPSB7fSkpO1xuICAgICAgICB9KShhcnJhbmdlID0gY29yZS5hcnJhbmdlIHx8IChjb3JlLmFycmFuZ2UgPSB7fSkpO1xuICAgIH0pKGNvcmUgPSBtaW5lcnZhLmNvcmUgfHwgKG1pbmVydmEuY29yZSA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvcmU7XG4gICAgKGZ1bmN0aW9uIChjb3JlKSB7XG4gICAgICAgIHZhciBhcnJhbmdlO1xuICAgICAgICAoZnVuY3Rpb24gKGFycmFuZ2UpIHtcbiAgICAgICAgICAgIHZhciB0YXBpbnM7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgIHRhcGlucy5idWlsZFJlbmRlclNpemUgPSBmdW5jdGlvbiAoaW5wdXQsIHN0YXRlLCBvdXRwdXQsIHRyZWUsIGZpbmFsUmVjdCkge1xuICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLlNpemUuY29weVRvKHN0YXRlLmFycmFuZ2VkU2l6ZSwgb3V0cHV0LnJlbmRlclNpemUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIW1pbmVydmEuU2l6ZS5pc0VxdWFsKGlucHV0LnJlbmRlclNpemUsIG91dHB1dC5yZW5kZXJTaXplKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFvdXRwdXQubGFzdFJlbmRlclNpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXQubGFzdFJlbmRlclNpemUgPSBvdXRwdXQucmVuZGVyU2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXQudWlGbGFncyB8PSBtaW5lcnZhLlVJRmxhZ3MuU2l6ZUhpbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pKHRhcGlucyA9IGFycmFuZ2UudGFwaW5zIHx8IChhcnJhbmdlLnRhcGlucyA9IHt9KSk7XG4gICAgICAgIH0pKGFycmFuZ2UgPSBjb3JlLmFycmFuZ2UgfHwgKGNvcmUuYXJyYW5nZSA9IHt9KSk7XG4gICAgfSkoY29yZSA9IG1pbmVydmEuY29yZSB8fCAobWluZXJ2YS5jb3JlID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29yZTtcbiAgICAoZnVuY3Rpb24gKGNvcmUpIHtcbiAgICAgICAgdmFyIGFycmFuZ2U7XG4gICAgICAgIChmdW5jdGlvbiAoYXJyYW5nZSkge1xuICAgICAgICAgICAgdmFyIHRhcGlucztcbiAgICAgICAgICAgIChmdW5jdGlvbiAodGFwaW5zKSB7XG4gICAgICAgICAgICAgICAgdGFwaW5zLmNhbGNGbGlwID0gZnVuY3Rpb24gKGlucHV0LCBzdGF0ZSwgb3V0cHV0LCB0cmVlLCBmaW5hbFJlY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgLyogVE9ETzogSU1QTEVNRU5UXG4gICAgICAgICAgICAgICAgICAgICB2YXIgZmxpcEhvcml6ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICB2YXIgZmxvd0RpcmVjdGlvbiA9IGZlLkZsb3dEaXJlY3Rpb247XG4gICAgICAgICAgICAgICAgICAgICB2YXIgdmlzdWFsUGFyZW50Tm9kZSA9IDxGRU5vZGU+bm9kZS5WaXN1YWxQYXJlbnROb2RlO1xuICAgICAgICAgICAgICAgICAgICAgaWYgKHZpc3VhbFBhcmVudE5vZGUpXG4gICAgICAgICAgICAgICAgICAgICBmbGlwSG9yaXogPSB2aXN1YWxQYXJlbnROb2RlLlhPYmplY3QuRmxvd0RpcmVjdGlvbiAhPT0gZmxvd0RpcmVjdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKG5vZGUuUGFyZW50Tm9kZSBpbnN0YW5jZW9mIENvbnRyb2xzLlByaW1pdGl2ZXMuUG9wdXBOb2RlKVxuICAgICAgICAgICAgICAgICAgICAgZmxpcEhvcml6ID0gKDxDb250cm9scy5QcmltaXRpdmVzLlBvcHVwTm9kZT5ub2RlLlBhcmVudE5vZGUpLlhPYmplY3QuRmxvd0RpcmVjdGlvbiAhPT0gZmxvd0RpcmVjdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgIGZsaXBIb3JpeiA9IGZsb3dEaXJlY3Rpb24gPT09IEZsb3dEaXJlY3Rpb24uUmlnaHRUb0xlZnQ7XG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5mbGlwSG9yaXpvbnRhbCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSkodGFwaW5zID0gYXJyYW5nZS50YXBpbnMgfHwgKGFycmFuZ2UudGFwaW5zID0ge30pKTtcbiAgICAgICAgfSkoYXJyYW5nZSA9IGNvcmUuYXJyYW5nZSB8fCAoY29yZS5hcnJhbmdlID0ge30pKTtcbiAgICB9KShjb3JlID0gbWluZXJ2YS5jb3JlIHx8IChtaW5lcnZhLmNvcmUgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb3JlO1xuICAgIChmdW5jdGlvbiAoY29yZSkge1xuICAgICAgICB2YXIgYXJyYW5nZTtcbiAgICAgICAgKGZ1bmN0aW9uIChhcnJhbmdlKSB7XG4gICAgICAgICAgICB2YXIgdGFwaW5zO1xuICAgICAgICAgICAgKGZ1bmN0aW9uICh0YXBpbnMpIHtcbiAgICAgICAgICAgICAgICB0YXBpbnMuY2FsY1N0cmV0Y2hlZCA9IGZ1bmN0aW9uIChpbnB1dCwgc3RhdGUsIG91dHB1dCwgdHJlZSwgZmluYWxSZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIG1pbmVydmEuUmVjdC5jb3B5VG8oZmluYWxSZWN0LCBvdXRwdXQubGF5b3V0U2xvdCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBmciA9IHN0YXRlLmZpbmFsUmVjdDtcbiAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5UaGlja25lc3Muc2hyaW5rUmVjdChpbnB1dC5tYXJnaW4sIGZyKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0cmV0Y2hlZCA9IHN0YXRlLnN0cmV0Y2hlZDtcbiAgICAgICAgICAgICAgICAgICAgc3RyZXRjaGVkLndpZHRoID0gZnIud2lkdGg7XG4gICAgICAgICAgICAgICAgICAgIHN0cmV0Y2hlZC5oZWlnaHQgPSBmci5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIGNvcmUuaGVscGVycy5jb2VyY2VTaXplKHN0cmV0Y2hlZCwgaW5wdXQpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSkodGFwaW5zID0gYXJyYW5nZS50YXBpbnMgfHwgKGFycmFuZ2UudGFwaW5zID0ge30pKTtcbiAgICAgICAgfSkoYXJyYW5nZSA9IGNvcmUuYXJyYW5nZSB8fCAoY29yZS5hcnJhbmdlID0ge30pKTtcbiAgICB9KShjb3JlID0gbWluZXJ2YS5jb3JlIHx8IChtaW5lcnZhLmNvcmUgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb3JlO1xuICAgIChmdW5jdGlvbiAoY29yZSkge1xuICAgICAgICB2YXIgYXJyYW5nZTtcbiAgICAgICAgKGZ1bmN0aW9uIChhcnJhbmdlKSB7XG4gICAgICAgICAgICB2YXIgdGFwaW5zO1xuICAgICAgICAgICAgKGZ1bmN0aW9uICh0YXBpbnMpIHtcbiAgICAgICAgICAgICAgICB0YXBpbnMuY2FsY1Zpc3VhbE9mZnNldCA9IGZ1bmN0aW9uIChpbnB1dCwgc3RhdGUsIG91dHB1dCwgdHJlZSwgZmluYWxSZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2byA9IG91dHB1dC52aXN1YWxPZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgIHZhciBmciA9IHN0YXRlLmZpbmFsUmVjdDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnN0cmFpbmVkID0gc3RhdGUuY29uc3RyYWluZWQ7XG4gICAgICAgICAgICAgICAgICAgIHZvLnggPSBmci54O1xuICAgICAgICAgICAgICAgICAgICB2by55ID0gZnIueTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0cmVlLmlzVG9wKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGlucHV0Lmhvcml6b250YWxBbGlnbm1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIG1pbmVydmEuSG9yaXpvbnRhbEFsaWdubWVudC5MZWZ0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIG1pbmVydmEuSG9yaXpvbnRhbEFsaWdubWVudC5SaWdodDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdm8ueCArPSBmci53aWR0aCAtIGNvbnN0cmFpbmVkLndpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIG1pbmVydmEuSG9yaXpvbnRhbEFsaWdubWVudC5DZW50ZXI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZvLnggKz0gKGZyLndpZHRoIC0gY29uc3RyYWluZWQud2lkdGgpICogMC41O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2by54ICs9IE1hdGgubWF4KChmci53aWR0aCAtIGNvbnN0cmFpbmVkLndpZHRoKSAqIDAuNSwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChpbnB1dC52ZXJ0aWNhbEFsaWdubWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgbWluZXJ2YS5WZXJ0aWNhbEFsaWdubWVudC5Ub3A6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgbWluZXJ2YS5WZXJ0aWNhbEFsaWdubWVudC5Cb3R0b206XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZvLnkgKz0gZnIuaGVpZ2h0IC0gY29uc3RyYWluZWQuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIG1pbmVydmEuVmVydGljYWxBbGlnbm1lbnQuQ2VudGVyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2by55ICs9IChmci5oZWlnaHQgLSBjb25zdHJhaW5lZC5oZWlnaHQpICogMC41O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2by55ICs9IE1hdGgubWF4KChmci5oZWlnaHQgLSBjb25zdHJhaW5lZC5oZWlnaHQpICogMC41LCAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LnVzZUxheW91dFJvdW5kaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2by54ID0gTWF0aC5yb3VuZCh2by54KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZvLnkgPSBNYXRoLnJvdW5kKHZvLnkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KSh0YXBpbnMgPSBhcnJhbmdlLnRhcGlucyB8fCAoYXJyYW5nZS50YXBpbnMgPSB7fSkpO1xuICAgICAgICB9KShhcnJhbmdlID0gY29yZS5hcnJhbmdlIHx8IChjb3JlLmFycmFuZ2UgPSB7fSkpO1xuICAgIH0pKGNvcmUgPSBtaW5lcnZhLmNvcmUgfHwgKG1pbmVydmEuY29yZSA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvcmU7XG4gICAgKGZ1bmN0aW9uIChjb3JlKSB7XG4gICAgICAgIHZhciBhcnJhbmdlO1xuICAgICAgICAoZnVuY3Rpb24gKGFycmFuZ2UpIHtcbiAgICAgICAgICAgIHZhciB0YXBpbnM7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgIHRhcGlucy5jaGVja05lZWRBcnJhbmdlID0gZnVuY3Rpb24gKGlucHV0LCBzdGF0ZSwgb3V0cHV0LCB0cmVlLCBmaW5hbFJlY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKChpbnB1dC5kaXJ0eUZsYWdzICYgbWluZXJ2YS5EaXJ0eUZsYWdzLkFycmFuZ2UpID4gMClcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gIW1pbmVydmEuUmVjdC5pc0VxdWFsKG91dHB1dC5sYXlvdXRTbG90LCBzdGF0ZS5maW5hbFJlY3QpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KSh0YXBpbnMgPSBhcnJhbmdlLnRhcGlucyB8fCAoYXJyYW5nZS50YXBpbnMgPSB7fSkpO1xuICAgICAgICB9KShhcnJhbmdlID0gY29yZS5hcnJhbmdlIHx8IChjb3JlLmFycmFuZ2UgPSB7fSkpO1xuICAgIH0pKGNvcmUgPSBtaW5lcnZhLmNvcmUgfHwgKG1pbmVydmEuY29yZSA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvcmU7XG4gICAgKGZ1bmN0aW9uIChjb3JlKSB7XG4gICAgICAgIHZhciBhcnJhbmdlO1xuICAgICAgICAoZnVuY3Rpb24gKGFycmFuZ2UpIHtcbiAgICAgICAgICAgIHZhciB0YXBpbnM7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgIHRhcGlucy5jb21wbGV0ZU92ZXJyaWRlID0gZnVuY3Rpb24gKGlucHV0LCBzdGF0ZSwgb3V0cHV0LCB0cmVlLCBmaW5hbFJlY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0LmRpcnR5RmxhZ3MgJj0gfm1pbmVydmEuRGlydHlGbGFncy5BcnJhbmdlO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYXMgPSBzdGF0ZS5hcnJhbmdlZFNpemU7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5ob3Jpem9udGFsQWxpZ25tZW50ID09PSBtaW5lcnZhLkhvcml6b250YWxBbGlnbm1lbnQuU3RyZXRjaClcbiAgICAgICAgICAgICAgICAgICAgICAgIGFzLndpZHRoID0gTWF0aC5tYXgoYXMud2lkdGgsIHN0YXRlLmZyYW1ld29yay53aWR0aCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC52ZXJ0aWNhbEFsaWdubWVudCA9PT0gbWluZXJ2YS5WZXJ0aWNhbEFsaWdubWVudC5TdHJldGNoKVxuICAgICAgICAgICAgICAgICAgICAgICAgYXMuaGVpZ2h0ID0gTWF0aC5tYXgoYXMuaGVpZ2h0LCBzdGF0ZS5mcmFtZXdvcmsuaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LnVzZUxheW91dFJvdW5kaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcy53aWR0aCA9IE1hdGgucm91bmQoYXMud2lkdGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXMuaGVpZ2h0ID0gTWF0aC5yb3VuZChhcy5oZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhciBjb25zdHJhaW5lZCA9IHN0YXRlLmNvbnN0cmFpbmVkO1xuICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLlNpemUuY29weVRvKGFzLCBjb25zdHJhaW5lZCk7XG4gICAgICAgICAgICAgICAgICAgIGNvcmUuaGVscGVycy5jb2VyY2VTaXplKGNvbnN0cmFpbmVkLCBpbnB1dCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0cmFpbmVkLndpZHRoID0gTWF0aC5taW4oY29uc3RyYWluZWQud2lkdGgsIGFzLndpZHRoKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3RyYWluZWQuaGVpZ2h0ID0gTWF0aC5taW4oY29uc3RyYWluZWQuaGVpZ2h0LCBhcy5oZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSkodGFwaW5zID0gYXJyYW5nZS50YXBpbnMgfHwgKGFycmFuZ2UudGFwaW5zID0ge30pKTtcbiAgICAgICAgfSkoYXJyYW5nZSA9IGNvcmUuYXJyYW5nZSB8fCAoY29yZS5hcnJhbmdlID0ge30pKTtcbiAgICB9KShjb3JlID0gbWluZXJ2YS5jb3JlIHx8IChtaW5lcnZhLmNvcmUgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb3JlO1xuICAgIChmdW5jdGlvbiAoY29yZSkge1xuICAgICAgICB2YXIgYXJyYW5nZTtcbiAgICAgICAgKGZ1bmN0aW9uIChhcnJhbmdlKSB7XG4gICAgICAgICAgICB2YXIgdGFwaW5zO1xuICAgICAgICAgICAgKGZ1bmN0aW9uICh0YXBpbnMpIHtcbiAgICAgICAgICAgICAgICB0YXBpbnMuZG9PdmVycmlkZSA9IGZ1bmN0aW9uIChpbnB1dCwgc3RhdGUsIG91dHB1dCwgdHJlZSwgZmluYWxSZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjciA9IHN0YXRlLmNoaWxkUmVjdDtcbiAgICAgICAgICAgICAgICAgICAgY3IueCA9IGNyLnkgPSAwO1xuICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLlNpemUuY29weVRvKHN0YXRlLmZpbmFsU2l6ZSwgY3IpO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciB3YWxrZXIgPSB0cmVlLndhbGsoKTsgd2Fsa2VyLnN0ZXAoKTspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IHdhbGtlci5jdXJyZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQuYXJyYW5nZShzdGF0ZS5jaGlsZFJlY3QpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1pbmVydmEuU2l6ZS5jb3B5VG8oY3IsIHN0YXRlLmFycmFuZ2VkU2l6ZSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KSh0YXBpbnMgPSBhcnJhbmdlLnRhcGlucyB8fCAoYXJyYW5nZS50YXBpbnMgPSB7fSkpO1xuICAgICAgICB9KShhcnJhbmdlID0gY29yZS5hcnJhbmdlIHx8IChjb3JlLmFycmFuZ2UgPSB7fSkpO1xuICAgIH0pKGNvcmUgPSBtaW5lcnZhLmNvcmUgfHwgKG1pbmVydmEuY29yZSA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvcmU7XG4gICAgKGZ1bmN0aW9uIChjb3JlKSB7XG4gICAgICAgIHZhciBhcnJhbmdlO1xuICAgICAgICAoZnVuY3Rpb24gKGFycmFuZ2UpIHtcbiAgICAgICAgICAgIHZhciB0YXBpbnM7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgIHRhcGlucy5pbnZhbGlkYXRlRnV0dXJlID0gZnVuY3Rpb24gKGlucHV0LCBzdGF0ZSwgb3V0cHV0LCB0cmVlLCBmaW5hbFJlY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxjID0gb3V0cHV0LmxheW91dENsaXA7XG4gICAgICAgICAgICAgICAgICAgIGxjLnggPSBsYy55ID0gbGMud2lkdGggPSBsYy5oZWlnaHQgPSAwO1xuICAgICAgICAgICAgICAgICAgICBvdXRwdXQuZGlydHlGbGFncyB8PSBtaW5lcnZhLkRpcnR5RmxhZ3MuTG9jYWxUcmFuc2Zvcm07XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dC5kaXJ0eUZsYWdzIHw9IG1pbmVydmEuRGlydHlGbGFncy5Cb3VuZHM7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KSh0YXBpbnMgPSBhcnJhbmdlLnRhcGlucyB8fCAoYXJyYW5nZS50YXBpbnMgPSB7fSkpO1xuICAgICAgICB9KShhcnJhbmdlID0gY29yZS5hcnJhbmdlIHx8IChjb3JlLmFycmFuZ2UgPSB7fSkpO1xuICAgIH0pKGNvcmUgPSBtaW5lcnZhLmNvcmUgfHwgKG1pbmVydmEuY29yZSA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvcmU7XG4gICAgKGZ1bmN0aW9uIChjb3JlKSB7XG4gICAgICAgIHZhciBhcnJhbmdlO1xuICAgICAgICAoZnVuY3Rpb24gKGFycmFuZ2UpIHtcbiAgICAgICAgICAgIHZhciB0YXBpbnM7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgIHRhcGlucy5wcmVwYXJlT3ZlcnJpZGUgPSBmdW5jdGlvbiAoaW5wdXQsIHN0YXRlLCBvdXRwdXQsIHRyZWUsIGZpbmFsUmVjdCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZnJhbWV3b3JrID0gc3RhdGUuZnJhbWV3b3JrO1xuICAgICAgICAgICAgICAgICAgICBmcmFtZXdvcmsud2lkdGggPSAwO1xuICAgICAgICAgICAgICAgICAgICBmcmFtZXdvcmsuaGVpZ2h0ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgY29yZS5oZWxwZXJzLmNvZXJjZVNpemUoZnJhbWV3b3JrLCBpbnB1dCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5ob3Jpem9udGFsQWxpZ25tZW50ID09PSBtaW5lcnZhLkhvcml6b250YWxBbGlnbm1lbnQuU3RyZXRjaClcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1ld29yay53aWR0aCA9IE1hdGgubWF4KGZyYW1ld29yay53aWR0aCwgc3RhdGUuc3RyZXRjaGVkLndpZHRoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LnZlcnRpY2FsQWxpZ25tZW50ID09PSBtaW5lcnZhLlZlcnRpY2FsQWxpZ25tZW50LlN0cmV0Y2gpXG4gICAgICAgICAgICAgICAgICAgICAgICBmcmFtZXdvcmsuaGVpZ2h0ID0gTWF0aC5tYXgoZnJhbWV3b3JrLmhlaWdodCwgc3RhdGUuc3RyZXRjaGVkLmhlaWdodCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBmcyA9IHN0YXRlLmZpbmFsU2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhkID0gaW5wdXQuaGlkZGVuRGVzaXJlO1xuICAgICAgICAgICAgICAgICAgICBmcy53aWR0aCA9IE1hdGgubWF4KGhkLndpZHRoLCBmcmFtZXdvcmsud2lkdGgpO1xuICAgICAgICAgICAgICAgICAgICBmcy5oZWlnaHQgPSBNYXRoLm1heChoZC5oZWlnaHQsIGZyYW1ld29yay5oZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSkodGFwaW5zID0gYXJyYW5nZS50YXBpbnMgfHwgKGFycmFuZ2UudGFwaW5zID0ge30pKTtcbiAgICAgICAgfSkoYXJyYW5nZSA9IGNvcmUuYXJyYW5nZSB8fCAoY29yZS5hcnJhbmdlID0ge30pKTtcbiAgICB9KShjb3JlID0gbWluZXJ2YS5jb3JlIHx8IChtaW5lcnZhLmNvcmUgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb3JlO1xuICAgIChmdW5jdGlvbiAoY29yZSkge1xuICAgICAgICB2YXIgYXJyYW5nZTtcbiAgICAgICAgKGZ1bmN0aW9uIChhcnJhbmdlKSB7XG4gICAgICAgICAgICB2YXIgdGFwaW5zO1xuICAgICAgICAgICAgKGZ1bmN0aW9uICh0YXBpbnMpIHtcbiAgICAgICAgICAgICAgICB0YXBpbnMudmFsaWRhdGVGaW5hbFJlY3QgPSBmdW5jdGlvbiAoaW5wdXQsIHN0YXRlLCBvdXRwdXQsIHRyZWUsIGZpbmFsUmVjdCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZmluYWxSZWN0LndpZHRoIDwgMCB8fCBmaW5hbFJlY3QuaGVpZ2h0IDwgMFxuICAgICAgICAgICAgICAgICAgICAgICAgfHwgIWlzRmluaXRlKGZpbmFsUmVjdC53aWR0aCkgfHwgIWlzRmluaXRlKGZpbmFsUmVjdC5oZWlnaHQpXG4gICAgICAgICAgICAgICAgICAgICAgICB8fCBpc05hTihmaW5hbFJlY3QueCkgfHwgaXNOYU4oZmluYWxSZWN0LnkpXG4gICAgICAgICAgICAgICAgICAgICAgICB8fCBpc05hTihmaW5hbFJlY3Qud2lkdGgpIHx8IGlzTmFOKGZpbmFsUmVjdC5oZWlnaHQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLmxheW91dEVycm9yKHRyZWUsIHRoaXMsIFwiSW52YWxpZCBhcmd1bWVudHMgdG8gQXJyYW5nZS5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pKHRhcGlucyA9IGFycmFuZ2UudGFwaW5zIHx8IChhcnJhbmdlLnRhcGlucyA9IHt9KSk7XG4gICAgICAgIH0pKGFycmFuZ2UgPSBjb3JlLmFycmFuZ2UgfHwgKGNvcmUuYXJyYW5nZSA9IHt9KSk7XG4gICAgfSkoY29yZSA9IG1pbmVydmEuY29yZSB8fCAobWluZXJ2YS5jb3JlID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29yZTtcbiAgICAoZnVuY3Rpb24gKGNvcmUpIHtcbiAgICAgICAgdmFyIGFycmFuZ2U7XG4gICAgICAgIChmdW5jdGlvbiAoYXJyYW5nZSkge1xuICAgICAgICAgICAgdmFyIHRhcGlucztcbiAgICAgICAgICAgIChmdW5jdGlvbiAodGFwaW5zKSB7XG4gICAgICAgICAgICAgICAgdGFwaW5zLnZhbGlkYXRlVmlzaWJpbGl0eSA9IGZ1bmN0aW9uIChpbnB1dCwgc3RhdGUsIG91dHB1dCwgdHJlZSwgZmluYWxSZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC52aXNpYmlsaXR5ICE9PSBtaW5lcnZhLlZpc2liaWxpdHkuVmlzaWJsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5SZWN0LmNvcHlUbyhzdGF0ZS5maW5hbFJlY3QsIG91dHB1dC5sYXlvdXRTbG90KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSkodGFwaW5zID0gYXJyYW5nZS50YXBpbnMgfHwgKGFycmFuZ2UudGFwaW5zID0ge30pKTtcbiAgICAgICAgfSkoYXJyYW5nZSA9IGNvcmUuYXJyYW5nZSB8fCAoY29yZS5hcnJhbmdlID0ge30pKTtcbiAgICB9KShjb3JlID0gbWluZXJ2YS5jb3JlIHx8IChtaW5lcnZhLmNvcmUgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb3JlO1xuICAgIChmdW5jdGlvbiAoY29yZSkge1xuICAgICAgICB2YXIgZHJhZnQ7XG4gICAgICAgIChmdW5jdGlvbiAoZHJhZnQpIHtcbiAgICAgICAgICAgIHZhciB0YXBpbnM7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgIHRhcGlucy5hcnJhbmdlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuZmxhZyAhPT0gbWluZXJ2YS5VSUZsYWdzLkFycmFuZ2VIaW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLmFycmFuZ2VMaXN0Lmxlbmd0aCA8PSAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdXBkYXRlcjtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKCh1cGRhdGVyID0gZGF0YS5hcnJhbmdlTGlzdC5zaGlmdCgpKSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVyLmRvQXJyYW5nZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KSh0YXBpbnMgPSBkcmFmdC50YXBpbnMgfHwgKGRyYWZ0LnRhcGlucyA9IHt9KSk7XG4gICAgICAgIH0pKGRyYWZ0ID0gY29yZS5kcmFmdCB8fCAoY29yZS5kcmFmdCA9IHt9KSk7XG4gICAgfSkoY29yZSA9IG1pbmVydmEuY29yZSB8fCAobWluZXJ2YS5jb3JlID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29yZTtcbiAgICAoZnVuY3Rpb24gKGNvcmUpIHtcbiAgICAgICAgdmFyIGRyYWZ0O1xuICAgICAgICAoZnVuY3Rpb24gKGRyYWZ0KSB7XG4gICAgICAgICAgICB2YXIgdGFwaW5zO1xuICAgICAgICAgICAgKGZ1bmN0aW9uICh0YXBpbnMpIHtcbiAgICAgICAgICAgICAgICB0YXBpbnMuZGV0ZXJtaW5lUGhhc2UgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBkYXRhLmZsYWcgPSBtaW5lcnZhLlVJRmxhZ3MuTm9uZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFzc2V0cyA9IGRhdGEuYXNzZXRzO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYXNzZXRzLnZpc2liaWxpdHkgIT09IG1pbmVydmEuVmlzaWJpbGl0eS5WaXNpYmxlKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGlmICgoYXNzZXRzLnVpRmxhZ3MgJiBtaW5lcnZhLlVJRmxhZ3MuTWVhc3VyZUhpbnQpID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5mbGFnID0gbWluZXJ2YS5VSUZsYWdzLk1lYXN1cmVIaW50O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKChhc3NldHMudWlGbGFncyAmIG1pbmVydmEuVUlGbGFncy5BcnJhbmdlSGludCkgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmZsYWcgPSBtaW5lcnZhLlVJRmxhZ3MuQXJyYW5nZUhpbnQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoKGFzc2V0cy51aUZsYWdzICYgbWluZXJ2YS5VSUZsYWdzLlNpemVIaW50KSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuZmxhZyA9IG1pbmVydmEuVUlGbGFncy5TaXplSGludDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSkodGFwaW5zID0gZHJhZnQudGFwaW5zIHx8IChkcmFmdC50YXBpbnMgPSB7fSkpO1xuICAgICAgICB9KShkcmFmdCA9IGNvcmUuZHJhZnQgfHwgKGNvcmUuZHJhZnQgPSB7fSkpO1xuICAgIH0pKGNvcmUgPSBtaW5lcnZhLmNvcmUgfHwgKG1pbmVydmEuY29yZSA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvcmU7XG4gICAgKGZ1bmN0aW9uIChjb3JlKSB7XG4gICAgICAgIHZhciBkcmFmdDtcbiAgICAgICAgKGZ1bmN0aW9uIChkcmFmdCkge1xuICAgICAgICAgICAgdmFyIHRhcGlucztcbiAgICAgICAgICAgIChmdW5jdGlvbiAodGFwaW5zKSB7XG4gICAgICAgICAgICAgICAgdGFwaW5zLmZsdXNoUHJldmlvdXMgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdXBkYXRlcjtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKCh1cGRhdGVyID0gZGF0YS5hcnJhbmdlTGlzdC5zaGlmdCgpKSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb3JlLlVwZGF0ZXIuJCRwcm9wYWdhdGVVaUZsYWdzVXAodXBkYXRlciwgbWluZXJ2YS5VSUZsYWdzLkFycmFuZ2VIaW50KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoKHVwZGF0ZXIgPSBkYXRhLnNpemluZ0xpc3Quc2hpZnQoKSkgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29yZS5VcGRhdGVyLiQkcHJvcGFnYXRlVWlGbGFnc1VwKHVwZGF0ZXIsIG1pbmVydmEuVUlGbGFncy5TaXplSGludCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pKHRhcGlucyA9IGRyYWZ0LnRhcGlucyB8fCAoZHJhZnQudGFwaW5zID0ge30pKTtcbiAgICAgICAgfSkoZHJhZnQgPSBjb3JlLmRyYWZ0IHx8IChjb3JlLmRyYWZ0ID0ge30pKTtcbiAgICB9KShjb3JlID0gbWluZXJ2YS5jb3JlIHx8IChtaW5lcnZhLmNvcmUgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb3JlO1xuICAgIChmdW5jdGlvbiAoY29yZSkge1xuICAgICAgICB2YXIgZHJhZnQ7XG4gICAgICAgIChmdW5jdGlvbiAoZHJhZnQpIHtcbiAgICAgICAgICAgIHZhciB0YXBpbnM7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgIHRhcGlucy5tZWFzdXJlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuZmxhZyAhPT0gbWluZXJ2YS5VSUZsYWdzLk1lYXN1cmVIaW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLm1lYXN1cmVMaXN0Lmxlbmd0aCA8PSAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdXBkYXRlcjtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKCh1cGRhdGVyID0gZGF0YS5tZWFzdXJlTGlzdC5zaGlmdCgpKSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVyLmRvTWVhc3VyZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KSh0YXBpbnMgPSBkcmFmdC50YXBpbnMgfHwgKGRyYWZ0LnRhcGlucyA9IHt9KSk7XG4gICAgICAgIH0pKGRyYWZ0ID0gY29yZS5kcmFmdCB8fCAoY29yZS5kcmFmdCA9IHt9KSk7XG4gICAgfSkoY29yZSA9IG1pbmVydmEuY29yZSB8fCAobWluZXJ2YS5jb3JlID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29yZTtcbiAgICAoZnVuY3Rpb24gKGNvcmUpIHtcbiAgICAgICAgdmFyIGRyYWZ0O1xuICAgICAgICAoZnVuY3Rpb24gKGRyYWZ0KSB7XG4gICAgICAgICAgICB2YXIgdGFwaW5zO1xuICAgICAgICAgICAgKGZ1bmN0aW9uICh0YXBpbnMpIHtcbiAgICAgICAgICAgICAgICB0YXBpbnMubm90aWZ5UmVzaXplID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuZmxhZyAhPT0gbWluZXJ2YS5VSUZsYWdzLlNpemVIaW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLnNpemluZ1VwZGF0ZXMubGVuZ3RoIDw9IDApXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHVwZGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKCh1cGRhdGUgPSBkYXRhLnNpemluZ1VwZGF0ZXMucG9wKCkpICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZS51cGRhdGVyLm9uU2l6ZUNoYW5nZWQodXBkYXRlLm9sZFNpemUsIHVwZGF0ZS5uZXdTaXplKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSkodGFwaW5zID0gZHJhZnQudGFwaW5zIHx8IChkcmFmdC50YXBpbnMgPSB7fSkpO1xuICAgICAgICB9KShkcmFmdCA9IGNvcmUuZHJhZnQgfHwgKGNvcmUuZHJhZnQgPSB7fSkpO1xuICAgIH0pKGNvcmUgPSBtaW5lcnZhLmNvcmUgfHwgKG1pbmVydmEuY29yZSA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvcmU7XG4gICAgKGZ1bmN0aW9uIChjb3JlKSB7XG4gICAgICAgIHZhciBkcmFmdDtcbiAgICAgICAgKGZ1bmN0aW9uIChkcmFmdCkge1xuICAgICAgICAgICAgdmFyIHRhcGlucztcbiAgICAgICAgICAgIChmdW5jdGlvbiAodGFwaW5zKSB7XG4gICAgICAgICAgICAgICAgdGFwaW5zLnByZXBhcmVBcnJhbmdlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuZmxhZyAhPT0gbWluZXJ2YS5VSUZsYWdzLkFycmFuZ2VIaW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHdhbGtlciA9IGRhdGEudXBkYXRlci53YWxrRGVlcCgpOyB3YWxrZXIuc3RlcCgpOykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFzc2V0cyA9IHdhbGtlci5jdXJyZW50LmFzc2V0cztcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhc3NldHMudmlzaWJpbGl0eSAhPT0gbWluZXJ2YS5WaXNpYmlsaXR5LlZpc2libGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YWxrZXIuc2tpcEJyYW5jaCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChhc3NldHMudWlGbGFncyAmIG1pbmVydmEuVUlGbGFncy5BcnJhbmdlSGludCkgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YWxrZXIuc2tpcEJyYW5jaCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYXNzZXRzLnVpRmxhZ3MgJj0gfm1pbmVydmEuVUlGbGFncy5BcnJhbmdlSGludDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoYXNzZXRzLmRpcnR5RmxhZ3MgJiBtaW5lcnZhLkRpcnR5RmxhZ3MuQXJyYW5nZSkgPiAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuYXJyYW5nZUxpc3QucHVzaCh3YWxrZXIuY3VycmVudCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pKHRhcGlucyA9IGRyYWZ0LnRhcGlucyB8fCAoZHJhZnQudGFwaW5zID0ge30pKTtcbiAgICAgICAgfSkoZHJhZnQgPSBjb3JlLmRyYWZ0IHx8IChjb3JlLmRyYWZ0ID0ge30pKTtcbiAgICB9KShjb3JlID0gbWluZXJ2YS5jb3JlIHx8IChtaW5lcnZhLmNvcmUgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb3JlO1xuICAgIChmdW5jdGlvbiAoY29yZSkge1xuICAgICAgICB2YXIgZHJhZnQ7XG4gICAgICAgIChmdW5jdGlvbiAoZHJhZnQpIHtcbiAgICAgICAgICAgIHZhciB0YXBpbnM7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgIHRhcGlucy5wcmVwYXJlTWVhc3VyZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLmZsYWcgIT09IG1pbmVydmEuVUlGbGFncy5NZWFzdXJlSGludClcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbGFzdCA9IGRhdGEuYXNzZXRzLnByZXZpb3VzQ29uc3RyYWludDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEudHJlZS5pc0NvbnRhaW5lciAmJiAobWluZXJ2YS5TaXplLmlzVW5kZWYobGFzdCkgfHwgKCFtaW5lcnZhLlNpemUuaXNFcXVhbChsYXN0LCBkYXRhLnN1cmZhY2VTaXplKSkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmFzc2V0cy5kaXJ0eUZsYWdzIHw9IG1pbmVydmEuRGlydHlGbGFncy5NZWFzdXJlO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5TaXplLmNvcHlUbyhkYXRhLnN1cmZhY2VTaXplLCBkYXRhLmFzc2V0cy5wcmV2aW91c0NvbnN0cmFpbnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHdhbGtlciA9IGRhdGEudXBkYXRlci53YWxrRGVlcCgpOyB3YWxrZXIuc3RlcCgpOykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFzc2V0cyA9IHdhbGtlci5jdXJyZW50LmFzc2V0cztcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhc3NldHMudmlzaWJpbGl0eSAhPT0gbWluZXJ2YS5WaXNpYmlsaXR5LlZpc2libGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YWxrZXIuc2tpcEJyYW5jaCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChhc3NldHMudWlGbGFncyAmIG1pbmVydmEuVUlGbGFncy5NZWFzdXJlSGludCkgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YWxrZXIuc2tpcEJyYW5jaCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYXNzZXRzLnVpRmxhZ3MgJj0gfm1pbmVydmEuVUlGbGFncy5NZWFzdXJlSGludDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoYXNzZXRzLmRpcnR5RmxhZ3MgJiBtaW5lcnZhLkRpcnR5RmxhZ3MuTWVhc3VyZSkgPiAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEubWVhc3VyZUxpc3QucHVzaCh3YWxrZXIuY3VycmVudCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pKHRhcGlucyA9IGRyYWZ0LnRhcGlucyB8fCAoZHJhZnQudGFwaW5zID0ge30pKTtcbiAgICAgICAgfSkoZHJhZnQgPSBjb3JlLmRyYWZ0IHx8IChjb3JlLmRyYWZ0ID0ge30pKTtcbiAgICB9KShjb3JlID0gbWluZXJ2YS5jb3JlIHx8IChtaW5lcnZhLmNvcmUgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb3JlO1xuICAgIChmdW5jdGlvbiAoY29yZSkge1xuICAgICAgICB2YXIgZHJhZnQ7XG4gICAgICAgIChmdW5jdGlvbiAoZHJhZnQpIHtcbiAgICAgICAgICAgIHZhciB0YXBpbnM7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgIHRhcGlucy5wcmVwYXJlU2l6aW5nID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuZmxhZyAhPT0gbWluZXJ2YS5VSUZsYWdzLlNpemVIaW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHdhbGtlciA9IGRhdGEudXBkYXRlci53YWxrRGVlcCgpOyB3YWxrZXIuc3RlcCgpOykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFzc2V0cyA9IHdhbGtlci5jdXJyZW50LmFzc2V0cztcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhc3NldHMudmlzaWJpbGl0eSAhPT0gbWluZXJ2YS5WaXNpYmlsaXR5LlZpc2libGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YWxrZXIuc2tpcEJyYW5jaCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChhc3NldHMudWlGbGFncyAmIG1pbmVydmEuVUlGbGFncy5TaXplSGludCkgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YWxrZXIuc2tpcEJyYW5jaCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYXNzZXRzLnVpRmxhZ3MgJj0gfm1pbmVydmEuVUlGbGFncy5TaXplSGludDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhc3NldHMubGFzdFJlbmRlclNpemUgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnNpemluZ0xpc3QucHVzaCh3YWxrZXIuY3VycmVudCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pKHRhcGlucyA9IGRyYWZ0LnRhcGlucyB8fCAoZHJhZnQudGFwaW5zID0ge30pKTtcbiAgICAgICAgfSkoZHJhZnQgPSBjb3JlLmRyYWZ0IHx8IChjb3JlLmRyYWZ0ID0ge30pKTtcbiAgICB9KShjb3JlID0gbWluZXJ2YS5jb3JlIHx8IChtaW5lcnZhLmNvcmUgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb3JlO1xuICAgIChmdW5jdGlvbiAoY29yZSkge1xuICAgICAgICB2YXIgZHJhZnQ7XG4gICAgICAgIChmdW5jdGlvbiAoZHJhZnQpIHtcbiAgICAgICAgICAgIHZhciB0YXBpbnM7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgIHRhcGlucy5zaXppbmcgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5mbGFnICE9PSBtaW5lcnZhLlVJRmxhZ3MuU2l6ZUhpbnQpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuc2l6aW5nTGlzdC5sZW5ndGggPD0gMClcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHVwZGF0ZXI7XG4gICAgICAgICAgICAgICAgICAgIHZhciBvbGRTaXplID0gbmV3IG1pbmVydmEuU2l6ZSgpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbmV3U2l6ZSA9IG5ldyBtaW5lcnZhLlNpemUoKTtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKCh1cGRhdGVyID0gZGF0YS5zaXppbmdMaXN0LnBvcCgpKSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVyLnNpemluZyhvbGRTaXplLCBuZXdTaXplKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbWluZXJ2YS5TaXplLmlzRXF1YWwob2xkU2l6ZSwgbmV3IG1pbmVydmEuU2l6ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnNpemluZ1VwZGF0ZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9sZFNpemU6IG9sZFNpemUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1NpemU6IG5ld1NpemVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbGRTaXplID0gbmV3IG1pbmVydmEuU2l6ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1NpemUgPSBuZXcgbWluZXJ2YS5TaXplKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pKHRhcGlucyA9IGRyYWZ0LnRhcGlucyB8fCAoZHJhZnQudGFwaW5zID0ge30pKTtcbiAgICAgICAgfSkoZHJhZnQgPSBjb3JlLmRyYWZ0IHx8IChjb3JlLmRyYWZ0ID0ge30pKTtcbiAgICB9KShjb3JlID0gbWluZXJ2YS5jb3JlIHx8IChtaW5lcnZhLmNvcmUgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb3JlO1xuICAgIChmdW5jdGlvbiAoY29yZSkge1xuICAgICAgICB2YXIgaGl0dGVzdDtcbiAgICAgICAgKGZ1bmN0aW9uIChoaXR0ZXN0KSB7XG4gICAgICAgICAgICB2YXIgdGFwaW5zO1xuICAgICAgICAgICAgKGZ1bmN0aW9uICh0YXBpbnMpIHtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBjYW5IaXQoZGF0YSwgcG9zLCBoaXRMaXN0LCBjdHgsIGluY2x1ZGVBbGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFzc2V0cyA9IGRhdGEuYXNzZXRzO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gISFhc3NldHMudG90YWxJc1JlbmRlclZpc2libGVcbiAgICAgICAgICAgICAgICAgICAgICAgICYmICEhYXNzZXRzLnRvdGFsSXNIaXRUZXN0VmlzaWJsZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGFwaW5zLmNhbkhpdCA9IGNhbkhpdDtcbiAgICAgICAgICAgIH0pKHRhcGlucyA9IGhpdHRlc3QudGFwaW5zIHx8IChoaXR0ZXN0LnRhcGlucyA9IHt9KSk7XG4gICAgICAgIH0pKGhpdHRlc3QgPSBjb3JlLmhpdHRlc3QgfHwgKGNvcmUuaGl0dGVzdCA9IHt9KSk7XG4gICAgfSkoY29yZSA9IG1pbmVydmEuY29yZSB8fCAobWluZXJ2YS5jb3JlID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29yZTtcbiAgICAoZnVuY3Rpb24gKGNvcmUpIHtcbiAgICAgICAgdmFyIGhpdHRlc3Q7XG4gICAgICAgIChmdW5jdGlvbiAoaGl0dGVzdCkge1xuICAgICAgICAgICAgdmFyIHRhcGlucztcbiAgICAgICAgICAgIChmdW5jdGlvbiAodGFwaW5zKSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gY2FuSGl0SW5zaWRlKGRhdGEsIHBvcywgaGl0TGlzdCwgY3R4LCBpbmNsdWRlQWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLmhpdENoaWxkcmVuKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGhpdExpc3Quc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0YXBpbnMuY2FuSGl0SW5zaWRlID0gY2FuSGl0SW5zaWRlO1xuICAgICAgICAgICAgfSkodGFwaW5zID0gaGl0dGVzdC50YXBpbnMgfHwgKGhpdHRlc3QudGFwaW5zID0ge30pKTtcbiAgICAgICAgfSkoaGl0dGVzdCA9IGNvcmUuaGl0dGVzdCB8fCAoY29yZS5oaXR0ZXN0ID0ge30pKTtcbiAgICB9KShjb3JlID0gbWluZXJ2YS5jb3JlIHx8IChtaW5lcnZhLmNvcmUgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb3JlO1xuICAgIChmdW5jdGlvbiAoY29yZSkge1xuICAgICAgICB2YXIgaGl0dGVzdDtcbiAgICAgICAgKGZ1bmN0aW9uIChoaXR0ZXN0KSB7XG4gICAgICAgICAgICB2YXIgdGFwaW5zO1xuICAgICAgICAgICAgKGZ1bmN0aW9uICh0YXBpbnMpIHtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBjb21wbGV0ZUN0eChkYXRhLCBwb3MsIGhpdExpc3QsIGN0eCwgaW5jbHVkZUFsbCkge1xuICAgICAgICAgICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGFwaW5zLmNvbXBsZXRlQ3R4ID0gY29tcGxldGVDdHg7XG4gICAgICAgICAgICB9KSh0YXBpbnMgPSBoaXR0ZXN0LnRhcGlucyB8fCAoaGl0dGVzdC50YXBpbnMgPSB7fSkpO1xuICAgICAgICB9KShoaXR0ZXN0ID0gY29yZS5oaXR0ZXN0IHx8IChjb3JlLmhpdHRlc3QgPSB7fSkpO1xuICAgIH0pKGNvcmUgPSBtaW5lcnZhLmNvcmUgfHwgKG1pbmVydmEuY29yZSA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvcmU7XG4gICAgKGZ1bmN0aW9uIChjb3JlKSB7XG4gICAgICAgIHZhciBoaXR0ZXN0O1xuICAgICAgICAoZnVuY3Rpb24gKGhpdHRlc3QpIHtcbiAgICAgICAgICAgIHZhciB0YXBpbnM7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGluc2lkZUNoaWxkcmVuKGRhdGEsIHBvcywgaGl0TGlzdCwgY3R4LCBpbmNsdWRlQWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGhpdExpc3QudW5zaGlmdChkYXRhLnVwZGF0ZXIpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaGl0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHdhbGtlciA9IGRhdGEudHJlZS53YWxrKG1pbmVydmEuV2Fsa0RpcmVjdGlvbi5aUmV2ZXJzZSk7IHdhbGtlci5zdGVwKCk7KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBoaXQgPSB3YWxrZXIuY3VycmVudC5oaXRUZXN0KHBvcywgaGl0TGlzdCwgY3R4LCBpbmNsdWRlQWxsKSB8fCBoaXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGl0ICYmICFpbmNsdWRlQWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGRhdGEuaGl0Q2hpbGRyZW4gPSBoaXQ7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0YXBpbnMuaW5zaWRlQ2hpbGRyZW4gPSBpbnNpZGVDaGlsZHJlbjtcbiAgICAgICAgICAgIH0pKHRhcGlucyA9IGhpdHRlc3QudGFwaW5zIHx8IChoaXR0ZXN0LnRhcGlucyA9IHt9KSk7XG4gICAgICAgIH0pKGhpdHRlc3QgPSBjb3JlLmhpdHRlc3QgfHwgKGNvcmUuaGl0dGVzdCA9IHt9KSk7XG4gICAgfSkoY29yZSA9IG1pbmVydmEuY29yZSB8fCAobWluZXJ2YS5jb3JlID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29yZTtcbiAgICAoZnVuY3Rpb24gKGNvcmUpIHtcbiAgICAgICAgdmFyIGhpdHRlc3Q7XG4gICAgICAgIChmdW5jdGlvbiAoaGl0dGVzdCkge1xuICAgICAgICAgICAgdmFyIHRhcGlucztcbiAgICAgICAgICAgIChmdW5jdGlvbiAodGFwaW5zKSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gaW5zaWRlQ2xpcChkYXRhLCBwb3MsIGhpdExpc3QsIGN0eCwgaW5jbHVkZUFsbCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY2xpcCA9IGRhdGEuYXNzZXRzLmNsaXA7XG4gICAgICAgICAgICAgICAgICAgIGlmICghY2xpcClcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYm91bmRzID0gY2xpcC5HZXRCb3VuZHMoKTtcbiAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5SZWN0LnRyYW5zZm9ybShib3VuZHMsIGN0eC5jdXJyZW50VHJhbnNmb3JtKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFtaW5lcnZhLlJlY3QuY29udGFpbnNQb2ludChib3VuZHMsIHBvcykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2xpcC5EcmF3KGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghY3R4LnJhdy5pc1BvaW50SW5QYXRoKHBvcy54LCBwb3MueSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRhcGlucy5pbnNpZGVDbGlwID0gaW5zaWRlQ2xpcDtcbiAgICAgICAgICAgIH0pKHRhcGlucyA9IGhpdHRlc3QudGFwaW5zIHx8IChoaXR0ZXN0LnRhcGlucyA9IHt9KSk7XG4gICAgICAgIH0pKGhpdHRlc3QgPSBjb3JlLmhpdHRlc3QgfHwgKGNvcmUuaGl0dGVzdCA9IHt9KSk7XG4gICAgfSkoY29yZSA9IG1pbmVydmEuY29yZSB8fCAobWluZXJ2YS5jb3JlID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29yZTtcbiAgICAoZnVuY3Rpb24gKGNvcmUpIHtcbiAgICAgICAgdmFyIGhpdHRlc3Q7XG4gICAgICAgIChmdW5jdGlvbiAoaGl0dGVzdCkge1xuICAgICAgICAgICAgdmFyIHRhcGlucztcbiAgICAgICAgICAgIChmdW5jdGlvbiAodGFwaW5zKSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gaW5zaWRlTGF5b3V0Q2xpcChkYXRhLCBwb3MsIGhpdExpc3QsIGN0eCwgaW5jbHVkZUFsbCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5oaXRDaGlsZHJlbilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB2YXIgY2xjID0gZGF0YS5hc3NldHMuY29tcG9zaXRlTGF5b3V0Q2xpcDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjbGMgfHwgbWluZXJ2YS5SZWN0LmlzRW1wdHkoY2xjKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbGNib3VuZHMgPSBkYXRhLmxheW91dENsaXBCb3VuZHM7XG4gICAgICAgICAgICAgICAgICAgIG1pbmVydmEuUmVjdC5jb3B5VG8oY2xjLCBsY2JvdW5kcyk7XG4gICAgICAgICAgICAgICAgICAgIG1pbmVydmEuUmVjdC50cmFuc2Zvcm0obGNib3VuZHMsIGN0eC5jdXJyZW50VHJhbnNmb3JtKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFtaW5lcnZhLlJlY3QuY29udGFpbnNQb2ludChsY2JvdW5kcywgcG9zKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaGl0TGlzdC5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGFwaW5zLmluc2lkZUxheW91dENsaXAgPSBpbnNpZGVMYXlvdXRDbGlwO1xuICAgICAgICAgICAgfSkodGFwaW5zID0gaGl0dGVzdC50YXBpbnMgfHwgKGhpdHRlc3QudGFwaW5zID0ge30pKTtcbiAgICAgICAgfSkoaGl0dGVzdCA9IGNvcmUuaGl0dGVzdCB8fCAoY29yZS5oaXR0ZXN0ID0ge30pKTtcbiAgICB9KShjb3JlID0gbWluZXJ2YS5jb3JlIHx8IChtaW5lcnZhLmNvcmUgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb3JlO1xuICAgIChmdW5jdGlvbiAoY29yZSkge1xuICAgICAgICB2YXIgaGl0dGVzdDtcbiAgICAgICAgKGZ1bmN0aW9uIChoaXR0ZXN0KSB7XG4gICAgICAgICAgICB2YXIgdGFwaW5zO1xuICAgICAgICAgICAgKGZ1bmN0aW9uICh0YXBpbnMpIHtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBpbnNpZGVPYmplY3QoZGF0YSwgcG9zLCBoaXRMaXN0LCBjdHgsIGluY2x1ZGVBbGwpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuaGl0Q2hpbGRyZW4pXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJvdW5kcyA9IGRhdGEuYm91bmRzO1xuICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLlJlY3QuY29weVRvKGRhdGEuYXNzZXRzLmV4dGVudHMsIGJvdW5kcyk7XG4gICAgICAgICAgICAgICAgICAgIG1pbmVydmEuUmVjdC50cmFuc2Zvcm0oYm91bmRzLCBjdHguY3VycmVudFRyYW5zZm9ybSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghbWluZXJ2YS5SZWN0LmNvbnRhaW5zUG9pbnQoYm91bmRzLCBwb3MpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBoaXRMaXN0LnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0YXBpbnMuaW5zaWRlT2JqZWN0ID0gaW5zaWRlT2JqZWN0O1xuICAgICAgICAgICAgfSkodGFwaW5zID0gaGl0dGVzdC50YXBpbnMgfHwgKGhpdHRlc3QudGFwaW5zID0ge30pKTtcbiAgICAgICAgfSkoaGl0dGVzdCA9IGNvcmUuaGl0dGVzdCB8fCAoY29yZS5oaXR0ZXN0ID0ge30pKTtcbiAgICB9KShjb3JlID0gbWluZXJ2YS5jb3JlIHx8IChtaW5lcnZhLmNvcmUgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb3JlO1xuICAgIChmdW5jdGlvbiAoY29yZSkge1xuICAgICAgICB2YXIgaGl0dGVzdDtcbiAgICAgICAgKGZ1bmN0aW9uIChoaXR0ZXN0KSB7XG4gICAgICAgICAgICB2YXIgdGFwaW5zO1xuICAgICAgICAgICAgKGZ1bmN0aW9uICh0YXBpbnMpIHtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBwcmVwYXJlQ3R4KGRhdGEsIHBvcywgaGl0TGlzdCwgY3R4LCBpbmNsdWRlQWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5wcmVhcHBseShkYXRhLmFzc2V0cy5yZW5kZXJYZm9ybSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0YXBpbnMucHJlcGFyZUN0eCA9IHByZXBhcmVDdHg7XG4gICAgICAgICAgICB9KSh0YXBpbnMgPSBoaXR0ZXN0LnRhcGlucyB8fCAoaGl0dGVzdC50YXBpbnMgPSB7fSkpO1xuICAgICAgICB9KShoaXR0ZXN0ID0gY29yZS5oaXR0ZXN0IHx8IChjb3JlLmhpdHRlc3QgPSB7fSkpO1xuICAgIH0pKGNvcmUgPSBtaW5lcnZhLmNvcmUgfHwgKG1pbmVydmEuY29yZSA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvcmU7XG4gICAgKGZ1bmN0aW9uIChjb3JlKSB7XG4gICAgICAgIHZhciBtZWFzdXJlO1xuICAgICAgICAoZnVuY3Rpb24gKG1lYXN1cmUpIHtcbiAgICAgICAgICAgIHZhciB0YXBpbnM7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgIHRhcGlucy5hcHBseVRlbXBsYXRlID0gZnVuY3Rpb24gKGlucHV0LCBzdGF0ZSwgb3V0cHV0LCB0cmVlLCBhdmFpbGFibGVTaXplKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyZWUuYXBwbHlUZW1wbGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSkodGFwaW5zID0gbWVhc3VyZS50YXBpbnMgfHwgKG1lYXN1cmUudGFwaW5zID0ge30pKTtcbiAgICAgICAgfSkobWVhc3VyZSA9IGNvcmUubWVhc3VyZSB8fCAoY29yZS5tZWFzdXJlID0ge30pKTtcbiAgICB9KShjb3JlID0gbWluZXJ2YS5jb3JlIHx8IChtaW5lcnZhLmNvcmUgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb3JlO1xuICAgIChmdW5jdGlvbiAoY29yZSkge1xuICAgICAgICB2YXIgbWVhc3VyZTtcbiAgICAgICAgKGZ1bmN0aW9uIChtZWFzdXJlKSB7XG4gICAgICAgICAgICB2YXIgdGFwaW5zO1xuICAgICAgICAgICAgKGZ1bmN0aW9uICh0YXBpbnMpIHtcbiAgICAgICAgICAgICAgICB0YXBpbnMuY2hlY2tOZWVkTWVhc3VyZSA9IGZ1bmN0aW9uIChpbnB1dCwgc3RhdGUsIG91dHB1dCwgdHJlZSwgYXZhaWxhYmxlU2l6ZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoKGlucHV0LmRpcnR5RmxhZ3MgJiBtaW5lcnZhLkRpcnR5RmxhZ3MuTWVhc3VyZSkgPiAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwYyA9IGlucHV0LnByZXZpb3VzQ29uc3RyYWludDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1pbmVydmEuU2l6ZS5pc1VuZGVmKHBjKSB8fCBwYy53aWR0aCAhPT0gYXZhaWxhYmxlU2l6ZS53aWR0aCB8fCBwYy5oZWlnaHQgIT09IGF2YWlsYWJsZVNpemUuaGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLlNpemUuY29weVRvKGF2YWlsYWJsZVNpemUsIG91dHB1dC5wcmV2aW91c0NvbnN0cmFpbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KSh0YXBpbnMgPSBtZWFzdXJlLnRhcGlucyB8fCAobWVhc3VyZS50YXBpbnMgPSB7fSkpO1xuICAgICAgICB9KShtZWFzdXJlID0gY29yZS5tZWFzdXJlIHx8IChjb3JlLm1lYXN1cmUgPSB7fSkpO1xuICAgIH0pKGNvcmUgPSBtaW5lcnZhLmNvcmUgfHwgKG1pbmVydmEuY29yZSA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvcmU7XG4gICAgKGZ1bmN0aW9uIChjb3JlKSB7XG4gICAgICAgIHZhciBtZWFzdXJlO1xuICAgICAgICAoZnVuY3Rpb24gKG1lYXN1cmUpIHtcbiAgICAgICAgICAgIHZhciB0YXBpbnM7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgIHRhcGlucy5jb21wbGV0ZU92ZXJyaWRlID0gZnVuY3Rpb24gKGlucHV0LCBzdGF0ZSwgb3V0cHV0LCB0cmVlLCBhdmFpbGFibGVTaXplKSB7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dC5kaXJ0eUZsYWdzICY9IH5taW5lcnZhLkRpcnR5RmxhZ3MuTWVhc3VyZTtcbiAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5TaXplLmNvcHlUbyhvdXRwdXQuZGVzaXJlZFNpemUsIG91dHB1dC5oaWRkZW5EZXNpcmUpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSkodGFwaW5zID0gbWVhc3VyZS50YXBpbnMgfHwgKG1lYXN1cmUudGFwaW5zID0ge30pKTtcbiAgICAgICAgfSkobWVhc3VyZSA9IGNvcmUubWVhc3VyZSB8fCAoY29yZS5tZWFzdXJlID0ge30pKTtcbiAgICB9KShjb3JlID0gbWluZXJ2YS5jb3JlIHx8IChtaW5lcnZhLmNvcmUgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb3JlO1xuICAgIChmdW5jdGlvbiAoY29yZSkge1xuICAgICAgICB2YXIgbWVhc3VyZTtcbiAgICAgICAgKGZ1bmN0aW9uIChtZWFzdXJlKSB7XG4gICAgICAgICAgICB2YXIgdGFwaW5zO1xuICAgICAgICAgICAgKGZ1bmN0aW9uICh0YXBpbnMpIHtcbiAgICAgICAgICAgICAgICB0YXBpbnMuZG9PdmVycmlkZSA9IGZ1bmN0aW9uIChpbnB1dCwgc3RhdGUsIG91dHB1dCwgdHJlZSwgYXZhaWxhYmxlU2l6ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZHMgPSBvdXRwdXQuZGVzaXJlZFNpemU7XG4gICAgICAgICAgICAgICAgICAgIGRzLndpZHRoID0gZHMuaGVpZ2h0ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgd2Fsa2VyID0gdHJlZS53YWxrKCk7IHdhbGtlci5zdGVwKCk7KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSB3YWxrZXIuY3VycmVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkLm1lYXN1cmUoc3RhdGUuYXZhaWxhYmxlU2l6ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLlNpemUuY29weVRvKGNoaWxkLmFzc2V0cy5kZXNpcmVkU2l6ZSwgZHMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KSh0YXBpbnMgPSBtZWFzdXJlLnRhcGlucyB8fCAobWVhc3VyZS50YXBpbnMgPSB7fSkpO1xuICAgICAgICB9KShtZWFzdXJlID0gY29yZS5tZWFzdXJlIHx8IChjb3JlLm1lYXN1cmUgPSB7fSkpO1xuICAgIH0pKGNvcmUgPSBtaW5lcnZhLmNvcmUgfHwgKG1pbmVydmEuY29yZSA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvcmU7XG4gICAgKGZ1bmN0aW9uIChjb3JlKSB7XG4gICAgICAgIHZhciBtZWFzdXJlO1xuICAgICAgICAoZnVuY3Rpb24gKG1lYXN1cmUpIHtcbiAgICAgICAgICAgIHZhciB0YXBpbnM7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgIHRhcGlucy5maW5pc2hEZXNpcmVkID0gZnVuY3Rpb24gKGlucHV0LCBzdGF0ZSwgb3V0cHV0LCB0cmVlLCBhdmFpbGFibGVTaXplKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkcyA9IG91dHB1dC5kZXNpcmVkU2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgY29yZS5oZWxwZXJzLmNvZXJjZVNpemUoZHMsIGlucHV0KTtcbiAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5UaGlja25lc3MuZ3Jvd1NpemUoaW5wdXQubWFyZ2luLCBkcyk7XG4gICAgICAgICAgICAgICAgICAgIGRzLndpZHRoID0gTWF0aC5taW4oZHMud2lkdGgsIGF2YWlsYWJsZVNpemUud2lkdGgpO1xuICAgICAgICAgICAgICAgICAgICBkcy5oZWlnaHQgPSBNYXRoLm1pbihkcy5oZWlnaHQsIGF2YWlsYWJsZVNpemUuaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LnVzZUxheW91dFJvdW5kaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkcy53aWR0aCA9IE1hdGgucm91bmQoZHMud2lkdGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZHMuaGVpZ2h0ID0gTWF0aC5yb3VuZChkcy5oZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KSh0YXBpbnMgPSBtZWFzdXJlLnRhcGlucyB8fCAobWVhc3VyZS50YXBpbnMgPSB7fSkpO1xuICAgICAgICB9KShtZWFzdXJlID0gY29yZS5tZWFzdXJlIHx8IChjb3JlLm1lYXN1cmUgPSB7fSkpO1xuICAgIH0pKGNvcmUgPSBtaW5lcnZhLmNvcmUgfHwgKG1pbmVydmEuY29yZSA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvcmU7XG4gICAgKGZ1bmN0aW9uIChjb3JlKSB7XG4gICAgICAgIHZhciBtZWFzdXJlO1xuICAgICAgICAoZnVuY3Rpb24gKG1lYXN1cmUpIHtcbiAgICAgICAgICAgIHZhciB0YXBpbnM7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgIHRhcGlucy5pbnZhbGlkYXRlRnV0dXJlID0gZnVuY3Rpb24gKGlucHV0LCBzdGF0ZSwgb3V0cHV0LCB0cmVlLCBhdmFpbGFibGVTaXplKSB7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dC5kaXJ0eUZsYWdzIHw9IG1pbmVydmEuRGlydHlGbGFncy5BcnJhbmdlO1xuICAgICAgICAgICAgICAgICAgICBvdXRwdXQudWlGbGFncyB8PSBtaW5lcnZhLlVJRmxhZ3MuQXJyYW5nZUhpbnQ7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dC5kaXJ0eUZsYWdzIHw9IG1pbmVydmEuRGlydHlGbGFncy5Cb3VuZHM7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KSh0YXBpbnMgPSBtZWFzdXJlLnRhcGlucyB8fCAobWVhc3VyZS50YXBpbnMgPSB7fSkpO1xuICAgICAgICB9KShtZWFzdXJlID0gY29yZS5tZWFzdXJlIHx8IChjb3JlLm1lYXN1cmUgPSB7fSkpO1xuICAgIH0pKGNvcmUgPSBtaW5lcnZhLmNvcmUgfHwgKG1pbmVydmEuY29yZSA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvcmU7XG4gICAgKGZ1bmN0aW9uIChjb3JlKSB7XG4gICAgICAgIHZhciBtZWFzdXJlO1xuICAgICAgICAoZnVuY3Rpb24gKG1lYXN1cmUpIHtcbiAgICAgICAgICAgIHZhciB0YXBpbnM7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgIHRhcGlucy5wcmVwYXJlT3ZlcnJpZGUgPSBmdW5jdGlvbiAoaW5wdXQsIHN0YXRlLCBvdXRwdXQsIHRyZWUsIGF2YWlsYWJsZVNpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5TaXplLmNvcHlUbyhhdmFpbGFibGVTaXplLCBzdGF0ZS5hdmFpbGFibGVTaXplKTtcbiAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5UaGlja25lc3Muc2hyaW5rU2l6ZShpbnB1dC5tYXJnaW4sIHN0YXRlLmF2YWlsYWJsZVNpemUpO1xuICAgICAgICAgICAgICAgICAgICBjb3JlLmhlbHBlcnMuY29lcmNlU2l6ZShzdGF0ZS5hdmFpbGFibGVTaXplLCBpbnB1dCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KSh0YXBpbnMgPSBtZWFzdXJlLnRhcGlucyB8fCAobWVhc3VyZS50YXBpbnMgPSB7fSkpO1xuICAgICAgICB9KShtZWFzdXJlID0gY29yZS5tZWFzdXJlIHx8IChjb3JlLm1lYXN1cmUgPSB7fSkpO1xuICAgIH0pKGNvcmUgPSBtaW5lcnZhLmNvcmUgfHwgKG1pbmVydmEuY29yZSA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvcmU7XG4gICAgKGZ1bmN0aW9uIChjb3JlKSB7XG4gICAgICAgIHZhciBtZWFzdXJlO1xuICAgICAgICAoZnVuY3Rpb24gKG1lYXN1cmUpIHtcbiAgICAgICAgICAgIHZhciB0YXBpbnM7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgIHRhcGlucy52YWxpZGF0ZSA9IGZ1bmN0aW9uIChpbnB1dCwgc3RhdGUsIG91dHB1dCwgdHJlZSwgYXZhaWxhYmxlU2l6ZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNOYU4oYXZhaWxhYmxlU2l6ZS53aWR0aCkgfHwgaXNOYU4oYXZhaWxhYmxlU2l6ZS5oZWlnaHQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLmxheW91dEVycm9yKHRyZWUsIHRoaXMsIFwiQ2Fubm90IGNhbGwgTWVhc3VyZSB1c2luZyBhIHNpemUgd2l0aCBOYU4gdmFsdWVzLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSkodGFwaW5zID0gbWVhc3VyZS50YXBpbnMgfHwgKG1lYXN1cmUudGFwaW5zID0ge30pKTtcbiAgICAgICAgfSkobWVhc3VyZSA9IGNvcmUubWVhc3VyZSB8fCAoY29yZS5tZWFzdXJlID0ge30pKTtcbiAgICB9KShjb3JlID0gbWluZXJ2YS5jb3JlIHx8IChtaW5lcnZhLmNvcmUgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb3JlO1xuICAgIChmdW5jdGlvbiAoY29yZSkge1xuICAgICAgICB2YXIgbWVhc3VyZTtcbiAgICAgICAgKGZ1bmN0aW9uIChtZWFzdXJlKSB7XG4gICAgICAgICAgICB2YXIgdGFwaW5zO1xuICAgICAgICAgICAgKGZ1bmN0aW9uICh0YXBpbnMpIHtcbiAgICAgICAgICAgICAgICB0YXBpbnMudmFsaWRhdGVWaXNpYmlsaXR5ID0gZnVuY3Rpb24gKGlucHV0LCBzdGF0ZSwgb3V0cHV0LCB0cmVlLCBhdmFpbGFibGVTaXplKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC52aXNpYmlsaXR5ICE9PSBtaW5lcnZhLlZpc2liaWxpdHkuVmlzaWJsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5TaXplLmNvcHlUbyhhdmFpbGFibGVTaXplLCBvdXRwdXQucHJldmlvdXNDb25zdHJhaW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkcyA9IG91dHB1dC5kZXNpcmVkU2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRzLndpZHRoID0gZHMuaGVpZ2h0ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSkodGFwaW5zID0gbWVhc3VyZS50YXBpbnMgfHwgKG1lYXN1cmUudGFwaW5zID0ge30pKTtcbiAgICAgICAgfSkobWVhc3VyZSA9IGNvcmUubWVhc3VyZSB8fCAoY29yZS5tZWFzdXJlID0ge30pKTtcbiAgICB9KShjb3JlID0gbWluZXJ2YS5jb3JlIHx8IChtaW5lcnZhLmNvcmUgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb3JlO1xuICAgIChmdW5jdGlvbiAoY29yZSkge1xuICAgICAgICB2YXIgcHJvY2Vzc2Rvd247XG4gICAgICAgIChmdW5jdGlvbiAocHJvY2Vzc2Rvd24pIHtcbiAgICAgICAgICAgIHZhciB0YXBpbnM7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgIHRhcGlucy5jYWxjQWJzb2x1dGVYZm9ybSA9IGZ1bmN0aW9uIChpbnB1dCwgc3RhdGUsIG91dHB1dCwgdnBpbnB1dCwgdHJlZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoKGlucHV0LmRpcnR5RmxhZ3MgJiBtaW5lcnZhLkRpcnR5RmxhZ3MuVHJhbnNmb3JtKSA9PT0gMClcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYXggPSBvdXRwdXQuYWJzb2x1dGVYZm9ybTtcbiAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5tYXQzLmNvcHlUbyhvdXRwdXQucmVuZGVyWGZvcm0sIGF4KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZwaW5wdXQpXG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLm1hdDMuYXBwbHkoYXgsIHZwaW5wdXQuYWJzb2x1dGVYZm9ybSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KSh0YXBpbnMgPSBwcm9jZXNzZG93bi50YXBpbnMgfHwgKHByb2Nlc3Nkb3duLnRhcGlucyA9IHt9KSk7XG4gICAgICAgIH0pKHByb2Nlc3Nkb3duID0gY29yZS5wcm9jZXNzZG93biB8fCAoY29yZS5wcm9jZXNzZG93biA9IHt9KSk7XG4gICAgfSkoY29yZSA9IG1pbmVydmEuY29yZSB8fCAobWluZXJ2YS5jb3JlID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29yZTtcbiAgICAoZnVuY3Rpb24gKGNvcmUpIHtcbiAgICAgICAgdmFyIHByb2Nlc3Nkb3duO1xuICAgICAgICAoZnVuY3Rpb24gKHByb2Nlc3Nkb3duKSB7XG4gICAgICAgICAgICB2YXIgdGFwaW5zO1xuICAgICAgICAgICAgKGZ1bmN0aW9uICh0YXBpbnMpIHtcbiAgICAgICAgICAgICAgICB0YXBpbnMuY2FsY1JlbmRlclhmb3JtID0gZnVuY3Rpb24gKGlucHV0LCBzdGF0ZSwgb3V0cHV0LCB2cGlucHV0LCB0cmVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgoaW5wdXQuZGlydHlGbGFncyAmIG1pbmVydmEuRGlydHlGbGFncy5UcmFuc2Zvcm0pID09PSAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHZhciByeCA9IG91dHB1dC5yZW5kZXJYZm9ybTtcbiAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5tYXQzLmNvcHlUbyhzdGF0ZS5sb2NhbFhmb3JtLCByeCk7XG4gICAgICAgICAgICAgICAgICAgIG1pbmVydmEubWF0My5hcHBseShyeCwgaW5wdXQubGF5b3V0WGZvcm0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQuY2Fycmllclhmb3JtKVxuICAgICAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5tYXQzLmFwcGx5KHJ4LCBpbnB1dC5jYXJyaWVyWGZvcm0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSkodGFwaW5zID0gcHJvY2Vzc2Rvd24udGFwaW5zIHx8IChwcm9jZXNzZG93bi50YXBpbnMgPSB7fSkpO1xuICAgICAgICB9KShwcm9jZXNzZG93biA9IGNvcmUucHJvY2Vzc2Rvd24gfHwgKGNvcmUucHJvY2Vzc2Rvd24gPSB7fSkpO1xuICAgIH0pKGNvcmUgPSBtaW5lcnZhLmNvcmUgfHwgKG1pbmVydmEuY29yZSA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvcmU7XG4gICAgKGZ1bmN0aW9uIChjb3JlKSB7XG4gICAgICAgIHZhciBwcm9jZXNzZG93bjtcbiAgICAgICAgKGZ1bmN0aW9uIChwcm9jZXNzZG93bikge1xuICAgICAgICAgICAgdmFyIHRhcGlucztcbiAgICAgICAgICAgIChmdW5jdGlvbiAodGFwaW5zKSB7XG4gICAgICAgICAgICAgICAgdGFwaW5zLmNhbGNYZm9ybU9yaWdpbiA9IGZ1bmN0aW9uIChpbnB1dCwgc3RhdGUsIG91dHB1dCwgdnBpbnB1dCwgdHJlZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgeG8gPSBzdGF0ZS54Zm9ybU9yaWdpbjtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHVzZXJ4byA9IGlucHV0LnJlbmRlclRyYW5zZm9ybU9yaWdpbjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF1c2VyeG8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHhvLnggPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgeG8ueSA9IDA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB4by54ID0gaW5wdXQuYWN0dWFsV2lkdGggKiB1c2VyeG8ueDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHhvLnkgPSBpbnB1dC5hY3R1YWxIZWlnaHQgKiB1c2VyeG8ueTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSkodGFwaW5zID0gcHJvY2Vzc2Rvd24udGFwaW5zIHx8IChwcm9jZXNzZG93bi50YXBpbnMgPSB7fSkpO1xuICAgICAgICB9KShwcm9jZXNzZG93biA9IGNvcmUucHJvY2Vzc2Rvd24gfHwgKGNvcmUucHJvY2Vzc2Rvd24gPSB7fSkpO1xuICAgIH0pKGNvcmUgPSBtaW5lcnZhLmNvcmUgfHwgKG1pbmVydmEuY29yZSA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvcmU7XG4gICAgKGZ1bmN0aW9uIChjb3JlKSB7XG4gICAgICAgIHZhciBwcm9jZXNzZG93bjtcbiAgICAgICAgKGZ1bmN0aW9uIChwcm9jZXNzZG93bikge1xuICAgICAgICAgICAgdmFyIHRhcGlucztcbiAgICAgICAgICAgIChmdW5jdGlvbiAodGFwaW5zKSB7XG4gICAgICAgICAgICAgICAgdGFwaW5zLnByb2Nlc3NIaXRUZXN0VmlzaWJpbGl0eSA9IGZ1bmN0aW9uIChpbnB1dCwgc3RhdGUsIG91dHB1dCwgdnBpbnB1dCwgdHJlZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoKGlucHV0LmRpcnR5RmxhZ3MgJiBtaW5lcnZhLkRpcnR5RmxhZ3MuSGl0VGVzdFZpc2liaWxpdHkpID09PSAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2cGlucHV0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXQudG90YWxJc0hpdFRlc3RWaXNpYmxlID0gdnBpbnB1dC50b3RhbElzSGl0VGVzdFZpc2libGUgJiYgaW5wdXQuaXNIaXRUZXN0VmlzaWJsZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dC50b3RhbElzSGl0VGVzdFZpc2libGUgPSBpbnB1dC5pc0hpdFRlc3RWaXNpYmxlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvdXRwdXQudG90YWxJc0hpdFRlc3RWaXNpYmxlICE9PSBpbnB1dC50b3RhbElzSGl0VGVzdFZpc2libGUpXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5zdWJ0cmVlRG93bkRpcnR5IHw9IG1pbmVydmEuRGlydHlGbGFncy5IaXRUZXN0VmlzaWJpbGl0eTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pKHRhcGlucyA9IHByb2Nlc3Nkb3duLnRhcGlucyB8fCAocHJvY2Vzc2Rvd24udGFwaW5zID0ge30pKTtcbiAgICAgICAgfSkocHJvY2Vzc2Rvd24gPSBjb3JlLnByb2Nlc3Nkb3duIHx8IChjb3JlLnByb2Nlc3Nkb3duID0ge30pKTtcbiAgICB9KShjb3JlID0gbWluZXJ2YS5jb3JlIHx8IChtaW5lcnZhLmNvcmUgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb3JlO1xuICAgIChmdW5jdGlvbiAoY29yZSkge1xuICAgICAgICB2YXIgcHJvY2Vzc2Rvd247XG4gICAgICAgIChmdW5jdGlvbiAocHJvY2Vzc2Rvd24pIHtcbiAgICAgICAgICAgIHZhciB0YXBpbnM7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgIHRhcGlucy5wcm9jZXNzTGF5b3V0Q2xpcCA9IGZ1bmN0aW9uIChpbnB1dCwgc3RhdGUsIG91dHB1dCwgdnBpbnB1dCwgdHJlZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoKGlucHV0LmRpcnR5RmxhZ3MgJiBtaW5lcnZhLkRpcnR5RmxhZ3MuTGF5b3V0Q2xpcCkgPT09IDApXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxjID0gaW5wdXQubGF5b3V0Q2xpcDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNsYyA9IG91dHB1dC5jb21wb3NpdGVMYXlvdXRDbGlwO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXZwaW5wdXQgfHwgbWluZXJ2YS5SZWN0LmlzRW1wdHkodnBpbnB1dC5jb21wb3NpdGVMYXlvdXRDbGlwKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5SZWN0LmNvcHlUbyhsYywgY2xjKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbmVydmEuUmVjdC5jb3B5VG8odnBpbnB1dC5jb21wb3NpdGVMYXlvdXRDbGlwLCBjbGMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFtaW5lcnZhLlJlY3QuaXNFbXB0eShsYykpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5SZWN0LmludGVyc2VjdGlvbihjbGMsIGxjKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoIW1pbmVydmEuUmVjdC5pc0VxdWFsKGlucHV0LmNvbXBvc2l0ZUxheW91dENsaXAsIG91dHB1dC5jb21wb3NpdGVMYXlvdXRDbGlwKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuc3VidHJlZURvd25EaXJ0eSB8PSBtaW5lcnZhLkRpcnR5RmxhZ3MuTGF5b3V0Q2xpcDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSkodGFwaW5zID0gcHJvY2Vzc2Rvd24udGFwaW5zIHx8IChwcm9jZXNzZG93bi50YXBpbnMgPSB7fSkpO1xuICAgICAgICB9KShwcm9jZXNzZG93biA9IGNvcmUucHJvY2Vzc2Rvd24gfHwgKGNvcmUucHJvY2Vzc2Rvd24gPSB7fSkpO1xuICAgIH0pKGNvcmUgPSBtaW5lcnZhLmNvcmUgfHwgKG1pbmVydmEuY29yZSA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvcmU7XG4gICAgKGZ1bmN0aW9uIChjb3JlKSB7XG4gICAgICAgIHZhciBwcm9jZXNzZG93bjtcbiAgICAgICAgKGZ1bmN0aW9uIChwcm9jZXNzZG93bikge1xuICAgICAgICAgICAgdmFyIHRhcGlucztcbiAgICAgICAgICAgIChmdW5jdGlvbiAodGFwaW5zKSB7XG4gICAgICAgICAgICAgICAgdGFwaW5zLnByb2Nlc3NMb2NhbFhmb3JtID0gZnVuY3Rpb24gKGlucHV0LCBzdGF0ZSwgb3V0cHV0LCB2cGlucHV0LCB0cmVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgoaW5wdXQuZGlydHlGbGFncyAmIG1pbmVydmEuRGlydHlGbGFncy5Mb2NhbFRyYW5zZm9ybSkgPT09IDApXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxvY2FsID0gbWluZXJ2YS5tYXQzLmlkZW50aXR5KHN0YXRlLmxvY2FsWGZvcm0pO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVuZGVyID0gaW5wdXQucmVuZGVyVHJhbnNmb3JtO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXJlbmRlcilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB2YXIgb3JpZ2luID0gc3RhdGUueGZvcm1PcmlnaW47XG4gICAgICAgICAgICAgICAgICAgIG1pbmVydmEubWF0My50cmFuc2xhdGUobG9jYWwsIC1vcmlnaW4ueCwgLW9yaWdpbi55KTtcbiAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5tYXQzLmFwcGx5KGxvY2FsLCByZW5kZXIuZ2V0UmF3KCkpO1xuICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLm1hdDMudHJhbnNsYXRlKGxvY2FsLCBvcmlnaW4ueCwgb3JpZ2luLnkpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSkodGFwaW5zID0gcHJvY2Vzc2Rvd24udGFwaW5zIHx8IChwcm9jZXNzZG93bi50YXBpbnMgPSB7fSkpO1xuICAgICAgICB9KShwcm9jZXNzZG93biA9IGNvcmUucHJvY2Vzc2Rvd24gfHwgKGNvcmUucHJvY2Vzc2Rvd24gPSB7fSkpO1xuICAgIH0pKGNvcmUgPSBtaW5lcnZhLmNvcmUgfHwgKG1pbmVydmEuY29yZSA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvcmU7XG4gICAgKGZ1bmN0aW9uIChjb3JlKSB7XG4gICAgICAgIHZhciBwcm9jZXNzZG93bjtcbiAgICAgICAgKGZ1bmN0aW9uIChwcm9jZXNzZG93bikge1xuICAgICAgICAgICAgdmFyIHRhcGlucztcbiAgICAgICAgICAgIChmdW5jdGlvbiAodGFwaW5zKSB7XG4gICAgICAgICAgICAgICAgdGFwaW5zLnByb2Nlc3NSZW5kZXJWaXNpYmlsaXR5ID0gZnVuY3Rpb24gKGlucHV0LCBzdGF0ZSwgb3V0cHV0LCB2cGlucHV0LCB0cmVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgoaW5wdXQuZGlydHlGbGFncyAmIG1pbmVydmEuRGlydHlGbGFncy5SZW5kZXJWaXNpYmlsaXR5KSA9PT0gMClcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBvdXRwdXQuZGlydHlGbGFncyB8PSBtaW5lcnZhLkRpcnR5RmxhZ3MuQm91bmRzO1xuICAgICAgICAgICAgICAgICAgICBpZiAodnBpbnB1dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0LnRvdGFsT3BhY2l0eSA9IHZwaW5wdXQudG90YWxPcGFjaXR5ICogaW5wdXQub3BhY2l0eTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dC50b3RhbElzUmVuZGVyVmlzaWJsZSA9IHZwaW5wdXQudG90YWxJc1JlbmRlclZpc2libGUgJiYgKGlucHV0LnZpc2liaWxpdHkgPT09IG1pbmVydmEuVmlzaWJpbGl0eS5WaXNpYmxlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dC50b3RhbE9wYWNpdHkgPSBpbnB1dC5vcGFjaXR5O1xuICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0LnRvdGFsSXNSZW5kZXJWaXNpYmxlID0gaW5wdXQudmlzaWJpbGl0eSA9PT0gbWluZXJ2YS5WaXNpYmlsaXR5LlZpc2libGU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LnRvdGFsSXNSZW5kZXJWaXNpYmxlICE9PSBvdXRwdXQudG90YWxJc1JlbmRlclZpc2libGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dC5kaXJ0eUZsYWdzIHw9IG1pbmVydmEuRGlydHlGbGFncy5OZXdCb3VuZHM7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5zdWJ0cmVlRG93bkRpcnR5IHw9IG1pbmVydmEuRGlydHlGbGFncy5SZW5kZXJWaXNpYmlsaXR5O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC50b3RhbE9wYWNpdHkgIT09IG91dHB1dC50b3RhbE9wYWNpdHkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLnN1YnRyZWVEb3duRGlydHkgfD0gbWluZXJ2YS5EaXJ0eUZsYWdzLlJlbmRlclZpc2liaWxpdHk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pKHRhcGlucyA9IHByb2Nlc3Nkb3duLnRhcGlucyB8fCAocHJvY2Vzc2Rvd24udGFwaW5zID0ge30pKTtcbiAgICAgICAgfSkocHJvY2Vzc2Rvd24gPSBjb3JlLnByb2Nlc3Nkb3duIHx8IChjb3JlLnByb2Nlc3Nkb3duID0ge30pKTtcbiAgICB9KShjb3JlID0gbWluZXJ2YS5jb3JlIHx8IChtaW5lcnZhLmNvcmUgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb3JlO1xuICAgIChmdW5jdGlvbiAoY29yZSkge1xuICAgICAgICB2YXIgcHJvY2Vzc2Rvd247XG4gICAgICAgIChmdW5jdGlvbiAocHJvY2Vzc2Rvd24pIHtcbiAgICAgICAgICAgIHZhciB0YXBpbnM7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgIHRhcGlucy5wcm9jZXNzWGZvcm0gPSBmdW5jdGlvbiAoaW5wdXQsIHN0YXRlLCBvdXRwdXQsIHZwaW5wdXQsIHRyZWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKChpbnB1dC5kaXJ0eUZsYWdzICYgbWluZXJ2YS5EaXJ0eUZsYWdzLlRyYW5zZm9ybSkgPT09IDApXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFtaW5lcnZhLm1hdDMuZXF1YWwoaW5wdXQucmVuZGVyWGZvcm0sIG91dHB1dC5yZW5kZXJYZm9ybSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dC5kaXJ0eUZsYWdzIHw9IG1pbmVydmEuRGlydHlGbGFncy5OZXdCb3VuZHM7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5zdWJ0cmVlRG93bkRpcnR5IHw9IG1pbmVydmEuRGlydHlGbGFncy5UcmFuc2Zvcm07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoIW1pbmVydmEubWF0My5lcXVhbChpbnB1dC5hYnNvbHV0ZVhmb3JtLCBvdXRwdXQuYWJzb2x1dGVYZm9ybSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLnN1YnRyZWVEb3duRGlydHkgfD0gbWluZXJ2YS5EaXJ0eUZsYWdzLlRyYW5zZm9ybTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQuZGlydHlGbGFncyB8PSBtaW5lcnZhLkRpcnR5RmxhZ3MuQm91bmRzO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSkodGFwaW5zID0gcHJvY2Vzc2Rvd24udGFwaW5zIHx8IChwcm9jZXNzZG93bi50YXBpbnMgPSB7fSkpO1xuICAgICAgICB9KShwcm9jZXNzZG93biA9IGNvcmUucHJvY2Vzc2Rvd24gfHwgKGNvcmUucHJvY2Vzc2Rvd24gPSB7fSkpO1xuICAgIH0pKGNvcmUgPSBtaW5lcnZhLmNvcmUgfHwgKG1pbmVydmEuY29yZSA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvcmU7XG4gICAgKGZ1bmN0aW9uIChjb3JlKSB7XG4gICAgICAgIHZhciBwcm9jZXNzZG93bjtcbiAgICAgICAgKGZ1bmN0aW9uIChwcm9jZXNzZG93bikge1xuICAgICAgICAgICAgdmFyIHRhcGlucztcbiAgICAgICAgICAgIChmdW5jdGlvbiAodGFwaW5zKSB7XG4gICAgICAgICAgICAgICAgdGFwaW5zLnByb3BhZ2F0ZURpcnR5VG9DaGlsZHJlbiA9IGZ1bmN0aW9uIChpbnB1dCwgc3RhdGUsIG91dHB1dCwgdnBpbnB1dCwgdHJlZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbmV3RG93bkRpcnR5ID0gc3RhdGUuc3VidHJlZURvd25EaXJ0eSAmIG1pbmVydmEuRGlydHlGbGFncy5Qcm9wYWdhdGVEb3duO1xuICAgICAgICAgICAgICAgICAgICBpZiAobmV3RG93bkRpcnR5ID09PSAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHdhbGtlciA9IHRyZWUud2FsaygpOyB3YWxrZXIuc3RlcCgpOykge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2Fsa2VyLmN1cnJlbnQuYXNzZXRzLmRpcnR5RmxhZ3MgfD0gbmV3RG93bkRpcnR5O1xuICAgICAgICAgICAgICAgICAgICAgICAgY29yZS5VcGRhdGVyLiQkYWRkRG93bkRpcnR5KHdhbGtlci5jdXJyZW50KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSkodGFwaW5zID0gcHJvY2Vzc2Rvd24udGFwaW5zIHx8IChwcm9jZXNzZG93bi50YXBpbnMgPSB7fSkpO1xuICAgICAgICB9KShwcm9jZXNzZG93biA9IGNvcmUucHJvY2Vzc2Rvd24gfHwgKGNvcmUucHJvY2Vzc2Rvd24gPSB7fSkpO1xuICAgIH0pKGNvcmUgPSBtaW5lcnZhLmNvcmUgfHwgKG1pbmVydmEuY29yZSA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvcmU7XG4gICAgKGZ1bmN0aW9uIChjb3JlKSB7XG4gICAgICAgIHZhciBwcm9jZXNzdXA7XG4gICAgICAgIChmdW5jdGlvbiAocHJvY2Vzc3VwKSB7XG4gICAgICAgICAgICB2YXIgdGFwaW5zO1xuICAgICAgICAgICAgKGZ1bmN0aW9uICh0YXBpbnMpIHtcbiAgICAgICAgICAgICAgICB0YXBpbnMuY2FsY0FjdHVhbFNpemUgPSBmdW5jdGlvbiAoaW5wdXQsIHN0YXRlLCBvdXRwdXQsIHRyZWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKChpbnB1dC5kaXJ0eUZsYWdzICYgbWluZXJ2YS5EaXJ0eUZsYWdzLkJvdW5kcykgPT09IDApXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFjdHVhbCA9IHN0YXRlLmFjdHVhbFNpemU7XG4gICAgICAgICAgICAgICAgICAgIGFjdHVhbC53aWR0aCA9IGlucHV0LmFjdHVhbFdpZHRoO1xuICAgICAgICAgICAgICAgICAgICBhY3R1YWwuaGVpZ2h0ID0gaW5wdXQuYWN0dWFsSGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICBjb3JlLmhlbHBlcnMuY29lcmNlU2l6ZShhY3R1YWwsIGlucHV0KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzTmFOKGFjdHVhbC53aWR0aCkpXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3R1YWwud2lkdGggPSAwO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNOYU4oYWN0dWFsLmhlaWdodCkpXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3R1YWwuaGVpZ2h0ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pKHRhcGlucyA9IHByb2Nlc3N1cC50YXBpbnMgfHwgKHByb2Nlc3N1cC50YXBpbnMgPSB7fSkpO1xuICAgICAgICB9KShwcm9jZXNzdXAgPSBjb3JlLnByb2Nlc3N1cCB8fCAoY29yZS5wcm9jZXNzdXAgPSB7fSkpO1xuICAgIH0pKGNvcmUgPSBtaW5lcnZhLmNvcmUgfHwgKG1pbmVydmEuY29yZSA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvcmU7XG4gICAgKGZ1bmN0aW9uIChjb3JlKSB7XG4gICAgICAgIHZhciBwcm9jZXNzdXA7XG4gICAgICAgIChmdW5jdGlvbiAocHJvY2Vzc3VwKSB7XG4gICAgICAgICAgICB2YXIgdGFwaW5zO1xuICAgICAgICAgICAgKGZ1bmN0aW9uICh0YXBpbnMpIHtcbiAgICAgICAgICAgICAgICB0YXBpbnMuY2FsY0V4dGVudHMgPSBmdW5jdGlvbiAoaW5wdXQsIHN0YXRlLCBvdXRwdXQsIHRyZWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKChpbnB1dC5kaXJ0eUZsYWdzICYgbWluZXJ2YS5EaXJ0eUZsYWdzLkJvdW5kcykgPT09IDApXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSBvdXRwdXQuZXh0ZW50cztcbiAgICAgICAgICAgICAgICAgICAgdmFyIGV3YyA9IG91dHB1dC5leHRlbnRzV2l0aENoaWxkcmVuO1xuICAgICAgICAgICAgICAgICAgICBlLnggPSBld2MueCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGUueSA9IGV3Yy55ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFzID0gc3RhdGUuYWN0dWFsU2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgZS53aWR0aCA9IGV3Yy53aWR0aCA9IGFzLndpZHRoO1xuICAgICAgICAgICAgICAgICAgICBlLmhlaWdodCA9IGV3Yy5oZWlnaHQgPSBhcy5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhc3NldHM7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHdhbGtlciA9IHRyZWUud2FsaygpOyB3YWxrZXIuc3RlcCgpOykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXNzZXRzID0gd2Fsa2VyLmN1cnJlbnQuYXNzZXRzO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFzc2V0cy50b3RhbElzUmVuZGVyVmlzaWJsZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLlJlY3QudW5pb24oZXdjLCBhc3NldHMuZ2xvYmFsQm91bmRzV2l0aENoaWxkcmVuKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSkodGFwaW5zID0gcHJvY2Vzc3VwLnRhcGlucyB8fCAocHJvY2Vzc3VwLnRhcGlucyA9IHt9KSk7XG4gICAgICAgIH0pKHByb2Nlc3N1cCA9IGNvcmUucHJvY2Vzc3VwIHx8IChjb3JlLnByb2Nlc3N1cCA9IHt9KSk7XG4gICAgfSkoY29yZSA9IG1pbmVydmEuY29yZSB8fCAobWluZXJ2YS5jb3JlID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29yZTtcbiAgICAoZnVuY3Rpb24gKGNvcmUpIHtcbiAgICAgICAgdmFyIHByb2Nlc3N1cDtcbiAgICAgICAgKGZ1bmN0aW9uIChwcm9jZXNzdXApIHtcbiAgICAgICAgICAgIHZhciB0YXBpbnM7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgIHRhcGlucy5jYWxjUGFpbnRCb3VuZHMgPSBmdW5jdGlvbiAoaW5wdXQsIHN0YXRlLCBvdXRwdXQsIHRyZWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKChpbnB1dC5kaXJ0eUZsYWdzICYgbWluZXJ2YS5EaXJ0eUZsYWdzLkJvdW5kcykgPT09IDApXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgY29yZS5oZWxwZXJzLmludGVyc2VjdEJvdW5kc1dpdGhDbGlwUGF0aChvdXRwdXQuZ2xvYmFsQm91bmRzV2l0aENoaWxkcmVuLCBvdXRwdXQuZXh0ZW50c1dpdGhDaGlsZHJlbiwgaW5wdXQuZWZmZWN0UGFkZGluZywgaW5wdXQucmVuZGVyWGZvcm0sIGlucHV0LmNsaXAsIGlucHV0LmxheW91dENsaXApO1xuICAgICAgICAgICAgICAgICAgICBjb3JlLmhlbHBlcnMuaW50ZXJzZWN0Qm91bmRzV2l0aENsaXBQYXRoKG91dHB1dC5zdXJmYWNlQm91bmRzV2l0aENoaWxkcmVuLCBvdXRwdXQuZXh0ZW50c1dpdGhDaGlsZHJlbiwgaW5wdXQuZWZmZWN0UGFkZGluZywgaW5wdXQuYWJzb2x1dGVYZm9ybSwgaW5wdXQuY2xpcCwgaW5wdXQubGF5b3V0Q2xpcCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KSh0YXBpbnMgPSBwcm9jZXNzdXAudGFwaW5zIHx8IChwcm9jZXNzdXAudGFwaW5zID0ge30pKTtcbiAgICAgICAgfSkocHJvY2Vzc3VwID0gY29yZS5wcm9jZXNzdXAgfHwgKGNvcmUucHJvY2Vzc3VwID0ge30pKTtcbiAgICB9KShjb3JlID0gbWluZXJ2YS5jb3JlIHx8IChtaW5lcnZhLmNvcmUgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb3JlO1xuICAgIChmdW5jdGlvbiAoY29yZSkge1xuICAgICAgICB2YXIgcHJvY2Vzc3VwO1xuICAgICAgICAoZnVuY3Rpb24gKHByb2Nlc3N1cCkge1xuICAgICAgICAgICAgdmFyIHRhcGlucztcbiAgICAgICAgICAgIChmdW5jdGlvbiAodGFwaW5zKSB7XG4gICAgICAgICAgICAgICAgdGFwaW5zLnByb2Nlc3NCb3VuZHMgPSBmdW5jdGlvbiAoaW5wdXQsIHN0YXRlLCBvdXRwdXQsIHRyZWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKChpbnB1dC5kaXJ0eUZsYWdzICYgbWluZXJ2YS5EaXJ0eUZsYWdzLkJvdW5kcykgPT09IDApXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUuaGFzTmV3Qm91bmRzID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGlmICghbWluZXJ2YS5SZWN0LmlzRXF1YWwoaW5wdXQuZ2xvYmFsQm91bmRzV2l0aENoaWxkcmVuLCBvdXRwdXQuZ2xvYmFsQm91bmRzV2l0aENoaWxkcmVuKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZvID0gdHJlZS52aXN1YWxPd25lcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZvLnVwZGF0ZUJvdW5kcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdm8uaW52YWxpZGF0ZShpbnB1dC5zdXJmYWNlQm91bmRzV2l0aENoaWxkcmVuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLmhhc05ld0JvdW5kcyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoIW1pbmVydmEuUmVjdC5pc0VxdWFsKGlucHV0LmV4dGVudHNXaXRoQ2hpbGRyZW4sIG91dHB1dC5leHRlbnRzV2l0aENoaWxkcmVuKSB8fCBpbnB1dC5mb3JjZUludmFsaWRhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLmhhc05ld0JvdW5kcyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0LmZvcmNlSW52YWxpZGF0ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSkodGFwaW5zID0gcHJvY2Vzc3VwLnRhcGlucyB8fCAocHJvY2Vzc3VwLnRhcGlucyA9IHt9KSk7XG4gICAgICAgIH0pKHByb2Nlc3N1cCA9IGNvcmUucHJvY2Vzc3VwIHx8IChjb3JlLnByb2Nlc3N1cCA9IHt9KSk7XG4gICAgfSkoY29yZSA9IG1pbmVydmEuY29yZSB8fCAobWluZXJ2YS5jb3JlID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29yZTtcbiAgICAoZnVuY3Rpb24gKGNvcmUpIHtcbiAgICAgICAgdmFyIHByb2Nlc3N1cDtcbiAgICAgICAgKGZ1bmN0aW9uIChwcm9jZXNzdXApIHtcbiAgICAgICAgICAgIHZhciB0YXBpbnM7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgIHRhcGlucy5wcm9jZXNzSW52YWxpZGF0ZSA9IGZ1bmN0aW9uIChpbnB1dCwgc3RhdGUsIG91dHB1dCwgdHJlZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoKGlucHV0LmRpcnR5RmxhZ3MgJiBtaW5lcnZhLkRpcnR5RmxhZ3MuSW52YWxpZGF0ZSkgPT09IDAgJiYgIXN0YXRlLmhhc0ludmFsaWRhdGUpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRpcnR5ID0gb3V0cHV0LmRpcnR5UmVnaW9uO1xuICAgICAgICAgICAgICAgICAgICB0cmVlLnZpc3VhbE93bmVyLmludmFsaWRhdGUoZGlydHkpO1xuICAgICAgICAgICAgICAgICAgICBkaXJ0eS54ID0gZGlydHkueSA9IGRpcnR5LndpZHRoID0gZGlydHkuaGVpZ2h0ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pKHRhcGlucyA9IHByb2Nlc3N1cC50YXBpbnMgfHwgKHByb2Nlc3N1cC50YXBpbnMgPSB7fSkpO1xuICAgICAgICB9KShwcm9jZXNzdXAgPSBjb3JlLnByb2Nlc3N1cCB8fCAoY29yZS5wcm9jZXNzdXAgPSB7fSkpO1xuICAgIH0pKGNvcmUgPSBtaW5lcnZhLmNvcmUgfHwgKG1pbmVydmEuY29yZSA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvcmU7XG4gICAgKGZ1bmN0aW9uIChjb3JlKSB7XG4gICAgICAgIHZhciBwcm9jZXNzdXA7XG4gICAgICAgIChmdW5jdGlvbiAocHJvY2Vzc3VwKSB7XG4gICAgICAgICAgICB2YXIgdGFwaW5zO1xuICAgICAgICAgICAgKGZ1bmN0aW9uICh0YXBpbnMpIHtcbiAgICAgICAgICAgICAgICB0YXBpbnMucHJvY2Vzc05ld0JvdW5kcyA9IGZ1bmN0aW9uIChpbnB1dCwgc3RhdGUsIG91dHB1dCwgdHJlZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoKGlucHV0LmRpcnR5RmxhZ3MgJiBtaW5lcnZhLkRpcnR5RmxhZ3MuTmV3Qm91bmRzKSA9PT0gMCAmJiAhc3RhdGUuaGFzTmV3Qm91bmRzKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dC5kaXJ0eUZsYWdzIHw9IG1pbmVydmEuRGlydHlGbGFncy5JbnZhbGlkYXRlO1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5oYXNJbnZhbGlkYXRlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5SZWN0LnVuaW9uKG91dHB1dC5kaXJ0eVJlZ2lvbiwgb3V0cHV0LnN1cmZhY2VCb3VuZHNXaXRoQ2hpbGRyZW4pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSkodGFwaW5zID0gcHJvY2Vzc3VwLnRhcGlucyB8fCAocHJvY2Vzc3VwLnRhcGlucyA9IHt9KSk7XG4gICAgICAgIH0pKHByb2Nlc3N1cCA9IGNvcmUucHJvY2Vzc3VwIHx8IChjb3JlLnByb2Nlc3N1cCA9IHt9KSk7XG4gICAgfSkoY29yZSA9IG1pbmVydmEuY29yZSB8fCAobWluZXJ2YS5jb3JlID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29yZTtcbiAgICAoZnVuY3Rpb24gKGNvcmUpIHtcbiAgICAgICAgdmFyIHJlbmRlcjtcbiAgICAgICAgKGZ1bmN0aW9uIChyZW5kZXIpIHtcbiAgICAgICAgICAgIHZhciB0YXBpbnM7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgIHRhcGlucy5hcHBseUNsaXAgPSBmdW5jdGlvbiAoaW5wdXQsIHN0YXRlLCBvdXRwdXQsIGN0eCwgcmVnaW9uLCB0cmVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjbGlwID0gaW5wdXQuY2xpcDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNsaXApXG4gICAgICAgICAgICAgICAgICAgICAgICBjdHguY2xpcEdlb21ldHJ5KGNsaXApO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSkodGFwaW5zID0gcmVuZGVyLnRhcGlucyB8fCAocmVuZGVyLnRhcGlucyA9IHt9KSk7XG4gICAgICAgIH0pKHJlbmRlciA9IGNvcmUucmVuZGVyIHx8IChjb3JlLnJlbmRlciA9IHt9KSk7XG4gICAgfSkoY29yZSA9IG1pbmVydmEuY29yZSB8fCAobWluZXJ2YS5jb3JlID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29yZTtcbiAgICAoZnVuY3Rpb24gKGNvcmUpIHtcbiAgICAgICAgdmFyIHJlbmRlcjtcbiAgICAgICAgKGZ1bmN0aW9uIChyZW5kZXIpIHtcbiAgICAgICAgICAgIHZhciB0YXBpbnM7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgIHRhcGlucy5kb1JlbmRlciA9IGZ1bmN0aW9uIChpbnB1dCwgc3RhdGUsIG91dHB1dCwgY3R4LCByZWdpb24sIHRyZWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pKHRhcGlucyA9IHJlbmRlci50YXBpbnMgfHwgKHJlbmRlci50YXBpbnMgPSB7fSkpO1xuICAgICAgICB9KShyZW5kZXIgPSBjb3JlLnJlbmRlciB8fCAoY29yZS5yZW5kZXIgPSB7fSkpO1xuICAgIH0pKGNvcmUgPSBtaW5lcnZhLmNvcmUgfHwgKG1pbmVydmEuY29yZSA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvcmU7XG4gICAgKGZ1bmN0aW9uIChjb3JlKSB7XG4gICAgICAgIHZhciByZW5kZXI7XG4gICAgICAgIChmdW5jdGlvbiAocmVuZGVyKSB7XG4gICAgICAgICAgICB2YXIgdGFwaW5zO1xuICAgICAgICAgICAgKGZ1bmN0aW9uICh0YXBpbnMpIHtcbiAgICAgICAgICAgICAgICB0YXBpbnMucG9zdFJlbmRlciA9IGZ1bmN0aW9uIChpbnB1dCwgc3RhdGUsIG91dHB1dCwgY3R4LCByZWdpb24sIHRyZWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVmZmVjdCA9IGlucHV0LmVmZmVjdDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFlZmZlY3QpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgZWZmZWN0LlBvc3RSZW5kZXIoY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pKHRhcGlucyA9IHJlbmRlci50YXBpbnMgfHwgKHJlbmRlci50YXBpbnMgPSB7fSkpO1xuICAgICAgICB9KShyZW5kZXIgPSBjb3JlLnJlbmRlciB8fCAoY29yZS5yZW5kZXIgPSB7fSkpO1xuICAgIH0pKGNvcmUgPSBtaW5lcnZhLmNvcmUgfHwgKG1pbmVydmEuY29yZSA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvcmU7XG4gICAgKGZ1bmN0aW9uIChjb3JlKSB7XG4gICAgICAgIHZhciByZW5kZXI7XG4gICAgICAgIChmdW5jdGlvbiAocmVuZGVyKSB7XG4gICAgICAgICAgICB2YXIgdGFwaW5zO1xuICAgICAgICAgICAgKGZ1bmN0aW9uICh0YXBpbnMpIHtcbiAgICAgICAgICAgICAgICB0YXBpbnMucHJlcGFyZUNvbnRleHQgPSBmdW5jdGlvbiAoaW5wdXQsIHN0YXRlLCBvdXRwdXQsIGN0eCwgcmVnaW9uLCB0cmVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5wcmVhcHBseShpbnB1dC5yZW5kZXJYZm9ybSk7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5yYXcuZ2xvYmFsQWxwaGEgPSBpbnB1dC50b3RhbE9wYWNpdHk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KSh0YXBpbnMgPSByZW5kZXIudGFwaW5zIHx8IChyZW5kZXIudGFwaW5zID0ge30pKTtcbiAgICAgICAgfSkocmVuZGVyID0gY29yZS5yZW5kZXIgfHwgKGNvcmUucmVuZGVyID0ge30pKTtcbiAgICB9KShjb3JlID0gbWluZXJ2YS5jb3JlIHx8IChtaW5lcnZhLmNvcmUgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb3JlO1xuICAgIChmdW5jdGlvbiAoY29yZSkge1xuICAgICAgICB2YXIgcmVuZGVyO1xuICAgICAgICAoZnVuY3Rpb24gKHJlbmRlcikge1xuICAgICAgICAgICAgdmFyIHRhcGlucztcbiAgICAgICAgICAgIChmdW5jdGlvbiAodGFwaW5zKSB7XG4gICAgICAgICAgICAgICAgdGFwaW5zLnByZVJlbmRlciA9IGZ1bmN0aW9uIChpbnB1dCwgc3RhdGUsIG91dHB1dCwgY3R4LCByZWdpb24sIHRyZWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVmZmVjdCA9IGlucHV0LmVmZmVjdDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFlZmZlY3QpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgZWZmZWN0LlByZVJlbmRlcihjdHgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSkodGFwaW5zID0gcmVuZGVyLnRhcGlucyB8fCAocmVuZGVyLnRhcGlucyA9IHt9KSk7XG4gICAgICAgIH0pKHJlbmRlciA9IGNvcmUucmVuZGVyIHx8IChjb3JlLnJlbmRlciA9IHt9KSk7XG4gICAgfSkoY29yZSA9IG1pbmVydmEuY29yZSB8fCAobWluZXJ2YS5jb3JlID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29yZTtcbiAgICAoZnVuY3Rpb24gKGNvcmUpIHtcbiAgICAgICAgdmFyIHJlbmRlcjtcbiAgICAgICAgKGZ1bmN0aW9uIChyZW5kZXIpIHtcbiAgICAgICAgICAgIHZhciB0YXBpbnM7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgIHRhcGlucy5yZW5kZXJDaGlsZHJlbiA9IGZ1bmN0aW9uIChpbnB1dCwgc3RhdGUsIG91dHB1dCwgY3R4LCByZWdpb24sIHRyZWUpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgd2Fsa2VyID0gdHJlZS53YWxrKG1pbmVydmEuV2Fsa0RpcmVjdGlvbi5aRm9yd2FyZCk7IHdhbGtlci5zdGVwKCk7KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3YWxrZXIuY3VycmVudC5yZW5kZXIoY3R4LCBzdGF0ZS5yZW5kZXJSZWdpb24pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KSh0YXBpbnMgPSByZW5kZXIudGFwaW5zIHx8IChyZW5kZXIudGFwaW5zID0ge30pKTtcbiAgICAgICAgfSkocmVuZGVyID0gY29yZS5yZW5kZXIgfHwgKGNvcmUucmVuZGVyID0ge30pKTtcbiAgICB9KShjb3JlID0gbWluZXJ2YS5jb3JlIHx8IChtaW5lcnZhLmNvcmUgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb3JlO1xuICAgIChmdW5jdGlvbiAoY29yZSkge1xuICAgICAgICB2YXIgcmVuZGVyO1xuICAgICAgICAoZnVuY3Rpb24gKHJlbmRlcikge1xuICAgICAgICAgICAgdmFyIHRhcGlucztcbiAgICAgICAgICAgIChmdW5jdGlvbiAodGFwaW5zKSB7XG4gICAgICAgICAgICAgICAgdGFwaW5zLnJlc3RvcmVDb250ZXh0ID0gZnVuY3Rpb24gKGlucHV0LCBzdGF0ZSwgb3V0cHV0LCBjdHgsIHJlZ2lvbiwgdHJlZSkge1xuICAgICAgICAgICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSkodGFwaW5zID0gcmVuZGVyLnRhcGlucyB8fCAocmVuZGVyLnRhcGlucyA9IHt9KSk7XG4gICAgICAgIH0pKHJlbmRlciA9IGNvcmUucmVuZGVyIHx8IChjb3JlLnJlbmRlciA9IHt9KSk7XG4gICAgfSkoY29yZSA9IG1pbmVydmEuY29yZSB8fCAobWluZXJ2YS5jb3JlID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29yZTtcbiAgICAoZnVuY3Rpb24gKGNvcmUpIHtcbiAgICAgICAgdmFyIHJlbmRlcjtcbiAgICAgICAgKGZ1bmN0aW9uIChyZW5kZXIpIHtcbiAgICAgICAgICAgIHZhciB0YXBpbnM7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgIHRhcGlucy52YWxpZGF0ZSA9IGZ1bmN0aW9uIChpbnB1dCwgc3RhdGUsIG91dHB1dCwgY3R4LCByZWdpb24sIHRyZWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICEhaW5wdXQudG90YWxJc1JlbmRlclZpc2libGVcbiAgICAgICAgICAgICAgICAgICAgICAgICYmICgoaW5wdXQudG90YWxPcGFjaXR5ICogMjU1KSA+PSAwLjUpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KSh0YXBpbnMgPSByZW5kZXIudGFwaW5zIHx8IChyZW5kZXIudGFwaW5zID0ge30pKTtcbiAgICAgICAgfSkocmVuZGVyID0gY29yZS5yZW5kZXIgfHwgKGNvcmUucmVuZGVyID0ge30pKTtcbiAgICB9KShjb3JlID0gbWluZXJ2YS5jb3JlIHx8IChtaW5lcnZhLmNvcmUgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb3JlO1xuICAgIChmdW5jdGlvbiAoY29yZSkge1xuICAgICAgICB2YXIgcmVuZGVyO1xuICAgICAgICAoZnVuY3Rpb24gKHJlbmRlcikge1xuICAgICAgICAgICAgdmFyIHRhcGlucztcbiAgICAgICAgICAgIChmdW5jdGlvbiAodGFwaW5zKSB7XG4gICAgICAgICAgICAgICAgdGFwaW5zLnZhbGlkYXRlUmVnaW9uID0gZnVuY3Rpb24gKGlucHV0LCBzdGF0ZSwgb3V0cHV0LCBjdHgsIHJlZ2lvbiwgdHJlZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgciA9IHN0YXRlLnJlbmRlclJlZ2lvbjtcbiAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5SZWN0LmNvcHlUbyhpbnB1dC5zdXJmYWNlQm91bmRzV2l0aENoaWxkcmVuLCByKTtcbiAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5SZWN0LnJvdW5kT3V0KHIpO1xuICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLlJlY3QuaW50ZXJzZWN0aW9uKHIsIHJlZ2lvbik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByLndpZHRoID4gMCAmJiByLmhlaWdodCA+IDA7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pKHRhcGlucyA9IHJlbmRlci50YXBpbnMgfHwgKHJlbmRlci50YXBpbnMgPSB7fSkpO1xuICAgICAgICB9KShyZW5kZXIgPSBjb3JlLnJlbmRlciB8fCAoY29yZS5yZW5kZXIgPSB7fSkpO1xuICAgIH0pKGNvcmUgPSBtaW5lcnZhLmNvcmUgfHwgKG1pbmVydmEuY29yZSA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvcmU7XG4gICAgKGZ1bmN0aW9uIChjb3JlKSB7XG4gICAgICAgIHZhciBzaXppbmc7XG4gICAgICAgIChmdW5jdGlvbiAoc2l6aW5nKSB7XG4gICAgICAgICAgICB2YXIgdGFwaW5zO1xuICAgICAgICAgICAgKGZ1bmN0aW9uICh0YXBpbnMpIHtcbiAgICAgICAgICAgICAgICB0YXBpbnMuY2FsY1VzZVJlbmRlciA9IGZ1bmN0aW9uIChpbnB1dCwgc3RhdGUsIG91dHB1dCwgdHJlZSkge1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZS51c2VSZW5kZXIgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSkodGFwaW5zID0gc2l6aW5nLnRhcGlucyB8fCAoc2l6aW5nLnRhcGlucyA9IHt9KSk7XG4gICAgICAgIH0pKHNpemluZyA9IGNvcmUuc2l6aW5nIHx8IChjb3JlLnNpemluZyA9IHt9KSk7XG4gICAgfSkoY29yZSA9IG1pbmVydmEuY29yZSB8fCAobWluZXJ2YS5jb3JlID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29yZTtcbiAgICAoZnVuY3Rpb24gKGNvcmUpIHtcbiAgICAgICAgdmFyIHNpemluZztcbiAgICAgICAgKGZ1bmN0aW9uIChzaXppbmcpIHtcbiAgICAgICAgICAgIHZhciB0YXBpbnM7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgIHRhcGlucy5jb21wdXRlQWN0dWFsID0gZnVuY3Rpb24gKGlucHV0LCBzdGF0ZSwgb3V0cHV0LCB0cmVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhcyA9IG91dHB1dC5hY3R1YWxTaXplO1xuICAgICAgICAgICAgICAgICAgICBhcy53aWR0aCA9IGFzLmhlaWdodCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC52aXNpYmlsaXR5ICE9PSBtaW5lcnZhLlZpc2liaWxpdHkuVmlzaWJsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlLnVzZVJlbmRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5TaXplLmNvcHlUbyhpbnB1dC5yZW5kZXJTaXplLCBhcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb3JlLmhlbHBlcnMuY29lcmNlU2l6ZShhcywgaW5wdXQpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSkodGFwaW5zID0gc2l6aW5nLnRhcGlucyB8fCAoc2l6aW5nLnRhcGlucyA9IHt9KSk7XG4gICAgICAgIH0pKHNpemluZyA9IGNvcmUuc2l6aW5nIHx8IChjb3JlLnNpemluZyA9IHt9KSk7XG4gICAgfSkoY29yZSA9IG1pbmVydmEuY29yZSB8fCAobWluZXJ2YS5jb3JlID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgc2hhcGVzO1xuICAgIChmdW5jdGlvbiAoc2hhcGVzKSB7XG4gICAgICAgIHZhciBlbGxpcHNlO1xuICAgICAgICAoZnVuY3Rpb24gKGVsbGlwc2UpIHtcbiAgICAgICAgICAgIHZhciBoZWxwZXJzO1xuICAgICAgICAgICAgKGZ1bmN0aW9uIChoZWxwZXJzKSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZHJhdyhjdHgsIHgsIHksIHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJhZGl1c1ggPSB3aWR0aCAvIDI7XG4gICAgICAgICAgICAgICAgICAgIHZhciByYWRpdXNZID0gaGVpZ2h0IC8gMjtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJpZ2h0ID0geCArIHdpZHRoO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYm90dG9tID0geSArIGhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNlbnRlclggPSB4ICsgcmFkaXVzWDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNlbnRlclkgPSB5ICsgcmFkaXVzWTtcbiAgICAgICAgICAgICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAod2lkdGggPT09IGhlaWdodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3R4LmFyYyhjZW50ZXJYLCBjZW50ZXJZLCByYWRpdXNYLCAwLCBNYXRoLlBJICogMiwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhciBrYXBwYSA9IC41NTIyODQ4O1xuICAgICAgICAgICAgICAgICAgICB2YXIgb3ggPSByYWRpdXNYICoga2FwcGE7XG4gICAgICAgICAgICAgICAgICAgIHZhciBveSA9IHJhZGl1c1kgKiBrYXBwYTtcbiAgICAgICAgICAgICAgICAgICAgY3R4Lm1vdmVUbyh4LCBjZW50ZXJZKTtcbiAgICAgICAgICAgICAgICAgICAgY3R4LmJlemllckN1cnZlVG8oeCwgY2VudGVyWSAtIG95LCBjZW50ZXJYIC0gb3gsIHksIGNlbnRlclgsIHkpO1xuICAgICAgICAgICAgICAgICAgICBjdHguYmV6aWVyQ3VydmVUbyhjZW50ZXJYICsgb3gsIHksIHJpZ2h0LCBjZW50ZXJZIC0gb3ksIHJpZ2h0LCBjZW50ZXJZKTtcbiAgICAgICAgICAgICAgICAgICAgY3R4LmJlemllckN1cnZlVG8ocmlnaHQsIGNlbnRlclkgKyBveSwgY2VudGVyWCArIG94LCBib3R0b20sIGNlbnRlclgsIGJvdHRvbSk7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5iZXppZXJDdXJ2ZVRvKGNlbnRlclggLSBveCwgYm90dG9tLCB4LCBjZW50ZXJZICsgb3ksIHgsIGNlbnRlclkpO1xuICAgICAgICAgICAgICAgICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGhlbHBlcnMuZHJhdyA9IGRyYXc7XG4gICAgICAgICAgICB9KShoZWxwZXJzID0gZWxsaXBzZS5oZWxwZXJzIHx8IChlbGxpcHNlLmhlbHBlcnMgPSB7fSkpO1xuICAgICAgICB9KShlbGxpcHNlID0gc2hhcGVzLmVsbGlwc2UgfHwgKHNoYXBlcy5lbGxpcHNlID0ge30pKTtcbiAgICB9KShzaGFwZXMgPSBtaW5lcnZhLnNoYXBlcyB8fCAobWluZXJ2YS5zaGFwZXMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBzaGFwZXM7XG4gICAgKGZ1bmN0aW9uIChzaGFwZXMpIHtcbiAgICAgICAgdmFyIHNoYXBlO1xuICAgICAgICAoZnVuY3Rpb24gKHNoYXBlKSB7XG4gICAgICAgICAgICB2YXIgaGl0dGVzdDtcbiAgICAgICAgICAgIChmdW5jdGlvbiAoaGl0dGVzdCkge1xuICAgICAgICAgICAgICAgIHZhciBTaGFwZUhpdFRlc3RQaXBlRGVmID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgX19leHRlbmRzKFNoYXBlSGl0VGVzdFBpcGVEZWYsIF9zdXBlcik7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIFNoYXBlSGl0VGVzdFBpcGVEZWYoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVwbGFjZVRhcGluKCdjYW5IaXRJbnNpZGUnLCBoaXR0ZXN0LnRhcGlucy5jYW5IaXRJbnNpZGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2VUYXBpbignaW5zaWRlQ2hpbGRyZW4nLCBoaXR0ZXN0LnRhcGlucy5pbnNpZGVDaGlsZHJlbilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYWRkVGFwaW5BZnRlcignaW5zaWRlT2JqZWN0JywgJ2NhbkhpdFNoYXBlJywgaGl0dGVzdC50YXBpbnMuY2FuSGl0U2hhcGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFkZFRhcGluQWZ0ZXIoJ2NhbkhpdFNoYXBlJywgJ3ByZXBhcmVTaGFwZScsIGhpdHRlc3QudGFwaW5zLnByZXBhcmVTaGFwZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYWRkVGFwaW5BZnRlcigncHJlcGFyZVNoYXBlJywgJ2RyYXdTaGFwZScsIGhpdHRlc3QudGFwaW5zLmRyYXdTaGFwZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYWRkVGFwaW5BZnRlcignZHJhd1NoYXBlJywgJ2ZpbmlzaFNoYXBlJywgaGl0dGVzdC50YXBpbnMuZmluaXNoU2hhcGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBTaGFwZUhpdFRlc3RQaXBlRGVmO1xuICAgICAgICAgICAgICAgIH0pKG1pbmVydmEuY29yZS5oaXR0ZXN0LkhpdFRlc3RQaXBlRGVmKTtcbiAgICAgICAgICAgICAgICBoaXR0ZXN0LlNoYXBlSGl0VGVzdFBpcGVEZWYgPSBTaGFwZUhpdFRlc3RQaXBlRGVmO1xuICAgICAgICAgICAgfSkoaGl0dGVzdCA9IHNoYXBlLmhpdHRlc3QgfHwgKHNoYXBlLmhpdHRlc3QgPSB7fSkpO1xuICAgICAgICB9KShzaGFwZSA9IHNoYXBlcy5zaGFwZSB8fCAoc2hhcGVzLnNoYXBlID0ge30pKTtcbiAgICB9KShzaGFwZXMgPSBtaW5lcnZhLnNoYXBlcyB8fCAobWluZXJ2YS5zaGFwZXMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vc2hhcGUvaGl0dGVzdC9TaGFwZUhpdFRlc3RQaXBlRGVmXCIgLz5cbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIHNoYXBlcztcbiAgICAoZnVuY3Rpb24gKHNoYXBlcykge1xuICAgICAgICB2YXIgZWxsaXBzZTtcbiAgICAgICAgKGZ1bmN0aW9uIChlbGxpcHNlKSB7XG4gICAgICAgICAgICB2YXIgaGl0dGVzdDtcbiAgICAgICAgICAgIChmdW5jdGlvbiAoaGl0dGVzdCkge1xuICAgICAgICAgICAgICAgIHZhciBFbGxpcHNlSGl0VGVzdFBpcGVEZWYgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgICAgICAgICBfX2V4dGVuZHMoRWxsaXBzZUhpdFRlc3RQaXBlRGVmLCBfc3VwZXIpO1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBFbGxpcHNlSGl0VGVzdFBpcGVEZWYoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVwbGFjZVRhcGluKCdkcmF3U2hhcGUnLCB0YXBpbnMuZHJhd1NoYXBlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gRWxsaXBzZUhpdFRlc3RQaXBlRGVmO1xuICAgICAgICAgICAgICAgIH0pKHNoYXBlcy5zaGFwZS5oaXR0ZXN0LlNoYXBlSGl0VGVzdFBpcGVEZWYpO1xuICAgICAgICAgICAgICAgIGhpdHRlc3QuRWxsaXBzZUhpdFRlc3RQaXBlRGVmID0gRWxsaXBzZUhpdFRlc3RQaXBlRGVmO1xuICAgICAgICAgICAgICAgIHZhciB0YXBpbnM7XG4gICAgICAgICAgICAgICAgKGZ1bmN0aW9uICh0YXBpbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZHJhd1NoYXBlKGRhdGEsIHBvcywgaGl0TGlzdCwgY3R4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3IgPSBkYXRhLmFzc2V0cy5zaGFwZVJlY3Q7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGxpcHNlLmhlbHBlcnMuZHJhdyhjdHgucmF3LCBzci54LCBzci55LCBzci53aWR0aCwgc3IuaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRhcGlucy5kcmF3U2hhcGUgPSBkcmF3U2hhcGU7XG4gICAgICAgICAgICAgICAgfSkodGFwaW5zID0gaGl0dGVzdC50YXBpbnMgfHwgKGhpdHRlc3QudGFwaW5zID0ge30pKTtcbiAgICAgICAgICAgIH0pKGhpdHRlc3QgPSBlbGxpcHNlLmhpdHRlc3QgfHwgKGVsbGlwc2UuaGl0dGVzdCA9IHt9KSk7XG4gICAgICAgIH0pKGVsbGlwc2UgPSBzaGFwZXMuZWxsaXBzZSB8fCAoc2hhcGVzLmVsbGlwc2UgPSB7fSkpO1xuICAgIH0pKHNoYXBlcyA9IG1pbmVydmEuc2hhcGVzIHx8IChtaW5lcnZhLnNoYXBlcyA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIHNoYXBlcztcbiAgICAoZnVuY3Rpb24gKHNoYXBlcykge1xuICAgICAgICB2YXIgc2hhcGU7XG4gICAgICAgIChmdW5jdGlvbiAoc2hhcGUpIHtcbiAgICAgICAgICAgIHZhciBtZWFzdXJlO1xuICAgICAgICAgICAgKGZ1bmN0aW9uIChtZWFzdXJlKSB7XG4gICAgICAgICAgICAgICAgdmFyIFNoYXBlTWVhc3VyZVBpcGVEZWYgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgICAgICAgICBfX2V4dGVuZHMoU2hhcGVNZWFzdXJlUGlwZURlZiwgX3N1cGVyKTtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gU2hhcGVNZWFzdXJlUGlwZURlZigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRUYXBpbkJlZm9yZSgnZG9PdmVycmlkZScsICdjYWxjTmF0dXJhbEJvdW5kcycsIG1lYXN1cmUudGFwaW5zLmNhbGNOYXR1cmFsQm91bmRzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlVGFwaW4oJ2RvT3ZlcnJpZGUnLCBtZWFzdXJlLnRhcGlucy5kb092ZXJyaWRlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBTaGFwZU1lYXN1cmVQaXBlRGVmLnByb3RvdHlwZS5jcmVhdGVPdXRwdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb3V0cHV0ID0gX3N1cGVyLnByb3RvdHlwZS5jcmVhdGVPdXRwdXQuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dC5uYXR1cmFsQm91bmRzID0gbmV3IG1pbmVydmEuUmVjdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgU2hhcGVNZWFzdXJlUGlwZURlZi5wcm90b3R5cGUucHJlcGFyZSA9IGZ1bmN0aW9uIChpbnB1dCwgc3RhdGUsIG91dHB1dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5SZWN0LmNvcHlUbyhpbnB1dC5uYXR1cmFsQm91bmRzLCBvdXRwdXQubmF0dXJhbEJvdW5kcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLnByZXBhcmUuY2FsbCh0aGlzLCBpbnB1dCwgc3RhdGUsIG91dHB1dCk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIFNoYXBlTWVhc3VyZVBpcGVEZWYucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24gKGlucHV0LCBzdGF0ZSwgb3V0cHV0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLmZsdXNoLmNhbGwodGhpcywgaW5wdXQsIHN0YXRlLCBvdXRwdXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5SZWN0LmNvcHlUbyhvdXRwdXQubmF0dXJhbEJvdW5kcywgaW5wdXQubmF0dXJhbEJvdW5kcyk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBTaGFwZU1lYXN1cmVQaXBlRGVmO1xuICAgICAgICAgICAgICAgIH0pKG1pbmVydmEuY29yZS5tZWFzdXJlLk1lYXN1cmVQaXBlRGVmKTtcbiAgICAgICAgICAgICAgICBtZWFzdXJlLlNoYXBlTWVhc3VyZVBpcGVEZWYgPSBTaGFwZU1lYXN1cmVQaXBlRGVmO1xuICAgICAgICAgICAgfSkobWVhc3VyZSA9IHNoYXBlLm1lYXN1cmUgfHwgKHNoYXBlLm1lYXN1cmUgPSB7fSkpO1xuICAgICAgICB9KShzaGFwZSA9IHNoYXBlcy5zaGFwZSB8fCAoc2hhcGVzLnNoYXBlID0ge30pKTtcbiAgICB9KShzaGFwZXMgPSBtaW5lcnZhLnNoYXBlcyB8fCAobWluZXJ2YS5zaGFwZXMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vc2hhcGUvbWVhc3VyZS9TaGFwZU1lYXN1cmVQaXBlRGVmXCIgLz5cbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIHNoYXBlcztcbiAgICAoZnVuY3Rpb24gKHNoYXBlcykge1xuICAgICAgICB2YXIgZWxsaXBzZTtcbiAgICAgICAgKGZ1bmN0aW9uIChlbGxpcHNlKSB7XG4gICAgICAgICAgICB2YXIgbWVhc3VyZTtcbiAgICAgICAgICAgIChmdW5jdGlvbiAobWVhc3VyZSkge1xuICAgICAgICAgICAgICAgIHZhciBFbGxpcHNlTWVhc3VyZVBpcGVEZWYgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgICAgICAgICBfX2V4dGVuZHMoRWxsaXBzZU1lYXN1cmVQaXBlRGVmLCBfc3VwZXIpO1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBFbGxpcHNlTWVhc3VyZVBpcGVEZWYoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkVGFwaW5CZWZvcmUoJ2RvT3ZlcnJpZGUnLCAnc2hyaW5rQXZhaWxhYmxlJywgdGFwaW5zLnNocmlua0F2YWlsYWJsZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEVsbGlwc2VNZWFzdXJlUGlwZURlZjtcbiAgICAgICAgICAgICAgICB9KShzaGFwZXMuc2hhcGUubWVhc3VyZS5TaGFwZU1lYXN1cmVQaXBlRGVmKTtcbiAgICAgICAgICAgICAgICBtZWFzdXJlLkVsbGlwc2VNZWFzdXJlUGlwZURlZiA9IEVsbGlwc2VNZWFzdXJlUGlwZURlZjtcbiAgICAgICAgICAgICAgICB2YXIgdGFwaW5zO1xuICAgICAgICAgICAgICAgIChmdW5jdGlvbiAodGFwaW5zKSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHNocmlua0F2YWlsYWJsZShpbnB1dCwgc3RhdGUsIG91dHB1dCwgdHJlZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGF2YWlsYWJsZSA9IHN0YXRlLmF2YWlsYWJsZVNpemU7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGUud2lkdGggPSBhdmFpbGFibGUuaGVpZ2h0ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRhcGlucy5zaHJpbmtBdmFpbGFibGUgPSBzaHJpbmtBdmFpbGFibGU7XG4gICAgICAgICAgICAgICAgfSkodGFwaW5zID0gbWVhc3VyZS50YXBpbnMgfHwgKG1lYXN1cmUudGFwaW5zID0ge30pKTtcbiAgICAgICAgICAgIH0pKG1lYXN1cmUgPSBlbGxpcHNlLm1lYXN1cmUgfHwgKGVsbGlwc2UubWVhc3VyZSA9IHt9KSk7XG4gICAgICAgIH0pKGVsbGlwc2UgPSBzaGFwZXMuZWxsaXBzZSB8fCAoc2hhcGVzLmVsbGlwc2UgPSB7fSkpO1xuICAgIH0pKHNoYXBlcyA9IG1pbmVydmEuc2hhcGVzIHx8IChtaW5lcnZhLnNoYXBlcyA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIHNoYXBlcztcbiAgICAoZnVuY3Rpb24gKHNoYXBlcykge1xuICAgICAgICB2YXIgc2hhcGU7XG4gICAgICAgIChmdW5jdGlvbiAoc2hhcGUpIHtcbiAgICAgICAgICAgIHZhciByZW5kZXI7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKHJlbmRlcikge1xuICAgICAgICAgICAgICAgIHZhciBTaGFwZVJlbmRlclBpcGVEZWYgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgICAgICAgICBfX2V4dGVuZHMoU2hhcGVSZW5kZXJQaXBlRGVmLCBfc3VwZXIpO1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBTaGFwZVJlbmRlclBpcGVEZWYoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkVGFwaW5CZWZvcmUoJ2RvUmVuZGVyJywgJ2NhbGNTaG91bGREcmF3JywgcmVuZGVyLnRhcGlucy5jYWxjU2hvdWxkRHJhdylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYWRkVGFwaW5CZWZvcmUoJ2RvUmVuZGVyJywgJ3ByZXBhcmVEcmF3JywgcmVuZGVyLnRhcGlucy5wcmVwYXJlRHJhdylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZVRhcGluKCdkb1JlbmRlcicsIHJlbmRlci50YXBpbnMuZG9SZW5kZXIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFkZFRhcGluQWZ0ZXIoJ2RvUmVuZGVyJywgJ2ZpbGwnLCByZW5kZXIudGFwaW5zLmZpbGwpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFkZFRhcGluQWZ0ZXIoJ2ZpbGwnLCAnZmluaXNoRHJhdycsIHJlbmRlci50YXBpbnMuZmluaXNoRHJhdylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYWRkVGFwaW5BZnRlcignZmluaXNoRHJhdycsICdzdHJva2UnLCByZW5kZXIudGFwaW5zLnN0cm9rZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgU2hhcGVSZW5kZXJQaXBlRGVmLnByb3RvdHlwZS5jcmVhdGVTdGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdGF0ZSA9IF9zdXBlci5wcm90b3R5cGUuY3JlYXRlU3RhdGUuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLnNob3VsZERyYXcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFNoYXBlUmVuZGVyUGlwZURlZjtcbiAgICAgICAgICAgICAgICB9KShtaW5lcnZhLmNvcmUucmVuZGVyLlJlbmRlclBpcGVEZWYpO1xuICAgICAgICAgICAgICAgIHJlbmRlci5TaGFwZVJlbmRlclBpcGVEZWYgPSBTaGFwZVJlbmRlclBpcGVEZWY7XG4gICAgICAgICAgICB9KShyZW5kZXIgPSBzaGFwZS5yZW5kZXIgfHwgKHNoYXBlLnJlbmRlciA9IHt9KSk7XG4gICAgICAgIH0pKHNoYXBlID0gc2hhcGVzLnNoYXBlIHx8IChzaGFwZXMuc2hhcGUgPSB7fSkpO1xuICAgIH0pKHNoYXBlcyA9IG1pbmVydmEuc2hhcGVzIHx8IChtaW5lcnZhLnNoYXBlcyA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9zaGFwZS9yZW5kZXIvU2hhcGVSZW5kZXJQaXBlRGVmXCIgLz5cbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIHNoYXBlcztcbiAgICAoZnVuY3Rpb24gKHNoYXBlcykge1xuICAgICAgICB2YXIgZWxsaXBzZTtcbiAgICAgICAgKGZ1bmN0aW9uIChlbGxpcHNlKSB7XG4gICAgICAgICAgICB2YXIgcmVuZGVyO1xuICAgICAgICAgICAgKGZ1bmN0aW9uIChyZW5kZXIpIHtcbiAgICAgICAgICAgICAgICB2YXIgRWxsaXBzZVJlbmRlclBpcGVEZWYgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgICAgICAgICBfX2V4dGVuZHMoRWxsaXBzZVJlbmRlclBpcGVEZWYsIF9zdXBlcik7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIEVsbGlwc2VSZW5kZXJQaXBlRGVmKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlcGxhY2VUYXBpbignZG9SZW5kZXInLCB0YXBpbnMuZG9SZW5kZXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBFbGxpcHNlUmVuZGVyUGlwZURlZjtcbiAgICAgICAgICAgICAgICB9KShzaGFwZXMuc2hhcGUucmVuZGVyLlNoYXBlUmVuZGVyUGlwZURlZik7XG4gICAgICAgICAgICAgICAgcmVuZGVyLkVsbGlwc2VSZW5kZXJQaXBlRGVmID0gRWxsaXBzZVJlbmRlclBpcGVEZWY7XG4gICAgICAgICAgICAgICAgdmFyIHRhcGlucztcbiAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBkb1JlbmRlcihpbnB1dCwgc3RhdGUsIG91dHB1dCwgY3R4LCByZWdpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc3RhdGUuc2hvdWxkRHJhdylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzciA9IGlucHV0LnNoYXBlUmVjdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsbGlwc2UuaGVscGVycy5kcmF3KGN0eC5yYXcsIHNyLngsIHNyLnksIHNyLndpZHRoLCBzci5oZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGFwaW5zLmRvUmVuZGVyID0gZG9SZW5kZXI7XG4gICAgICAgICAgICAgICAgfSkodGFwaW5zID0gcmVuZGVyLnRhcGlucyB8fCAocmVuZGVyLnRhcGlucyA9IHt9KSk7XG4gICAgICAgICAgICB9KShyZW5kZXIgPSBlbGxpcHNlLnJlbmRlciB8fCAoZWxsaXBzZS5yZW5kZXIgPSB7fSkpO1xuICAgICAgICB9KShlbGxpcHNlID0gc2hhcGVzLmVsbGlwc2UgfHwgKHNoYXBlcy5lbGxpcHNlID0ge30pKTtcbiAgICB9KShzaGFwZXMgPSBtaW5lcnZhLnNoYXBlcyB8fCAobWluZXJ2YS5zaGFwZXMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vc2hhcGUvbWVhc3VyZS9TaGFwZU1lYXN1cmVQaXBlRGVmXCIgLz5cbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIHNoYXBlcztcbiAgICAoZnVuY3Rpb24gKHNoYXBlcykge1xuICAgICAgICB2YXIgcGF0aDtcbiAgICAgICAgKGZ1bmN0aW9uIChwYXRoKSB7XG4gICAgICAgICAgICB2YXIgbWVhc3VyZTtcbiAgICAgICAgICAgIChmdW5jdGlvbiAobWVhc3VyZSkge1xuICAgICAgICAgICAgICAgIHZhciBQYXRoTWVhc3VyZVBpcGVEZWYgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgICAgICAgICBfX2V4dGVuZHMoUGF0aE1lYXN1cmVQaXBlRGVmLCBfc3VwZXIpO1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBQYXRoTWVhc3VyZVBpcGVEZWYoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkVGFwaW5CZWZvcmUoJ2NhbGNOYXR1cmFsQm91bmRzJywgJ2J1aWxkUGF0aCcsIHRhcGlucy5idWlsZFBhdGgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2VUYXBpbignY2FsY05hdHVyYWxCb3VuZHMnLCB0YXBpbnMuY2FsY05hdHVyYWxCb3VuZHMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQYXRoTWVhc3VyZVBpcGVEZWY7XG4gICAgICAgICAgICAgICAgfSkoc2hhcGVzLnNoYXBlLm1lYXN1cmUuU2hhcGVNZWFzdXJlUGlwZURlZik7XG4gICAgICAgICAgICAgICAgbWVhc3VyZS5QYXRoTWVhc3VyZVBpcGVEZWYgPSBQYXRoTWVhc3VyZVBpcGVEZWY7XG4gICAgICAgICAgICAgICAgdmFyIHRhcGlucztcbiAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBidWlsZFBhdGgoaW5wdXQsIHN0YXRlLCBvdXRwdXQsIHRyZWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRhcGlucy5idWlsZFBhdGggPSBidWlsZFBhdGg7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNhbGNOYXR1cmFsQm91bmRzKGlucHV0LCBzdGF0ZSwgb3V0cHV0LCB0cmVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmIgPSBvdXRwdXQubmF0dXJhbEJvdW5kcztcbiAgICAgICAgICAgICAgICAgICAgICAgIG5iLnggPSBuYi55ID0gbmIud2lkdGggPSBuYi5oZWlnaHQgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LmRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYm91bmRzID0gaW5wdXQuZGF0YS5HZXRCb3VuZHMoaW5wdXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbmVydmEuUmVjdC5jb3B5VG8oYm91bmRzLCBuYik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0YXBpbnMuY2FsY05hdHVyYWxCb3VuZHMgPSBjYWxjTmF0dXJhbEJvdW5kcztcbiAgICAgICAgICAgICAgICB9KSh0YXBpbnMgPSBtZWFzdXJlLnRhcGlucyB8fCAobWVhc3VyZS50YXBpbnMgPSB7fSkpO1xuICAgICAgICAgICAgfSkobWVhc3VyZSA9IHBhdGgubWVhc3VyZSB8fCAocGF0aC5tZWFzdXJlID0ge30pKTtcbiAgICAgICAgfSkocGF0aCA9IHNoYXBlcy5wYXRoIHx8IChzaGFwZXMucGF0aCA9IHt9KSk7XG4gICAgfSkoc2hhcGVzID0gbWluZXJ2YS5zaGFwZXMgfHwgKG1pbmVydmEuc2hhcGVzID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL3BhdGgvbWVhc3VyZS9QYXRoTWVhc3VyZVBpcGVEZWZcIiAvPlxudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgc2hhcGVzO1xuICAgIChmdW5jdGlvbiAoc2hhcGVzKSB7XG4gICAgICAgIHZhciBsaW5lO1xuICAgICAgICAoZnVuY3Rpb24gKGxpbmUpIHtcbiAgICAgICAgICAgIHZhciBtZWFzdXJlO1xuICAgICAgICAgICAgKGZ1bmN0aW9uIChtZWFzdXJlKSB7XG4gICAgICAgICAgICAgICAgdmFyIExpbmVNZWFzdXJlUGlwZURlZiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIF9fZXh0ZW5kcyhMaW5lTWVhc3VyZVBpcGVEZWYsIF9zdXBlcik7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIExpbmVNZWFzdXJlUGlwZURlZigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXBsYWNlVGFwaW4oJ2J1aWxkUGF0aCcsIHRhcGlucy5idWlsZFBhdGgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBMaW5lTWVhc3VyZVBpcGVEZWY7XG4gICAgICAgICAgICAgICAgfSkoc2hhcGVzLnBhdGgubWVhc3VyZS5QYXRoTWVhc3VyZVBpcGVEZWYpO1xuICAgICAgICAgICAgICAgIG1lYXN1cmUuTGluZU1lYXN1cmVQaXBlRGVmID0gTGluZU1lYXN1cmVQaXBlRGVmO1xuICAgICAgICAgICAgICAgIHZhciB0YXBpbnM7XG4gICAgICAgICAgICAgICAgKGZ1bmN0aW9uICh0YXBpbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gYnVpbGRQYXRoKGlucHV0LCBzdGF0ZSwgb3V0cHV0LCB0cmVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlucHV0LmRhdGEub2xkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhdGggPSBpbnB1dC5kYXRhLnBhdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXRoLnJlc2V0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXRoLm1vdmUoaW5wdXQueDEsIGlucHV0LnkxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGgubGluZShpbnB1dC54MiwgaW5wdXQueTIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQuZGF0YS5vbGQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRhcGlucy5idWlsZFBhdGggPSBidWlsZFBhdGg7XG4gICAgICAgICAgICAgICAgfSkodGFwaW5zID0gbWVhc3VyZS50YXBpbnMgfHwgKG1lYXN1cmUudGFwaW5zID0ge30pKTtcbiAgICAgICAgICAgIH0pKG1lYXN1cmUgPSBsaW5lLm1lYXN1cmUgfHwgKGxpbmUubWVhc3VyZSA9IHt9KSk7XG4gICAgICAgIH0pKGxpbmUgPSBzaGFwZXMubGluZSB8fCAoc2hhcGVzLmxpbmUgPSB7fSkpO1xuICAgIH0pKHNoYXBlcyA9IG1pbmVydmEuc2hhcGVzIHx8IChtaW5lcnZhLnNoYXBlcyA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIHNoYXBlcztcbiAgICAoZnVuY3Rpb24gKHNoYXBlcykge1xuICAgICAgICB2YXIgcGF0aDtcbiAgICAgICAgKGZ1bmN0aW9uIChwYXRoKSB7XG4gICAgICAgICAgICB2YXIgaGl0dGVzdDtcbiAgICAgICAgICAgIChmdW5jdGlvbiAoaGl0dGVzdCkge1xuICAgICAgICAgICAgICAgIHZhciBQYXRoSGl0VGVzdFBpcGVEZWYgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgICAgICAgICBfX2V4dGVuZHMoUGF0aEhpdFRlc3RQaXBlRGVmLCBfc3VwZXIpO1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBQYXRoSGl0VGVzdFBpcGVEZWYoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVwbGFjZVRhcGluKCdkcmF3U2hhcGUnLCB0YXBpbnMuZHJhd1NoYXBlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUGF0aEhpdFRlc3RQaXBlRGVmO1xuICAgICAgICAgICAgICAgIH0pKHNoYXBlcy5zaGFwZS5oaXR0ZXN0LlNoYXBlSGl0VGVzdFBpcGVEZWYpO1xuICAgICAgICAgICAgICAgIGhpdHRlc3QuUGF0aEhpdFRlc3RQaXBlRGVmID0gUGF0aEhpdFRlc3RQaXBlRGVmO1xuICAgICAgICAgICAgICAgIHZhciB0YXBpbnM7XG4gICAgICAgICAgICAgICAgKGZ1bmN0aW9uICh0YXBpbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZHJhd1NoYXBlKGRhdGEsIHBvcywgaGl0TGlzdCwgY3R4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXNzZXRzID0gZGF0YS5hc3NldHM7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHgucHJlYXBwbHkoYXNzZXRzLnN0cmV0Y2hYZm9ybSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhc3NldHMuZGF0YS5EcmF3KGN0eCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0YXBpbnMuZHJhd1NoYXBlID0gZHJhd1NoYXBlO1xuICAgICAgICAgICAgICAgIH0pKHRhcGlucyA9IGhpdHRlc3QudGFwaW5zIHx8IChoaXR0ZXN0LnRhcGlucyA9IHt9KSk7XG4gICAgICAgICAgICB9KShoaXR0ZXN0ID0gcGF0aC5oaXR0ZXN0IHx8IChwYXRoLmhpdHRlc3QgPSB7fSkpO1xuICAgICAgICB9KShwYXRoID0gc2hhcGVzLnBhdGggfHwgKHNoYXBlcy5wYXRoID0ge30pKTtcbiAgICB9KShzaGFwZXMgPSBtaW5lcnZhLnNoYXBlcyB8fCAobWluZXJ2YS5zaGFwZXMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBzaGFwZXM7XG4gICAgKGZ1bmN0aW9uIChzaGFwZXMpIHtcbiAgICAgICAgdmFyIHNoYXBlO1xuICAgICAgICAoZnVuY3Rpb24gKHNoYXBlKSB7XG4gICAgICAgICAgICB2YXIgcHJvY2Vzc3VwO1xuICAgICAgICAgICAgKGZ1bmN0aW9uIChwcm9jZXNzdXApIHtcbiAgICAgICAgICAgICAgICB2YXIgU2hhcGVQcm9jZXNzVXBQaXBlRGVmID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgX19leHRlbmRzKFNoYXBlUHJvY2Vzc1VwUGlwZURlZiwgX3N1cGVyKTtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gU2hhcGVQcm9jZXNzVXBQaXBlRGVmKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZFRhcGluQmVmb3JlKCdjYWxjRXh0ZW50cycsICdjYWxjU2hhcGVSZWN0JywgcHJvY2Vzc3VwLnRhcGlucy5jYWxjU2hhcGVSZWN0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlVGFwaW4oJ2NhbGNFeHRlbnRzJywgcHJvY2Vzc3VwLnRhcGlucy5jYWxjRXh0ZW50cyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgU2hhcGVQcm9jZXNzVXBQaXBlRGVmLnByb3RvdHlwZS5jcmVhdGVPdXRwdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb3V0cHV0ID0gX3N1cGVyLnByb3RvdHlwZS5jcmVhdGVPdXRwdXQuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dC5zaGFwZUZsYWdzID0gbWluZXJ2YS5TaGFwZUZsYWdzLk5vbmU7XG4gICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXQuc2hhcGVSZWN0ID0gbmV3IG1pbmVydmEuUmVjdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgU2hhcGVQcm9jZXNzVXBQaXBlRGVmLnByb3RvdHlwZS5wcmVwYXJlID0gZnVuY3Rpb24gKGlucHV0LCBzdGF0ZSwgb3V0cHV0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXQuc2hhcGVGbGFncyA9IGlucHV0LnNoYXBlRmxhZ3M7XG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLlJlY3QuY29weVRvKGlucHV0LnNoYXBlUmVjdCwgb3V0cHV0LnNoYXBlUmVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLnByZXBhcmUuY2FsbCh0aGlzLCBpbnB1dCwgc3RhdGUsIG91dHB1dCk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIFNoYXBlUHJvY2Vzc1VwUGlwZURlZi5wcm90b3R5cGUuZmx1c2ggPSBmdW5jdGlvbiAoaW5wdXQsIHN0YXRlLCBvdXRwdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuZmx1c2guY2FsbCh0aGlzLCBpbnB1dCwgc3RhdGUsIG91dHB1dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLlJlY3QuY29weVRvKG91dHB1dC5zaGFwZVJlY3QsIGlucHV0LnNoYXBlUmVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC5zaGFwZUZsYWdzID0gb3V0cHV0LnNoYXBlRmxhZ3M7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBTaGFwZVByb2Nlc3NVcFBpcGVEZWY7XG4gICAgICAgICAgICAgICAgfSkobWluZXJ2YS5jb3JlLnByb2Nlc3N1cC5Qcm9jZXNzVXBQaXBlRGVmKTtcbiAgICAgICAgICAgICAgICBwcm9jZXNzdXAuU2hhcGVQcm9jZXNzVXBQaXBlRGVmID0gU2hhcGVQcm9jZXNzVXBQaXBlRGVmO1xuICAgICAgICAgICAgfSkocHJvY2Vzc3VwID0gc2hhcGUucHJvY2Vzc3VwIHx8IChzaGFwZS5wcm9jZXNzdXAgPSB7fSkpO1xuICAgICAgICB9KShzaGFwZSA9IHNoYXBlcy5zaGFwZSB8fCAoc2hhcGVzLnNoYXBlID0ge30pKTtcbiAgICB9KShzaGFwZXMgPSBtaW5lcnZhLnNoYXBlcyB8fCAobWluZXJ2YS5zaGFwZXMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vc2hhcGUvcHJvY2Vzc3VwL1NoYXBlUHJvY2Vzc1VwUGlwZURlZlwiIC8+XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBzaGFwZXM7XG4gICAgKGZ1bmN0aW9uIChzaGFwZXMpIHtcbiAgICAgICAgdmFyIHBhdGg7XG4gICAgICAgIChmdW5jdGlvbiAocGF0aCkge1xuICAgICAgICAgICAgdmFyIHByb2Nlc3N1cDtcbiAgICAgICAgICAgIChmdW5jdGlvbiAocHJvY2Vzc3VwKSB7XG4gICAgICAgICAgICAgICAgdmFyIFBhdGhQcm9jZXNzVXBQaXBlRGVmID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgX19leHRlbmRzKFBhdGhQcm9jZXNzVXBQaXBlRGVmLCBfc3VwZXIpO1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBQYXRoUHJvY2Vzc1VwUGlwZURlZigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXBsYWNlVGFwaW4oJ2NhbGNBY3R1YWxTaXplJywgcHJvY2Vzc3VwLnRhcGlucy5jYWxjQWN0dWFsU2l6ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZVRhcGluKCdjYWxjU2hhcGVSZWN0JywgcHJvY2Vzc3VwLnRhcGlucy5jYWxjU2hhcGVSZWN0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRUYXBpbkJlZm9yZSgnY2FsY0V4dGVudHMnLCAnY2FsY1N0cmV0Y2gnLCBwcm9jZXNzdXAudGFwaW5zLmNhbGNTdHJldGNoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlVGFwaW4oJ2NhbGNFeHRlbnRzJywgcHJvY2Vzc3VwLnRhcGlucy5jYWxjRXh0ZW50cyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgUGF0aFByb2Nlc3NVcFBpcGVEZWYucHJvdG90eXBlLmNyZWF0ZU91dHB1dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvdXRwdXQgPSBfc3VwZXIucHJvdG90eXBlLmNyZWF0ZU91dHB1dC5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0LnN0cmV0Y2hYZm9ybSA9IG1pbmVydmEubWF0My5pZGVudGl0eSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgUGF0aFByb2Nlc3NVcFBpcGVEZWYucHJvdG90eXBlLnByZXBhcmUgPSBmdW5jdGlvbiAoaW5wdXQsIHN0YXRlLCBvdXRwdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbmVydmEubWF0My5jb3B5VG8oaW5wdXQuc3RyZXRjaFhmb3JtLCBvdXRwdXQuc3RyZXRjaFhmb3JtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUucHJlcGFyZS5jYWxsKHRoaXMsIGlucHV0LCBzdGF0ZSwgb3V0cHV0KTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgUGF0aFByb2Nlc3NVcFBpcGVEZWYucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24gKGlucHV0LCBzdGF0ZSwgb3V0cHV0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLmZsdXNoLmNhbGwodGhpcywgaW5wdXQsIHN0YXRlLCBvdXRwdXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5tYXQzLmNvcHlUbyhvdXRwdXQuc3RyZXRjaFhmb3JtLCBpbnB1dC5zdHJldGNoWGZvcm0pO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUGF0aFByb2Nlc3NVcFBpcGVEZWY7XG4gICAgICAgICAgICAgICAgfSkoc2hhcGVzLnNoYXBlLnByb2Nlc3N1cC5TaGFwZVByb2Nlc3NVcFBpcGVEZWYpO1xuICAgICAgICAgICAgICAgIHByb2Nlc3N1cC5QYXRoUHJvY2Vzc1VwUGlwZURlZiA9IFBhdGhQcm9jZXNzVXBQaXBlRGVmO1xuICAgICAgICAgICAgfSkocHJvY2Vzc3VwID0gcGF0aC5wcm9jZXNzdXAgfHwgKHBhdGgucHJvY2Vzc3VwID0ge30pKTtcbiAgICAgICAgfSkocGF0aCA9IHNoYXBlcy5wYXRoIHx8IChzaGFwZXMucGF0aCA9IHt9KSk7XG4gICAgfSkoc2hhcGVzID0gbWluZXJ2YS5zaGFwZXMgfHwgKG1pbmVydmEuc2hhcGVzID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL3NoYXBlL3JlbmRlci9TaGFwZVJlbmRlclBpcGVEZWZcIiAvPlxudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgc2hhcGVzO1xuICAgIChmdW5jdGlvbiAoc2hhcGVzKSB7XG4gICAgICAgIHZhciBwYXRoO1xuICAgICAgICAoZnVuY3Rpb24gKHBhdGgpIHtcbiAgICAgICAgICAgIHZhciByZW5kZXI7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKHJlbmRlcikge1xuICAgICAgICAgICAgICAgIHZhciBQYXRoUmVuZGVyUGlwZURlZiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIF9fZXh0ZW5kcyhQYXRoUmVuZGVyUGlwZURlZiwgX3N1cGVyKTtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gUGF0aFJlbmRlclBpcGVEZWYoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVwbGFjZVRhcGluKCdkb1JlbmRlcicsIHJlbmRlci50YXBpbnMuZG9SZW5kZXIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2VUYXBpbignZmlsbCcsIHJlbmRlci50YXBpbnMuZmlsbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFBhdGhSZW5kZXJQaXBlRGVmO1xuICAgICAgICAgICAgICAgIH0pKHNoYXBlcy5zaGFwZS5yZW5kZXIuU2hhcGVSZW5kZXJQaXBlRGVmKTtcbiAgICAgICAgICAgICAgICByZW5kZXIuUGF0aFJlbmRlclBpcGVEZWYgPSBQYXRoUmVuZGVyUGlwZURlZjtcbiAgICAgICAgICAgIH0pKHJlbmRlciA9IHBhdGgucmVuZGVyIHx8IChwYXRoLnJlbmRlciA9IHt9KSk7XG4gICAgICAgIH0pKHBhdGggPSBzaGFwZXMucGF0aCB8fCAoc2hhcGVzLnBhdGggPSB7fSkpO1xuICAgIH0pKHNoYXBlcyA9IG1pbmVydmEuc2hhcGVzIHx8IChtaW5lcnZhLnNoYXBlcyA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9wYXRoL21lYXN1cmUvUGF0aE1lYXN1cmVQaXBlRGVmXCIgLz5cbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIHNoYXBlcztcbiAgICAoZnVuY3Rpb24gKHNoYXBlcykge1xuICAgICAgICB2YXIgcG9seWxpbmU7XG4gICAgICAgIChmdW5jdGlvbiAocG9seWxpbmUpIHtcbiAgICAgICAgICAgIHZhciBtZWFzdXJlO1xuICAgICAgICAgICAgKGZ1bmN0aW9uIChtZWFzdXJlKSB7XG4gICAgICAgICAgICAgICAgdmFyIFBvbHlsaW5lTWVhc3VyZVBpcGVEZWYgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgICAgICAgICBfX2V4dGVuZHMoUG9seWxpbmVNZWFzdXJlUGlwZURlZiwgX3N1cGVyKTtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gUG9seWxpbmVNZWFzdXJlUGlwZURlZigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXBsYWNlVGFwaW4oJ2J1aWxkUGF0aCcsIHRhcGlucy5idWlsZFBhdGgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQb2x5bGluZU1lYXN1cmVQaXBlRGVmO1xuICAgICAgICAgICAgICAgIH0pKHNoYXBlcy5wYXRoLm1lYXN1cmUuUGF0aE1lYXN1cmVQaXBlRGVmKTtcbiAgICAgICAgICAgICAgICBtZWFzdXJlLlBvbHlsaW5lTWVhc3VyZVBpcGVEZWYgPSBQb2x5bGluZU1lYXN1cmVQaXBlRGVmO1xuICAgICAgICAgICAgICAgIHZhciB0YXBpbnM7XG4gICAgICAgICAgICAgICAgKGZ1bmN0aW9uICh0YXBpbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gYnVpbGRQYXRoKGlucHV0LCBzdGF0ZSwgb3V0cHV0LCB0cmVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlucHV0LmRhdGEub2xkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhdGggPSBpbnB1dC5kYXRhLnBhdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXRoLnJlc2V0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcG9pbnRzID0gaW5wdXQucG9pbnRzO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBvaW50cy5sZW5ndGggPCAyKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHAwID0gcG9pbnRzWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHAgPSBwb2ludHNbMV07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9pbnRzLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dGVuZExpbmUocDAsIHAsIGlucHV0LnN0cm9rZVRoaWNrbmVzcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aC5tb3ZlKHAwLngsIHAwLnkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdGgubGluZShwLngsIHAueSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRoLm1vdmUocDAueCwgcDAueSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBwb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHAgPSBwb2ludHNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdGgubGluZShwLngsIHAueSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LmlzQ2xvc2VkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdGguY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LmRhdGEub2xkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0YXBpbnMuYnVpbGRQYXRoID0gYnVpbGRQYXRoO1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBleHRlbmRMaW5lKHAxLCBwMiwgdGhpY2tuZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdDUgPSB0aGlja25lc3MgKiA1LjA7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZHggPSBwMS54IC0gcDIueDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkeSA9IHAxLnkgLSBwMi55O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGR5ID09PSAwLjApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0NSAtPSB0aGlja25lc3MgLyAyLjA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGR4ID4gMC4wKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAxLnggKz0gdDU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAyLnggLT0gdDU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwMS54IC09IHQ1O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwMi54ICs9IHQ1O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGR4ID09PSAwLjApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0NSAtPSB0aGlja25lc3MgLyAyLjA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGR5ID4gMC4wKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAxLnkgKz0gdDU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAyLnkgLT0gdDU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwMS55IC09IHQ1O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwMi55ICs9IHQ1O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhbmdsZSA9IE1hdGguYXRhbjIoZHksIGR4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXggPSBNYXRoLmFicyhNYXRoLnNpbihhbmdsZSkgKiB0NSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGR4ID4gMC4wKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAxLnggKz0gYXg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAyLnggLT0gYXg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwMS54IC09IGF4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwMi54ICs9IGF4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXkgPSBNYXRoLmFicyhNYXRoLnNpbihNYXRoLlBJIC8gMiAtIGFuZ2xlKSkgKiB0NTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZHkgPiAwLjApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcDEueSArPSBheTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcDIueSAtPSBheTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAxLnkgLT0gYXk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAyLnkgKz0gYXk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkodGFwaW5zID0gbWVhc3VyZS50YXBpbnMgfHwgKG1lYXN1cmUudGFwaW5zID0ge30pKTtcbiAgICAgICAgICAgIH0pKG1lYXN1cmUgPSBwb2x5bGluZS5tZWFzdXJlIHx8IChwb2x5bGluZS5tZWFzdXJlID0ge30pKTtcbiAgICAgICAgfSkocG9seWxpbmUgPSBzaGFwZXMucG9seWxpbmUgfHwgKHNoYXBlcy5wb2x5bGluZSA9IHt9KSk7XG4gICAgfSkoc2hhcGVzID0gbWluZXJ2YS5zaGFwZXMgfHwgKG1pbmVydmEuc2hhcGVzID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgc2hhcGVzO1xuICAgIChmdW5jdGlvbiAoc2hhcGVzKSB7XG4gICAgICAgIHZhciByZWN0YW5nbGU7XG4gICAgICAgIChmdW5jdGlvbiAocmVjdGFuZ2xlKSB7XG4gICAgICAgICAgICB2YXIgaGVscGVycztcbiAgICAgICAgICAgIChmdW5jdGlvbiAoaGVscGVycykge1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGRyYXcoY3R4LCBsZWZ0LCB0b3AsIHdpZHRoLCBoZWlnaHQsIHJhZGl1c1gsIHJhZGl1c1kpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJpZ2h0ID0gbGVmdCArIHdpZHRoO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYm90dG9tID0gdG9wICsgaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXJhZGl1c1ggJiYgIXJhZGl1c1kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5yZWN0KGxlZnQsIHRvcCwgcmlnaHQgLSBsZWZ0LCBib3R0b20gLSB0b3ApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgICAgICAgICAgY3R4Lm1vdmVUbyhsZWZ0ICsgcmFkaXVzWCwgdG9wKTtcbiAgICAgICAgICAgICAgICAgICAgY3R4LmxpbmVUbyhyaWdodCAtIHJhZGl1c1gsIHRvcCk7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5lbGxpcHNlKHJpZ2h0IC0gcmFkaXVzWCwgdG9wICsgcmFkaXVzWSwgcmFkaXVzWCwgcmFkaXVzWSwgMCwgMyAqIE1hdGguUEkgLyAyLCAyICogTWF0aC5QSSk7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5saW5lVG8ocmlnaHQsIGJvdHRvbSAtIHJhZGl1c1kpO1xuICAgICAgICAgICAgICAgICAgICBjdHguZWxsaXBzZShyaWdodCAtIHJhZGl1c1gsIGJvdHRvbSAtIHJhZGl1c1ksIHJhZGl1c1gsIHJhZGl1c1ksIDAsIDAsIE1hdGguUEkgLyAyKTtcbiAgICAgICAgICAgICAgICAgICAgY3R4LmxpbmVUbyhsZWZ0ICsgcmFkaXVzWCwgYm90dG9tKTtcbiAgICAgICAgICAgICAgICAgICAgY3R4LmVsbGlwc2UobGVmdCArIHJhZGl1c1gsIGJvdHRvbSAtIHJhZGl1c1ksIHJhZGl1c1gsIHJhZGl1c1ksIDAsIE1hdGguUEkgLyAyLCBNYXRoLlBJKTtcbiAgICAgICAgICAgICAgICAgICAgY3R4LmxpbmVUbyhsZWZ0LCB0b3AgKyByYWRpdXNZKTtcbiAgICAgICAgICAgICAgICAgICAgY3R4LmVsbGlwc2UobGVmdCArIHJhZGl1c1gsIHRvcCArIHJhZGl1c1ksIHJhZGl1c1gsIHJhZGl1c1ksIDAsIE1hdGguUEksIDMgKiBNYXRoLlBJIC8gMik7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaGVscGVycy5kcmF3ID0gZHJhdztcbiAgICAgICAgICAgIH0pKGhlbHBlcnMgPSByZWN0YW5nbGUuaGVscGVycyB8fCAocmVjdGFuZ2xlLmhlbHBlcnMgPSB7fSkpO1xuICAgICAgICB9KShyZWN0YW5nbGUgPSBzaGFwZXMucmVjdGFuZ2xlIHx8IChzaGFwZXMucmVjdGFuZ2xlID0ge30pKTtcbiAgICB9KShzaGFwZXMgPSBtaW5lcnZhLnNoYXBlcyB8fCAobWluZXJ2YS5zaGFwZXMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vc2hhcGUvaGl0dGVzdC9TaGFwZUhpdFRlc3RQaXBlRGVmXCIgLz5cbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIHNoYXBlcztcbiAgICAoZnVuY3Rpb24gKHNoYXBlcykge1xuICAgICAgICB2YXIgcmVjdGFuZ2xlO1xuICAgICAgICAoZnVuY3Rpb24gKHJlY3RhbmdsZSkge1xuICAgICAgICAgICAgdmFyIGhpdHRlc3Q7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKGhpdHRlc3QpIHtcbiAgICAgICAgICAgICAgICB2YXIgUmVjdGFuZ2xlSGl0VGVzdFBpcGVEZWYgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgICAgICAgICBfX2V4dGVuZHMoUmVjdGFuZ2xlSGl0VGVzdFBpcGVEZWYsIF9zdXBlcik7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIFJlY3RhbmdsZUhpdFRlc3RQaXBlRGVmKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlcGxhY2VUYXBpbignZHJhd1NoYXBlJywgdGFwaW5zLmRyYXdTaGFwZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlY3RhbmdsZUhpdFRlc3RQaXBlRGVmO1xuICAgICAgICAgICAgICAgIH0pKHNoYXBlcy5zaGFwZS5oaXR0ZXN0LlNoYXBlSGl0VGVzdFBpcGVEZWYpO1xuICAgICAgICAgICAgICAgIGhpdHRlc3QuUmVjdGFuZ2xlSGl0VGVzdFBpcGVEZWYgPSBSZWN0YW5nbGVIaXRUZXN0UGlwZURlZjtcbiAgICAgICAgICAgICAgICB2YXIgdGFwaW5zO1xuICAgICAgICAgICAgICAgIChmdW5jdGlvbiAodGFwaW5zKSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGRyYXdTaGFwZShkYXRhLCBwb3MsIGhpdExpc3QsIGN0eCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFzc2V0cyA9IGRhdGEuYXNzZXRzO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNyID0gYXNzZXRzLnNoYXBlUmVjdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByeCA9IE1hdGgubWluKE1hdGguYWJzKGFzc2V0cy5yYWRpdXNYKSwgc3Iud2lkdGggLyAyLjApO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzTmFOKHJ4KSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByeCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcnkgPSBNYXRoLm1pbihNYXRoLmFicyhhc3NldHMucmFkaXVzWSksIHNyLmhlaWdodCAvIDIuMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNOYU4ocnkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ5ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlY3RhbmdsZS5oZWxwZXJzLmRyYXcoY3R4LnJhdywgc3IueCwgc3IueSwgc3Iud2lkdGgsIHNyLmhlaWdodCwgcngsIHJ5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRhcGlucy5kcmF3U2hhcGUgPSBkcmF3U2hhcGU7XG4gICAgICAgICAgICAgICAgfSkodGFwaW5zID0gaGl0dGVzdC50YXBpbnMgfHwgKGhpdHRlc3QudGFwaW5zID0ge30pKTtcbiAgICAgICAgICAgIH0pKGhpdHRlc3QgPSByZWN0YW5nbGUuaGl0dGVzdCB8fCAocmVjdGFuZ2xlLmhpdHRlc3QgPSB7fSkpO1xuICAgICAgICB9KShyZWN0YW5nbGUgPSBzaGFwZXMucmVjdGFuZ2xlIHx8IChzaGFwZXMucmVjdGFuZ2xlID0ge30pKTtcbiAgICB9KShzaGFwZXMgPSBtaW5lcnZhLnNoYXBlcyB8fCAobWluZXJ2YS5zaGFwZXMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vc2hhcGUvbWVhc3VyZS9TaGFwZU1lYXN1cmVQaXBlRGVmXCIgLz5cbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIHNoYXBlcztcbiAgICAoZnVuY3Rpb24gKHNoYXBlcykge1xuICAgICAgICB2YXIgcmVjdGFuZ2xlO1xuICAgICAgICAoZnVuY3Rpb24gKHJlY3RhbmdsZSkge1xuICAgICAgICAgICAgdmFyIG1lYXN1cmU7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKG1lYXN1cmUpIHtcbiAgICAgICAgICAgICAgICB2YXIgUmVjdGFuZ2xlTWVhc3VyZVBpcGVEZWYgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgICAgICAgICBfX2V4dGVuZHMoUmVjdGFuZ2xlTWVhc3VyZVBpcGVEZWYsIF9zdXBlcik7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIFJlY3RhbmdsZU1lYXN1cmVQaXBlRGVmKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZFRhcGluQmVmb3JlKCdkb092ZXJyaWRlJywgJ3Nocmlua0F2YWlsYWJsZScsIHRhcGlucy5zaHJpbmtBdmFpbGFibGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWN0YW5nbGVNZWFzdXJlUGlwZURlZjtcbiAgICAgICAgICAgICAgICB9KShzaGFwZXMuc2hhcGUubWVhc3VyZS5TaGFwZU1lYXN1cmVQaXBlRGVmKTtcbiAgICAgICAgICAgICAgICBtZWFzdXJlLlJlY3RhbmdsZU1lYXN1cmVQaXBlRGVmID0gUmVjdGFuZ2xlTWVhc3VyZVBpcGVEZWY7XG4gICAgICAgICAgICAgICAgdmFyIHRhcGlucztcbiAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBzaHJpbmtBdmFpbGFibGUoaW5wdXQsIHN0YXRlLCBvdXRwdXQsIHRyZWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhdmFpbGFibGUgPSBzdGF0ZS5hdmFpbGFibGVTaXplO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlLndpZHRoID0gYXZhaWxhYmxlLmhlaWdodCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0YXBpbnMuc2hyaW5rQXZhaWxhYmxlID0gc2hyaW5rQXZhaWxhYmxlO1xuICAgICAgICAgICAgICAgIH0pKHRhcGlucyA9IG1lYXN1cmUudGFwaW5zIHx8IChtZWFzdXJlLnRhcGlucyA9IHt9KSk7XG4gICAgICAgICAgICB9KShtZWFzdXJlID0gcmVjdGFuZ2xlLm1lYXN1cmUgfHwgKHJlY3RhbmdsZS5tZWFzdXJlID0ge30pKTtcbiAgICAgICAgfSkocmVjdGFuZ2xlID0gc2hhcGVzLnJlY3RhbmdsZSB8fCAoc2hhcGVzLnJlY3RhbmdsZSA9IHt9KSk7XG4gICAgfSkoc2hhcGVzID0gbWluZXJ2YS5zaGFwZXMgfHwgKG1pbmVydmEuc2hhcGVzID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL3NoYXBlL3JlbmRlci9TaGFwZVJlbmRlclBpcGVEZWZcIiAvPlxudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgc2hhcGVzO1xuICAgIChmdW5jdGlvbiAoc2hhcGVzKSB7XG4gICAgICAgIHZhciByZWN0YW5nbGU7XG4gICAgICAgIChmdW5jdGlvbiAocmVjdGFuZ2xlKSB7XG4gICAgICAgICAgICB2YXIgcmVuZGVyO1xuICAgICAgICAgICAgKGZ1bmN0aW9uIChyZW5kZXIpIHtcbiAgICAgICAgICAgICAgICB2YXIgUmVjdGFuZ2xlUmVuZGVyUGlwZURlZiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIF9fZXh0ZW5kcyhSZWN0YW5nbGVSZW5kZXJQaXBlRGVmLCBfc3VwZXIpO1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBSZWN0YW5nbGVSZW5kZXJQaXBlRGVmKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlcGxhY2VUYXBpbignZG9SZW5kZXInLCB0YXBpbnMuZG9SZW5kZXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWN0YW5nbGVSZW5kZXJQaXBlRGVmO1xuICAgICAgICAgICAgICAgIH0pKHNoYXBlcy5zaGFwZS5yZW5kZXIuU2hhcGVSZW5kZXJQaXBlRGVmKTtcbiAgICAgICAgICAgICAgICByZW5kZXIuUmVjdGFuZ2xlUmVuZGVyUGlwZURlZiA9IFJlY3RhbmdsZVJlbmRlclBpcGVEZWY7XG4gICAgICAgICAgICAgICAgdmFyIHRhcGlucztcbiAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBkb1JlbmRlcihpbnB1dCwgc3RhdGUsIG91dHB1dCwgY3R4LCByZWdpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc3RhdGUuc2hvdWxkRHJhdylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzciA9IGlucHV0LnNoYXBlUmVjdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByeCA9IE1hdGgubWluKE1hdGgubWF4KDAsIGlucHV0LnJhZGl1c1gpLCBzci53aWR0aCAvIDIuMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNOYU4ocngpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ4ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByeSA9IE1hdGgubWluKE1hdGgubWF4KDAsIGlucHV0LnJhZGl1c1kpLCBzci5oZWlnaHQgLyAyLjApO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzTmFOKHJ5KSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByeSA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWN0YW5nbGUuaGVscGVycy5kcmF3KGN0eC5yYXcsIHNyLngsIHNyLnksIHNyLndpZHRoLCBzci5oZWlnaHQsIHJ4LCByeSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0YXBpbnMuZG9SZW5kZXIgPSBkb1JlbmRlcjtcbiAgICAgICAgICAgICAgICB9KSh0YXBpbnMgPSByZW5kZXIudGFwaW5zIHx8IChyZW5kZXIudGFwaW5zID0ge30pKTtcbiAgICAgICAgICAgIH0pKHJlbmRlciA9IHJlY3RhbmdsZS5yZW5kZXIgfHwgKHJlY3RhbmdsZS5yZW5kZXIgPSB7fSkpO1xuICAgICAgICB9KShyZWN0YW5nbGUgPSBzaGFwZXMucmVjdGFuZ2xlIHx8IChzaGFwZXMucmVjdGFuZ2xlID0ge30pKTtcbiAgICB9KShzaGFwZXMgPSBtaW5lcnZhLnNoYXBlcyB8fCAobWluZXJ2YS5zaGFwZXMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBzaGFwZXM7XG4gICAgKGZ1bmN0aW9uIChzaGFwZXMpIHtcbiAgICAgICAgdmFyIHNoYXBlO1xuICAgICAgICAoZnVuY3Rpb24gKHNoYXBlKSB7XG4gICAgICAgICAgICB2YXIgYXJyYW5nZTtcbiAgICAgICAgICAgIChmdW5jdGlvbiAoYXJyYW5nZSkge1xuICAgICAgICAgICAgICAgIHZhciBTaGFwZUFycmFuZ2VQaXBlRGVmID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgX19leHRlbmRzKFNoYXBlQXJyYW5nZVBpcGVEZWYsIF9zdXBlcik7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIFNoYXBlQXJyYW5nZVBpcGVEZWYoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVwbGFjZVRhcGluKCdkb092ZXJyaWRlJywgYXJyYW5nZS50YXBpbnMuZG9PdmVycmlkZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFNoYXBlQXJyYW5nZVBpcGVEZWY7XG4gICAgICAgICAgICAgICAgfSkobWluZXJ2YS5jb3JlLmFycmFuZ2UuQXJyYW5nZVBpcGVEZWYpO1xuICAgICAgICAgICAgICAgIGFycmFuZ2UuU2hhcGVBcnJhbmdlUGlwZURlZiA9IFNoYXBlQXJyYW5nZVBpcGVEZWY7XG4gICAgICAgICAgICB9KShhcnJhbmdlID0gc2hhcGUuYXJyYW5nZSB8fCAoc2hhcGUuYXJyYW5nZSA9IHt9KSk7XG4gICAgICAgIH0pKHNoYXBlID0gc2hhcGVzLnNoYXBlIHx8IChzaGFwZXMuc2hhcGUgPSB7fSkpO1xuICAgIH0pKHNoYXBlcyA9IG1pbmVydmEuc2hhcGVzIHx8IChtaW5lcnZhLnNoYXBlcyA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvbnRyb2xzO1xuICAgIChmdW5jdGlvbiAoY29udHJvbHMpIHtcbiAgICAgICAgdmFyIGJvcmRlcjtcbiAgICAgICAgKGZ1bmN0aW9uIChib3JkZXIpIHtcbiAgICAgICAgICAgIHZhciByZW5kZXI7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKHJlbmRlcikge1xuICAgICAgICAgICAgICAgIHZhciBoZWxwZXJzO1xuICAgICAgICAgICAgICAgIChmdW5jdGlvbiAoaGVscGVycykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgQVJDX1RPX0JFWklFUiA9IDAuNTUyMjg0NzU7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGRyYXdCb3JkZXJSZWN0KGN0eCwgZXh0ZW50cywgY3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY3IgfHwgbWluZXJ2YS5Db3JuZXJSYWRpdXMuaXNFbXB0eShjcikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHgucmVjdChleHRlbnRzLngsIGV4dGVudHMueSwgZXh0ZW50cy53aWR0aCwgZXh0ZW50cy5oZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0b3BfYWRqID0gTWF0aC5tYXgoY3IudG9wTGVmdCArIGNyLnRvcFJpZ2h0IC0gZXh0ZW50cy53aWR0aCwgMCkgLyAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJvdHRvbV9hZGogPSBNYXRoLm1heChjci5ib3R0b21MZWZ0ICsgY3IuYm90dG9tUmlnaHQgLSBleHRlbnRzLndpZHRoLCAwKSAvIDI7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGVmdF9hZGogPSBNYXRoLm1heChjci50b3BMZWZ0ICsgY3IuYm90dG9tTGVmdCAtIGV4dGVudHMuaGVpZ2h0LCAwKSAvIDI7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmlnaHRfYWRqID0gTWF0aC5tYXgoY3IudG9wUmlnaHQgKyBjci5ib3R0b21SaWdodCAtIGV4dGVudHMuaGVpZ2h0LCAwKSAvIDI7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGx0ID0gY3IudG9wTGVmdCAtIHRvcF9hZGo7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHgubW92ZVRvKGV4dGVudHMueCArIHRsdCwgZXh0ZW50cy55KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0cnQgPSBjci50b3BSaWdodCAtIHRvcF9hZGo7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdHJyID0gY3IudG9wUmlnaHQgLSByaWdodF9hZGo7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHgubGluZVRvKGV4dGVudHMueCArIGV4dGVudHMud2lkdGggLSB0cnQsIGV4dGVudHMueSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHguYmV6aWVyQ3VydmVUbyhleHRlbnRzLnggKyBleHRlbnRzLndpZHRoIC0gdHJ0ICsgdHJ0ICogQVJDX1RPX0JFWklFUiwgZXh0ZW50cy55LCBleHRlbnRzLnggKyBleHRlbnRzLndpZHRoLCBleHRlbnRzLnkgKyB0cnIgLSB0cnIgKiBBUkNfVE9fQkVaSUVSLCBleHRlbnRzLnggKyBleHRlbnRzLndpZHRoLCBleHRlbnRzLnkgKyB0cnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJyciA9IGNyLmJvdHRvbVJpZ2h0IC0gcmlnaHRfYWRqO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJyYiA9IGNyLmJvdHRvbVJpZ2h0IC0gYm90dG9tX2FkajtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5saW5lVG8oZXh0ZW50cy54ICsgZXh0ZW50cy53aWR0aCwgZXh0ZW50cy55ICsgZXh0ZW50cy5oZWlnaHQgLSBicnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3R4LmJlemllckN1cnZlVG8oZXh0ZW50cy54ICsgZXh0ZW50cy53aWR0aCwgZXh0ZW50cy55ICsgZXh0ZW50cy5oZWlnaHQgLSBicnIgKyBicnIgKiBBUkNfVE9fQkVaSUVSLCBleHRlbnRzLnggKyBleHRlbnRzLndpZHRoICsgYnJiICogQVJDX1RPX0JFWklFUiAtIGJyYiwgZXh0ZW50cy55ICsgZXh0ZW50cy5oZWlnaHQsIGV4dGVudHMueCArIGV4dGVudHMud2lkdGggLSBicmIsIGV4dGVudHMueSArIGV4dGVudHMuaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBibGIgPSBjci5ib3R0b21MZWZ0IC0gYm90dG9tX2FkajtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBibGwgPSBjci5ib3R0b21MZWZ0IC0gbGVmdF9hZGo7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHgubGluZVRvKGV4dGVudHMueCArIGJsYiwgZXh0ZW50cy55ICsgZXh0ZW50cy5oZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3R4LmJlemllckN1cnZlVG8oZXh0ZW50cy54ICsgYmxiIC0gYmxiICogQVJDX1RPX0JFWklFUiwgZXh0ZW50cy55ICsgZXh0ZW50cy5oZWlnaHQsIGV4dGVudHMueCwgZXh0ZW50cy55ICsgZXh0ZW50cy5oZWlnaHQgLSBibGwgKyBibGwgKiBBUkNfVE9fQkVaSUVSLCBleHRlbnRzLngsIGV4dGVudHMueSArIGV4dGVudHMuaGVpZ2h0IC0gYmxsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0bGwgPSBjci50b3BMZWZ0IC0gbGVmdF9hZGo7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHgubGluZVRvKGV4dGVudHMueCwgZXh0ZW50cy55ICsgdGxsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5iZXppZXJDdXJ2ZVRvKGV4dGVudHMueCwgZXh0ZW50cy55ICsgdGxsIC0gdGxsICogQVJDX1RPX0JFWklFUiwgZXh0ZW50cy54ICsgdGx0IC0gdGx0ICogQVJDX1RPX0JFWklFUiwgZXh0ZW50cy55LCBleHRlbnRzLnggKyB0bHQsIGV4dGVudHMueSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaGVscGVycy5kcmF3Qm9yZGVyUmVjdCA9IGRyYXdCb3JkZXJSZWN0O1xuICAgICAgICAgICAgICAgIH0pKGhlbHBlcnMgPSByZW5kZXIuaGVscGVycyB8fCAocmVuZGVyLmhlbHBlcnMgPSB7fSkpO1xuICAgICAgICAgICAgfSkocmVuZGVyID0gYm9yZGVyLnJlbmRlciB8fCAoYm9yZGVyLnJlbmRlciA9IHt9KSk7XG4gICAgICAgIH0pKGJvcmRlciA9IGNvbnRyb2xzLmJvcmRlciB8fCAoY29udHJvbHMuYm9yZGVyID0ge30pKTtcbiAgICB9KShjb250cm9scyA9IG1pbmVydmEuY29udHJvbHMgfHwgKG1pbmVydmEuY29udHJvbHMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb250cm9scztcbiAgICAoZnVuY3Rpb24gKGNvbnRyb2xzKSB7XG4gICAgICAgIHZhciBib3JkZXI7XG4gICAgICAgIChmdW5jdGlvbiAoYm9yZGVyKSB7XG4gICAgICAgICAgICB2YXIgcmVuZGVyO1xuICAgICAgICAgICAgKGZ1bmN0aW9uIChyZW5kZXIpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFwaW5zO1xuICAgICAgICAgICAgICAgIChmdW5jdGlvbiAodGFwaW5zKSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNhbGNJbm5lck91dGVyKGlucHV0LCBzdGF0ZSwgb3V0cHV0LCBjdHgsIHJlZ2lvbiwgdHJlZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzdGF0ZS5zaG91bGRSZW5kZXIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLlJlY3QuY29weVRvKGlucHV0LmV4dGVudHMsIHN0YXRlLmZpbGxFeHRlbnRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBidCA9IGlucHV0LmJvcmRlclRoaWNrbmVzcztcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbmVydmEuVGhpY2tuZXNzLnNocmlua1JlY3QoYnQsIHN0YXRlLmZpbGxFeHRlbnRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpYSA9IHN0YXRlLmlubmVyQ29ybmVyUmFkaXVzO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5Db3JuZXJSYWRpdXMuY29weVRvKGlucHV0LmNvcm5lclJhZGl1cywgaWEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5UaGlja25lc3Muc2hyaW5rQ29ybmVyUmFkaXVzKGJ0LCBpYSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb2EgPSBzdGF0ZS5vdXRlckNvcm5lclJhZGl1cztcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbmVydmEuQ29ybmVyUmFkaXVzLmNvcHlUbyhpbnB1dC5jb3JuZXJSYWRpdXMsIG9hKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbmVydmEuVGhpY2tuZXNzLmdyb3dDb3JuZXJSYWRpdXMoYnQsIG9hKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRhcGlucy5jYWxjSW5uZXJPdXRlciA9IGNhbGNJbm5lck91dGVyO1xuICAgICAgICAgICAgICAgIH0pKHRhcGlucyA9IHJlbmRlci50YXBpbnMgfHwgKHJlbmRlci50YXBpbnMgPSB7fSkpO1xuICAgICAgICAgICAgfSkocmVuZGVyID0gYm9yZGVyLnJlbmRlciB8fCAoYm9yZGVyLnJlbmRlciA9IHt9KSk7XG4gICAgICAgIH0pKGJvcmRlciA9IGNvbnRyb2xzLmJvcmRlciB8fCAoY29udHJvbHMuYm9yZGVyID0ge30pKTtcbiAgICB9KShjb250cm9scyA9IG1pbmVydmEuY29udHJvbHMgfHwgKG1pbmVydmEuY29udHJvbHMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb250cm9scztcbiAgICAoZnVuY3Rpb24gKGNvbnRyb2xzKSB7XG4gICAgICAgIHZhciBib3JkZXI7XG4gICAgICAgIChmdW5jdGlvbiAoYm9yZGVyKSB7XG4gICAgICAgICAgICB2YXIgcmVuZGVyO1xuICAgICAgICAgICAgKGZ1bmN0aW9uIChyZW5kZXIpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFwaW5zO1xuICAgICAgICAgICAgICAgIChmdW5jdGlvbiAodGFwaW5zKSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNhbGNTaG91bGRSZW5kZXIoaW5wdXQsIHN0YXRlLCBvdXRwdXQsIGN0eCwgcmVnaW9uLCB0cmVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5zaG91bGRSZW5kZXIgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaW5wdXQuYmFja2dyb3VuZCAmJiAhaW5wdXQuYm9yZGVyQnJ1c2gpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWluZXJ2YS5SZWN0LmlzRW1wdHkoaW5wdXQuZXh0ZW50cykpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmlsbE9ubHkgPSAhaW5wdXQuYm9yZGVyQnJ1c2ggfHwgIWlucHV0LmJvcmRlclRoaWNrbmVzcyB8fCBtaW5lcnZhLlRoaWNrbmVzcy5pc0VtcHR5KGlucHV0LmJvcmRlclRoaWNrbmVzcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlsbE9ubHkgJiYgIWlucHV0LmJhY2tncm91bmQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5zaG91bGRSZW5kZXIgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGFwaW5zLmNhbGNTaG91bGRSZW5kZXIgPSBjYWxjU2hvdWxkUmVuZGVyO1xuICAgICAgICAgICAgICAgIH0pKHRhcGlucyA9IHJlbmRlci50YXBpbnMgfHwgKHJlbmRlci50YXBpbnMgPSB7fSkpO1xuICAgICAgICAgICAgfSkocmVuZGVyID0gYm9yZGVyLnJlbmRlciB8fCAoYm9yZGVyLnJlbmRlciA9IHt9KSk7XG4gICAgICAgIH0pKGJvcmRlciA9IGNvbnRyb2xzLmJvcmRlciB8fCAoY29udHJvbHMuYm9yZGVyID0ge30pKTtcbiAgICB9KShjb250cm9scyA9IG1pbmVydmEuY29udHJvbHMgfHwgKG1pbmVydmEuY29udHJvbHMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb250cm9scztcbiAgICAoZnVuY3Rpb24gKGNvbnRyb2xzKSB7XG4gICAgICAgIHZhciBib3JkZXI7XG4gICAgICAgIChmdW5jdGlvbiAoYm9yZGVyKSB7XG4gICAgICAgICAgICB2YXIgcmVuZGVyO1xuICAgICAgICAgICAgKGZ1bmN0aW9uIChyZW5kZXIpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFwaW5zO1xuICAgICAgICAgICAgICAgIChmdW5jdGlvbiAodGFwaW5zKSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGRvUmVuZGVyKGlucHV0LCBzdGF0ZSwgb3V0cHV0LCBjdHgsIHJlZ2lvbiwgdHJlZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzdGF0ZS5zaG91bGRSZW5kZXIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5jb3JlLmhlbHBlcnMucmVuZGVyTGF5b3V0Q2xpcChjdHgsIGlucHV0LCB0cmVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBib3JkZXJCcnVzaCA9IGlucHV0LmJvcmRlckJydXNoO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV4dGVudHMgPSBpbnB1dC5leHRlbnRzO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpbGxFeHRlbnRzID0gc3RhdGUuZmlsbEV4dGVudHM7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmF3ID0gY3R4LnJhdztcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChib3JkZXJCcnVzaCAmJiAhbWluZXJ2YS5SZWN0LmlzRW1wdHkoZXh0ZW50cykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXcuYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyLmhlbHBlcnMuZHJhd0JvcmRlclJlY3QocmF3LCBleHRlbnRzLCBzdGF0ZS5vdXRlckNvcm5lclJhZGl1cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyLmhlbHBlcnMuZHJhd0JvcmRlclJlY3QocmF3LCBmaWxsRXh0ZW50cywgc3RhdGUuaW5uZXJDb3JuZXJSYWRpdXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5maWxsRXgoYm9yZGVyQnJ1c2gsIGV4dGVudHMsIG1pbmVydmEuRmlsbFJ1bGUuRXZlbk9kZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYmFja2dyb3VuZCA9IGlucHV0LmJhY2tncm91bmQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYmFja2dyb3VuZCAmJiAhbWluZXJ2YS5SZWN0LmlzRW1wdHkoZmlsbEV4dGVudHMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlci5oZWxwZXJzLmRyYXdCb3JkZXJSZWN0KHJhdywgZmlsbEV4dGVudHMsIHN0YXRlLmlubmVyQ29ybmVyUmFkaXVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHguZmlsbEV4KGJhY2tncm91bmQsIGZpbGxFeHRlbnRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0YXBpbnMuZG9SZW5kZXIgPSBkb1JlbmRlcjtcbiAgICAgICAgICAgICAgICB9KSh0YXBpbnMgPSByZW5kZXIudGFwaW5zIHx8IChyZW5kZXIudGFwaW5zID0ge30pKTtcbiAgICAgICAgICAgIH0pKHJlbmRlciA9IGJvcmRlci5yZW5kZXIgfHwgKGJvcmRlci5yZW5kZXIgPSB7fSkpO1xuICAgICAgICB9KShib3JkZXIgPSBjb250cm9scy5ib3JkZXIgfHwgKGNvbnRyb2xzLmJvcmRlciA9IHt9KSk7XG4gICAgfSkoY29udHJvbHMgPSBtaW5lcnZhLmNvbnRyb2xzIHx8IChtaW5lcnZhLmNvbnRyb2xzID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29udHJvbHM7XG4gICAgKGZ1bmN0aW9uIChjb250cm9scykge1xuICAgICAgICB2YXIgY2FudmFzO1xuICAgICAgICAoZnVuY3Rpb24gKGNhbnZhcykge1xuICAgICAgICAgICAgdmFyIGFycmFuZ2U7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKGFycmFuZ2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFwaW5zO1xuICAgICAgICAgICAgICAgIChmdW5jdGlvbiAodGFwaW5zKSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGJ1aWxkTGF5b3V0Q2xpcChpbnB1dCwgc3RhdGUsIG91dHB1dCwgdHJlZSwgZmluYWxSZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGMgPSBvdXRwdXQubGF5b3V0Q2xpcDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxjLnggPSBsYy55ID0gbGMud2lkdGggPSBsYy5oZWlnaHQgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGFwaW5zLmJ1aWxkTGF5b3V0Q2xpcCA9IGJ1aWxkTGF5b3V0Q2xpcDtcbiAgICAgICAgICAgICAgICB9KSh0YXBpbnMgPSBhcnJhbmdlLnRhcGlucyB8fCAoYXJyYW5nZS50YXBpbnMgPSB7fSkpO1xuICAgICAgICAgICAgfSkoYXJyYW5nZSA9IGNhbnZhcy5hcnJhbmdlIHx8IChjYW52YXMuYXJyYW5nZSA9IHt9KSk7XG4gICAgICAgIH0pKGNhbnZhcyA9IGNvbnRyb2xzLmNhbnZhcyB8fCAoY29udHJvbHMuY2FudmFzID0ge30pKTtcbiAgICB9KShjb250cm9scyA9IG1pbmVydmEuY29udHJvbHMgfHwgKG1pbmVydmEuY29udHJvbHMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb250cm9scztcbiAgICAoZnVuY3Rpb24gKGNvbnRyb2xzKSB7XG4gICAgICAgIHZhciBjYW52YXM7XG4gICAgICAgIChmdW5jdGlvbiAoY2FudmFzKSB7XG4gICAgICAgICAgICB2YXIgYXJyYW5nZTtcbiAgICAgICAgICAgIChmdW5jdGlvbiAoYXJyYW5nZSkge1xuICAgICAgICAgICAgICAgIHZhciB0YXBpbnM7XG4gICAgICAgICAgICAgICAgKGZ1bmN0aW9uICh0YXBpbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZG9PdmVycmlkZShpbnB1dCwgc3RhdGUsIG91dHB1dCwgdHJlZSwgZmluYWxSZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3IgPSBzdGF0ZS5jaGlsZFJlY3Q7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciB3YWxrZXIgPSB0cmVlLndhbGsoKTsgd2Fsa2VyLnN0ZXAoKTspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZCA9IHdhbGtlci5jdXJyZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbmVydmEuU2l6ZS5jb3B5VG8oY2hpbGQuYXNzZXRzLmRlc2lyZWRTaXplLCBjcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3IueCA9IGNoaWxkLmdldEF0dGFjaGVkVmFsdWUoXCJDYW52YXMuTGVmdFwiKSB8fCAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyLnkgPSBjaGlsZC5nZXRBdHRhY2hlZFZhbHVlKFwiQ2FudmFzLlRvcFwiKSB8fCAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkLmFycmFuZ2UoY3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5TaXplLmNvcHlUbyhzdGF0ZS5maW5hbFNpemUsIHN0YXRlLmFycmFuZ2VkU2l6ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0YXBpbnMuZG9PdmVycmlkZSA9IGRvT3ZlcnJpZGU7XG4gICAgICAgICAgICAgICAgfSkodGFwaW5zID0gYXJyYW5nZS50YXBpbnMgfHwgKGFycmFuZ2UudGFwaW5zID0ge30pKTtcbiAgICAgICAgICAgIH0pKGFycmFuZ2UgPSBjYW52YXMuYXJyYW5nZSB8fCAoY2FudmFzLmFycmFuZ2UgPSB7fSkpO1xuICAgICAgICB9KShjYW52YXMgPSBjb250cm9scy5jYW52YXMgfHwgKGNvbnRyb2xzLmNhbnZhcyA9IHt9KSk7XG4gICAgfSkoY29udHJvbHMgPSBtaW5lcnZhLmNvbnRyb2xzIHx8IChtaW5lcnZhLmNvbnRyb2xzID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29udHJvbHM7XG4gICAgKGZ1bmN0aW9uIChjb250cm9scykge1xuICAgICAgICB2YXIgY2FudmFzO1xuICAgICAgICAoZnVuY3Rpb24gKGNhbnZhcykge1xuICAgICAgICAgICAgdmFyIG1lYXN1cmU7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKG1lYXN1cmUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFwaW5zO1xuICAgICAgICAgICAgICAgIChmdW5jdGlvbiAodGFwaW5zKSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGRvT3ZlcnJpZGUoaW5wdXQsIHN0YXRlLCBvdXRwdXQsIHRyZWUsIGF2YWlsYWJsZVNpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhdmFpbGFibGUgPSBzdGF0ZS5hdmFpbGFibGVTaXplO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlLndpZHRoID0gYXZhaWxhYmxlLmhlaWdodCA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHdhbGtlciA9IHRyZWUud2FsaygpOyB3YWxrZXIuc3RlcCgpOykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhbGtlci5jdXJyZW50Lm1lYXN1cmUoYXZhaWxhYmxlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkZXNpcmVkID0gb3V0cHV0LmRlc2lyZWRTaXplO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVzaXJlZC53aWR0aCA9IGRlc2lyZWQuaGVpZ2h0ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRhcGlucy5kb092ZXJyaWRlID0gZG9PdmVycmlkZTtcbiAgICAgICAgICAgICAgICB9KSh0YXBpbnMgPSBtZWFzdXJlLnRhcGlucyB8fCAobWVhc3VyZS50YXBpbnMgPSB7fSkpO1xuICAgICAgICAgICAgfSkobWVhc3VyZSA9IGNhbnZhcy5tZWFzdXJlIHx8IChjYW52YXMubWVhc3VyZSA9IHt9KSk7XG4gICAgICAgIH0pKGNhbnZhcyA9IGNvbnRyb2xzLmNhbnZhcyB8fCAoY29udHJvbHMuY2FudmFzID0ge30pKTtcbiAgICB9KShjb250cm9scyA9IG1pbmVydmEuY29udHJvbHMgfHwgKG1pbmVydmEuY29udHJvbHMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb250cm9scztcbiAgICAoZnVuY3Rpb24gKGNvbnRyb2xzKSB7XG4gICAgICAgIHZhciBjYW52YXM7XG4gICAgICAgIChmdW5jdGlvbiAoY2FudmFzKSB7XG4gICAgICAgICAgICB2YXIgcHJvY2Vzc3VwO1xuICAgICAgICAgICAgKGZ1bmN0aW9uIChwcm9jZXNzdXApIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFwaW5zO1xuICAgICAgICAgICAgICAgIChmdW5jdGlvbiAodGFwaW5zKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcGlucy5jYWxjUGFpbnRCb3VuZHMgPSBmdW5jdGlvbiAoaW5wdXQsIHN0YXRlLCBvdXRwdXQsIHRyZWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoaW5wdXQuZGlydHlGbGFncyAmIG1pbmVydmEuRGlydHlGbGFncy5Cb3VuZHMpID09PSAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5jb3JlLmhlbHBlcnMuaW50ZXJzZWN0Qm91bmRzV2l0aENsaXBQYXRoKG91dHB1dC5nbG9iYWxCb3VuZHNXaXRoQ2hpbGRyZW4sIG91dHB1dC5leHRlbnRzV2l0aENoaWxkcmVuLCBpbnB1dC5lZmZlY3RQYWRkaW5nLCBpbnB1dC5yZW5kZXJYZm9ybSwgaW5wdXQuY2xpcCwgaW5wdXQubGF5b3V0Q2xpcCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2J3YyA9IG91dHB1dC5zdXJmYWNlQm91bmRzV2l0aENoaWxkcmVuO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN1cmZhY2UgPSB0cmVlLnN1cmZhY2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3VyZmFjZSAmJiB0cmVlLmlzVG9wKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2J3Yy54ID0gc2J3Yy55ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYndjLndpZHRoID0gc3VyZmFjZS53aWR0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYndjLmhlaWdodCA9IHN1cmZhY2UuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5jb3JlLmhlbHBlcnMuaW50ZXJzZWN0Qm91bmRzV2l0aENsaXBQYXRoKHNid2MsIG91dHB1dC5leHRlbnRzV2l0aENoaWxkcmVuLCBpbnB1dC5lZmZlY3RQYWRkaW5nLCBpbnB1dC5hYnNvbHV0ZVhmb3JtLCBpbnB1dC5jbGlwLCBpbnB1dC5sYXlvdXRDbGlwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0pKHRhcGlucyA9IHByb2Nlc3N1cC50YXBpbnMgfHwgKHByb2Nlc3N1cC50YXBpbnMgPSB7fSkpO1xuICAgICAgICAgICAgfSkocHJvY2Vzc3VwID0gY2FudmFzLnByb2Nlc3N1cCB8fCAoY2FudmFzLnByb2Nlc3N1cCA9IHt9KSk7XG4gICAgICAgIH0pKGNhbnZhcyA9IGNvbnRyb2xzLmNhbnZhcyB8fCAoY29udHJvbHMuY2FudmFzID0ge30pKTtcbiAgICB9KShjb250cm9scyA9IG1pbmVydmEuY29udHJvbHMgfHwgKG1pbmVydmEuY29udHJvbHMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb250cm9scztcbiAgICAoZnVuY3Rpb24gKGNvbnRyb2xzKSB7XG4gICAgICAgIHZhciBncmlkO1xuICAgICAgICAoZnVuY3Rpb24gKGdyaWQpIHtcbiAgICAgICAgICAgIHZhciBhcnJhbmdlO1xuICAgICAgICAgICAgKGZ1bmN0aW9uIChhcnJhbmdlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcGlucztcbiAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBjYWxjQ29uc3VtZWQoaW5wdXQsIHN0YXRlLCBvdXRwdXQsIHRyZWUsIGZpbmFsUmVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbiA9IHN0YXRlLmNvbnN1bWVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uLndpZHRoID0gY29uLmhlaWdodCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZnMgPSBzdGF0ZS5maW5hbFNpemU7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY20gPSBpbnB1dC5ncmlkU3RhdGUuY29sTWF0cml4O1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjbS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbi53aWR0aCArPSAoY21baV1baV0ub2ZmZXJlZCA9IGNtW2ldW2ldLmRlc2lyZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJtID0gaW5wdXQuZ3JpZFN0YXRlLnJvd01hdHJpeDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcm0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb24uaGVpZ2h0ICs9IChybVtpXVtpXS5vZmZlcmVkID0gcm1baV1baV0uZGVzaXJlZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29uLndpZHRoICE9PSBmcy53aWR0aClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBncmlkLmhlbHBlcnMuZXhwYW5kU3RhckNvbHMoY20sIGlucHV0LmNvbHVtbkRlZmluaXRpb25zLCBmcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29uLmhlaWdodCAhPT0gZnMuaGVpZ2h0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyaWQuaGVscGVycy5leHBhbmRTdGFyUm93cyhybSwgaW5wdXQucm93RGVmaW5pdGlvbnMsIGZzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRhcGlucy5jYWxjQ29uc3VtZWQgPSBjYWxjQ29uc3VtZWQ7XG4gICAgICAgICAgICAgICAgfSkodGFwaW5zID0gYXJyYW5nZS50YXBpbnMgfHwgKGFycmFuZ2UudGFwaW5zID0ge30pKTtcbiAgICAgICAgICAgIH0pKGFycmFuZ2UgPSBncmlkLmFycmFuZ2UgfHwgKGdyaWQuYXJyYW5nZSA9IHt9KSk7XG4gICAgICAgIH0pKGdyaWQgPSBjb250cm9scy5ncmlkIHx8IChjb250cm9scy5ncmlkID0ge30pKTtcbiAgICB9KShjb250cm9scyA9IG1pbmVydmEuY29udHJvbHMgfHwgKG1pbmVydmEuY29udHJvbHMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb250cm9scztcbiAgICAoZnVuY3Rpb24gKGNvbnRyb2xzKSB7XG4gICAgICAgIHZhciBncmlkO1xuICAgICAgICAoZnVuY3Rpb24gKGdyaWQpIHtcbiAgICAgICAgICAgIHZhciBhcnJhbmdlO1xuICAgICAgICAgICAgKGZ1bmN0aW9uIChhcnJhbmdlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcGlucztcbiAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBkb092ZXJyaWRlKGlucHV0LCBzdGF0ZSwgb3V0cHV0LCB0cmVlLCBmaW5hbFJlY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjciA9IHN0YXRlLmNoaWxkUmVjdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBybSA9IGlucHV0LmdyaWRTdGF0ZS5yb3dNYXRyaXg7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY20gPSBpbnB1dC5ncmlkU3RhdGUuY29sTWF0cml4O1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgd2Fsa2VyID0gdHJlZS53YWxrKCk7IHdhbGtlci5zdGVwKCk7KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkID0gd2Fsa2VyLmN1cnJlbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbCA9IE1hdGgubWluKGNoaWxkLmdldEF0dGFjaGVkVmFsdWUoXCJHcmlkLkNvbHVtblwiKSwgY20ubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzTmFOKGNvbCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJvdyA9IE1hdGgubWluKGNoaWxkLmdldEF0dGFjaGVkVmFsdWUoXCJHcmlkLlJvd1wiKSwgcm0ubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzTmFOKHJvdykpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdyA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbHNwYW4gPSBNYXRoLm1pbihjaGlsZC5nZXRBdHRhY2hlZFZhbHVlKFwiR3JpZC5Db2x1bW5TcGFuXCIpLCBjbS5sZW5ndGggLSBjb2wpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc05hTihjb2xzcGFuKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sc3BhbiA9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJvd3NwYW4gPSBNYXRoLm1pbihjaGlsZC5nZXRBdHRhY2hlZFZhbHVlKFwiR3JpZC5Sb3dTcGFuXCIpLCBybS5sZW5ndGggLSByb3cpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc05hTihyb3dzcGFuKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93c3BhbiA9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3IueCA9IGNyLnkgPSBjci53aWR0aCA9IGNyLmhlaWdodCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb2w7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjci54ICs9IGNtW2ldW2ldLm9mZmVyZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSBjb2w7IGkgPCBjb2wgKyBjb2xzcGFuOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3Iud2lkdGggKz0gY21baV1baV0ub2ZmZXJlZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByb3c7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjci55ICs9IHJtW2ldW2ldLm9mZmVyZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSByb3c7IGkgPCByb3cgKyByb3dzcGFuOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3IuaGVpZ2h0ICs9IHJtW2ldW2ldLm9mZmVyZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkLmFycmFuZ2UoY3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5TaXplLmNvcHlUbyhzdGF0ZS5maW5hbFNpemUsIHN0YXRlLmFycmFuZ2VkU2l6ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0YXBpbnMuZG9PdmVycmlkZSA9IGRvT3ZlcnJpZGU7XG4gICAgICAgICAgICAgICAgfSkodGFwaW5zID0gYXJyYW5nZS50YXBpbnMgfHwgKGFycmFuZ2UudGFwaW5zID0ge30pKTtcbiAgICAgICAgICAgIH0pKGFycmFuZ2UgPSBncmlkLmFycmFuZ2UgfHwgKGdyaWQuYXJyYW5nZSA9IHt9KSk7XG4gICAgICAgIH0pKGdyaWQgPSBjb250cm9scy5ncmlkIHx8IChjb250cm9scy5ncmlkID0ge30pKTtcbiAgICB9KShjb250cm9scyA9IG1pbmVydmEuY29udHJvbHMgfHwgKG1pbmVydmEuY29udHJvbHMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb250cm9scztcbiAgICAoZnVuY3Rpb24gKGNvbnRyb2xzKSB7XG4gICAgICAgIHZhciBncmlkO1xuICAgICAgICAoZnVuY3Rpb24gKGdyaWQpIHtcbiAgICAgICAgICAgIHZhciBhcnJhbmdlO1xuICAgICAgICAgICAgKGZ1bmN0aW9uIChhcnJhbmdlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcGlucztcbiAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiByZXN0b3JlTWVhc3VyZVJlc3VsdHMoaW5wdXQsIHN0YXRlLCBvdXRwdXQsIHRyZWUsIGZpbmFsUmVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgcm0gPSBpbnB1dC5ncmlkU3RhdGUucm93TWF0cml4LCBpID0gMDsgaSA8IHJtLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPD0gaTsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJtW2ldW2pdLm9mZmVyZWQgPSBybVtpXVtqXS5vcmlnaW5hbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBjbSA9IGlucHV0LmdyaWRTdGF0ZS5jb2xNYXRyaXgsIGkgPSAwOyBpIDwgY20ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8PSBpOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY21baV1bal0ub2ZmZXJlZCA9IGNtW2ldW2pdLm9yaWdpbmFsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRhcGlucy5yZXN0b3JlTWVhc3VyZVJlc3VsdHMgPSByZXN0b3JlTWVhc3VyZVJlc3VsdHM7XG4gICAgICAgICAgICAgICAgfSkodGFwaW5zID0gYXJyYW5nZS50YXBpbnMgfHwgKGFycmFuZ2UudGFwaW5zID0ge30pKTtcbiAgICAgICAgICAgIH0pKGFycmFuZ2UgPSBncmlkLmFycmFuZ2UgfHwgKGdyaWQuYXJyYW5nZSA9IHt9KSk7XG4gICAgICAgIH0pKGdyaWQgPSBjb250cm9scy5ncmlkIHx8IChjb250cm9scy5ncmlkID0ge30pKTtcbiAgICB9KShjb250cm9scyA9IG1pbmVydmEuY29udHJvbHMgfHwgKG1pbmVydmEuY29udHJvbHMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb250cm9scztcbiAgICAoZnVuY3Rpb24gKGNvbnRyb2xzKSB7XG4gICAgICAgIHZhciBncmlkO1xuICAgICAgICAoZnVuY3Rpb24gKGdyaWQpIHtcbiAgICAgICAgICAgIHZhciBhcnJhbmdlO1xuICAgICAgICAgICAgKGZ1bmN0aW9uIChhcnJhbmdlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcGlucztcbiAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBzZXRBY3R1YWxzKGlucHV0LCBzdGF0ZSwgb3V0cHV0LCB0cmVlLCBmaW5hbFJlY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGNvbGRlZnMgPSBpbnB1dC5jb2x1bW5EZWZpbml0aW9ucywgY20gPSBpbnB1dC5ncmlkU3RhdGUuY29sTWF0cml4LCBpID0gMDsgaSA8IGNvbGRlZnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xkZWZzW2ldLnNldEFjdHVhbFdpZHRoKGNtW2ldW2ldLm9mZmVyZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgcm93ZGVmcyA9IGlucHV0LnJvd0RlZmluaXRpb25zLCBybSA9IGlucHV0LmdyaWRTdGF0ZS5yb3dNYXRyaXgsIGkgPSAwOyBpIDwgcm93ZGVmcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvd2RlZnNbaV0uc2V0QWN0dWFsSGVpZ2h0KHJtW2ldW2ldLm9mZmVyZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGFwaW5zLnNldEFjdHVhbHMgPSBzZXRBY3R1YWxzO1xuICAgICAgICAgICAgICAgIH0pKHRhcGlucyA9IGFycmFuZ2UudGFwaW5zIHx8IChhcnJhbmdlLnRhcGlucyA9IHt9KSk7XG4gICAgICAgICAgICB9KShhcnJhbmdlID0gZ3JpZC5hcnJhbmdlIHx8IChncmlkLmFycmFuZ2UgPSB7fSkpO1xuICAgICAgICB9KShncmlkID0gY29udHJvbHMuZ3JpZCB8fCAoY29udHJvbHMuZ3JpZCA9IHt9KSk7XG4gICAgfSkoY29udHJvbHMgPSBtaW5lcnZhLmNvbnRyb2xzIHx8IChtaW5lcnZhLmNvbnRyb2xzID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29udHJvbHM7XG4gICAgKGZ1bmN0aW9uIChjb250cm9scykge1xuICAgICAgICB2YXIgZ3JpZDtcbiAgICAgICAgKGZ1bmN0aW9uIChncmlkKSB7XG4gICAgICAgICAgICB2YXIgbWVhc3VyZTtcbiAgICAgICAgICAgIChmdW5jdGlvbiAobWVhc3VyZSkge1xuICAgICAgICAgICAgICAgIHZhciB0YXBpbnM7XG4gICAgICAgICAgICAgICAgKGZ1bmN0aW9uICh0YXBpbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gYnVpbGRTaGFwZShpbnB1dCwgc3RhdGUsIG91dHB1dCwgdHJlZSwgZmluYWxSZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2hhcGVzID0gc3RhdGUuY2hpbGRTaGFwZXM7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY20gPSBpbnB1dC5ncmlkU3RhdGUuY29sTWF0cml4O1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJtID0gaW5wdXQuZ3JpZFN0YXRlLnJvd01hdHJpeDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHdhbGtlciA9IHRyZWUud2FsaygpLCBpID0gMDsgd2Fsa2VyLnN0ZXAoKTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgPiBzaGFwZXMubGVuZ3RoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaGFwZXMucHVzaChuZXcgbWVhc3VyZS5HcmlkQ2hpbGRTaGFwZSgpLmluaXQod2Fsa2VyLmN1cnJlbnQsIHJtLCBjbSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHNoYXBlc1tpXSA9IHNoYXBlc1tpXSB8fCBuZXcgbWVhc3VyZS5HcmlkQ2hpbGRTaGFwZSgpKS5pbml0KHdhbGtlci5jdXJyZW50LCBybSwgY20pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgPCBzaGFwZXMubGVuZ3RoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNoYXBlcy5zbGljZShpLCBzaGFwZXMubGVuZ3RoIC0gaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5ncmlkU2hhcGUuaW5pdChzdGF0ZS5jaGlsZFNoYXBlcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5wbGFjZW1lbnRzLmxlbmd0aCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5wbGFjZW1lbnRzLnB1c2gobmV3IG1lYXN1cmUuR3JpZENoaWxkUGxhY2VtZW50KG51bGwsIDAsIDAsIDApKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLnBsYWNlbWVudEluZGV4ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRhcGlucy5idWlsZFNoYXBlID0gYnVpbGRTaGFwZTtcbiAgICAgICAgICAgICAgICB9KSh0YXBpbnMgPSBtZWFzdXJlLnRhcGlucyB8fCAobWVhc3VyZS50YXBpbnMgPSB7fSkpO1xuICAgICAgICAgICAgfSkobWVhc3VyZSA9IGdyaWQubWVhc3VyZSB8fCAoZ3JpZC5tZWFzdXJlID0ge30pKTtcbiAgICAgICAgfSkoZ3JpZCA9IGNvbnRyb2xzLmdyaWQgfHwgKGNvbnRyb2xzLmdyaWQgPSB7fSkpO1xuICAgIH0pKGNvbnRyb2xzID0gbWluZXJ2YS5jb250cm9scyB8fCAobWluZXJ2YS5jb250cm9scyA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvbnRyb2xzO1xuICAgIChmdW5jdGlvbiAoY29udHJvbHMpIHtcbiAgICAgICAgdmFyIGdyaWQ7XG4gICAgICAgIChmdW5jdGlvbiAoZ3JpZCkge1xuICAgICAgICAgICAgdmFyIG1lYXN1cmU7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKG1lYXN1cmUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFwaW5zO1xuICAgICAgICAgICAgICAgIChmdW5jdGlvbiAodGFwaW5zKSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNyZWF0ZURvT3ZlcnJpZGVQYXNzKHBhc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBkb092ZXJyaWRlUGFzcyhpbnB1dCwgc3RhdGUsIG91dHB1dCwgdHJlZSwgZmluYWxSZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJtID0gaW5wdXQuZ3JpZFN0YXRlLnJvd01hdHJpeDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY20gPSBpbnB1dC5ncmlkU3RhdGUuY29sTWF0cml4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0cmVlLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JpZC5oZWxwZXJzLmV4cGFuZFN0YXJDb2xzKGNtLCBpbnB1dC5jb2x1bW5EZWZpbml0aW9ucywgc3RhdGUuYXZhaWxhYmxlU2l6ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyaWQuaGVscGVycy5leHBhbmRTdGFyUm93cyhybSwgaW5wdXQucm93RGVmaW5pdGlvbnMsIHN0YXRlLmF2YWlsYWJsZVNpemUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGxhY2VtZW50cyA9IHN0YXRlLnBsYWNlbWVudHM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBsYWNlbWVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VwYXJhdG9yID0gcGxhY2VtZW50c1swXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2hhcGVzID0gc3RhdGUuY2hpbGRTaGFwZXM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkU2l6ZSA9IHN0YXRlLmNoaWxkU2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciB3YWxrZXIgPSB0cmVlLndhbGsoKSwgaSA9IDA7IHdhbGtlci5zdGVwKCk7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSB3YWxrZXIuY3VycmVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkU2hhcGUgPSBzaGFwZXNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY2hpbGRTaGFwZS5zaG91bGRNZWFzdXJlUGFzcyhzdGF0ZS5ncmlkU2hhcGUsIGNoaWxkU2l6ZSwgcGFzcykpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRTaGFwZS5zaXplKGNoaWxkU2l6ZSwgcm0sIGNtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQubWVhc3VyZShjaGlsZFNpemUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFzcyAhPT0gbWVhc3VyZS5PdmVycmlkZVBhc3MuU3RhckF1dG8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlbWVudCA9IG1lYXN1cmUuR3JpZENoaWxkUGxhY2VtZW50LnJvdyhybSwgY2hpbGRTaGFwZSwgY2hpbGQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBsYWNlbWVudC5yb3cgPT09IHBsYWNlbWVudC5jb2wpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnRzLnNwbGljZShzdGF0ZS5wbGFjZW1lbnRJbmRleCArIDEsIDAsIHBsYWNlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnRzLnNwbGljZShzdGF0ZS5wbGFjZW1lbnRJbmRleCwgMCwgcGxhY2VtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5wbGFjZW1lbnRJbmRleCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlbWVudCA9IG1lYXN1cmUuR3JpZENoaWxkUGxhY2VtZW50LmNvbChjbSwgY2hpbGRTaGFwZSwgY2hpbGQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGxhY2VtZW50LnJvdyA9PT0gcGxhY2VtZW50LmNvbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50cy5zcGxpY2Uoc3RhdGUucGxhY2VtZW50SW5kZXggKyAxLCAwLCBwbGFjZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50cy5zcGxpY2Uoc3RhdGUucGxhY2VtZW50SW5kZXgsIDAsIHBsYWNlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5wbGFjZW1lbnRJbmRleCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlbWVudHMuc3BsaWNlKHN0YXRlLnBsYWNlbWVudEluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5wbGFjZW1lbnRJbmRleCA9IC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChwbGFjZW1lbnQgPSBwbGFjZW1lbnRzLnBvcCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjZWxsID0gcGxhY2VtZW50Lm1hdHJpeFtwbGFjZW1lbnQucm93XVtwbGFjZW1lbnQuY29sXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VsbC5kZXNpcmVkID0gTWF0aC5tYXgoY2VsbC5kZXNpcmVkLCBwbGFjZW1lbnQuc2l6ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyaWQuaGVscGVycy5hbGxvY2F0ZURlc2lyZWRTaXplKHJtLCBjbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLnBsYWNlbWVudEluZGV4ID0gcGxhY2VtZW50cy5wdXNoKHNlcGFyYXRvcikgLSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0YXBpbnMuY3JlYXRlRG9PdmVycmlkZVBhc3MgPSBjcmVhdGVEb092ZXJyaWRlUGFzcztcbiAgICAgICAgICAgICAgICB9KSh0YXBpbnMgPSBtZWFzdXJlLnRhcGlucyB8fCAobWVhc3VyZS50YXBpbnMgPSB7fSkpO1xuICAgICAgICAgICAgfSkobWVhc3VyZSA9IGdyaWQubWVhc3VyZSB8fCAoZ3JpZC5tZWFzdXJlID0ge30pKTtcbiAgICAgICAgfSkoZ3JpZCA9IGNvbnRyb2xzLmdyaWQgfHwgKGNvbnRyb2xzLmdyaWQgPSB7fSkpO1xuICAgIH0pKGNvbnRyb2xzID0gbWluZXJ2YS5jb250cm9scyB8fCAobWluZXJ2YS5jb250cm9scyA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvbnRyb2xzO1xuICAgIChmdW5jdGlvbiAoY29udHJvbHMpIHtcbiAgICAgICAgdmFyIGdyaWQ7XG4gICAgICAgIChmdW5jdGlvbiAoZ3JpZCkge1xuICAgICAgICAgICAgdmFyIG1lYXN1cmU7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKG1lYXN1cmUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFwaW5zO1xuICAgICAgICAgICAgICAgIChmdW5jdGlvbiAodGFwaW5zKSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGRvT3ZlcnJpZGUoaW5wdXQsIHN0YXRlLCBvdXRwdXQsIHRyZWUsIGZpbmFsUmVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRlc2lyZWQgPSBvdXRwdXQuZGVzaXJlZFNpemU7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNpcmVkLndpZHRoID0gZGVzaXJlZC5oZWlnaHQgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgY20gPSBpbnB1dC5ncmlkU3RhdGUuY29sTWF0cml4LCBpID0gMDsgaSA8IGNtLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzaXJlZC53aWR0aCArPSBjbVtpXVtpXS5kZXNpcmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgcm0gPSBpbnB1dC5ncmlkU3RhdGUucm93TWF0cml4LCBpID0gMDsgaSA8IHJtLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzaXJlZC5oZWlnaHQgKz0gcm1baV1baV0uZGVzaXJlZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRhcGlucy5kb092ZXJyaWRlID0gZG9PdmVycmlkZTtcbiAgICAgICAgICAgICAgICB9KSh0YXBpbnMgPSBtZWFzdXJlLnRhcGlucyB8fCAobWVhc3VyZS50YXBpbnMgPSB7fSkpO1xuICAgICAgICAgICAgfSkobWVhc3VyZSA9IGdyaWQubWVhc3VyZSB8fCAoZ3JpZC5tZWFzdXJlID0ge30pKTtcbiAgICAgICAgfSkoZ3JpZCA9IGNvbnRyb2xzLmdyaWQgfHwgKGNvbnRyb2xzLmdyaWQgPSB7fSkpO1xuICAgIH0pKGNvbnRyb2xzID0gbWluZXJ2YS5jb250cm9scyB8fCAobWluZXJ2YS5jb250cm9scyA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvbnRyb2xzO1xuICAgIChmdW5jdGlvbiAoY29udHJvbHMpIHtcbiAgICAgICAgdmFyIGdyaWQ7XG4gICAgICAgIChmdW5jdGlvbiAoZ3JpZCkge1xuICAgICAgICAgICAgdmFyIG1lYXN1cmU7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKG1lYXN1cmUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFwaW5zO1xuICAgICAgICAgICAgICAgIChmdW5jdGlvbiAodGFwaW5zKSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGVuc3VyZUNvbE1hdHJpeChpbnB1dCwgc3RhdGUsIG91dHB1dCwgdHJlZSwgZmluYWxSZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29sQ291bnQgPSBpbnB1dC5jb2x1bW5EZWZpbml0aW9ucy5sZW5ndGggfHwgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjbSA9IGlucHV0LmdyaWRTdGF0ZS5jb2xNYXRyaXg7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY20ubGVuZ3RoID4gY29sQ291bnQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY20uc3BsaWNlKGNvbENvdW50LCBjbS5sZW5ndGggLSBjb2xDb3VudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBjID0gMDsgYyA8IGNvbENvdW50OyBjKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY20ubGVuZ3RoIDw9IGMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNtLnB1c2goW10pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtcm93ID0gY21bY107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1yb3cubGVuZ3RoID4gYylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbXJvdy5zcGxpY2UoYywgbXJvdy5sZW5ndGggLSBjKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBjYyA9IDA7IGNjIDw9IGM7IGNjKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1yb3cubGVuZ3RoIDw9IGNjKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbXJvdy5wdXNoKG5ldyBncmlkLlNlZ21lbnQoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyaWQuU2VnbWVudC5pbml0KG1yb3dbY2NdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0YXBpbnMuZW5zdXJlQ29sTWF0cml4ID0gZW5zdXJlQ29sTWF0cml4O1xuICAgICAgICAgICAgICAgIH0pKHRhcGlucyA9IG1lYXN1cmUudGFwaW5zIHx8IChtZWFzdXJlLnRhcGlucyA9IHt9KSk7XG4gICAgICAgICAgICB9KShtZWFzdXJlID0gZ3JpZC5tZWFzdXJlIHx8IChncmlkLm1lYXN1cmUgPSB7fSkpO1xuICAgICAgICB9KShncmlkID0gY29udHJvbHMuZ3JpZCB8fCAoY29udHJvbHMuZ3JpZCA9IHt9KSk7XG4gICAgfSkoY29udHJvbHMgPSBtaW5lcnZhLmNvbnRyb2xzIHx8IChtaW5lcnZhLmNvbnRyb2xzID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29udHJvbHM7XG4gICAgKGZ1bmN0aW9uIChjb250cm9scykge1xuICAgICAgICB2YXIgZ3JpZDtcbiAgICAgICAgKGZ1bmN0aW9uIChncmlkKSB7XG4gICAgICAgICAgICB2YXIgbWVhc3VyZTtcbiAgICAgICAgICAgIChmdW5jdGlvbiAobWVhc3VyZSkge1xuICAgICAgICAgICAgICAgIHZhciB0YXBpbnM7XG4gICAgICAgICAgICAgICAgKGZ1bmN0aW9uICh0YXBpbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZW5zdXJlUm93TWF0cml4KGlucHV0LCBzdGF0ZSwgb3V0cHV0LCB0cmVlLCBmaW5hbFJlY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByb3dDb3VudCA9IGlucHV0LnJvd0RlZmluaXRpb25zLmxlbmd0aCB8fCAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJtID0gaW5wdXQuZ3JpZFN0YXRlLnJvd01hdHJpeDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChybS5sZW5ndGggPiByb3dDb3VudClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBybS5zcGxpY2Uocm93Q291bnQsIHJtLmxlbmd0aCAtIHJvd0NvdW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHIgPSAwOyByIDwgcm93Q291bnQ7IHIrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChybS5sZW5ndGggPD0gcilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm0ucHVzaChbXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1yb3cgPSBybVtyXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobXJvdy5sZW5ndGggPiAociArIDEpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtcm93LnNwbGljZShyLCBtcm93Lmxlbmd0aCAtIHIgLSAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciByciA9IDA7IHJyIDw9IHI7IHJyKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1yb3cubGVuZ3RoIDw9IHJyKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbXJvdy5wdXNoKG5ldyBncmlkLlNlZ21lbnQoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyaWQuU2VnbWVudC5pbml0KG1yb3dbcnJdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0YXBpbnMuZW5zdXJlUm93TWF0cml4ID0gZW5zdXJlUm93TWF0cml4O1xuICAgICAgICAgICAgICAgIH0pKHRhcGlucyA9IG1lYXN1cmUudGFwaW5zIHx8IChtZWFzdXJlLnRhcGlucyA9IHt9KSk7XG4gICAgICAgICAgICB9KShtZWFzdXJlID0gZ3JpZC5tZWFzdXJlIHx8IChncmlkLm1lYXN1cmUgPSB7fSkpO1xuICAgICAgICB9KShncmlkID0gY29udHJvbHMuZ3JpZCB8fCAoY29udHJvbHMuZ3JpZCA9IHt9KSk7XG4gICAgfSkoY29udHJvbHMgPSBtaW5lcnZhLmNvbnRyb2xzIHx8IChtaW5lcnZhLmNvbnRyb2xzID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL0dyaWRVbml0VHlwZS50c1wiIC8+XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb250cm9scztcbiAgICAoZnVuY3Rpb24gKGNvbnRyb2xzKSB7XG4gICAgICAgIHZhciBncmlkO1xuICAgICAgICAoZnVuY3Rpb24gKGdyaWQpIHtcbiAgICAgICAgICAgIHZhciBtZWFzdXJlO1xuICAgICAgICAgICAgKGZ1bmN0aW9uIChtZWFzdXJlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcGlucztcbiAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgREVGQVVMVF9HUklEX0xFTiA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFZhbHVlOiAxLjAsXG4gICAgICAgICAgICAgICAgICAgICAgICBUeXBlOiBncmlkLkdyaWRVbml0VHlwZS5TdGFyXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHByZXBhcmVDb2xNYXRyaXgoaW5wdXQsIHN0YXRlLCBvdXRwdXQsIHRyZWUsIGZpbmFsUmVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbGRlZnMgPSBpbnB1dC5jb2x1bW5EZWZpbml0aW9ucztcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjbSA9IGlucHV0LmdyaWRTdGF0ZS5jb2xNYXRyaXg7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdHMgPSBzdGF0ZS50b3RhbFN0YXJzO1xuICAgICAgICAgICAgICAgICAgICAgICAgdHMud2lkdGggPSAwLjA7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29sZGVmcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWNlbGwgPSBjbVswXVswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtY2VsbC50eXBlID0gZ3JpZC5HcmlkVW5pdFR5cGUuU3RhcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtY2VsbC5zdGFycyA9IDEuMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cy53aWR0aCArPSAxLjA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbGRlZnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29sZGVmID0gY29sZGVmc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgd2lkdGggPSBjb2xkZWYuV2lkdGggfHwgREVGQVVMVF9HUklEX0xFTjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xkZWYuc2V0QWN0dWFsV2lkdGgoTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2VsbCA9IGdyaWQuU2VnbWVudC5pbml0KGNtW2ldW2ldLCAwLjAsIGNvbGRlZi5NaW5XaWR0aCwgY29sZGVmLk1heFdpZHRoLCB3aWR0aC5UeXBlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAod2lkdGguVHlwZSA9PT0gZ3JpZC5HcmlkVW5pdFR5cGUuUGl4ZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VsbC5kZXNpcmVkID0gY2VsbC5vZmZlcmVkID0gY2VsbC5jbGFtcCh3aWR0aC5WYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbGRlZi5zZXRBY3R1YWxXaWR0aChjZWxsLmRlc2lyZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh3aWR0aC5UeXBlID09PSBncmlkLkdyaWRVbml0VHlwZS5TdGFyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGwuc3RhcnMgPSB3aWR0aC5WYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHMud2lkdGggKz0gd2lkdGguVmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHdpZHRoLlR5cGUgPT09IGdyaWQuR3JpZFVuaXRUeXBlLkF1dG8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VsbC5kZXNpcmVkID0gY2VsbC5vZmZlcmVkID0gY2VsbC5jbGFtcCgwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0YXBpbnMucHJlcGFyZUNvbE1hdHJpeCA9IHByZXBhcmVDb2xNYXRyaXg7XG4gICAgICAgICAgICAgICAgfSkodGFwaW5zID0gbWVhc3VyZS50YXBpbnMgfHwgKG1lYXN1cmUudGFwaW5zID0ge30pKTtcbiAgICAgICAgICAgIH0pKG1lYXN1cmUgPSBncmlkLm1lYXN1cmUgfHwgKGdyaWQubWVhc3VyZSA9IHt9KSk7XG4gICAgICAgIH0pKGdyaWQgPSBjb250cm9scy5ncmlkIHx8IChjb250cm9scy5ncmlkID0ge30pKTtcbiAgICB9KShjb250cm9scyA9IG1pbmVydmEuY29udHJvbHMgfHwgKG1pbmVydmEuY29udHJvbHMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb250cm9scztcbiAgICAoZnVuY3Rpb24gKGNvbnRyb2xzKSB7XG4gICAgICAgIHZhciBncmlkO1xuICAgICAgICAoZnVuY3Rpb24gKGdyaWQpIHtcbiAgICAgICAgICAgIHZhciBtZWFzdXJlO1xuICAgICAgICAgICAgKGZ1bmN0aW9uIChtZWFzdXJlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcGlucztcbiAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgREVGQVVMVF9HUklEX0xFTiA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFZhbHVlOiAxLjAsXG4gICAgICAgICAgICAgICAgICAgICAgICBUeXBlOiBncmlkLkdyaWRVbml0VHlwZS5TdGFyXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHByZXBhcmVSb3dNYXRyaXgoaW5wdXQsIHN0YXRlLCBvdXRwdXQsIHRyZWUsIGZpbmFsUmVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJvd2RlZnMgPSBpbnB1dC5yb3dEZWZpbml0aW9ucztcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBybSA9IGlucHV0LmdyaWRTdGF0ZS5yb3dNYXRyaXg7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdHMgPSBzdGF0ZS50b3RhbFN0YXJzO1xuICAgICAgICAgICAgICAgICAgICAgICAgdHMuaGVpZ2h0ID0gMC4wO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJvd2RlZnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1jZWxsID0gcm1bMF1bMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWNlbGwudHlwZSA9IGdyaWQuR3JpZFVuaXRUeXBlLlN0YXI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWNlbGwuc3RhcnMgPSAxLjA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHMuaGVpZ2h0ICs9IDEuMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcm93ZGVmcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByb3dkZWYgPSByb3dkZWZzW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoZWlnaHQgPSByb3dkZWYuSGVpZ2h0IHx8IERFRkFVTFRfR1JJRF9MRU47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93ZGVmLnNldEFjdHVhbEhlaWdodChOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjZWxsID0gZ3JpZC5TZWdtZW50LmluaXQocm1baV1baV0sIDAuMCwgcm93ZGVmLk1pbkhlaWdodCwgcm93ZGVmLk1heEhlaWdodCwgaGVpZ2h0LlR5cGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoZWlnaHQuVHlwZSA9PT0gZ3JpZC5HcmlkVW5pdFR5cGUuUGl4ZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VsbC5kZXNpcmVkID0gY2VsbC5vZmZlcmVkID0gY2VsbC5jbGFtcChoZWlnaHQuVmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3dkZWYuc2V0QWN0dWFsSGVpZ2h0KGNlbGwuZGVzaXJlZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGhlaWdodC5UeXBlID09PSBncmlkLkdyaWRVbml0VHlwZS5TdGFyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGwuc3RhcnMgPSBoZWlnaHQuVmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRzLmhlaWdodCArPSBoZWlnaHQuVmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGhlaWdodC5UeXBlID09PSBncmlkLkdyaWRVbml0VHlwZS5BdXRvKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGwuZGVzaXJlZCA9IGNlbGwub2ZmZXJlZCA9IGNlbGwuY2xhbXAoMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGFwaW5zLnByZXBhcmVSb3dNYXRyaXggPSBwcmVwYXJlUm93TWF0cml4O1xuICAgICAgICAgICAgICAgIH0pKHRhcGlucyA9IG1lYXN1cmUudGFwaW5zIHx8IChtZWFzdXJlLnRhcGlucyA9IHt9KSk7XG4gICAgICAgICAgICB9KShtZWFzdXJlID0gZ3JpZC5tZWFzdXJlIHx8IChncmlkLm1lYXN1cmUgPSB7fSkpO1xuICAgICAgICB9KShncmlkID0gY29udHJvbHMuZ3JpZCB8fCAoY29udHJvbHMuZ3JpZCA9IHt9KSk7XG4gICAgfSkoY29udHJvbHMgPSBtaW5lcnZhLmNvbnRyb2xzIHx8IChtaW5lcnZhLmNvbnRyb2xzID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29udHJvbHM7XG4gICAgKGZ1bmN0aW9uIChjb250cm9scykge1xuICAgICAgICB2YXIgZ3JpZDtcbiAgICAgICAgKGZ1bmN0aW9uIChncmlkKSB7XG4gICAgICAgICAgICB2YXIgbWVhc3VyZTtcbiAgICAgICAgICAgIChmdW5jdGlvbiAobWVhc3VyZSkge1xuICAgICAgICAgICAgICAgIHZhciB0YXBpbnM7XG4gICAgICAgICAgICAgICAgKGZ1bmN0aW9uICh0YXBpbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gc2F2ZU1lYXN1cmVSZXN1bHRzKGlucHV0LCBzdGF0ZSwgb3V0cHV0LCB0cmVlLCBmaW5hbFJlY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHJtID0gaW5wdXQuZ3JpZFN0YXRlLnJvd01hdHJpeCwgaSA9IDA7IGkgPCBybS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDw9IGk7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBybVtpXVtqXS5vcmlnaW5hbCA9IHJtW2ldW2pdLm9mZmVyZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgY20gPSBpbnB1dC5ncmlkU3RhdGUuY29sTWF0cml4LCBpID0gMDsgaSA8IGNtLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8PSBpOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY21baV1bal0ub3JpZ2luYWwgPSBjbVtpXVtqXS5vZmZlcmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRhcGlucy5zYXZlTWVhc3VyZVJlc3VsdHMgPSBzYXZlTWVhc3VyZVJlc3VsdHM7XG4gICAgICAgICAgICAgICAgfSkodGFwaW5zID0gbWVhc3VyZS50YXBpbnMgfHwgKG1lYXN1cmUudGFwaW5zID0ge30pKTtcbiAgICAgICAgICAgIH0pKG1lYXN1cmUgPSBncmlkLm1lYXN1cmUgfHwgKGdyaWQubWVhc3VyZSA9IHt9KSk7XG4gICAgICAgIH0pKGdyaWQgPSBjb250cm9scy5ncmlkIHx8IChjb250cm9scy5ncmlkID0ge30pKTtcbiAgICB9KShjb250cm9scyA9IG1pbmVydmEuY29udHJvbHMgfHwgKG1pbmVydmEuY29udHJvbHMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb250cm9scztcbiAgICAoZnVuY3Rpb24gKGNvbnRyb2xzKSB7XG4gICAgICAgIHZhciBncmlkO1xuICAgICAgICAoZnVuY3Rpb24gKGdyaWQpIHtcbiAgICAgICAgICAgIHZhciBwcm9jZXNzdXA7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKHByb2Nlc3N1cCkge1xuICAgICAgICAgICAgICAgIHZhciB0YXBpbnM7XG4gICAgICAgICAgICAgICAgKGZ1bmN0aW9uICh0YXBpbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gY2FsY0V4dGVudHMoaW5wdXQsIHN0YXRlLCBvdXRwdXQsIHRyZWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoaW5wdXQuZGlydHlGbGFncyAmIG1pbmVydmEuRGlydHlGbGFncy5Cb3VuZHMpID09PSAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSBvdXRwdXQuZXh0ZW50cztcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBld2MgPSBvdXRwdXQuZXh0ZW50c1dpdGhDaGlsZHJlbjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUueCA9IGV3Yy54ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUueSA9IGV3Yy55ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhcyA9IHN0YXRlLmFjdHVhbFNpemU7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLndpZHRoID0gZXdjLndpZHRoID0gYXMud2lkdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLmhlaWdodCA9IGV3Yy5oZWlnaHQgPSBhcy5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQuc2hvd0dyaWRMaW5lcylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhc3NldHM7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciB3YWxrZXIgPSB0cmVlLndhbGsoKTsgd2Fsa2VyLnN0ZXAoKTspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3NldHMgPSB3YWxrZXIuY3VycmVudC5hc3NldHM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFzc2V0cy50b3RhbElzUmVuZGVyVmlzaWJsZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5SZWN0LnVuaW9uKGV3YywgYXNzZXRzLmdsb2JhbEJvdW5kc1dpdGhDaGlsZHJlbik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0YXBpbnMuY2FsY0V4dGVudHMgPSBjYWxjRXh0ZW50cztcbiAgICAgICAgICAgICAgICB9KSh0YXBpbnMgPSBwcm9jZXNzdXAudGFwaW5zIHx8IChwcm9jZXNzdXAudGFwaW5zID0ge30pKTtcbiAgICAgICAgICAgIH0pKHByb2Nlc3N1cCA9IGdyaWQucHJvY2Vzc3VwIHx8IChncmlkLnByb2Nlc3N1cCA9IHt9KSk7XG4gICAgICAgIH0pKGdyaWQgPSBjb250cm9scy5ncmlkIHx8IChjb250cm9scy5ncmlkID0ge30pKTtcbiAgICB9KShjb250cm9scyA9IG1pbmVydmEuY29udHJvbHMgfHwgKG1pbmVydmEuY29udHJvbHMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb250cm9scztcbiAgICAoZnVuY3Rpb24gKGNvbnRyb2xzKSB7XG4gICAgICAgIHZhciBncmlkO1xuICAgICAgICAoZnVuY3Rpb24gKGdyaWQpIHtcbiAgICAgICAgICAgIHZhciBwcm9jZXNzdXA7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKHByb2Nlc3N1cCkge1xuICAgICAgICAgICAgICAgIHZhciB0YXBpbnM7XG4gICAgICAgICAgICAgICAgKGZ1bmN0aW9uICh0YXBpbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gcHJlQ2FsY0V4dGVudHMoaW5wdXQsIHN0YXRlLCBvdXRwdXQsIHRyZWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoaW5wdXQuZGlydHlGbGFncyAmIG1pbmVydmEuRGlydHlGbGFncy5Cb3VuZHMpID09PSAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpbnB1dC5iYWNrZ3JvdW5kICYmICFpbnB1dC5zaG93R3JpZExpbmVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFzID0gc3RhdGUuYWN0dWFsU2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcy53aWR0aCA9IGFzLmhlaWdodCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0YXBpbnMucHJlQ2FsY0V4dGVudHMgPSBwcmVDYWxjRXh0ZW50cztcbiAgICAgICAgICAgICAgICB9KSh0YXBpbnMgPSBwcm9jZXNzdXAudGFwaW5zIHx8IChwcm9jZXNzdXAudGFwaW5zID0ge30pKTtcbiAgICAgICAgICAgIH0pKHByb2Nlc3N1cCA9IGdyaWQucHJvY2Vzc3VwIHx8IChncmlkLnByb2Nlc3N1cCA9IHt9KSk7XG4gICAgICAgIH0pKGdyaWQgPSBjb250cm9scy5ncmlkIHx8IChjb250cm9scy5ncmlkID0ge30pKTtcbiAgICB9KShjb250cm9scyA9IG1pbmVydmEuY29udHJvbHMgfHwgKG1pbmVydmEuY29udHJvbHMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb250cm9scztcbiAgICAoZnVuY3Rpb24gKGNvbnRyb2xzKSB7XG4gICAgICAgIHZhciBpbWFnZTtcbiAgICAgICAgKGZ1bmN0aW9uIChpbWFnZSkge1xuICAgICAgICAgICAgdmFyIGFycmFuZ2U7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKGFycmFuZ2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFwaW5zO1xuICAgICAgICAgICAgICAgIChmdW5jdGlvbiAodGFwaW5zKSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNhbGNJbWFnZUJvdW5kcyhpbnB1dCwgc3RhdGUsIG91dHB1dCwgdHJlZSwgZmluYWxSZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaWIgPSBzdGF0ZS5pbWFnZUJvdW5kcztcbiAgICAgICAgICAgICAgICAgICAgICAgIGliLnggPSBpYi55ID0gaWIud2lkdGggPSBpYi5oZWlnaHQgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LnNvdXJjZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGliLndpZHRoID0gaW5wdXQuc291cmNlLnBpeGVsV2lkdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWIuaGVpZ2h0ID0gaW5wdXQuc291cmNlLnBpeGVsSGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZzID0gc3RhdGUuZmluYWxTaXplO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGliLndpZHRoID09PSAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGliLndpZHRoID0gZnMud2lkdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaWIuaGVpZ2h0ID09PSAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGliLmhlaWdodCA9IGZzLmhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRhcGlucy5jYWxjSW1hZ2VCb3VuZHMgPSBjYWxjSW1hZ2VCb3VuZHM7XG4gICAgICAgICAgICAgICAgfSkodGFwaW5zID0gYXJyYW5nZS50YXBpbnMgfHwgKGFycmFuZ2UudGFwaW5zID0ge30pKTtcbiAgICAgICAgICAgIH0pKGFycmFuZ2UgPSBpbWFnZS5hcnJhbmdlIHx8IChpbWFnZS5hcnJhbmdlID0ge30pKTtcbiAgICAgICAgfSkoaW1hZ2UgPSBjb250cm9scy5pbWFnZSB8fCAoY29udHJvbHMuaW1hZ2UgPSB7fSkpO1xuICAgIH0pKGNvbnRyb2xzID0gbWluZXJ2YS5jb250cm9scyB8fCAobWluZXJ2YS5jb250cm9scyA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvbnRyb2xzO1xuICAgIChmdW5jdGlvbiAoY29udHJvbHMpIHtcbiAgICAgICAgdmFyIGltYWdlO1xuICAgICAgICAoZnVuY3Rpb24gKGltYWdlKSB7XG4gICAgICAgICAgICB2YXIgYXJyYW5nZTtcbiAgICAgICAgICAgIChmdW5jdGlvbiAoYXJyYW5nZSkge1xuICAgICAgICAgICAgICAgIHZhciB0YXBpbnM7XG4gICAgICAgICAgICAgICAgKGZ1bmN0aW9uICh0YXBpbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gY2FsY1N0cmV0Y2goaW5wdXQsIHN0YXRlLCBvdXRwdXQsIHRyZWUsIGZpbmFsUmVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGliID0gc3RhdGUuaW1hZ2VCb3VuZHM7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3ggPSAxLjA7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3kgPSAxLjA7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZnMgPSBzdGF0ZS5maW5hbFNpemU7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaWIud2lkdGggIT09IGZzLndpZHRoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN4ID0gZnMud2lkdGggLyBpYi53aWR0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpYi5oZWlnaHQgIT09IGZzLmhlaWdodClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzeSA9IGZzLmhlaWdodCAvIGliLmhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoaW5wdXQuc3RyZXRjaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgbWluZXJ2YS5TdHJldGNoLlVuaWZvcm06XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN4ID0gc3kgPSBNYXRoLm1pbihzeCwgc3kpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIG1pbmVydmEuU3RyZXRjaC5Vbmlmb3JtVG9GaWxsOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzeCA9IHN5ID0gTWF0aC5tYXgoc3gsIHN5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBtaW5lcnZhLlN0cmV0Y2guTm9uZTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ggPSBzeSA9IDEuMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBtaW5lcnZhLlN0cmV0Y2guRmlsbDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLnN0cmV0Y2hYID0gc3g7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5zdHJldGNoWSA9IHN5O1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGFwaW5zLmNhbGNTdHJldGNoID0gY2FsY1N0cmV0Y2g7XG4gICAgICAgICAgICAgICAgfSkodGFwaW5zID0gYXJyYW5nZS50YXBpbnMgfHwgKGFycmFuZ2UudGFwaW5zID0ge30pKTtcbiAgICAgICAgICAgIH0pKGFycmFuZ2UgPSBpbWFnZS5hcnJhbmdlIHx8IChpbWFnZS5hcnJhbmdlID0ge30pKTtcbiAgICAgICAgfSkoaW1hZ2UgPSBjb250cm9scy5pbWFnZSB8fCAoY29udHJvbHMuaW1hZ2UgPSB7fSkpO1xuICAgIH0pKGNvbnRyb2xzID0gbWluZXJ2YS5jb250cm9scyB8fCAobWluZXJ2YS5jb250cm9scyA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvbnRyb2xzO1xuICAgIChmdW5jdGlvbiAoY29udHJvbHMpIHtcbiAgICAgICAgdmFyIGltYWdlO1xuICAgICAgICAoZnVuY3Rpb24gKGltYWdlKSB7XG4gICAgICAgICAgICB2YXIgYXJyYW5nZTtcbiAgICAgICAgICAgIChmdW5jdGlvbiAoYXJyYW5nZSkge1xuICAgICAgICAgICAgICAgIHZhciB0YXBpbnM7XG4gICAgICAgICAgICAgICAgKGZ1bmN0aW9uICh0YXBpbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZG9PdmVycmlkZShpbnB1dCwgc3RhdGUsIG91dHB1dCwgdHJlZSwgZmluYWxSZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXMgPSBzdGF0ZS5hcnJhbmdlZFNpemU7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcy53aWR0aCA9IHN0YXRlLmltYWdlQm91bmRzLndpZHRoICogc3RhdGUuc3RyZXRjaFg7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcy5oZWlnaHQgPSBzdGF0ZS5pbWFnZUJvdW5kcy5oZWlnaHQgKiBzdGF0ZS5zdHJldGNoWTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRhcGlucy5kb092ZXJyaWRlID0gZG9PdmVycmlkZTtcbiAgICAgICAgICAgICAgICB9KSh0YXBpbnMgPSBhcnJhbmdlLnRhcGlucyB8fCAoYXJyYW5nZS50YXBpbnMgPSB7fSkpO1xuICAgICAgICAgICAgfSkoYXJyYW5nZSA9IGltYWdlLmFycmFuZ2UgfHwgKGltYWdlLmFycmFuZ2UgPSB7fSkpO1xuICAgICAgICB9KShpbWFnZSA9IGNvbnRyb2xzLmltYWdlIHx8IChjb250cm9scy5pbWFnZSA9IHt9KSk7XG4gICAgfSkoY29udHJvbHMgPSBtaW5lcnZhLmNvbnRyb2xzIHx8IChtaW5lcnZhLmNvbnRyb2xzID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29udHJvbHM7XG4gICAgKGZ1bmN0aW9uIChjb250cm9scykge1xuICAgICAgICB2YXIgaW1hZ2U7XG4gICAgICAgIChmdW5jdGlvbiAoaW1hZ2UpIHtcbiAgICAgICAgICAgIHZhciBhcnJhbmdlO1xuICAgICAgICAgICAgKGZ1bmN0aW9uIChhcnJhbmdlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcGlucztcbiAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBpbnZhbGlkYXRlTWV0cmljcyhpbnB1dCwgc3RhdGUsIG91dHB1dCwgdHJlZSwgZmluYWxSZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXQuZGlydHlGbGFncyB8PSBtaW5lcnZhLkRpcnR5RmxhZ3MuSW1hZ2VNZXRyaWNzO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGFwaW5zLmludmFsaWRhdGVNZXRyaWNzID0gaW52YWxpZGF0ZU1ldHJpY3M7XG4gICAgICAgICAgICAgICAgfSkodGFwaW5zID0gYXJyYW5nZS50YXBpbnMgfHwgKGFycmFuZ2UudGFwaW5zID0ge30pKTtcbiAgICAgICAgICAgIH0pKGFycmFuZ2UgPSBpbWFnZS5hcnJhbmdlIHx8IChpbWFnZS5hcnJhbmdlID0ge30pKTtcbiAgICAgICAgfSkoaW1hZ2UgPSBjb250cm9scy5pbWFnZSB8fCAoY29udHJvbHMuaW1hZ2UgPSB7fSkpO1xuICAgIH0pKGNvbnRyb2xzID0gbWluZXJ2YS5jb250cm9scyB8fCAobWluZXJ2YS5jb250cm9scyA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvbnRyb2xzO1xuICAgIChmdW5jdGlvbiAoY29udHJvbHMpIHtcbiAgICAgICAgdmFyIGltYWdlO1xuICAgICAgICAoZnVuY3Rpb24gKGltYWdlKSB7XG4gICAgICAgICAgICB2YXIgaGl0dGVzdDtcbiAgICAgICAgICAgIChmdW5jdGlvbiAoaGl0dGVzdCkge1xuICAgICAgICAgICAgICAgIHZhciB0YXBpbnM7XG4gICAgICAgICAgICAgICAgKGZ1bmN0aW9uICh0YXBpbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gY2FuSGl0SW5zaWRlKGRhdGEsIHBvcywgaGl0TGlzdCwgY3R4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0YXBpbnMuY2FuSGl0SW5zaWRlID0gY2FuSGl0SW5zaWRlO1xuICAgICAgICAgICAgICAgIH0pKHRhcGlucyA9IGhpdHRlc3QudGFwaW5zIHx8IChoaXR0ZXN0LnRhcGlucyA9IHt9KSk7XG4gICAgICAgICAgICB9KShoaXR0ZXN0ID0gaW1hZ2UuaGl0dGVzdCB8fCAoaW1hZ2UuaGl0dGVzdCA9IHt9KSk7XG4gICAgICAgIH0pKGltYWdlID0gY29udHJvbHMuaW1hZ2UgfHwgKGNvbnRyb2xzLmltYWdlID0ge30pKTtcbiAgICB9KShjb250cm9scyA9IG1pbmVydmEuY29udHJvbHMgfHwgKG1pbmVydmEuY29udHJvbHMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb250cm9scztcbiAgICAoZnVuY3Rpb24gKGNvbnRyb2xzKSB7XG4gICAgICAgIHZhciBpbWFnZTtcbiAgICAgICAgKGZ1bmN0aW9uIChpbWFnZSkge1xuICAgICAgICAgICAgdmFyIGhpdHRlc3Q7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKGhpdHRlc3QpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFwaW5zO1xuICAgICAgICAgICAgICAgIChmdW5jdGlvbiAodGFwaW5zKSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGluc2lkZUNoaWxkcmVuKGRhdGEsIHBvcywgaGl0TGlzdCwgY3R4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBoaXRMaXN0LnVuc2hpZnQoZGF0YS51cGRhdGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuaGl0Q2hpbGRyZW4gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRhcGlucy5pbnNpZGVDaGlsZHJlbiA9IGluc2lkZUNoaWxkcmVuO1xuICAgICAgICAgICAgICAgIH0pKHRhcGlucyA9IGhpdHRlc3QudGFwaW5zIHx8IChoaXR0ZXN0LnRhcGlucyA9IHt9KSk7XG4gICAgICAgICAgICB9KShoaXR0ZXN0ID0gaW1hZ2UuaGl0dGVzdCB8fCAoaW1hZ2UuaGl0dGVzdCA9IHt9KSk7XG4gICAgICAgIH0pKGltYWdlID0gY29udHJvbHMuaW1hZ2UgfHwgKGNvbnRyb2xzLmltYWdlID0ge30pKTtcbiAgICB9KShjb250cm9scyA9IG1pbmVydmEuY29udHJvbHMgfHwgKG1pbmVydmEuY29udHJvbHMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb250cm9scztcbiAgICAoZnVuY3Rpb24gKGNvbnRyb2xzKSB7XG4gICAgICAgIHZhciBpbWFnZTtcbiAgICAgICAgKGZ1bmN0aW9uIChpbWFnZSkge1xuICAgICAgICAgICAgdmFyIGhpdHRlc3Q7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKGhpdHRlc3QpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFwaW5zO1xuICAgICAgICAgICAgICAgIChmdW5jdGlvbiAodGFwaW5zKSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGluc2lkZVN0cmV0Y2goZGF0YSwgcG9zLCBoaXRMaXN0LCBjdHgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzb3VyY2UgPSBkYXRhLmFzc2V0cy5zb3VyY2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNvdXJjZSB8fCBzb3VyY2UucGl4ZWxXaWR0aCA9PT0gMCB8fCBzb3VyY2UucGl4ZWxIZWlnaHQgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaXRMaXN0LnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RyZXRjaCA9IGRhdGEuYXNzZXRzLnN0cmV0Y2g7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RyZXRjaCA9PT0gbWluZXJ2YS5TdHJldGNoLkZpbGwgfHwgc3RyZXRjaCA9PT0gbWluZXJ2YS5TdHJldGNoLlVuaWZvcm1Ub0ZpbGwpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXIgPSBkYXRhLmltZ1JlY3Q7XG4gICAgICAgICAgICAgICAgICAgICAgICBpci54ID0gaXIueSA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBpci53aWR0aCA9IHNvdXJjZS5waXhlbFdpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgaXIuaGVpZ2h0ID0gc291cmNlLnBpeGVsSGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5SZWN0LnRyYW5zZm9ybShpciwgZGF0YS5hc3NldHMuaW1nWGZvcm0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5SZWN0LnRyYW5zZm9ybShpciwgY3R4LmN1cnJlbnRUcmFuc2Zvcm0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFtaW5lcnZhLlJlY3QuY29udGFpbnNQb2ludChpciwgcG9zKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpdExpc3Quc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRhcGlucy5pbnNpZGVTdHJldGNoID0gaW5zaWRlU3RyZXRjaDtcbiAgICAgICAgICAgICAgICB9KSh0YXBpbnMgPSBoaXR0ZXN0LnRhcGlucyB8fCAoaGl0dGVzdC50YXBpbnMgPSB7fSkpO1xuICAgICAgICAgICAgfSkoaGl0dGVzdCA9IGltYWdlLmhpdHRlc3QgfHwgKGltYWdlLmhpdHRlc3QgPSB7fSkpO1xuICAgICAgICB9KShpbWFnZSA9IGNvbnRyb2xzLmltYWdlIHx8IChjb250cm9scy5pbWFnZSA9IHt9KSk7XG4gICAgfSkoY29udHJvbHMgPSBtaW5lcnZhLmNvbnRyb2xzIHx8IChtaW5lcnZhLmNvbnRyb2xzID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29udHJvbHM7XG4gICAgKGZ1bmN0aW9uIChjb250cm9scykge1xuICAgICAgICB2YXIgaW1hZ2U7XG4gICAgICAgIChmdW5jdGlvbiAoaW1hZ2UpIHtcbiAgICAgICAgICAgIHZhciBtZWFzdXJlO1xuICAgICAgICAgICAgKGZ1bmN0aW9uIChtZWFzdXJlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcGlucztcbiAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBjYWxjSW1hZ2VCb3VuZHMoaW5wdXQsIHN0YXRlLCBvdXRwdXQsIHRyZWUsIGF2YWlsYWJsZVNpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpYiA9IHN0YXRlLmltYWdlQm91bmRzO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWIueCA9IGliLnkgPSBpYi53aWR0aCA9IGliLmhlaWdodCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlucHV0LnNvdXJjZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGliLndpZHRoID0gaW5wdXQuc291cmNlLnBpeGVsV2lkdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBpYi5oZWlnaHQgPSBpbnB1dC5zb3VyY2UucGl4ZWxIZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0YXBpbnMuY2FsY0ltYWdlQm91bmRzID0gY2FsY0ltYWdlQm91bmRzO1xuICAgICAgICAgICAgICAgIH0pKHRhcGlucyA9IG1lYXN1cmUudGFwaW5zIHx8IChtZWFzdXJlLnRhcGlucyA9IHt9KSk7XG4gICAgICAgICAgICB9KShtZWFzdXJlID0gaW1hZ2UubWVhc3VyZSB8fCAoaW1hZ2UubWVhc3VyZSA9IHt9KSk7XG4gICAgICAgIH0pKGltYWdlID0gY29udHJvbHMuaW1hZ2UgfHwgKGNvbnRyb2xzLmltYWdlID0ge30pKTtcbiAgICB9KShjb250cm9scyA9IG1pbmVydmEuY29udHJvbHMgfHwgKG1pbmVydmEuY29udHJvbHMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb250cm9scztcbiAgICAoZnVuY3Rpb24gKGNvbnRyb2xzKSB7XG4gICAgICAgIHZhciBpbWFnZTtcbiAgICAgICAgKGZ1bmN0aW9uIChpbWFnZSkge1xuICAgICAgICAgICAgdmFyIG1lYXN1cmU7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKG1lYXN1cmUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFwaW5zO1xuICAgICAgICAgICAgICAgIChmdW5jdGlvbiAodGFwaW5zKSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNhbGNTdHJldGNoKGlucHV0LCBzdGF0ZSwgb3V0cHV0LCB0cmVlLCBhdmFpbGFibGVTaXplKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXMgPSBzdGF0ZS5hdmFpbGFibGVTaXplO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGR3ID0gYXMud2lkdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGggPSBhcy5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaWIgPSBzdGF0ZS5pbWFnZUJvdW5kcztcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNGaW5pdGUoZHcpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR3ID0gaWIud2lkdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzRmluaXRlKGRoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaCA9IGliLmhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzeCA9IDAuMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzeSA9IDAuMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpYi53aWR0aCA+IDApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ggPSBkdyAvIGliLndpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGliLmhlaWdodCA+IDApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3kgPSBkaCAvIGliLmhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNGaW5pdGUoYXMud2lkdGgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN4ID0gc3k7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzRmluaXRlKGFzLmhlaWdodCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3kgPSBzeDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoaW5wdXQuc3RyZXRjaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBtaW5lcnZhLlN0cmV0Y2guVW5pZm9ybTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ggPSBzeSA9IE1hdGgubWluKHN4LCBzeSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgbWluZXJ2YS5TdHJldGNoLlVuaWZvcm1Ub0ZpbGw6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN4ID0gc3kgPSBNYXRoLm1heChzeCwgc3kpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIG1pbmVydmEuU3RyZXRjaC5GaWxsOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzRmluaXRlKGFzLndpZHRoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN4ID0gc3k7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNGaW5pdGUoYXMuaGVpZ2h0KSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN5ID0gc3g7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgbWluZXJ2YS5TdHJldGNoLk5vbmU6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN4ID0gc3kgPSAxLjA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuc3RyZXRjaFggPSBzeDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLnN0cmV0Y2hZID0gc3k7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0YXBpbnMuY2FsY1N0cmV0Y2ggPSBjYWxjU3RyZXRjaDtcbiAgICAgICAgICAgICAgICB9KSh0YXBpbnMgPSBtZWFzdXJlLnRhcGlucyB8fCAobWVhc3VyZS50YXBpbnMgPSB7fSkpO1xuICAgICAgICAgICAgfSkobWVhc3VyZSA9IGltYWdlLm1lYXN1cmUgfHwgKGltYWdlLm1lYXN1cmUgPSB7fSkpO1xuICAgICAgICB9KShpbWFnZSA9IGNvbnRyb2xzLmltYWdlIHx8IChjb250cm9scy5pbWFnZSA9IHt9KSk7XG4gICAgfSkoY29udHJvbHMgPSBtaW5lcnZhLmNvbnRyb2xzIHx8IChtaW5lcnZhLmNvbnRyb2xzID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29udHJvbHM7XG4gICAgKGZ1bmN0aW9uIChjb250cm9scykge1xuICAgICAgICB2YXIgaW1hZ2U7XG4gICAgICAgIChmdW5jdGlvbiAoaW1hZ2UpIHtcbiAgICAgICAgICAgIHZhciBtZWFzdXJlO1xuICAgICAgICAgICAgKGZ1bmN0aW9uIChtZWFzdXJlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcGlucztcbiAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBkb092ZXJyaWRlKGlucHV0LCBzdGF0ZSwgb3V0cHV0LCB0cmVlLCBhdmFpbGFibGVTaXplKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZHMgPSBvdXRwdXQuZGVzaXJlZFNpemU7XG4gICAgICAgICAgICAgICAgICAgICAgICBkcy53aWR0aCA9IHN0YXRlLmltYWdlQm91bmRzLndpZHRoICogc3RhdGUuc3RyZXRjaFg7XG4gICAgICAgICAgICAgICAgICAgICAgICBkcy5oZWlnaHQgPSBzdGF0ZS5pbWFnZUJvdW5kcy5oZWlnaHQgKiBzdGF0ZS5zdHJldGNoWTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRhcGlucy5kb092ZXJyaWRlID0gZG9PdmVycmlkZTtcbiAgICAgICAgICAgICAgICB9KSh0YXBpbnMgPSBtZWFzdXJlLnRhcGlucyB8fCAobWVhc3VyZS50YXBpbnMgPSB7fSkpO1xuICAgICAgICAgICAgfSkobWVhc3VyZSA9IGltYWdlLm1lYXN1cmUgfHwgKGltYWdlLm1lYXN1cmUgPSB7fSkpO1xuICAgICAgICB9KShpbWFnZSA9IGNvbnRyb2xzLmltYWdlIHx8IChjb250cm9scy5pbWFnZSA9IHt9KSk7XG4gICAgfSkoY29udHJvbHMgPSBtaW5lcnZhLmNvbnRyb2xzIHx8IChtaW5lcnZhLmNvbnRyb2xzID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29udHJvbHM7XG4gICAgKGZ1bmN0aW9uIChjb250cm9scykge1xuICAgICAgICB2YXIgaW1hZ2U7XG4gICAgICAgIChmdW5jdGlvbiAoaW1hZ2UpIHtcbiAgICAgICAgICAgIHZhciBwcm9jZXNzZG93bjtcbiAgICAgICAgICAgIChmdW5jdGlvbiAocHJvY2Vzc2Rvd24pIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFwaW5zO1xuICAgICAgICAgICAgICAgIChmdW5jdGlvbiAodGFwaW5zKSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNhbGNJbWFnZVRyYW5zZm9ybShpbnB1dCwgc3RhdGUsIG91dHB1dCwgdnBpbnB1dCwgdHJlZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzdGF0ZS5jYWxjSW1hZ2VNZXRyaWNzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHcgPSBzdGF0ZS5wYWludFJlY3Qud2lkdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaCA9IHN0YXRlLnBhaW50UmVjdC5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3cgPSBzdGF0ZS5pbWdSZWN0LndpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNoID0gc3RhdGUuaW1nUmVjdC5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3ggPSB3IC8gc3c7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3kgPSBoIC8gc2g7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodyA9PT0gMClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzeCA9IDEuMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoID09PSAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN5ID0gMS4wO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHhmb3JtID0gb3V0cHV0LmltZ1hmb3JtO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LnN0cmV0Y2ggPT09IG1pbmVydmEuU3RyZXRjaC5GaWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5tYXQzLmNyZWF0ZVNjYWxlKHN4LCBzeSwgeGZvcm0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNjYWxlID0gMS4wO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChpbnB1dC5zdHJldGNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBtaW5lcnZhLlN0cmV0Y2guVW5pZm9ybTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NhbGUgPSBzeCA8IHN5ID8gc3ggOiBzeTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBtaW5lcnZhLlN0cmV0Y2guVW5pZm9ybVRvRmlsbDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NhbGUgPSBzeCA8IHN5ID8gc3kgOiBzeDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBtaW5lcnZhLlN0cmV0Y2guTm9uZTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZHggPSAodyAtIChzY2FsZSAqIHN3KSkgLyAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGR5ID0gKGggLSAoc2NhbGUgKiBzaCkpIC8gMjtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbmVydmEubWF0My5jcmVhdGVTY2FsZShzY2FsZSwgc2NhbGUsIHhmb3JtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbmVydmEubWF0My50cmFuc2xhdGUoeGZvcm0sIGR4LCBkeSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0YXBpbnMuY2FsY0ltYWdlVHJhbnNmb3JtID0gY2FsY0ltYWdlVHJhbnNmb3JtO1xuICAgICAgICAgICAgICAgIH0pKHRhcGlucyA9IHByb2Nlc3Nkb3duLnRhcGlucyB8fCAocHJvY2Vzc2Rvd24udGFwaW5zID0ge30pKTtcbiAgICAgICAgICAgIH0pKHByb2Nlc3Nkb3duID0gaW1hZ2UucHJvY2Vzc2Rvd24gfHwgKGltYWdlLnByb2Nlc3Nkb3duID0ge30pKTtcbiAgICAgICAgfSkoaW1hZ2UgPSBjb250cm9scy5pbWFnZSB8fCAoY29udHJvbHMuaW1hZ2UgPSB7fSkpO1xuICAgIH0pKGNvbnRyb2xzID0gbWluZXJ2YS5jb250cm9scyB8fCAobWluZXJ2YS5jb250cm9scyA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvbnRyb2xzO1xuICAgIChmdW5jdGlvbiAoY29udHJvbHMpIHtcbiAgICAgICAgdmFyIGltYWdlO1xuICAgICAgICAoZnVuY3Rpb24gKGltYWdlKSB7XG4gICAgICAgICAgICB2YXIgcHJvY2Vzc2Rvd247XG4gICAgICAgICAgICAoZnVuY3Rpb24gKHByb2Nlc3Nkb3duKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcGlucztcbiAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBjYWxjT3ZlcmxhcChpbnB1dCwgc3RhdGUsIG91dHB1dCwgdnBpbnB1dCwgdHJlZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzdGF0ZS5jYWxjSW1hZ2VNZXRyaWNzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LnN0cmV0Y2ggPT09IG1pbmVydmEuU3RyZXRjaC5Vbmlmb3JtVG9GaWxsIHx8IHN0YXRlLmltZ0FkanVzdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYWludCA9IHN0YXRlLnBhaW50UmVjdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLlJlY3Qucm91bmRPdXQocGFpbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbWdSZWN0ID0gc3RhdGUuaW1nUmVjdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLlJlY3QudHJhbnNmb3JtKGltZ1JlY3QsIG91dHB1dC5pbWdYZm9ybSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5SZWN0LnJvdW5kSW4oaW1nUmVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0Lm92ZXJsYXAgPSBtaW5lcnZhLlJlY3QucmVjdEluKHBhaW50LCBpbWdSZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRhcGlucy5jYWxjT3ZlcmxhcCA9IGNhbGNPdmVybGFwO1xuICAgICAgICAgICAgICAgIH0pKHRhcGlucyA9IHByb2Nlc3Nkb3duLnRhcGlucyB8fCAocHJvY2Vzc2Rvd24udGFwaW5zID0ge30pKTtcbiAgICAgICAgICAgIH0pKHByb2Nlc3Nkb3duID0gaW1hZ2UucHJvY2Vzc2Rvd24gfHwgKGltYWdlLnByb2Nlc3Nkb3duID0ge30pKTtcbiAgICAgICAgfSkoaW1hZ2UgPSBjb250cm9scy5pbWFnZSB8fCAoY29udHJvbHMuaW1hZ2UgPSB7fSkpO1xuICAgIH0pKGNvbnRyb2xzID0gbWluZXJ2YS5jb250cm9scyB8fCAobWluZXJ2YS5jb250cm9scyA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvbnRyb2xzO1xuICAgIChmdW5jdGlvbiAoY29udHJvbHMpIHtcbiAgICAgICAgdmFyIGltYWdlO1xuICAgICAgICAoZnVuY3Rpb24gKGltYWdlKSB7XG4gICAgICAgICAgICB2YXIgcHJvY2Vzc2Rvd247XG4gICAgICAgICAgICAoZnVuY3Rpb24gKHByb2Nlc3Nkb3duKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcGlucztcbiAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBjaGVja05lZWRJbWFnZU1ldHJpY3MoaW5wdXQsIHN0YXRlLCBvdXRwdXQsIHZwaW5wdXQsIHRyZWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLmNhbGNJbWFnZU1ldHJpY3MgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoaW5wdXQuZGlydHlGbGFncyAmIG1pbmVydmEuRGlydHlGbGFncy5JbWFnZU1ldHJpY3MpID09PSAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5tYXQzLmlkZW50aXR5KG91dHB1dC5pbWdYZm9ybSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXQub3ZlcmxhcCA9IG1pbmVydmEuUmVjdE92ZXJsYXAuSW47XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW1nUmVjdCA9IHN0YXRlLmltZ1JlY3Q7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbWdSZWN0LnggPSBpbWdSZWN0LnkgPSBpbWdSZWN0LndpZHRoID0gaW1nUmVjdC5oZWlnaHQgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuY2FsY0ltYWdlTWV0cmljcyA9ICEhaW5wdXQuc291cmNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGFwaW5zLmNoZWNrTmVlZEltYWdlTWV0cmljcyA9IGNoZWNrTmVlZEltYWdlTWV0cmljcztcbiAgICAgICAgICAgICAgICB9KSh0YXBpbnMgPSBwcm9jZXNzZG93bi50YXBpbnMgfHwgKHByb2Nlc3Nkb3duLnRhcGlucyA9IHt9KSk7XG4gICAgICAgICAgICB9KShwcm9jZXNzZG93biA9IGltYWdlLnByb2Nlc3Nkb3duIHx8IChpbWFnZS5wcm9jZXNzZG93biA9IHt9KSk7XG4gICAgICAgIH0pKGltYWdlID0gY29udHJvbHMuaW1hZ2UgfHwgKGNvbnRyb2xzLmltYWdlID0ge30pKTtcbiAgICB9KShjb250cm9scyA9IG1pbmVydmEuY29udHJvbHMgfHwgKG1pbmVydmEuY29udHJvbHMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb250cm9scztcbiAgICAoZnVuY3Rpb24gKGNvbnRyb2xzKSB7XG4gICAgICAgIHZhciBpbWFnZTtcbiAgICAgICAgKGZ1bmN0aW9uIChpbWFnZSkge1xuICAgICAgICAgICAgdmFyIHByb2Nlc3Nkb3duO1xuICAgICAgICAgICAgKGZ1bmN0aW9uIChwcm9jZXNzZG93bikge1xuICAgICAgICAgICAgICAgIHZhciB0YXBpbnM7XG4gICAgICAgICAgICAgICAgKGZ1bmN0aW9uICh0YXBpbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gcHJlcGFyZUltYWdlTWV0cmljcyhpbnB1dCwgc3RhdGUsIG91dHB1dCwgdnBpbnB1dCwgdHJlZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzdGF0ZS5jYWxjSW1hZ2VNZXRyaWNzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGltZ1JlY3QgPSBzdGF0ZS5pbWdSZWN0O1xuICAgICAgICAgICAgICAgICAgICAgICAgaW1nUmVjdC54ID0gaW1nUmVjdC55ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzb3VyY2UgPSBpbnB1dC5zb3VyY2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbWdSZWN0LndpZHRoID0gc291cmNlLnBpeGVsV2lkdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbWdSZWN0LmhlaWdodCA9IHNvdXJjZS5waXhlbEhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYWludFJlY3QgPSBzdGF0ZS5wYWludFJlY3Q7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYWludFJlY3QueCA9IHBhaW50UmVjdC55ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhaW50UmVjdC53aWR0aCA9IGlucHV0LmFjdHVhbFdpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFpbnRSZWN0LmhlaWdodCA9IGlucHV0LmFjdHVhbEhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLmltZ0FkanVzdCA9ICFtaW5lcnZhLlNpemUuaXNFcXVhbChwYWludFJlY3QsIGlucHV0LnJlbmRlclNpemUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LnN0cmV0Y2ggPT09IG1pbmVydmEuU3RyZXRjaC5Ob25lKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbmVydmEuUmVjdC51bmlvbihwYWludFJlY3QsIGltZ1JlY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGFwaW5zLnByZXBhcmVJbWFnZU1ldHJpY3MgPSBwcmVwYXJlSW1hZ2VNZXRyaWNzO1xuICAgICAgICAgICAgICAgIH0pKHRhcGlucyA9IHByb2Nlc3Nkb3duLnRhcGlucyB8fCAocHJvY2Vzc2Rvd24udGFwaW5zID0ge30pKTtcbiAgICAgICAgICAgIH0pKHByb2Nlc3Nkb3duID0gaW1hZ2UucHJvY2Vzc2Rvd24gfHwgKGltYWdlLnByb2Nlc3Nkb3duID0ge30pKTtcbiAgICAgICAgfSkoaW1hZ2UgPSBjb250cm9scy5pbWFnZSB8fCAoY29udHJvbHMuaW1hZ2UgPSB7fSkpO1xuICAgIH0pKGNvbnRyb2xzID0gbWluZXJ2YS5jb250cm9scyB8fCAobWluZXJ2YS5jb250cm9scyA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvbnRyb2xzO1xuICAgIChmdW5jdGlvbiAoY29udHJvbHMpIHtcbiAgICAgICAgdmFyIGltYWdlO1xuICAgICAgICAoZnVuY3Rpb24gKGltYWdlKSB7XG4gICAgICAgICAgICB2YXIgcmVuZGVyO1xuICAgICAgICAgICAgKGZ1bmN0aW9uIChyZW5kZXIpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFwaW5zO1xuICAgICAgICAgICAgICAgIChmdW5jdGlvbiAodGFwaW5zKSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGRvUmVuZGVyKGlucHV0LCBzdGF0ZSwgb3V0cHV0LCBjdHgsIHJlZ2lvbiwgdHJlZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNvdXJjZSA9IGlucHV0LnNvdXJjZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc291cmNlIHx8IHNvdXJjZS5waXhlbFdpZHRoID09PSAwIHx8IHNvdXJjZS5waXhlbEhlaWdodCA9PT0gMClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLmNvcmUuaGVscGVycy5yZW5kZXJMYXlvdXRDbGlwKGN0eCwgaW5wdXQsIHRyZWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3R4LnByZWFwcGx5KGlucHV0LmltZ1hmb3JtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZS5kcmF3KGN0eC5yYXcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRhcGlucy5kb1JlbmRlciA9IGRvUmVuZGVyO1xuICAgICAgICAgICAgICAgIH0pKHRhcGlucyA9IHJlbmRlci50YXBpbnMgfHwgKHJlbmRlci50YXBpbnMgPSB7fSkpO1xuICAgICAgICAgICAgfSkocmVuZGVyID0gaW1hZ2UucmVuZGVyIHx8IChpbWFnZS5yZW5kZXIgPSB7fSkpO1xuICAgICAgICB9KShpbWFnZSA9IGNvbnRyb2xzLmltYWdlIHx8IChjb250cm9scy5pbWFnZSA9IHt9KSk7XG4gICAgfSkoY29udHJvbHMgPSBtaW5lcnZhLmNvbnRyb2xzIHx8IChtaW5lcnZhLmNvbnRyb2xzID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29udHJvbHM7XG4gICAgKGZ1bmN0aW9uIChjb250cm9scykge1xuICAgICAgICB2YXIgcGFuZWw7XG4gICAgICAgIChmdW5jdGlvbiAocGFuZWwpIHtcbiAgICAgICAgICAgIHZhciBhcnJhbmdlO1xuICAgICAgICAgICAgKGZ1bmN0aW9uIChhcnJhbmdlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcGlucztcbiAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBkb092ZXJyaWRlKGlucHV0LCBzdGF0ZSwgb3V0cHV0LCB0cmVlLCBmaW5hbFJlY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjciA9IHN0YXRlLmNoaWxkUmVjdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNyLnggPSBjci55ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbmVydmEuU2l6ZS5jb3B5VG8oc3RhdGUuZmluYWxTaXplLCBjcik7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciB3YWxrZXIgPSB0cmVlLndhbGsoKTsgd2Fsa2VyLnN0ZXAoKTspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YWxrZXIuY3VycmVudC5hcnJhbmdlKGNyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbmVydmEuU2l6ZS5jb3B5VG8oc3RhdGUuZmluYWxTaXplLCBzdGF0ZS5hcnJhbmdlZFNpemUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGFwaW5zLmRvT3ZlcnJpZGUgPSBkb092ZXJyaWRlO1xuICAgICAgICAgICAgICAgIH0pKHRhcGlucyA9IGFycmFuZ2UudGFwaW5zIHx8IChhcnJhbmdlLnRhcGlucyA9IHt9KSk7XG4gICAgICAgICAgICB9KShhcnJhbmdlID0gcGFuZWwuYXJyYW5nZSB8fCAocGFuZWwuYXJyYW5nZSA9IHt9KSk7XG4gICAgICAgIH0pKHBhbmVsID0gY29udHJvbHMucGFuZWwgfHwgKGNvbnRyb2xzLnBhbmVsID0ge30pKTtcbiAgICB9KShjb250cm9scyA9IG1pbmVydmEuY29udHJvbHMgfHwgKG1pbmVydmEuY29udHJvbHMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb250cm9scztcbiAgICAoZnVuY3Rpb24gKGNvbnRyb2xzKSB7XG4gICAgICAgIHZhciBwYW5lbDtcbiAgICAgICAgKGZ1bmN0aW9uIChwYW5lbCkge1xuICAgICAgICAgICAgdmFyIHByb2Nlc3N1cDtcbiAgICAgICAgICAgIChmdW5jdGlvbiAocHJvY2Vzc3VwKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcGlucztcbiAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBwcmVDYWxjRXh0ZW50cyhpbnB1dCwgc3RhdGUsIG91dHB1dCwgdHJlZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChpbnB1dC5kaXJ0eUZsYWdzICYgbWluZXJ2YS5EaXJ0eUZsYWdzLkJvdW5kcykgPT09IDApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlucHV0LmJhY2tncm91bmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXMgPSBzdGF0ZS5hY3R1YWxTaXplO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzLndpZHRoID0gYXMuaGVpZ2h0ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRhcGlucy5wcmVDYWxjRXh0ZW50cyA9IHByZUNhbGNFeHRlbnRzO1xuICAgICAgICAgICAgICAgIH0pKHRhcGlucyA9IHByb2Nlc3N1cC50YXBpbnMgfHwgKHByb2Nlc3N1cC50YXBpbnMgPSB7fSkpO1xuICAgICAgICAgICAgfSkocHJvY2Vzc3VwID0gcGFuZWwucHJvY2Vzc3VwIHx8IChwYW5lbC5wcm9jZXNzdXAgPSB7fSkpO1xuICAgICAgICB9KShwYW5lbCA9IGNvbnRyb2xzLnBhbmVsIHx8IChjb250cm9scy5wYW5lbCA9IHt9KSk7XG4gICAgfSkoY29udHJvbHMgPSBtaW5lcnZhLmNvbnRyb2xzIHx8IChtaW5lcnZhLmNvbnRyb2xzID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29udHJvbHM7XG4gICAgKGZ1bmN0aW9uIChjb250cm9scykge1xuICAgICAgICB2YXIgcG9wdXA7XG4gICAgICAgIChmdW5jdGlvbiAocG9wdXApIHtcbiAgICAgICAgICAgIHZhciBwcm9jZXNzZG93bjtcbiAgICAgICAgICAgIChmdW5jdGlvbiAocHJvY2Vzc2Rvd24pIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFwaW5zO1xuICAgICAgICAgICAgICAgIChmdW5jdGlvbiAodGFwaW5zKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcGlucy5wb3N0UHJvY2Vzc1hmb3JtID0gZnVuY3Rpb24gKGlucHV0LCBzdGF0ZSwgb3V0cHV0LCB2cGlucHV0LCB0cmVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKGlucHV0LmRpcnR5RmxhZ3MgJiBtaW5lcnZhLkRpcnR5RmxhZ3MuVHJhbnNmb3JtKSA9PT0gMClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IHRyZWUucG9wdXBDaGlsZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY2hpbGQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZC5hc3NldHMuZGlydHlGbGFncyB8PSBtaW5lcnZhLkRpcnR5RmxhZ3MuTG9jYWxUcmFuc2Zvcm07XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2FycmllciA9IGNoaWxkLmFzc2V0cy5jYXJyaWVyWGZvcm07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWNhcnJpZXIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FycmllciA9IGNoaWxkLmFzc2V0cy5jYXJyaWVyWGZvcm0gfHwgbWluZXJ2YS5tYXQzLmNyZWF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5tYXQzLmNvcHlUbyhvdXRwdXQuYWJzb2x1dGVYZm9ybSwgY2Fycmllcik7XG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLm1hdDMudHJhbnNsYXRlKGNhcnJpZXIsIGlucHV0Lmhvcml6b250YWxPZmZzZXQsIGlucHV0LnZlcnRpY2FsT2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbmVydmEuY29yZS5VcGRhdGVyLiQkYWRkRG93bkRpcnR5KGNoaWxkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0pKHRhcGlucyA9IHByb2Nlc3Nkb3duLnRhcGlucyB8fCAocHJvY2Vzc2Rvd24udGFwaW5zID0ge30pKTtcbiAgICAgICAgICAgIH0pKHByb2Nlc3Nkb3duID0gcG9wdXAucHJvY2Vzc2Rvd24gfHwgKHBvcHVwLnByb2Nlc3Nkb3duID0ge30pKTtcbiAgICAgICAgfSkocG9wdXAgPSBjb250cm9scy5wb3B1cCB8fCAoY29udHJvbHMucG9wdXAgPSB7fSkpO1xuICAgIH0pKGNvbnRyb2xzID0gbWluZXJ2YS5jb250cm9scyB8fCAobWluZXJ2YS5jb250cm9scyA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvbnRyb2xzO1xuICAgIChmdW5jdGlvbiAoY29udHJvbHMpIHtcbiAgICAgICAgdmFyIHBvcHVwO1xuICAgICAgICAoZnVuY3Rpb24gKHBvcHVwKSB7XG4gICAgICAgICAgICB2YXIgcHJvY2Vzc2Rvd247XG4gICAgICAgICAgICAoZnVuY3Rpb24gKHByb2Nlc3Nkb3duKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcGlucztcbiAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgICAgICB0YXBpbnMucHJlUHJvY2Vzc1hmb3JtID0gZnVuY3Rpb24gKGlucHV0LCBzdGF0ZSwgb3V0cHV0LCB2cGlucHV0LCB0cmVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKGlucHV0LmRpcnR5RmxhZ3MgJiBtaW5lcnZhLkRpcnR5RmxhZ3MuVHJhbnNmb3JtKSA9PT0gMClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IHRyZWUucG9wdXBDaGlsZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkLmFzc2V0cy5kaXJ0eUZsYWdzIHw9IG1pbmVydmEuRGlydHlGbGFncy5Mb2NhbFRyYW5zZm9ybTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLmNvcmUuVXBkYXRlci4kJGFkZERvd25EaXJ0eShjaGlsZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9KSh0YXBpbnMgPSBwcm9jZXNzZG93bi50YXBpbnMgfHwgKHByb2Nlc3Nkb3duLnRhcGlucyA9IHt9KSk7XG4gICAgICAgICAgICB9KShwcm9jZXNzZG93biA9IHBvcHVwLnByb2Nlc3Nkb3duIHx8IChwb3B1cC5wcm9jZXNzZG93biA9IHt9KSk7XG4gICAgICAgIH0pKHBvcHVwID0gY29udHJvbHMucG9wdXAgfHwgKGNvbnRyb2xzLnBvcHVwID0ge30pKTtcbiAgICB9KShjb250cm9scyA9IG1pbmVydmEuY29udHJvbHMgfHwgKG1pbmVydmEuY29udHJvbHMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb250cm9scztcbiAgICAoZnVuY3Rpb24gKGNvbnRyb2xzKSB7XG4gICAgICAgIHZhciBzY3JvbGxjb250ZW50cHJlc2VudGVyO1xuICAgICAgICAoZnVuY3Rpb24gKHNjcm9sbGNvbnRlbnRwcmVzZW50ZXIpIHtcbiAgICAgICAgICAgIHZhciBhcnJhbmdlO1xuICAgICAgICAgICAgKGZ1bmN0aW9uIChhcnJhbmdlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcGlucztcbiAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBkb092ZXJyaWRlKGlucHV0LCBzdGF0ZSwgb3V0cHV0LCB0cmVlLCBmaW5hbFJlY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhcyA9IHN0YXRlLmFycmFuZ2VkU2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdHJlZS5zdWJ0cmVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXMud2lkdGggPSBhcy5oZWlnaHQgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNkID0gaW5wdXQuc2Nyb2xsRGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzY3JvbGxjb250ZW50cHJlc2VudGVyLmhlbHBlcnMuY2xhbXBPZmZzZXRzKHNkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNkLmludmFsaWRhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkZXNpcmVkID0gdHJlZS5zdWJ0cmVlLmFzc2V0cy5kZXNpcmVkU2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjciA9IHN0YXRlLmNoaWxkUmVjdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNyLnggPSAtc2Qub2Zmc2V0WDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNyLnkgPSAtc2Qub2Zmc2V0WTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNyLndpZHRoID0gTWF0aC5tYXgoc3RhdGUuZmluYWxTaXplLndpZHRoLCBkZXNpcmVkLndpZHRoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNyLmhlaWdodCA9IE1hdGgubWF4KHN0YXRlLmZpbmFsU2l6ZS5oZWlnaHQsIGRlc2lyZWQuaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyZWUuc3VidHJlZS5hcnJhbmdlKGNyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRhcGlucy5kb092ZXJyaWRlID0gZG9PdmVycmlkZTtcbiAgICAgICAgICAgICAgICB9KSh0YXBpbnMgPSBhcnJhbmdlLnRhcGlucyB8fCAoYXJyYW5nZS50YXBpbnMgPSB7fSkpO1xuICAgICAgICAgICAgfSkoYXJyYW5nZSA9IHNjcm9sbGNvbnRlbnRwcmVzZW50ZXIuYXJyYW5nZSB8fCAoc2Nyb2xsY29udGVudHByZXNlbnRlci5hcnJhbmdlID0ge30pKTtcbiAgICAgICAgfSkoc2Nyb2xsY29udGVudHByZXNlbnRlciA9IGNvbnRyb2xzLnNjcm9sbGNvbnRlbnRwcmVzZW50ZXIgfHwgKGNvbnRyb2xzLnNjcm9sbGNvbnRlbnRwcmVzZW50ZXIgPSB7fSkpO1xuICAgIH0pKGNvbnRyb2xzID0gbWluZXJ2YS5jb250cm9scyB8fCAobWluZXJ2YS5jb250cm9scyA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvbnRyb2xzO1xuICAgIChmdW5jdGlvbiAoY29udHJvbHMpIHtcbiAgICAgICAgdmFyIHNjcm9sbGNvbnRlbnRwcmVzZW50ZXI7XG4gICAgICAgIChmdW5jdGlvbiAoc2Nyb2xsY29udGVudHByZXNlbnRlcikge1xuICAgICAgICAgICAgdmFyIGFycmFuZ2U7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKGFycmFuZ2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFwaW5zO1xuICAgICAgICAgICAgICAgIChmdW5jdGlvbiAodGFwaW5zKSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHVwZGF0ZUNsaXAoaW5wdXQsIHN0YXRlLCBvdXRwdXQsIHRyZWUsIGF2YWlsYWJsZVNpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpYyA9IG91dHB1dC5pbnRlcm5hbENsaXA7XG4gICAgICAgICAgICAgICAgICAgICAgICBpYy54ID0gaWMueSA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLlNpemUuY29weVRvKHN0YXRlLmFycmFuZ2VkU2l6ZSwgaWMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGFwaW5zLnVwZGF0ZUNsaXAgPSB1cGRhdGVDbGlwO1xuICAgICAgICAgICAgICAgIH0pKHRhcGlucyA9IGFycmFuZ2UudGFwaW5zIHx8IChhcnJhbmdlLnRhcGlucyA9IHt9KSk7XG4gICAgICAgICAgICB9KShhcnJhbmdlID0gc2Nyb2xsY29udGVudHByZXNlbnRlci5hcnJhbmdlIHx8IChzY3JvbGxjb250ZW50cHJlc2VudGVyLmFycmFuZ2UgPSB7fSkpO1xuICAgICAgICB9KShzY3JvbGxjb250ZW50cHJlc2VudGVyID0gY29udHJvbHMuc2Nyb2xsY29udGVudHByZXNlbnRlciB8fCAoY29udHJvbHMuc2Nyb2xsY29udGVudHByZXNlbnRlciA9IHt9KSk7XG4gICAgfSkoY29udHJvbHMgPSBtaW5lcnZhLmNvbnRyb2xzIHx8IChtaW5lcnZhLmNvbnRyb2xzID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29udHJvbHM7XG4gICAgKGZ1bmN0aW9uIChjb250cm9scykge1xuICAgICAgICB2YXIgc2Nyb2xsY29udGVudHByZXNlbnRlcjtcbiAgICAgICAgKGZ1bmN0aW9uIChzY3JvbGxjb250ZW50cHJlc2VudGVyKSB7XG4gICAgICAgICAgICB2YXIgYXJyYW5nZTtcbiAgICAgICAgICAgIChmdW5jdGlvbiAoYXJyYW5nZSkge1xuICAgICAgICAgICAgICAgIHZhciB0YXBpbnM7XG4gICAgICAgICAgICAgICAgKGZ1bmN0aW9uICh0YXBpbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gdXBkYXRlRXh0ZW50cyhpbnB1dCwgc3RhdGUsIG91dHB1dCwgdHJlZSwgYXZhaWxhYmxlU2l6ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNkID0gaW5wdXQuc2Nyb2xsRGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2aWV3cG9ydCA9IHN0YXRlLmZpbmFsU2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaGFuZ2VkID0gc2Qudmlld3BvcnRXaWR0aCAhPT0gdmlld3BvcnQud2lkdGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCBzZC52aWV3cG9ydEhlaWdodCAhPT0gdmlld3BvcnQuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgc2Qudmlld3BvcnRXaWR0aCA9IHZpZXdwb3J0LndpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2Qudmlld3BvcnRIZWlnaHQgPSB2aWV3cG9ydC5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2Nyb2xsY29udGVudHByZXNlbnRlci5oZWxwZXJzLmNsYW1wT2Zmc2V0cyhzZCkgfHwgY2hhbmdlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNkLmludmFsaWRhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRhcGlucy51cGRhdGVFeHRlbnRzID0gdXBkYXRlRXh0ZW50cztcbiAgICAgICAgICAgICAgICB9KSh0YXBpbnMgPSBhcnJhbmdlLnRhcGlucyB8fCAoYXJyYW5nZS50YXBpbnMgPSB7fSkpO1xuICAgICAgICAgICAgfSkoYXJyYW5nZSA9IHNjcm9sbGNvbnRlbnRwcmVzZW50ZXIuYXJyYW5nZSB8fCAoc2Nyb2xsY29udGVudHByZXNlbnRlci5hcnJhbmdlID0ge30pKTtcbiAgICAgICAgfSkoc2Nyb2xsY29udGVudHByZXNlbnRlciA9IGNvbnRyb2xzLnNjcm9sbGNvbnRlbnRwcmVzZW50ZXIgfHwgKGNvbnRyb2xzLnNjcm9sbGNvbnRlbnRwcmVzZW50ZXIgPSB7fSkpO1xuICAgIH0pKGNvbnRyb2xzID0gbWluZXJ2YS5jb250cm9scyB8fCAobWluZXJ2YS5jb250cm9scyA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvbnRyb2xzO1xuICAgIChmdW5jdGlvbiAoY29udHJvbHMpIHtcbiAgICAgICAgdmFyIHNjcm9sbGNvbnRlbnRwcmVzZW50ZXI7XG4gICAgICAgIChmdW5jdGlvbiAoc2Nyb2xsY29udGVudHByZXNlbnRlcikge1xuICAgICAgICAgICAgdmFyIG1lYXN1cmU7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKG1lYXN1cmUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFwaW5zO1xuICAgICAgICAgICAgICAgIChmdW5jdGlvbiAodGFwaW5zKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcGlucy5kb092ZXJyaWRlID0gZnVuY3Rpb24gKGlucHV0LCBzdGF0ZSwgb3V0cHV0LCB0cmVlLCBhdmFpbGFibGVTaXplKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZHMgPSBvdXRwdXQuZGVzaXJlZFNpemU7XG4gICAgICAgICAgICAgICAgICAgICAgICBkcy53aWR0aCA9IGRzLmhlaWdodCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRyZWUuc3VidHJlZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZCA9IGlucHV0LnNjcm9sbERhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaWRlYWwgPSBzdGF0ZS5pZGVhbFNpemU7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZGVhbC53aWR0aCA9ICFzZC5jYW5Ib3Jpem9udGFsbHlTY3JvbGwgPyBzdGF0ZS5hdmFpbGFibGVTaXplLndpZHRoIDogTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWRlYWwuaGVpZ2h0ID0gIXNkLmNhblZlcnRpY2FsbHlTY3JvbGwgPyBzdGF0ZS5hdmFpbGFibGVTaXplLmhlaWdodCA6IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyZWUuc3VidHJlZS5tZWFzdXJlKGlkZWFsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0pKHRhcGlucyA9IG1lYXN1cmUudGFwaW5zIHx8IChtZWFzdXJlLnRhcGlucyA9IHt9KSk7XG4gICAgICAgICAgICB9KShtZWFzdXJlID0gc2Nyb2xsY29udGVudHByZXNlbnRlci5tZWFzdXJlIHx8IChzY3JvbGxjb250ZW50cHJlc2VudGVyLm1lYXN1cmUgPSB7fSkpO1xuICAgICAgICB9KShzY3JvbGxjb250ZW50cHJlc2VudGVyID0gY29udHJvbHMuc2Nyb2xsY29udGVudHByZXNlbnRlciB8fCAoY29udHJvbHMuc2Nyb2xsY29udGVudHByZXNlbnRlciA9IHt9KSk7XG4gICAgfSkoY29udHJvbHMgPSBtaW5lcnZhLmNvbnRyb2xzIHx8IChtaW5lcnZhLmNvbnRyb2xzID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29udHJvbHM7XG4gICAgKGZ1bmN0aW9uIChjb250cm9scykge1xuICAgICAgICB2YXIgc2Nyb2xsY29udGVudHByZXNlbnRlcjtcbiAgICAgICAgKGZ1bmN0aW9uIChzY3JvbGxjb250ZW50cHJlc2VudGVyKSB7XG4gICAgICAgICAgICB2YXIgbWVhc3VyZTtcbiAgICAgICAgICAgIChmdW5jdGlvbiAobWVhc3VyZSkge1xuICAgICAgICAgICAgICAgIHZhciB0YXBpbnM7XG4gICAgICAgICAgICAgICAgKGZ1bmN0aW9uICh0YXBpbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZmluaXNoRG9PdmVycmlkZShpbnB1dCwgc3RhdGUsIG91dHB1dCwgdHJlZSwgYXZhaWxhYmxlU2l6ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRzID0gb3V0cHV0LmRlc2lyZWRTaXplO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNkID0gaW5wdXQuc2Nyb2xsRGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbmVydmEuU2l6ZS5jb3B5VG8oc3RhdGUuYXZhaWxhYmxlU2l6ZSwgZHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZHMud2lkdGggPSBNYXRoLm1pbihkcy53aWR0aCwgc2QuZXh0ZW50V2lkdGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZHMuaGVpZ2h0ID0gTWF0aC5taW4oZHMuaGVpZ2h0LCBzZC5leHRlbnRIZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGFwaW5zLmZpbmlzaERvT3ZlcnJpZGUgPSBmaW5pc2hEb092ZXJyaWRlO1xuICAgICAgICAgICAgICAgIH0pKHRhcGlucyA9IG1lYXN1cmUudGFwaW5zIHx8IChtZWFzdXJlLnRhcGlucyA9IHt9KSk7XG4gICAgICAgICAgICB9KShtZWFzdXJlID0gc2Nyb2xsY29udGVudHByZXNlbnRlci5tZWFzdXJlIHx8IChzY3JvbGxjb250ZW50cHJlc2VudGVyLm1lYXN1cmUgPSB7fSkpO1xuICAgICAgICB9KShzY3JvbGxjb250ZW50cHJlc2VudGVyID0gY29udHJvbHMuc2Nyb2xsY29udGVudHByZXNlbnRlciB8fCAoY29udHJvbHMuc2Nyb2xsY29udGVudHByZXNlbnRlciA9IHt9KSk7XG4gICAgfSkoY29udHJvbHMgPSBtaW5lcnZhLmNvbnRyb2xzIHx8IChtaW5lcnZhLmNvbnRyb2xzID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29udHJvbHM7XG4gICAgKGZ1bmN0aW9uIChjb250cm9scykge1xuICAgICAgICB2YXIgc2Nyb2xsY29udGVudHByZXNlbnRlcjtcbiAgICAgICAgKGZ1bmN0aW9uIChzY3JvbGxjb250ZW50cHJlc2VudGVyKSB7XG4gICAgICAgICAgICB2YXIgbWVhc3VyZTtcbiAgICAgICAgICAgIChmdW5jdGlvbiAobWVhc3VyZSkge1xuICAgICAgICAgICAgICAgIHZhciB0YXBpbnM7XG4gICAgICAgICAgICAgICAgKGZ1bmN0aW9uICh0YXBpbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gdXBkYXRlRXh0ZW50cyhpbnB1dCwgc3RhdGUsIG91dHB1dCwgdHJlZSwgYXZhaWxhYmxlU2l6ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNkID0gaW5wdXQuc2Nyb2xsRGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2aWV3cG9ydCA9IHN0YXRlLmF2YWlsYWJsZVNpemU7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXh0ZW50ID0gdHJlZS5zdWJ0cmVlLmFzc2V0cy5kZXNpcmVkU2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaGFuZ2VkID0gc2Qudmlld3BvcnRXaWR0aCAhPT0gdmlld3BvcnQud2lkdGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCBzZC52aWV3cG9ydEhlaWdodCAhPT0gdmlld3BvcnQuaGVpZ2h0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfHwgc2QuZXh0ZW50V2lkdGggIT09IGV4dGVudC53aWR0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IHNkLmV4dGVudEhlaWdodCAhPT0gZXh0ZW50LmhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNkLnZpZXdwb3J0V2lkdGggPSB2aWV3cG9ydC53aWR0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNkLnZpZXdwb3J0SGVpZ2h0ID0gdmlld3BvcnQuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgc2QuZXh0ZW50V2lkdGggPSBleHRlbnQud2lkdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZC5leHRlbnRIZWlnaHQgPSBleHRlbnQuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNjcm9sbGNvbnRlbnRwcmVzZW50ZXIuaGVscGVycy5jbGFtcE9mZnNldHMoc2QpIHx8IGNoYW5nZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZC5pbnZhbGlkYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0YXBpbnMudXBkYXRlRXh0ZW50cyA9IHVwZGF0ZUV4dGVudHM7XG4gICAgICAgICAgICAgICAgfSkodGFwaW5zID0gbWVhc3VyZS50YXBpbnMgfHwgKG1lYXN1cmUudGFwaW5zID0ge30pKTtcbiAgICAgICAgICAgIH0pKG1lYXN1cmUgPSBzY3JvbGxjb250ZW50cHJlc2VudGVyLm1lYXN1cmUgfHwgKHNjcm9sbGNvbnRlbnRwcmVzZW50ZXIubWVhc3VyZSA9IHt9KSk7XG4gICAgICAgIH0pKHNjcm9sbGNvbnRlbnRwcmVzZW50ZXIgPSBjb250cm9scy5zY3JvbGxjb250ZW50cHJlc2VudGVyIHx8IChjb250cm9scy5zY3JvbGxjb250ZW50cHJlc2VudGVyID0ge30pKTtcbiAgICB9KShjb250cm9scyA9IG1pbmVydmEuY29udHJvbHMgfHwgKG1pbmVydmEuY29udHJvbHMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb250cm9scztcbiAgICAoZnVuY3Rpb24gKGNvbnRyb2xzKSB7XG4gICAgICAgIHZhciBzdGFja3BhbmVsO1xuICAgICAgICAoZnVuY3Rpb24gKHN0YWNrcGFuZWwpIHtcbiAgICAgICAgICAgIHZhciBhcnJhbmdlO1xuICAgICAgICAgICAgKGZ1bmN0aW9uIChhcnJhbmdlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcGlucztcbiAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBkb0hvcml6b250YWwoaW5wdXQsIHN0YXRlLCBvdXRwdXQsIHRyZWUsIGZpbmFsUmVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0Lm9yaWVudGF0aW9uICE9PSBtaW5lcnZhLk9yaWVudGF0aW9uLkhvcml6b250YWwpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZnMgPSBzdGF0ZS5maW5hbFNpemU7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXJyYW5nZWQgPSBzdGF0ZS5hcnJhbmdlZFNpemU7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcnJhbmdlZC53aWR0aCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGRSZWN0ID0gc3RhdGUuY2hpbGRSZWN0O1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkRGVzaXJlZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHdhbGtlciA9IHRyZWUud2FsaygpOyB3YWxrZXIuc3RlcCgpOykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkID0gd2Fsa2VyLmN1cnJlbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGREZXNpcmVkID0gY2hpbGQuYXNzZXRzLmRlc2lyZWRTaXplO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkRGVzaXJlZC5oZWlnaHQgPSBmcy5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5TaXplLmNvcHlUbyhjaGlsZERlc2lyZWQsIGNoaWxkUmVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRSZWN0LnggPSBhcnJhbmdlZC53aWR0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWluZXJ2YS5SZWN0LmlzRW1wdHkoY2hpbGRSZWN0KSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRSZWN0LnggPSBjaGlsZFJlY3QueSA9IGNoaWxkUmVjdC53aWR0aCA9IGNoaWxkUmVjdC5oZWlnaHQgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkLmFycmFuZ2UoY2hpbGRSZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnJhbmdlZC53aWR0aCArPSBjaGlsZERlc2lyZWQud2lkdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyYW5nZWQuaGVpZ2h0ID0gTWF0aC5tYXgoYXJyYW5nZWQuaGVpZ2h0LCBjaGlsZERlc2lyZWQuaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGFycmFuZ2VkLndpZHRoID0gTWF0aC5tYXgoYXJyYW5nZWQud2lkdGgsIHN0YXRlLmZpbmFsU2l6ZS53aWR0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0YXBpbnMuZG9Ib3Jpem9udGFsID0gZG9Ib3Jpem9udGFsO1xuICAgICAgICAgICAgICAgIH0pKHRhcGlucyA9IGFycmFuZ2UudGFwaW5zIHx8IChhcnJhbmdlLnRhcGlucyA9IHt9KSk7XG4gICAgICAgICAgICB9KShhcnJhbmdlID0gc3RhY2twYW5lbC5hcnJhbmdlIHx8IChzdGFja3BhbmVsLmFycmFuZ2UgPSB7fSkpO1xuICAgICAgICB9KShzdGFja3BhbmVsID0gY29udHJvbHMuc3RhY2twYW5lbCB8fCAoY29udHJvbHMuc3RhY2twYW5lbCA9IHt9KSk7XG4gICAgfSkoY29udHJvbHMgPSBtaW5lcnZhLmNvbnRyb2xzIHx8IChtaW5lcnZhLmNvbnRyb2xzID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29udHJvbHM7XG4gICAgKGZ1bmN0aW9uIChjb250cm9scykge1xuICAgICAgICB2YXIgc3RhY2twYW5lbDtcbiAgICAgICAgKGZ1bmN0aW9uIChzdGFja3BhbmVsKSB7XG4gICAgICAgICAgICB2YXIgYXJyYW5nZTtcbiAgICAgICAgICAgIChmdW5jdGlvbiAoYXJyYW5nZSkge1xuICAgICAgICAgICAgICAgIHZhciB0YXBpbnM7XG4gICAgICAgICAgICAgICAgKGZ1bmN0aW9uICh0YXBpbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZG9PdmVycmlkZShpbnB1dCwgc3RhdGUsIG91dHB1dCwgdHJlZSwgZmluYWxSZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3IgPSBzdGF0ZS5jaGlsZFJlY3Q7XG4gICAgICAgICAgICAgICAgICAgICAgICBjci54ID0gY3IueSA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLlNpemUuY29weVRvKHN0YXRlLmZpbmFsU2l6ZSwgY3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5TaXplLmNvcHlUbyhzdGF0ZS5maW5hbFNpemUsIHN0YXRlLmFycmFuZ2VkU2l6ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0YXBpbnMuZG9PdmVycmlkZSA9IGRvT3ZlcnJpZGU7XG4gICAgICAgICAgICAgICAgfSkodGFwaW5zID0gYXJyYW5nZS50YXBpbnMgfHwgKGFycmFuZ2UudGFwaW5zID0ge30pKTtcbiAgICAgICAgICAgIH0pKGFycmFuZ2UgPSBzdGFja3BhbmVsLmFycmFuZ2UgfHwgKHN0YWNrcGFuZWwuYXJyYW5nZSA9IHt9KSk7XG4gICAgICAgIH0pKHN0YWNrcGFuZWwgPSBjb250cm9scy5zdGFja3BhbmVsIHx8IChjb250cm9scy5zdGFja3BhbmVsID0ge30pKTtcbiAgICB9KShjb250cm9scyA9IG1pbmVydmEuY29udHJvbHMgfHwgKG1pbmVydmEuY29udHJvbHMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb250cm9scztcbiAgICAoZnVuY3Rpb24gKGNvbnRyb2xzKSB7XG4gICAgICAgIHZhciBzdGFja3BhbmVsO1xuICAgICAgICAoZnVuY3Rpb24gKHN0YWNrcGFuZWwpIHtcbiAgICAgICAgICAgIHZhciBhcnJhbmdlO1xuICAgICAgICAgICAgKGZ1bmN0aW9uIChhcnJhbmdlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcGlucztcbiAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBkb1ZlcnRpY2FsKGlucHV0LCBzdGF0ZSwgb3V0cHV0LCB0cmVlLCBmaW5hbFJlY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5vcmllbnRhdGlvbiAhPT0gbWluZXJ2YS5PcmllbnRhdGlvbi5WZXJ0aWNhbClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmcyA9IHN0YXRlLmZpbmFsU2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhcnJhbmdlZCA9IHN0YXRlLmFycmFuZ2VkU2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFycmFuZ2VkLmhlaWdodCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGRSZWN0ID0gc3RhdGUuY2hpbGRSZWN0O1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkRGVzaXJlZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHdhbGtlciA9IHRyZWUud2FsaygpOyB3YWxrZXIuc3RlcCgpOykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkID0gd2Fsa2VyLmN1cnJlbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGREZXNpcmVkID0gY2hpbGQuYXNzZXRzLmRlc2lyZWRTaXplO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkRGVzaXJlZC53aWR0aCA9IGZzLndpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbmVydmEuU2l6ZS5jb3B5VG8oY2hpbGREZXNpcmVkLCBjaGlsZFJlY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkUmVjdC55ID0gYXJyYW5nZWQuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtaW5lcnZhLlJlY3QuaXNFbXB0eShjaGlsZFJlY3QpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZFJlY3QueCA9IGNoaWxkUmVjdC55ID0gY2hpbGRSZWN0LndpZHRoID0gY2hpbGRSZWN0LmhlaWdodCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQuYXJyYW5nZShjaGlsZFJlY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFycmFuZ2VkLndpZHRoID0gTWF0aC5tYXgoYXJyYW5nZWQud2lkdGgsIGNoaWxkRGVzaXJlZC53aWR0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyYW5nZWQuaGVpZ2h0ICs9IGNoaWxkRGVzaXJlZC5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBhcnJhbmdlZC5oZWlnaHQgPSBNYXRoLm1heChhcnJhbmdlZC5oZWlnaHQsIHN0YXRlLmZpbmFsU2l6ZS5oZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGFwaW5zLmRvVmVydGljYWwgPSBkb1ZlcnRpY2FsO1xuICAgICAgICAgICAgICAgIH0pKHRhcGlucyA9IGFycmFuZ2UudGFwaW5zIHx8IChhcnJhbmdlLnRhcGlucyA9IHt9KSk7XG4gICAgICAgICAgICB9KShhcnJhbmdlID0gc3RhY2twYW5lbC5hcnJhbmdlIHx8IChzdGFja3BhbmVsLmFycmFuZ2UgPSB7fSkpO1xuICAgICAgICB9KShzdGFja3BhbmVsID0gY29udHJvbHMuc3RhY2twYW5lbCB8fCAoY29udHJvbHMuc3RhY2twYW5lbCA9IHt9KSk7XG4gICAgfSkoY29udHJvbHMgPSBtaW5lcnZhLmNvbnRyb2xzIHx8IChtaW5lcnZhLmNvbnRyb2xzID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29udHJvbHM7XG4gICAgKGZ1bmN0aW9uIChjb250cm9scykge1xuICAgICAgICB2YXIgc3RhY2twYW5lbDtcbiAgICAgICAgKGZ1bmN0aW9uIChzdGFja3BhbmVsKSB7XG4gICAgICAgICAgICB2YXIgbWVhc3VyZTtcbiAgICAgICAgICAgIChmdW5jdGlvbiAobWVhc3VyZSkge1xuICAgICAgICAgICAgICAgIHZhciB0YXBpbnM7XG4gICAgICAgICAgICAgICAgKGZ1bmN0aW9uICh0YXBpbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZG9Ib3Jpem9udGFsKGlucHV0LCBzdGF0ZSwgb3V0cHV0LCB0cmVlLCBhdmFpbGFibGVTaXplKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQub3JpZW50YXRpb24gIT09IG1pbmVydmEuT3JpZW50YXRpb24uSG9yaXpvbnRhbClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjYSA9IHN0YXRlLmNoaWxkQXZhaWxhYmxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2EuaGVpZ2h0ID0gc3RhdGUuYXZhaWxhYmxlU2l6ZS5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaGVpZ2h0ID0gaW5wdXQuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc05hTihoZWlnaHQpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhLmhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhLmhlaWdodCA9IE1hdGgubWF4KE1hdGgubWluKGNhLmhlaWdodCwgaW5wdXQubWF4SGVpZ2h0KSwgaW5wdXQubWluSGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkZXNpcmVkID0gb3V0cHV0LmRlc2lyZWRTaXplO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgd2Fsa2VyID0gdHJlZS53YWxrKCksIGNoaWxkLCBjaGlsZERlc2lyZWQ7IHdhbGtlci5zdGVwKCk7KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQgPSB3YWxrZXIuY3VycmVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZC5tZWFzdXJlKGNhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZERlc2lyZWQgPSBjaGlsZC5hc3NldHMuZGVzaXJlZFNpemU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzaXJlZC53aWR0aCArPSBjaGlsZERlc2lyZWQud2lkdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzaXJlZC5oZWlnaHQgPSBNYXRoLm1heChkZXNpcmVkLmhlaWdodCwgY2hpbGREZXNpcmVkLmhlaWdodCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0YXBpbnMuZG9Ib3Jpem9udGFsID0gZG9Ib3Jpem9udGFsO1xuICAgICAgICAgICAgICAgIH0pKHRhcGlucyA9IG1lYXN1cmUudGFwaW5zIHx8IChtZWFzdXJlLnRhcGlucyA9IHt9KSk7XG4gICAgICAgICAgICB9KShtZWFzdXJlID0gc3RhY2twYW5lbC5tZWFzdXJlIHx8IChzdGFja3BhbmVsLm1lYXN1cmUgPSB7fSkpO1xuICAgICAgICB9KShzdGFja3BhbmVsID0gY29udHJvbHMuc3RhY2twYW5lbCB8fCAoY29udHJvbHMuc3RhY2twYW5lbCA9IHt9KSk7XG4gICAgfSkoY29udHJvbHMgPSBtaW5lcnZhLmNvbnRyb2xzIHx8IChtaW5lcnZhLmNvbnRyb2xzID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29udHJvbHM7XG4gICAgKGZ1bmN0aW9uIChjb250cm9scykge1xuICAgICAgICB2YXIgc3RhY2twYW5lbDtcbiAgICAgICAgKGZ1bmN0aW9uIChzdGFja3BhbmVsKSB7XG4gICAgICAgICAgICB2YXIgbWVhc3VyZTtcbiAgICAgICAgICAgIChmdW5jdGlvbiAobWVhc3VyZSkge1xuICAgICAgICAgICAgICAgIHZhciB0YXBpbnM7XG4gICAgICAgICAgICAgICAgKGZ1bmN0aW9uICh0YXBpbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZG9PdmVycmlkZShpbnB1dCwgc3RhdGUsIG91dHB1dCwgdHJlZSwgYXZhaWxhYmxlU2l6ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNhID0gc3RhdGUuY2hpbGRBdmFpbGFibGU7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYS53aWR0aCA9IGNhLmhlaWdodCA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkZXNpcmVkID0gb3V0cHV0LmRlc2lyZWRTaXplO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVzaXJlZC53aWR0aCA9IGRlc2lyZWQuaGVpZ2h0ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRhcGlucy5kb092ZXJyaWRlID0gZG9PdmVycmlkZTtcbiAgICAgICAgICAgICAgICB9KSh0YXBpbnMgPSBtZWFzdXJlLnRhcGlucyB8fCAobWVhc3VyZS50YXBpbnMgPSB7fSkpO1xuICAgICAgICAgICAgfSkobWVhc3VyZSA9IHN0YWNrcGFuZWwubWVhc3VyZSB8fCAoc3RhY2twYW5lbC5tZWFzdXJlID0ge30pKTtcbiAgICAgICAgfSkoc3RhY2twYW5lbCA9IGNvbnRyb2xzLnN0YWNrcGFuZWwgfHwgKGNvbnRyb2xzLnN0YWNrcGFuZWwgPSB7fSkpO1xuICAgIH0pKGNvbnRyb2xzID0gbWluZXJ2YS5jb250cm9scyB8fCAobWluZXJ2YS5jb250cm9scyA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvbnRyb2xzO1xuICAgIChmdW5jdGlvbiAoY29udHJvbHMpIHtcbiAgICAgICAgdmFyIHN0YWNrcGFuZWw7XG4gICAgICAgIChmdW5jdGlvbiAoc3RhY2twYW5lbCkge1xuICAgICAgICAgICAgdmFyIG1lYXN1cmU7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKG1lYXN1cmUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFwaW5zO1xuICAgICAgICAgICAgICAgIChmdW5jdGlvbiAodGFwaW5zKSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGRvVmVydGljYWwoaW5wdXQsIHN0YXRlLCBvdXRwdXQsIHRyZWUsIGF2YWlsYWJsZVNpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5vcmllbnRhdGlvbiAhPT0gbWluZXJ2YS5PcmllbnRhdGlvbi5WZXJ0aWNhbClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjYSA9IHN0YXRlLmNoaWxkQXZhaWxhYmxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2Eud2lkdGggPSBzdGF0ZS5hdmFpbGFibGVTaXplLndpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHdpZHRoID0gaW5wdXQud2lkdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzTmFOKHdpZHRoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYS53aWR0aCA9IHdpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2Eud2lkdGggPSBNYXRoLm1heChNYXRoLm1pbihjYS53aWR0aCwgaW5wdXQubWF4V2lkdGgpLCBpbnB1dC5taW5XaWR0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGVzaXJlZCA9IG91dHB1dC5kZXNpcmVkU2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHdhbGtlciA9IHRyZWUud2FsaygpLCBjaGlsZCwgY2hpbGREZXNpcmVkOyB3YWxrZXIuc3RlcCgpOykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkID0gd2Fsa2VyLmN1cnJlbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQubWVhc3VyZShjYSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGREZXNpcmVkID0gY2hpbGQuYXNzZXRzLmRlc2lyZWRTaXplO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2lyZWQuaGVpZ2h0ICs9IGNoaWxkRGVzaXJlZC5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzaXJlZC53aWR0aCA9IE1hdGgubWF4KGRlc2lyZWQud2lkdGgsIGNoaWxkRGVzaXJlZC53aWR0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0YXBpbnMuZG9WZXJ0aWNhbCA9IGRvVmVydGljYWw7XG4gICAgICAgICAgICAgICAgfSkodGFwaW5zID0gbWVhc3VyZS50YXBpbnMgfHwgKG1lYXN1cmUudGFwaW5zID0ge30pKTtcbiAgICAgICAgICAgIH0pKG1lYXN1cmUgPSBzdGFja3BhbmVsLm1lYXN1cmUgfHwgKHN0YWNrcGFuZWwubWVhc3VyZSA9IHt9KSk7XG4gICAgICAgIH0pKHN0YWNrcGFuZWwgPSBjb250cm9scy5zdGFja3BhbmVsIHx8IChjb250cm9scy5zdGFja3BhbmVsID0ge30pKTtcbiAgICB9KShjb250cm9scyA9IG1pbmVydmEuY29udHJvbHMgfHwgKG1pbmVydmEuY29udHJvbHMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb250cm9scztcbiAgICAoZnVuY3Rpb24gKGNvbnRyb2xzKSB7XG4gICAgICAgIHZhciB1c2VyY29udHJvbDtcbiAgICAgICAgKGZ1bmN0aW9uICh1c2VyY29udHJvbCkge1xuICAgICAgICAgICAgdmFyIGFycmFuZ2U7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKGFycmFuZ2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFwaW5zO1xuICAgICAgICAgICAgICAgIChmdW5jdGlvbiAodGFwaW5zKSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGRvT3ZlcnJpZGUoaW5wdXQsIHN0YXRlLCBvdXRwdXQsIHRyZWUsIGZpbmFsUmVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRyZWUuc3VidHJlZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmVlLnN1YnRyZWUuYXJyYW5nZShzdGF0ZS5jaGlsZFJlY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5TaXplLmNvcHlUbyhzdGF0ZS5maW5hbFNpemUsIHN0YXRlLmFycmFuZ2VkU2l6ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0YXBpbnMuZG9PdmVycmlkZSA9IGRvT3ZlcnJpZGU7XG4gICAgICAgICAgICAgICAgfSkodGFwaW5zID0gYXJyYW5nZS50YXBpbnMgfHwgKGFycmFuZ2UudGFwaW5zID0ge30pKTtcbiAgICAgICAgICAgIH0pKGFycmFuZ2UgPSB1c2VyY29udHJvbC5hcnJhbmdlIHx8ICh1c2VyY29udHJvbC5hcnJhbmdlID0ge30pKTtcbiAgICAgICAgfSkodXNlcmNvbnRyb2wgPSBjb250cm9scy51c2VyY29udHJvbCB8fCAoY29udHJvbHMudXNlcmNvbnRyb2wgPSB7fSkpO1xuICAgIH0pKGNvbnRyb2xzID0gbWluZXJ2YS5jb250cm9scyB8fCAobWluZXJ2YS5jb250cm9scyA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvbnRyb2xzO1xuICAgIChmdW5jdGlvbiAoY29udHJvbHMpIHtcbiAgICAgICAgdmFyIHVzZXJjb250cm9sO1xuICAgICAgICAoZnVuY3Rpb24gKHVzZXJjb250cm9sKSB7XG4gICAgICAgICAgICB2YXIgYXJyYW5nZTtcbiAgICAgICAgICAgIChmdW5jdGlvbiAoYXJyYW5nZSkge1xuICAgICAgICAgICAgICAgIHZhciB0YXBpbnM7XG4gICAgICAgICAgICAgICAgKGZ1bmN0aW9uICh0YXBpbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gcHJlT3ZlcnJpZGUoaW5wdXQsIHN0YXRlLCBvdXRwdXQsIHRyZWUsIGF2YWlsYWJsZVNpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdHJlZS5zdWJ0cmVlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRiID0gc3RhdGUudG90YWxCb3JkZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLlRoaWNrbmVzcy5jb3B5VG8oaW5wdXQucGFkZGluZywgdGIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5UaGlja25lc3MuYWRkKHRiLCBpbnB1dC5ib3JkZXJUaGlja25lc3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNyID0gc3RhdGUuY2hpbGRSZWN0O1xuICAgICAgICAgICAgICAgICAgICAgICAgY3IueCA9IGNyLnkgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5TaXplLmNvcHlUbyhzdGF0ZS5maW5hbFNpemUsIGNyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbmVydmEuVGhpY2tuZXNzLnNocmlua1NpemUodGIsIGNyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRhcGlucy5wcmVPdmVycmlkZSA9IHByZU92ZXJyaWRlO1xuICAgICAgICAgICAgICAgIH0pKHRhcGlucyA9IGFycmFuZ2UudGFwaW5zIHx8IChhcnJhbmdlLnRhcGlucyA9IHt9KSk7XG4gICAgICAgICAgICB9KShhcnJhbmdlID0gdXNlcmNvbnRyb2wuYXJyYW5nZSB8fCAodXNlcmNvbnRyb2wuYXJyYW5nZSA9IHt9KSk7XG4gICAgICAgIH0pKHVzZXJjb250cm9sID0gY29udHJvbHMudXNlcmNvbnRyb2wgfHwgKGNvbnRyb2xzLnVzZXJjb250cm9sID0ge30pKTtcbiAgICB9KShjb250cm9scyA9IG1pbmVydmEuY29udHJvbHMgfHwgKG1pbmVydmEuY29udHJvbHMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb250cm9scztcbiAgICAoZnVuY3Rpb24gKGNvbnRyb2xzKSB7XG4gICAgICAgIHZhciB1c2VyY29udHJvbDtcbiAgICAgICAgKGZ1bmN0aW9uICh1c2VyY29udHJvbCkge1xuICAgICAgICAgICAgdmFyIG1lYXN1cmU7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKG1lYXN1cmUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFwaW5zO1xuICAgICAgICAgICAgICAgIChmdW5jdGlvbiAodGFwaW5zKSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGRvT3ZlcnJpZGUoaW5wdXQsIHN0YXRlLCBvdXRwdXQsIHRyZWUsIGF2YWlsYWJsZVNpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkcyA9IG91dHB1dC5kZXNpcmVkU2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdWJ0cmVlID0gdHJlZS5zdWJ0cmVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN1YnRyZWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJ0cmVlLm1lYXN1cmUoc3RhdGUuYXZhaWxhYmxlU2l6ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5TaXplLmNvcHlUbyhzdWJ0cmVlLmFzc2V0cy5kZXNpcmVkU2l6ZSwgZHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGFwaW5zLmRvT3ZlcnJpZGUgPSBkb092ZXJyaWRlO1xuICAgICAgICAgICAgICAgIH0pKHRhcGlucyA9IG1lYXN1cmUudGFwaW5zIHx8IChtZWFzdXJlLnRhcGlucyA9IHt9KSk7XG4gICAgICAgICAgICB9KShtZWFzdXJlID0gdXNlcmNvbnRyb2wubWVhc3VyZSB8fCAodXNlcmNvbnRyb2wubWVhc3VyZSA9IHt9KSk7XG4gICAgICAgIH0pKHVzZXJjb250cm9sID0gY29udHJvbHMudXNlcmNvbnRyb2wgfHwgKGNvbnRyb2xzLnVzZXJjb250cm9sID0ge30pKTtcbiAgICB9KShjb250cm9scyA9IG1pbmVydmEuY29udHJvbHMgfHwgKG1pbmVydmEuY29udHJvbHMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb250cm9scztcbiAgICAoZnVuY3Rpb24gKGNvbnRyb2xzKSB7XG4gICAgICAgIHZhciB1c2VyY29udHJvbDtcbiAgICAgICAgKGZ1bmN0aW9uICh1c2VyY29udHJvbCkge1xuICAgICAgICAgICAgdmFyIG1lYXN1cmU7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKG1lYXN1cmUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFwaW5zO1xuICAgICAgICAgICAgICAgIChmdW5jdGlvbiAodGFwaW5zKSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHBvc3RPdmVycmlkZShpbnB1dCwgc3RhdGUsIG91dHB1dCwgdHJlZSwgYXZhaWxhYmxlU2l6ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5UaGlja25lc3MuZ3Jvd1NpemUoc3RhdGUudG90YWxCb3JkZXIsIG91dHB1dC5kZXNpcmVkU2l6ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLlNpemUubWluKG91dHB1dC5kZXNpcmVkU2l6ZSwgc3RhdGUuYXZhaWxhYmxlU2l6ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0YXBpbnMucG9zdE92ZXJyaWRlID0gcG9zdE92ZXJyaWRlO1xuICAgICAgICAgICAgICAgIH0pKHRhcGlucyA9IG1lYXN1cmUudGFwaW5zIHx8IChtZWFzdXJlLnRhcGlucyA9IHt9KSk7XG4gICAgICAgICAgICB9KShtZWFzdXJlID0gdXNlcmNvbnRyb2wubWVhc3VyZSB8fCAodXNlcmNvbnRyb2wubWVhc3VyZSA9IHt9KSk7XG4gICAgICAgIH0pKHVzZXJjb250cm9sID0gY29udHJvbHMudXNlcmNvbnRyb2wgfHwgKGNvbnRyb2xzLnVzZXJjb250cm9sID0ge30pKTtcbiAgICB9KShjb250cm9scyA9IG1pbmVydmEuY29udHJvbHMgfHwgKG1pbmVydmEuY29udHJvbHMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb250cm9scztcbiAgICAoZnVuY3Rpb24gKGNvbnRyb2xzKSB7XG4gICAgICAgIHZhciB1c2VyY29udHJvbDtcbiAgICAgICAgKGZ1bmN0aW9uICh1c2VyY29udHJvbCkge1xuICAgICAgICAgICAgdmFyIG1lYXN1cmU7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKG1lYXN1cmUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFwaW5zO1xuICAgICAgICAgICAgICAgIChmdW5jdGlvbiAodGFwaW5zKSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHByZU92ZXJyaWRlKGlucHV0LCBzdGF0ZSwgb3V0cHV0LCB0cmVlLCBhdmFpbGFibGVTaXplKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGIgPSBzdGF0ZS50b3RhbEJvcmRlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbmVydmEuVGhpY2tuZXNzLmNvcHlUbyhpbnB1dC5wYWRkaW5nLCB0Yik7XG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLlRoaWNrbmVzcy5hZGQodGIsIGlucHV0LmJvcmRlclRoaWNrbmVzcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLlRoaWNrbmVzcy5zaHJpbmtTaXplKHRiLCBzdGF0ZS5hdmFpbGFibGVTaXplKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRhcGlucy5wcmVPdmVycmlkZSA9IHByZU92ZXJyaWRlO1xuICAgICAgICAgICAgICAgIH0pKHRhcGlucyA9IG1lYXN1cmUudGFwaW5zIHx8IChtZWFzdXJlLnRhcGlucyA9IHt9KSk7XG4gICAgICAgICAgICB9KShtZWFzdXJlID0gdXNlcmNvbnRyb2wubWVhc3VyZSB8fCAodXNlcmNvbnRyb2wubWVhc3VyZSA9IHt9KSk7XG4gICAgICAgIH0pKHVzZXJjb250cm9sID0gY29udHJvbHMudXNlcmNvbnRyb2wgfHwgKGNvbnRyb2xzLnVzZXJjb250cm9sID0ge30pKTtcbiAgICB9KShjb250cm9scyA9IG1pbmVydmEuY29udHJvbHMgfHwgKG1pbmVydmEuY29udHJvbHMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb250cm9scztcbiAgICAoZnVuY3Rpb24gKGNvbnRyb2xzKSB7XG4gICAgICAgIHZhciB2aXJ0dWFsaXppbmdzdGFja3BhbmVsO1xuICAgICAgICAoZnVuY3Rpb24gKHZpcnR1YWxpemluZ3N0YWNrcGFuZWwpIHtcbiAgICAgICAgICAgIHZhciBhcnJhbmdlO1xuICAgICAgICAgICAgKGZ1bmN0aW9uIChhcnJhbmdlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcGlucztcbiAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBkb0hvcml6b250YWwoaW5wdXQsIHN0YXRlLCBvdXRwdXQsIHRyZWUsIGZpbmFsUmVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0Lm9yaWVudGF0aW9uICE9PSBtaW5lcnZhLk9yaWVudGF0aW9uLkhvcml6b250YWwpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZnMgPSBzdGF0ZS5maW5hbFNpemU7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXJyYW5nZWQgPSBzdGF0ZS5hcnJhbmdlZFNpemU7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcnJhbmdlZC53aWR0aCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGRSZWN0ID0gc3RhdGUuY2hpbGRSZWN0O1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNkID0gaW5wdXQuc2Nyb2xsRGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZERlc2lyZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciB3YWxrZXIgPSB0cmVlLndhbGsoKTsgd2Fsa2VyLnN0ZXAoKTspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZCA9IHdhbGtlci5jdXJyZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkRGVzaXJlZCA9IGNoaWxkLmFzc2V0cy5kZXNpcmVkU2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZERlc2lyZWQuaGVpZ2h0ID0gZnMuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbmVydmEuU2l6ZS5jb3B5VG8oY2hpbGREZXNpcmVkLCBjaGlsZFJlY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkUmVjdC54ID0gYXJyYW5nZWQud2lkdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRSZWN0LnkgPSAtc2Qub2Zmc2V0WTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWluZXJ2YS5SZWN0LmlzRW1wdHkoY2hpbGRSZWN0KSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRSZWN0LnggPSBjaGlsZFJlY3QueSA9IGNoaWxkUmVjdC53aWR0aCA9IGNoaWxkUmVjdC5oZWlnaHQgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkLmFycmFuZ2UoY2hpbGRSZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnJhbmdlZC53aWR0aCArPSBjaGlsZERlc2lyZWQud2lkdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyYW5nZWQuaGVpZ2h0ID0gTWF0aC5tYXgoYXJyYW5nZWQuaGVpZ2h0LCBjaGlsZERlc2lyZWQuaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGFycmFuZ2VkLndpZHRoID0gTWF0aC5tYXgoYXJyYW5nZWQud2lkdGgsIGZzLndpZHRoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRhcGlucy5kb0hvcml6b250YWwgPSBkb0hvcml6b250YWw7XG4gICAgICAgICAgICAgICAgfSkodGFwaW5zID0gYXJyYW5nZS50YXBpbnMgfHwgKGFycmFuZ2UudGFwaW5zID0ge30pKTtcbiAgICAgICAgICAgIH0pKGFycmFuZ2UgPSB2aXJ0dWFsaXppbmdzdGFja3BhbmVsLmFycmFuZ2UgfHwgKHZpcnR1YWxpemluZ3N0YWNrcGFuZWwuYXJyYW5nZSA9IHt9KSk7XG4gICAgICAgIH0pKHZpcnR1YWxpemluZ3N0YWNrcGFuZWwgPSBjb250cm9scy52aXJ0dWFsaXppbmdzdGFja3BhbmVsIHx8IChjb250cm9scy52aXJ0dWFsaXppbmdzdGFja3BhbmVsID0ge30pKTtcbiAgICB9KShjb250cm9scyA9IG1pbmVydmEuY29udHJvbHMgfHwgKG1pbmVydmEuY29udHJvbHMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb250cm9scztcbiAgICAoZnVuY3Rpb24gKGNvbnRyb2xzKSB7XG4gICAgICAgIHZhciB2aXJ0dWFsaXppbmdzdGFja3BhbmVsO1xuICAgICAgICAoZnVuY3Rpb24gKHZpcnR1YWxpemluZ3N0YWNrcGFuZWwpIHtcbiAgICAgICAgICAgIHZhciBhcnJhbmdlO1xuICAgICAgICAgICAgKGZ1bmN0aW9uIChhcnJhbmdlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcGlucztcbiAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBkb092ZXJyaWRlKGlucHV0LCBzdGF0ZSwgb3V0cHV0LCB0cmVlLCBmaW5hbFJlY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjciA9IHN0YXRlLmNoaWxkUmVjdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNyLnggPSBjci55ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbmVydmEuU2l6ZS5jb3B5VG8oc3RhdGUuZmluYWxTaXplLCBjcik7XG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLlNpemUuY29weVRvKHN0YXRlLmZpbmFsU2l6ZSwgc3RhdGUuYXJyYW5nZWRTaXplKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRhcGlucy5kb092ZXJyaWRlID0gZG9PdmVycmlkZTtcbiAgICAgICAgICAgICAgICB9KSh0YXBpbnMgPSBhcnJhbmdlLnRhcGlucyB8fCAoYXJyYW5nZS50YXBpbnMgPSB7fSkpO1xuICAgICAgICAgICAgfSkoYXJyYW5nZSA9IHZpcnR1YWxpemluZ3N0YWNrcGFuZWwuYXJyYW5nZSB8fCAodmlydHVhbGl6aW5nc3RhY2twYW5lbC5hcnJhbmdlID0ge30pKTtcbiAgICAgICAgfSkodmlydHVhbGl6aW5nc3RhY2twYW5lbCA9IGNvbnRyb2xzLnZpcnR1YWxpemluZ3N0YWNrcGFuZWwgfHwgKGNvbnRyb2xzLnZpcnR1YWxpemluZ3N0YWNrcGFuZWwgPSB7fSkpO1xuICAgIH0pKGNvbnRyb2xzID0gbWluZXJ2YS5jb250cm9scyB8fCAobWluZXJ2YS5jb250cm9scyA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvbnRyb2xzO1xuICAgIChmdW5jdGlvbiAoY29udHJvbHMpIHtcbiAgICAgICAgdmFyIHZpcnR1YWxpemluZ3N0YWNrcGFuZWw7XG4gICAgICAgIChmdW5jdGlvbiAodmlydHVhbGl6aW5nc3RhY2twYW5lbCkge1xuICAgICAgICAgICAgdmFyIGFycmFuZ2U7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKGFycmFuZ2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFwaW5zO1xuICAgICAgICAgICAgICAgIChmdW5jdGlvbiAodGFwaW5zKSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGRvVmVydGljYWwoaW5wdXQsIHN0YXRlLCBvdXRwdXQsIHRyZWUsIGZpbmFsUmVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0Lm9yaWVudGF0aW9uICE9PSBtaW5lcnZhLk9yaWVudGF0aW9uLlZlcnRpY2FsKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZzID0gc3RhdGUuZmluYWxTaXplO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFycmFuZ2VkID0gc3RhdGUuYXJyYW5nZWRTaXplO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJyYW5nZWQuaGVpZ2h0ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZFJlY3QgPSBzdGF0ZS5jaGlsZFJlY3Q7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2QgPSBpbnB1dC5zY3JvbGxEYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkRGVzaXJlZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHdhbGtlciA9IHRyZWUud2FsaygpOyB3YWxrZXIuc3RlcCgpOykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkID0gd2Fsa2VyLmN1cnJlbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGREZXNpcmVkID0gY2hpbGQuYXNzZXRzLmRlc2lyZWRTaXplO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkRGVzaXJlZC53aWR0aCA9IGZzLndpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbmVydmEuU2l6ZS5jb3B5VG8oY2hpbGREZXNpcmVkLCBjaGlsZFJlY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkUmVjdC54ID0gLXNkLm9mZnNldFg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRSZWN0LnkgPSBhcnJhbmdlZC5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1pbmVydmEuUmVjdC5pc0VtcHR5KGNoaWxkUmVjdCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkUmVjdC54ID0gY2hpbGRSZWN0LnkgPSBjaGlsZFJlY3Qud2lkdGggPSBjaGlsZFJlY3QuaGVpZ2h0ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZC5hcnJhbmdlKGNoaWxkUmVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyYW5nZWQud2lkdGggPSBNYXRoLm1heChhcnJhbmdlZC53aWR0aCwgY2hpbGREZXNpcmVkLndpZHRoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnJhbmdlZC5oZWlnaHQgKz0gY2hpbGREZXNpcmVkLmhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGFycmFuZ2VkLmhlaWdodCA9IE1hdGgubWF4KGFycmFuZ2VkLmhlaWdodCwgZnMuaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRhcGlucy5kb1ZlcnRpY2FsID0gZG9WZXJ0aWNhbDtcbiAgICAgICAgICAgICAgICB9KSh0YXBpbnMgPSBhcnJhbmdlLnRhcGlucyB8fCAoYXJyYW5nZS50YXBpbnMgPSB7fSkpO1xuICAgICAgICAgICAgfSkoYXJyYW5nZSA9IHZpcnR1YWxpemluZ3N0YWNrcGFuZWwuYXJyYW5nZSB8fCAodmlydHVhbGl6aW5nc3RhY2twYW5lbC5hcnJhbmdlID0ge30pKTtcbiAgICAgICAgfSkodmlydHVhbGl6aW5nc3RhY2twYW5lbCA9IGNvbnRyb2xzLnZpcnR1YWxpemluZ3N0YWNrcGFuZWwgfHwgKGNvbnRyb2xzLnZpcnR1YWxpemluZ3N0YWNrcGFuZWwgPSB7fSkpO1xuICAgIH0pKGNvbnRyb2xzID0gbWluZXJ2YS5jb250cm9scyB8fCAobWluZXJ2YS5jb250cm9scyA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvbnRyb2xzO1xuICAgIChmdW5jdGlvbiAoY29udHJvbHMpIHtcbiAgICAgICAgdmFyIHZpcnR1YWxpemluZ3N0YWNrcGFuZWw7XG4gICAgICAgIChmdW5jdGlvbiAodmlydHVhbGl6aW5nc3RhY2twYW5lbCkge1xuICAgICAgICAgICAgdmFyIG1lYXN1cmU7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKG1lYXN1cmUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFwaW5zO1xuICAgICAgICAgICAgICAgIChmdW5jdGlvbiAodGFwaW5zKSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGRvSG9yaXpvbnRhbChpbnB1dCwgc3RhdGUsIG91dHB1dCwgdHJlZSwgYXZhaWxhYmxlU2l6ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0Lm9yaWVudGF0aW9uICE9PSBtaW5lcnZhLk9yaWVudGF0aW9uLkhvcml6b250YWwpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2EgPSBzdGF0ZS5jaGlsZEF2YWlsYWJsZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZCA9IGlucHV0LnNjcm9sbERhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2QuY2FuVmVydGljYWxseVNjcm9sbClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYS5oZWlnaHQgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBNYXRoLmZsb29yKHNkLm9mZnNldFgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvdW50ID0gdHJlZS5jb250YWluZXJPd25lci5pdGVtQ291bnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmVlLmNvbnRhaW5lck93bmVyLnJlbW92ZSgwLCBpbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmlzY291bnQgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRzID0gb3V0cHV0LmRlc2lyZWRTaXplO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgZ2VuZXJhdG9yID0gdHJlZS5jb250YWluZXJPd25lci5jcmVhdGVHZW5lcmF0b3IoaW5kZXgsIGNvdW50KTsgZ2VuZXJhdG9yLmdlbmVyYXRlKCk7KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlzY291bnQrKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSBnZW5lcmF0b3IuY3VycmVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZC5tZWFzdXJlKGNhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGREZXNpcmVkID0gY2hpbGQuYXNzZXRzLmRlc2lyZWRTaXplO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRzLmhlaWdodCA9IE1hdGgubWF4KGRzLmhlaWdodCwgY2hpbGREZXNpcmVkLmhlaWdodCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZHMud2lkdGggKz0gY2hpbGREZXNpcmVkLndpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkcy53aWR0aCA+IGNhLndpZHRoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRyZWUuY29udGFpbmVyT3duZXIucmVtb3ZlKGluZGV4ICsgdmlzY291bnQsIGNvdW50IC0gKGluZGV4ICsgdmlzY291bnQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaGFuZ2VkID0gc2QuZXh0ZW50SGVpZ2h0ICE9PSBkcy5oZWlnaHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCBzZC5leHRlbnRXaWR0aCAhPT0gY291bnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCBzZC52aWV3cG9ydEhlaWdodCAhPT0gY2EuaGVpZ2h0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfHwgc2Qudmlld3BvcnRXaWR0aCAhPT0gdmlzY291bnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZC5leHRlbnRIZWlnaHQgPSBkcy5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZC5leHRlbnRXaWR0aCA9IGNvdW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgc2Qudmlld3BvcnRIZWlnaHQgPSBjYS5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZC52aWV3cG9ydFdpZHRoID0gdmlzY291bnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hhbmdlZClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZC5pbnZhbGlkYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0YXBpbnMuZG9Ib3Jpem9udGFsID0gZG9Ib3Jpem9udGFsO1xuICAgICAgICAgICAgICAgIH0pKHRhcGlucyA9IG1lYXN1cmUudGFwaW5zIHx8IChtZWFzdXJlLnRhcGlucyA9IHt9KSk7XG4gICAgICAgICAgICB9KShtZWFzdXJlID0gdmlydHVhbGl6aW5nc3RhY2twYW5lbC5tZWFzdXJlIHx8ICh2aXJ0dWFsaXppbmdzdGFja3BhbmVsLm1lYXN1cmUgPSB7fSkpO1xuICAgICAgICB9KSh2aXJ0dWFsaXppbmdzdGFja3BhbmVsID0gY29udHJvbHMudmlydHVhbGl6aW5nc3RhY2twYW5lbCB8fCAoY29udHJvbHMudmlydHVhbGl6aW5nc3RhY2twYW5lbCA9IHt9KSk7XG4gICAgfSkoY29udHJvbHMgPSBtaW5lcnZhLmNvbnRyb2xzIHx8IChtaW5lcnZhLmNvbnRyb2xzID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29udHJvbHM7XG4gICAgKGZ1bmN0aW9uIChjb250cm9scykge1xuICAgICAgICB2YXIgdmlydHVhbGl6aW5nc3RhY2twYW5lbDtcbiAgICAgICAgKGZ1bmN0aW9uICh2aXJ0dWFsaXppbmdzdGFja3BhbmVsKSB7XG4gICAgICAgICAgICB2YXIgbWVhc3VyZTtcbiAgICAgICAgICAgIChmdW5jdGlvbiAobWVhc3VyZSkge1xuICAgICAgICAgICAgICAgIHZhciB0YXBpbnM7XG4gICAgICAgICAgICAgICAgKGZ1bmN0aW9uICh0YXBpbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZG9PdmVycmlkZShpbnB1dCwgc3RhdGUsIG91dHB1dCwgdHJlZSwgYXZhaWxhYmxlU2l6ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNhID0gc3RhdGUuY2hpbGRBdmFpbGFibGU7XG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLlNpemUuY29weVRvKHN0YXRlLmF2YWlsYWJsZVNpemUsIGNhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkZXNpcmVkID0gb3V0cHV0LmRlc2lyZWRTaXplO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVzaXJlZC53aWR0aCA9IGRlc2lyZWQuaGVpZ2h0ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRhcGlucy5kb092ZXJyaWRlID0gZG9PdmVycmlkZTtcbiAgICAgICAgICAgICAgICB9KSh0YXBpbnMgPSBtZWFzdXJlLnRhcGlucyB8fCAobWVhc3VyZS50YXBpbnMgPSB7fSkpO1xuICAgICAgICAgICAgfSkobWVhc3VyZSA9IHZpcnR1YWxpemluZ3N0YWNrcGFuZWwubWVhc3VyZSB8fCAodmlydHVhbGl6aW5nc3RhY2twYW5lbC5tZWFzdXJlID0ge30pKTtcbiAgICAgICAgfSkodmlydHVhbGl6aW5nc3RhY2twYW5lbCA9IGNvbnRyb2xzLnZpcnR1YWxpemluZ3N0YWNrcGFuZWwgfHwgKGNvbnRyb2xzLnZpcnR1YWxpemluZ3N0YWNrcGFuZWwgPSB7fSkpO1xuICAgIH0pKGNvbnRyb2xzID0gbWluZXJ2YS5jb250cm9scyB8fCAobWluZXJ2YS5jb250cm9scyA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvbnRyb2xzO1xuICAgIChmdW5jdGlvbiAoY29udHJvbHMpIHtcbiAgICAgICAgdmFyIHZpcnR1YWxpemluZ3N0YWNrcGFuZWw7XG4gICAgICAgIChmdW5jdGlvbiAodmlydHVhbGl6aW5nc3RhY2twYW5lbCkge1xuICAgICAgICAgICAgdmFyIG1lYXN1cmU7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKG1lYXN1cmUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFwaW5zO1xuICAgICAgICAgICAgICAgIChmdW5jdGlvbiAodGFwaW5zKSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGRvVmVydGljYWwoaW5wdXQsIHN0YXRlLCBvdXRwdXQsIHRyZWUsIGF2YWlsYWJsZVNpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5vcmllbnRhdGlvbiAhPT0gbWluZXJ2YS5PcmllbnRhdGlvbi5WZXJ0aWNhbClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjYSA9IHN0YXRlLmNoaWxkQXZhaWxhYmxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNkID0gaW5wdXQuc2Nyb2xsRGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZC5jYW5Ib3Jpem9udGFsbHlTY3JvbGwpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2Eud2lkdGggPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBNYXRoLmZsb29yKHNkLm9mZnNldFkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvdW50ID0gdHJlZS5jb250YWluZXJPd25lci5pdGVtQ291bnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmVlLmNvbnRhaW5lck93bmVyLnJlbW92ZSgwLCBpbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmlzY291bnQgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRzID0gb3V0cHV0LmRlc2lyZWRTaXplO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgZ2VuZXJhdG9yID0gdHJlZS5jb250YWluZXJPd25lci5jcmVhdGVHZW5lcmF0b3IoaW5kZXgsIGNvdW50KTsgZ2VuZXJhdG9yLmdlbmVyYXRlKCk7KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlzY291bnQrKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSBnZW5lcmF0b3IuY3VycmVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZC5tZWFzdXJlKGNhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGREZXNpcmVkID0gY2hpbGQuYXNzZXRzLmRlc2lyZWRTaXplO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRzLndpZHRoID0gTWF0aC5tYXgoZHMud2lkdGgsIGNoaWxkRGVzaXJlZC53aWR0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZHMuaGVpZ2h0ICs9IGNoaWxkRGVzaXJlZC5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRzLmhlaWdodCA+IGNhLmhlaWdodClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmVlLmNvbnRhaW5lck93bmVyLnJlbW92ZShpbmRleCArIHZpc2NvdW50LCBjb3VudCAtIChpbmRleCArIHZpc2NvdW50KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2hhbmdlZCA9IHNkLmV4dGVudEhlaWdodCAhPT0gY291bnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCBzZC5leHRlbnRXaWR0aCAhPT0gZHMud2lkdGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCBzZC52aWV3cG9ydEhlaWdodCAhPT0gdmlzY291bnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCBzZC52aWV3cG9ydFdpZHRoICE9PSBjYS53aWR0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNkLmV4dGVudEhlaWdodCA9IGNvdW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgc2QuZXh0ZW50V2lkdGggPSBkcy53aWR0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNkLnZpZXdwb3J0SGVpZ2h0ID0gdmlzY291bnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZC52aWV3cG9ydFdpZHRoID0gY2Eud2lkdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hhbmdlZClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZC5pbnZhbGlkYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0YXBpbnMuZG9WZXJ0aWNhbCA9IGRvVmVydGljYWw7XG4gICAgICAgICAgICAgICAgfSkodGFwaW5zID0gbWVhc3VyZS50YXBpbnMgfHwgKG1lYXN1cmUudGFwaW5zID0ge30pKTtcbiAgICAgICAgICAgIH0pKG1lYXN1cmUgPSB2aXJ0dWFsaXppbmdzdGFja3BhbmVsLm1lYXN1cmUgfHwgKHZpcnR1YWxpemluZ3N0YWNrcGFuZWwubWVhc3VyZSA9IHt9KSk7XG4gICAgICAgIH0pKHZpcnR1YWxpemluZ3N0YWNrcGFuZWwgPSBjb250cm9scy52aXJ0dWFsaXppbmdzdGFja3BhbmVsIHx8IChjb250cm9scy52aXJ0dWFsaXppbmdzdGFja3BhbmVsID0ge30pKTtcbiAgICB9KShjb250cm9scyA9IG1pbmVydmEuY29udHJvbHMgfHwgKG1pbmVydmEuY29udHJvbHMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBzaGFwZXM7XG4gICAgKGZ1bmN0aW9uIChzaGFwZXMpIHtcbiAgICAgICAgdmFyIHBhdGg7XG4gICAgICAgIChmdW5jdGlvbiAocGF0aCkge1xuICAgICAgICAgICAgdmFyIHByb2Nlc3N1cDtcbiAgICAgICAgICAgIChmdW5jdGlvbiAocHJvY2Vzc3VwKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcGlucztcbiAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBjYWxjQWN0dWFsU2l6ZShpbnB1dCwgc3RhdGUsIG91dHB1dCwgdHJlZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChpbnB1dC5kaXJ0eUZsYWdzICYgbWluZXJ2YS5EaXJ0eUZsYWdzLkJvdW5kcykgPT09IDApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWN0dWFsID0gc3RhdGUuYWN0dWFsU2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdHVhbC53aWR0aCA9IGlucHV0LmFjdHVhbFdpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgYWN0dWFsLmhlaWdodCA9IGlucHV0LmFjdHVhbEhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuYXR1cmFsID0gaW5wdXQubmF0dXJhbEJvdW5kcztcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgobmF0dXJhbC53aWR0aCA8PSAwLjAgfHwgbmF0dXJhbC5oZWlnaHQgPD0gMCkgfHwgKGlucHV0LndpZHRoIDw9IDAuMCB8fCBpbnB1dC5oZWlnaHQgPD0gMC4wKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdHVhbC53aWR0aCA9IDAuMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3R1YWwuaGVpZ2h0ID0gMC4wO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRyZWUudmlzdWFsUGFyZW50IGluc3RhbmNlb2YgbWluZXJ2YS5jb250cm9scy5jYW52YXMuQ2FudmFzVXBkYXRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdHVhbC53aWR0aCA9IGFjdHVhbC53aWR0aCA9PT0gMC4wID8gbmF0dXJhbC53aWR0aCA6IGFjdHVhbC53aWR0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3R1YWwuaGVpZ2h0ID0gYWN0dWFsLmhlaWdodCA9PT0gMC4wID8gbmF0dXJhbC5oZWlnaHQgOiBhY3R1YWwuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNOYU4oaW5wdXQud2lkdGgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3R1YWwud2lkdGggPSBpbnB1dC53aWR0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzTmFOKGlucHV0LmhlaWdodCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdHVhbC5oZWlnaHQgPSBpbnB1dC5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0YXBpbnMuY2FsY0FjdHVhbFNpemUgPSBjYWxjQWN0dWFsU2l6ZTtcbiAgICAgICAgICAgICAgICB9KSh0YXBpbnMgPSBwcm9jZXNzdXAudGFwaW5zIHx8IChwcm9jZXNzdXAudGFwaW5zID0ge30pKTtcbiAgICAgICAgICAgIH0pKHByb2Nlc3N1cCA9IHBhdGgucHJvY2Vzc3VwIHx8IChwYXRoLnByb2Nlc3N1cCA9IHt9KSk7XG4gICAgICAgIH0pKHBhdGggPSBzaGFwZXMucGF0aCB8fCAoc2hhcGVzLnBhdGggPSB7fSkpO1xuICAgIH0pKHNoYXBlcyA9IG1pbmVydmEuc2hhcGVzIHx8IChtaW5lcnZhLnNoYXBlcyA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIHNoYXBlcztcbiAgICAoZnVuY3Rpb24gKHNoYXBlcykge1xuICAgICAgICB2YXIgcGF0aDtcbiAgICAgICAgKGZ1bmN0aW9uIChwYXRoKSB7XG4gICAgICAgICAgICB2YXIgcHJvY2Vzc3VwO1xuICAgICAgICAgICAgKGZ1bmN0aW9uIChwcm9jZXNzdXApIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFwaW5zO1xuICAgICAgICAgICAgICAgIChmdW5jdGlvbiAodGFwaW5zKSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNhbGNFeHRlbnRzKGlucHV0LCBzdGF0ZSwgb3V0cHV0LCB0cmVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKGlucHV0LmRpcnR5RmxhZ3MgJiBtaW5lcnZhLkRpcnR5RmxhZ3MuQm91bmRzKSA9PT0gMClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtaW5lcnZhLlNpemUuaXNFbXB0eShzdGF0ZS5hY3R1YWxTaXplKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbmVydmEuUmVjdC5jbGVhcihvdXRwdXQuZXh0ZW50cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLlJlY3QuY29weVRvKG91dHB1dC5zaGFwZVJlY3QsIG91dHB1dC5leHRlbnRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLlJlY3QudHJhbnNmb3JtKG91dHB1dC5leHRlbnRzLCBvdXRwdXQuc3RyZXRjaFhmb3JtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbmVydmEuUmVjdC5jb3B5VG8ob3V0cHV0LmV4dGVudHMsIG91dHB1dC5leHRlbnRzV2l0aENoaWxkcmVuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRhcGlucy5jYWxjRXh0ZW50cyA9IGNhbGNFeHRlbnRzO1xuICAgICAgICAgICAgICAgIH0pKHRhcGlucyA9IHByb2Nlc3N1cC50YXBpbnMgfHwgKHByb2Nlc3N1cC50YXBpbnMgPSB7fSkpO1xuICAgICAgICAgICAgfSkocHJvY2Vzc3VwID0gcGF0aC5wcm9jZXNzdXAgfHwgKHBhdGgucHJvY2Vzc3VwID0ge30pKTtcbiAgICAgICAgfSkocGF0aCA9IHNoYXBlcy5wYXRoIHx8IChzaGFwZXMucGF0aCA9IHt9KSk7XG4gICAgfSkoc2hhcGVzID0gbWluZXJ2YS5zaGFwZXMgfHwgKG1pbmVydmEuc2hhcGVzID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgc2hhcGVzO1xuICAgIChmdW5jdGlvbiAoc2hhcGVzKSB7XG4gICAgICAgIHZhciBwYXRoO1xuICAgICAgICAoZnVuY3Rpb24gKHBhdGgpIHtcbiAgICAgICAgICAgIHZhciBwcm9jZXNzdXA7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKHByb2Nlc3N1cCkge1xuICAgICAgICAgICAgICAgIHZhciB0YXBpbnM7XG4gICAgICAgICAgICAgICAgKGZ1bmN0aW9uICh0YXBpbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gY2FsY1NoYXBlUmVjdChpbnB1dCwgc3RhdGUsIG91dHB1dCwgdHJlZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChpbnB1dC5kaXJ0eUZsYWdzICYgbWluZXJ2YS5EaXJ0eUZsYWdzLkJvdW5kcykgPT09IDApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLlJlY3QuY29weVRvKGlucHV0Lm5hdHVyYWxCb3VuZHMsIG91dHB1dC5zaGFwZVJlY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGFwaW5zLmNhbGNTaGFwZVJlY3QgPSBjYWxjU2hhcGVSZWN0O1xuICAgICAgICAgICAgICAgIH0pKHRhcGlucyA9IHByb2Nlc3N1cC50YXBpbnMgfHwgKHByb2Nlc3N1cC50YXBpbnMgPSB7fSkpO1xuICAgICAgICAgICAgfSkocHJvY2Vzc3VwID0gcGF0aC5wcm9jZXNzdXAgfHwgKHBhdGgucHJvY2Vzc3VwID0ge30pKTtcbiAgICAgICAgfSkocGF0aCA9IHNoYXBlcy5wYXRoIHx8IChzaGFwZXMucGF0aCA9IHt9KSk7XG4gICAgfSkoc2hhcGVzID0gbWluZXJ2YS5zaGFwZXMgfHwgKG1pbmVydmEuc2hhcGVzID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgc2hhcGVzO1xuICAgIChmdW5jdGlvbiAoc2hhcGVzKSB7XG4gICAgICAgIHZhciBwYXRoO1xuICAgICAgICAoZnVuY3Rpb24gKHBhdGgpIHtcbiAgICAgICAgICAgIHZhciBwcm9jZXNzdXA7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKHByb2Nlc3N1cCkge1xuICAgICAgICAgICAgICAgIHZhciB0YXBpbnM7XG4gICAgICAgICAgICAgICAgKGZ1bmN0aW9uICh0YXBpbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gY2FsY1N0cmV0Y2goaW5wdXQsIHN0YXRlLCBvdXRwdXQsIHRyZWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoaW5wdXQuZGlydHlGbGFncyAmIG1pbmVydmEuRGlydHlGbGFncy5Cb3VuZHMpID09PSAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHhmb3JtID0gbWluZXJ2YS5tYXQzLmlkZW50aXR5KG91dHB1dC5zdHJldGNoWGZvcm0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFjdHVhbCA9IHN0YXRlLmFjdHVhbFNpemU7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWluZXJ2YS5TaXplLmlzRW1wdHkoYWN0dWFsKSB8fCBpbnB1dC5zdHJldGNoID09PSBtaW5lcnZhLlN0cmV0Y2guTm9uZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzaGFwZVJlY3QgPSBvdXRwdXQuc2hhcGVSZWN0O1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN4ID0gYWN0dWFsLndpZHRoIC8gc2hhcGVSZWN0LndpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN5ID0gYWN0dWFsLmhlaWdodCAvIHNoYXBlUmVjdC5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgeHAgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHlwID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoaW5wdXQuc3RyZXRjaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgbWluZXJ2YS5TdHJldGNoLlVuaWZvcm06XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN4ID0gc3kgPSBNYXRoLm1pbihzeCwgc3kpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4cCA9IChhY3R1YWwud2lkdGggLSAoc2hhcGVSZWN0LndpZHRoICogc3gpKSAvIDIuMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeXAgPSAoYWN0dWFsLmhlaWdodCAtIChzaGFwZVJlY3QuaGVpZ2h0ICogc3kpKSAvIDIuMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBtaW5lcnZhLlN0cmV0Y2guVW5pZm9ybVRvRmlsbDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ggPSBzeSA9IE1hdGgubWF4KHN4LCBzeSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5tYXQzLnRyYW5zbGF0ZSh4Zm9ybSwgLXNoYXBlUmVjdC54LCAtc2hhcGVSZWN0LnkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5tYXQzLnNjYWxlKHhmb3JtLCBzeCwgc3kpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5tYXQzLnRyYW5zbGF0ZSh4Zm9ybSwgeHAsIHlwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRhcGlucy5jYWxjU3RyZXRjaCA9IGNhbGNTdHJldGNoO1xuICAgICAgICAgICAgICAgIH0pKHRhcGlucyA9IHByb2Nlc3N1cC50YXBpbnMgfHwgKHByb2Nlc3N1cC50YXBpbnMgPSB7fSkpO1xuICAgICAgICAgICAgfSkocHJvY2Vzc3VwID0gcGF0aC5wcm9jZXNzdXAgfHwgKHBhdGgucHJvY2Vzc3VwID0ge30pKTtcbiAgICAgICAgfSkocGF0aCA9IHNoYXBlcy5wYXRoIHx8IChzaGFwZXMucGF0aCA9IHt9KSk7XG4gICAgfSkoc2hhcGVzID0gbWluZXJ2YS5zaGFwZXMgfHwgKG1pbmVydmEuc2hhcGVzID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgc2hhcGVzO1xuICAgIChmdW5jdGlvbiAoc2hhcGVzKSB7XG4gICAgICAgIHZhciBwYXRoO1xuICAgICAgICAoZnVuY3Rpb24gKHBhdGgpIHtcbiAgICAgICAgICAgIHZhciByZW5kZXI7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKHJlbmRlcikge1xuICAgICAgICAgICAgICAgIHZhciB0YXBpbnM7XG4gICAgICAgICAgICAgICAgKGZ1bmN0aW9uICh0YXBpbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZG9SZW5kZXIoaW5wdXQsIHN0YXRlLCBvdXRwdXQsIGN0eCwgcmVnaW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXN0YXRlLnNob3VsZERyYXcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHgucHJlYXBwbHkoaW5wdXQuc3RyZXRjaFhmb3JtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LmRhdGEuRHJhdyhjdHgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGFwaW5zLmRvUmVuZGVyID0gZG9SZW5kZXI7XG4gICAgICAgICAgICAgICAgfSkodGFwaW5zID0gcmVuZGVyLnRhcGlucyB8fCAocmVuZGVyLnRhcGlucyA9IHt9KSk7XG4gICAgICAgICAgICB9KShyZW5kZXIgPSBwYXRoLnJlbmRlciB8fCAocGF0aC5yZW5kZXIgPSB7fSkpO1xuICAgICAgICB9KShwYXRoID0gc2hhcGVzLnBhdGggfHwgKHNoYXBlcy5wYXRoID0ge30pKTtcbiAgICB9KShzaGFwZXMgPSBtaW5lcnZhLnNoYXBlcyB8fCAobWluZXJ2YS5zaGFwZXMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBzaGFwZXM7XG4gICAgKGZ1bmN0aW9uIChzaGFwZXMpIHtcbiAgICAgICAgdmFyIHBhdGg7XG4gICAgICAgIChmdW5jdGlvbiAocGF0aCkge1xuICAgICAgICAgICAgdmFyIHJlbmRlcjtcbiAgICAgICAgICAgIChmdW5jdGlvbiAocmVuZGVyKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcGlucztcbiAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBmaWxsKGlucHV0LCBzdGF0ZSwgb3V0cHV0LCBjdHgsIHJlZ2lvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzdGF0ZS5zaG91bGREcmF3KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LmZpbGwpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3R4LmZpbGxFeChpbnB1dC5maWxsLCBpbnB1dC5zaGFwZVJlY3QsIGlucHV0LmRhdGEgPyBpbnB1dC5kYXRhLmZpbGxSdWxlIDogbWluZXJ2YS5GaWxsUnVsZS5FdmVuT2RkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRhcGlucy5maWxsID0gZmlsbDtcbiAgICAgICAgICAgICAgICB9KSh0YXBpbnMgPSByZW5kZXIudGFwaW5zIHx8IChyZW5kZXIudGFwaW5zID0ge30pKTtcbiAgICAgICAgICAgIH0pKHJlbmRlciA9IHBhdGgucmVuZGVyIHx8IChwYXRoLnJlbmRlciA9IHt9KSk7XG4gICAgICAgIH0pKHBhdGggPSBzaGFwZXMucGF0aCB8fCAoc2hhcGVzLnBhdGggPSB7fSkpO1xuICAgIH0pKHNoYXBlcyA9IG1pbmVydmEuc2hhcGVzIHx8IChtaW5lcnZhLnNoYXBlcyA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIHNoYXBlcztcbiAgICAoZnVuY3Rpb24gKHNoYXBlcykge1xuICAgICAgICB2YXIgc2hhcGU7XG4gICAgICAgIChmdW5jdGlvbiAoc2hhcGUpIHtcbiAgICAgICAgICAgIHZhciBhcnJhbmdlO1xuICAgICAgICAgICAgKGZ1bmN0aW9uIChhcnJhbmdlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcGlucztcbiAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBkb092ZXJyaWRlKGlucHV0LCBzdGF0ZSwgb3V0cHV0LCB0cmVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXJyYW5nZWQgPSBzdGF0ZS5hcnJhbmdlZFNpemU7XG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLlNpemUuY29weVRvKHN0YXRlLmZpbmFsU2l6ZSwgYXJyYW5nZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5iID0gaW5wdXQubmF0dXJhbEJvdW5kcztcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5zdHJldGNoID09PSBtaW5lcnZhLlN0cmV0Y2guTm9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFycmFuZ2VkLndpZHRoID0gTWF0aC5tYXgoYXJyYW5nZWQud2lkdGgsIG5iLnggKyBuYi53aWR0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyYW5nZWQuaGVpZ2h0ID0gTWF0aC5tYXgoYXJyYW5nZWQuaGVpZ2h0LCBuYi55ICsgbmIuaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuYi53aWR0aCA9PT0gMClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYi53aWR0aCA9IGFycmFuZ2VkLndpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5iLmhlaWdodCA9PT0gMClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYi5oZWlnaHQgPSBhcnJhbmdlZC5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3ggPSAxLjAsIHN5ID0gMS4wO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5iLndpZHRoICE9PSBhcnJhbmdlZC53aWR0aClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzeCA9IGFycmFuZ2VkLndpZHRoIC8gbmIud2lkdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmIuaGVpZ2h0ICE9PSBhcnJhbmdlZC5oZWlnaHQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3kgPSBhcnJhbmdlZC5oZWlnaHQgLyBuYi5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGlucHV0LnN0cmV0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIG1pbmVydmEuU3RyZXRjaC5Vbmlmb3JtOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzeCA9IHN5ID0gTWF0aC5taW4oc3gsIHN5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBtaW5lcnZhLlN0cmV0Y2guVW5pZm9ybVRvRmlsbDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ggPSBzeSA9IE1hdGgubWF4KHN4LCBzeSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYXJyYW5nZWQud2lkdGggPSAobmIud2lkdGggKiBzeCkgfHwgMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFycmFuZ2VkLmhlaWdodCA9IChuYi5oZWlnaHQgKiBzeSkgfHwgMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRhcGlucy5kb092ZXJyaWRlID0gZG9PdmVycmlkZTtcbiAgICAgICAgICAgICAgICB9KSh0YXBpbnMgPSBhcnJhbmdlLnRhcGlucyB8fCAoYXJyYW5nZS50YXBpbnMgPSB7fSkpO1xuICAgICAgICAgICAgfSkoYXJyYW5nZSA9IHNoYXBlLmFycmFuZ2UgfHwgKHNoYXBlLmFycmFuZ2UgPSB7fSkpO1xuICAgICAgICB9KShzaGFwZSA9IHNoYXBlcy5zaGFwZSB8fCAoc2hhcGVzLnNoYXBlID0ge30pKTtcbiAgICB9KShzaGFwZXMgPSBtaW5lcnZhLnNoYXBlcyB8fCAobWluZXJ2YS5zaGFwZXMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBzaGFwZXM7XG4gICAgKGZ1bmN0aW9uIChzaGFwZXMpIHtcbiAgICAgICAgdmFyIHNoYXBlO1xuICAgICAgICAoZnVuY3Rpb24gKHNoYXBlKSB7XG4gICAgICAgICAgICB2YXIgaGl0dGVzdDtcbiAgICAgICAgICAgIChmdW5jdGlvbiAoaGl0dGVzdCkge1xuICAgICAgICAgICAgICAgIHZhciB0YXBpbnM7XG4gICAgICAgICAgICAgICAgKGZ1bmN0aW9uICh0YXBpbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gY2FuSGl0SW5zaWRlKGRhdGEsIHBvcywgaGl0TGlzdCwgY3R4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWRhdGEuYXNzZXRzLmZpbGwgJiYgIWRhdGEuYXNzZXRzLnN0cm9rZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpdExpc3Quc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRhcGlucy5jYW5IaXRJbnNpZGUgPSBjYW5IaXRJbnNpZGU7XG4gICAgICAgICAgICAgICAgfSkodGFwaW5zID0gaGl0dGVzdC50YXBpbnMgfHwgKGhpdHRlc3QudGFwaW5zID0ge30pKTtcbiAgICAgICAgICAgIH0pKGhpdHRlc3QgPSBzaGFwZS5oaXR0ZXN0IHx8IChzaGFwZS5oaXR0ZXN0ID0ge30pKTtcbiAgICAgICAgfSkoc2hhcGUgPSBzaGFwZXMuc2hhcGUgfHwgKHNoYXBlcy5zaGFwZSA9IHt9KSk7XG4gICAgfSkoc2hhcGVzID0gbWluZXJ2YS5zaGFwZXMgfHwgKG1pbmVydmEuc2hhcGVzID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgc2hhcGVzO1xuICAgIChmdW5jdGlvbiAoc2hhcGVzKSB7XG4gICAgICAgIHZhciBzaGFwZTtcbiAgICAgICAgKGZ1bmN0aW9uIChzaGFwZSkge1xuICAgICAgICAgICAgdmFyIGhpdHRlc3Q7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKGhpdHRlc3QpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFwaW5zO1xuICAgICAgICAgICAgICAgIChmdW5jdGlvbiAodGFwaW5zKSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNhbkhpdFNoYXBlKGRhdGEsIHBvcywgaGl0TGlzdCwgY3R4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKGRhdGEuYXNzZXRzLnNoYXBlRmxhZ3MgJiBtaW5lcnZhLlNoYXBlRmxhZ3MuRW1wdHkpID09PSBtaW5lcnZhLlNoYXBlRmxhZ3MuRW1wdHkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaXRMaXN0LnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0YXBpbnMuY2FuSGl0U2hhcGUgPSBjYW5IaXRTaGFwZTtcbiAgICAgICAgICAgICAgICB9KSh0YXBpbnMgPSBoaXR0ZXN0LnRhcGlucyB8fCAoaGl0dGVzdC50YXBpbnMgPSB7fSkpO1xuICAgICAgICAgICAgfSkoaGl0dGVzdCA9IHNoYXBlLmhpdHRlc3QgfHwgKHNoYXBlLmhpdHRlc3QgPSB7fSkpO1xuICAgICAgICB9KShzaGFwZSA9IHNoYXBlcy5zaGFwZSB8fCAoc2hhcGVzLnNoYXBlID0ge30pKTtcbiAgICB9KShzaGFwZXMgPSBtaW5lcnZhLnNoYXBlcyB8fCAobWluZXJ2YS5zaGFwZXMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBzaGFwZXM7XG4gICAgKGZ1bmN0aW9uIChzaGFwZXMpIHtcbiAgICAgICAgdmFyIHNoYXBlO1xuICAgICAgICAoZnVuY3Rpb24gKHNoYXBlKSB7XG4gICAgICAgICAgICB2YXIgaGl0dGVzdDtcbiAgICAgICAgICAgIChmdW5jdGlvbiAoaGl0dGVzdCkge1xuICAgICAgICAgICAgICAgIHZhciB0YXBpbnM7XG4gICAgICAgICAgICAgICAgKGZ1bmN0aW9uICh0YXBpbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZHJhd1NoYXBlKGRhdGEsIHBvcywgaGl0TGlzdCwgY3R4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0YXBpbnMuZHJhd1NoYXBlID0gZHJhd1NoYXBlO1xuICAgICAgICAgICAgICAgIH0pKHRhcGlucyA9IGhpdHRlc3QudGFwaW5zIHx8IChoaXR0ZXN0LnRhcGlucyA9IHt9KSk7XG4gICAgICAgICAgICB9KShoaXR0ZXN0ID0gc2hhcGUuaGl0dGVzdCB8fCAoc2hhcGUuaGl0dGVzdCA9IHt9KSk7XG4gICAgICAgIH0pKHNoYXBlID0gc2hhcGVzLnNoYXBlIHx8IChzaGFwZXMuc2hhcGUgPSB7fSkpO1xuICAgIH0pKHNoYXBlcyA9IG1pbmVydmEuc2hhcGVzIHx8IChtaW5lcnZhLnNoYXBlcyA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIHNoYXBlcztcbiAgICAoZnVuY3Rpb24gKHNoYXBlcykge1xuICAgICAgICB2YXIgc2hhcGU7XG4gICAgICAgIChmdW5jdGlvbiAoc2hhcGUpIHtcbiAgICAgICAgICAgIHZhciBoaXR0ZXN0O1xuICAgICAgICAgICAgKGZ1bmN0aW9uIChoaXR0ZXN0KSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcGlucztcbiAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBmaW5pc2hTaGFwZShkYXRhLCBwb3MsIGhpdExpc3QsIGN0eCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFzc2V0cyA9IGRhdGEuYXNzZXRzO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluc2lkZSA9ICghIWFzc2V0cy5maWxsICYmIGN0eC5yYXcuaXNQb2ludEluUGF0aChwb3MueCwgcG9zLnkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8ICghIWFzc2V0cy5zdHJva2UgJiYgY3R4LmlzUG9pbnRJblN0cm9rZUV4KGFzc2V0cywgcG9zLngsIHBvcy55KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpbnNpZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaXRMaXN0LnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0YXBpbnMuZmluaXNoU2hhcGUgPSBmaW5pc2hTaGFwZTtcbiAgICAgICAgICAgICAgICB9KSh0YXBpbnMgPSBoaXR0ZXN0LnRhcGlucyB8fCAoaGl0dGVzdC50YXBpbnMgPSB7fSkpO1xuICAgICAgICAgICAgfSkoaGl0dGVzdCA9IHNoYXBlLmhpdHRlc3QgfHwgKHNoYXBlLmhpdHRlc3QgPSB7fSkpO1xuICAgICAgICB9KShzaGFwZSA9IHNoYXBlcy5zaGFwZSB8fCAoc2hhcGVzLnNoYXBlID0ge30pKTtcbiAgICB9KShzaGFwZXMgPSBtaW5lcnZhLnNoYXBlcyB8fCAobWluZXJ2YS5zaGFwZXMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBzaGFwZXM7XG4gICAgKGZ1bmN0aW9uIChzaGFwZXMpIHtcbiAgICAgICAgdmFyIHNoYXBlO1xuICAgICAgICAoZnVuY3Rpb24gKHNoYXBlKSB7XG4gICAgICAgICAgICB2YXIgaGl0dGVzdDtcbiAgICAgICAgICAgIChmdW5jdGlvbiAoaGl0dGVzdCkge1xuICAgICAgICAgICAgICAgIHZhciB0YXBpbnM7XG4gICAgICAgICAgICAgICAgKGZ1bmN0aW9uICh0YXBpbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gaW5zaWRlQ2hpbGRyZW4oZGF0YSwgcG9zLCBoaXRMaXN0LCBjdHgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhpdExpc3QudW5zaGlmdChkYXRhLnVwZGF0ZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5oaXRDaGlsZHJlbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGFwaW5zLmluc2lkZUNoaWxkcmVuID0gaW5zaWRlQ2hpbGRyZW47XG4gICAgICAgICAgICAgICAgfSkodGFwaW5zID0gaGl0dGVzdC50YXBpbnMgfHwgKGhpdHRlc3QudGFwaW5zID0ge30pKTtcbiAgICAgICAgICAgIH0pKGhpdHRlc3QgPSBzaGFwZS5oaXR0ZXN0IHx8IChzaGFwZS5oaXR0ZXN0ID0ge30pKTtcbiAgICAgICAgfSkoc2hhcGUgPSBzaGFwZXMuc2hhcGUgfHwgKHNoYXBlcy5zaGFwZSA9IHt9KSk7XG4gICAgfSkoc2hhcGVzID0gbWluZXJ2YS5zaGFwZXMgfHwgKG1pbmVydmEuc2hhcGVzID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgc2hhcGVzO1xuICAgIChmdW5jdGlvbiAoc2hhcGVzKSB7XG4gICAgICAgIHZhciBzaGFwZTtcbiAgICAgICAgKGZ1bmN0aW9uIChzaGFwZSkge1xuICAgICAgICAgICAgdmFyIGhpdHRlc3Q7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKGhpdHRlc3QpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFwaW5zO1xuICAgICAgICAgICAgICAgIChmdW5jdGlvbiAodGFwaW5zKSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHByZXBhcmVTaGFwZShkYXRhLCBwb3MsIGhpdExpc3QsIGN0eCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRhcGlucy5wcmVwYXJlU2hhcGUgPSBwcmVwYXJlU2hhcGU7XG4gICAgICAgICAgICAgICAgfSkodGFwaW5zID0gaGl0dGVzdC50YXBpbnMgfHwgKGhpdHRlc3QudGFwaW5zID0ge30pKTtcbiAgICAgICAgICAgIH0pKGhpdHRlc3QgPSBzaGFwZS5oaXR0ZXN0IHx8IChzaGFwZS5oaXR0ZXN0ID0ge30pKTtcbiAgICAgICAgfSkoc2hhcGUgPSBzaGFwZXMuc2hhcGUgfHwgKHNoYXBlcy5zaGFwZSA9IHt9KSk7XG4gICAgfSkoc2hhcGVzID0gbWluZXJ2YS5zaGFwZXMgfHwgKG1pbmVydmEuc2hhcGVzID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgc2hhcGVzO1xuICAgIChmdW5jdGlvbiAoc2hhcGVzKSB7XG4gICAgICAgIHZhciBzaGFwZTtcbiAgICAgICAgKGZ1bmN0aW9uIChzaGFwZSkge1xuICAgICAgICAgICAgdmFyIG1lYXN1cmU7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKG1lYXN1cmUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFwaW5zO1xuICAgICAgICAgICAgICAgIChmdW5jdGlvbiAodGFwaW5zKSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNhbGNOYXR1cmFsQm91bmRzKGlucHV0LCBzdGF0ZSwgb3V0cHV0LCB0cmVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmIgPSBvdXRwdXQubmF0dXJhbEJvdW5kcztcbiAgICAgICAgICAgICAgICAgICAgICAgIG5iLnggPSBuYi55ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5iLndpZHRoID0gbmIuaGVpZ2h0ID0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRhcGlucy5jYWxjTmF0dXJhbEJvdW5kcyA9IGNhbGNOYXR1cmFsQm91bmRzO1xuICAgICAgICAgICAgICAgIH0pKHRhcGlucyA9IG1lYXN1cmUudGFwaW5zIHx8IChtZWFzdXJlLnRhcGlucyA9IHt9KSk7XG4gICAgICAgICAgICB9KShtZWFzdXJlID0gc2hhcGUubWVhc3VyZSB8fCAoc2hhcGUubWVhc3VyZSA9IHt9KSk7XG4gICAgICAgIH0pKHNoYXBlID0gc2hhcGVzLnNoYXBlIHx8IChzaGFwZXMuc2hhcGUgPSB7fSkpO1xuICAgIH0pKHNoYXBlcyA9IG1pbmVydmEuc2hhcGVzIHx8IChtaW5lcnZhLnNoYXBlcyA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIHNoYXBlcztcbiAgICAoZnVuY3Rpb24gKHNoYXBlcykge1xuICAgICAgICB2YXIgc2hhcGU7XG4gICAgICAgIChmdW5jdGlvbiAoc2hhcGUpIHtcbiAgICAgICAgICAgIHZhciBtZWFzdXJlO1xuICAgICAgICAgICAgKGZ1bmN0aW9uIChtZWFzdXJlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcGlucztcbiAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBkb092ZXJyaWRlKGlucHV0LCBzdGF0ZSwgb3V0cHV0LCB0cmVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZHMgPSBvdXRwdXQuZGVzaXJlZFNpemU7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmIgPSBvdXRwdXQubmF0dXJhbEJvdW5kcztcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5zdHJldGNoID09PSBtaW5lcnZhLlN0cmV0Y2guTm9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRzLndpZHRoID0gbmIueCArIG5iLndpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRzLmhlaWdodCA9IG5iLnkgKyBuYi5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXZhaWxhYmxlID0gc3RhdGUuYXZhaWxhYmxlU2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbmVydmEuU2l6ZS5jb3B5VG8oYXZhaWxhYmxlLCBkcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzRmluaXRlKGF2YWlsYWJsZS53aWR0aCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZHMud2lkdGggPSBuYi53aWR0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNGaW5pdGUoYXZhaWxhYmxlLmhlaWdodCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZHMuaGVpZ2h0ID0gbmIuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN4ID0gMCwgc3kgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5iLndpZHRoID4gMClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzeCA9IGRzLndpZHRoIC8gbmIud2lkdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmIuaGVpZ2h0ID4gMClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzeSA9IGRzLmhlaWdodCAvIG5iLmhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNGaW5pdGUoYXZhaWxhYmxlLndpZHRoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzeCA9IHN5O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc0Zpbml0ZShhdmFpbGFibGUuaGVpZ2h0KSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzeSA9IHN4O1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChpbnB1dC5zdHJldGNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBtaW5lcnZhLlN0cmV0Y2guVW5pZm9ybTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ggPSBzeSA9IE1hdGgubWluKHN4LCBzeSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgbWluZXJ2YS5TdHJldGNoLlVuaWZvcm1Ub0ZpbGw6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN4ID0gc3kgPSBNYXRoLm1heChzeCwgc3kpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIG1pbmVydmEuU3RyZXRjaC5GaWxsOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzRmluaXRlKGF2YWlsYWJsZS53aWR0aCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzeCA9IDEuMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc0Zpbml0ZShhdmFpbGFibGUuaGVpZ2h0KSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN5ID0gMS4wO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGRzLndpZHRoID0gbmIud2lkdGggKiBzeDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRzLmhlaWdodCA9IG5iLmhlaWdodCAqIHN5O1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGFwaW5zLmRvT3ZlcnJpZGUgPSBkb092ZXJyaWRlO1xuICAgICAgICAgICAgICAgIH0pKHRhcGlucyA9IG1lYXN1cmUudGFwaW5zIHx8IChtZWFzdXJlLnRhcGlucyA9IHt9KSk7XG4gICAgICAgICAgICB9KShtZWFzdXJlID0gc2hhcGUubWVhc3VyZSB8fCAoc2hhcGUubWVhc3VyZSA9IHt9KSk7XG4gICAgICAgIH0pKHNoYXBlID0gc2hhcGVzLnNoYXBlIHx8IChzaGFwZXMuc2hhcGUgPSB7fSkpO1xuICAgIH0pKHNoYXBlcyA9IG1pbmVydmEuc2hhcGVzIHx8IChtaW5lcnZhLnNoYXBlcyA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIHNoYXBlcztcbiAgICAoZnVuY3Rpb24gKHNoYXBlcykge1xuICAgICAgICB2YXIgc2hhcGU7XG4gICAgICAgIChmdW5jdGlvbiAoc2hhcGUpIHtcbiAgICAgICAgICAgIHZhciBwcm9jZXNzdXA7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKHByb2Nlc3N1cCkge1xuICAgICAgICAgICAgICAgIHZhciB0YXBpbnM7XG4gICAgICAgICAgICAgICAgKGZ1bmN0aW9uICh0YXBpbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gY2FsY0V4dGVudHMoaW5wdXQsIHN0YXRlLCBvdXRwdXQsIHRyZWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoaW5wdXQuZGlydHlGbGFncyAmIG1pbmVydmEuRGlydHlGbGFncy5Cb3VuZHMpID09PSAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0LmV4dGVudHMueCA9IG91dHB1dC5leHRlbnRzLnkgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5TaXplLmNvcHlUbyhzdGF0ZS5hY3R1YWxTaXplLCBvdXRwdXQuZXh0ZW50cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLlJlY3QuY29weVRvKG91dHB1dC5leHRlbnRzLCBvdXRwdXQuZXh0ZW50c1dpdGhDaGlsZHJlbik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0YXBpbnMuY2FsY0V4dGVudHMgPSBjYWxjRXh0ZW50cztcbiAgICAgICAgICAgICAgICB9KSh0YXBpbnMgPSBwcm9jZXNzdXAudGFwaW5zIHx8IChwcm9jZXNzdXAudGFwaW5zID0ge30pKTtcbiAgICAgICAgICAgIH0pKHByb2Nlc3N1cCA9IHNoYXBlLnByb2Nlc3N1cCB8fCAoc2hhcGUucHJvY2Vzc3VwID0ge30pKTtcbiAgICAgICAgfSkoc2hhcGUgPSBzaGFwZXMuc2hhcGUgfHwgKHNoYXBlcy5zaGFwZSA9IHt9KSk7XG4gICAgfSkoc2hhcGVzID0gbWluZXJ2YS5zaGFwZXMgfHwgKG1pbmVydmEuc2hhcGVzID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgc2hhcGVzO1xuICAgIChmdW5jdGlvbiAoc2hhcGVzKSB7XG4gICAgICAgIHZhciBzaGFwZTtcbiAgICAgICAgKGZ1bmN0aW9uIChzaGFwZSkge1xuICAgICAgICAgICAgdmFyIHByb2Nlc3N1cDtcbiAgICAgICAgICAgIChmdW5jdGlvbiAocHJvY2Vzc3VwKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcGlucztcbiAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBjYWxjU2hhcGVSZWN0KGlucHV0LCBzdGF0ZSwgb3V0cHV0LCB0cmVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKGlucHV0LmRpcnR5RmxhZ3MgJiBtaW5lcnZhLkRpcnR5RmxhZ3MuQm91bmRzKSA9PT0gMClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzciA9IG91dHB1dC5zaGFwZVJlY3Q7XG4gICAgICAgICAgICAgICAgICAgICAgICBzci54ID0gc3IueSA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLlNpemUuY29weVRvKHN0YXRlLmFjdHVhbFNpemUsIHNyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dC5zaGFwZUZsYWdzID0gbWluZXJ2YS5TaGFwZUZsYWdzLkVtcHR5O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1pbmVydmEuUmVjdC5pc0VtcHR5KHNyKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0gISFpbnB1dC5zdHJva2UgPyBpbnB1dC5zdHJva2VUaGlja25lc3MgOiAwLjA7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodCA+PSBzci53aWR0aCB8fCB0ID49IHNyLmhlaWdodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyLndpZHRoID0gTWF0aC5tYXgoc3Iud2lkdGgsIHQgKyB0ICogMC4wMDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyLmhlaWdodCA9IE1hdGgubWF4KHNyLmhlaWdodCwgdCArIHQgKiAwLjAwMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0LnNoYXBlRmxhZ3MgPSBtaW5lcnZhLlNoYXBlRmxhZ3MuRGVnZW5lcmF0ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dC5zaGFwZUZsYWdzID0gbWluZXJ2YS5TaGFwZUZsYWdzLk5vcm1hbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBodCA9IHQgLyAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5SZWN0LnNocmluayhzciwgaHQsIGh0LCBodCwgaHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGFwaW5zLmNhbGNTaGFwZVJlY3QgPSBjYWxjU2hhcGVSZWN0O1xuICAgICAgICAgICAgICAgIH0pKHRhcGlucyA9IHByb2Nlc3N1cC50YXBpbnMgfHwgKHByb2Nlc3N1cC50YXBpbnMgPSB7fSkpO1xuICAgICAgICAgICAgfSkocHJvY2Vzc3VwID0gc2hhcGUucHJvY2Vzc3VwIHx8IChzaGFwZS5wcm9jZXNzdXAgPSB7fSkpO1xuICAgICAgICB9KShzaGFwZSA9IHNoYXBlcy5zaGFwZSB8fCAoc2hhcGVzLnNoYXBlID0ge30pKTtcbiAgICB9KShzaGFwZXMgPSBtaW5lcnZhLnNoYXBlcyB8fCAobWluZXJ2YS5zaGFwZXMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBzaGFwZXM7XG4gICAgKGZ1bmN0aW9uIChzaGFwZXMpIHtcbiAgICAgICAgdmFyIHNoYXBlO1xuICAgICAgICAoZnVuY3Rpb24gKHNoYXBlKSB7XG4gICAgICAgICAgICB2YXIgcmVuZGVyO1xuICAgICAgICAgICAgKGZ1bmN0aW9uIChyZW5kZXIpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFwaW5zO1xuICAgICAgICAgICAgICAgIChmdW5jdGlvbiAodGFwaW5zKSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNhbGNTaG91bGREcmF3KGlucHV0LCBzdGF0ZSwgb3V0cHV0LCBjdHgsIHJlZ2lvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuc2hvdWxkRHJhdyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LnNoYXBlRmxhZ3MgPT09IG1pbmVydmEuU2hhcGVGbGFncy5FbXB0eSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaW5wdXQuZmlsbCAmJiAhaW5wdXQuc3Ryb2tlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuc2hvdWxkRHJhdyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0YXBpbnMuY2FsY1Nob3VsZERyYXcgPSBjYWxjU2hvdWxkRHJhdztcbiAgICAgICAgICAgICAgICB9KSh0YXBpbnMgPSByZW5kZXIudGFwaW5zIHx8IChyZW5kZXIudGFwaW5zID0ge30pKTtcbiAgICAgICAgICAgIH0pKHJlbmRlciA9IHNoYXBlLnJlbmRlciB8fCAoc2hhcGUucmVuZGVyID0ge30pKTtcbiAgICAgICAgfSkoc2hhcGUgPSBzaGFwZXMuc2hhcGUgfHwgKHNoYXBlcy5zaGFwZSA9IHt9KSk7XG4gICAgfSkoc2hhcGVzID0gbWluZXJ2YS5zaGFwZXMgfHwgKG1pbmVydmEuc2hhcGVzID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgc2hhcGVzO1xuICAgIChmdW5jdGlvbiAoc2hhcGVzKSB7XG4gICAgICAgIHZhciBzaGFwZTtcbiAgICAgICAgKGZ1bmN0aW9uIChzaGFwZSkge1xuICAgICAgICAgICAgdmFyIHJlbmRlcjtcbiAgICAgICAgICAgIChmdW5jdGlvbiAocmVuZGVyKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcGlucztcbiAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBkb1JlbmRlcihpbnB1dCwgc3RhdGUsIG91dHB1dCwgY3R4LCByZWdpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc3RhdGUuc2hvdWxkRHJhdylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRhcGlucy5kb1JlbmRlciA9IGRvUmVuZGVyO1xuICAgICAgICAgICAgICAgIH0pKHRhcGlucyA9IHJlbmRlci50YXBpbnMgfHwgKHJlbmRlci50YXBpbnMgPSB7fSkpO1xuICAgICAgICAgICAgfSkocmVuZGVyID0gc2hhcGUucmVuZGVyIHx8IChzaGFwZS5yZW5kZXIgPSB7fSkpO1xuICAgICAgICB9KShzaGFwZSA9IHNoYXBlcy5zaGFwZSB8fCAoc2hhcGVzLnNoYXBlID0ge30pKTtcbiAgICB9KShzaGFwZXMgPSBtaW5lcnZhLnNoYXBlcyB8fCAobWluZXJ2YS5zaGFwZXMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBzaGFwZXM7XG4gICAgKGZ1bmN0aW9uIChzaGFwZXMpIHtcbiAgICAgICAgdmFyIHNoYXBlO1xuICAgICAgICAoZnVuY3Rpb24gKHNoYXBlKSB7XG4gICAgICAgICAgICB2YXIgcmVuZGVyO1xuICAgICAgICAgICAgKGZ1bmN0aW9uIChyZW5kZXIpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFwaW5zO1xuICAgICAgICAgICAgICAgIChmdW5jdGlvbiAodGFwaW5zKSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGZpbGwoaW5wdXQsIHN0YXRlLCBvdXRwdXQsIGN0eCwgcmVnaW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXN0YXRlLnNob3VsZERyYXcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQuZmlsbClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHguZmlsbEV4KGlucHV0LmZpbGwsIGlucHV0LnNoYXBlUmVjdCwgaW5wdXQuZmlsbFJ1bGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGFwaW5zLmZpbGwgPSBmaWxsO1xuICAgICAgICAgICAgICAgIH0pKHRhcGlucyA9IHJlbmRlci50YXBpbnMgfHwgKHJlbmRlci50YXBpbnMgPSB7fSkpO1xuICAgICAgICAgICAgfSkocmVuZGVyID0gc2hhcGUucmVuZGVyIHx8IChzaGFwZS5yZW5kZXIgPSB7fSkpO1xuICAgICAgICB9KShzaGFwZSA9IHNoYXBlcy5zaGFwZSB8fCAoc2hhcGVzLnNoYXBlID0ge30pKTtcbiAgICB9KShzaGFwZXMgPSBtaW5lcnZhLnNoYXBlcyB8fCAobWluZXJ2YS5zaGFwZXMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBzaGFwZXM7XG4gICAgKGZ1bmN0aW9uIChzaGFwZXMpIHtcbiAgICAgICAgdmFyIHNoYXBlO1xuICAgICAgICAoZnVuY3Rpb24gKHNoYXBlKSB7XG4gICAgICAgICAgICB2YXIgcmVuZGVyO1xuICAgICAgICAgICAgKGZ1bmN0aW9uIChyZW5kZXIpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFwaW5zO1xuICAgICAgICAgICAgICAgIChmdW5jdGlvbiAodGFwaW5zKSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGZpbmlzaERyYXcoaW5wdXQsIHN0YXRlLCBvdXRwdXQsIGN0eCwgcmVnaW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXN0YXRlLnNob3VsZERyYXcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGFwaW5zLmZpbmlzaERyYXcgPSBmaW5pc2hEcmF3O1xuICAgICAgICAgICAgICAgIH0pKHRhcGlucyA9IHJlbmRlci50YXBpbnMgfHwgKHJlbmRlci50YXBpbnMgPSB7fSkpO1xuICAgICAgICAgICAgfSkocmVuZGVyID0gc2hhcGUucmVuZGVyIHx8IChzaGFwZS5yZW5kZXIgPSB7fSkpO1xuICAgICAgICB9KShzaGFwZSA9IHNoYXBlcy5zaGFwZSB8fCAoc2hhcGVzLnNoYXBlID0ge30pKTtcbiAgICB9KShzaGFwZXMgPSBtaW5lcnZhLnNoYXBlcyB8fCAobWluZXJ2YS5zaGFwZXMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBzaGFwZXM7XG4gICAgKGZ1bmN0aW9uIChzaGFwZXMpIHtcbiAgICAgICAgdmFyIHNoYXBlO1xuICAgICAgICAoZnVuY3Rpb24gKHNoYXBlKSB7XG4gICAgICAgICAgICB2YXIgcmVuZGVyO1xuICAgICAgICAgICAgKGZ1bmN0aW9uIChyZW5kZXIpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFwaW5zO1xuICAgICAgICAgICAgICAgIChmdW5jdGlvbiAodGFwaW5zKSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHByZXBhcmVEcmF3KGlucHV0LCBzdGF0ZSwgb3V0cHV0LCBjdHgsIHJlZ2lvbiwgdHJlZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzdGF0ZS5zaG91bGREcmF3KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbmVydmEuY29yZS5oZWxwZXJzLnJlbmRlckxheW91dENsaXAoY3R4LCBpbnB1dCwgdHJlZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0YXBpbnMucHJlcGFyZURyYXcgPSBwcmVwYXJlRHJhdztcbiAgICAgICAgICAgICAgICB9KSh0YXBpbnMgPSByZW5kZXIudGFwaW5zIHx8IChyZW5kZXIudGFwaW5zID0ge30pKTtcbiAgICAgICAgICAgIH0pKHJlbmRlciA9IHNoYXBlLnJlbmRlciB8fCAoc2hhcGUucmVuZGVyID0ge30pKTtcbiAgICAgICAgfSkoc2hhcGUgPSBzaGFwZXMuc2hhcGUgfHwgKHNoYXBlcy5zaGFwZSA9IHt9KSk7XG4gICAgfSkoc2hhcGVzID0gbWluZXJ2YS5zaGFwZXMgfHwgKG1pbmVydmEuc2hhcGVzID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgc2hhcGVzO1xuICAgIChmdW5jdGlvbiAoc2hhcGVzKSB7XG4gICAgICAgIHZhciBzaGFwZTtcbiAgICAgICAgKGZ1bmN0aW9uIChzaGFwZSkge1xuICAgICAgICAgICAgdmFyIHJlbmRlcjtcbiAgICAgICAgICAgIChmdW5jdGlvbiAocmVuZGVyKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcGlucztcbiAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY2FwcyA9IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiYnV0dFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJzcXVhcmVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwicm91bmRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiYnV0dFwiXG4gICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgICAgIHZhciBqb2lucyA9IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibWl0ZXJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiYmV2ZWxcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwicm91bmRcIlxuICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBzdHJva2UoaW5wdXQsIHN0YXRlLCBvdXRwdXQsIGN0eCwgcmVnaW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXN0YXRlLnNob3VsZERyYXcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3Ryb2tlID0gaW5wdXQuc3Ryb2tlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzdHJva2UgfHwgIShpbnB1dC5zdHJva2VUaGlja25lc3MgPiAwKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByYXcgPSBjdHgucmF3O1xuICAgICAgICAgICAgICAgICAgICAgICAgcmF3LmxpbmVXaWR0aCA9IGlucHV0LnN0cm9rZVRoaWNrbmVzcztcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhdy5saW5lQ2FwID0gY2Fwc1tpbnB1dC5zdHJva2VTdGFydExpbmVDYXAgfHwgaW5wdXQuc3Ryb2tlRW5kTGluZUNhcCB8fCAwXSB8fCBjYXBzWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmF3LmxpbmVKb2luID0gam9pbnNbaW5wdXQuc3Ryb2tlTGluZUpvaW4gfHwgMF0gfHwgam9pbnNbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICByYXcubWl0ZXJMaW1pdCA9IGlucHV0LnN0cm9rZU1pdGVyTGltaXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJva2Uuc2V0dXBCcnVzaChyYXcsIGlucHV0LnNoYXBlUmVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByYXcuc3Ryb2tlU3R5bGUgPSBzdHJva2UudG9IdG1sNU9iamVjdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmF3LnN0cm9rZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGFwaW5zLnN0cm9rZSA9IHN0cm9rZTtcbiAgICAgICAgICAgICAgICB9KSh0YXBpbnMgPSByZW5kZXIudGFwaW5zIHx8IChyZW5kZXIudGFwaW5zID0ge30pKTtcbiAgICAgICAgICAgIH0pKHJlbmRlciA9IHNoYXBlLnJlbmRlciB8fCAoc2hhcGUucmVuZGVyID0ge30pKTtcbiAgICAgICAgfSkoc2hhcGUgPSBzaGFwZXMuc2hhcGUgfHwgKHNoYXBlcy5zaGFwZSA9IHt9KSk7XG4gICAgfSkoc2hhcGVzID0gbWluZXJ2YS5zaGFwZXMgfHwgKG1pbmVydmEuc2hhcGVzID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29udHJvbHM7XG4gICAgKGZ1bmN0aW9uIChjb250cm9scykge1xuICAgICAgICB2YXIgYm9yZGVyO1xuICAgICAgICAoZnVuY3Rpb24gKGJvcmRlcikge1xuICAgICAgICAgICAgdmFyIHJlbmRlcjtcbiAgICAgICAgICAgIChmdW5jdGlvbiAocmVuZGVyKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcGlucztcbiAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2hpbTtcbiAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChzaGltKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBjYWxjQmFsYW5jZWQoaW5wdXQsIHN0YXRlLCBvdXRwdXQsIGN0eCwgcmVnaW9uLCB0cmVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzdGF0ZS5zaG91bGRSZW5kZXIgfHwgbWluZXJ2YS5UaGlja25lc3MuaXNFbXB0eShpbnB1dC5ib3JkZXJUaGlja25lc3MpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWluZXJ2YS5UaGlja25lc3MuaXNCYWxhbmNlZChpbnB1dC5ib3JkZXJUaGlja25lc3MpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpY3IgPSBzdGF0ZS5pbm5lckNvcm5lclJhZGl1cztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9jciA9IHN0YXRlLm91dGVyQ29ybmVyUmFkaXVzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWNyID0gc3RhdGUubWlkZGxlQ29ybmVyUmFkaXVzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtY3IudG9wTGVmdCA9IChpY3IudG9wTGVmdCArIG9jci50b3BMZWZ0KSAvIDIuMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWNyLnRvcFJpZ2h0ID0gKGljci50b3BSaWdodCArIG9jci50b3BSaWdodCkgLyAyLjA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1jci5ib3R0b21SaWdodCA9IChpY3IuYm90dG9tUmlnaHQgKyBvY3IuYm90dG9tUmlnaHQpIC8gMi4wO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtY3IuYm90dG9tTGVmdCA9IChpY3IuYm90dG9tTGVmdCArIG9jci5ib3R0b21MZWZ0KSAvIDIuMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5SZWN0LmNvcHlUbyhpbnB1dC5leHRlbnRzLCBzdGF0ZS5zdHJva2VFeHRlbnRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJ0ID0gaW5wdXQuYm9yZGVyVGhpY2tuZXNzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLlJlY3Quc2hyaW5rKHN0YXRlLnN0cm9rZUV4dGVudHMsIGJ0LmxlZnQgLyAyLjAsIGJ0LnRvcCAvIDIuMCwgYnQucmlnaHQgLyAyLjAsIGJ0LmJvdHRvbSAvIDIuMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgc2hpbS5jYWxjQmFsYW5jZWQgPSBjYWxjQmFsYW5jZWQ7XG4gICAgICAgICAgICAgICAgICAgIH0pKHNoaW0gPSB0YXBpbnMuc2hpbSB8fCAodGFwaW5zLnNoaW0gPSB7fSkpO1xuICAgICAgICAgICAgICAgIH0pKHRhcGlucyA9IHJlbmRlci50YXBpbnMgfHwgKHJlbmRlci50YXBpbnMgPSB7fSkpO1xuICAgICAgICAgICAgfSkocmVuZGVyID0gYm9yZGVyLnJlbmRlciB8fCAoYm9yZGVyLnJlbmRlciA9IHt9KSk7XG4gICAgICAgIH0pKGJvcmRlciA9IGNvbnRyb2xzLmJvcmRlciB8fCAoY29udHJvbHMuYm9yZGVyID0ge30pKTtcbiAgICB9KShjb250cm9scyA9IG1pbmVydmEuY29udHJvbHMgfHwgKG1pbmVydmEuY29udHJvbHMgPSB7fSkpO1xufSkobWluZXJ2YSB8fCAobWluZXJ2YSA9IHt9KSk7XG52YXIgbWluZXJ2YTtcbihmdW5jdGlvbiAobWluZXJ2YSkge1xuICAgIHZhciBjb250cm9scztcbiAgICAoZnVuY3Rpb24gKGNvbnRyb2xzKSB7XG4gICAgICAgIHZhciBib3JkZXI7XG4gICAgICAgIChmdW5jdGlvbiAoYm9yZGVyKSB7XG4gICAgICAgICAgICB2YXIgcmVuZGVyO1xuICAgICAgICAgICAgKGZ1bmN0aW9uIChyZW5kZXIpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFwaW5zO1xuICAgICAgICAgICAgICAgIChmdW5jdGlvbiAodGFwaW5zKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzaGltO1xuICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHNoaW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNyZWF0ZVBhdHRlcm4oaW5wdXQsIHN0YXRlLCBvdXRwdXQsIGN0eCwgcmVnaW9uLCB0cmVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzdGF0ZS5zaG91bGRSZW5kZXIgfHwgbWluZXJ2YS5UaGlja25lc3MuaXNCYWxhbmNlZChpbnB1dC5ib3JkZXJUaGlja25lc3MpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXN0YXRlLnBhdHRlcm4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUucGF0dGVybiA9IGNyZWF0ZUJvcmRlclBhdHRlcm4oaW5wdXQuYm9yZGVyQnJ1c2gsIGlucHV0LmV4dGVudHMsIHN0YXRlLmZpbGxFeHRlbnRzLCBzdGF0ZS5vdXRlckNvcm5lclJhZGl1cywgc3RhdGUuaW5uZXJDb3JuZXJSYWRpdXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHNoaW0uY3JlYXRlUGF0dGVybiA9IGNyZWF0ZVBhdHRlcm47XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGVtcEN0eDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNyZWF0ZUJvcmRlclBhdHRlcm4oYm9yZGVyQnJ1c2gsIGV4dGVudHMsIGZpbGxFeHRlbnRzLCBvYSwgaWEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wQ3R4ID0gdGVtcEN0eCB8fCBuZXcgbWluZXJ2YS5jb3JlLnJlbmRlci5SZW5kZXJDb250ZXh0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpLmdldENvbnRleHQoJzJkJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByYXcgPSB0ZW1wQ3R4LnJhdztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW5lcnZhLlNpemUuY29weVRvKGV4dGVudHMsIHJhdy5jYW52YXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhdy5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW5kZXIuaGVscGVycy5kcmF3Qm9yZGVyUmVjdChyYXcsIGV4dGVudHMsIG9hKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wQ3R4LmZpbGxFeChib3JkZXJCcnVzaCwgZXh0ZW50cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9IFwieG9yXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlci5oZWxwZXJzLmRyYXdCb3JkZXJSZWN0KHJhdywgZmlsbEV4dGVudHMsIGlhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXcuZmlsbCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByYXcuY3JlYXRlUGF0dGVybihyYXcuY2FudmFzLCBcIm5vLXJlcGVhdFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSkoc2hpbSA9IHRhcGlucy5zaGltIHx8ICh0YXBpbnMuc2hpbSA9IHt9KSk7XG4gICAgICAgICAgICAgICAgfSkodGFwaW5zID0gcmVuZGVyLnRhcGlucyB8fCAocmVuZGVyLnRhcGlucyA9IHt9KSk7XG4gICAgICAgICAgICB9KShyZW5kZXIgPSBib3JkZXIucmVuZGVyIHx8IChib3JkZXIucmVuZGVyID0ge30pKTtcbiAgICAgICAgfSkoYm9yZGVyID0gY29udHJvbHMuYm9yZGVyIHx8IChjb250cm9scy5ib3JkZXIgPSB7fSkpO1xuICAgIH0pKGNvbnRyb2xzID0gbWluZXJ2YS5jb250cm9scyB8fCAobWluZXJ2YS5jb250cm9scyA9IHt9KSk7XG59KShtaW5lcnZhIHx8IChtaW5lcnZhID0ge30pKTtcbnZhciBtaW5lcnZhO1xuKGZ1bmN0aW9uIChtaW5lcnZhKSB7XG4gICAgdmFyIGNvbnRyb2xzO1xuICAgIChmdW5jdGlvbiAoY29udHJvbHMpIHtcbiAgICAgICAgdmFyIGJvcmRlcjtcbiAgICAgICAgKGZ1bmN0aW9uIChib3JkZXIpIHtcbiAgICAgICAgICAgIHZhciByZW5kZXI7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKHJlbmRlcikge1xuICAgICAgICAgICAgICAgIHZhciB0YXBpbnM7XG4gICAgICAgICAgICAgICAgKGZ1bmN0aW9uICh0YXBpbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNoaW07XG4gICAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAoc2hpbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZG9SZW5kZXIoaW5wdXQsIHN0YXRlLCBvdXRwdXQsIGN0eCwgcmVnaW9uLCB0cmVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzdGF0ZS5zaG91bGRSZW5kZXIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluZXJ2YS5jb3JlLmhlbHBlcnMucmVuZGVyTGF5b3V0Q2xpcChjdHgsIGlucHV0LCB0cmVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQuYmFja2dyb3VuZClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyQmFja2dyb3VuZChjdHgsIGlucHV0LCBzdGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlLnBhdHRlcm4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyUGF0dGVybihjdHgsIGlucHV0LCBzdGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGlucHV0LmJvcmRlckJydXNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlckJvcmRlcihjdHgsIGlucHV0LCBzdGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBzaGltLmRvUmVuZGVyID0gZG9SZW5kZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiByZW5kZXJQYXR0ZXJuKGN0eCwgaW5wdXQsIHN0YXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJhdyA9IGN0eC5yYXc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhdy5maWxsU3R5bGUgPSBzdGF0ZS5wYXR0ZXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlci5oZWxwZXJzLmRyYXdCb3JkZXJSZWN0KHJhdywgaW5wdXQuZXh0ZW50cywgc3RhdGUub3V0ZXJDb3JuZXJSYWRpdXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhdy5maWxsKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiByZW5kZXJCYWNrZ3JvdW5kKGN0eCwgaW5wdXQsIHN0YXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3R4LnJhdy5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW5kZXIuaGVscGVycy5kcmF3Qm9yZGVyUmVjdChjdHgucmF3LCBzdGF0ZS5maWxsRXh0ZW50cywgc3RhdGUuaW5uZXJDb3JuZXJSYWRpdXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5maWxsRXgoaW5wdXQuYmFja2dyb3VuZCwgc3RhdGUuZmlsbEV4dGVudHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gcmVuZGVyQm9yZGVyKGN0eCwgaW5wdXQsIHN0YXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJhdyA9IGN0eC5yYXc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlci5oZWxwZXJzLmRyYXdCb3JkZXJSZWN0KHJhdywgc3RhdGUuc3Ryb2tlRXh0ZW50cywgc3RhdGUubWlkZGxlQ29ybmVyUmFkaXVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXcubGluZVdpZHRoID0gaW5wdXQuYm9yZGVyVGhpY2tuZXNzLmxlZnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3LmxpbmVDYXAgPSBcImJ1dHRcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXcubGluZUpvaW4gPSBcIm1pdGVyXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3Lm1pdGVyTGltaXQgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LmJvcmRlckJydXNoLnNldHVwQnJ1c2gocmF3LCBzdGF0ZS5zdHJva2VFeHRlbnRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXcuc3Ryb2tlU3R5bGUgPSBpbnB1dC5ib3JkZXJCcnVzaC50b0h0bWw1T2JqZWN0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3LnN0cm9rZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KShzaGltID0gdGFwaW5zLnNoaW0gfHwgKHRhcGlucy5zaGltID0ge30pKTtcbiAgICAgICAgICAgICAgICB9KSh0YXBpbnMgPSByZW5kZXIudGFwaW5zIHx8IChyZW5kZXIudGFwaW5zID0ge30pKTtcbiAgICAgICAgICAgIH0pKHJlbmRlciA9IGJvcmRlci5yZW5kZXIgfHwgKGJvcmRlci5yZW5kZXIgPSB7fSkpO1xuICAgICAgICB9KShib3JkZXIgPSBjb250cm9scy5ib3JkZXIgfHwgKGNvbnRyb2xzLmJvcmRlciA9IHt9KSk7XG4gICAgfSkoY29udHJvbHMgPSBtaW5lcnZhLmNvbnRyb2xzIHx8IChtaW5lcnZhLmNvbnRyb2xzID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xudmFyIG1pbmVydmE7XG4oZnVuY3Rpb24gKG1pbmVydmEpIHtcbiAgICB2YXIgY29udHJvbHM7XG4gICAgKGZ1bmN0aW9uIChjb250cm9scykge1xuICAgICAgICB2YXIgYm9yZGVyO1xuICAgICAgICAoZnVuY3Rpb24gKGJvcmRlcikge1xuICAgICAgICAgICAgdmFyIHJlbmRlcjtcbiAgICAgICAgICAgIChmdW5jdGlvbiAocmVuZGVyKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcGlucztcbiAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHRhcGlucykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2hpbTtcbiAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChzaGltKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBpbnZhbGlkYXRlUGF0dGVybihpbnB1dCwgc3RhdGUsIG91dHB1dCwgY3R4LCByZWdpb24sIHRyZWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXN0YXRlLnNob3VsZFJlbmRlcilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1pbmVydmEuVGhpY2tuZXNzLmlzRW1wdHkoaW5wdXQuYm9yZGVyVGhpY2tuZXNzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5wYXR0ZXJuID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc3RhdGUub2xkTWV0cmljcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5vbGRNZXRyaWNzID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldE9sZE1ldHJpY3MoaW5wdXQsIHN0YXRlLCBzdGF0ZS5vbGRNZXRyaWNzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUucGF0dGVybiA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGlkTWV0cmljc0NoYW5nZShpbnB1dCwgc3RhdGUsIHN0YXRlLm9sZE1ldHJpY3MpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5wYXR0ZXJuID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRPbGRNZXRyaWNzKGlucHV0LCBzdGF0ZSwgc3RhdGUub2xkTWV0cmljcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBzaGltLmludmFsaWRhdGVQYXR0ZXJuID0gaW52YWxpZGF0ZVBhdHRlcm47XG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBzZXRPbGRNZXRyaWNzKGlucHV0LCBzdGF0ZSwgbWV0cmljcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldHJpY3MuYm9yZGVyQnJ1c2ggPSBpbnB1dC5ib3JkZXJCcnVzaDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRyaWNzLmJvcmRlclRoaWNrbmVzcyA9IGlucHV0LmJvcmRlclRoaWNrbmVzcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRyaWNzLmV4dGVudHMgPSBpbnB1dC5leHRlbnRzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldHJpY3MuZmlsbEV4dGVudHMgPSBzdGF0ZS5maWxsRXh0ZW50cztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRyaWNzLm91dGVyQ29ybmVyUmFkaXVzID0gc3RhdGUub3V0ZXJDb3JuZXJSYWRpdXM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0cmljcy5pbm5lckNvcm5lclJhZGl1cyA9IHN0YXRlLmlubmVyQ29ybmVyUmFkaXVzO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZGlkTWV0cmljc0NoYW5nZShpbnB1dCwgc3RhdGUsIG1ldHJpY3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWV0cmljcy5ib3JkZXJCcnVzaCAhPT0gaW5wdXQuYm9yZGVyQnJ1c2hcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfHwgIW1pbmVydmEuUmVjdC5pc0VxdWFsKG1ldHJpY3MuZXh0ZW50cywgaW5wdXQuZXh0ZW50cylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfHwgIW1pbmVydmEuUmVjdC5pc0VxdWFsKG1ldHJpY3MuZmlsbEV4dGVudHMsIHN0YXRlLmZpbGxFeHRlbnRzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCAhbWluZXJ2YS5Db3JuZXJSYWRpdXMuaXNFcXVhbChtZXRyaWNzLm91dGVyQ29ybmVyUmFkaXVzLCBzdGF0ZS5vdXRlckNvcm5lclJhZGl1cylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfHwgIW1pbmVydmEuQ29ybmVyUmFkaXVzLmlzRXF1YWwobWV0cmljcy5pbm5lckNvcm5lclJhZGl1cywgc3RhdGUuaW5uZXJDb3JuZXJSYWRpdXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KShzaGltID0gdGFwaW5zLnNoaW0gfHwgKHRhcGlucy5zaGltID0ge30pKTtcbiAgICAgICAgICAgICAgICB9KSh0YXBpbnMgPSByZW5kZXIudGFwaW5zIHx8IChyZW5kZXIudGFwaW5zID0ge30pKTtcbiAgICAgICAgICAgIH0pKHJlbmRlciA9IGJvcmRlci5yZW5kZXIgfHwgKGJvcmRlci5yZW5kZXIgPSB7fSkpO1xuICAgICAgICB9KShib3JkZXIgPSBjb250cm9scy5ib3JkZXIgfHwgKGNvbnRyb2xzLmJvcmRlciA9IHt9KSk7XG4gICAgfSkoY29udHJvbHMgPSBtaW5lcnZhLmNvbnRyb2xzIHx8IChtaW5lcnZhLmNvbnRyb2xzID0ge30pKTtcbn0pKG1pbmVydmEgfHwgKG1pbmVydmEgPSB7fSkpO1xuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL2NvcmUvVXBkYXRlclwiIC8+XHJcblxyXG5tb2R1bGUgbWluZXJ2YS5hbm9uIHtcclxuICAgIGV4cG9ydCBjbGFzcyBBbm9ueW1vdXNVcGRhdGVyIGV4dGVuZHMgY29yZS5VcGRhdGVyIHtcclxuICAgICAgICBpbml0ICgpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRNZWFzdXJlUGlwZShuZXcgbWVhc3VyZS5Bbm9ueW1vdXNNZWFzdXJlUGlwZURlZih0aGlzKSlcclxuICAgICAgICAgICAgICAgIC5zZXRBcnJhbmdlUGlwZShuZXcgYXJyYW5nZS5Bbm9ueW1vdXNBcnJhbmdlUGlwZURlZih0aGlzKSk7XHJcblxyXG4gICAgICAgICAgICBzdXBlci5pbml0KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBtZWFzdXJlT3ZlcnJpZGUgKGF2YWlsYWJsZVNpemU6IFNpemUpOiBTaXplIHtcclxuICAgICAgICAgICAgcmV0dXJuIGF2YWlsYWJsZVNpemU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhcnJhbmdlT3ZlcnJpZGUgKGFycmFuZ2VTaXplOiBTaXplKTogU2l6ZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBhcnJhbmdlU2l6ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb3JlLmhlbHBlcnMge1xyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJU2l6ZWQge1xyXG4gICAgICAgIHdpZHRoOiBudW1iZXI7XHJcbiAgICAgICAgaGVpZ2h0OiBudW1iZXI7XHJcbiAgICAgICAgbWluV2lkdGg6IG51bWJlcjtcclxuICAgICAgICBtaW5IZWlnaHQ6IG51bWJlcjtcclxuICAgICAgICBtYXhXaWR0aDogbnVtYmVyO1xyXG4gICAgICAgIG1heEhlaWdodDogbnVtYmVyO1xyXG4gICAgICAgIHVzZUxheW91dFJvdW5kaW5nOiBib29sZWFuO1xyXG4gICAgfVxyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGNvZXJjZVNpemUgKHNpemU6IElTaXplLCBhc3NldHM6IElTaXplZCkge1xyXG4gICAgICAgIHZhciBjdyA9IE1hdGgubWF4KGFzc2V0cy5taW5XaWR0aCwgc2l6ZS53aWR0aCk7XHJcbiAgICAgICAgdmFyIGNoID0gTWF0aC5tYXgoYXNzZXRzLm1pbkhlaWdodCwgc2l6ZS5oZWlnaHQpO1xyXG5cclxuICAgICAgICBpZiAoIWlzTmFOKGFzc2V0cy53aWR0aCkpXHJcbiAgICAgICAgICAgIGN3ID0gYXNzZXRzLndpZHRoO1xyXG5cclxuICAgICAgICBpZiAoIWlzTmFOKGFzc2V0cy5oZWlnaHQpKVxyXG4gICAgICAgICAgICBjaCA9IGFzc2V0cy5oZWlnaHQ7XHJcblxyXG4gICAgICAgIGN3ID0gTWF0aC5tYXgoTWF0aC5taW4oY3csIGFzc2V0cy5tYXhXaWR0aCksIGFzc2V0cy5taW5XaWR0aCk7XHJcbiAgICAgICAgY2ggPSBNYXRoLm1heChNYXRoLm1pbihjaCwgYXNzZXRzLm1heEhlaWdodCksIGFzc2V0cy5taW5IZWlnaHQpO1xyXG5cclxuICAgICAgICBpZiAoYXNzZXRzLnVzZUxheW91dFJvdW5kaW5nKSB7XHJcbiAgICAgICAgICAgIGN3ID0gTWF0aC5yb3VuZChjdyk7XHJcbiAgICAgICAgICAgIGNoID0gTWF0aC5yb3VuZChjaCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzaXplLndpZHRoID0gY3c7XHJcbiAgICAgICAgc2l6ZS5oZWlnaHQgPSBjaDtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gaW50ZXJzZWN0Qm91bmRzV2l0aENsaXBQYXRoIChkZXN0OiBSZWN0LCBzcmM6IFJlY3QsIHRoaWNrbmVzczogVGhpY2tuZXNzLCB4Zm9ybTogbnVtYmVyW10sIGNsaXA6IElHZW9tZXRyeSwgbGF5b3V0Q2xpcDogUmVjdCkge1xyXG4gICAgICAgIFJlY3QuY29weVRvKHNyYywgZGVzdCk7XHJcbiAgICAgICAgVGhpY2tuZXNzLmdyb3dSZWN0KHRoaWNrbmVzcywgZGVzdCk7XHJcblxyXG4gICAgICAgIGlmIChjbGlwKVxyXG4gICAgICAgICAgICBSZWN0LmludGVyc2VjdGlvbihkZXN0LCBjbGlwLkdldEJvdW5kcygpKTtcclxuICAgICAgICBpZiAoIVJlY3QuaXNFbXB0eShsYXlvdXRDbGlwKSlcclxuICAgICAgICAgICAgUmVjdC5pbnRlcnNlY3Rpb24oZGVzdCwgbGF5b3V0Q2xpcCk7XHJcblxyXG4gICAgICAgIGlmICh4Zm9ybSlcclxuICAgICAgICAgICAgUmVjdC50cmFuc2Zvcm0oZGVzdCwgeGZvcm0pO1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUNsaXBBc3NldHMge1xyXG4gICAgICAgIGxheW91dENsaXA6IFJlY3Q7XHJcbiAgICAgICAgYnJlYWtMYXlvdXRDbGlwOiBib29sZWFuO1xyXG4gICAgICAgIHZpc3VhbE9mZnNldDogUG9pbnQ7XHJcbiAgICB9XHJcbiAgICB2YXIgb2Zmc2V0ID0gbmV3IFBvaW50KCk7XHJcblxyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHJlbmRlckxheW91dENsaXAgKGN0eDogcmVuZGVyLlJlbmRlckNvbnRleHQsIGFzc2V0czogSUNsaXBBc3NldHMsIHRyZWU6IGNvcmUuSVVwZGF0ZXJUcmVlKSB7XHJcbiAgICAgICAgdmFyIGxjOiBSZWN0O1xyXG4gICAgICAgIG9mZnNldC54ID0gMDtcclxuICAgICAgICBvZmZzZXQueSA9IDA7XHJcblxyXG4gICAgICAgIHZhciByYXcgPSBjdHgucmF3O1xyXG4gICAgICAgIHZhciBjdXI6IFVwZGF0ZXI7XHJcbiAgICAgICAgd2hpbGUgKGFzc2V0cykge1xyXG4gICAgICAgICAgICBsYyA9IGFzc2V0cy5sYXlvdXRDbGlwO1xyXG4gICAgICAgICAgICBpZiAoIVJlY3QuaXNFbXB0eShsYykpIHtcclxuICAgICAgICAgICAgICAgIHJhdy5iZWdpblBhdGgoKTtcclxuICAgICAgICAgICAgICAgIHJhdy5yZWN0KGxjLngsIGxjLnksIGxjLndpZHRoLCBsYy5oZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgcmF3LmNsaXAoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGFzc2V0cy5icmVha0xheW91dENsaXApXHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgIHZhciB2byA9IGFzc2V0cy52aXN1YWxPZmZzZXQ7XHJcbiAgICAgICAgICAgIG9mZnNldC54ICs9IHZvLng7XHJcbiAgICAgICAgICAgIG9mZnNldC55ICs9IHZvLnk7XHJcbiAgICAgICAgICAgIGN0eC50cmFuc2xhdGUoLXZvLngsIC12by55KTtcclxuXHJcbiAgICAgICAgICAgIGlmICghdHJlZSlcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjdXIgPSB0cmVlLnZpc3VhbFBhcmVudDtcclxuICAgICAgICAgICAgdHJlZSA9IGN1ciA/IGN1ci50cmVlIDogbnVsbDtcclxuICAgICAgICAgICAgYXNzZXRzID0gPGFueT4oY3VyID8gY3VyLmFzc2V0cyA6IG51bGwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjdHgudHJhbnNsYXRlKG9mZnNldC54LCBvZmZzZXQueSk7XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb3JlLnJlYWN0VG8ge1xyXG4gICAgZXhwb3J0IG1vZHVsZSBoZWxwZXJzIHtcclxuICAgICAgICBleHBvcnQgZnVuY3Rpb24gaW52YWxpZGF0ZVBhcmVudCh1cGRhdGVyOiBVcGRhdGVyKSB7XHJcbiAgICAgICAgICAgIHVwZGF0ZXIudHJlZS52aXN1YWxPd25lci5pbnZhbGlkYXRlKHVwZGF0ZXIuYXNzZXRzLnN1cmZhY2VCb3VuZHNXaXRoQ2hpbGRyZW4pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZXhwb3J0IGZ1bmN0aW9uIHNpemVDaGFuZ2VkKHVwZGF0ZXI6IFVwZGF0ZXIpIHtcclxuICAgICAgICAgICAgdmFyIHZwID0gdXBkYXRlci50cmVlLnZpc3VhbFBhcmVudDtcclxuICAgICAgICAgICAgaWYgKHZwKVxyXG4gICAgICAgICAgICAgICAgdnAuaW52YWxpZGF0ZU1lYXN1cmUoKTtcclxuICAgICAgICAgICAgdmFyIG9yaWdpbiA9IHVwZGF0ZXIuYXNzZXRzLnJlbmRlclRyYW5zZm9ybU9yaWdpbjtcclxuICAgICAgICAgICAgdXBkYXRlci5mdWxsSW52YWxpZGF0ZShvcmlnaW4ueCAhPT0gMC4wIHx8IG9yaWdpbi55ICE9PSAwKVxyXG4gICAgICAgICAgICAgICAgLmludmFsaWRhdGVNZWFzdXJlKClcclxuICAgICAgICAgICAgICAgIC5pbnZhbGlkYXRlQXJyYW5nZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZXhwb3J0IGZ1bmN0aW9uIGFsaWdubWVudENoYW5nZWQodXBkYXRlcjogVXBkYXRlcikge1xyXG4gICAgICAgICAgICB1cGRhdGVyLmludmFsaWRhdGVBcnJhbmdlKCk7XHJcbiAgICAgICAgICAgIHVwZGF0ZXIuZnVsbEludmFsaWRhdGUodHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vLyBVSSBFTEVNRU5UXHJcblxyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGlzSGl0VGVzdFZpc2libGUodXBkYXRlcjogVXBkYXRlciwgb2xkVmFsdWU6IGJvb2xlYW4sIG5ld1ZhbHVlOiBib29sZWFuKSB7XHJcbiAgICAgICAgdXBkYXRlci5hc3NldHMuZGlydHlGbGFncyB8PSBEaXJ0eUZsYWdzLkhpdFRlc3RWaXNpYmlsaXR5O1xyXG4gICAgICAgIFVwZGF0ZXIuJCRhZGREb3duRGlydHkodXBkYXRlcik7XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHVzZUxheW91dFJvdW5kaW5nKHVwZGF0ZXI6IFVwZGF0ZXIsIG9sZFZhbHVlOiBib29sZWFuLCBuZXdWYWx1ZTogYm9vbGVhbikge1xyXG4gICAgICAgIHVwZGF0ZXIuaW52YWxpZGF0ZU1lYXN1cmUoKTtcclxuICAgICAgICB1cGRhdGVyLmludmFsaWRhdGVBcnJhbmdlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIG9wYWNpdHkodXBkYXRlcjogVXBkYXRlciwgb2xkVmFsdWU6IG51bWJlciwgbmV3VmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIHVwZGF0ZXIuYXNzZXRzLmRpcnR5RmxhZ3MgfD0gRGlydHlGbGFncy5SZW5kZXJWaXNpYmlsaXR5O1xyXG4gICAgICAgIFVwZGF0ZXIuJCRhZGREb3duRGlydHkodXBkYXRlcik7XHJcbiAgICAgICAgaGVscGVycy5pbnZhbGlkYXRlUGFyZW50KHVwZGF0ZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBmdW5jdGlvbiB2aXNpYmlsaXR5KHVwZGF0ZXI6IFVwZGF0ZXIsIG9sZFZhbHVlOiBWaXNpYmlsaXR5LCBuZXdWYWx1ZTogVmlzaWJpbGl0eSkge1xyXG4gICAgICAgIHVwZGF0ZXIuYXNzZXRzLmRpcnR5RmxhZ3MgfD0gRGlydHlGbGFncy5SZW5kZXJWaXNpYmlsaXR5O1xyXG4gICAgICAgIFVwZGF0ZXIuJCRhZGREb3duRGlydHkodXBkYXRlcik7XHJcbiAgICAgICAgaGVscGVycy5pbnZhbGlkYXRlUGFyZW50KHVwZGF0ZXIpO1xyXG5cclxuICAgICAgICB1cGRhdGVyLmludmFsaWRhdGVNZWFzdXJlKCk7XHJcbiAgICAgICAgdmFyIHZwID0gdXBkYXRlci50cmVlLnZpc3VhbFBhcmVudDtcclxuICAgICAgICBpZiAodnApXHJcbiAgICAgICAgICAgIHZwLmludmFsaWRhdGVNZWFzdXJlKCk7IC8vVE9ETzogQ2FuIHdlIGdldCByaWQgb2YgdGhpcz9cclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gZWZmZWN0KHVwZGF0ZXI6IFVwZGF0ZXIsIG9sZFZhbHVlOiBJRWZmZWN0LCBuZXdWYWx1ZTogSUVmZmVjdCkge1xyXG4gICAgICAgIGhlbHBlcnMuaW52YWxpZGF0ZVBhcmVudCh1cGRhdGVyKTtcclxuICAgICAgICB2YXIgY2hhbmdlZCA9IChuZXdWYWx1ZSkgPyBuZXdWYWx1ZS5HZXRQYWRkaW5nKHVwZGF0ZXIuYXNzZXRzLmVmZmVjdFBhZGRpbmcpIDogZmFsc2U7XHJcbiAgICAgICAgaWYgKGNoYW5nZWQpXHJcbiAgICAgICAgICAgIHVwZGF0ZXIudXBkYXRlQm91bmRzKCk7XHJcblxyXG4gICAgICAgIC8vVE9ETzogVGhpcyBpZiBzdGF0ZW1lbnQgbG9va3Mgc3R1cGlkXHJcbiAgICAgICAgaWYgKG9sZFZhbHVlICE9PSBuZXdWYWx1ZSAmJiB1cGRhdGVyLnRyZWUuc3VyZmFjZSkge1xyXG4gICAgICAgICAgICB1cGRhdGVyLmFzc2V0cy5kaXJ0eUZsYWdzIHw9IERpcnR5RmxhZ3MuTG9jYWxUcmFuc2Zvcm07XHJcbiAgICAgICAgICAgIFVwZGF0ZXIuJCRhZGREb3duRGlydHkodXBkYXRlcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBmdW5jdGlvbiBjbGlwKHVwZGF0ZXI6IFVwZGF0ZXIsIG9sZFZhbHVlOiBJR2VvbWV0cnksIG5ld1ZhbHVlOiBJR2VvbWV0cnkpIHtcclxuICAgICAgICB2YXIgYXNzZXRzID0gdXBkYXRlci5hc3NldHM7XHJcbiAgICAgICAgLypcclxuICAgICAgICAgVE9ETzogU2hvdWxkIHdlIHJlaW5jb3Jwb3JhdGUgQ2xpcEJvdW5kcz9cclxuICAgICAgICAgdmFyIGNiID0gYXNzZXRzLmNsaXBCb3VuZHM7XHJcbiAgICAgICAgIGlmICghbmV3VmFsdWUpXHJcbiAgICAgICAgIGNiLnggPSBjYi55ID0gY2Iud2lkdGggPSBjYi5oZWlnaHQgPSAwO1xyXG4gICAgICAgICBlbHNlXHJcbiAgICAgICAgIFJlY3QuY29weVRvKG5ld1ZhbHVlLkdldEJvdW5kcygpLCBjYik7XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaGVscGVycy5pbnZhbGlkYXRlUGFyZW50KHVwZGF0ZXIpO1xyXG4gICAgICAgIHVwZGF0ZXIudXBkYXRlQm91bmRzKHRydWUpO1xyXG4gICAgICAgIGFzc2V0cy5kaXJ0eUZsYWdzIHw9IERpcnR5RmxhZ3MuTG9jYWxDbGlwO1xyXG4gICAgICAgIFVwZGF0ZXIuJCRhZGREb3duRGlydHkodXBkYXRlcik7XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHJlbmRlclRyYW5zZm9ybSh1cGRhdGVyOiBVcGRhdGVyLCBvbGRWYWx1ZTogYW55LCBuZXdWYWx1ZTogYW55KSB7XHJcbiAgICAgICAgdXBkYXRlci5hc3NldHMuZGlydHlGbGFncyB8PSBEaXJ0eUZsYWdzLkxvY2FsVHJhbnNmb3JtO1xyXG4gICAgICAgIFVwZGF0ZXIuJCRhZGREb3duRGlydHkodXBkYXRlcik7XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHJlbmRlclRyYW5zZm9ybU9yaWdpbih1cGRhdGVyOiBVcGRhdGVyLCBvbGRWYWx1ZTogUG9pbnQsIG5ld1ZhbHVlOiBQb2ludCkge1xyXG4gICAgICAgIHVwZGF0ZXIuYXNzZXRzLmRpcnR5RmxhZ3MgfD0gRGlydHlGbGFncy5Mb2NhbFRyYW5zZm9ybTtcclxuICAgICAgICBVcGRhdGVyLiQkYWRkRG93bkRpcnR5KHVwZGF0ZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vLyBGUkFNRVdPUksgRUxFTUVOVFxyXG4gICAgZXhwb3J0IHZhciB3aWR0aCA9IGhlbHBlcnMuc2l6ZUNoYW5nZWQ7XHJcbiAgICBleHBvcnQgdmFyIGhlaWdodCA9IGhlbHBlcnMuc2l6ZUNoYW5nZWQ7XHJcbiAgICBleHBvcnQgdmFyIG1pbldpZHRoID0gaGVscGVycy5zaXplQ2hhbmdlZDtcclxuICAgIGV4cG9ydCB2YXIgbWluSGVpZ2h0ID0gaGVscGVycy5zaXplQ2hhbmdlZDtcclxuICAgIGV4cG9ydCB2YXIgbWF4V2lkdGggPSBoZWxwZXJzLnNpemVDaGFuZ2VkO1xyXG4gICAgZXhwb3J0IHZhciBtYXhIZWlnaHQgPSBoZWxwZXJzLnNpemVDaGFuZ2VkO1xyXG4gICAgZXhwb3J0IHZhciBtYXJnaW4gPSBoZWxwZXJzLnNpemVDaGFuZ2VkO1xyXG4gICAgZXhwb3J0IHZhciBmbG93RGlyZWN0aW9uID0gaGVscGVycy5zaXplQ2hhbmdlZDtcclxuXHJcbiAgICBleHBvcnQgdmFyIGhvcml6b250YWxBbGlnbm1lbnQgPSBoZWxwZXJzLmFsaWdubWVudENoYW5nZWQ7XHJcbiAgICBleHBvcnQgdmFyIHZlcnRpY2FsQWxpZ25tZW50ID0gaGVscGVycy5hbGlnbm1lbnRDaGFuZ2VkO1xyXG59IiwibW9kdWxlIG1pbmVydmEuY29yZSB7XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElWaXN1YWxPd25lciB7XHJcbiAgICAgICAgdXBkYXRlQm91bmRzKCk7XHJcbiAgICAgICAgaW52YWxpZGF0ZShyZWdpb246IFJlY3QpO1xyXG4gICAgfVxyXG4gICAgdmFyIE5PX1ZPOiBJVmlzdWFsT3duZXIgPSB7XHJcbiAgICAgICAgdXBkYXRlQm91bmRzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBpbnZhbGlkYXRlOiBmdW5jdGlvbiAocmVnaW9uOiBSZWN0KSB7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElVcGRhdGVyVHJlZSB7XHJcbiAgICAgICAgaXNUb3A6IGJvb2xlYW47XHJcbiAgICAgICAgc3VyZmFjZTogSVN1cmZhY2U7XHJcbiAgICAgICAgdmlzdWFsUGFyZW50OiBVcGRhdGVyO1xyXG4gICAgICAgIHZpc3VhbE93bmVyOiBJVmlzdWFsT3duZXI7XHJcbiAgICAgICAgaXNDb250YWluZXI6IGJvb2xlYW47XHJcbiAgICAgICAgaXNMYXlvdXRDb250YWluZXI6IGJvb2xlYW47XHJcbiAgICAgICAgd2FsayhkaXJlY3Rpb24/OiBXYWxrRGlyZWN0aW9uKTogSVdhbGtlcjxVcGRhdGVyPjtcclxuICAgICAgICBvbkNoaWxkQXR0YWNoZWQoY2hpbGQ6IFVwZGF0ZXIpO1xyXG4gICAgICAgIG9uQ2hpbGREZXRhY2hlZChjaGlsZDogVXBkYXRlcik7XHJcbiAgICAgICAgYXBwbHlUZW1wbGF0ZSAoKTogYm9vbGVhbjtcclxuICAgICAgICBzZXRUZW1wbGF0ZUFwcGxpZXIoYXBwbGllcjogKCkgPT4gYm9vbGVhbik7XHJcbiAgICB9XHJcbiAgICBleHBvcnQgY2xhc3MgVXBkYXRlclRyZWUgaW1wbGVtZW50cyBJVXBkYXRlclRyZWUge1xyXG4gICAgICAgIGlzVG9wID0gZmFsc2U7XHJcbiAgICAgICAgc3VyZmFjZSA9IG51bGw7XHJcbiAgICAgICAgdmlzdWFsUGFyZW50ID0gbnVsbDtcclxuICAgICAgICBpc0NvbnRhaW5lciA9IGZhbHNlO1xyXG4gICAgICAgIGlzTGF5b3V0Q29udGFpbmVyID0gZmFsc2U7XHJcbiAgICAgICAgc3VidHJlZSA9IG51bGw7XHJcblxyXG4gICAgICAgIGdldCB2aXN1YWxPd25lciAoKTogSVZpc3VhbE93bmVyIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMudmlzdWFsUGFyZW50KVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudmlzdWFsUGFyZW50O1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pc1RvcCAmJiB0aGlzLnN1cmZhY2UpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zdXJmYWNlO1xyXG4gICAgICAgICAgICByZXR1cm4gTk9fVk87XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB3YWxrIChkaXJlY3Rpb24/OiBXYWxrRGlyZWN0aW9uKTogSVdhbGtlcjxVcGRhdGVyPiB7XHJcbiAgICAgICAgICAgIHZhciB2aXNpdGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50OiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICBzdGVwOiBmdW5jdGlvbiAoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZpc2l0ZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB2aXNpdGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnQgPSBfdGhpcy5zdWJ0cmVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnQgIT0gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG9uQ2hpbGRBdHRhY2hlZCAoY2hpbGQ6IGNvcmUuVXBkYXRlcikge1xyXG4gICAgICAgICAgICB0aGlzLnN1YnRyZWUgPSBjaGlsZDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG9uQ2hpbGREZXRhY2hlZCAoY2hpbGQ6IGNvcmUuVXBkYXRlcikge1xyXG4gICAgICAgICAgICB0aGlzLnN1YnRyZWUgPSBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2V0VGVtcGxhdGVBcHBsaWVyIChhcHBsaWVyOiAoKSA9PiBib29sZWFuKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwbHlUZW1wbGF0ZSA9IGFwcGxpZXI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhcHBseVRlbXBsYXRlICgpOiBib29sZWFuIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLmVuZ2luZSB7XHJcbiAgICBleHBvcnQgZnVuY3Rpb24gZHJhZnQgKGxheWVyczogY29yZS5VcGRhdGVyW10sIGRyYWZ0UGlwZTogY29yZS5kcmFmdC5EcmFmdFBpcGVEZWYsIHBhc3M6IElQYXNzKTogYm9vbGVhbiB7XHJcbiAgICAgICAgdmFyIHVwZGF0ZWQgPSBmYWxzZTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gbGF5ZXJzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHBhc3MudXBkYXRlciA9IGxheWVyc1tpXTtcclxuICAgICAgICAgICAgaWYgKChwYXNzLnVwZGF0ZXIuYXNzZXRzLnVpRmxhZ3MgJiBVSUZsYWdzLkhpbnRzKSA9PT0gMClcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICBwYXNzLnRyZWUgPSBwYXNzLnVwZGF0ZXIudHJlZTtcclxuICAgICAgICAgICAgcGFzcy5hc3NldHMgPSBwYXNzLnVwZGF0ZXIuYXNzZXRzO1xyXG4gICAgICAgICAgICB3aGlsZSAocGFzcy5jb3VudCA8IHBhc3MubWF4Q291bnQpIHtcclxuICAgICAgICAgICAgICAgIGlmICghZHJhZnRQaXBlLnJ1bihwYXNzKSlcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIHVwZGF0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgcGFzcy5jb3VudCsrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB1cGRhdGVkO1xyXG4gICAgfVxyXG59IiwibW9kdWxlIG1pbmVydmEuZW5naW5lIHtcclxuICAgIGV4cG9ydCBmdW5jdGlvbiBwcm9jZXNzIChkb3duOiBjb3JlLlVwZGF0ZXJbXSwgdXA6IGNvcmUuVXBkYXRlcltdKTogYm9vbGVhbiB7XHJcbiAgICAgICAgdmFyIHVwZGF0ZWQgPSBkb3duLmxlbmd0aCA+IDAgfHwgdXAubGVuZ3RoID4gMDtcclxuICAgICAgICBwcm9jZXNzRG93bihkb3duKTtcclxuICAgICAgICBwcm9jZXNzVXAodXApO1xyXG4gICAgICAgIHJldHVybiB1cGRhdGVkO1xyXG4gICAgfVxyXG5cclxuICAgIC8vRG93biAtLT4gUmVuZGVyVmlzaWJpbGl0eSwgSGl0VGVzdFZpc2liaWxpdHksIFRyYW5zZm9ybWF0aW9uLCBDbGlwXHJcbiAgICBmdW5jdGlvbiBwcm9jZXNzRG93biAobGlzdDogY29yZS5VcGRhdGVyW10pIHtcclxuICAgICAgICBmb3IgKHZhciB1cGRhdGVyOiBjb3JlLlVwZGF0ZXI7ICh1cGRhdGVyID0gbGlzdFswXSkgIT0gbnVsbDspIHtcclxuICAgICAgICAgICAgaWYgKHVwZGF0ZXIucHJvY2Vzc0Rvd24oKSkge1xyXG4gICAgICAgICAgICAgICAgbGlzdC5zaGlmdCgpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbGlzdC5wdXNoKGxpc3Quc2hpZnQoKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGxpc3QubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJbTUlORVJWQV0gRmluaXNoZWQgRG93bkRpcnR5IHBhc3MsIG5vdCBlbXB0eS5cIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vVXAgLS0+IEJvdW5kcywgSW52YWxpZGF0aW9uXHJcbiAgICBmdW5jdGlvbiBwcm9jZXNzVXAgKGxpc3Q6IGNvcmUuVXBkYXRlcltdKSB7XHJcbiAgICAgICAgZm9yICh2YXIgdXBkYXRlcjogY29yZS5VcGRhdGVyOyAodXBkYXRlciA9IGxpc3RbMF0pICE9IG51bGw7KSB7XHJcbiAgICAgICAgICAgIHZhciBjaGlsZEluZGV4ID0gdXBkYXRlci5maW5kQ2hpbGRJbkxpc3QobGlzdCk7XHJcbiAgICAgICAgICAgIGlmIChjaGlsZEluZGV4ID4gLTEpIHtcclxuICAgICAgICAgICAgICAgIC8vIE9QVElNSVpBVElPTjogUGFyZW50IGlzIG92ZXJ6ZWFsb3VzLCBjaGlsZHJlbiB3aWxsIGludmFsaWRhdGUgaGltXHJcbiAgICAgICAgICAgICAgICBsaXN0LnNwbGljZShjaGlsZEluZGV4ICsgMSwgMCwgbGlzdC5zaGlmdCgpKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh1cGRhdGVyLnByb2Nlc3NVcCgpKSB7XHJcbiAgICAgICAgICAgICAgICBsaXN0LnNoaWZ0KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGxpc3QubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJbTUlORVJWQV0gRmluaXNoZWQgVXBEaXJ0eSBwYXNzLCBub3QgZW1wdHkuXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLmVuZ2luZSB7XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElQYXNzIGV4dGVuZHMgY29yZS5kcmFmdC5JRHJhZnRQaXBlRGF0YSB7XHJcbiAgICAgICAgY291bnQ6IG51bWJlcjtcclxuICAgICAgICBtYXhDb3VudDogbnVtYmVyO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBmb250Q3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQgPSBudWxsO1xyXG4gICAgdmFyIGhpdFRlc3RDdHg6IGNvcmUucmVuZGVyLlJlbmRlckNvbnRleHQgPSBudWxsO1xyXG4gICAgZXhwb3J0IGNsYXNzIFN1cmZhY2UgaW1wbGVtZW50cyBjb3JlLklTdXJmYWNlIHtcclxuICAgICAgICBwcml2YXRlICQkbGF5b3V0ID0gbmV3IGNvcmUuZHJhZnQuRHJhZnRQaXBlRGVmKCk7XHJcblxyXG4gICAgICAgIHByaXZhdGUgJCRjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50ID0gbnVsbDtcclxuICAgICAgICBwcml2YXRlICQkY3R4OiBjb3JlLnJlbmRlci5SZW5kZXJDb250ZXh0ID0gbnVsbDtcclxuXHJcbiAgICAgICAgcHJpdmF0ZSAkJGxheWVyczogY29yZS5VcGRhdGVyW10gPSBbXTtcclxuICAgICAgICBwcml2YXRlICQkcHJlcmVuZGVyaG9va3M6IGNvcmUuVXBkYXRlcltdID0gW107XHJcblxyXG4gICAgICAgIHByaXZhdGUgJCRkb3duRGlydHk6IGNvcmUuVXBkYXRlcltdID0gW107XHJcbiAgICAgICAgcHJpdmF0ZSAkJHVwRGlydHk6IGNvcmUuVXBkYXRlcltdID0gW107XHJcbiAgICAgICAgcHJpdmF0ZSAkJGRpcnR5UmVnaW9uOiBSZWN0ID0gbnVsbDtcclxuXHJcbiAgICAgICAgcHJpdmF0ZSAkJHdpZHRoOiBudW1iZXIgPSAwO1xyXG4gICAgICAgIHByaXZhdGUgJCRoZWlnaHQ6IG51bWJlciA9IDA7XHJcblxyXG4gICAgICAgIGdldCB3aWR0aCgpOiBudW1iZXIge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy4kJHdpZHRoO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZ2V0IGhlaWdodCgpOiBudW1iZXIge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy4kJGhlaWdodDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGluaXQoY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCkge1xyXG4gICAgICAgICAgICB0aGlzLiQkY2FudmFzID0gY2FudmFzO1xyXG4gICAgICAgICAgICB0aGlzLiQkY3R4ID0gbmV3IGNvcmUucmVuZGVyLlJlbmRlckNvbnRleHQoPENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRD5jYW52YXMuZ2V0Q29udGV4dCgnMmQnLCB7YWxwaGE6IGZhbHNlfSkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYXR0YWNoTGF5ZXIobGF5ZXI6IGNvcmUuVXBkYXRlciwgcm9vdD86IGJvb2xlYW4pIHtcclxuICAgICAgICAgICAgaWYgKHJvb3QgPT09IHRydWUpXHJcbiAgICAgICAgICAgICAgICB0aGlzLiQkbGF5ZXJzLnVuc2hpZnQobGF5ZXIpO1xyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB0aGlzLiQkbGF5ZXJzLnB1c2gobGF5ZXIpO1xyXG4gICAgICAgICAgICBsYXllci50cmVlLmlzVG9wID0gdHJ1ZTtcclxuICAgICAgICAgICAgbGF5ZXIuaW52YWxpZGF0ZU1lYXN1cmUoKTtcclxuICAgICAgICAgICAgbGF5ZXIuZnVsbEludmFsaWRhdGUoKTtcclxuICAgICAgICAgICAgbGF5ZXIuc2V0U3VyZmFjZSh0aGlzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGRldGFjaExheWVyKGxheWVyOiBjb3JlLlVwZGF0ZXIpIHtcclxuICAgICAgICAgICAgbGF5ZXIudHJlZS5pc1RvcCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBsYXllci5zZXRTdXJmYWNlKG51bGwpO1xyXG4gICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLiQkbGF5ZXJzLmluZGV4T2YobGF5ZXIpO1xyXG4gICAgICAgICAgICBpZiAoaW5kZXggPiAtMSlcclxuICAgICAgICAgICAgICAgIHRoaXMuJCRsYXllcnMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgdGhpcy5pbnZhbGlkYXRlKGxheWVyLmFzc2V0cy5zdXJmYWNlQm91bmRzV2l0aENoaWxkcmVuKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHdhbGtMYXllcnMocmV2ZXJzZT86IGJvb2xlYW4pOiBJV2Fsa2VyPGNvcmUuVXBkYXRlcj4ge1xyXG4gICAgICAgICAgICB2YXIgbGF5ZXJzID0gdGhpcy4kJGxheWVycztcclxuICAgICAgICAgICAgdmFyIGkgPSAtMTtcclxuICAgICAgICAgICAgaWYgKHJldmVyc2UgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgIGkgPSBsYXllcnMubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50OiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgc3RlcDogZnVuY3Rpb24gKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLS07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudCA9IGxheWVyc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudCAhPT0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnQ6IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgICAgICAgICBzdGVwOiBmdW5jdGlvbiAoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50ID0gbGF5ZXJzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50ICE9PSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdXBkYXRlQm91bmRzKCkge1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGludmFsaWRhdGUocmVnaW9uPzogUmVjdCkge1xyXG4gICAgICAgICAgICByZWdpb24gPSByZWdpb24gfHwgbmV3IFJlY3QoMCwgMCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuJCRkaXJ0eVJlZ2lvbilcclxuICAgICAgICAgICAgICAgIHRoaXMuJCRkaXJ0eVJlZ2lvbiA9IG5ldyBSZWN0KHJlZ2lvbi54LCByZWdpb24ueSwgcmVnaW9uLndpZHRoLCByZWdpb24uaGVpZ2h0KTtcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgUmVjdC51bmlvbih0aGlzLiQkZGlydHlSZWdpb24sIHJlZ2lvbik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBob29rcyA9IHRoaXMuJCRwcmVyZW5kZXJob29rczsgaSA8IGhvb2tzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBob29rc1tpXS5wcmVSZW5kZXIoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIHJlZ2lvbiA9IHRoaXMuJCRkaXJ0eVJlZ2lvbjtcclxuICAgICAgICAgICAgaWYgKCFyZWdpb24gfHwgUmVjdC5pc0VtcHR5KHJlZ2lvbikpXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIHRoaXMuJCRkaXJ0eVJlZ2lvbiA9IG51bGw7XHJcbiAgICAgICAgICAgIFJlY3Qucm91bmRPdXQocmVnaW9uKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBjdHggPSB0aGlzLiQkY3R4O1xyXG4gICAgICAgICAgICBjdHguc2l6ZS5jb21taXRSZXNpemUoKTtcclxuXHJcbiAgICAgICAgICAgIGN0eC5zYXZlKCk7XHJcbiAgICAgICAgICAgIGN0eC5hcHBseURwaVJhdGlvKCk7XHJcbiAgICAgICAgICAgIGN0eC5yYXcuZmlsbFN0eWxlID0gXCIjZmZmZmZmXCI7XHJcbiAgICAgICAgICAgIGN0eC5yYXcuZmlsbFJlY3QocmVnaW9uLngsIHJlZ2lvbi55LCByZWdpb24ud2lkdGgsIHJlZ2lvbi5oZWlnaHQpO1xyXG4gICAgICAgICAgICBjdHguY2xpcFJlY3QocmVnaW9uKTtcclxuICAgICAgICAgICAgZm9yICh2YXIgbGF5ZXJzID0gdGhpcy4kJGxheWVycywgaSA9IDAsIGxlbiA9IGxheWVycy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgbGF5ZXJzW2ldLnJlbmRlcihjdHgsIHJlZ2lvbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY3R4LnJlc3RvcmUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGhvb2tQcmVyZW5kZXIodXBkYXRlcjogY29yZS5VcGRhdGVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuJCRwcmVyZW5kZXJob29rcy5wdXNoKHVwZGF0ZXIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdW5ob29rUHJlcmVuZGVyKHVwZGF0ZXI6IGNvcmUuVXBkYXRlcikge1xyXG4gICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLiQkcHJlcmVuZGVyaG9va3MuaW5kZXhPZih1cGRhdGVyKTtcclxuICAgICAgICAgICAgaWYgKGluZGV4ID4gLTEpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuJCRwcmVyZW5kZXJob29rcy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhZGRVcERpcnR5KHVwZGF0ZXI6IGNvcmUuVXBkYXRlcikge1xyXG4gICAgICAgICAgICB0aGlzLiQkdXBEaXJ0eS5wdXNoKHVwZGF0ZXIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYWRkRG93bkRpcnR5KHVwZGF0ZXI6IGNvcmUuVXBkYXRlcikge1xyXG4gICAgICAgICAgICB0aGlzLiQkZG93bkRpcnR5LnB1c2godXBkYXRlcik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB1cGRhdGVMYXlvdXQoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgICAgIHZhciBwYXNzOiBJUGFzcyA9IHtcclxuICAgICAgICAgICAgICAgIGNvdW50OiAwLFxyXG4gICAgICAgICAgICAgICAgbWF4Q291bnQ6IDI1MCxcclxuICAgICAgICAgICAgICAgIHVwZGF0ZXI6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBhc3NldHM6IG51bGwsXHJcbiAgICAgICAgICAgICAgICB0cmVlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgZmxhZzogVUlGbGFncy5Ob25lLFxyXG4gICAgICAgICAgICAgICAgbWVhc3VyZUxpc3Q6IFtdLFxyXG4gICAgICAgICAgICAgICAgYXJyYW5nZUxpc3Q6IFtdLFxyXG4gICAgICAgICAgICAgICAgc2l6aW5nTGlzdDogW10sXHJcbiAgICAgICAgICAgICAgICBzdXJmYWNlU2l6ZTogbmV3IFNpemUodGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpLFxyXG4gICAgICAgICAgICAgICAgc2l6aW5nVXBkYXRlczogW11cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgdmFyIHVwZGF0ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgdmFyIGxheWVyc1VwZGF0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB3aGlsZSAocGFzcy5jb3VudCA8IHBhc3MubWF4Q291bnQgJiYgbGF5ZXJzVXBkYXRlZCkge1xyXG4gICAgICAgICAgICAgICAgbGF5ZXJzVXBkYXRlZCA9IGRyYWZ0KHRoaXMuJCRsYXllcnMsIHRoaXMuJCRsYXlvdXQsIHBhc3MpO1xyXG4gICAgICAgICAgICAgICAgdXBkYXRlZCA9IHByb2Nlc3ModGhpcy4kJGRvd25EaXJ0eSwgdGhpcy4kJHVwRGlydHkpIHx8IGxheWVyc1VwZGF0ZWQgfHwgdXBkYXRlZDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHBhc3MuY291bnQgPj0gcGFzcy5tYXhDb3VudCkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIltNSU5FUlZBXSBBYm9ydGluZyBpbmZpbml0ZSB1cGRhdGUgbG9vcFwiKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZWQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXNpemUod2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuJCR3aWR0aCA9PT0gd2lkdGggJiYgdGhpcy4kJGhlaWdodCA9PT0gaGVpZ2h0KVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB2YXIgcmVnaW9uID0gbmV3IFJlY3QoMCwgMCwgdGhpcy4kJHdpZHRoLCB0aGlzLiQkaGVpZ2h0KTtcclxuICAgICAgICAgICAgUmVjdC51bmlvbihyZWdpb24sIG5ldyBSZWN0KDAsIDAsIHdpZHRoLCBoZWlnaHQpKTtcclxuICAgICAgICAgICAgUmVjdC5yb3VuZE91dChyZWdpb24pO1xyXG4gICAgICAgICAgICB0aGlzLiQkd2lkdGggPSB3aWR0aDtcclxuICAgICAgICAgICAgdGhpcy4kJGhlaWdodCA9IGhlaWdodDtcclxuICAgICAgICAgICAgdGhpcy4kJGN0eC5zaXplLnF1ZXVlUmVzaXplKHdpZHRoLCBoZWlnaHQpO1xyXG4gICAgICAgICAgICB0aGlzLmludmFsaWRhdGUocmVnaW9uKTtcclxuICAgICAgICAgICAgZm9yICh2YXIgbGF5ZXJzID0gdGhpcy4kJGxheWVycywgaSA9IDA7IGkgPCBsYXllcnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGxheWVyc1tpXS5pbnZhbGlkYXRlTWVhc3VyZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBoaXRUZXN0KHBvczogUG9pbnQpOiBjb3JlLlVwZGF0ZXJbXSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLiQkbGF5ZXJzLmxlbmd0aCA8IDEpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgaGl0VGVzdEN0eCA9IGhpdFRlc3RDdHggfHwgbmV3IGNvcmUucmVuZGVyLlJlbmRlckNvbnRleHQoPENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRD5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKS5nZXRDb250ZXh0KCcyZCcpKTtcclxuICAgICAgICAgICAgaGl0VGVzdEN0eC5zaXplXHJcbiAgICAgICAgICAgICAgICAucXVldWVSZXNpemUodGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpXHJcbiAgICAgICAgICAgICAgICAuY29tbWl0UmVzaXplKCk7XHJcblxyXG4gICAgICAgICAgICB2YXIgbGlzdDogY29yZS5VcGRhdGVyW10gPSBbXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgbGF5ZXJzID0gdGhpcy4kJGxheWVycywgaSA9IGxheWVycy5sZW5ndGggLSAxOyBpID49IDAgJiYgbGlzdC5sZW5ndGggPT09IDA7IGktLSkge1xyXG4gICAgICAgICAgICAgICAgbGF5ZXJzW2ldLmhpdFRlc3QocG9zLCBsaXN0LCBoaXRUZXN0Q3R4LCBmYWxzZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGxpc3Q7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB1cGRhdGVEcGlSYXRpbygpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuJCRjdHguc2l6ZS51cGRhdGVEcGlSYXRpbygpKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5pbnZhbGlkYXRlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzdGF0aWMgbWVhc3VyZVdpZHRoKHRleHQ6IHN0cmluZywgZm9udDogRm9udCk6IG51bWJlciB7XHJcbiAgICAgICAgICAgIGZvbnRDdHggPSBmb250Q3R4IHx8IDxDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQ+ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJykuZ2V0Q29udGV4dCgnMmQnKTtcclxuICAgICAgICAgICAgZm9udEN0eC5mb250ID0gZm9udC50b0h0bWw1T2JqZWN0KCk7XHJcbiAgICAgICAgICAgIHJldHVybiBmb250Q3R4Lm1lYXN1cmVUZXh0KHRleHQpLndpZHRoO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJpbnRlcmZhY2UgSU1hdHJpeDNTdGF0aWMge1xyXG4gICAgY3JlYXRlIChzcmM/OiBudW1iZXJbXSk6IG51bWJlcltdO1xyXG4gICAgY29weVRvIChzcmM6IG51bWJlcltdLCBkZXN0OiBudW1iZXJbXSk6IG51bWJlcltdO1xyXG4gICAgaW5pdCAoZGVzdDogbnVtYmVyW10sIG0xMTogbnVtYmVyLCBtMTI6IG51bWJlciwgbTIxOiBudW1iZXIsIG0yMjogbnVtYmVyLCB4MDogbnVtYmVyLCB5MDogbnVtYmVyKTogbnVtYmVyW107XHJcbiAgICBpZGVudGl0eSAoZGVzdD86IG51bWJlcltdKTogbnVtYmVyW107XHJcbiAgICBlcXVhbCAoYTogbnVtYmVyW10sIGI6IG51bWJlcltdKTogYm9vbGVhbjtcclxuICAgIC8vIGRlc3QgPSBhICogYlxyXG4gICAgbXVsdGlwbHkgKGE6IG51bWJlcltdLCBiOiBudW1iZXJbXSwgZGVzdD86IG51bWJlcltdKTogbnVtYmVyW107XHJcbiAgICBpbnZlcnNlKG1hdDogbnVtYmVyW10sIGRlc3Q/OiBudW1iZXJbXSk6IG51bWJlcltdO1xyXG4gICAgdHJhbnNmb3JtVmVjMihtYXQ6IG51bWJlcltdLCB2ZWM6IG51bWJlcltdLCBkZXN0PzogbnVtYmVyW10pOiBudW1iZXJbXTtcclxuXHJcbiAgICBjcmVhdGVUcmFuc2xhdGUoeDogbnVtYmVyLCB5OiBudW1iZXIsIGRlc3Q/OiBudW1iZXJbXSk6IG51bWJlcltdO1xyXG4gICAgdHJhbnNsYXRlKG1hdDogbnVtYmVyW10sIHg6IG51bWJlciwgeTogbnVtYmVyKTogbnVtYmVyW107XHJcbiAgICBjcmVhdGVTY2FsZSAoc3g6IG51bWJlciwgc3k6IG51bWJlciwgZGVzdD86IG51bWJlcltdKTogbnVtYmVyW107XHJcbiAgICBzY2FsZSAobWF0OiBudW1iZXJbXSwgc3g6IG51bWJlciwgc3k6IG51bWJlcik6IG51bWJlcltdO1xyXG4gICAgY3JlYXRlUm90YXRlIChhbmdsZVJhZDogbnVtYmVyLCBkZXN0PzogbnVtYmVyW10pOiBudW1iZXJbXTtcclxuICAgIGNyZWF0ZVNrZXcgKGFuZ2xlUmFkWDogbnVtYmVyLCBhbmdsZVJhZFk6IG51bWJlciwgZGVzdD86IG51bWJlcltdKTogbnVtYmVyW107XHJcblxyXG4gICAgcHJlYXBwbHkoZGVzdDogbnVtYmVyW10sIG1hdDogbnVtYmVyW10pOiBudW1iZXJbXTtcclxuICAgIGFwcGx5KGRlc3Q6IG51bWJlcltdLCBtYXQ6IG51bWJlcltdKTogbnVtYmVyW107XHJcbn1cclxubW9kdWxlIG1pbmVydmEge1xyXG4gICAgLy8vIE5PVEU6XHJcbiAgICAvLy8gICAgIFJvdy1tYWpvciBvcmRlclxyXG4gICAgLy8vICAgICBbbTExLCBtMTIsIG0yMSwgbTIyLCB4MCwgeTBdXHJcbiAgICB2YXIgRkxPQVRfRVBTSUxPTiA9IDAuMDAwMDAxO1xyXG4gICAgdmFyIGNyZWF0ZVR5cGVkQXJyYXk6IChsZW5ndGg6IG51bWJlcikgPT4gbnVtYmVyW107XHJcblxyXG4gICAgaWYgKHR5cGVvZiBGbG9hdDMyQXJyYXkgIT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICBjcmVhdGVUeXBlZEFycmF5ID0gZnVuY3Rpb24gKGxlbmd0aDogbnVtYmVyKTogbnVtYmVyW10ge1xyXG4gICAgICAgICAgICByZXR1cm4gPG51bWJlcltdPjxhbnk+bmV3IEZsb2F0MzJBcnJheShsZW5ndGgpO1xyXG4gICAgICAgIH07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNyZWF0ZVR5cGVkQXJyYXkgPSBmdW5jdGlvbiAobGVuZ3RoOiBudW1iZXIpOiBudW1iZXJbXSB7XHJcbiAgICAgICAgICAgIHJldHVybiA8bnVtYmVyW10+bmV3IEFycmF5KGxlbmd0aCk7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgdmFyIG1hdDM6IElNYXRyaXgzU3RhdGljID0ge1xyXG4gICAgICAgIGNyZWF0ZSAoc3JjPzogbnVtYmVyW10pOiBudW1iZXJbXSB7XHJcbiAgICAgICAgICAgIHZhciBkZXN0ID0gY3JlYXRlVHlwZWRBcnJheSg2KTtcclxuXHJcbiAgICAgICAgICAgIGlmIChzcmMpIHtcclxuICAgICAgICAgICAgICAgIGRlc3RbMF0gPSBzcmNbMF07XHJcbiAgICAgICAgICAgICAgICBkZXN0WzFdID0gc3JjWzFdO1xyXG4gICAgICAgICAgICAgICAgZGVzdFsyXSA9IHNyY1syXTtcclxuICAgICAgICAgICAgICAgIGRlc3RbM10gPSBzcmNbM107XHJcbiAgICAgICAgICAgICAgICBkZXN0WzRdID0gc3JjWzRdO1xyXG4gICAgICAgICAgICAgICAgZGVzdFs1XSA9IHNyY1s1XTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGRlc3RbMF0gPSBkZXN0WzFdID0gZGVzdFsyXSA9IGRlc3RbM10gPSBkZXN0WzRdID0gZGVzdFs1XSA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBkZXN0O1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY29weVRvIChzcmM6IG51bWJlcltdLCBkZXN0OiBudW1iZXJbXSk6IG51bWJlcltdIHtcclxuICAgICAgICAgICAgZGVzdFswXSA9IHNyY1swXTtcclxuICAgICAgICAgICAgZGVzdFsxXSA9IHNyY1sxXTtcclxuICAgICAgICAgICAgZGVzdFsyXSA9IHNyY1syXTtcclxuICAgICAgICAgICAgZGVzdFszXSA9IHNyY1szXTtcclxuICAgICAgICAgICAgZGVzdFs0XSA9IHNyY1s0XTtcclxuICAgICAgICAgICAgZGVzdFs1XSA9IHNyY1s1XTtcclxuICAgICAgICAgICAgcmV0dXJuIGRlc3Q7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBpbml0IChkZXN0OiBudW1iZXJbXSwgbTExOiBudW1iZXIsIG0xMjogbnVtYmVyLCBtMjE6IG51bWJlciwgbTIyOiBudW1iZXIsIHgwOiBudW1iZXIsIHkwOiBudW1iZXIpOiBudW1iZXJbXSB7XHJcbiAgICAgICAgICAgIGRlc3RbMF0gPSBtMTE7XHJcbiAgICAgICAgICAgIGRlc3RbMV0gPSBtMTI7XHJcbiAgICAgICAgICAgIGRlc3RbMl0gPSBtMjE7XHJcbiAgICAgICAgICAgIGRlc3RbM10gPSBtMjI7XHJcbiAgICAgICAgICAgIGRlc3RbNF0gPSB4MDtcclxuICAgICAgICAgICAgZGVzdFs1XSA9IHkwO1xyXG4gICAgICAgICAgICByZXR1cm4gZGVzdDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGlkZW50aXR5IChkZXN0PzogbnVtYmVyW10pOiBudW1iZXJbXSB7XHJcbiAgICAgICAgICAgIGlmICghZGVzdCkgZGVzdCA9IG1hdDMuY3JlYXRlKCk7XHJcbiAgICAgICAgICAgIGRlc3RbMF0gPSAxO1xyXG4gICAgICAgICAgICBkZXN0WzFdID0gMDtcclxuICAgICAgICAgICAgZGVzdFsyXSA9IDA7XHJcbiAgICAgICAgICAgIGRlc3RbM10gPSAxO1xyXG4gICAgICAgICAgICBkZXN0WzRdID0gMDtcclxuICAgICAgICAgICAgZGVzdFs1XSA9IDA7XHJcbiAgICAgICAgICAgIHJldHVybiBkZXN0O1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZXF1YWwgKGE6IG51bWJlcltdLCBiOiBudW1iZXJbXSk6IGJvb2xlYW4ge1xyXG4gICAgICAgICAgICByZXR1cm4gYSA9PT0gYiB8fCAoXHJcbiAgICAgICAgICAgICAgICAgICAgTWF0aC5hYnMoYVswXSAtIGJbMF0pIDwgRkxPQVRfRVBTSUxPTiAmJlxyXG4gICAgICAgICAgICAgICAgICAgIE1hdGguYWJzKGFbMV0gLSBiWzFdKSA8IEZMT0FUX0VQU0lMT04gJiZcclxuICAgICAgICAgICAgICAgICAgICBNYXRoLmFicyhhWzJdIC0gYlsyXSkgPCBGTE9BVF9FUFNJTE9OICYmXHJcbiAgICAgICAgICAgICAgICAgICAgTWF0aC5hYnMoYVszXSAtIGJbM10pIDwgRkxPQVRfRVBTSUxPTiAmJlxyXG4gICAgICAgICAgICAgICAgICAgIE1hdGguYWJzKGFbNF0gLSBiWzRdKSA8IEZMT0FUX0VQU0lMT04gJiZcclxuICAgICAgICAgICAgICAgICAgICBNYXRoLmFicyhhWzVdIC0gYls1XSkgPCBGTE9BVF9FUFNJTE9OXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbXVsdGlwbHkgKGE6IG51bWJlcltdLCBiOiBudW1iZXJbXSwgZGVzdD86IG51bWJlcltdKTogbnVtYmVyW10ge1xyXG4gICAgICAgICAgICBpZiAoIWRlc3QpIGRlc3QgPSBhO1xyXG4gICAgICAgICAgICB2YXIgYTExID0gYVswXSwgYTEyID0gYVsxXSxcclxuICAgICAgICAgICAgICAgIGEyMSA9IGFbMl0sIGEyMiA9IGFbM10sXHJcbiAgICAgICAgICAgICAgICBheDAgPSBhWzRdLCBheTAgPSBhWzVdLFxyXG4gICAgICAgICAgICAgICAgYjExID0gYlswXSwgYjEyID0gYlsxXSxcclxuICAgICAgICAgICAgICAgIGIyMSA9IGJbMl0sIGIyMiA9IGJbM10sXHJcbiAgICAgICAgICAgICAgICBieDAgPSBiWzRdLCBieTAgPSBiWzVdO1xyXG5cclxuICAgICAgICAgICAgZGVzdFswXSA9IGExMSAqIGIxMSArIGExMiAqIGIyMTtcclxuICAgICAgICAgICAgZGVzdFsxXSA9IGExMSAqIGIxMiArIGExMiAqIGIyMjtcclxuXHJcbiAgICAgICAgICAgIGRlc3RbMl0gPSBhMjEgKiBiMTEgKyBhMjIgKiBiMjE7XHJcbiAgICAgICAgICAgIGRlc3RbM10gPSBhMjEgKiBiMTIgKyBhMjIgKiBiMjI7XHJcblxyXG4gICAgICAgICAgICBkZXN0WzRdID0gYXgwICogYjExICsgYXkwICogYjIxICsgYngwO1xyXG4gICAgICAgICAgICBkZXN0WzVdID0gYXgwICogYjEyICsgYXkwICogYjIyICsgYnkwO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGRlc3Q7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBpbnZlcnNlIChtYXQ6IG51bWJlcltdLCBkZXN0PzogbnVtYmVyW10pOiBudW1iZXJbXSB7XHJcbiAgICAgICAgICAgIGlmIChNYXRoLmFicyhtYXRbMV0pIDwgRkxPQVRfRVBTSUxPTiAmJiBNYXRoLmFicyhtYXRbMl0pIDwgRkxPQVRfRVBTSUxPTikgLy9TaW1wbGUgc2NhbGluZy90cmFuc2xhdGlvbiBtYXRyaXhcclxuICAgICAgICAgICAgICAgIHJldHVybiBzaW1wbGVfaW52ZXJzZShtYXQsIGRlc3QpO1xyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tcGxleF9pbnZlcnNlKG1hdCwgZGVzdCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICB0cmFuc2Zvcm1WZWMyIChtYXQ6IG51bWJlcltdLCB2ZWM6IG51bWJlcltdLCBkZXN0PzogbnVtYmVyW10pOiBudW1iZXJbXSB7XHJcbiAgICAgICAgICAgIGlmICghZGVzdCkgZGVzdCA9IHZlYztcclxuICAgICAgICAgICAgdmFyIHggPSB2ZWNbMF0sXHJcbiAgICAgICAgICAgICAgICB5ID0gdmVjWzFdO1xyXG4gICAgICAgICAgICBkZXN0WzBdID0gKG1hdFswXSAqIHgpICsgKG1hdFsyXSAqIHkpICsgbWF0WzRdO1xyXG4gICAgICAgICAgICBkZXN0WzFdID0gKG1hdFsxXSAqIHgpICsgKG1hdFszXSAqIHkpICsgbWF0WzVdO1xyXG4gICAgICAgICAgICByZXR1cm4gZGVzdDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBjcmVhdGVUcmFuc2xhdGUgKHg6IG51bWJlciwgeTogbnVtYmVyLCBkZXN0PzogbnVtYmVyW10pOiBudW1iZXJbXSB7XHJcbiAgICAgICAgICAgIGlmICghZGVzdCkgZGVzdCA9IG1hdDMuY3JlYXRlKCk7XHJcbiAgICAgICAgICAgIGRlc3RbMF0gPSAxO1xyXG4gICAgICAgICAgICBkZXN0WzFdID0gMDtcclxuICAgICAgICAgICAgZGVzdFsyXSA9IDA7XHJcbiAgICAgICAgICAgIGRlc3RbM10gPSAxO1xyXG4gICAgICAgICAgICBkZXN0WzRdID0geDtcclxuICAgICAgICAgICAgZGVzdFs1XSA9IHk7XHJcbiAgICAgICAgICAgIHJldHVybiBkZXN0O1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdHJhbnNsYXRlIChtYXQ6IG51bWJlcltdLCB4OiBudW1iZXIsIHk6IG51bWJlcik6IG51bWJlcltdIHtcclxuICAgICAgICAgICAgbWF0WzRdICs9IHg7XHJcbiAgICAgICAgICAgIG1hdFs1XSArPSB5O1xyXG4gICAgICAgICAgICByZXR1cm4gbWF0O1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY3JlYXRlU2NhbGUgKHN4OiBudW1iZXIsIHN5OiBudW1iZXIsIGRlc3Q/OiBudW1iZXJbXSk6IG51bWJlcltdIHtcclxuICAgICAgICAgICAgaWYgKCFkZXN0KSBkZXN0ID0gbWF0My5jcmVhdGUoKTtcclxuICAgICAgICAgICAgZGVzdFswXSA9IHN4O1xyXG4gICAgICAgICAgICBkZXN0WzFdID0gMDtcclxuICAgICAgICAgICAgZGVzdFsyXSA9IDA7XHJcbiAgICAgICAgICAgIGRlc3RbM10gPSBzeTtcclxuICAgICAgICAgICAgZGVzdFs0XSA9IDA7XHJcbiAgICAgICAgICAgIGRlc3RbNV0gPSAwO1xyXG4gICAgICAgICAgICByZXR1cm4gZGVzdDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNjYWxlIChtYXQ6IG51bWJlcltdLCBzeDogbnVtYmVyLCBzeTogbnVtYmVyKTogbnVtYmVyW10ge1xyXG4gICAgICAgICAgICBtYXRbMF0gKj0gc3g7XHJcbiAgICAgICAgICAgIG1hdFsyXSAqPSBzeDtcclxuICAgICAgICAgICAgbWF0WzRdICo9IHN4O1xyXG5cclxuICAgICAgICAgICAgbWF0WzFdICo9IHN5O1xyXG4gICAgICAgICAgICBtYXRbM10gKj0gc3k7XHJcbiAgICAgICAgICAgIG1hdFs1XSAqPSBzeTtcclxuICAgICAgICAgICAgcmV0dXJuIG1hdDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGNyZWF0ZVJvdGF0ZSAoYW5nbGVSYWQ6IG51bWJlciwgZGVzdD86IG51bWJlcltdKTogbnVtYmVyW10ge1xyXG4gICAgICAgICAgICBpZiAoIWRlc3QpIGRlc3QgPSBtYXQzLmNyZWF0ZSgpO1xyXG4gICAgICAgICAgICB2YXIgYyA9IE1hdGguY29zKGFuZ2xlUmFkKTtcclxuICAgICAgICAgICAgdmFyIHMgPSBNYXRoLnNpbihhbmdsZVJhZCk7XHJcbiAgICAgICAgICAgIGRlc3RbMF0gPSBjO1xyXG4gICAgICAgICAgICBkZXN0WzFdID0gcztcclxuICAgICAgICAgICAgZGVzdFsyXSA9IC1zO1xyXG4gICAgICAgICAgICBkZXN0WzNdID0gYztcclxuICAgICAgICAgICAgZGVzdFs0XSA9IDA7XHJcbiAgICAgICAgICAgIGRlc3RbNV0gPSAwO1xyXG4gICAgICAgICAgICByZXR1cm4gZGVzdDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGNyZWF0ZVNrZXcgKGFuZ2xlUmFkWDogbnVtYmVyLCBhbmdsZVJhZFk6IG51bWJlciwgZGVzdD86IG51bWJlcltdKTogbnVtYmVyW10ge1xyXG4gICAgICAgICAgICBpZiAoIWRlc3QpIGRlc3QgPSBtYXQzLmNyZWF0ZSgpO1xyXG4gICAgICAgICAgICBkZXN0WzBdID0gMTtcclxuICAgICAgICAgICAgZGVzdFsxXSA9IE1hdGgudGFuKGFuZ2xlUmFkWSk7XHJcbiAgICAgICAgICAgIGRlc3RbMl0gPSBNYXRoLnRhbihhbmdsZVJhZFgpO1xyXG4gICAgICAgICAgICBkZXN0WzNdID0gMTtcclxuICAgICAgICAgICAgZGVzdFs0XSA9IDA7XHJcbiAgICAgICAgICAgIGRlc3RbNV0gPSAwO1xyXG4gICAgICAgICAgICByZXR1cm4gZGVzdDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBwcmVhcHBseSAoZGVzdDogbnVtYmVyW10sIG1hdDogbnVtYmVyW10pOiBudW1iZXJbXSB7XHJcbiAgICAgICAgICAgIHJldHVybiBtYXQzLm11bHRpcGx5KG1hdCwgZGVzdCwgZGVzdCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBhcHBseSAoZGVzdDogbnVtYmVyW10sIG1hdDogbnVtYmVyW10pOiBudW1iZXJbXSB7XHJcbiAgICAgICAgICAgIHJldHVybiBtYXQzLm11bHRpcGx5KGRlc3QsIG1hdCwgZGVzdCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBmdW5jdGlvbiBzaW1wbGVfaW52ZXJzZSAobWF0OiBudW1iZXJbXSwgZGVzdD86IG51bWJlcltdKTogbnVtYmVyW10ge1xyXG4gICAgICAgIHZhciBtMTEgPSBtYXRbMF07XHJcbiAgICAgICAgaWYgKE1hdGguYWJzKG0xMSkgPCBGTE9BVF9FUFNJTE9OKVxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuXHJcbiAgICAgICAgdmFyIG0yMiA9IG1hdFszXTtcclxuICAgICAgICBpZiAoTWF0aC5hYnMobTIyKSA8IEZMT0FUX0VQU0lMT04pXHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG5cclxuICAgICAgICBpZiAoIWRlc3QpIHtcclxuICAgICAgICAgICAgZGVzdCA9IG1hdDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBkZXN0WzFdID0gbWF0WzFdO1xyXG4gICAgICAgICAgICBkZXN0WzJdID0gbWF0WzJdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIHgwID0gLW1hdFs0XTtcclxuICAgICAgICB2YXIgeTAgPSAtbWF0WzVdO1xyXG4gICAgICAgIGlmIChNYXRoLmFicyhtMTEgLSAxKSA+IEZMT0FUX0VQU0lMT04pIHtcclxuICAgICAgICAgICAgbTExID0gMSAvIG0xMTtcclxuICAgICAgICAgICAgeDAgKj0gbTExO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoTWF0aC5hYnMobTIyIC0gMSkgPiBGTE9BVF9FUFNJTE9OKSB7XHJcbiAgICAgICAgICAgIG0yMiA9IDEgLyBtMjI7XHJcbiAgICAgICAgICAgIHkwICo9IG0yMjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGRlc3RbMF0gPSBtMTE7XHJcbiAgICAgICAgZGVzdFszXSA9IG0yMjtcclxuICAgICAgICBkZXN0WzRdID0geDA7XHJcbiAgICAgICAgZGVzdFs1XSA9IHkwO1xyXG4gICAgICAgIHJldHVybiBkZXN0O1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGNvbXBsZXhfaW52ZXJzZSAobWF0OiBudW1iZXJbXSwgZGVzdD86IG51bWJlcltdKTogbnVtYmVyW10ge1xyXG4gICAgICAgIGlmICghZGVzdCkgZGVzdCA9IG1hdDtcclxuXHJcbiAgICAgICAgdmFyIG0xMSA9IG1hdFswXSwgbTEyID0gbWF0WzFdLFxyXG4gICAgICAgICAgICBtMjEgPSBtYXRbMl0sIG0yMiA9IG1hdFszXTtcclxuXHJcbiAgICAgICAgLy9pbnYoQSkgPSAxL2RldChBKSAqIGFkaihBKVxyXG4gICAgICAgIHZhciBkZXQgPSBtMTEgKiBtMjIgLSBtMTIgKiBtMjE7XHJcbiAgICAgICAgaWYgKGRldCA9PT0gMCB8fCAhaXNGaW5pdGUoZGV0KSlcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgdmFyIGlkID0gMSAvIGRldDtcclxuXHJcbiAgICAgICAgdmFyIHgwID0gbWF0WzRdLCB5MCA9IG1hdFs1XTtcclxuXHJcbiAgICAgICAgZGVzdFswXSA9IG0yMiAqIGlkO1xyXG4gICAgICAgIGRlc3RbMV0gPSAtbTEyICogaWQ7XHJcbiAgICAgICAgZGVzdFsyXSA9IC1tMjEgKiBpZDtcclxuICAgICAgICBkZXN0WzNdID0gbTExICogaWQ7XHJcbiAgICAgICAgZGVzdFs0XSA9IChtMjEgKiB5MCAtIG0yMiAqIHgwKSAqIGlkO1xyXG4gICAgICAgIGRlc3RbNV0gPSAobTEyICogeDAgLSBtMTEgKiB5MCkgKiBpZDtcclxuICAgICAgICByZXR1cm4gZGVzdDtcclxuICAgIH1cclxufVxyXG52YXIgbWF0MyA9IG1pbmVydmEubWF0MzsiLCJpbnRlcmZhY2UgSU1hdHJpeDRTdGF0aWMge1xyXG4gICAgY3JlYXRlIChzcmM/OiBudW1iZXJbXSk6IG51bWJlcltdO1xyXG4gICAgY29weVRvIChzcmM6IG51bWJlcltdLCBkZXN0OiBudW1iZXJbXSk6IG51bWJlcltdO1xyXG4gICAgaWRlbnRpdHkoZGVzdD86IG51bWJlcltdKTogbnVtYmVyW107XHJcbiAgICBlcXVhbChhOiBudW1iZXJbXSwgYjogbnVtYmVyW10pOiBib29sZWFuO1xyXG4gICAgLy8gZGVzdCA9IGEgKiBiXHJcbiAgICBtdWx0aXBseSAoYTogbnVtYmVyW10sIGI6IG51bWJlcltdLCBkZXN0PzogbnVtYmVyW10pOiBudW1iZXJbXTtcclxuICAgIGludmVyc2UgKG1hdDogbnVtYmVyW10sIGRlc3Q/OiBudW1iZXJbXSk6IG51bWJlcltdO1xyXG4gICAgdHJhbnNwb3NlIChtYXQ6IG51bWJlcltdLCBkZXN0PzogbnVtYmVyW10pOiBudW1iZXJbXTtcclxuICAgIHRyYW5zZm9ybVZlYzQgKG1hdDogbnVtYmVyW10sIHZlYzogbnVtYmVyW10sIGRlc3Q/OiBudW1iZXJbXSk6IG51bWJlcltdO1xyXG4gICAgY3JlYXRlVHJhbnNsYXRlICh4OiBudW1iZXIsIHk6IG51bWJlciwgejogbnVtYmVyLCBkZXN0PzogbnVtYmVyW10pOiBudW1iZXJbXTtcclxuICAgIGNyZWF0ZVNjYWxlICh4OiBudW1iZXIsIHk6IG51bWJlciwgejogbnVtYmVyLCBkZXN0PzogbnVtYmVyW10pOiBudW1iZXJbXTtcclxuICAgIGNyZWF0ZVJvdGF0ZVggKHRoZXRhOiBudW1iZXIsIGRlc3Q/OiBudW1iZXJbXSk6IG51bWJlcltdO1xyXG4gICAgY3JlYXRlUm90YXRlWSAodGhldGE6IG51bWJlciwgZGVzdD86IG51bWJlcltdKTogbnVtYmVyW107XHJcbiAgICBjcmVhdGVSb3RhdGVaICh0aGV0YTogbnVtYmVyLCBkZXN0PzogbnVtYmVyW10pOiBudW1iZXJbXTtcclxuICAgIGNyZWF0ZVBlcnNwZWN0aXZlIChmaWVsZE9mVmlld1k6IG51bWJlciwgYXNwZWN0UmF0aW86IG51bWJlciwgek5lYXJQbGFuZTogbnVtYmVyLCB6RmFyUGxhbmU6IG51bWJlciwgZGVzdD86IG51bWJlcltdKTogbnVtYmVyW107XHJcbiAgICBjcmVhdGVWaWV3cG9ydCAod2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIsIGRlc3Q/OiBudW1iZXJbXSk6IG51bWJlcltdO1xyXG59XHJcblxyXG5tb2R1bGUgbWluZXJ2YSB7XHJcbiAgICBlbnVtIEluZGV4ZXMge1xyXG4gICAgICAgIE0xMSA9IDAsXHJcbiAgICAgICAgTTEyID0gMSxcclxuICAgICAgICBNMTMgPSAyLFxyXG4gICAgICAgIE0xNCA9IDMsXHJcbiAgICAgICAgTTIxID0gNCxcclxuICAgICAgICBNMjIgPSA1LFxyXG4gICAgICAgIE0yMyA9IDYsXHJcbiAgICAgICAgTTI0ID0gNyxcclxuICAgICAgICBNMzEgPSA4LFxyXG4gICAgICAgIE0zMiA9IDksXHJcbiAgICAgICAgTTMzID0gMTAsXHJcbiAgICAgICAgTTM0ID0gMTEsXHJcbiAgICAgICAgT2Zmc2V0WCA9IDEyLFxyXG4gICAgICAgIE9mZnNldFkgPSAxMyxcclxuICAgICAgICBPZmZzZXRaID0gMTQsXHJcbiAgICAgICAgTTQ0ID0gMTVcclxuICAgIH1cclxuXHJcbiAgICB2YXIgRkxPQVRfRVBTSUxPTiA9IDAuMDAwMDAxO1xyXG4gICAgdmFyIGNyZWF0ZVR5cGVkQXJyYXk6IChsZW5ndGg6IG51bWJlcikgPT4gbnVtYmVyW107XHJcblxyXG4gICAgaWYgKHR5cGVvZiBGbG9hdDMyQXJyYXkgIT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICBjcmVhdGVUeXBlZEFycmF5ID0gZnVuY3Rpb24gKGxlbmd0aDogbnVtYmVyKTogbnVtYmVyW10ge1xyXG4gICAgICAgICAgICByZXR1cm4gPG51bWJlcltdPjxhbnk+bmV3IEZsb2F0MzJBcnJheShsZW5ndGgpO1xyXG4gICAgICAgIH07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNyZWF0ZVR5cGVkQXJyYXkgPSBmdW5jdGlvbiAobGVuZ3RoOiBudW1iZXIpOiBudW1iZXJbXSB7XHJcbiAgICAgICAgICAgIHJldHVybiA8bnVtYmVyW10+bmV3IEFycmF5KGxlbmd0aCk7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgdmFyIG1hdDQ6IElNYXRyaXg0U3RhdGljID0ge1xyXG4gICAgICAgIGNyZWF0ZSAoc3JjPzogbnVtYmVyW10pOiBudW1iZXJbXSB7XHJcbiAgICAgICAgICAgIHZhciBkZXN0ID0gY3JlYXRlVHlwZWRBcnJheSgxNik7XHJcblxyXG4gICAgICAgICAgICBpZiAoc3JjKSB7XHJcbiAgICAgICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTExXSA9IHNyY1tJbmRleGVzLk0xMV07XHJcbiAgICAgICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTEyXSA9IHNyY1tJbmRleGVzLk0xMl07XHJcbiAgICAgICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTEzXSA9IHNyY1tJbmRleGVzLk0xM107XHJcbiAgICAgICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTE0XSA9IHNyY1tJbmRleGVzLk0xNF07XHJcbiAgICAgICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTIxXSA9IHNyY1tJbmRleGVzLk0yMV07XHJcbiAgICAgICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTIyXSA9IHNyY1tJbmRleGVzLk0yMl07XHJcbiAgICAgICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTIzXSA9IHNyY1tJbmRleGVzLk0yM107XHJcbiAgICAgICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTI0XSA9IHNyY1tJbmRleGVzLk0yNF07XHJcbiAgICAgICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTMxXSA9IHNyY1tJbmRleGVzLk0zMV07XHJcbiAgICAgICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTMyXSA9IHNyY1tJbmRleGVzLk0zMl07XHJcbiAgICAgICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTMzXSA9IHNyY1tJbmRleGVzLk0zM107XHJcbiAgICAgICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTM0XSA9IHNyY1tJbmRleGVzLk0zNF07XHJcbiAgICAgICAgICAgICAgICBkZXN0W0luZGV4ZXMuT2Zmc2V0WF0gPSBzcmNbSW5kZXhlcy5PZmZzZXRYXTtcclxuICAgICAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5PZmZzZXRZXSA9IHNyY1tJbmRleGVzLk9mZnNldFldO1xyXG4gICAgICAgICAgICAgICAgZGVzdFtJbmRleGVzLk9mZnNldFpdID0gc3JjW0luZGV4ZXMuT2Zmc2V0Wl07XHJcbiAgICAgICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTQ0XSA9IHNyY1tJbmRleGVzLk00NF07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBkZXN0O1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY29weVRvIChzcmM6IG51bWJlcltdLCBkZXN0OiBudW1iZXJbXSk6IG51bWJlcltdIHtcclxuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0xMV0gPSBzcmNbSW5kZXhlcy5NMTFdO1xyXG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTEyXSA9IHNyY1tJbmRleGVzLk0xMl07XHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMTNdID0gc3JjW0luZGV4ZXMuTTEzXTtcclxuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0xNF0gPSBzcmNbSW5kZXhlcy5NMTRdO1xyXG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTIxXSA9IHNyY1tJbmRleGVzLk0yMV07XHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMjJdID0gc3JjW0luZGV4ZXMuTTIyXTtcclxuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0yM10gPSBzcmNbSW5kZXhlcy5NMjNdO1xyXG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTI0XSA9IHNyY1tJbmRleGVzLk0yNF07XHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMzFdID0gc3JjW0luZGV4ZXMuTTMxXTtcclxuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0zMl0gPSBzcmNbSW5kZXhlcy5NMzJdO1xyXG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTMzXSA9IHNyY1tJbmRleGVzLk0zM107XHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMzRdID0gc3JjW0luZGV4ZXMuTTM0XTtcclxuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk9mZnNldFhdID0gc3JjW0luZGV4ZXMuT2Zmc2V0WF07XHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5PZmZzZXRZXSA9IHNyY1tJbmRleGVzLk9mZnNldFldO1xyXG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuT2Zmc2V0Wl0gPSBzcmNbSW5kZXhlcy5PZmZzZXRaXTtcclxuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk00NF0gPSBzcmNbSW5kZXhlcy5NNDRdO1xyXG4gICAgICAgICAgICByZXR1cm4gZGVzdDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGlkZW50aXR5IChkZXN0PzogbnVtYmVyW10pOiBudW1iZXJbXSB7XHJcbiAgICAgICAgICAgIGlmICghZGVzdCkgZGVzdCA9IG1hdDQuY3JlYXRlKCk7XHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMTFdID0gMTtcclxuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0xMl0gPSAwO1xyXG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTEzXSA9IDA7XHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMTRdID0gMDtcclxuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0yMV0gPSAwO1xyXG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTIyXSA9IDE7XHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMjNdID0gMDtcclxuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0yNF0gPSAwO1xyXG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTMxXSA9IDA7XHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMzJdID0gMDtcclxuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0zM10gPSAxO1xyXG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTM0XSA9IDA7XHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5PZmZzZXRYXSA9IDA7XHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5PZmZzZXRZXSA9IDA7XHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5PZmZzZXRaXSA9IDA7XHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NNDRdID0gMTtcclxuICAgICAgICAgICAgcmV0dXJuIGRlc3Q7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlcXVhbCAoYTogbnVtYmVyW10sIGI6IG51bWJlcltdKTogYm9vbGVhbiB7XHJcbiAgICAgICAgICAgIHJldHVybiBhID09PSBiIHx8IChcclxuICAgICAgICAgICAgICAgIE1hdGguYWJzKGFbSW5kZXhlcy5NMTFdIC0gYltJbmRleGVzLk0xMV0pIDwgRkxPQVRfRVBTSUxPTiAmJlxyXG4gICAgICAgICAgICAgICAgTWF0aC5hYnMoYVtJbmRleGVzLk0xMl0gLSBiW0luZGV4ZXMuTTEyXSkgPCBGTE9BVF9FUFNJTE9OICYmXHJcbiAgICAgICAgICAgICAgICBNYXRoLmFicyhhW0luZGV4ZXMuTTEzXSAtIGJbSW5kZXhlcy5NMTNdKSA8IEZMT0FUX0VQU0lMT04gJiZcclxuICAgICAgICAgICAgICAgIE1hdGguYWJzKGFbSW5kZXhlcy5NMTRdIC0gYltJbmRleGVzLk0xNF0pIDwgRkxPQVRfRVBTSUxPTiAmJlxyXG4gICAgICAgICAgICAgICAgTWF0aC5hYnMoYVtJbmRleGVzLk0yMV0gLSBiW0luZGV4ZXMuTTIxXSkgPCBGTE9BVF9FUFNJTE9OICYmXHJcbiAgICAgICAgICAgICAgICBNYXRoLmFicyhhW0luZGV4ZXMuTTIyXSAtIGJbSW5kZXhlcy5NMjJdKSA8IEZMT0FUX0VQU0lMT04gJiZcclxuICAgICAgICAgICAgICAgIE1hdGguYWJzKGFbSW5kZXhlcy5NMjNdIC0gYltJbmRleGVzLk0yM10pIDwgRkxPQVRfRVBTSUxPTiAmJlxyXG4gICAgICAgICAgICAgICAgTWF0aC5hYnMoYVtJbmRleGVzLk0yNF0gLSBiW0luZGV4ZXMuTTI0XSkgPCBGTE9BVF9FUFNJTE9OICYmXHJcbiAgICAgICAgICAgICAgICBNYXRoLmFicyhhW0luZGV4ZXMuTTMxXSAtIGJbSW5kZXhlcy5NMzFdKSA8IEZMT0FUX0VQU0lMT04gJiZcclxuICAgICAgICAgICAgICAgIE1hdGguYWJzKGFbSW5kZXhlcy5NMzJdIC0gYltJbmRleGVzLk0zMl0pIDwgRkxPQVRfRVBTSUxPTiAmJlxyXG4gICAgICAgICAgICAgICAgTWF0aC5hYnMoYVtJbmRleGVzLk0zM10gLSBiW0luZGV4ZXMuTTMzXSkgPCBGTE9BVF9FUFNJTE9OICYmXHJcbiAgICAgICAgICAgICAgICBNYXRoLmFicyhhW0luZGV4ZXMuTTM0XSAtIGJbSW5kZXhlcy5NMzRdKSA8IEZMT0FUX0VQU0lMT04gJiZcclxuICAgICAgICAgICAgICAgIE1hdGguYWJzKGFbSW5kZXhlcy5PZmZzZXRYXSAtIGJbSW5kZXhlcy5PZmZzZXRYXSkgPCBGTE9BVF9FUFNJTE9OICYmXHJcbiAgICAgICAgICAgICAgICBNYXRoLmFicyhhW0luZGV4ZXMuT2Zmc2V0WV0gLSBiW0luZGV4ZXMuT2Zmc2V0WV0pIDwgRkxPQVRfRVBTSUxPTiAmJlxyXG4gICAgICAgICAgICAgICAgTWF0aC5hYnMoYVtJbmRleGVzLk9mZnNldFpdIC0gYltJbmRleGVzLk9mZnNldFpdKSA8IEZMT0FUX0VQU0lMT04gJiZcclxuICAgICAgICAgICAgICAgIE1hdGguYWJzKGFbSW5kZXhlcy5NNDRdIC0gYltJbmRleGVzLk00NF0pIDwgRkxPQVRfRVBTSUxPTlxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG11bHRpcGx5IChhOiBudW1iZXJbXSwgYjogbnVtYmVyW10sIGRlc3Q/OiBudW1iZXJbXSk6IG51bWJlcltdIHtcclxuICAgICAgICAgICAgaWYgKCFkZXN0KSBkZXN0ID0gYTtcclxuICAgICAgICAgICAgdmFyIG0xMSA9IGFbSW5kZXhlcy5NMTFdLCBtMTIgPSBhW0luZGV4ZXMuTTEyXSwgbTEzID0gYVtJbmRleGVzLk0xM10sIG0xNCA9IGFbSW5kZXhlcy5NMTRdLFxyXG4gICAgICAgICAgICAgICAgbTIxID0gYVtJbmRleGVzLk0yMV0sIG0yMiA9IGFbSW5kZXhlcy5NMjJdLCBtMjMgPSBhW0luZGV4ZXMuTTIzXSwgbTI0ID0gYVtJbmRleGVzLk0yNF0sXHJcbiAgICAgICAgICAgICAgICBtMzEgPSBhW0luZGV4ZXMuTTMxXSwgbTMyID0gYVtJbmRleGVzLk0zMl0sIG0zMyA9IGFbSW5kZXhlcy5NMzNdLCBtMzQgPSBhW0luZGV4ZXMuTTM0XSxcclxuICAgICAgICAgICAgICAgIG14MCA9IGFbSW5kZXhlcy5PZmZzZXRYXSwgbXkwID0gYVtJbmRleGVzLk9mZnNldFldLCBtejAgPSBhW0luZGV4ZXMuT2Zmc2V0Wl0sIG00NCA9IGFbSW5kZXhlcy5NNDRdO1xyXG5cclxuICAgICAgICAgICAgdmFyIG4xMSA9IGJbSW5kZXhlcy5NMTFdLCBuMTIgPSBiW0luZGV4ZXMuTTEyXSwgbjEzID0gYltJbmRleGVzLk0xM10sIG4xNCA9IGJbSW5kZXhlcy5NMTRdLFxyXG4gICAgICAgICAgICAgICAgbjIxID0gYltJbmRleGVzLk0yMV0sIG4yMiA9IGJbSW5kZXhlcy5NMjJdLCBuMjMgPSBiW0luZGV4ZXMuTTIzXSwgbjI0ID0gYltJbmRleGVzLk0yNF0sXHJcbiAgICAgICAgICAgICAgICBuMzEgPSBiW0luZGV4ZXMuTTMxXSwgbjMyID0gYltJbmRleGVzLk0zMl0sIG4zMyA9IGJbSW5kZXhlcy5NMzNdLCBuMzQgPSBiW0luZGV4ZXMuTTM0XSxcclxuICAgICAgICAgICAgICAgIG54MCA9IGJbSW5kZXhlcy5PZmZzZXRYXSwgbnkwID0gYltJbmRleGVzLk9mZnNldFldLCBuejAgPSBiW0luZGV4ZXMuT2Zmc2V0Wl0sIG40NCA9IGJbSW5kZXhlcy5NNDRdO1xyXG5cclxuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0xMV0gPSBtMTEgKiBuMTEgKyBtMTIgKiBuMjEgKyBtMTMgKiBuMzEgKyBtMTQgKiBueDA7XHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMTJdID0gbTExICogbjEyICsgbTEyICogbjIyICsgbTEzICogbjMyICsgbTE0ICogbnkwO1xyXG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTEzXSA9IG0xMSAqIG4xMyArIG0xMiAqIG4yMyArIG0xMyAqIG4zMyArIG0xNCAqIG56MDtcclxuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0xNF0gPSBtMTEgKiBuMTQgKyBtMTIgKiBuMjQgKyBtMTMgKiBuMzQgKyBtMTQgKiBuNDQ7XHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMjFdID0gbTIxICogbjExICsgbTIyICogbjIxICsgbTIzICogbjMxICsgbTI0ICogbngwO1xyXG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTIyXSA9IG0yMSAqIG4xMiArIG0yMiAqIG4yMiArIG0yMyAqIG4zMiArIG0yNCAqIG55MDtcclxuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0yM10gPSBtMjEgKiBuMTMgKyBtMjIgKiBuMjMgKyBtMjMgKiBuMzMgKyBtMjQgKiBuejA7XHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMjRdID0gbTIxICogbjE0ICsgbTIyICogbjI0ICsgbTIzICogbjM0ICsgbTI0ICogbjQ0O1xyXG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTMxXSA9IG0zMSAqIG4xMSArIG0zMiAqIG4yMSArIG0zMyAqIG4zMSArIG0zNCAqIG54MDtcclxuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0zMl0gPSBtMzEgKiBuMTIgKyBtMzIgKiBuMjIgKyBtMzMgKiBuMzIgKyBtMzQgKiBueTA7XHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMzNdID0gbTMxICogbjEzICsgbTMyICogbjIzICsgbTMzICogbjMzICsgbTM0ICogbnowO1xyXG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTM0XSA9IG0zMSAqIG4xNCArIG0zMiAqIG4yNCArIG0zMyAqIG4zNCArIG0zNCAqIG40NDtcclxuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk9mZnNldFhdID0gbXgwICogbjExICsgbXkwICogbjIxICsgbXowICogbjMxICsgbTQ0ICogbngwO1xyXG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuT2Zmc2V0WV0gPSBteDAgKiBuMTIgKyBteTAgKiBuMjIgKyBtejAgKiBuMzIgKyBtNDQgKiBueTA7XHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5PZmZzZXRaXSA9IG14MCAqIG4xMyArIG15MCAqIG4yMyArIG16MCAqIG4zMyArIG00NCAqIG56MDtcclxuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk00NF0gPSBteDAgKiBuMTQgKyBteTAgKiBuMjQgKyBtejAgKiBuMzQgKyBtNDQgKiBuNDQ7XHJcbiAgICAgICAgICAgIHJldHVybiBkZXN0O1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaW52ZXJzZSAobWF0OiBudW1iZXJbXSwgZGVzdD86IG51bWJlcltdKTogbnVtYmVyW10ge1xyXG4gICAgICAgICAgICBpZiAoIWRlc3QpIGRlc3QgPSBtYXQ7XHJcblxyXG4gICAgICAgICAgICAvLyBDYWNoZSB0aGUgbWF0cml4IHZhbHVlcyAobWFrZXMgZm9yIGh1Z2Ugc3BlZWQgaW5jcmVhc2VzISlcclxuICAgICAgICAgICAgdmFyIGEwMCA9IG1hdFtJbmRleGVzLk0xMV0sIGEwMSA9IG1hdFtJbmRleGVzLk0xMl0sIGEwMiA9IG1hdFtJbmRleGVzLk0xM10sIGEwMyA9IG1hdFtJbmRleGVzLk0xNF0sXHJcbiAgICAgICAgICAgICAgICBhMTAgPSBtYXRbSW5kZXhlcy5NMjFdLCBhMTEgPSBtYXRbSW5kZXhlcy5NMjJdLCBhMTIgPSBtYXRbSW5kZXhlcy5NMjNdLCBhMTMgPSBtYXRbSW5kZXhlcy5NMjRdLFxyXG4gICAgICAgICAgICAgICAgYTIwID0gbWF0W0luZGV4ZXMuTTMxXSwgYTIxID0gbWF0W0luZGV4ZXMuTTMyXSwgYTIyID0gbWF0W0luZGV4ZXMuTTMzXSwgYTIzID0gbWF0W0luZGV4ZXMuTTM0XSxcclxuICAgICAgICAgICAgICAgIGEzMCA9IG1hdFtJbmRleGVzLk9mZnNldFhdLCBhMzEgPSBtYXRbSW5kZXhlcy5PZmZzZXRZXSwgYTMyID0gbWF0W0luZGV4ZXMuT2Zmc2V0Wl0sIGEzMyA9IG1hdFtJbmRleGVzLk00NF0sXHJcblxyXG4gICAgICAgICAgICAgICAgYjAwID0gYTAwICogYTExIC0gYTAxICogYTEwLFxyXG4gICAgICAgICAgICAgICAgYjAxID0gYTAwICogYTEyIC0gYTAyICogYTEwLFxyXG4gICAgICAgICAgICAgICAgYjAyID0gYTAwICogYTEzIC0gYTAzICogYTEwLFxyXG4gICAgICAgICAgICAgICAgYjAzID0gYTAxICogYTEyIC0gYTAyICogYTExLFxyXG4gICAgICAgICAgICAgICAgYjA0ID0gYTAxICogYTEzIC0gYTAzICogYTExLFxyXG4gICAgICAgICAgICAgICAgYjA1ID0gYTAyICogYTEzIC0gYTAzICogYTEyLFxyXG4gICAgICAgICAgICAgICAgYjA2ID0gYTIwICogYTMxIC0gYTIxICogYTMwLFxyXG4gICAgICAgICAgICAgICAgYjA3ID0gYTIwICogYTMyIC0gYTIyICogYTMwLFxyXG4gICAgICAgICAgICAgICAgYjA4ID0gYTIwICogYTMzIC0gYTIzICogYTMwLFxyXG4gICAgICAgICAgICAgICAgYjA5ID0gYTIxICogYTMyIC0gYTIyICogYTMxLFxyXG4gICAgICAgICAgICAgICAgYjEwID0gYTIxICogYTMzIC0gYTIzICogYTMxLFxyXG4gICAgICAgICAgICAgICAgYjExID0gYTIyICogYTMzIC0gYTIzICogYTMyO1xyXG5cclxuICAgICAgICAgICAgdmFyIGQgPSAoYjAwICogYjExIC0gYjAxICogYjEwICsgYjAyICogYjA5ICsgYjAzICogYjA4IC0gYjA0ICogYjA3ICsgYjA1ICogYjA2KTtcclxuICAgICAgICAgICAgaWYgKCFpc0Zpbml0ZShkKSB8fCAhZClcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB2YXIgaWQgPSAxIC8gZDtcclxuXHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMTFdID0gKGExMSAqIGIxMSAtIGExMiAqIGIxMCArIGExMyAqIGIwOSkgKiBpZDtcclxuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0xMl0gPSAoLWEwMSAqIGIxMSArIGEwMiAqIGIxMCAtIGEwMyAqIGIwOSkgKiBpZDtcclxuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0xM10gPSAoYTMxICogYjA1IC0gYTMyICogYjA0ICsgYTMzICogYjAzKSAqIGlkO1xyXG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTE0XSA9ICgtYTIxICogYjA1ICsgYTIyICogYjA0IC0gYTIzICogYjAzKSAqIGlkO1xyXG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTIxXSA9ICgtYTEwICogYjExICsgYTEyICogYjA4IC0gYTEzICogYjA3KSAqIGlkO1xyXG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTIyXSA9IChhMDAgKiBiMTEgLSBhMDIgKiBiMDggKyBhMDMgKiBiMDcpICogaWQ7XHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMjNdID0gKC1hMzAgKiBiMDUgKyBhMzIgKiBiMDIgLSBhMzMgKiBiMDEpICogaWQ7XHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMjRdID0gKGEyMCAqIGIwNSAtIGEyMiAqIGIwMiArIGEyMyAqIGIwMSkgKiBpZDtcclxuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0zMV0gPSAoYTEwICogYjEwIC0gYTExICogYjA4ICsgYTEzICogYjA2KSAqIGlkO1xyXG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTMyXSA9ICgtYTAwICogYjEwICsgYTAxICogYjA4IC0gYTAzICogYjA2KSAqIGlkO1xyXG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTMzXSA9IChhMzAgKiBiMDQgLSBhMzEgKiBiMDIgKyBhMzMgKiBiMDApICogaWQ7XHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMzRdID0gKC1hMjAgKiBiMDQgKyBhMjEgKiBiMDIgLSBhMjMgKiBiMDApICogaWQ7XHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5PZmZzZXRYXSA9ICgtYTEwICogYjA5ICsgYTExICogYjA3IC0gYTEyICogYjA2KSAqIGlkO1xyXG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuT2Zmc2V0WV0gPSAoYTAwICogYjA5IC0gYTAxICogYjA3ICsgYTAyICogYjA2KSAqIGlkO1xyXG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuT2Zmc2V0Wl0gPSAoLWEzMCAqIGIwMyArIGEzMSAqIGIwMSAtIGEzMiAqIGIwMCkgKiBpZDtcclxuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk00NF0gPSAoYTIwICogYjAzIC0gYTIxICogYjAxICsgYTIyICogYjAwKSAqIGlkO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGRlc3Q7XHJcbiAgICAgICAgfSxcclxuICAgICAgICB0cmFuc3Bvc2UgKG1hdDogbnVtYmVyW10sIGRlc3Q/OiBudW1iZXJbXSk6IG51bWJlcltdIHtcclxuICAgICAgICAgICAgaWYgKCFkZXN0KSBkZXN0ID0gbWF0O1xyXG5cclxuICAgICAgICAgICAgdmFyIGEwMCA9IG1hdFtJbmRleGVzLk0xMV0sIGEwMSA9IG1hdFtJbmRleGVzLk0xMl0sIGEwMiA9IG1hdFtJbmRleGVzLk0xM10sIGEwMyA9IG1hdFtJbmRleGVzLk0xNF0sXHJcbiAgICAgICAgICAgICAgICBhMTAgPSBtYXRbSW5kZXhlcy5NMjFdLCBhMTEgPSBtYXRbSW5kZXhlcy5NMjJdLCBhMTIgPSBtYXRbSW5kZXhlcy5NMjNdLCBhMTMgPSBtYXRbSW5kZXhlcy5NMjRdLFxyXG4gICAgICAgICAgICAgICAgYTIwID0gbWF0W0luZGV4ZXMuTTMxXSwgYTIxID0gbWF0W0luZGV4ZXMuTTMyXSwgYTIyID0gbWF0W0luZGV4ZXMuTTMzXSwgYTIzID0gbWF0W0luZGV4ZXMuTTM0XSxcclxuICAgICAgICAgICAgICAgIGEzMCA9IG1hdFtJbmRleGVzLk9mZnNldFhdLCBhMzEgPSBtYXRbSW5kZXhlcy5PZmZzZXRZXSwgYTMyID0gbWF0W0luZGV4ZXMuT2Zmc2V0Wl0sIGEzMyA9IG1hdFtJbmRleGVzLk00NF07XHJcblxyXG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTExXSA9IGEwMDsgZGVzdFtJbmRleGVzLk0yMV0gPSBhMDE7IGRlc3RbSW5kZXhlcy5NMzFdID0gYTAyOyBkZXN0W0luZGV4ZXMuT2Zmc2V0WF0gPSBhMDM7XHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMTJdID0gYTEwOyBkZXN0W0luZGV4ZXMuTTIyXSA9IGExMTsgZGVzdFtJbmRleGVzLk0zMl0gPSBhMTI7IGRlc3RbSW5kZXhlcy5PZmZzZXRZXSA9IGExMztcclxuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0xM10gPSBhMjA7IGRlc3RbSW5kZXhlcy5NMjNdID0gYTIxOyBkZXN0W0luZGV4ZXMuTTMzXSA9IGEyMjsgZGVzdFtJbmRleGVzLk9mZnNldFpdID0gYTIzO1xyXG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTE0XSA9IGEzMDsgZGVzdFtJbmRleGVzLk0yNF0gPSBhMzE7IGRlc3RbSW5kZXhlcy5NMzRdID0gYTMyOyBkZXN0W0luZGV4ZXMuTTQ0XSA9IGEzMztcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBkZXN0O1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdHJhbnNmb3JtVmVjNCAobWF0OiBudW1iZXJbXSwgdmVjOiBudW1iZXJbXSwgZGVzdD86IG51bWJlcltdKTogbnVtYmVyW10ge1xyXG4gICAgICAgICAgICBpZiAoIWRlc3QpIGRlc3QgPSB2ZWM7XHJcblxyXG4gICAgICAgICAgICB2YXIgeCA9IHZlY1swXSwgeSA9IHZlY1sxXSwgeiA9IHZlY1syXSwgdyA9IHZlY1szXTtcclxuXHJcbiAgICAgICAgICAgIHZhciBtMTEgPSBtYXRbSW5kZXhlcy5NMTFdLCBtMTIgPSBtYXRbSW5kZXhlcy5NMTJdLCBtMTMgPSBtYXRbSW5kZXhlcy5NMTNdLCBtMTQgPSBtYXRbSW5kZXhlcy5NMTRdLFxyXG4gICAgICAgICAgICAgICAgbTIxID0gbWF0W0luZGV4ZXMuTTIxXSwgbTIyID0gbWF0W0luZGV4ZXMuTTIyXSwgbTIzID0gbWF0W0luZGV4ZXMuTTIzXSwgbTI0ID0gbWF0W0luZGV4ZXMuTTI0XSxcclxuICAgICAgICAgICAgICAgIG0zMSA9IG1hdFtJbmRleGVzLk0zMV0sIG0zMiA9IG1hdFtJbmRleGVzLk0zMl0sIG0zMyA9IG1hdFtJbmRleGVzLk0zM10sIG0zNCA9IG1hdFtJbmRleGVzLk0zNF0sXHJcbiAgICAgICAgICAgICAgICBteDAgPSBtYXRbSW5kZXhlcy5PZmZzZXRYXSwgbXkwID0gbWF0W0luZGV4ZXMuT2Zmc2V0WV0sIG16MCA9IG1hdFtJbmRleGVzLk9mZnNldFpdLCBtNDQgPSBtYXRbSW5kZXhlcy5NNDRdO1xyXG5cclxuICAgICAgICAgICAgZGVzdFswXSA9IG0xMSAqIHggKyBtMTIgKiB5ICsgbTEzICogeiArIG0xNCAqIHc7XHJcbiAgICAgICAgICAgIGRlc3RbMV0gPSBtMjEgKiB4ICsgbTIyICogeSArIG0yMyAqIHogKyBtMjQgKiB3O1xyXG4gICAgICAgICAgICBkZXN0WzJdID0gbTMxICogeCArIG0zMiAqIHkgKyBtMzMgKiB6ICsgbTM0ICogdztcclxuICAgICAgICAgICAgZGVzdFszXSA9IG14MCAqIHggKyBteTAgKiB5ICsgbXowICogeiArIG00NCAqIHc7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gZGVzdDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBjcmVhdGVUcmFuc2xhdGUgKHg6IG51bWJlciwgeTogbnVtYmVyLCB6OiBudW1iZXIsIGRlc3Q/OiBudW1iZXJbXSk6IG51bWJlcltdIHtcclxuICAgICAgICAgICAgaWYgKCFkZXN0KSBkZXN0ID0gbWF0NC5jcmVhdGUoKTtcclxuXHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMTFdID0gMTtcclxuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0xMl0gPSAwO1xyXG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTEzXSA9IDA7XHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMTRdID0gMDtcclxuXHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMjFdID0gMDtcclxuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0yMl0gPSAxO1xyXG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTIzXSA9IDA7XHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMjRdID0gMDtcclxuXHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMzFdID0gMDtcclxuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0zMl0gPSAwO1xyXG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTMzXSA9IDE7XHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMzRdID0gMDtcclxuXHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5PZmZzZXRYXSA9IHg7XHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5PZmZzZXRZXSA9IHk7XHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5PZmZzZXRaXSA9IHo7XHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NNDRdID0gMTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBkZXN0O1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY3JlYXRlU2NhbGUgKHg6IG51bWJlciwgeTogbnVtYmVyLCB6OiBudW1iZXIsIGRlc3Q/OiBudW1iZXJbXSk6IG51bWJlcltdIHtcclxuICAgICAgICAgICAgaWYgKCFkZXN0KSBkZXN0ID0gbWF0NC5jcmVhdGUoKTtcclxuXHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMTFdID0geDtcclxuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0xMl0gPSAwO1xyXG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTEzXSA9IDA7XHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMTRdID0gMDtcclxuXHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMTFdID0gMDtcclxuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0xMl0gPSB5O1xyXG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTEzXSA9IDA7XHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMTRdID0gMDtcclxuXHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMzFdID0gMDtcclxuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0zMl0gPSAwO1xyXG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTMzXSA9IHo7XHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMzRdID0gMDtcclxuXHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5PZmZzZXRYXSA9IDA7XHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5PZmZzZXRZXSA9IDA7XHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5PZmZzZXRaXSA9IDA7XHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NNDRdID0gMTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBkZXN0O1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY3JlYXRlUm90YXRlWCAodGhldGE6IG51bWJlciwgZGVzdD86IG51bWJlcltdKTogbnVtYmVyW10ge1xyXG4gICAgICAgICAgICBpZiAoIWRlc3QpIGRlc3QgPSBtYXQ0LmNyZWF0ZSgpO1xyXG5cclxuICAgICAgICAgICAgdmFyIHMgPSBNYXRoLnNpbih0aGV0YSk7XHJcbiAgICAgICAgICAgIHZhciBjID0gTWF0aC5jb3ModGhldGEpO1xyXG5cclxuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0xMV0gPSAxO1xyXG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTEyXSA9IDA7XHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMTNdID0gMDtcclxuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0xNF0gPSAwO1xyXG5cclxuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0yMV0gPSAwO1xyXG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTIyXSA9IGM7XHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMjNdID0gcztcclxuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0yNF0gPSAwO1xyXG5cclxuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0zMV0gPSAwO1xyXG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTMyXSA9IC1zO1xyXG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTMzXSA9IGM7XHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMzRdID0gMDtcclxuXHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5PZmZzZXRYXSA9IDA7XHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5PZmZzZXRZXSA9IDA7XHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5PZmZzZXRaXSA9IDA7XHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NNDRdID0gMTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBkZXN0O1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY3JlYXRlUm90YXRlWSAodGhldGE6IG51bWJlciwgZGVzdD86IG51bWJlcltdKTogbnVtYmVyW10ge1xyXG4gICAgICAgICAgICBpZiAoIWRlc3QpIGRlc3QgPSBtYXQ0LmNyZWF0ZSgpO1xyXG5cclxuICAgICAgICAgICAgdmFyIHMgPSBNYXRoLnNpbih0aGV0YSk7XHJcbiAgICAgICAgICAgIHZhciBjID0gTWF0aC5jb3ModGhldGEpO1xyXG5cclxuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0xMV0gPSBjO1xyXG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTEyXSA9IDA7XHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMTNdID0gLXM7XHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMTRdID0gMDtcclxuXHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMjFdID0gMDtcclxuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0yMl0gPSAxO1xyXG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTIzXSA9IDA7XHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMjRdID0gMDtcclxuXHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMzFdID0gcztcclxuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0zMl0gPSAwO1xyXG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTMzXSA9IGM7XHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMzRdID0gMDtcclxuXHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5PZmZzZXRYXSA9IDA7XHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5PZmZzZXRZXSA9IDA7XHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5PZmZzZXRaXSA9IDA7XHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NNDRdID0gMTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBkZXN0O1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY3JlYXRlUm90YXRlWiAodGhldGE6IG51bWJlciwgZGVzdD86IG51bWJlcltdKTogbnVtYmVyW10ge1xyXG4gICAgICAgICAgICBpZiAoIWRlc3QpIGRlc3QgPSBtYXQ0LmNyZWF0ZSgpO1xyXG5cclxuICAgICAgICAgICAgdmFyIHMgPSBNYXRoLnNpbih0aGV0YSk7XHJcbiAgICAgICAgICAgIHZhciBjID0gTWF0aC5jb3ModGhldGEpO1xyXG5cclxuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0xMV0gPSBjO1xyXG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTEyXSA9IHM7XHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMTNdID0gMDtcclxuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0xNF0gPSAwO1xyXG5cclxuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0yMV0gPSAtcztcclxuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0yMl0gPSBjO1xyXG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTIzXSA9IDA7XHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMjRdID0gMDtcclxuXHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMzFdID0gMDtcclxuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0zMl0gPSAwO1xyXG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTMzXSA9IDE7XHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMzRdID0gMDtcclxuXHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5PZmZzZXRYXSA9IDA7XHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5PZmZzZXRZXSA9IDA7XHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5PZmZzZXRaXSA9IDA7XHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NNDRdID0gMTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBkZXN0O1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGNyZWF0ZVBlcnNwZWN0aXZlIChmaWVsZE9mVmlld1k6IG51bWJlciwgYXNwZWN0UmF0aW86IG51bWJlciwgek5lYXJQbGFuZTogbnVtYmVyLCB6RmFyUGxhbmU6IG51bWJlciwgZGVzdD86IG51bWJlcltdKTogbnVtYmVyW10ge1xyXG4gICAgICAgICAgICBpZiAoIWRlc3QpIGRlc3QgPSBtYXQ0LmNyZWF0ZSgpO1xyXG5cclxuICAgICAgICAgICAgdmFyIGhlaWdodCA9IDEuMCAvIE1hdGgudGFuKGZpZWxkT2ZWaWV3WSAvIDIuMCk7XHJcbiAgICAgICAgICAgIHZhciB3aWR0aCA9IGhlaWdodCAvIGFzcGVjdFJhdGlvO1xyXG4gICAgICAgICAgICB2YXIgZCA9IHpOZWFyUGxhbmUgLSB6RmFyUGxhbmU7XHJcblxyXG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTExXSA9IHdpZHRoO1xyXG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTEyXSA9IDA7XHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMTNdID0gMDtcclxuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0xNF0gPSAwO1xyXG5cclxuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0yMV0gPSAwO1xyXG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTIyXSA9IGhlaWdodDtcclxuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0yM10gPSAwO1xyXG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTI0XSA9IDA7XHJcblxyXG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTMxXSA9IDA7XHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMzJdID0gMDtcclxuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0zM10gPSB6RmFyUGxhbmUgLyBkO1xyXG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTM0XSA9IC0xLjA7XHJcblxyXG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuT2Zmc2V0WF0gPSAwO1xyXG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuT2Zmc2V0WV0gPSAwO1xyXG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuT2Zmc2V0Wl0gPSB6TmVhclBsYW5lICogekZhclBsYW5lIC8gZDtcclxuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk00NF0gPSAwLjA7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gZGVzdDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGNyZWF0ZVZpZXdwb3J0ICh3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlciwgZGVzdD86IG51bWJlcltdKTogbnVtYmVyW10ge1xyXG4gICAgICAgICAgICBpZiAoIWRlc3QpIGRlc3QgPSBtYXQ0LmNyZWF0ZSgpO1xyXG5cclxuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0xMV0gPSB3aWR0aCAvIDIuMDtcclxuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0xMl0gPSAwO1xyXG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTEzXSA9IDA7XHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMTRdID0gMDtcclxuXHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMjFdID0gMDtcclxuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0yMl0gPSAtaGVpZ2h0IC8gMi4wO1xyXG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTIzXSA9IDA7XHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMjRdID0gMDtcclxuXHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMzFdID0gMDtcclxuICAgICAgICAgICAgZGVzdFtJbmRleGVzLk0zMl0gPSAwO1xyXG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuTTMzXSA9IDE7XHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NMzRdID0gMDtcclxuXHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5PZmZzZXRYXSA9IHdpZHRoIC8gMi4wO1xyXG4gICAgICAgICAgICBkZXN0W0luZGV4ZXMuT2Zmc2V0WV0gPSBoZWlnaHQgLyAyLjA7XHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5PZmZzZXRaXSA9IDA7XHJcbiAgICAgICAgICAgIGRlc3RbSW5kZXhlcy5NNDRdID0gMTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBkZXN0O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1cclxuXHJcbnZhciBtYXQ0ID0gbWluZXJ2YS5tYXQ0OyIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9SZWN0XCIgLz5cclxuXHJcbm1vZHVsZSBtaW5lcnZhIHtcclxuICAgIFJlY3QudHJhbnNmb3JtNCA9IGZ1bmN0aW9uIChkZXN0OiBSZWN0LCBwcm9qZWN0aW9uOiBudW1iZXJbXSkge1xyXG4gICAgICAgIGNvbnNvbGUud2FybihcIltSZWN0LnRyYW5zZm9ybTRdIE5vdCBpbXBsZW1lbnRlZFwiKTtcclxuICAgICAgICAvKlxyXG4gICAgICAgIGlmICghcHJvamVjdGlvbilcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgICB2YXIgeCA9IGRlc3QueDtcclxuICAgICAgICB2YXIgeSA9IGRlc3QueTtcclxuICAgICAgICB2YXIgd2lkdGggPSBkZXN0LndpZHRoO1xyXG4gICAgICAgIHZhciBoZWlnaHQgPSBkZXN0LmhlaWdodDtcclxuXHJcbiAgICAgICAgdmFyIHAxID0gdmVjNC5jcmVhdGUoeCwgeSwgMC4wLCAxLjApO1xyXG4gICAgICAgIHZhciBwMiA9IHZlYzQuY3JlYXRlKHggKyB3aWR0aCwgeSwgMC4wLCAxLjApO1xyXG4gICAgICAgIHZhciBwMyA9IHZlYzQuY3JlYXRlKHggKyB3aWR0aCwgeSArIGhlaWdodCwgMC4wLCAxLjApO1xyXG4gICAgICAgIHZhciBwNCA9IHZlYzQuY3JlYXRlKHgsIHkgKyBoZWlnaHQsIDAuMCwgMS4wKTtcclxuXHJcbiAgICAgICAgbWF0NC50cmFuc2Zvcm1WZWM0KHByb2plY3Rpb24sIHAxKTtcclxuICAgICAgICBtYXQ0LnRyYW5zZm9ybVZlYzQocHJvamVjdGlvbiwgcDIpO1xyXG4gICAgICAgIG1hdDQudHJhbnNmb3JtVmVjNChwcm9qZWN0aW9uLCBwMyk7XHJcbiAgICAgICAgbWF0NC50cmFuc2Zvcm1WZWM0KHByb2plY3Rpb24sIHA0KTtcclxuXHJcbiAgICAgICAgdmFyIHZzID0gNjU1MzYuMDtcclxuICAgICAgICB2YXIgdnNyID0gMS4wIC8gdnM7XHJcbiAgICAgICAgcDFbMF0gKj0gdnNyO1xyXG4gICAgICAgIHAxWzFdICo9IHZzcjtcclxuICAgICAgICBwMlswXSAqPSB2c3I7XHJcbiAgICAgICAgcDJbMV0gKj0gdnNyO1xyXG4gICAgICAgIHAzWzBdICo9IHZzcjtcclxuICAgICAgICBwM1sxXSAqPSB2c3I7XHJcbiAgICAgICAgcDRbMF0gKj0gdnNyO1xyXG4gICAgICAgIHA0WzFdICo9IHZzcjtcclxuXHJcbiAgICAgICAgdmFyIGNtMSA9IGNsaXBtYXNrKHAxKTtcclxuICAgICAgICB2YXIgY20yID0gY2xpcG1hc2socDIpO1xyXG4gICAgICAgIHZhciBjbTMgPSBjbGlwbWFzayhwMyk7XHJcbiAgICAgICAgdmFyIGNtNCA9IGNsaXBtYXNrKHA0KTtcclxuXHJcbiAgICAgICAgaWYgKChjbTEgfCBjbTIgfCBjbTMgfCBjbTQpICE9PSAwKSB7XHJcbiAgICAgICAgICAgIGlmICgoY20xICYgY20yICYgY20zICYgY200KSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgZGVzdC54ID0gZGVzdC55ID0gZGVzdC53aWR0aCA9IGRlc3QuaGVpZ2h0ID0gMDtcclxuICAgICAgICAgICAgICAgIC8vVE9ETzogSW1wbGVtZW50XHJcbiAgICAgICAgICAgICAgICAvL3ZhciByMSA9IE1hdHJpeDNELl9DbGlwVG9Cb3VuZHMocDEsIHAyLCBwMywgY20xIHwgY20yIHwgY20zKTtcclxuICAgICAgICAgICAgICAgIC8vdmFyIHIyID0gTWF0cml4M0QuX0NsaXBUb0JvdW5kcyhwMSwgcDMsIHA0LCBjbTEgfCBjbTMgfCBjbTQpO1xyXG4gICAgICAgICAgICAgICAgLy9pZiAoIXIxLklzRW1wdHkoKSkgcmVjdC51bmlvbihkZXN0LCByMSk7XHJcbiAgICAgICAgICAgICAgICAvL2lmICghcjIuSXNFbXB0eSgpKSByZWN0LnVuaW9uKGRlc3QsIHIyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciBwMXcgPSAxLjAgLyBwMVszXTtcclxuICAgICAgICAgICAgdmFyIHAydyA9IDEuMCAvIHAyWzNdO1xyXG4gICAgICAgICAgICB2YXIgcDN3ID0gMS4wIC8gcDNbM107XHJcbiAgICAgICAgICAgIHZhciBwNHcgPSAxLjAgLyBwNFszXTtcclxuICAgICAgICAgICAgcDFbMF0gKj0gcDF3ICogdnM7XHJcbiAgICAgICAgICAgIHAxWzFdICo9IHAxdyAqIHZzO1xyXG4gICAgICAgICAgICBwMlswXSAqPSBwMncgKiB2cztcclxuICAgICAgICAgICAgcDJbMV0gKj0gcDJ3ICogdnM7XHJcbiAgICAgICAgICAgIHAzWzBdICo9IHAzdyAqIHZzO1xyXG4gICAgICAgICAgICBwM1sxXSAqPSBwM3cgKiB2cztcclxuICAgICAgICAgICAgcDRbMF0gKj0gcDR3ICogdnM7XHJcbiAgICAgICAgICAgIHA0WzFdICo9IHA0dyAqIHZzO1xyXG5cclxuICAgICAgICAgICAgZGVzdC54ID0gcDFbMF07XHJcbiAgICAgICAgICAgIGRlc3QueSA9IHAxWzFdO1xyXG4gICAgICAgICAgICBkZXN0LndpZHRoID0gMDtcclxuICAgICAgICAgICAgZGVzdC5oZWlnaHQgPSAwO1xyXG4gICAgICAgICAgICBSZWN0LmV4dGVuZFRvKGRlc3QsIHAyWzBdLCBwMlsxXSk7XHJcbiAgICAgICAgICAgIFJlY3QuZXh0ZW5kVG8oZGVzdCwgcDNbMF0sIHAzWzFdKTtcclxuICAgICAgICAgICAgUmVjdC5leHRlbmRUbyhkZXN0LCBwNFswXSwgcDRbMV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICAqL1xyXG4gICAgfTtcclxuXHJcbiAgICBmdW5jdGlvbiBjbGlwbWFzayAoY2xpcDogbnVtYmVyW10pOiBudW1iZXIge1xyXG4gICAgICAgIHZhciBtYXNrID0gMDtcclxuXHJcbiAgICAgICAgaWYgKC1jbGlwWzBdICsgY2xpcFszXSA8IDApIG1hc2sgfD0gKDEgPDwgMCk7XHJcbiAgICAgICAgaWYgKGNsaXBbMF0gKyBjbGlwWzNdIDwgMCkgbWFzayB8PSAoMSA8PCAxKTtcclxuICAgICAgICBpZiAoLWNsaXBbMV0gKyBjbGlwWzNdIDwgMCkgbWFzayB8PSAoMSA8PCAyKTtcclxuICAgICAgICBpZiAoY2xpcFsxXSArIGNsaXBbM10gPCAwKSBtYXNrIHw9ICgxIDw8IDMpO1xyXG4gICAgICAgIGlmIChjbGlwWzJdICsgY2xpcFszXSA8IDApIG1hc2sgfD0gKDEgPDwgNCk7XHJcbiAgICAgICAgaWYgKC1jbGlwWzJdICsgY2xpcFszXSA8IDApIG1hc2sgfD0gKDEgPDwgNSk7XHJcblxyXG4gICAgICAgIHJldHVybiBtYXNrO1xyXG4gICAgfVxyXG59IiwiaW50ZXJmYWNlIElWZWN0b3I0U3RhdGljIHtcclxuICAgIGNyZWF0ZSh4OiBudW1iZXIsIHk6IG51bWJlciwgejogbnVtYmVyLCB3OiBudW1iZXIpOiBudW1iZXJbXTtcclxuICAgIGluaXQoeDogbnVtYmVyLCB5OiBudW1iZXIsIHo6IG51bWJlciwgdzogbnVtYmVyLCBkZXN0PzogbnVtYmVyW10pOiBudW1iZXJbXTtcclxufVxyXG5tb2R1bGUgbWluZXJ2YSB7XHJcbiAgICB2YXIgY3JlYXRlVHlwZWRBcnJheTogKGxlbmd0aDogbnVtYmVyKSA9PiBudW1iZXJbXTtcclxuXHJcbiAgICBpZiAodHlwZW9mIEZsb2F0MzJBcnJheSAhPT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgIGNyZWF0ZVR5cGVkQXJyYXkgPSBmdW5jdGlvbiAobGVuZ3RoOiBudW1iZXIpOiBudW1iZXJbXSB7XHJcbiAgICAgICAgICAgIHJldHVybiA8bnVtYmVyW10+PGFueT5uZXcgRmxvYXQzMkFycmF5KGxlbmd0aCk7XHJcbiAgICAgICAgfTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY3JlYXRlVHlwZWRBcnJheSA9IGZ1bmN0aW9uIChsZW5ndGg6IG51bWJlcik6IG51bWJlcltdIHtcclxuICAgICAgICAgICAgcmV0dXJuIDxudW1iZXJbXT5uZXcgQXJyYXkobGVuZ3RoKTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCB2YXIgdmVjNDogSVZlY3RvcjRTdGF0aWMgPSB7XHJcbiAgICAgICAgY3JlYXRlICh4OiBudW1iZXIsIHk6IG51bWJlciwgejogbnVtYmVyLCB3OiBudW1iZXIpOiBudW1iZXJbXSB7XHJcbiAgICAgICAgICAgIHZhciBkZXN0ID0gY3JlYXRlVHlwZWRBcnJheSg0KTtcclxuICAgICAgICAgICAgZGVzdFswXSA9IHg7XHJcbiAgICAgICAgICAgIGRlc3RbMV0gPSB5O1xyXG4gICAgICAgICAgICBkZXN0WzJdID0gejtcclxuICAgICAgICAgICAgZGVzdFszXSA9IHc7XHJcbiAgICAgICAgICAgIHJldHVybiBkZXN0O1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaW5pdCAoeDogbnVtYmVyLCB5OiBudW1iZXIsIHo6IG51bWJlciwgdzogbnVtYmVyLCBkZXN0PzogbnVtYmVyW10pOiBudW1iZXJbXSB7XHJcbiAgICAgICAgICAgIGlmICghZGVzdCkgZGVzdCA9IGNyZWF0ZVR5cGVkQXJyYXkoNCk7XHJcbiAgICAgICAgICAgIGRlc3RbMF0gPSB4O1xyXG4gICAgICAgICAgICBkZXN0WzFdID0geTtcclxuICAgICAgICAgICAgZGVzdFsyXSA9IHo7XHJcbiAgICAgICAgICAgIGRlc3RbM10gPSB3O1xyXG4gICAgICAgICAgICByZXR1cm4gZGVzdDtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XHJcblxyXG52YXIgdmVjNCA9IG1pbmVydmEudmVjNDsiLCJtb2R1bGUgbWluZXJ2YS5wYXRoIHtcclxuICAgIC8vVE9ETzogT3B0aW1pemUgdG8gd29yayBzaW1pbGFyIHRvIFJlY3QsIFNpemVcclxuICAgIGV4cG9ydCBjbGFzcyBQYXRoIHtcclxuICAgICAgICBwcml2YXRlICQkZW50cmllczogSVBhdGhTZWdtZW50W10gPSBbXTtcclxuICAgICAgICBwcml2YXRlICQkZW5kWCA9IDAuMDtcclxuICAgICAgICBwcml2YXRlICQkZW5kWSA9IDAuMDtcclxuXHJcbiAgICAgICAgZ2V0IGVuZFggKCk6IG51bWJlciB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiQkZW5kWDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdldCBlbmRZICgpOiBudW1iZXIge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy4kJGVuZFk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXNldCAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuJCRlbnRyaWVzLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMuJCRlbmRYID0gMDtcclxuICAgICAgICAgICAgdGhpcy4kJGVuZFkgPSAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbW92ZSAoeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcclxuICAgICAgICAgICAgdGhpcy4kJGVudHJpZXMucHVzaChzZWdtZW50cy5tb3ZlKHgsIHkpKTtcclxuICAgICAgICAgICAgdGhpcy4kJGVuZFggPSB4O1xyXG4gICAgICAgICAgICB0aGlzLiQkZW5kWSA9IHk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsaW5lICh4OiBudW1iZXIsIHk6IG51bWJlcikge1xyXG4gICAgICAgICAgICB0aGlzLiQkZW50cmllcy5wdXNoKHNlZ21lbnRzLmxpbmUoeCwgeSkpO1xyXG4gICAgICAgICAgICB0aGlzLiQkZW5kWCA9IHg7XHJcbiAgICAgICAgICAgIHRoaXMuJCRlbmRZID0geTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHF1YWRyYXRpY0JlemllciAoY3B4OiBudW1iZXIsIGNweTogbnVtYmVyLCB4OiBudW1iZXIsIHk6IG51bWJlcikge1xyXG4gICAgICAgICAgICB0aGlzLiQkZW50cmllcy5wdXNoKHNlZ21lbnRzLnF1YWRyYXRpY0JlemllcihjcHgsIGNweSwgeCwgeSkpO1xyXG4gICAgICAgICAgICB0aGlzLiQkZW5kWCA9IHg7XHJcbiAgICAgICAgICAgIHRoaXMuJCRlbmRZID0geTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGN1YmljQmV6aWVyIChjcDF4OiBudW1iZXIsIGNwMXk6IG51bWJlciwgY3AyeDogbnVtYmVyLCBjcDJ5OiBudW1iZXIsIHg6IG51bWJlciwgeTogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuJCRlbnRyaWVzLnB1c2goc2VnbWVudHMuY3ViaWNCZXppZXIoY3AxeCwgY3AxeSwgY3AyeCwgY3AyeSwgeCwgeSkpO1xyXG4gICAgICAgICAgICB0aGlzLiQkZW5kWCA9IHg7XHJcbiAgICAgICAgICAgIHRoaXMuJCRlbmRZID0geTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGVsbGlwc2UgKHg6IG51bWJlciwgeTogbnVtYmVyLCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcikge1xyXG4gICAgICAgICAgICB0aGlzLiQkZW50cmllcy5wdXNoKHNlZ21lbnRzLmVsbGlwc2UoeCwgeSwgd2lkdGgsIGhlaWdodCkpO1xyXG4gICAgICAgICAgICB0aGlzLiQkZW5kWCA9IHg7XHJcbiAgICAgICAgICAgIHRoaXMuJCRlbmRZID0geTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGVsbGlwdGljYWxBcmMgKHJ4OiBudW1iZXIsIHJ5OiBudW1iZXIsIHJvdGF0aW9uQW5nbGU6IG51bWJlciwgaXNMYXJnZUFyY0ZsYWc6IGJvb2xlYW4sIHN3ZWVwRGlyZWN0aW9uRmxhZzogU3dlZXBEaXJlY3Rpb24sIGV4OiBudW1iZXIsIGV5OiBudW1iZXIpIHtcclxuICAgICAgICAgICAgdGhpcy4kJGVudHJpZXMucHVzaChzZWdtZW50cy5lbGxpcHRpY2FsQXJjKHJ4LCByeSwgcm90YXRpb25BbmdsZSwgaXNMYXJnZUFyY0ZsYWcsIHN3ZWVwRGlyZWN0aW9uRmxhZywgZXgsIGV5KSk7XHJcbiAgICAgICAgICAgIHRoaXMuJCRlbmRYID0gZXg7XHJcbiAgICAgICAgICAgIHRoaXMuJCRlbmRZID0gZXk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhcmMgKHg6IG51bWJlciwgeTogbnVtYmVyLCByOiBudW1iZXIsIHNBbmdsZTogbnVtYmVyLCBlQW5nbGU6IG51bWJlciwgYUNsb2Nrd2lzZTogYm9vbGVhbikge1xyXG4gICAgICAgICAgICB0aGlzLiQkZW50cmllcy5wdXNoKHNlZ21lbnRzLmFyYyh4LCB5LCByLCBzQW5nbGUsIGVBbmdsZSwgYUNsb2Nrd2lzZSkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYXJjVG8gKGNweDogbnVtYmVyLCBjcHk6IG51bWJlciwgeDogbnVtYmVyLCB5OiBudW1iZXIsIHJhZGl1czogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgIHZhciBhcmN0byA9IHNlZ21lbnRzLmFyY1RvKGNweCwgY3B5LCB4LCB5LCByYWRpdXMpO1xyXG4gICAgICAgICAgICB0aGlzLiQkZW50cmllcy5wdXNoKGFyY3RvKTtcclxuICAgICAgICAgICAgdGhpcy4kJGVuZFggPSBhcmN0by5leDtcclxuICAgICAgICAgICAgdGhpcy4kJGVuZFkgPSBhcmN0by5leTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJlY3QgKHg6IG51bWJlciwgeTogbnVtYmVyLCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcikge1xyXG4gICAgICAgICAgICB0aGlzLiQkZW50cmllcy5wdXNoKHNlZ21lbnRzLnJlY3QoeCwgeSwgd2lkdGgsIGhlaWdodCkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcm91bmRlZFJlY3QgKHg6IG51bWJlciwgeTogbnVtYmVyLCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlciwgcmFkaXVzWDogbnVtYmVyLCByYWRpdXNZOiBudW1iZXIpIHtcclxuICAgICAgICAgICAgdGhpcy4kJGVudHJpZXMucHVzaChzZWdtZW50cy5yb3VuZGVkUmVjdCh4LCB5LCB3aWR0aCwgaGVpZ2h0LCByYWRpdXNYLCByYWRpdXNZKSk7XHJcbiAgICAgICAgICAgIHRoaXMuJCRlbmRYID0geDtcclxuICAgICAgICAgICAgdGhpcy4kJGVuZFkgPSB5O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xvc2UgKCkge1xyXG4gICAgICAgICAgICB0aGlzLiQkZW50cmllcy5wdXNoKHNlZ21lbnRzLmNsb3NlKCkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZHJhdyAoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQpIHtcclxuICAgICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgICAgICB2YXIgcGF0aCA9IHRoaXMuJCRlbnRyaWVzO1xyXG4gICAgICAgICAgICB2YXIgbGVuID0gcGF0aC5sZW5ndGg7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHBhdGhbaV0uZHJhdyhjdHgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjYWxjQm91bmRzIChwYXJzPzogSVN0cm9rZVBhcmFtZXRlcnMpOiBSZWN0IHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuJCRlbnRyaWVzLmxlbmd0aCA8PSAwKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWN0KCk7XHJcbiAgICAgICAgICAgIHZhciBib3ggPSBwYXJzICYmIHBhcnMuc3Ryb2tlVGhpY2tuZXNzID4gMSA/IHRoaXMuJCRjYWxjU3Ryb2tlQm94KHBhcnMpIDogdGhpcy4kJGNhbGNGaWxsQm94KCk7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUmVjdChib3gubCwgYm94LnQsIE1hdGgubWF4KDAsIGJveC5yIC0gYm94LmwpLCBNYXRoLm1heCgwLCBib3guYiAtIGJveC50KSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlICQkY2FsY0ZpbGxCb3ggKCk6IElCb3VuZGluZ0JveCB7XHJcbiAgICAgICAgICAgIHZhciBwYXRoID0gdGhpcy4kJGVudHJpZXM7XHJcbiAgICAgICAgICAgIHZhciBsZW4gPSBwYXRoLmxlbmd0aDtcclxuICAgICAgICAgICAgdmFyIGJveDogSUJvdW5kaW5nQm94ID0ge1xyXG4gICAgICAgICAgICAgICAgbDogTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLFxyXG4gICAgICAgICAgICAgICAgcjogTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZLFxyXG4gICAgICAgICAgICAgICAgdDogTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLFxyXG4gICAgICAgICAgICAgICAgYjogTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHZhciBjdXJ4ID0gbnVsbDtcclxuICAgICAgICAgICAgdmFyIGN1cnkgPSBudWxsO1xyXG4gICAgICAgICAgICB2YXIgZW50cnk6IElQYXRoU2VnbWVudDtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgZW50cnkgPSBwYXRoW2ldO1xyXG4gICAgICAgICAgICAgICAgZW50cnkuc3ggPSBjdXJ4O1xyXG4gICAgICAgICAgICAgICAgZW50cnkuc3kgPSBjdXJ5O1xyXG5cclxuICAgICAgICAgICAgICAgIGVudHJ5LmV4dGVuZEZpbGxCb3goYm94KTtcclxuXHJcbiAgICAgICAgICAgICAgICBjdXJ4ID0gZW50cnkuZXggfHwgMDtcclxuICAgICAgICAgICAgICAgIGN1cnkgPSBlbnRyeS5leSB8fCAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBib3g7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlICQkY2FsY1N0cm9rZUJveCAocGFyczogSVN0cm9rZVBhcmFtZXRlcnMpOiBJQm91bmRpbmdCb3gge1xyXG4gICAgICAgICAgICB2YXIgYm94OiBJQm91bmRpbmdCb3ggPSB7XHJcbiAgICAgICAgICAgICAgICBsOiBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFksXHJcbiAgICAgICAgICAgICAgICByOiBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFksXHJcbiAgICAgICAgICAgICAgICB0OiBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFksXHJcbiAgICAgICAgICAgICAgICBiOiBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFlcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgcHJvY2Vzc1N0cm9rZWRCb3VuZHMoYm94LCB0aGlzLiQkZW50cmllcywgcGFycyk7XHJcbiAgICAgICAgICAgIHJldHVybiBib3g7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzdGF0aWMgTWVyZ2UgKHBhdGgxOiBQYXRoLCBwYXRoMjogUGF0aCkge1xyXG4gICAgICAgICAgICBwYXRoMS4kJGVudHJpZXMucHVzaC5hcHBseShwYXRoMS4kJGVudHJpZXMsIHBhdGgyLiQkZW50cmllcyk7XHJcbiAgICAgICAgICAgIHBhdGgxLiQkZW5kWCArPSBwYXRoMi4kJGVuZFg7XHJcbiAgICAgICAgICAgIHBhdGgxLiQkZW5kWSArPSBwYXRoMi4kJGVuZFk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBTZXJpYWxpemUgKCk6IHN0cmluZyB7XHJcbiAgICAgICAgICAgIHZhciBwYXRoID0gdGhpcy4kJGVudHJpZXM7XHJcbiAgICAgICAgICAgIHZhciBsZW4gPSBwYXRoLmxlbmd0aDtcclxuICAgICAgICAgICAgdmFyIHMgPSBcIlwiO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaSA+IDApIHMgKz0gXCIgXCI7XHJcbiAgICAgICAgICAgICAgICBzICs9IHBhdGhbaV0udG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBleHBhbmRTdGFydENhcCAoYm94OiBJQm91bmRpbmdCb3gsIGVudHJ5OiBJUGF0aFNlZ21lbnQsIHBhcnM6IElTdHJva2VQYXJhbWV0ZXJzKSB7XHJcbiAgICAgICAgdmFyIHY6IG51bWJlcltdO1xyXG4gICAgICAgIHZhciBocyA9IHBhcnMuc3Ryb2tlVGhpY2tuZXNzIC8gMi4wO1xyXG4gICAgICAgIHZhciBjYXAgPSBwYXJzLnN0cm9rZVN0YXJ0TGluZUNhcCB8fCBwYXJzLnN0cm9rZUVuZExpbmVDYXAgfHwgMDsgLy9IVE1MNSBkb2Vzbid0IHN1cHBvcnQgc3RhcnQgYW5kIGVuZCBjYXBcclxuICAgICAgICBzd2l0Y2ggKGNhcCkge1xyXG4gICAgICAgICAgICBjYXNlIFBlbkxpbmVDYXAuUm91bmQ6XHJcbiAgICAgICAgICAgICAgICBib3gubCA9IE1hdGgubWluKGJveC5sLCBlbnRyeS5zeCAtIGhzKTtcclxuICAgICAgICAgICAgICAgIGJveC5yID0gTWF0aC5tYXgoYm94LnIsIGVudHJ5LnN4ICsgaHMpO1xyXG4gICAgICAgICAgICAgICAgYm94LnQgPSBNYXRoLm1pbihib3gudCwgZW50cnkuc3kgLSBocyk7XHJcbiAgICAgICAgICAgICAgICBib3guYiA9IE1hdGgubWF4KGJveC5iLCBlbnRyeS5zeSArIGhzKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFBlbkxpbmVDYXAuU3F1YXJlOlxyXG4gICAgICAgICAgICAgICAgaWYgKCEodiA9IGVudHJ5LmdldFN0YXJ0VmVjdG9yKCkpKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICBpZiAoIXZbMF0gfHwgIXZbMV0pIHJldHVybjtcclxuICAgICAgICAgICAgICAgIHZhciBzZCA9IFZlY3Rvci5yZXZlcnNlKFZlY3Rvci5ub3JtYWxpemUodi5zbGljZSgwKSkpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHNkbyA9IFZlY3Rvci5vcnRob2dvbmFsKHNkLnNsaWNlKDApKTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgeDEgPSBlbnRyeS5zeCArIGhzICogKHNkWzBdICsgc2RvWzBdKTtcclxuICAgICAgICAgICAgICAgIHZhciB4MiA9IGVudHJ5LnN4ICsgaHMgKiAoc2RbMF0gLSBzZG9bMF0pO1xyXG4gICAgICAgICAgICAgICAgdmFyIHkxID0gZW50cnkuc3kgKyBocyAqIChzZFsxXSArIHNkb1sxXSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgeTIgPSBlbnRyeS5zeSArIGhzICogKHNkWzFdIC0gc2RvWzFdKTtcclxuXHJcbiAgICAgICAgICAgICAgICBib3gubCA9IE1hdGgubWluKGJveC5sLCB4MSwgeDIpO1xyXG4gICAgICAgICAgICAgICAgYm94LnIgPSBNYXRoLm1heChib3guciwgeDEsIHgyKTtcclxuICAgICAgICAgICAgICAgIGJveC50ID0gTWF0aC5taW4oYm94LnQsIHkxLCB5Mik7XHJcbiAgICAgICAgICAgICAgICBib3guYiA9IE1hdGgubWF4KGJveC5iLCB5MSwgeTIpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgUGVuTGluZUNhcC5GbGF0OlxyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgaWYgKCEodiA9IGVudHJ5LmdldFN0YXJ0VmVjdG9yKCkpKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICBpZiAoIXZbMF0gfHwgIXZbMV0pIHJldHVybjtcclxuICAgICAgICAgICAgICAgIHZhciBzZG8gPSBWZWN0b3Iub3J0aG9nb25hbChWZWN0b3Iubm9ybWFsaXplKHYuc2xpY2UoMCkpKTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgeDEgPSBlbnRyeS5zeCArIGhzICogc2RvWzBdO1xyXG4gICAgICAgICAgICAgICAgdmFyIHgyID0gZW50cnkuc3ggKyBocyAqIC1zZG9bMF07XHJcbiAgICAgICAgICAgICAgICB2YXIgeTEgPSBlbnRyeS5zeSArIGhzICogc2RvWzFdO1xyXG4gICAgICAgICAgICAgICAgdmFyIHkyID0gZW50cnkuc3kgKyBocyAqIC1zZG9bMV07XHJcblxyXG4gICAgICAgICAgICAgICAgYm94LmwgPSBNYXRoLm1pbihib3gubCwgeDEsIHgyKTtcclxuICAgICAgICAgICAgICAgIGJveC5yID0gTWF0aC5tYXgoYm94LnIsIHgxLCB4Mik7XHJcbiAgICAgICAgICAgICAgICBib3gudCA9IE1hdGgubWluKGJveC50LCB5MSwgeTIpO1xyXG4gICAgICAgICAgICAgICAgYm94LmIgPSBNYXRoLm1heChib3guYiwgeTEsIHkyKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBleHBhbmRFbmRDYXAgKGJveDogSUJvdW5kaW5nQm94LCBlbnRyeTogSVBhdGhTZWdtZW50LCBwYXJzOiBJU3Ryb2tlUGFyYW1ldGVycykge1xyXG4gICAgICAgIHZhciBleCA9IGVudHJ5LmV4O1xyXG4gICAgICAgIHZhciBleSA9IGVudHJ5LmV5O1xyXG5cclxuICAgICAgICB2YXIgdjogbnVtYmVyW107XHJcbiAgICAgICAgdmFyIGhzID0gcGFycy5zdHJva2VUaGlja25lc3MgLyAyLjA7XHJcbiAgICAgICAgdmFyIGNhcCA9IHBhcnMuc3Ryb2tlU3RhcnRMaW5lQ2FwIHx8IHBhcnMuc3Ryb2tlRW5kTGluZUNhcCB8fCAwOyAvL0hUTUw1IGRvZXNuJ3Qgc3VwcG9ydCBzdGFydCBhbmQgZW5kIGNhcFxyXG4gICAgICAgIHN3aXRjaCAoY2FwKSB7XHJcbiAgICAgICAgICAgIGNhc2UgUGVuTGluZUNhcC5Sb3VuZDpcclxuICAgICAgICAgICAgICAgIGJveC5sID0gTWF0aC5taW4oYm94LmwsIGV4IC0gaHMpO1xyXG4gICAgICAgICAgICAgICAgYm94LnIgPSBNYXRoLm1heChib3guciwgZXggKyBocyk7XHJcbiAgICAgICAgICAgICAgICBib3gudCA9IE1hdGgubWluKGJveC50LCBleSAtIGhzKTtcclxuICAgICAgICAgICAgICAgIGJveC5iID0gTWF0aC5tYXgoYm94LmIsIGV5ICsgaHMpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgUGVuTGluZUNhcC5TcXVhcmU6XHJcbiAgICAgICAgICAgICAgICBpZiAoISh2ID0gZW50cnkuZ2V0RW5kVmVjdG9yKCkpKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICBpZiAoIXZbMF0gfHwgIXZbMV0pIHJldHVybjtcclxuICAgICAgICAgICAgICAgIHZhciBlZCA9IFZlY3Rvci5ub3JtYWxpemUodi5zbGljZSgwKSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgZWRvID0gVmVjdG9yLm9ydGhvZ29uYWwoZWQuc2xpY2UoMCkpO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciB4MSA9IGV4ICsgaHMgKiAoZWRbMF0gKyBlZG9bMF0pO1xyXG4gICAgICAgICAgICAgICAgdmFyIHgyID0gZXggKyBocyAqIChlZFswXSAtIGVkb1swXSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgeTEgPSBleSArIGhzICogKGVkWzFdICsgZWRvWzFdKTtcclxuICAgICAgICAgICAgICAgIHZhciB5MiA9IGV5ICsgaHMgKiAoZWRbMV0gLSBlZG9bMV0pO1xyXG5cclxuICAgICAgICAgICAgICAgIGJveC5sID0gTWF0aC5taW4oYm94LmwsIHgxLCB4Mik7XHJcbiAgICAgICAgICAgICAgICBib3guciA9IE1hdGgubWF4KGJveC5yLCB4MSwgeDIpO1xyXG4gICAgICAgICAgICAgICAgYm94LnQgPSBNYXRoLm1pbihib3gudCwgeTEsIHkyKTtcclxuICAgICAgICAgICAgICAgIGJveC5iID0gTWF0aC5tYXgoYm94LmIsIHkxLCB5Mik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBQZW5MaW5lQ2FwLkZsYXQ6XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICBpZiAoISh2ID0gZW50cnkuZ2V0RW5kVmVjdG9yKCkpKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICBpZiAoIXZbMF0gfHwgIXZbMV0pIHJldHVybjtcclxuICAgICAgICAgICAgICAgIHZhciBlZG8gPSBWZWN0b3Iub3J0aG9nb25hbChWZWN0b3Iubm9ybWFsaXplKHYuc2xpY2UoMCkpKTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgeDEgPSBleCArIGhzICogZWRvWzBdO1xyXG4gICAgICAgICAgICAgICAgdmFyIHgyID0gZXggKyBocyAqIC1lZG9bMF07XHJcbiAgICAgICAgICAgICAgICB2YXIgeTEgPSBleSArIGhzICogZWRvWzFdO1xyXG4gICAgICAgICAgICAgICAgdmFyIHkyID0gZXkgKyBocyAqIC1lZG9bMV07XHJcblxyXG4gICAgICAgICAgICAgICAgYm94LmwgPSBNYXRoLm1pbihib3gubCwgeDEsIHgyKTtcclxuICAgICAgICAgICAgICAgIGJveC5yID0gTWF0aC5tYXgoYm94LnIsIHgxLCB4Mik7XHJcbiAgICAgICAgICAgICAgICBib3gudCA9IE1hdGgubWluKGJveC50LCB5MSwgeTIpO1xyXG4gICAgICAgICAgICAgICAgYm94LmIgPSBNYXRoLm1heChib3guYiwgeTEsIHkyKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBleHBhbmRMaW5lSm9pbiAoYm94OiBJQm91bmRpbmdCb3gsIHByZXZpb3VzOiBJUGF0aFNlZ21lbnQsIGVudHJ5OiBJUGF0aFNlZ21lbnQsIHBhcnM6IElTdHJva2VQYXJhbWV0ZXJzKSB7XHJcbiAgICAgICAgdmFyIGhzID0gcGFycy5zdHJva2VUaGlja25lc3MgLyAyLjA7XHJcbiAgICAgICAgaWYgKHBhcnMuc3Ryb2tlTGluZUpvaW4gPT09IFBlbkxpbmVKb2luLlJvdW5kKSB7XHJcbiAgICAgICAgICAgIGJveC5sID0gTWF0aC5taW4oYm94LmwsIGVudHJ5LnN4IC0gaHMpO1xyXG4gICAgICAgICAgICBib3guciA9IE1hdGgubWF4KGJveC5yLCBlbnRyeS5zeCArIGhzKTtcclxuICAgICAgICAgICAgYm94LnQgPSBNYXRoLm1pbihib3gudCwgZW50cnkuc3kgLSBocyk7XHJcbiAgICAgICAgICAgIGJveC5iID0gTWF0aC5tYXgoYm94LmIsIGVudHJ5LnN5ICsgaHMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgdGlwcyA9IChwYXJzLnN0cm9rZUxpbmVKb2luID09PSBQZW5MaW5lSm9pbi5NaXRlcikgPyBmaW5kTWl0ZXJUaXBzKHByZXZpb3VzLCBlbnRyeSwgaHMsIHBhcnMuc3Ryb2tlTWl0ZXJMaW1pdCkgOiBmaW5kQmV2ZWxUaXBzKHByZXZpb3VzLCBlbnRyeSwgaHMpO1xyXG4gICAgICAgIGlmICghdGlwcylcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIHZhciB4MSA9IHRpcHNbMF0ueDtcclxuICAgICAgICB2YXIgeDIgPSB0aXBzWzFdLng7XHJcbiAgICAgICAgdmFyIHkxID0gdGlwc1swXS55O1xyXG4gICAgICAgIHZhciB5MiA9IHRpcHNbMV0ueTtcclxuICAgICAgICBib3gubCA9IE1hdGgubWluKGJveC5sLCB4MSwgeDIpO1xyXG4gICAgICAgIGJveC5yID0gTWF0aC5tYXgoYm94LnIsIHgxLCB4Mik7XHJcbiAgICAgICAgYm94LnQgPSBNYXRoLm1pbihib3gudCwgeTEsIHkyKTtcclxuICAgICAgICBib3guYiA9IE1hdGgubWF4KGJveC5iLCB5MSwgeTIpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHByb2Nlc3NTdHJva2VkQm91bmRzIChib3g6IElCb3VuZGluZ0JveCwgc2VnczogSVBhdGhTZWdtZW50W10sIHBhcnM6IElTdHJva2VQYXJhbWV0ZXJzKSB7XHJcbiAgICAgICAgdmFyIGxlbiA9IHNlZ3MubGVuZ3RoO1xyXG4gICAgICAgIHZhciBsYXN0OiBJUGF0aFNlZ21lbnQgPSBudWxsO1xyXG4gICAgICAgIHZhciBjdXJ4OiBudW1iZXIgPSBudWxsO1xyXG4gICAgICAgIHZhciBjdXJ5OiBudW1iZXIgPSBudWxsO1xyXG4gICAgICAgIHZhciBzeDogbnVtYmVyID0gbnVsbDtcclxuICAgICAgICB2YXIgc3k6IG51bWJlciA9IG51bGw7XHJcblxyXG4gICAgICAgIHZhciBpc0xhc3RFbnRyeU1vdmUgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gcHJvY2Vzc0VudHJ5IChlbnRyeTogSVBhdGhTZWdtZW50LCBpOiBudW1iZXIpIHtcclxuICAgICAgICAgICAgZW50cnkuc3ggPSBjdXJ4O1xyXG4gICAgICAgICAgICBlbnRyeS5zeSA9IGN1cnk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIWVudHJ5LmlzU2luZ2xlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoISg8c2VnbWVudHMuSU1vdmU+ZW50cnkpLmlzTW92ZSAmJiBpc0xhc3RFbnRyeU1vdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICBzeCA9IGVudHJ5LnN4O1xyXG4gICAgICAgICAgICAgICAgICAgIHN5ID0gZW50cnkuc3k7XHJcbiAgICAgICAgICAgICAgICAgICAgZXhwYW5kU3RhcnRDYXAoYm94LCBlbnRyeSwgcGFycyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIWlzTGFzdEVudHJ5TW92ZSAmJiBpID4gMClcclxuICAgICAgICAgICAgICAgICAgICBleHBhbmRMaW5lSm9pbihib3gsIGxhc3QsIGVudHJ5LCBwYXJzKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZW50cnkuZXh0ZW5kU3Ryb2tlQm94KGJveCwgcGFycyk7XHJcblxyXG4gICAgICAgICAgICBjdXJ4ID0gZW50cnkuZXggfHwgMDtcclxuICAgICAgICAgICAgY3VyeSA9IGVudHJ5LmV5IHx8IDA7XHJcbiAgICAgICAgICAgIGlzTGFzdEVudHJ5TW92ZSA9ICEhKDxzZWdtZW50cy5JTW92ZT5lbnRyeSkuaXNNb3ZlO1xyXG4gICAgICAgICAgICBsYXN0ID0gZW50cnk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHByb2Nlc3NFbnRyeShzZWdzW2ldLCBpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGVuZCA9IHNlZ3NbbGVuIC0gMV07XHJcbiAgICAgICAgaWYgKGVuZCAmJiAhZW5kLmlzU2luZ2xlKVxyXG4gICAgICAgICAgICBleHBhbmRFbmRDYXAoYm94LCBlbmQsIHBhcnMpO1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBmdW5jdGlvbiBmaW5kTWl0ZXJUaXBzIChwcmV2aW91czogSVBhdGhTZWdtZW50LCBlbnRyeTogSVBhdGhTZWdtZW50LCBoczogbnVtYmVyLCBtaXRlckxpbWl0OiBudW1iZXIpIHtcclxuICAgICAgICB2YXIgeCA9IGVudHJ5LnN4O1xyXG4gICAgICAgIHZhciB5ID0gZW50cnkuc3k7XHJcblxyXG4gICAgICAgIHZhciBhdiA9IHByZXZpb3VzLmdldEVuZFZlY3RvcigpO1xyXG4gICAgICAgIHZhciBidiA9IGVudHJ5LmdldFN0YXJ0VmVjdG9yKCk7XHJcbiAgICAgICAgaWYgKCFhdiB8fCAhYnYpXHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIFZlY3Rvci5yZXZlcnNlKGF2KTtcclxuICAgICAgICB2YXIgdGF1ID0gVmVjdG9yLmFuZ2xlQmV0d2VlbihhdiwgYnYpIC8gMjtcclxuICAgICAgICBpZiAoaXNOYU4odGF1KSlcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcblxyXG4gICAgICAgIHZhciBtaXRlclJhdGlvID0gMSAvIE1hdGguc2luKHRhdSk7XHJcbiAgICAgICAgaWYgKG1pdGVyUmF0aW8gPiBtaXRlckxpbWl0KVxyXG4gICAgICAgICAgICByZXR1cm4gZmluZEJldmVsVGlwcyhwcmV2aW91cywgZW50cnksIGhzKTtcclxuXHJcbiAgICAgICAgLy92ZWN0b3IgaW4gZGlyZWN0aW9uIG9mIGpvaW4gcG9pbnQgdG8gbWl0ZXIgdGlwXHJcbiAgICAgICAgdmFyIGN2ID0gVmVjdG9yLmlzQ2xvY2t3aXNlVG8oYXYsIGJ2KSA/IGF2LnNsaWNlKDApIDogYnYuc2xpY2UoMCk7XHJcbiAgICAgICAgVmVjdG9yLm5vcm1hbGl6ZShWZWN0b3IucmV2ZXJzZShWZWN0b3Iucm90YXRlKGN2LCB0YXUpKSk7XHJcblxyXG4gICAgICAgIC8vZGlzdGFuY2UgZnJvbSBqb2luIHBvaW50IGFuZCBtaXRlciB0aXBcclxuICAgICAgICB2YXIgbWl0ZXJMZW4gPSBocyAqIG1pdGVyUmF0aW87XHJcblxyXG4gICAgICAgIHZhciB0aXAgPSB7eDogeCArIG1pdGVyTGVuICogY3ZbMF0sIHk6IHkgKyBtaXRlckxlbiAqIGN2WzFdfVxyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHRpcCxcclxuICAgICAgICAgICAgdGlwXHJcbiAgICAgICAgXTtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gZmluZEJldmVsVGlwcyAocHJldmlvdXM6IElQYXRoU2VnbWVudCwgZW50cnk6IElQYXRoU2VnbWVudCwgaHM6IG51bWJlcikge1xyXG4gICAgICAgIHZhciB4ID0gZW50cnkuc3g7XHJcbiAgICAgICAgdmFyIHkgPSBlbnRyeS5zeTtcclxuXHJcbiAgICAgICAgdmFyIGF2ID0gcHJldmlvdXMuZ2V0RW5kVmVjdG9yKCk7XHJcbiAgICAgICAgdmFyIGJ2ID0gZW50cnkuZ2V0U3RhcnRWZWN0b3IoKTtcclxuICAgICAgICBpZiAoIWF2IHx8ICFidilcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIFZlY3Rvci5ub3JtYWxpemUoVmVjdG9yLnJldmVyc2UoYXYpKTtcclxuICAgICAgICBWZWN0b3Iubm9ybWFsaXplKGJ2KTtcclxuICAgICAgICB2YXIgYXZvOiBudW1iZXJbXSxcclxuICAgICAgICAgICAgYnZvOiBudW1iZXJbXTtcclxuICAgICAgICBpZiAoVmVjdG9yLmlzQ2xvY2t3aXNlVG8oYXYsIGJ2KSkge1xyXG4gICAgICAgICAgICBhdm8gPSBWZWN0b3Iub3J0aG9nb25hbChhdi5zbGljZSgwKSk7XHJcbiAgICAgICAgICAgIGJ2byA9IFZlY3Rvci5yZXZlcnNlKFZlY3Rvci5vcnRob2dvbmFsKGJ2LnNsaWNlKDApKSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgYXZvID0gVmVjdG9yLnJldmVyc2UoVmVjdG9yLm9ydGhvZ29uYWwoYXYuc2xpY2UoMCkpKTtcclxuICAgICAgICAgICAgYnZvID0gVmVjdG9yLm9ydGhvZ29uYWwoYnYuc2xpY2UoMCkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAge3g6IHggLSBocyAqIGF2b1swXSwgeTogeSAtIGhzICogYXZvWzFdfSxcclxuICAgICAgICAgICAge3g6IHggLSBocyAqIGJ2b1swXSwgeTogeSAtIGhzICogYnZvWzFdfVxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5waXBlIHtcclxuICAgIGV4cG9ydCBjbGFzcyBJVHJpUGlwZTxUSW5wdXQgZXh0ZW5kcyBJUGlwZUlucHV0LCBUU3RhdGUgZXh0ZW5kcyBJUGlwZVN0YXRlLCBUT3V0cHV0IGV4dGVuZHMgSVBpcGVPdXRwdXQ+IHtcclxuICAgICAgICBkZWY6IElUcmlQaXBlRGVmPFRJbnB1dCwgVFN0YXRlLCBUT3V0cHV0PjtcclxuICAgICAgICBzdGF0ZTogVFN0YXRlO1xyXG4gICAgICAgIG91dHB1dDogVE91dHB1dDtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gY3JlYXRlVHJpUGlwZTxUSW5wdXQgZXh0ZW5kcyBJUGlwZUlucHV0LCBUU3RhdGUgZXh0ZW5kcyBJUGlwZVN0YXRlLCBUT3V0cHV0IGV4dGVuZHMgSVBpcGVPdXRwdXQ+KHBpcGVkZWY6IElUcmlQaXBlRGVmPFRJbnB1dCwgVFN0YXRlLCBUT3V0cHV0Pik6IElUcmlQaXBlPFRJbnB1dCwgVFN0YXRlLCBUT3V0cHV0PiB7XHJcbiAgICAgICAgcmV0dXJuIDxJVHJpUGlwZTxUSW5wdXQsIFRTdGF0ZSwgVE91dHB1dD4+IHtcclxuICAgICAgICAgICAgZGVmOiBwaXBlZGVmLFxyXG4gICAgICAgICAgICBzdGF0ZTogcGlwZWRlZi5jcmVhdGVTdGF0ZSgpLFxyXG4gICAgICAgICAgICBvdXRwdXQ6IHBpcGVkZWYuY3JlYXRlT3V0cHV0KClcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59IiwibW9kdWxlIG1pbmVydmEucGlwZSB7XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElUYXBpbiB7XHJcbiAgICAgICAgKGRhdGE6IElQaXBlRGF0YSwgLi4uY29udGV4dHM6IGFueVtdKTogYm9vbGVhbjtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgY2xhc3MgUGlwZURlZjxUIGV4dGVuZHMgSVRhcGluLCBURGF0YSBleHRlbmRzIElQaXBlRGF0YT4gaW1wbGVtZW50cyBJUGlwZURlZjxURGF0YT4ge1xyXG4gICAgICAgIHByaXZhdGUgJCRuYW1lczogc3RyaW5nW10gPSBbXTtcclxuICAgICAgICBwcml2YXRlICQkdGFwaW5zOiBUW10gPSBbXTtcclxuXHJcbiAgICAgICAgYWRkVGFwaW4gKG5hbWU6IHN0cmluZywgdGFwaW46IFQpOiBQaXBlRGVmPFQsIFREYXRhPiB7XHJcbiAgICAgICAgICAgIHRoaXMuJCRuYW1lcy5wdXNoKG5hbWUpO1xyXG4gICAgICAgICAgICB0aGlzLiQkdGFwaW5zLnB1c2godGFwaW4pO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGFkZFRhcGluQmVmb3JlIChiZWZvcmU6IHN0cmluZywgbmFtZTogc3RyaW5nLCB0YXBpbjogVCk6IFBpcGVEZWY8VCwgVERhdGE+IHtcclxuICAgICAgICAgICAgdmFyIG5hbWVzID0gdGhpcy4kJG5hbWVzO1xyXG4gICAgICAgICAgICB2YXIgdGFwaW5zID0gdGhpcy4kJHRhcGlucztcclxuICAgICAgICAgICAgdmFyIGluZGV4ID0gIWJlZm9yZSA/IC0xIDogbmFtZXMuaW5kZXhPZihiZWZvcmUpO1xyXG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICBuYW1lcy51bnNoaWZ0KG5hbWUpO1xyXG4gICAgICAgICAgICAgICAgdGFwaW5zLnVuc2hpZnQodGFwaW4pO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbmFtZXMuc3BsaWNlKGluZGV4LCAwLCBuYW1lKTtcclxuICAgICAgICAgICAgICAgIHRhcGlucy5zcGxpY2UoaW5kZXgsIDAsIHRhcGluKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGFkZFRhcGluQWZ0ZXIgKGFmdGVyOiBzdHJpbmcsIG5hbWU6IHN0cmluZywgdGFwaW46IFQpOiBQaXBlRGVmPFQsIFREYXRhPiB7XHJcbiAgICAgICAgICAgIHZhciBuYW1lcyA9IHRoaXMuJCRuYW1lcztcclxuICAgICAgICAgICAgdmFyIHRhcGlucyA9IHRoaXMuJCR0YXBpbnM7XHJcbiAgICAgICAgICAgIHZhciBpbmRleCA9ICFhZnRlciA/IC0xIDogbmFtZXMuaW5kZXhPZihhZnRlcik7XHJcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gLTEgfHwgaW5kZXggPT09IG5hbWVzLmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgICAgICAgIG5hbWVzLnB1c2gobmFtZSk7XHJcbiAgICAgICAgICAgICAgICB0YXBpbnMucHVzaCh0YXBpbik7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBuYW1lcy5zcGxpY2UoaW5kZXggKyAxLCAwLCBuYW1lKTtcclxuICAgICAgICAgICAgICAgIHRhcGlucy5zcGxpY2UoaW5kZXggKyAxLCAwLCB0YXBpbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXBsYWNlVGFwaW4gKG5hbWU6IHN0cmluZywgdGFwaW46IFQpOiBQaXBlRGVmPFQsIFREYXRhPiB7XHJcbiAgICAgICAgICAgIHZhciBuYW1lcyA9IHRoaXMuJCRuYW1lcztcclxuICAgICAgICAgICAgdmFyIHRhcGlucyA9IHRoaXMuJCR0YXBpbnM7XHJcbiAgICAgICAgICAgIHZhciBpbmRleCA9IG5hbWVzLmluZGV4T2YobmFtZSk7XHJcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gLTEpXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZCBub3QgcmVwbGFjZSBwaXBlIHRhcC1pbi4gTm8gcGlwZSB0YXAtaW4gbmFtZWQgYFwiICsgbmFtZSArIFwiYC5cIik7XHJcbiAgICAgICAgICAgIHRhcGluc1tpbmRleF0gPSB0YXBpbjtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZW1vdmVUYXBpbiAobmFtZTogc3RyaW5nKTogUGlwZURlZjxULCBURGF0YT4ge1xyXG4gICAgICAgICAgICB2YXIgbmFtZXMgPSB0aGlzLiQkbmFtZXM7XHJcbiAgICAgICAgICAgIHZhciBpbmRleCA9IG5hbWVzLmluZGV4T2YobmFtZSk7XHJcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gLTEpXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZCBub3QgcmVwbGFjZSBwaXBlIHRhcC1pbi4gTm8gcGlwZSB0YXAtaW4gbmFtZWQgYFwiICsgbmFtZSArIFwiYC5cIik7XHJcbiAgICAgICAgICAgIG5hbWVzLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgICAgIHRoaXMuJCR0YXBpbnMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBydW4gKGRhdGE6IFREYXRhLCAuLi5jb250ZXh0czogYW55W10pOiBib29sZWFuIHtcclxuICAgICAgICAgICAgY29udGV4dHMudW5zaGlmdChkYXRhKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMucHJlcGFyZS5hcHBseSh0aGlzLCBjb250ZXh0cyk7XHJcblxyXG4gICAgICAgICAgICB2YXIgZmxhZyA9IHRydWU7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCB0YXBpbnMgPSB0aGlzLiQkdGFwaW5zLCBsZW4gPSB0YXBpbnMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGlmICghdGFwaW5zW2ldLmFwcGx5KHRoaXMsIGNvbnRleHRzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZsYWcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5mbHVzaC5hcHBseSh0aGlzLCBjb250ZXh0cyk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gZmxhZztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByZXBhcmUgKGRhdGE6IFREYXRhLCAuLi5jb250ZXh0czogYW55W10pIHtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZsdXNoIChkYXRhOiBURGF0YSwgLi4uY29udGV4dHM6IGFueVtdKSB7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwibW9kdWxlIG1pbmVydmEucGlwZSB7XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElUcmlUYXBpbiB7XHJcbiAgICAgICAgKGlucHV0OiBJUGlwZUlucHV0LCBzdGF0ZTogSVBpcGVTdGF0ZSwgb3V0cHV0OiBJUGlwZU91dHB1dCwgLi4uY29udGV4dHM6IGFueVtdKTogYm9vbGVhbjtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgY2xhc3MgVHJpUGlwZURlZjxUIGV4dGVuZHMgSVRyaVRhcGluLCBUSW5wdXQgZXh0ZW5kcyBJUGlwZUlucHV0LCBUU3RhdGUgZXh0ZW5kcyBJUGlwZVN0YXRlLCBUT3V0cHV0IGV4dGVuZHMgSVBpcGVPdXRwdXQ+IGltcGxlbWVudHMgSVRyaVBpcGVEZWY8VElucHV0LCBUU3RhdGUsIFRPdXRwdXQ+IHtcclxuICAgICAgICBwcml2YXRlICQkbmFtZXM6IHN0cmluZ1tdID0gW107XHJcbiAgICAgICAgcHJpdmF0ZSAkJHRhcGluczogVFtdID0gW107XHJcblxyXG4gICAgICAgIGFkZFRhcGluIChuYW1lOiBzdHJpbmcsIHRhcGluOiBUKTogVHJpUGlwZURlZjxULCBUSW5wdXQsIFRTdGF0ZSwgVE91dHB1dD4ge1xyXG4gICAgICAgICAgICB0aGlzLiQkbmFtZXMucHVzaChuYW1lKTtcclxuICAgICAgICAgICAgdGhpcy4kJHRhcGlucy5wdXNoKHRhcGluKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhZGRUYXBpbkJlZm9yZSAoYmVmb3JlOiBzdHJpbmcsIG5hbWU6IHN0cmluZywgdGFwaW46IFQpOiBUcmlQaXBlRGVmPFQsIFRJbnB1dCwgVFN0YXRlLCBUT3V0cHV0PiB7XHJcbiAgICAgICAgICAgIHZhciBuYW1lcyA9IHRoaXMuJCRuYW1lcztcclxuICAgICAgICAgICAgdmFyIHRhcGlucyA9IHRoaXMuJCR0YXBpbnM7XHJcbiAgICAgICAgICAgIHZhciBpbmRleCA9ICFiZWZvcmUgPyAtMSA6IG5hbWVzLmluZGV4T2YoYmVmb3JlKTtcclxuICAgICAgICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgbmFtZXMudW5zaGlmdChuYW1lKTtcclxuICAgICAgICAgICAgICAgIHRhcGlucy51bnNoaWZ0KHRhcGluKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG5hbWVzLnNwbGljZShpbmRleCwgMCwgbmFtZSk7XHJcbiAgICAgICAgICAgICAgICB0YXBpbnMuc3BsaWNlKGluZGV4LCAwLCB0YXBpbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhZGRUYXBpbkFmdGVyIChhZnRlcjogc3RyaW5nLCBuYW1lOiBzdHJpbmcsIHRhcGluOiBUKTogVHJpUGlwZURlZjxULCBUSW5wdXQsIFRTdGF0ZSwgVE91dHB1dD4ge1xyXG4gICAgICAgICAgICB2YXIgbmFtZXMgPSB0aGlzLiQkbmFtZXM7XHJcbiAgICAgICAgICAgIHZhciB0YXBpbnMgPSB0aGlzLiQkdGFwaW5zO1xyXG4gICAgICAgICAgICB2YXIgaW5kZXggPSAhYWZ0ZXIgPyAtMSA6IG5hbWVzLmluZGV4T2YoYWZ0ZXIpO1xyXG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IC0xIHx8IGluZGV4ID09PSBuYW1lcy5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgICAgICAgICBuYW1lcy5wdXNoKG5hbWUpO1xyXG4gICAgICAgICAgICAgICAgdGFwaW5zLnB1c2godGFwaW4pO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbmFtZXMuc3BsaWNlKGluZGV4ICsgMSwgMCwgbmFtZSk7XHJcbiAgICAgICAgICAgICAgICB0YXBpbnMuc3BsaWNlKGluZGV4ICsgMSwgMCwgdGFwaW4pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmVwbGFjZVRhcGluIChuYW1lOiBzdHJpbmcsIHRhcGluOiBUKTogVHJpUGlwZURlZjxULCBUSW5wdXQsIFRTdGF0ZSwgVE91dHB1dD4ge1xyXG4gICAgICAgICAgICB2YXIgbmFtZXMgPSB0aGlzLiQkbmFtZXM7XHJcbiAgICAgICAgICAgIHZhciB0YXBpbnMgPSB0aGlzLiQkdGFwaW5zO1xyXG4gICAgICAgICAgICB2YXIgaW5kZXggPSBuYW1lcy5pbmRleE9mKG5hbWUpO1xyXG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IC0xKVxyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IHJlcGxhY2UgcGlwZSB0YXAtaW4uIE5vIHBpcGUgdGFwLWluIG5hbWVkIGBcIiArIG5hbWUgKyBcImAuXCIpO1xyXG4gICAgICAgICAgICB0YXBpbnNbaW5kZXhdID0gdGFwaW47XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmVtb3ZlVGFwaW4gKG5hbWU6IHN0cmluZyk6IFRyaVBpcGVEZWY8VCwgVElucHV0LCBUU3RhdGUsIFRPdXRwdXQ+IHtcclxuICAgICAgICAgICAgdmFyIG5hbWVzID0gdGhpcy4kJG5hbWVzO1xyXG4gICAgICAgICAgICB2YXIgaW5kZXggPSBuYW1lcy5pbmRleE9mKG5hbWUpO1xyXG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IC0xKVxyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IHJlcGxhY2UgcGlwZSB0YXAtaW4uIE5vIHBpcGUgdGFwLWluIG5hbWVkIGBcIiArIG5hbWUgKyBcImAuXCIpO1xyXG4gICAgICAgICAgICBuYW1lcy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICAgICB0aGlzLiQkdGFwaW5zLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcnVuIChpbnB1dDogVElucHV0LCBzdGF0ZTogVFN0YXRlLCBvdXRwdXQ6IFRPdXRwdXQsIC4uLmNvbnRleHRzOiBhbnlbXSk6IGJvb2xlYW4ge1xyXG4gICAgICAgICAgICBjb250ZXh0cy51bnNoaWZ0KG91dHB1dCk7XHJcbiAgICAgICAgICAgIGNvbnRleHRzLnVuc2hpZnQoc3RhdGUpO1xyXG4gICAgICAgICAgICBjb250ZXh0cy51bnNoaWZ0KGlucHV0KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMucHJlcGFyZS5hcHBseSh0aGlzLCBjb250ZXh0cyk7XHJcblxyXG4gICAgICAgICAgICB2YXIgZmxhZyA9IHRydWU7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCB0YXBpbnMgPSB0aGlzLiQkdGFwaW5zLCBsZW4gPSB0YXBpbnMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGlmICghdGFwaW5zW2ldLmFwcGx5KHRoaXMsIGNvbnRleHRzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZsYWcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5mbHVzaC5hcHBseSh0aGlzLCBjb250ZXh0cyk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gZmxhZztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNyZWF0ZVN0YXRlICgpOiBUU3RhdGUge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNyZWF0ZU91dHB1dCAoKTogVE91dHB1dCB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJlcGFyZSAoaW5wdXQ6IFRJbnB1dCwgc3RhdGU6IFRTdGF0ZSwgb3V0cHV0OiBUT3V0cHV0LCAuLi5jb250ZXh0czogYW55W10pIHtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmbHVzaCAoaW5wdXQ6IFRJbnB1dCwgc3RhdGU6IFRTdGF0ZSwgb3V0cHV0OiBUT3V0cHV0LCAuLi5jb250ZXh0czogYW55W10pIHtcclxuXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwiKGZ1bmN0aW9uIChjb250ZXh0KSB7XHJcbiAgICBpZiAoIWNvbnRleHQucGVyZmV4KSB7XHJcbiAgICAgICAgY29udGV4dC5wZXJmZXggPSB7fTtcclxuICAgIH1cclxuICAgIGlmICghY29udGV4dC5wZXJmZXgudGltZXIpIHtcclxuICAgICAgICBjb250ZXh0LnBlcmZleC50aW1lciA9IDxhbnk+e1xyXG4gICAgICAgICAgICBhbGw6IFtdLFxyXG4gICAgICAgICAgICByZXNldCAoKSB7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHN0YXJ0ICh0YWc6IHN0cmluZykge1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzdG9wICgpIHtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBpZiAoIWNvbnRleHQucGVyZmV4LnBoYXNlcykge1xyXG4gICAgICAgIGNvbnRleHQucGVyZmV4LnBoYXNlcyA9IDxhbnk+e1xyXG4gICAgICAgICAgICBjdXJyZW50OiBudWxsLFxyXG4gICAgICAgICAgICBhbGw6IFtdLFxyXG4gICAgICAgICAgICBzdGFydCAodGFnOiBzdHJpbmcpIHtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn0pKHdpbmRvdyk7IiwibW9kdWxlIG1pbmVydmEudGV4dCB7XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElEb2N1bWVudENvbnRleHQge1xyXG4gICAgICAgIHNlbGVjdGlvblN0YXJ0OiBudW1iZXI7XHJcbiAgICAgICAgc2VsZWN0aW9uTGVuZ3RoOiBudW1iZXI7XHJcbiAgICAgICAgdGV4dFdyYXBwaW5nOiBUZXh0V3JhcHBpbmc7XHJcbiAgICAgICAgdGV4dEFsaWdubWVudDogVGV4dEFsaWdubWVudDtcclxuICAgICAgICB0ZXh0VHJpbW1pbmc6IFRleHRUcmltbWluZztcclxuICAgICAgICBsaW5lU3RhY2tpbmdTdHJhdGVneTogTGluZVN0YWNraW5nU3RyYXRlZ3k7XHJcbiAgICAgICAgbGluZUhlaWdodDogbnVtYmVyO1xyXG4gICAgfVxyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJRG9jdW1lbnRBc3NldHMge1xyXG4gICAgICAgIGF2YWlsYWJsZVdpZHRoOiBudW1iZXI7XHJcbiAgICAgICAgYWN0dWFsV2lkdGg6IG51bWJlcjtcclxuICAgICAgICBhY3R1YWxIZWlnaHQ6IG51bWJlcjtcclxuICAgICAgICBtYXhXaWR0aDogbnVtYmVyO1xyXG4gICAgICAgIG1heEhlaWdodDogbnVtYmVyO1xyXG4gICAgICAgIGxpbmVzOiBsYXlvdXQuTGluZVtdO1xyXG4gICAgICAgIHNlbENhY2hlZDogYm9vbGVhbjtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElEb2N1bWVudExheW91dERlZiB7XHJcbiAgICAgICAgY3JlYXRlQXNzZXRzICgpOiBJRG9jdW1lbnRBc3NldHM7XHJcbiAgICAgICAgc2V0TWF4V2lkdGggKGRvY2N0eDogSURvY3VtZW50Q29udGV4dCwgZG9jYXNzZXRzOiBJRG9jdW1lbnRBc3NldHMsIHdpZHRoOiBudW1iZXIpOiBib29sZWFuO1xyXG4gICAgICAgIGxheW91dCAoZG9jY3R4OiBJRG9jdW1lbnRDb250ZXh0LCBkb2Nhc3NldHM6IElEb2N1bWVudEFzc2V0cywgY29uc3RyYWludDogU2l6ZSwgd2Fsa2VyOiBJV2Fsa2VyPHRleHQuVGV4dFVwZGF0ZXI+KTogYm9vbGVhbjtcclxuICAgICAgICByZW5kZXIgKGN0eDogY29yZS5yZW5kZXIuUmVuZGVyQ29udGV4dCwgZG9jY3R4OiBJRG9jdW1lbnRDb250ZXh0LCBkb2Nhc3NldHM6IElEb2N1bWVudEFzc2V0cyk7XHJcbiAgICAgICAgZ2V0Q3Vyc29yRnJvbVBvaW50IChwb2ludDogSVBvaW50LCBkb2NjdHg6IElEb2N1bWVudENvbnRleHQsIGRvY2Fzc2V0czogSURvY3VtZW50QXNzZXRzKTogbnVtYmVyO1xyXG4gICAgICAgIGdldENhcmV0RnJvbUN1cnNvcihkb2NjdHg6IElEb2N1bWVudENvbnRleHQsIGRvY2Fzc2V0czogSURvY3VtZW50QXNzZXRzKTogUmVjdDtcclxuICAgICAgICBnZXRIb3Jpem9udGFsQWxpZ25tZW50WCAoZG9jY3R4OiBJRG9jdW1lbnRDb250ZXh0LCBhc3NldHM6IElEb2N1bWVudEFzc2V0cywgbGluZVdpZHRoOiBudW1iZXIpOiBudW1iZXI7XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGNsYXNzIERvY3VtZW50TGF5b3V0RGVmIGltcGxlbWVudHMgSURvY3VtZW50TGF5b3V0RGVmIHtcclxuICAgICAgICBjcmVhdGVBc3NldHMgKCk6IElEb2N1bWVudEFzc2V0cyB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBhdmFpbGFibGVXaWR0aDogTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLFxyXG4gICAgICAgICAgICAgICAgYWN0dWFsV2lkdGg6IE5hTixcclxuICAgICAgICAgICAgICAgIGFjdHVhbEhlaWdodDogTmFOLFxyXG4gICAgICAgICAgICAgICAgbWF4V2lkdGg6IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSxcclxuICAgICAgICAgICAgICAgIG1heEhlaWdodDogTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLFxyXG4gICAgICAgICAgICAgICAgbGluZXM6IFtdLFxyXG4gICAgICAgICAgICAgICAgc2VsQ2FjaGVkOiBmYWxzZVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2V0TWF4V2lkdGggKGRvY2N0eDogSURvY3VtZW50Q29udGV4dCwgZG9jYXNzZXRzOiBJRG9jdW1lbnRBc3NldHMsIHdpZHRoOiBudW1iZXIpOiBib29sZWFuIHtcclxuICAgICAgICAgICAgaWYgKGRvY2Fzc2V0cy5tYXhXaWR0aCA9PT0gd2lkdGgpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIGRvY2Fzc2V0cy5tYXhXaWR0aCA9IHdpZHRoO1xyXG4gICAgICAgICAgICBkb2Nhc3NldHMuYWN0dWFsV2lkdGggPSBOYU47XHJcbiAgICAgICAgICAgIGRvY2Fzc2V0cy5hY3R1YWxIZWlnaHQgPSBOYU47XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGF5b3V0IChkb2NjdHg6IElEb2N1bWVudENvbnRleHQsIGRvY2Fzc2V0czogSURvY3VtZW50QXNzZXRzLCBjb25zdHJhaW50OiBTaXplLCB3YWxrZXI6IElXYWxrZXI8dGV4dC5UZXh0VXBkYXRlcj4pOiBib29sZWFuIHtcclxuICAgICAgICAgICAgaWYgKCFpc05hTihkb2Nhc3NldHMuYWN0dWFsV2lkdGgpKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICBkb2Nhc3NldHMubWF4V2lkdGggPSBjb25zdHJhaW50LndpZHRoO1xyXG5cclxuICAgICAgICAgICAgZG9jYXNzZXRzLmFjdHVhbFdpZHRoID0gMC4wO1xyXG4gICAgICAgICAgICBkb2Nhc3NldHMuYWN0dWFsSGVpZ2h0ID0gMC4wO1xyXG4gICAgICAgICAgICBkb2Nhc3NldHMubGluZXMgPSBbXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgb2Zmc2V0ID0gMDsgd2Fsa2VyLnN0ZXAoKTspIHtcclxuICAgICAgICAgICAgICAgIG9mZnNldCArPSB3YWxrZXIuY3VycmVudC5sYXlvdXQoZG9jY3R4LCBkb2Nhc3NldHMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmVuZGVyIChjdHg6IGNvcmUucmVuZGVyLlJlbmRlckNvbnRleHQsIGRvY2N0eDogSURvY3VtZW50Q29udGV4dCwgZG9jYXNzZXRzOiBJRG9jdW1lbnRBc3NldHMpIHtcclxuICAgICAgICAgICAgdGhpcy5zcGxpdFNlbGVjdGlvbihkb2NjdHgsIGRvY2Fzc2V0cyk7XHJcblxyXG4gICAgICAgICAgICBjdHguc2F2ZSgpO1xyXG4gICAgICAgICAgICBkb2Nhc3NldHMubGluZXMuZm9yRWFjaChsaW5lID0+IHtcclxuICAgICAgICAgICAgICAgIHZhciBoYWxpZ24gPSB0aGlzLmdldEhvcml6b250YWxBbGlnbm1lbnRYKGRvY2N0eCwgZG9jYXNzZXRzLCBsaW5lLndpZHRoKTtcclxuICAgICAgICAgICAgICAgIGN0eC50cmFuc2xhdGUoaGFsaWduLCAwKTtcclxuICAgICAgICAgICAgICAgIGxpbmUucnVucy5mb3JFYWNoKHJ1biA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJ1bi5wcmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGF5b3V0LkNsdXN0ZXIucmVuZGVyKHJ1bi5wcmUsIHJ1bi5hdHRycywgY3R4KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3R4LnRyYW5zbGF0ZShydW4ucHJlLndpZHRoLCAwKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJ1bi5zZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGF5b3V0LkNsdXN0ZXIucmVuZGVyKHJ1bi5zZWwsIHJ1bi5hdHRycywgY3R4KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3R4LnRyYW5zbGF0ZShydW4uc2VsLndpZHRoLCAwKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJ1bi5wb3N0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxheW91dC5DbHVzdGVyLnJlbmRlcihydW4ucG9zdCwgcnVuLmF0dHJzLCBjdHgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdHgudHJhbnNsYXRlKHJ1bi5wb3N0LndpZHRoLCAwKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGN0eC50cmFuc2xhdGUoLWxpbmUud2lkdGggLSBoYWxpZ24sIGxpbmUuaGVpZ2h0KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBnZXRDdXJzb3JGcm9tUG9pbnQgKHBvaW50OiBJUG9pbnQsIGRvY2N0eDogSURvY3VtZW50Q29udGV4dCwgZG9jYXNzZXRzOiBJRG9jdW1lbnRBc3NldHMpOiBudW1iZXIge1xyXG4gICAgICAgICAgICB2YXIgbGluZSA9IGRvY2Fzc2V0cy5saW5lc1swXTtcclxuICAgICAgICAgICAgaWYgKCFsaW5lKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XHJcblxyXG4gICAgICAgICAgICAvL05PVEU6IEZpbmQgbGluZSB0aGF0IGNvbnRhaW5zIHBvaW50XHJcbiAgICAgICAgICAgIHZhciBhZHZhbmNlID0gMDtcclxuICAgICAgICAgICAgaWYgKHBvaW50LnkgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBjdXJ5ID0gMCwgbGluZXMgPSBkb2Nhc3NldHMubGluZXMsIGkgPSAwLCBsZW4gPSBsaW5lcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxpbmUgPSBsaW5lc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocG9pbnQueSA8PSAoY3VyeSArIGxpbmUuaGVpZ2h0KSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgYWR2YW5jZSArPSBsaW5lLnJ1bnMucmVkdWNlPG51bWJlcj4oKGFnZywgcikgPT4gYWdnICsgci5sZW5ndGgsIDApO1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnkgKz0gbGluZS5oZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciBweCA9IHBvaW50LnggLSB0aGlzLmdldEhvcml6b250YWxBbGlnbm1lbnRYKGRvY2N0eCwgZG9jYXNzZXRzLCBsaW5lLndpZHRoKTtcclxuICAgICAgICAgICAgaWYgKHB4IDwgMClcclxuICAgICAgICAgICAgICAgIHJldHVybiBhZHZhbmNlO1xyXG5cclxuICAgICAgICAgICAgLy9OT1RFOiBGaW5kIHJ1biB0aGF0IGNvbnRhaW5zIHBvaW50XHJcbiAgICAgICAgICAgIHZhciBjdXJ4ID0gMDtcclxuICAgICAgICAgICAgdmFyIGkgPSAwO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBydW5zID0gbGluZS5ydW5zLCBsZW4gPSBydW5zLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcnVuID0gcnVuc1tpXTtcclxuICAgICAgICAgICAgICAgIGlmIChweCA8PSAoY3VyeCArIHJ1bi53aWR0aCkpXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBhZHZhbmNlICs9IHJ1bi5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICBjdXJ4ICs9IHJ1bi53aWR0aDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgcnVuID0gcnVuc1tpXTtcclxuICAgICAgICAgICAgaWYgKCFydW4pXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYWR2YW5jZTtcclxuXHJcbiAgICAgICAgICAgIC8vTk9URTogR3Vlc3MgYXQgY3Vyc29yXHJcbiAgICAgICAgICAgIHZhciBlbmQgPSBNYXRoLm1heCgwLCBNYXRoLm1pbihydW4udGV4dC5sZW5ndGgsIE1hdGguY2VpbCgocHggLSBjdXJ4KSAvIHJ1bi53aWR0aCAqIHJ1bi50ZXh0Lmxlbmd0aCkpKTtcclxuICAgICAgICAgICAgdmFyIHVzZWRUZXh0ID0gcnVuLnRleHQuc3Vic3RyKDAsIGVuZCk7XHJcbiAgICAgICAgICAgIC8vTk9URTogTW92ZSBiYWNrd2FyZCBpZiB3aWR0aCBpcyByaWdodCBvZiBwb2ludFxyXG4gICAgICAgICAgICB2YXIgd2lkdGg6IG51bWJlcjtcclxuICAgICAgICAgICAgd2hpbGUgKGVuZCA+IDAgJiYgKHdpZHRoID0gdGhpcy5tZWFzdXJlVGV4dFdpZHRoKHVzZWRUZXh0LCBydW4uYXR0cnMuZm9udCkpID4gcHgpIHtcclxuICAgICAgICAgICAgICAgIGVuZC0tO1xyXG4gICAgICAgICAgICAgICAgdXNlZFRleHQgPSBydW4udGV4dC5zdWJzdHIoMCwgZW5kKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvL05PVEU6IE1vdmUgZm9yd2FyZCBpZiB3aWR0aCBpcyBsZWZ0IG9mIHBvaW50XHJcbiAgICAgICAgICAgIHZhciBsYXN0RW5kID0gZW5kO1xyXG4gICAgICAgICAgICB3aGlsZSAoZW5kIDwgcnVuLnRleHQubGVuZ3RoICYmICh3aWR0aCA9IHRoaXMubWVhc3VyZVRleHRXaWR0aCh1c2VkVGV4dCwgcnVuLmF0dHJzLmZvbnQpKSA8IHB4KSB7XHJcbiAgICAgICAgICAgICAgICBsYXN0RW5kID0gZW5kO1xyXG4gICAgICAgICAgICAgICAgZW5kKys7XHJcbiAgICAgICAgICAgICAgICB1c2VkVGV4dCA9IHJ1bi50ZXh0LnN1YnN0cigwLCBlbmQpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gYWR2YW5jZSArIGxhc3RFbmQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBnZXRDYXJldEZyb21DdXJzb3IgKGRvY2N0eDogSURvY3VtZW50Q29udGV4dCwgZG9jYXNzZXRzOiBJRG9jdW1lbnRBc3NldHMpOiBSZWN0IHtcclxuICAgICAgICAgICAgdmFyIGN1cnNvciA9IGRvY2N0eC5zZWxlY3Rpb25TdGFydDtcclxuICAgICAgICAgICAgdmFyIGFkdmFuY2UgPSAwO1xyXG4gICAgICAgICAgICB2YXIgY3IgPSBuZXcgUmVjdCgwLCAwLCAxLCAwKTtcclxuICAgICAgICAgICAgdmFyIGxhc3RMaW5lSGVpZ2h0ID0gMDtcclxuICAgICAgICAgICAgZm9yICh2YXIgbGluZXMgPSBkb2Nhc3NldHMubGluZXMsIGkgPSAwLCBsZW4gPSBsaW5lcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGxpbmUgPSBsaW5lc1tpXTtcclxuICAgICAgICAgICAgICAgIGNyLnggPSB0aGlzLmdldEhvcml6b250YWxBbGlnbm1lbnRYKGRvY2N0eCwgZG9jYXNzZXRzLCBsaW5lLndpZHRoKTtcclxuICAgICAgICAgICAgICAgIGNyLmhlaWdodCA9IGxpbmUuaGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgcnVucyA9IGxpbmUucnVucywgaiA9IDAsIGxlbjIgPSBydW5zLmxlbmd0aDsgaiA8IGxlbjI7IGorKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBydW4gPSBydW5zW2pdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgoYWR2YW5jZSArIHJ1bi5sZW5ndGgpID4gY3Vyc29yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNyLnggKz0gdGhpcy5tZWFzdXJlVGV4dFdpZHRoKHJ1bi50ZXh0LnN1YnN0cigwLCBjdXJzb3IgLSBhZHZhbmNlKSwgcnVuLmF0dHJzLmZvbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3I7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGFkdmFuY2UgKz0gcnVuLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICBjci54ICs9IGxpbmUud2lkdGg7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjci55ICs9IGxpbmUuaGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgbGFzdExpbmVIZWlnaHQgPSBsaW5lLmhlaWdodDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjci55IC09IGxhc3RMaW5lSGVpZ2h0O1xyXG4gICAgICAgICAgICByZXR1cm4gY3I7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzcGxpdFNlbGVjdGlvbiAoZG9jY3R4OiBJRG9jdW1lbnRDb250ZXh0LCBhc3NldHM6IElEb2N1bWVudEFzc2V0cykge1xyXG4gICAgICAgICAgICBpZiAoYXNzZXRzLnNlbENhY2hlZClcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgdmFyIHN0YXJ0ID0gZG9jY3R4LnNlbGVjdGlvblN0YXJ0O1xyXG4gICAgICAgICAgICBhc3NldHMubGluZXMuZm9yRWFjaChsaW5lID0+XHJcbiAgICAgICAgICAgICAgICBsaW5lLnJ1bnMuZm9yRWFjaChydW4gPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGxheW91dC5SdW4uc3BsaXRTZWxlY3Rpb24ocnVuLCBzdGFydCwgc3RhcnQgKyBkb2NjdHguc2VsZWN0aW9uTGVuZ3RoLCAodGV4dCwgYXR0cnMpID0+IHRoaXMubWVhc3VyZVRleHRXaWR0aCh0ZXh0LCBhdHRycy5mb250KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQgLT0gcnVuLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIH0pKTtcclxuICAgICAgICAgICAgYXNzZXRzLnNlbENhY2hlZCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBnZXRIb3Jpem9udGFsQWxpZ25tZW50WCAoZG9jY3R4OiBJRG9jdW1lbnRDb250ZXh0LCBhc3NldHM6IElEb2N1bWVudEFzc2V0cywgbGluZVdpZHRoOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgICAgICAgICBpZiAoZG9jY3R4LnRleHRBbGlnbm1lbnQgPT09IFRleHRBbGlnbm1lbnQuTGVmdCB8fCBkb2NjdHgudGV4dEFsaWdubWVudCA9PT0gVGV4dEFsaWdubWVudC5KdXN0aWZ5XHJcbiAgICAgICAgICAgICAgICB8fCAoZG9jY3R4LnRleHRXcmFwcGluZyA9PT0gVGV4dFdyYXBwaW5nLk5vV3JhcCAmJiBkb2NjdHgudGV4dFRyaW1taW5nICE9PSBUZXh0VHJpbW1pbmcuTm9uZSkpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICAgICAgdmFyIHdpZHRoID0gZ2V0V2lkdGhDb25zdHJhaW50KGFzc2V0cyk7XHJcbiAgICAgICAgICAgIGlmIChsaW5lV2lkdGggPj0gd2lkdGgpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICAgICAgaWYgKGRvY2N0eC50ZXh0QWxpZ25tZW50ID09PSBUZXh0QWxpZ25tZW50LkNlbnRlcilcclxuICAgICAgICAgICAgICAgIHJldHVybiAod2lkdGggLSBsaW5lV2lkdGgpIC8gMi4wO1xyXG4gICAgICAgICAgICByZXR1cm4gd2lkdGggLSBsaW5lV2lkdGg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBtZWFzdXJlVGV4dFdpZHRoICh0ZXh0OiBzdHJpbmcsIGZvbnQ6IEZvbnQpOiBudW1iZXIge1xyXG4gICAgICAgICAgICByZXR1cm4gZW5naW5lLlN1cmZhY2UubWVhc3VyZVdpZHRoKHRleHQsIGZvbnQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBnZXRXaWR0aENvbnN0cmFpbnQgKGFzc2V0czogSURvY3VtZW50QXNzZXRzKTogbnVtYmVyIHtcclxuICAgICAgICBpZiAoaXNGaW5pdGUoYXNzZXRzLmF2YWlsYWJsZVdpZHRoKSlcclxuICAgICAgICAgICAgcmV0dXJuIGFzc2V0cy5hdmFpbGFibGVXaWR0aDtcclxuICAgICAgICBpZiAoIWlzRmluaXRlKGFzc2V0cy5tYXhXaWR0aCkpXHJcbiAgICAgICAgICAgIHJldHVybiBhc3NldHMuYWN0dWFsV2lkdGg7XHJcbiAgICAgICAgcmV0dXJuIE1hdGgubWluKGFzc2V0cy5hY3R1YWxXaWR0aCwgYXNzZXRzLm1heFdpZHRoKTtcclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLnRleHQge1xyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJRG9jdW1lbnRMYXlvdXQ8VCBleHRlbmRzIElEb2N1bWVudExheW91dERlZiwgVEFzc2V0cyBleHRlbmRzIElEb2N1bWVudEFzc2V0cz4ge1xyXG4gICAgICAgIGRlZjogVDtcclxuICAgICAgICBhc3NldHM6IFRBc3NldHM7XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZURvY3VtZW50TGF5b3V0PFQgZXh0ZW5kcyBJRG9jdW1lbnRMYXlvdXREZWYsIFRBc3NldHMgZXh0ZW5kcyBJRG9jdW1lbnRBc3NldHM+IChkZWY6IFQpOiBJRG9jdW1lbnRMYXlvdXQ8VCwgVEFzc2V0cz4ge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGRlZjogZGVmLFxyXG4gICAgICAgICAgICBhc3NldHM6IDxUQXNzZXRzPmRlZi5jcmVhdGVBc3NldHMoKVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS50ZXh0IHtcclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSVRleHRVcGRhdGVyQXNzZXRzIGV4dGVuZHMgSVRleHRBc3NldHMge1xyXG4gICAgICAgIGZvbnRGYW1pbHk6IHN0cmluZztcclxuICAgICAgICBmb250U2l6ZTogbnVtYmVyO1xyXG4gICAgICAgIGZvbnRTdHJldGNoOiBzdHJpbmc7XHJcbiAgICAgICAgZm9udFN0eWxlOiBzdHJpbmc7XHJcbiAgICAgICAgZm9udFdlaWdodDogRm9udFdlaWdodDtcclxuICAgICAgICB0ZXh0RGVjb3JhdGlvbnM6IFRleHREZWNvcmF0aW9ucztcclxuICAgICAgICBsYW5ndWFnZTogc3RyaW5nO1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBjbGFzcyBUZXh0VXBkYXRlciB7XHJcbiAgICAgICAgYXNzZXRzOiBJVGV4dFVwZGF0ZXJBc3NldHMgPSB7XHJcbiAgICAgICAgICAgIGZvbnRGYW1pbHk6IEZvbnQuREVGQVVMVF9GQU1JTFksXHJcbiAgICAgICAgICAgIGZvbnRTaXplOiBGb250LkRFRkFVTFRfU0laRSxcclxuICAgICAgICAgICAgZm9udFN0cmV0Y2g6IEZvbnQuREVGQVVMVF9TVFJFVENILFxyXG4gICAgICAgICAgICBmb250U3R5bGU6IEZvbnQuREVGQVVMVF9TVFlMRSxcclxuICAgICAgICAgICAgZm9udFdlaWdodDogRm9udC5ERUZBVUxUX1dFSUdIVCxcclxuICAgICAgICAgICAgdGV4dERlY29yYXRpb25zOiBUZXh0RGVjb3JhdGlvbnMuTm9uZSxcclxuICAgICAgICAgICAgbGFuZ3VhZ2U6IFwiXCIsXHJcbiAgICAgICAgICAgIGJhY2tncm91bmQ6IG51bGwsXHJcbiAgICAgICAgICAgIHNlbGVjdGlvbkJhY2tncm91bmQ6IG51bGwsXHJcbiAgICAgICAgICAgIGZvcmVncm91bmQ6IG51bGwsXHJcbiAgICAgICAgICAgIHNlbGVjdGlvbkZvcmVncm91bmQ6IG51bGwsXHJcbiAgICAgICAgICAgIGlzVW5kZXJsaW5lZDogZmFsc2UsXHJcbiAgICAgICAgICAgIGZvbnQ6IG5ldyBGb250KCksXHJcbiAgICAgICAgICAgIHRleHQ6IFwiXCJcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBwcml2YXRlICQkdGV4dGxheW91dDogSVRleHRMYXlvdXREZWY7XHJcblxyXG4gICAgICAgIGNvbnN0cnVjdG9yICgpIHtcclxuICAgICAgICAgICAgdGhpcy5pbml0KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpbml0ICgpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRUZXh0TGF5b3V0KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLy8vLy8vIFBSRVBBUkUgVEVYVCBMQVlPVVRcclxuXHJcbiAgICAgICAgc2V0VGV4dExheW91dCAodGxkZWY/OiBJVGV4dExheW91dERlZik6IFRleHRVcGRhdGVyIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuJCR0ZXh0bGF5b3V0KVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIHRoaXMuJCR0ZXh0bGF5b3V0ID0gdGxkZWYgfHwgbmV3IHJ1bi5SdW5MYXlvdXREZWYoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLy8vLy8vIFRFWFQgTEFZT1VUXHJcblxyXG4gICAgICAgIGxheW91dCAoZG9jY3R4OiBJRG9jdW1lbnRDb250ZXh0LCBkb2Nhc3NldHM6IElEb2N1bWVudEFzc2V0cyk6IG51bWJlciB7XHJcbiAgICAgICAgICAgIHRoaXMuJCR0ZXh0bGF5b3V0LmxheW91dChkb2NjdHgsIGRvY2Fzc2V0cywgdGhpcy5hc3NldHMpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hc3NldHMudGV4dC5sZW5ndGg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpbnZhbGlkYXRlRm9udCAoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgICAgIHZhciBhc3NldHMgPSB0aGlzLmFzc2V0cztcclxuICAgICAgICAgICAgcmV0dXJuIEZvbnQubWVyZ2VJbnRvKGFzc2V0cy5mb250LCBhc3NldHMuZm9udEZhbWlseSwgYXNzZXRzLmZvbnRTaXplLCBhc3NldHMuZm9udFN0cmV0Y2gsIGFzc2V0cy5mb250U3R5bGUsIGFzc2V0cy5mb250V2VpZ2h0KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb3JlLmFycmFuZ2Uge1xyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJQXJyYW5nZVRhcGluIGV4dGVuZHMgcGlwZS5JVHJpVGFwaW4ge1xyXG4gICAgICAgIChpbnB1dDogSUlucHV0LCBzdGF0ZTogSVN0YXRlLCBvdXRwdXQ6IElPdXRwdXQsIHRyZWU6IElVcGRhdGVyVHJlZSwgZmluYWxSZWN0OiBSZWN0KTpib29sZWFuO1xyXG4gICAgfVxyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJSW5wdXQgZXh0ZW5kcyBwaXBlLklQaXBlSW5wdXQsIGhlbHBlcnMuSVNpemVkIHtcclxuICAgICAgICBtYXJnaW46IFRoaWNrbmVzcztcclxuICAgICAgICBob3Jpem9udGFsQWxpZ25tZW50OiBIb3Jpem9udGFsQWxpZ25tZW50O1xyXG4gICAgICAgIHZlcnRpY2FsQWxpZ25tZW50OiBWZXJ0aWNhbEFsaWdubWVudDtcclxuICAgICAgICB2aXNpYmlsaXR5OiBWaXNpYmlsaXR5O1xyXG4gICAgICAgIGhpZGRlbkRlc2lyZTogU2l6ZTtcclxuICAgICAgICBkaXJ0eUZsYWdzOiBEaXJ0eUZsYWdzO1xyXG4gICAgICAgIHVpRmxhZ3M6IFVJRmxhZ3M7XHJcbiAgICAgICAgbGF5b3V0U2xvdDogUmVjdDtcclxuICAgICAgICByZW5kZXJTaXplOiBTaXplO1xyXG4gICAgICAgIGxhc3RSZW5kZXJTaXplOiBTaXplO1xyXG4gICAgICAgIGxheW91dFhmb3JtOiBudW1iZXJbXTtcclxuICAgICAgICBsYXlvdXRDbGlwOiBSZWN0OyAvL05PVEU6IGVtcHR5IHJlcHJlc2VudHMgbm8gbGF5b3V0IGNsaXBcclxuICAgICAgICB2aXN1YWxPZmZzZXQ6IFBvaW50XHJcbiAgICB9XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElTdGF0ZSBleHRlbmRzIHBpcGUuSVBpcGVTdGF0ZSB7XHJcbiAgICAgICAgYXJyYW5nZWRTaXplOiBTaXplO1xyXG4gICAgICAgIGZpbmFsUmVjdDogUmVjdDtcclxuICAgICAgICBmaW5hbFNpemU6IFNpemU7XHJcbiAgICAgICAgY2hpbGRSZWN0OiBSZWN0O1xyXG4gICAgICAgIGZyYW1ld29yazogU2l6ZTtcclxuICAgICAgICBzdHJldGNoZWQ6IFNpemU7XHJcbiAgICAgICAgY29uc3RyYWluZWQ6IFNpemU7XHJcbiAgICAgICAgZmxpcEhvcml6b250YWw6IGJvb2xlYW47XHJcbiAgICB9XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElPdXRwdXQgZXh0ZW5kcyBwaXBlLklQaXBlT3V0cHV0IHtcclxuICAgICAgICBkaXJ0eUZsYWdzOiBEaXJ0eUZsYWdzO1xyXG4gICAgICAgIGxheW91dFNsb3Q6IFJlY3Q7XHJcbiAgICAgICAgbGF5b3V0WGZvcm06IG51bWJlcltdO1xyXG4gICAgICAgIGxheW91dENsaXA6IFJlY3Q7XHJcbiAgICAgICAgcmVuZGVyU2l6ZTogU2l6ZTtcclxuICAgICAgICBsYXN0UmVuZGVyU2l6ZTogU2l6ZTtcclxuICAgICAgICB2aXN1YWxPZmZzZXQ6IFBvaW50O1xyXG4gICAgICAgIHVpRmxhZ3M6IFVJRmxhZ3M7XHJcbiAgICAgICAgb3JpZ0RpcnR5RmxhZ3M6IERpcnR5RmxhZ3M7XHJcbiAgICAgICAgb3JpZ1VpRmxhZ3M6IFVJRmxhZ3M7XHJcbiAgICAgICAgbmV3VXBEaXJ0eTogRGlydHlGbGFncztcclxuICAgICAgICBuZXdEb3duRGlydHk6IERpcnR5RmxhZ3M7XHJcbiAgICAgICAgbmV3VWlGbGFnczogVUlGbGFncztcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgY2xhc3MgQXJyYW5nZVBpcGVEZWYgZXh0ZW5kcyBwaXBlLlRyaVBpcGVEZWY8SUFycmFuZ2VUYXBpbiwgSUlucHV0LCBJU3RhdGUsIElPdXRwdXQ+IHtcclxuICAgICAgICBjb25zdHJ1Y3RvciAoKSB7XHJcbiAgICAgICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkVGFwaW4oJ3ZhbGlkYXRlRmluYWxSZWN0JywgdGFwaW5zLnZhbGlkYXRlRmluYWxSZWN0KVxyXG4gICAgICAgICAgICAgICAgLmFkZFRhcGluKCdhcHBseVJvdW5kaW5nJywgdGFwaW5zLmFwcGx5Um91bmRpbmcpXHJcbiAgICAgICAgICAgICAgICAuYWRkVGFwaW4oJ3ZhbGlkYXRlVmlzaWJpbGl0eScsIHRhcGlucy52YWxpZGF0ZVZpc2liaWxpdHkpXHJcbiAgICAgICAgICAgICAgICAuYWRkVGFwaW4oJ2NoZWNrTmVlZEFycmFuZ2UnLCB0YXBpbnMuY2hlY2tOZWVkQXJyYW5nZSlcclxuICAgICAgICAgICAgICAgIC8vLmFkZFRhcGluKCdlbnN1cmVNZWFzdXJlZCcsIHRhcGlucy5lbnN1cmVNZWFzdXJlZCkgLT4gb3JpZ2luYWwgb25seSBydW5zIGlmIGhhdmVuJ3QgbWVhc3VyZWQgZm9yIFBhbmVsXHJcbiAgICAgICAgICAgICAgICAuYWRkVGFwaW4oJ2ludmFsaWRhdGVGdXR1cmUnLCB0YXBpbnMuaW52YWxpZGF0ZUZ1dHVyZSlcclxuICAgICAgICAgICAgICAgIC5hZGRUYXBpbignY2FsY1N0cmV0Y2hlZCcsIHRhcGlucy5jYWxjU3RyZXRjaGVkKVxyXG4gICAgICAgICAgICAgICAgLmFkZFRhcGluKCdwcmVwYXJlT3ZlcnJpZGUnLCB0YXBpbnMucHJlcGFyZU92ZXJyaWRlKVxyXG4gICAgICAgICAgICAgICAgLmFkZFRhcGluKCdkb092ZXJyaWRlJywgdGFwaW5zLmRvT3ZlcnJpZGUpIC8vbXVzdCBzZXQgYXJyYW5nZWRTaXplXHJcbiAgICAgICAgICAgICAgICAuYWRkVGFwaW4oJ2NvbXBsZXRlT3ZlcnJpZGUnLCB0YXBpbnMuY29tcGxldGVPdmVycmlkZSlcclxuICAgICAgICAgICAgICAgIC5hZGRUYXBpbignY2FsY0ZsaXAnLCB0YXBpbnMuY2FsY0ZsaXApXHJcbiAgICAgICAgICAgICAgICAuYWRkVGFwaW4oJ2NhbGNWaXN1YWxPZmZzZXQnLCB0YXBpbnMuY2FsY1Zpc3VhbE9mZnNldClcclxuICAgICAgICAgICAgICAgIC5hZGRUYXBpbignYnVpbGRMYXlvdXRDbGlwJywgdGFwaW5zLmJ1aWxkTGF5b3V0Q2xpcClcclxuICAgICAgICAgICAgICAgIC5hZGRUYXBpbignYnVpbGRMYXlvdXRYZm9ybScsIHRhcGlucy5idWlsZExheW91dFhmb3JtKVxyXG4gICAgICAgICAgICAgICAgLmFkZFRhcGluKCdidWlsZFJlbmRlclNpemUnLCB0YXBpbnMuYnVpbGRSZW5kZXJTaXplKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNyZWF0ZVN0YXRlICgpOiBJU3RhdGUge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgYXJyYW5nZWRTaXplOiBuZXcgU2l6ZSgpLFxyXG4gICAgICAgICAgICAgICAgZmluYWxSZWN0OiBuZXcgUmVjdCgpLFxyXG4gICAgICAgICAgICAgICAgZmluYWxTaXplOiBuZXcgU2l6ZSgpLFxyXG4gICAgICAgICAgICAgICAgY2hpbGRSZWN0OiBuZXcgUmVjdCgpLFxyXG4gICAgICAgICAgICAgICAgZnJhbWV3b3JrOiBuZXcgU2l6ZSgpLFxyXG4gICAgICAgICAgICAgICAgc3RyZXRjaGVkOiBuZXcgU2l6ZSgpLFxyXG4gICAgICAgICAgICAgICAgY29uc3RyYWluZWQ6IG5ldyBTaXplKCksXHJcbiAgICAgICAgICAgICAgICBmbGlwSG9yaXpvbnRhbDogZmFsc2VcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNyZWF0ZU91dHB1dCAoKTogSU91dHB1dCB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBkaXJ0eUZsYWdzOiAwLFxyXG4gICAgICAgICAgICAgICAgdWlGbGFnczogMCxcclxuICAgICAgICAgICAgICAgIGxheW91dFNsb3Q6IG5ldyBSZWN0KCksXHJcbiAgICAgICAgICAgICAgICBsYXlvdXRYZm9ybTogbWF0My5pZGVudGl0eSgpLFxyXG4gICAgICAgICAgICAgICAgbGF5b3V0Q2xpcDogbmV3IFJlY3QoKSxcclxuICAgICAgICAgICAgICAgIHJlbmRlclNpemU6IG5ldyBTaXplKCksXHJcbiAgICAgICAgICAgICAgICBsYXN0UmVuZGVyU2l6ZTogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICAgICAgdmlzdWFsT2Zmc2V0OiBuZXcgUG9pbnQoKSxcclxuICAgICAgICAgICAgICAgIG9yaWdEaXJ0eUZsYWdzOiAwLFxyXG4gICAgICAgICAgICAgICAgb3JpZ1VpRmxhZ3M6IDAsXHJcbiAgICAgICAgICAgICAgICBuZXdVcERpcnR5OiAwLFxyXG4gICAgICAgICAgICAgICAgbmV3RG93bkRpcnR5OiAwLFxyXG4gICAgICAgICAgICAgICAgbmV3VWlGbGFnczogMFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJlcGFyZSAoaW5wdXQ6IElJbnB1dCwgc3RhdGU6IElTdGF0ZSwgb3V0cHV0OiBJT3V0cHV0KSB7XHJcbiAgICAgICAgICAgIG91dHB1dC5vcmlnRGlydHlGbGFncyA9IG91dHB1dC5kaXJ0eUZsYWdzID0gaW5wdXQuZGlydHlGbGFncztcclxuICAgICAgICAgICAgb3V0cHV0Lm9yaWdVaUZsYWdzID0gb3V0cHV0LnVpRmxhZ3MgPSBpbnB1dC51aUZsYWdzO1xyXG5cclxuICAgICAgICAgICAgUmVjdC5jb3B5VG8oaW5wdXQubGF5b3V0U2xvdCwgb3V0cHV0LmxheW91dFNsb3QpO1xyXG4gICAgICAgICAgICBSZWN0LmNvcHlUbyhpbnB1dC5sYXlvdXRDbGlwLCBvdXRwdXQubGF5b3V0Q2xpcCk7XHJcbiAgICAgICAgICAgIFNpemUuY29weVRvKGlucHV0LnJlbmRlclNpemUsIG91dHB1dC5yZW5kZXJTaXplKTtcclxuICAgICAgICAgICAgb3V0cHV0Lmxhc3RSZW5kZXJTaXplID0gaW5wdXQubGFzdFJlbmRlclNpemU7XHJcbiAgICAgICAgICAgIG1hdDMuY29weVRvKGlucHV0LmxheW91dFhmb3JtLCBvdXRwdXQubGF5b3V0WGZvcm0pO1xyXG4gICAgICAgICAgICBQb2ludC5jb3B5VG8oaW5wdXQudmlzdWFsT2Zmc2V0LCBvdXRwdXQudmlzdWFsT2Zmc2V0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZsdXNoIChpbnB1dDogSUlucHV0LCBzdGF0ZTogSVN0YXRlLCBvdXRwdXQ6IElPdXRwdXQpIHtcclxuICAgICAgICAgICAgdmFyIG5ld0RpcnR5ID0gKG91dHB1dC5kaXJ0eUZsYWdzIHwgaW5wdXQuZGlydHlGbGFncykgJiB+b3V0cHV0Lm9yaWdEaXJ0eUZsYWdzO1xyXG4gICAgICAgICAgICBvdXRwdXQubmV3VXBEaXJ0eSA9IG5ld0RpcnR5ICYgRGlydHlGbGFncy5VcERpcnR5U3RhdGU7XHJcbiAgICAgICAgICAgIG91dHB1dC5uZXdEb3duRGlydHkgPSBuZXdEaXJ0eSAmIERpcnR5RmxhZ3MuRG93bkRpcnR5U3RhdGU7XHJcbiAgICAgICAgICAgIG91dHB1dC5uZXdVaUZsYWdzID0gKG91dHB1dC51aUZsYWdzIHwgaW5wdXQudWlGbGFncykgJiB+b3V0cHV0Lm9yaWdVaUZsYWdzO1xyXG4gICAgICAgICAgICBpbnB1dC5kaXJ0eUZsYWdzID0gb3V0cHV0LmRpcnR5RmxhZ3M7XHJcbiAgICAgICAgICAgIGlucHV0LnVpRmxhZ3MgPSBvdXRwdXQudWlGbGFncztcclxuXHJcbiAgICAgICAgICAgIFJlY3QuY29weVRvKG91dHB1dC5sYXlvdXRTbG90LCBpbnB1dC5sYXlvdXRTbG90KTtcclxuICAgICAgICAgICAgUmVjdC5jb3B5VG8ob3V0cHV0LmxheW91dENsaXAsIGlucHV0LmxheW91dENsaXApO1xyXG4gICAgICAgICAgICBTaXplLmNvcHlUbyhvdXRwdXQucmVuZGVyU2l6ZSwgaW5wdXQucmVuZGVyU2l6ZSk7XHJcbiAgICAgICAgICAgIGlucHV0Lmxhc3RSZW5kZXJTaXplID0gb3V0cHV0Lmxhc3RSZW5kZXJTaXplO1xyXG4gICAgICAgICAgICBtYXQzLmNvcHlUbyhvdXRwdXQubGF5b3V0WGZvcm0sIGlucHV0LmxheW91dFhmb3JtKTtcclxuICAgICAgICAgICAgUG9pbnQuY29weVRvKG91dHB1dC52aXN1YWxPZmZzZXQsIGlucHV0LnZpc3VhbE9mZnNldCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2NvcmUvYXJyYW5nZS9BcnJhbmdlUGlwZURlZlwiIC8+XHJcblxyXG5tb2R1bGUgbWluZXJ2YS5hbm9uLmFycmFuZ2Uge1xyXG4gICAgZXhwb3J0IGNsYXNzIEFub255bW91c0FycmFuZ2VQaXBlRGVmIGV4dGVuZHMgY29yZS5hcnJhbmdlLkFycmFuZ2VQaXBlRGVmIHtcclxuICAgICAgICBjb25zdHJ1Y3RvciAodXBkOiBBbm9ueW1vdXNVcGRhdGVyKSB7XHJcbiAgICAgICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgICAgIHRoaXMucmVwbGFjZVRhcGluKCdkb092ZXJyaWRlJywgKGlucHV0OiBjb3JlLmFycmFuZ2UuSUlucHV0LCBzdGF0ZTogY29yZS5hcnJhbmdlLklTdGF0ZSwgb3V0cHV0OiBjb3JlLmFycmFuZ2UuSU91dHB1dCwgdHJlZTogY29yZS5JVXBkYXRlclRyZWUsIGZpbmFsUmVjdDogUmVjdCk6IGJvb2xlYW4gPT4ge1xyXG4gICAgICAgICAgICAgICAgdmFyIGZpbmFsU2l6ZSA9IG5ldyBTaXplKCk7XHJcbiAgICAgICAgICAgICAgICBTaXplLmNvcHlUbyhzdGF0ZS5maW5hbFNpemUsIGZpbmFsU2l6ZSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmFsID0gdXBkLmFycmFuZ2VPdmVycmlkZShmaW5hbFNpemUpO1xyXG4gICAgICAgICAgICAgICAgU2l6ZS5jb3B5VG8odmFsLCBzdGF0ZS5hcnJhbmdlZFNpemUpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvcmUubWVhc3VyZSB7XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElNZWFzdXJlVGFwaW4gZXh0ZW5kcyBwaXBlLklUcmlUYXBpbiB7XHJcbiAgICAgICAgKGlucHV0OiBJSW5wdXQsIHN0YXRlOiBJU3RhdGUsIG91dHB1dDogSU91dHB1dCwgdHJlZTogSVVwZGF0ZXJUcmVlLCBhdmFpbGFibGVTaXplOiBTaXplKTpib29sZWFuO1xyXG4gICAgfVxyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJSW5wdXQgZXh0ZW5kcyBwaXBlLklQaXBlSW5wdXQsIGhlbHBlcnMuSVNpemVkIHtcclxuICAgICAgICBtYXJnaW46IFRoaWNrbmVzcztcclxuICAgICAgICBwcmV2aW91c0NvbnN0cmFpbnQ6IFNpemU7XHJcbiAgICAgICAgdmlzaWJpbGl0eTogVmlzaWJpbGl0eTtcclxuICAgICAgICBkZXNpcmVkU2l6ZTogU2l6ZTtcclxuICAgICAgICBoaWRkZW5EZXNpcmU6IFNpemU7XHJcbiAgICAgICAgZGlydHlGbGFnczogRGlydHlGbGFncztcclxuICAgICAgICB1aUZsYWdzOiBVSUZsYWdzO1xyXG4gICAgfVxyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJU3RhdGUgZXh0ZW5kcyBwaXBlLklQaXBlU3RhdGUge1xyXG4gICAgICAgIGF2YWlsYWJsZVNpemU6IFNpemU7XHJcbiAgICB9XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElPdXRwdXQgZXh0ZW5kcyBwaXBlLklQaXBlT3V0cHV0IHtcclxuICAgICAgICBwcmV2aW91c0NvbnN0cmFpbnQ6IFNpemU7XHJcbiAgICAgICAgZGVzaXJlZFNpemU6IFNpemU7XHJcbiAgICAgICAgaGlkZGVuRGVzaXJlOiBTaXplO1xyXG4gICAgICAgIGRpcnR5RmxhZ3M6IERpcnR5RmxhZ3M7XHJcbiAgICAgICAgdWlGbGFnczogVUlGbGFncztcclxuICAgICAgICBvcmlnRGlydHlGbGFnczogRGlydHlGbGFncztcclxuICAgICAgICBvcmlnVWlGbGFnczogVUlGbGFncztcclxuICAgICAgICBuZXdVcERpcnR5OiBEaXJ0eUZsYWdzO1xyXG4gICAgICAgIG5ld0Rvd25EaXJ0eTogRGlydHlGbGFncztcclxuICAgICAgICBuZXdVaUZsYWdzOiBVSUZsYWdzO1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBjbGFzcyBNZWFzdXJlUGlwZURlZiBleHRlbmRzIHBpcGUuVHJpUGlwZURlZjxJTWVhc3VyZVRhcGluLCBJSW5wdXQsIElTdGF0ZSwgSU91dHB1dD4ge1xyXG4gICAgICAgIGNvbnN0cnVjdG9yICgpIHtcclxuICAgICAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICAgICAgdGhpcy5hZGRUYXBpbigndmFsaWRhdGUnLCB0YXBpbnMudmFsaWRhdGUpXHJcbiAgICAgICAgICAgICAgICAuYWRkVGFwaW4oJ3ZhbGlkYXRlVmlzaWJpbGl0eScsIHRhcGlucy52YWxpZGF0ZVZpc2liaWxpdHkpXHJcbiAgICAgICAgICAgICAgICAuYWRkVGFwaW4oJ2FwcGx5VGVtcGxhdGUnLCB0YXBpbnMuYXBwbHlUZW1wbGF0ZSlcclxuICAgICAgICAgICAgICAgIC5hZGRUYXBpbignY2hlY2tOZWVkTWVhc3VyZScsIHRhcGlucy5jaGVja05lZWRNZWFzdXJlKVxyXG4gICAgICAgICAgICAgICAgLmFkZFRhcGluKCdpbnZhbGlkYXRlRnV0dXJlJywgdGFwaW5zLmludmFsaWRhdGVGdXR1cmUpXHJcbiAgICAgICAgICAgICAgICAuYWRkVGFwaW4oJ3ByZXBhcmVPdmVycmlkZScsIHRhcGlucy5wcmVwYXJlT3ZlcnJpZGUpXHJcbiAgICAgICAgICAgICAgICAuYWRkVGFwaW4oJ2RvT3ZlcnJpZGUnLCB0YXBpbnMuZG9PdmVycmlkZSkgLy9tdXN0IHNldCBkZXNpcmVkU2l6ZVxyXG4gICAgICAgICAgICAgICAgLmFkZFRhcGluKCdjb21wbGV0ZU92ZXJyaWRlJywgdGFwaW5zLmNvbXBsZXRlT3ZlcnJpZGUpXHJcbiAgICAgICAgICAgICAgICAvL05PVEU6IEltcGwgYWJvcnRzIHdoZW4gKG5vIHBhcmVudCBvciBwYXJlbnQgaXMgQ2FudmFzKSBBTkQgKHNlbGYgaXMgQ2FudmFzIG9yIG5vdCBhIGxheW91dCBjb250YWluZXIpXHJcbiAgICAgICAgICAgICAgICAuYWRkVGFwaW4oJ2ZpbmlzaERlc2lyZWQnLCB0YXBpbnMuZmluaXNoRGVzaXJlZCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjcmVhdGVTdGF0ZSAoKTogSVN0YXRlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGF2YWlsYWJsZVNpemU6IG5ldyBTaXplKClcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNyZWF0ZU91dHB1dCAoKTogSU91dHB1dCB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBwcmV2aW91c0NvbnN0cmFpbnQ6IG5ldyBTaXplKCksXHJcbiAgICAgICAgICAgICAgICBkZXNpcmVkU2l6ZTogbmV3IFNpemUoKSxcclxuICAgICAgICAgICAgICAgIGhpZGRlbkRlc2lyZTogbmV3IFNpemUoKSxcclxuICAgICAgICAgICAgICAgIGRpcnR5RmxhZ3M6IDAsXHJcbiAgICAgICAgICAgICAgICB1aUZsYWdzOiAwLFxyXG5cclxuICAgICAgICAgICAgICAgIG9yaWdEaXJ0eUZsYWdzOiAwLFxyXG4gICAgICAgICAgICAgICAgb3JpZ1VpRmxhZ3M6IDAsXHJcblxyXG4gICAgICAgICAgICAgICAgbmV3VXBEaXJ0eTogMCxcclxuICAgICAgICAgICAgICAgIG5ld0Rvd25EaXJ0eTogMCxcclxuICAgICAgICAgICAgICAgIG5ld1VpRmxhZ3M6IDBcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByZXBhcmUgKGlucHV0OiBJSW5wdXQsIHN0YXRlOiBJU3RhdGUsIG91dHB1dDogSU91dHB1dCkge1xyXG4gICAgICAgICAgICBTaXplLmNvcHlUbyhpbnB1dC5wcmV2aW91c0NvbnN0cmFpbnQsIG91dHB1dC5wcmV2aW91c0NvbnN0cmFpbnQpO1xyXG4gICAgICAgICAgICBTaXplLmNvcHlUbyhpbnB1dC5kZXNpcmVkU2l6ZSwgb3V0cHV0LmRlc2lyZWRTaXplKTtcclxuICAgICAgICAgICAgU2l6ZS5jb3B5VG8oaW5wdXQuaGlkZGVuRGVzaXJlLCBvdXRwdXQuaGlkZGVuRGVzaXJlKTtcclxuICAgICAgICAgICAgb3V0cHV0Lm9yaWdEaXJ0eUZsYWdzID0gb3V0cHV0LmRpcnR5RmxhZ3MgPSBpbnB1dC5kaXJ0eUZsYWdzO1xyXG4gICAgICAgICAgICBvdXRwdXQub3JpZ1VpRmxhZ3MgPSBvdXRwdXQudWlGbGFncyA9IGlucHV0LnVpRmxhZ3M7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmbHVzaCAoaW5wdXQ6IElJbnB1dCwgc3RhdGU6IElTdGF0ZSwgb3V0cHV0OiBJT3V0cHV0KSB7XHJcbiAgICAgICAgICAgIHZhciBuZXdEaXJ0eSA9IChvdXRwdXQuZGlydHlGbGFncyB8IGlucHV0LmRpcnR5RmxhZ3MpICYgfm91dHB1dC5vcmlnRGlydHlGbGFncztcclxuICAgICAgICAgICAgb3V0cHV0Lm5ld1VwRGlydHkgPSBuZXdEaXJ0eSAmIERpcnR5RmxhZ3MuVXBEaXJ0eVN0YXRlO1xyXG4gICAgICAgICAgICBvdXRwdXQubmV3RG93bkRpcnR5ID0gbmV3RGlydHkgJiBEaXJ0eUZsYWdzLkRvd25EaXJ0eVN0YXRlO1xyXG4gICAgICAgICAgICBvdXRwdXQubmV3VWlGbGFncyA9IChvdXRwdXQudWlGbGFncyB8IGlucHV0LnVpRmxhZ3MpICYgfm91dHB1dC5vcmlnVWlGbGFncztcclxuICAgICAgICAgICAgaW5wdXQuZGlydHlGbGFncyA9IG91dHB1dC5kaXJ0eUZsYWdzO1xyXG4gICAgICAgICAgICBpbnB1dC51aUZsYWdzID0gb3V0cHV0LnVpRmxhZ3M7XHJcbiAgICAgICAgICAgIFNpemUuY29weVRvKG91dHB1dC5wcmV2aW91c0NvbnN0cmFpbnQsIGlucHV0LnByZXZpb3VzQ29uc3RyYWludCk7XHJcbiAgICAgICAgICAgIFNpemUuY29weVRvKG91dHB1dC5oaWRkZW5EZXNpcmUsIGlucHV0LmhpZGRlbkRlc2lyZSk7XHJcbiAgICAgICAgICAgIFNpemUuY29weVRvKG91dHB1dC5kZXNpcmVkU2l6ZSwgaW5wdXQuZGVzaXJlZFNpemUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9jb3JlL21lYXN1cmUvTWVhc3VyZVBpcGVEZWZcIiAvPlxyXG5cclxubW9kdWxlIG1pbmVydmEuYW5vbi5tZWFzdXJlIHtcclxuICAgIGV4cG9ydCBjbGFzcyBBbm9ueW1vdXNNZWFzdXJlUGlwZURlZiBleHRlbmRzIGNvcmUubWVhc3VyZS5NZWFzdXJlUGlwZURlZiB7XHJcbiAgICAgICAgY29uc3RydWN0b3IgKHVwZDogQW5vbnltb3VzVXBkYXRlcikge1xyXG4gICAgICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgICAgICB0aGlzLnJlcGxhY2VUYXBpbignZG9PdmVycmlkZScsIChpbnB1dDogY29yZS5tZWFzdXJlLklJbnB1dCwgc3RhdGU6IGNvcmUubWVhc3VyZS5JU3RhdGUsIG91dHB1dDogY29yZS5tZWFzdXJlLklPdXRwdXQsIHRyZWU6IGNvcmUuSVVwZGF0ZXJUcmVlLCBhdmFpbGFibGVTaXplOiBTaXplKTogYm9vbGVhbiA9PiB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYXZhaWxhYmxlU2l6ZSA9IG5ldyBTaXplKCk7XHJcbiAgICAgICAgICAgICAgICBTaXplLmNvcHlUbyhzdGF0ZS5hdmFpbGFibGVTaXplLCBhdmFpbGFibGVTaXplKTtcclxuICAgICAgICAgICAgICAgIHZhciB2YWwgPSB1cGQubWVhc3VyZU92ZXJyaWRlKGF2YWlsYWJsZVNpemUpO1xyXG4gICAgICAgICAgICAgICAgU2l6ZS5jb3B5VG8odmFsLCBvdXRwdXQuZGVzaXJlZFNpemUpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9jb3JlL1VwZGF0ZXJcIiAvPlxyXG5cclxubW9kdWxlIG1pbmVydmEuY29udHJvbHMuYm9yZGVyIHtcclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUJvcmRlclVwZGF0ZXJBc3NldHMgZXh0ZW5kcyBjb3JlLklVcGRhdGVyQXNzZXRzLCBtZWFzdXJlLklJbnB1dCwgYXJyYW5nZS5JSW5wdXQsIHJlbmRlci5JSW5wdXQge1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBjbGFzcyBCb3JkZXJVcGRhdGVyIGV4dGVuZHMgY29yZS5VcGRhdGVyIHtcclxuICAgICAgICB0cmVlOiBCb3JkZXJVcGRhdGVyVHJlZTtcclxuICAgICAgICBhc3NldHM6IElCb3JkZXJVcGRhdGVyQXNzZXRzO1xyXG5cclxuICAgICAgICBpbml0ICgpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRUcmVlKG5ldyBCb3JkZXJVcGRhdGVyVHJlZSgpKVxyXG4gICAgICAgICAgICAgICAgLnNldE1lYXN1cmVQaXBlKHNpbmdsZXRvbihtZWFzdXJlLkJvcmRlck1lYXN1cmVQaXBlRGVmKSlcclxuICAgICAgICAgICAgICAgIC5zZXRBcnJhbmdlUGlwZShzaW5nbGV0b24oYXJyYW5nZS5Cb3JkZXJBcnJhbmdlUGlwZURlZikpXHJcbiAgICAgICAgICAgICAgICAuc2V0UmVuZGVyUGlwZShzaW5nbGV0b24oY29yZS5yZW5kZXIuUmVuZGVyQ29udGV4dC5oYXNGaWxsUnVsZSA/IHJlbmRlci5Cb3JkZXJSZW5kZXJQaXBlRGVmIDogcmVuZGVyLlNoaW1Cb3JkZXJSZW5kZXJQaXBlRGVmKSlcclxuICAgICAgICAgICAgICAgIC5zZXRIaXRUZXN0UGlwZShzaW5nbGV0b24oaGl0dGVzdC5Cb3JkZXJIaXRUZXN0UGlwZURlZikpO1xyXG5cclxuICAgICAgICAgICAgdmFyIGFzc2V0cyA9IHRoaXMuYXNzZXRzO1xyXG4gICAgICAgICAgICBhc3NldHMucGFkZGluZyA9IG5ldyBUaGlja25lc3MoKTtcclxuICAgICAgICAgICAgYXNzZXRzLmJvcmRlclRoaWNrbmVzcyA9IG5ldyBUaGlja25lc3MoKTtcclxuICAgICAgICAgICAgYXNzZXRzLmNvcm5lclJhZGl1cyA9IG5ldyBDb3JuZXJSYWRpdXMoKTtcclxuXHJcbiAgICAgICAgICAgIHN1cGVyLmluaXQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vY29yZS9VcGRhdGVyVHJlZVwiIC8+XHJcblxyXG5tb2R1bGUgbWluZXJ2YS5jb250cm9scy5ib3JkZXIge1xyXG4gICAgZXhwb3J0IGNsYXNzIEJvcmRlclVwZGF0ZXJUcmVlIGV4dGVuZHMgY29yZS5VcGRhdGVyVHJlZSB7XHJcbiAgICAgICAgaXNMYXlvdXRDb250YWluZXIgPSB0cnVlO1xyXG4gICAgICAgIGlzQ29udGFpbmVyID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgd2FsayAoZGlyZWN0aW9uPzogV2Fsa0RpcmVjdGlvbik6IElXYWxrZXI8Y29yZS5VcGRhdGVyPiB7XHJcbiAgICAgICAgICAgIHZhciB2aXNpdGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50OiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICBzdGVwOiBmdW5jdGlvbiAoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50ID0gIXZpc2l0ZWQgPyBfdGhpcy5zdWJ0cmVlIDogdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgIHZpc2l0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnQgIT0gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvbnRyb2xzLnBhbmVsIHtcclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSVBhbmVsVXBkYXRlckFzc2V0cyBleHRlbmRzIGNvcmUuSVVwZGF0ZXJBc3NldHMsIG1lYXN1cmUuSUlucHV0LCBhcnJhbmdlLklJbnB1dCwgcHJvY2Vzc3VwLklJbnB1dCwgcmVuZGVyLklJbnB1dCB7XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGNsYXNzIFBhbmVsVXBkYXRlciBleHRlbmRzIGNvcmUuVXBkYXRlciB7XHJcbiAgICAgICAgYXNzZXRzOiBJUGFuZWxVcGRhdGVyQXNzZXRzO1xyXG4gICAgICAgIHRyZWU6IFBhbmVsVXBkYXRlclRyZWU7XHJcblxyXG4gICAgICAgIGluaXQgKCkge1xyXG4gICAgICAgICAgICB2YXIgYXNzZXRzID0gdGhpcy5hc3NldHM7XHJcbiAgICAgICAgICAgIGFzc2V0cy5iYWNrZ3JvdW5kID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuc2V0VHJlZShuZXcgUGFuZWxVcGRhdGVyVHJlZSgpKVxyXG4gICAgICAgICAgICAgICAgLnNldE1lYXN1cmVQaXBlKHNpbmdsZXRvbihtZWFzdXJlLlBhbmVsTWVhc3VyZVBpcGVEZWYpKVxyXG4gICAgICAgICAgICAgICAgLnNldEFycmFuZ2VQaXBlKHNpbmdsZXRvbihhcnJhbmdlLlBhbmVsQXJyYW5nZVBpcGVEZWYpKVxyXG4gICAgICAgICAgICAgICAgLnNldFByb2Nlc3NVcFBpcGUoc2luZ2xldG9uKHByb2Nlc3N1cC5QYW5lbFByb2Nlc3NVcFBpcGVEZWYpKVxyXG4gICAgICAgICAgICAgICAgLnNldFJlbmRlclBpcGUoc2luZ2xldG9uKHJlbmRlci5QYW5lbFJlbmRlclBpcGVEZWYpKVxyXG4gICAgICAgICAgICAgICAgLnNldEhpdFRlc3RQaXBlKHNpbmdsZXRvbihoaXR0ZXN0LlBhbmVsSGl0VGVzdFBpcGVEZWYpKTtcclxuICAgICAgICAgICAgc3VwZXIuaW5pdCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2V0Q2hpbGRyZW4gKGNoaWxkcmVuOiBjb3JlLlVwZGF0ZXJbXSk6IFBhbmVsVXBkYXRlciB7XHJcbiAgICAgICAgICAgIHRoaXMudHJlZS5jaGlsZHJlbiA9IGNoaWxkcmVuO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IG1vZHVsZSByZWFjdFRvIHtcclxuICAgICAgICBleHBvcnQgZnVuY3Rpb24gekluZGV4ICh1cGRhdGVyOiBjb3JlLlVwZGF0ZXIsIG9sZFZhbHVlOiBudW1iZXIsIG5ld1ZhbHVlOiBudW1iZXIpIHtcclxuICAgICAgICAgICAgdmFyIHZwID0gPFBhbmVsVXBkYXRlcj51cGRhdGVyLnRyZWUudmlzdWFsUGFyZW50O1xyXG4gICAgICAgICAgICBpZiAodnApXHJcbiAgICAgICAgICAgICAgICB2cC50cmVlLnpTb3J0ZWQgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9wYW5lbC9QYW5lbFVwZGF0ZXJcIiAvPlxyXG5cclxubW9kdWxlIG1pbmVydmEuY29udHJvbHMuY2FudmFzIHtcclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUNhbnZhc1VwZGF0ZXJBc3NldHMgZXh0ZW5kcyBwYW5lbC5JUGFuZWxVcGRhdGVyQXNzZXRzLCBtZWFzdXJlLklJbnB1dCB7XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGNsYXNzIENhbnZhc1VwZGF0ZXIgZXh0ZW5kcyBwYW5lbC5QYW5lbFVwZGF0ZXIge1xyXG4gICAgICAgIGFzc2V0czogSUNhbnZhc1VwZGF0ZXJBc3NldHM7XHJcblxyXG4gICAgICAgIGluaXQoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0TWVhc3VyZVBpcGUoc2luZ2xldG9uKG1lYXN1cmUuQ2FudmFzTWVhc3VyZVBpcGVEZWYpKVxyXG4gICAgICAgICAgICAgICAgLnNldEFycmFuZ2VQaXBlKHNpbmdsZXRvbihhcnJhbmdlLkNhbnZhc0FycmFuZ2VQaXBlRGVmKSlcclxuICAgICAgICAgICAgICAgIC5zZXRQcm9jZXNzRG93blBpcGUoc2luZ2xldG9uKHByb2Nlc3Nkb3duLkNhbnZhc1Byb2Nlc3NEb3duUGlwZURlZikpXHJcbiAgICAgICAgICAgICAgICAuc2V0UHJvY2Vzc1VwUGlwZShzaW5nbGV0b24ocHJvY2Vzc3VwLkNhbnZhc1Byb2Nlc3NVcFBpcGVEZWYpKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBhc3NldHMgPSB0aGlzLmFzc2V0cztcclxuICAgICAgICAgICAgYXNzZXRzLmJyZWFrTGF5b3V0Q2xpcCA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICBzdXBlci5pbml0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZXhwb3J0IG1vZHVsZSByZWFjdFRvIHtcclxuICAgICAgICBleHBvcnQgZnVuY3Rpb24gbGVmdCh1cGRhdGVyOiBjb3JlLlVwZGF0ZXIsIG9sZFZhbHVlOiBudW1iZXIsIG5ld1ZhbHVlOiBudW1iZXIpIHtcclxuICAgICAgICAgICAgaW52YWxpZGF0ZVRvcExlZnQodXBkYXRlcik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBleHBvcnQgZnVuY3Rpb24gdG9wKHVwZGF0ZXI6IGNvcmUuVXBkYXRlciwgb2xkVmFsdWU6IG51bWJlciwgbmV3VmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgICAgICBpbnZhbGlkYXRlVG9wTGVmdCh1cGRhdGVyKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGludmFsaWRhdGVUb3BMZWZ0KHVwZGF0ZXI6IGNvcmUuVXBkYXRlcikge1xyXG4gICAgICAgICAgICB2YXIgdnAgPSB1cGRhdGVyLnRyZWUudmlzdWFsUGFyZW50O1xyXG4gICAgICAgICAgICBpZiAodXBkYXRlciBpbnN0YW5jZW9mIENhbnZhc1VwZGF0ZXIgJiYgIXZwKSB7XHJcbiAgICAgICAgICAgICAgICB1cGRhdGVyLmFzc2V0cy5kaXJ0eUZsYWdzIHw9IERpcnR5RmxhZ3MuTG9jYWxUcmFuc2Zvcm07XHJcbiAgICAgICAgICAgICAgICBtaW5lcnZhLmNvcmUuVXBkYXRlci4kJGFkZERvd25EaXJ0eSh1cGRhdGVyKTtcclxuICAgICAgICAgICAgICAgIHVwZGF0ZXIuaW52YWxpZGF0ZUFycmFuZ2UoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCEodnAgaW5zdGFuY2VvZiBDYW52YXNVcGRhdGVyKSlcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIHZhciBscyA9IHVwZGF0ZXIuYXNzZXRzLmxheW91dFNsb3Q7XHJcbiAgICAgICAgICAgIG1pbmVydmEuU2l6ZS5jb3B5VG8odXBkYXRlci5hc3NldHMuZGVzaXJlZFNpemUsIGxzKTtcclxuICAgICAgICAgICAgLy9Db2VyY2UgTmFOLCBudWxsLCB1bmRlZmluZWQgdG8gMFxyXG4gICAgICAgICAgICBscy54ID0gdXBkYXRlci5nZXRBdHRhY2hlZFZhbHVlKFwiQ2FudmFzLkxlZnRcIikgfHwgMDtcclxuICAgICAgICAgICAgbHMueSA9IHVwZGF0ZXIuZ2V0QXR0YWNoZWRWYWx1ZShcIkNhbnZhcy5Ub3BcIikgfHwgMDtcclxuICAgICAgICAgICAgaWYgKHVwZGF0ZXIuYXNzZXRzLnVzZUxheW91dFJvdW5kaW5nKSB7XHJcbiAgICAgICAgICAgICAgICBscy54ID0gTWF0aC5yb3VuZChscy54KTtcclxuICAgICAgICAgICAgICAgIGxzLnkgPSBNYXRoLnJvdW5kKGxzLnkpO1xyXG4gICAgICAgICAgICAgICAgbHMud2lkdGggPSBNYXRoLnJvdW5kKGxzLndpZHRoKTtcclxuICAgICAgICAgICAgICAgIGxzLmhlaWdodCA9IE1hdGgucm91bmQobHMuaGVpZ2h0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB1cGRhdGVyLmludmFsaWRhdGVBcnJhbmdlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwibW9kdWxlIG1pbmVydmEuY29udHJvbHMuY29udHJvbCB7XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElDb250cm9sVXBkYXRlckFzc2V0cyBleHRlbmRzIGNvcmUuSVVwZGF0ZXJBc3NldHMge1xyXG4gICAgICAgIGlzRW5hYmxlZDogYm9vbGVhbjtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgY2xhc3MgQ29udHJvbFVwZGF0ZXIgZXh0ZW5kcyBjb3JlLlVwZGF0ZXIge1xyXG4gICAgICAgIGFzc2V0czogSUNvbnRyb2xVcGRhdGVyQXNzZXRzO1xyXG5cclxuICAgICAgICBpbml0ICgpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRUcmVlKG5ldyBDb250cm9sVXBkYXRlclRyZWUoKSlcclxuICAgICAgICAgICAgICAgIC5zZXRIaXRUZXN0UGlwZShzaW5nbGV0b24oaGl0dGVzdC5Db250cm9sSGl0VGVzdFBpcGVEZWYpKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuYXNzZXRzLmlzRW5hYmxlZCA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICBzdXBlci5pbml0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwibW9kdWxlIG1pbmVydmEuY29udHJvbHMuY29udHJvbCB7XHJcbiAgICBleHBvcnQgY2xhc3MgQ29udHJvbFVwZGF0ZXJUcmVlIGV4dGVuZHMgY29yZS5VcGRhdGVyVHJlZSB7XHJcbiAgICAgICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgICAgIHRoaXMuaXNDb250YWluZXIgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLmlzTGF5b3V0Q29udGFpbmVyID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb250cm9scy5ncmlkIHtcclxuICAgIGV4cG9ydCBlbnVtIEdyaWRVbml0VHlwZSB7XHJcbiAgICAgICAgQXV0byA9IDAsXHJcbiAgICAgICAgUGl4ZWwgPSAxLFxyXG4gICAgICAgIFN0YXIgPSAyLFxyXG4gICAgfVxyXG59IiwibW9kdWxlIG1pbmVydmEuY29udHJvbHMuZ3JpZCB7XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElHcmlkVXBkYXRlckFzc2V0cyBleHRlbmRzIHBhbmVsLklQYW5lbFVwZGF0ZXJBc3NldHMsIG1lYXN1cmUuSUlucHV0LCBhcnJhbmdlLklJbnB1dCwgcmVuZGVyLklJbnB1dCB7XHJcbiAgICAgICAgZ3JpZFN0YXRlOiBJR3JpZFN0YXRlO1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBjbGFzcyBHcmlkVXBkYXRlciBleHRlbmRzIHBhbmVsLlBhbmVsVXBkYXRlciB7XHJcbiAgICAgICAgYXNzZXRzOiBJR3JpZFVwZGF0ZXJBc3NldHM7XHJcblxyXG4gICAgICAgIGluaXQgKCkge1xyXG4gICAgICAgICAgICB0aGlzLnNldE1lYXN1cmVQaXBlKHNpbmdsZXRvbihtZWFzdXJlLkdyaWRNZWFzdXJlUGlwZURlZikpXHJcbiAgICAgICAgICAgICAgICAuc2V0QXJyYW5nZVBpcGUoc2luZ2xldG9uKGFycmFuZ2UuR3JpZEFycmFuZ2VQaXBlRGVmKSlcclxuICAgICAgICAgICAgICAgIC5zZXRQcm9jZXNzVXBQaXBlKHNpbmdsZXRvbihwcm9jZXNzdXAuR3JpZFByb2Nlc3NVcFBpcGVEZWYpKVxyXG4gICAgICAgICAgICAgICAgLnNldFJlbmRlclBpcGUoc2luZ2xldG9uKHJlbmRlci5HcmlkUmVuZGVyUGlwZURlZikpO1xyXG5cclxuICAgICAgICAgICAgdmFyIGFzc2V0cyA9IHRoaXMuYXNzZXRzO1xyXG4gICAgICAgICAgICBhc3NldHMuc2hvd0dyaWRMaW5lcyA9IGZhbHNlO1xyXG4gICAgICAgICAgICBhc3NldHMuY29sdW1uRGVmaW5pdGlvbnMgPSBbXTtcclxuICAgICAgICAgICAgYXNzZXRzLnJvd0RlZmluaXRpb25zID0gW107XHJcbiAgICAgICAgICAgIGFzc2V0cy5ncmlkU3RhdGUgPSBjcmVhdGVHcmlkU3RhdGUoKTtcclxuXHJcbiAgICAgICAgICAgIHN1cGVyLmluaXQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IG1vZHVsZSByZWFjdFRvIHtcclxuICAgICAgICBmdW5jdGlvbiBpbnZhbGlkYXRlQ2VsbCAodXBkYXRlcjogY29yZS5VcGRhdGVyKSB7XHJcbiAgICAgICAgICAgIHZhciB2cCA9IHVwZGF0ZXIudHJlZS52aXN1YWxQYXJlbnQ7XHJcbiAgICAgICAgICAgIGlmICh2cCBpbnN0YW5jZW9mIEdyaWRVcGRhdGVyKVxyXG4gICAgICAgICAgICAgICAgdnAuaW52YWxpZGF0ZU1lYXN1cmUoKTtcclxuICAgICAgICAgICAgdXBkYXRlci5pbnZhbGlkYXRlTWVhc3VyZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZXhwb3J0IGZ1bmN0aW9uIHNob3dHcmlkTGluZXMgKHVwZGF0ZXI6IEdyaWRVcGRhdGVyLCBvdjogYm9vbGVhbiwgbnY6IGJvb2xlYW4pIHtcclxuICAgICAgICAgICAgdXBkYXRlci5pbnZhbGlkYXRlTWVhc3VyZSgpO1xyXG4gICAgICAgICAgICB1cGRhdGVyLmludmFsaWRhdGUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGV4cG9ydCBmdW5jdGlvbiBjb2x1bW4gKHVwZGF0ZXI6IGNvcmUuVXBkYXRlciwgb3Y6IG51bWJlciwgbnY6IG51bWJlcikge1xyXG4gICAgICAgICAgICBpbnZhbGlkYXRlQ2VsbCh1cGRhdGVyKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGV4cG9ydCBmdW5jdGlvbiBjb2x1bW5TcGFuICh1cGRhdGVyOiBjb3JlLlVwZGF0ZXIsIG92OiBudW1iZXIsIG52OiBudW1iZXIpIHtcclxuICAgICAgICAgICAgaW52YWxpZGF0ZUNlbGwodXBkYXRlcik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBleHBvcnQgZnVuY3Rpb24gcm93ICh1cGRhdGVyOiBjb3JlLlVwZGF0ZXIsIG92OiBudW1iZXIsIG52OiBudW1iZXIpIHtcclxuICAgICAgICAgICAgaW52YWxpZGF0ZUNlbGwodXBkYXRlcik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBleHBvcnQgZnVuY3Rpb24gcm93U3BhbiAodXBkYXRlcjogY29yZS5VcGRhdGVyLCBvdjogbnVtYmVyLCBudjogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgIGludmFsaWRhdGVDZWxsKHVwZGF0ZXIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvbnRyb2xzLmdyaWQge1xyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJR3JpZFN0YXRlIHtcclxuICAgICAgICByb3dNYXRyaXg6IFNlZ21lbnRbXVtdO1xyXG4gICAgICAgIGNvbE1hdHJpeDogU2VnbWVudFtdW107XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUdyaWRTdGF0ZSAoKTogSUdyaWRTdGF0ZSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgcm93TWF0cml4OiBbXSxcclxuICAgICAgICAgICAgY29sTWF0cml4OiBbXVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb250cm9scy5ncmlkIHtcclxuICAgIGV4cG9ydCBjbGFzcyBTZWdtZW50IHtcclxuICAgICAgICBkZXNpcmVkOiBudW1iZXIgPSAwLjA7XHJcbiAgICAgICAgb2ZmZXJlZDogbnVtYmVyID0gMC4wO1xyXG4gICAgICAgIG9yaWdpbmFsOiBudW1iZXIgPSAwLjA7XHJcbiAgICAgICAgbWluOiBudW1iZXIgPSAwLjA7XHJcbiAgICAgICAgbWF4OiBudW1iZXIgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XHJcbiAgICAgICAgc3RhcnM6IG51bWJlciA9IDA7XHJcbiAgICAgICAgdHlwZSA9ICBHcmlkVW5pdFR5cGUuUGl4ZWw7XHJcblxyXG4gICAgICAgIGNsYW1wICh2YWx1ZTogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgICAgICAgICAgaWYgKHZhbHVlIDwgdGhpcy5taW4pXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5taW47XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZSA+IHRoaXMubWF4KVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubWF4O1xyXG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzdGF0aWMgaW5pdCAoc2VnbWVudDogU2VnbWVudCwgb2ZmZXJlZD86IG51bWJlciwgbWluPzogbnVtYmVyLCBtYXg/OiBudW1iZXIsIHVuaXRUeXBlPzogR3JpZFVuaXRUeXBlKTogU2VnbWVudCB7XHJcbiAgICAgICAgICAgIHNlZ21lbnQuZGVzaXJlZCA9IDAuMDtcclxuICAgICAgICAgICAgc2VnbWVudC5zdGFycyA9IDA7XHJcbiAgICAgICAgICAgIHNlZ21lbnQub2ZmZXJlZCA9IG9mZmVyZWQgfHwgMC4wO1xyXG4gICAgICAgICAgICBzZWdtZW50Lm1pbiA9IG1pbiB8fCAwLjA7XHJcbiAgICAgICAgICAgIHNlZ21lbnQubWF4ID0gbWF4ICE9IG51bGwgPyBtYXggOiBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XHJcbiAgICAgICAgICAgIHNlZ21lbnQudHlwZSA9IHVuaXRUeXBlICE9IG51bGwgPyB1bml0VHlwZSA6IEdyaWRVbml0VHlwZS5QaXhlbDtcclxuXHJcbiAgICAgICAgICAgIGlmIChzZWdtZW50Lm9mZmVyZWQgPCBtaW4pXHJcbiAgICAgICAgICAgICAgICBzZWdtZW50Lm9mZmVyZWQgPSBtaW47XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHNlZ21lbnQub2ZmZXJlZCA+IG1heClcclxuICAgICAgICAgICAgICAgIHNlZ21lbnQub2ZmZXJlZCA9IG1heDtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBzZWdtZW50O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvbnRyb2xzLmltYWdlIHtcclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUltYWdlVXBkYXRlckFzc2V0cyBleHRlbmRzIGNvcmUuSVVwZGF0ZXJBc3NldHMsIG1lYXN1cmUuSUlucHV0LCBhcnJhbmdlLklJbnB1dCwgcHJvY2Vzc2Rvd24uSUlucHV0LCByZW5kZXIuSUlucHV0IHtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgY2xhc3MgSW1hZ2VVcGRhdGVyIGV4dGVuZHMgY29yZS5VcGRhdGVyIHtcclxuICAgICAgICBhc3NldHM6IElJbWFnZVVwZGF0ZXJBc3NldHM7XHJcblxyXG4gICAgICAgIGluaXQgKCkge1xyXG4gICAgICAgICAgICB0aGlzLnNldE1lYXN1cmVQaXBlKHNpbmdsZXRvbihtZWFzdXJlLkltYWdlTWVhc3VyZVBpcGVEZWYpKVxyXG4gICAgICAgICAgICAgICAgLnNldEFycmFuZ2VQaXBlKHNpbmdsZXRvbihhcnJhbmdlLkltYWdlQXJyYW5nZVBpcGVEZWYpKVxyXG4gICAgICAgICAgICAgICAgLnNldFByb2Nlc3NEb3duUGlwZShzaW5nbGV0b24ocHJvY2Vzc2Rvd24uSW1hZ2VQcm9jZXNzRG93blBpcGVEZWYpKVxyXG4gICAgICAgICAgICAgICAgLnNldFJlbmRlclBpcGUoc2luZ2xldG9uKHJlbmRlci5JbWFnZVJlbmRlclBpcGVEZWYpKVxyXG4gICAgICAgICAgICAgICAgLnNldEhpdFRlc3RQaXBlKHNpbmdsZXRvbihoaXR0ZXN0LkltYWdlSGl0VGVzdFBpcGVEZWYpKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBhc3NldHMgPSB0aGlzLmFzc2V0cztcclxuICAgICAgICAgICAgYXNzZXRzLnNvdXJjZSA9IG51bGw7XHJcbiAgICAgICAgICAgIGFzc2V0cy5zdHJldGNoID0gU3RyZXRjaC5Vbmlmb3JtO1xyXG4gICAgICAgICAgICBhc3NldHMub3ZlcmxhcCA9IFJlY3RPdmVybGFwLkluO1xyXG4gICAgICAgICAgICBhc3NldHMuaW1nWGZvcm0gPSBtYXQzLmlkZW50aXR5KCk7XHJcblxyXG4gICAgICAgICAgICBzdXBlci5pbml0KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpbnZhbGlkYXRlTWV0cmljcyAoKTogSW1hZ2VVcGRhdGVyIHtcclxuICAgICAgICAgICAgdGhpcy5hc3NldHMuZGlydHlGbGFncyB8PSBEaXJ0eUZsYWdzLkltYWdlTWV0cmljcztcclxuICAgICAgICAgICAgY29yZS5VcGRhdGVyLiQkYWRkRG93bkRpcnR5KHRoaXMpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb250cm9scy5vdmVybGF5IHtcclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSU92ZXJsYXlVcGRhdGVyQXNzZXRzIGV4dGVuZHMgY29yZS5JVXBkYXRlckFzc2V0cyB7XHJcbiAgICAgICAgaXNWaXNpYmxlOiBib29sZWFuO1xyXG4gICAgICAgIGlzT3BlbjogYm9vbGVhbjtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgY2xhc3MgT3ZlcmxheVVwZGF0ZXIgZXh0ZW5kcyBjb3JlLlVwZGF0ZXIge1xyXG4gICAgICAgIGFzc2V0czogSU92ZXJsYXlVcGRhdGVyQXNzZXRzO1xyXG4gICAgICAgIHRyZWU6IE92ZXJsYXlVcGRhdGVyVHJlZTtcclxuXHJcbiAgICAgICAgaW5pdCAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0VHJlZShuZXcgT3ZlcmxheVVwZGF0ZXJUcmVlKCkpXHJcbiAgICAgICAgICAgICAgICAuc2V0UHJvY2Vzc1VwUGlwZShzaW5nbGV0b24ocHJvY2Vzc3VwLk92ZXJsYXlQcm9jZXNzVXBQaXBlRGVmKSlcclxuICAgICAgICAgICAgICAgIC5zZXRIaXRUZXN0UGlwZShzaW5nbGV0b24oaGl0dGVzdC5PdmVybGF5SGl0VGVzdFBpcGVEZWYpKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBhc3NldHMgPSB0aGlzLmFzc2V0cztcclxuICAgICAgICAgICAgYXNzZXRzLmlzVmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBhc3NldHMuaXNPcGVuID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICBzdXBlci5pbml0KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZXRJbml0aWF0b3IgKGluaXRpYXRvcjogY29yZS5VcGRhdGVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMudHJlZS5pbml0aWF0b3JTdXJmYWNlID0gaW5pdGlhdG9yLnRyZWUuc3VyZmFjZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNldExheWVyIChsYXllcjogY29yZS5VcGRhdGVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xyXG4gICAgICAgICAgICB0aGlzLnRyZWUubGF5ZXIgPSBsYXllcjtcclxuICAgICAgICAgICAgaWYgKHRoaXMuYXNzZXRzLmlzT3BlbilcclxuICAgICAgICAgICAgICAgIHRoaXMuc2hvdygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaGlkZSAoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgICAgIHZhciBsYXllciA9IHRoaXMudHJlZS5sYXllcjtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmFzc2V0cy5pc1Zpc2libGUgfHwgIWxheWVyKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLmFzc2V0cy5pc1Zpc2libGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgdmFyIHN1cmZhY2UgPSB0aGlzLnRyZWUuaW5pdGlhdG9yU3VyZmFjZTtcclxuICAgICAgICAgICAgaWYgKCFzdXJmYWNlKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICBzdXJmYWNlLmRldGFjaExheWVyKGxheWVyKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzaG93ICgpOiBib29sZWFuIHtcclxuICAgICAgICAgICAgdmFyIGxheWVyID0gdGhpcy50cmVlLmxheWVyO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5hc3NldHMuaXNWaXNpYmxlIHx8ICFsYXllcilcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5hc3NldHMuaXNWaXNpYmxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgdmFyIHN1cmZhY2UgPSB0aGlzLnRyZWUuaW5pdGlhdG9yU3VyZmFjZTtcclxuICAgICAgICAgICAgaWYgKCFzdXJmYWNlKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICBzdXJmYWNlLmF0dGFjaExheWVyKGxheWVyKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBtb2R1bGUgcmVhY3RUbyB7XHJcbiAgICAgICAgZXhwb3J0IGZ1bmN0aW9uIGlzT3BlbiAodXBkYXRlcjogT3ZlcmxheVVwZGF0ZXIsIG9sZFZhbHVlOiBib29sZWFuLCBuZXdWYWx1ZTogYm9vbGVhbikge1xyXG4gICAgICAgICAgICAobmV3VmFsdWUgPT09IHRydWUpID8gdXBkYXRlci5zaG93KCkgOiB1cGRhdGVyLmhpZGUoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vY29yZS9VcGRhdGVyVHJlZVwiIC8+XHJcblxyXG5tb2R1bGUgbWluZXJ2YS5jb250cm9scy5vdmVybGF5IHtcclxuICAgIGV4cG9ydCBjbGFzcyBPdmVybGF5VXBkYXRlclRyZWUgZXh0ZW5kcyBjb3JlLlVwZGF0ZXJUcmVlIHtcclxuICAgICAgICBsYXllcjogY29yZS5VcGRhdGVyID0gdW5kZWZpbmVkOyAvL1Jvb3QgbGF5ZXIgdGhhdCB3aWxsIGJlIGF0dGFjaGVkIHRvIHRoZSBzdXJmYWNlXHJcbiAgICAgICAgaW5pdGlhdG9yU3VyZmFjZTogY29yZS5JU3VyZmFjZSA9IHVuZGVmaW5lZDtcclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvbnRyb2xzLnBhbmVsIHtcclxuICAgIGV4cG9ydCBjbGFzcyBQYW5lbFVwZGF0ZXJUcmVlIGV4dGVuZHMgY29yZS5VcGRhdGVyVHJlZSB7XHJcbiAgICAgICAgY2hpbGRyZW46IGNvcmUuVXBkYXRlcltdID0gbnVsbDtcclxuICAgICAgICB6U29ydGVkOiBjb3JlLlVwZGF0ZXJbXSA9IG51bGw7XHJcblxyXG4gICAgICAgIGNvbnN0cnVjdG9yICgpIHtcclxuICAgICAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICAgICAgdGhpcy5pc0NvbnRhaW5lciA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMuaXNMYXlvdXRDb250YWluZXIgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgd2FsayAoZGlyZWN0aW9uPzogV2Fsa0RpcmVjdGlvbik6IElXYWxrZXI8Y29yZS5VcGRhdGVyPiB7XHJcbiAgICAgICAgICAgIGlmIChkaXJlY3Rpb24gPT09IFdhbGtEaXJlY3Rpb24uWkZvcndhcmQgfHwgZGlyZWN0aW9uID09PSBXYWxrRGlyZWN0aW9uLlpSZXZlcnNlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnpTb3J0KCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gd2Fsa0FycmF5KHRoaXMuelNvcnRlZCwgZGlyZWN0aW9uID09PSBXYWxrRGlyZWN0aW9uLlpSZXZlcnNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gd2Fsa0FycmF5KHRoaXMuY2hpbGRyZW4sIGRpcmVjdGlvbiA9PT0gV2Fsa0RpcmVjdGlvbi5SZXZlcnNlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHpTb3J0ICgpIHtcclxuICAgICAgICAgICAgdmFyIHpzID0gdGhpcy56U29ydGVkO1xyXG4gICAgICAgICAgICBpZiAoenMpIC8vTk9URTogelNvcnRlZCA9IG51bGwgd2hlbiBpbnZhbGlkYXRlZFxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB6cyA9IHRoaXMuelNvcnRlZCA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgd2Fsa2VyID0gdGhpcy53YWxrKCk7IHdhbGtlci5zdGVwKCk7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGN1ciA9IHdhbGtlci5jdXJyZW50O1xyXG4gICAgICAgICAgICAgICAgY3VyLnNldEF0dGFjaGVkVmFsdWUoXCJQYW5lbC5JbmRleFwiLCBpKTtcclxuICAgICAgICAgICAgICAgIHpzLnB1c2goY3VyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB6cy5zb3J0KHpJbmRleENvbXBhcmVyKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG9uQ2hpbGRBdHRhY2hlZCAoY2hpbGQ6IGNvcmUuVXBkYXRlcikge1xyXG4gICAgICAgICAgICB0aGlzLnpTb3J0ZWQgPSBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgb25DaGlsZERldGFjaGVkIChjaGlsZDogY29yZS5VcGRhdGVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuelNvcnRlZCA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHdhbGtBcnJheTxUIGV4dGVuZHMgY29yZS5VcGRhdGVyPihhcnI6IFRbXSwgcmV2ZXJzZTogYm9vbGVhbik6IElXYWxrZXI8Y29yZS5VcGRhdGVyPiB7XHJcbiAgICAgICAgdmFyIGxlbiA9IGFyci5sZW5ndGg7XHJcbiAgICAgICAgdmFyIGUgPSA8SVdhbGtlcjxUPj57c3RlcDogdW5kZWZpbmVkLCBjdXJyZW50OiB1bmRlZmluZWR9O1xyXG4gICAgICAgIHZhciBpbmRleDtcclxuICAgICAgICBpZiAocmV2ZXJzZSkge1xyXG4gICAgICAgICAgICBpbmRleCA9IGxlbjtcclxuICAgICAgICAgICAgZS5zdGVwID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgaW5kZXgtLTtcclxuICAgICAgICAgICAgICAgIGlmIChpbmRleCA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBlLmN1cnJlbnQgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZS5jdXJyZW50ID0gYXJyW2luZGV4XTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGluZGV4ID0gLTE7XHJcbiAgICAgICAgICAgIGUuc3RlcCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGluZGV4Kys7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPj0gbGVuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5jdXJyZW50ID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGUuY3VycmVudCA9IGFycltpbmRleF07XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGU7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gekluZGV4Q29tcGFyZXIgKHVwZDE6IGNvcmUuVXBkYXRlciwgdXBkMjogY29yZS5VcGRhdGVyKTogbnVtYmVyIHtcclxuICAgICAgICB2YXIgemkxID0gdXBkMS5nZXRBdHRhY2hlZFZhbHVlKFwiUGFuZWwuWkluZGV4XCIpO1xyXG4gICAgICAgIHZhciB6aTIgPSB1cGQyLmdldEF0dGFjaGVkVmFsdWUoXCJQYW5lbC5aSW5kZXhcIik7XHJcbiAgICAgICAgaWYgKHppMSA9PSBudWxsICYmIHppMiA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHppMSA9IHVwZDEuZ2V0QXR0YWNoZWRWYWx1ZShcIlBhbmVsLkluZGV4XCIpO1xyXG4gICAgICAgICAgICB6aTIgPSB1cGQyLmdldEF0dGFjaGVkVmFsdWUoXCJQYW5lbC5JbmRleFwiKTtcclxuICAgICAgICB9IGVsc2UgaWYgKHppMSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB6aTIgPiAwID8gLTEgOiAxO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoemkyID09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHppMSA+IDAgPyAxIDogLTE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB6aTEgPT09IHppMiA/IDAgOiAoKHppMSA8IHppMikgPyAtMSA6IDEpO1xyXG4gICAgfVxyXG59IiwibW9kdWxlIG1pbmVydmEuY29udHJvbHMucG9wdXAge1xyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJUG9wdXBVcGRhdGVyQXNzZXRzIGV4dGVuZHMgY29yZS5JVXBkYXRlckFzc2V0cywgcHJvY2Vzc2Rvd24uSUlucHV0IHtcclxuICAgICAgICBpc1Zpc2libGU6IGJvb2xlYW47XHJcbiAgICAgICAgaXNPcGVuOiBib29sZWFuO1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBjbGFzcyBQb3B1cFVwZGF0ZXIgZXh0ZW5kcyBjb3JlLlVwZGF0ZXIge1xyXG4gICAgICAgIGFzc2V0czogSVBvcHVwVXBkYXRlckFzc2V0cztcclxuICAgICAgICB0cmVlOiBQb3B1cFVwZGF0ZXJUcmVlO1xyXG5cclxuICAgICAgICBpbml0ICgpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRUcmVlKG5ldyBQb3B1cFVwZGF0ZXJUcmVlKCkpXHJcbiAgICAgICAgICAgICAgICAuc2V0UHJvY2Vzc0Rvd25QaXBlKHNpbmdsZXRvbihwcm9jZXNzZG93bi5Qb3B1cFByb2Nlc3NEb3duUGlwZURlZikpXHJcbiAgICAgICAgICAgICAgICAuc2V0UHJvY2Vzc1VwUGlwZShzaW5nbGV0b24ocHJvY2Vzc3VwLlBvcHVwUHJvY2Vzc1VwUGlwZURlZikpXHJcbiAgICAgICAgICAgICAgICAuc2V0SGl0VGVzdFBpcGUoc2luZ2xldG9uKGhpdHRlc3QuUG9wdXBIaXRUZXN0UGlwZURlZikpO1xyXG5cclxuICAgICAgICAgICAgdmFyIGFzc2V0cyA9IHRoaXMuYXNzZXRzO1xyXG4gICAgICAgICAgICBhc3NldHMuaG9yaXpvbnRhbE9mZnNldCA9IDA7XHJcbiAgICAgICAgICAgIGFzc2V0cy52ZXJ0aWNhbE9mZnNldCA9IDA7XHJcbiAgICAgICAgICAgIGFzc2V0cy5pc1Zpc2libGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgYXNzZXRzLmlzT3BlbiA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgc3VwZXIuaW5pdCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2V0SW5pdGlhdG9yIChpbml0aWF0b3I6IGNvcmUuVXBkYXRlcikge1xyXG4gICAgICAgICAgICB0aGlzLnRyZWUuaW5pdGlhdG9yU3VyZmFjZSA9IGluaXRpYXRvci50cmVlLnN1cmZhY2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZXRDaGlsZCAoY2hpbGQ6IGNvcmUuVXBkYXRlcikge1xyXG4gICAgICAgICAgICB2YXIgb2xkID0gdGhpcy50cmVlLnBvcHVwQ2hpbGQ7XHJcbiAgICAgICAgICAgIGlmIChvbGQpIHtcclxuICAgICAgICAgICAgICAgIG9sZC5hc3NldHMuY2Fycmllclhmb3JtID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnRyZWUucG9wdXBDaGlsZCA9IGNoaWxkO1xyXG4gICAgICAgICAgICBpZiAoY2hpbGQpIHtcclxuICAgICAgICAgICAgICAgIGNoaWxkLmFzc2V0cy5jYXJyaWVyWGZvcm0gPSBtYXQzLmlkZW50aXR5KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNldExheWVyIChsYXllcjogY29yZS5VcGRhdGVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xyXG4gICAgICAgICAgICB0aGlzLnRyZWUubGF5ZXIgPSBsYXllcjtcclxuICAgICAgICAgICAgaWYgKHRoaXMuYXNzZXRzLmlzT3BlbilcclxuICAgICAgICAgICAgICAgIHRoaXMuc2hvdygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaGlkZSAoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgICAgIHZhciBsYXllciA9IHRoaXMudHJlZS5sYXllcjtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmFzc2V0cy5pc1Zpc2libGUgfHwgIWxheWVyKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLmFzc2V0cy5pc1Zpc2libGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgdmFyIHN1cmZhY2UgPSB0aGlzLnRyZWUuaW5pdGlhdG9yU3VyZmFjZTtcclxuICAgICAgICAgICAgaWYgKCFzdXJmYWNlKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICBzdXJmYWNlLmRldGFjaExheWVyKGxheWVyKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzaG93ICgpOiBib29sZWFuIHtcclxuICAgICAgICAgICAgdmFyIGxheWVyID0gdGhpcy50cmVlLmxheWVyO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5hc3NldHMuaXNWaXNpYmxlIHx8ICFsYXllcilcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5hc3NldHMuaXNWaXNpYmxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgdmFyIHN1cmZhY2UgPSB0aGlzLnRyZWUuaW5pdGlhdG9yU3VyZmFjZTtcclxuICAgICAgICAgICAgaWYgKCFzdXJmYWNlKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICBzdXJmYWNlLmF0dGFjaExheWVyKGxheWVyKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBtb2R1bGUgcmVhY3RUbyB7XHJcbiAgICAgICAgZXhwb3J0IGZ1bmN0aW9uIGlzT3BlbiAodXBkYXRlcjogUG9wdXBVcGRhdGVyLCBvbGRWYWx1ZTogYm9vbGVhbiwgbmV3VmFsdWU6IGJvb2xlYW4pIHtcclxuICAgICAgICAgICAgKG5ld1ZhbHVlID09PSB0cnVlKSA/IHVwZGF0ZXIuc2hvdygpIDogdXBkYXRlci5oaWRlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBleHBvcnQgZnVuY3Rpb24gaG9yaXpvbnRhbE9mZnNldCAodXBkYXRlcjogUG9wdXBVcGRhdGVyLCBvbGRWYWx1ZTogbnVtYmVyLCBuZXdWYWx1ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgIHZhciB0cmVlID0gdXBkYXRlci50cmVlO1xyXG4gICAgICAgICAgICB2YXIgY2hpbGQgPSB0cmVlLnBvcHVwQ2hpbGQ7XHJcbiAgICAgICAgICAgIGlmICghY2hpbGQpXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIHZhciB0d2VlblggPSBuZXdWYWx1ZSAtIG9sZFZhbHVlO1xyXG4gICAgICAgICAgICBpZiAodHdlZW5YID09PSAwKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB0d2Vlbk9mZnNldChjaGlsZCwgdHdlZW5YLCAwKTtcclxuICAgICAgICAgICAgaWYgKHRyZWUubGF5ZXIpXHJcbiAgICAgICAgICAgICAgICB0cmVlLmxheWVyLmludmFsaWRhdGVNZWFzdXJlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBleHBvcnQgZnVuY3Rpb24gdmVydGljYWxPZmZzZXQgKHVwZGF0ZXI6IFBvcHVwVXBkYXRlciwgb2xkVmFsdWU6IG51bWJlciwgbmV3VmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgICAgICB2YXIgdHJlZSA9IHVwZGF0ZXIudHJlZTtcclxuICAgICAgICAgICAgdmFyIGNoaWxkID0gdHJlZS5wb3B1cENoaWxkO1xyXG4gICAgICAgICAgICBpZiAoIWNoaWxkKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB2YXIgdHdlZW5ZID0gbmV3VmFsdWUgLSBvbGRWYWx1ZTtcclxuICAgICAgICAgICAgaWYgKHR3ZWVuWSA9PT0gMClcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgdHdlZW5PZmZzZXQoY2hpbGQsIDAsIHR3ZWVuWSk7XHJcbiAgICAgICAgICAgIGlmICh0cmVlLmxheWVyKVxyXG4gICAgICAgICAgICAgICAgdHJlZS5sYXllci5pbnZhbGlkYXRlTWVhc3VyZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gdHdlZW5PZmZzZXQgKGNoaWxkOiBjb3JlLlVwZGF0ZXIsIHR3ZWVuWDogbnVtYmVyLCB0d2Vlblk6IG51bWJlcikge1xyXG4gICAgICAgICAgICBpZiAoY2hpbGQuYXNzZXRzLmNhcnJpZXJYZm9ybSkge1xyXG4gICAgICAgICAgICAgICAgbWF0My50cmFuc2xhdGUoY2hpbGQuYXNzZXRzLmNhcnJpZXJYZm9ybSwgdHdlZW5YLCB0d2VlblkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2NvcmUvVXBkYXRlclRyZWVcIiAvPlxyXG5cclxubW9kdWxlIG1pbmVydmEuY29udHJvbHMucG9wdXAge1xyXG4gICAgZXhwb3J0IGNsYXNzIFBvcHVwVXBkYXRlclRyZWUgZXh0ZW5kcyBjb3JlLlVwZGF0ZXJUcmVlIHtcclxuICAgICAgICBwb3B1cENoaWxkOiBjb3JlLlVwZGF0ZXIgPSB1bmRlZmluZWQ7IC8vYFBvcHVwYC5gQ2hpbGRgIHRoYXQgd2lsbCBiZSBhIGNoaWxkIG9mIGBsYXllcmBcclxuICAgICAgICBsYXllcjogY29yZS5VcGRhdGVyID0gdW5kZWZpbmVkOyAvL1Jvb3QgbGF5ZXIgdGhhdCB3aWxsIGJlIGF0dGFjaGVkIHRvIHRoZSBzdXJmYWNlXHJcbiAgICAgICAgaW5pdGlhdG9yU3VyZmFjZTogY29yZS5JU3VyZmFjZSA9IHVuZGVmaW5lZDtcclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvbnRyb2xzLnNjcm9sbGNvbnRlbnRwcmVzZW50ZXIge1xyXG4gICAgZXhwb3J0IG1vZHVsZSBoZWxwZXJzIHtcclxuICAgICAgICBleHBvcnQgZnVuY3Rpb24gY2xhbXBPZmZzZXRzIChzZDogSVNjcm9sbERhdGEpOiBib29sZWFuIHtcclxuICAgICAgICAgICAgdmFyIGNoYW5nZWQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIHZhciBjbGFtcFggPSBjbGFtcEhvcml6b250YWwoc2QsIHNkLmNhY2hlZE9mZnNldFgpO1xyXG4gICAgICAgICAgICBpZiAoIWFyZUNsb3NlKGNsYW1wWCwgc2Qub2Zmc2V0WCkpIHtcclxuICAgICAgICAgICAgICAgIHNkLm9mZnNldFggPSBjbGFtcFg7XHJcbiAgICAgICAgICAgICAgICBjaGFuZ2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIGNsYW1wWSA9IGNsYW1wVmVydGljYWwoc2QsIHNkLmNhY2hlZE9mZnNldFkpO1xyXG4gICAgICAgICAgICBpZiAoIWFyZUNsb3NlKGNsYW1wWSwgc2Qub2Zmc2V0WSkpIHtcclxuICAgICAgICAgICAgICAgIHNkLm9mZnNldFkgPSBjbGFtcFk7XHJcbiAgICAgICAgICAgICAgICBjaGFuZ2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGNoYW5nZWQ7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gY2xhbXBIb3Jpem9udGFsIChzZDogSVNjcm9sbERhdGEsIHg6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICAgICAgICAgIGlmICghc2QuY2FuSG9yaXpvbnRhbGx5U2Nyb2xsKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgICAgIHJldHVybiBNYXRoLm1heCgwLCBNYXRoLm1pbih4LCBzZC5leHRlbnRXaWR0aCAtIHNkLnZpZXdwb3J0V2lkdGgpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGNsYW1wVmVydGljYWwgKHNkOiBJU2Nyb2xsRGF0YSwgeTogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgICAgICAgICAgaWYgKCFzZC5jYW5WZXJ0aWNhbGx5U2Nyb2xsKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgICAgIHJldHVybiBNYXRoLm1heCgwLCBNYXRoLm1pbih5LCBzZC5leHRlbnRIZWlnaHQgLSBzZC52aWV3cG9ydEhlaWdodCkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGVwc2lsb246IG51bWJlciA9IDEuMTkyMDkzRS0wNztcclxuICAgICAgICB2YXIgYWRqdXN0bWVudDogbnVtYmVyID0gMTA7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGFyZUNsb3NlICh2YWwxOiBudW1iZXIsIHZhbDI6IG51bWJlcik6IGJvb2xlYW4ge1xyXG4gICAgICAgICAgICBpZiAodmFsMSA9PT0gdmFsMilcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB2YXIgc29mdGRpZmYgPSAoTWF0aC5hYnModmFsMSkgKyBNYXRoLmFicyh2YWwyKSArIGFkanVzdG1lbnQpICogZXBzaWxvbjtcclxuICAgICAgICAgICAgdmFyIGRpZmYgPSB2YWwxIC0gdmFsMjtcclxuICAgICAgICAgICAgcmV0dXJuIC1zb2Z0ZGlmZiA8IGRpZmYgJiYgZGlmZiA8IHNvZnRkaWZmO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvbnRyb2xzLnNjcm9sbGNvbnRlbnRwcmVzZW50ZXIge1xyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJU2Nyb2xsQ29udGVudFByZXNlbnRlclVwZGF0ZXJBc3NldHMgZXh0ZW5kcyBjb3JlLklVcGRhdGVyQXNzZXRzLCBtZWFzdXJlLklJbnB1dCwgYXJyYW5nZS5JSW5wdXQsIHJlbmRlci5JSW5wdXQge1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBjbGFzcyBTY3JvbGxDb250ZW50UHJlc2VudGVyVXBkYXRlciBleHRlbmRzIGNvcmUuVXBkYXRlciB7XHJcbiAgICAgICAgYXNzZXRzOiBJU2Nyb2xsQ29udGVudFByZXNlbnRlclVwZGF0ZXJBc3NldHM7XHJcblxyXG4gICAgICAgIGluaXQgKCkge1xyXG4gICAgICAgICAgICB0aGlzLnNldE1lYXN1cmVQaXBlKHNpbmdsZXRvbihtZWFzdXJlLlNjcm9sbENvbnRlbnRQcmVzZW50ZXJNZWFzdXJlUGlwZURlZikpXHJcbiAgICAgICAgICAgICAgICAuc2V0QXJyYW5nZVBpcGUoc2luZ2xldG9uKGFycmFuZ2UuU2Nyb2xsQ29udGVudFByZXNlbnRlckFycmFuZ2VQaXBlRGVmKSlcclxuICAgICAgICAgICAgICAgIC5zZXRSZW5kZXJQaXBlKHNpbmdsZXRvbihyZW5kZXIuU2Nyb2xsQ29udGVudFByZXNlbnRlclJlbmRlclBpcGVEZWYpKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBhc3NldHMgPSB0aGlzLmFzc2V0cztcclxuICAgICAgICAgICAgYXNzZXRzLmludGVybmFsQ2xpcCA9IG5ldyBSZWN0KCk7XHJcbiAgICAgICAgICAgIGFzc2V0cy5zY3JvbGxEYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgY2FuSG9yaXpvbnRhbGx5U2Nyb2xsOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGNhblZlcnRpY2FsbHlTY3JvbGw6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgb2Zmc2V0WDogMCxcclxuICAgICAgICAgICAgICAgIG9mZnNldFk6IDAsXHJcbiAgICAgICAgICAgICAgICBjYWNoZWRPZmZzZXRYOiAwLFxyXG4gICAgICAgICAgICAgICAgY2FjaGVkT2Zmc2V0WTogMCxcclxuICAgICAgICAgICAgICAgIHZpZXdwb3J0V2lkdGg6IDAsXHJcbiAgICAgICAgICAgICAgICB2aWV3cG9ydEhlaWdodDogMCxcclxuICAgICAgICAgICAgICAgIGV4dGVudFdpZHRoOiAwLFxyXG4gICAgICAgICAgICAgICAgZXh0ZW50SGVpZ2h0OiAwLFxyXG4gICAgICAgICAgICAgICAgbWF4RGVzaXJlZFdpZHRoOiAwLFxyXG4gICAgICAgICAgICAgICAgbWF4RGVzaXJlZEhlaWdodDogMCxcclxuICAgICAgICAgICAgICAgIGludmFsaWRhdGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHN1cGVyLmluaXQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb250cm9scy5zdGFja3BhbmVsIHtcclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSVN0YWNrUGFuZWxVcGRhdGVyQXNzZXRzIGV4dGVuZHMgcGFuZWwuSVBhbmVsVXBkYXRlckFzc2V0cywgbWVhc3VyZS5JSW5wdXQsIGFycmFuZ2UuSUlucHV0IHtcclxuICAgIH1cclxuICAgIGV4cG9ydCBjbGFzcyBTdGFja1BhbmVsVXBkYXRlciBleHRlbmRzIHBhbmVsLlBhbmVsVXBkYXRlciB7XHJcbiAgICAgICAgYXNzZXRzOiBJU3RhY2tQYW5lbFVwZGF0ZXJBc3NldHM7XHJcblxyXG4gICAgICAgIGluaXQgKCkge1xyXG4gICAgICAgICAgICB0aGlzLnNldE1lYXN1cmVQaXBlKHNpbmdsZXRvbihzdGFja3BhbmVsLm1lYXN1cmUuU3RhY2tQYW5lbE1lYXN1cmVQaXBlRGVmKSlcclxuICAgICAgICAgICAgICAgIC5zZXRBcnJhbmdlUGlwZShzaW5nbGV0b24oc3RhY2twYW5lbC5hcnJhbmdlLlN0YWNrUGFuZWxBcnJhbmdlUGlwZURlZikpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5hc3NldHMub3JpZW50YXRpb24gPSBPcmllbnRhdGlvbi5WZXJ0aWNhbDtcclxuXHJcbiAgICAgICAgICAgIHN1cGVyLmluaXQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb250cm9scy50ZXh0YmxvY2sge1xyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJVGV4dEJsb2NrVXBkYXRlckFzc2V0cyBleHRlbmRzIGNvcmUuSVVwZGF0ZXJBc3NldHMsIG1lYXN1cmUuSUlucHV0LCBhcnJhbmdlLklJbnB1dCwgcmVuZGVyLklJbnB1dCwgdGV4dC5JRG9jdW1lbnRDb250ZXh0IHtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgY2xhc3MgVGV4dEJsb2NrVXBkYXRlciBleHRlbmRzIGNvcmUuVXBkYXRlciB7XHJcbiAgICAgICAgYXNzZXRzOiBJVGV4dEJsb2NrVXBkYXRlckFzc2V0cztcclxuICAgICAgICB0cmVlOiBUZXh0QmxvY2tVcGRhdGVyVHJlZTtcclxuXHJcbiAgICAgICAgaW5pdCAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0VHJlZShuZXcgVGV4dEJsb2NrVXBkYXRlclRyZWUoKSlcclxuICAgICAgICAgICAgICAgIC5zZXRNZWFzdXJlUGlwZShzaW5nbGV0b24obWVhc3VyZS5UZXh0QmxvY2tNZWFzdXJlUGlwZURlZikpXHJcbiAgICAgICAgICAgICAgICAuc2V0QXJyYW5nZVBpcGUoc2luZ2xldG9uKGFycmFuZ2UuVGV4dEJsb2NrQXJyYW5nZVBpcGVEZWYpKVxyXG4gICAgICAgICAgICAgICAgLnNldFByb2Nlc3NVcFBpcGUoc2luZ2xldG9uKHByb2Nlc3N1cC5UZXh0QmxvY2tQcm9jZXNzVXBQaXBlRGVmKSlcclxuICAgICAgICAgICAgICAgIC5zZXRSZW5kZXJQaXBlKHNpbmdsZXRvbihyZW5kZXIuVGV4dEJsb2NrUmVuZGVyUGlwZURlZikpXHJcbiAgICAgICAgICAgICAgICAuc2V0SGl0VGVzdFBpcGUoc2luZ2xldG9uKGhpdHRlc3QuVGV4dEJsb2NrSGl0VGVzdFBpcGVEZWYpKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuc2V0RG9jdW1lbnQoKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBhc3NldHMgPSB0aGlzLmFzc2V0cztcclxuICAgICAgICAgICAgYXNzZXRzLnBhZGRpbmcgPSBuZXcgVGhpY2tuZXNzKCk7XHJcbiAgICAgICAgICAgIGFzc2V0cy5zZWxlY3Rpb25TdGFydCA9IDA7XHJcbiAgICAgICAgICAgIGFzc2V0cy5zZWxlY3Rpb25MZW5ndGggPSAwO1xyXG4gICAgICAgICAgICBhc3NldHMudGV4dFdyYXBwaW5nID0gVGV4dFdyYXBwaW5nLk5vV3JhcDtcclxuICAgICAgICAgICAgYXNzZXRzLnRleHRBbGlnbm1lbnQgPSBUZXh0QWxpZ25tZW50LkxlZnQ7XHJcbiAgICAgICAgICAgIGFzc2V0cy50ZXh0VHJpbW1pbmcgPSBUZXh0VHJpbW1pbmcuTm9uZTtcclxuICAgICAgICAgICAgYXNzZXRzLmxpbmVTdGFja2luZ1N0cmF0ZWd5ID0gTGluZVN0YWNraW5nU3RyYXRlZ3kuTWF4SGVpZ2h0O1xyXG4gICAgICAgICAgICBhc3NldHMubGluZUhlaWdodCA9IE5hTjtcclxuXHJcbiAgICAgICAgICAgIHN1cGVyLmluaXQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNldERvY3VtZW50IChkb2NkZWY/OiB0ZXh0LklEb2N1bWVudExheW91dERlZik6IFRleHRCbG9ja1VwZGF0ZXIge1xyXG4gICAgICAgICAgICBpZiAodGhpcy50cmVlLmRvYylcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB0aGlzLnRyZWUuZG9jID0gdGV4dC5jcmVhdGVEb2N1bWVudExheW91dChkb2NkZWYgfHwgbmV3IHRleHQuRG9jdW1lbnRMYXlvdXREZWYoKSk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaW52YWxpZGF0ZUZvbnQgKGZ1bGw/OiBib29sZWFuKSB7XHJcbiAgICAgICAgICAgIGlmIChmdWxsID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmludmFsaWRhdGVNZWFzdXJlKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmludmFsaWRhdGVBcnJhbmdlKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUJvdW5kcyh0cnVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmludmFsaWRhdGUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGludmFsaWRhdGVUZXh0TWV0cmljcyAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW52YWxpZGF0ZU1lYXN1cmUoKTtcclxuICAgICAgICAgICAgdGhpcy5pbnZhbGlkYXRlQXJyYW5nZSgpO1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUJvdW5kcyh0cnVlKTtcclxuICAgICAgICAgICAgdGhpcy5pbnZhbGlkYXRlKCk7XHJcbiAgICAgICAgICAgIHZhciBkb2Nhc3NldHMgPSB0aGlzLnRyZWUuZG9jLmFzc2V0cztcclxuICAgICAgICAgICAgZG9jYXNzZXRzLmFjdHVhbFdpZHRoID0gTmFOO1xyXG4gICAgICAgICAgICBkb2Nhc3NldHMuYWN0dWFsSGVpZ2h0ID0gTmFOO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvbnRyb2xzLnRleHRibG9jayB7XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElUZXh0QmxvY2tVcGRhdGVyVHJlZSB7XHJcbiAgICAgICAgZG9jOiB0ZXh0LklEb2N1bWVudExheW91dDx0ZXh0LklEb2N1bWVudExheW91dERlZiwgdGV4dC5JRG9jdW1lbnRBc3NldHM+O1xyXG4gICAgICAgIGxheW91dChjb25zdHJhaW50OiBTaXplLCBkb2NjdHg6IHRleHQuSURvY3VtZW50Q29udGV4dCk6IFNpemU7XHJcbiAgICAgICAgcmVuZGVyKGN0eDogY29yZS5yZW5kZXIuUmVuZGVyQ29udGV4dCwgZG9jY3R4OiB0ZXh0LklEb2N1bWVudENvbnRleHQpO1xyXG4gICAgICAgIHNldE1heFdpZHRoICh3aWR0aDogbnVtYmVyLCBkb2NjdHg6IHRleHQuSURvY3VtZW50Q29udGV4dCk7XHJcbiAgICAgICAgc2V0QXZhaWxhYmxlV2lkdGgod2lkdGg6IG51bWJlcik7XHJcbiAgICAgICAgZ2V0SG9yaXpvbnRhbE9mZnNldChkb2NjdHg6IHRleHQuSURvY3VtZW50Q29udGV4dCk6IG51bWJlcjtcclxuICAgICAgICB3YWxrVGV4dCgpOiBJV2Fsa2VyPHRleHQuVGV4dFVwZGF0ZXI+O1xyXG4gICAgICAgIG9uVGV4dEF0dGFjaGVkKGNoaWxkOiB0ZXh0LlRleHRVcGRhdGVyKTtcclxuICAgICAgICBvblRleHREZXRhY2hlZChjaGlsZDogdGV4dC5UZXh0VXBkYXRlcik7XHJcbiAgICB9XHJcbiAgICBleHBvcnQgY2xhc3MgVGV4dEJsb2NrVXBkYXRlclRyZWUgZXh0ZW5kcyBjb3JlLlVwZGF0ZXJUcmVlIGltcGxlbWVudHMgSVRleHRCbG9ja1VwZGF0ZXJUcmVlIHtcclxuICAgICAgICBkb2M6IHRleHQuSURvY3VtZW50TGF5b3V0PHRleHQuSURvY3VtZW50TGF5b3V0RGVmLCB0ZXh0LklEb2N1bWVudEFzc2V0cz47XHJcbiAgICAgICAgY2hpbGRyZW46IHRleHQuVGV4dFVwZGF0ZXJbXSA9IFtdO1xyXG5cclxuICAgICAgICBzZXRNYXhXaWR0aCAod2lkdGg6IG51bWJlciwgZG9jY3R4OiB0ZXh0LklEb2N1bWVudENvbnRleHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZG9jLmRlZi5zZXRNYXhXaWR0aChkb2NjdHgsIHRoaXMuZG9jLmFzc2V0cywgd2lkdGgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGF5b3V0IChjb25zdHJhaW50OiBTaXplLCBkb2NjdHg6IHRleHQuSURvY3VtZW50Q29udGV4dCk6IFNpemUge1xyXG4gICAgICAgICAgICB2YXIgZG9jID0gdGhpcy5kb2M7XHJcbiAgICAgICAgICAgIGRvYy5kZWYubGF5b3V0KGRvY2N0eCwgZG9jLmFzc2V0cywgY29uc3RyYWludCwgdGhpcy53YWxrVGV4dCgpKTtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBTaXplKGRvYy5hc3NldHMuYWN0dWFsV2lkdGgsIGRvYy5hc3NldHMuYWN0dWFsSGVpZ2h0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJlbmRlciAoY3R4OiBjb3JlLnJlbmRlci5SZW5kZXJDb250ZXh0LCBkb2NjdHg6IHRleHQuSURvY3VtZW50Q29udGV4dCkge1xyXG4gICAgICAgICAgICB2YXIgZG9jID0gdGhpcy5kb2M7XHJcbiAgICAgICAgICAgIGRvYy5kZWYucmVuZGVyKGN0eCwgZG9jY3R4LCBkb2MuYXNzZXRzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNldEF2YWlsYWJsZVdpZHRoICh3aWR0aDogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZG9jLmFzc2V0cy5hdmFpbGFibGVXaWR0aCA9IHdpZHRoO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZ2V0SG9yaXpvbnRhbE9mZnNldCAoZG9jY3R4OiB0ZXh0LklEb2N1bWVudENvbnRleHQpOiBudW1iZXIge1xyXG4gICAgICAgICAgICB2YXIgZG9jID0gdGhpcy5kb2M7XHJcbiAgICAgICAgICAgIHJldHVybiBkb2MuZGVmLmdldEhvcml6b250YWxBbGlnbm1lbnRYKGRvY2N0eCwgZG9jLmFzc2V0cywgZG9jLmFzc2V0cy5hY3R1YWxXaWR0aCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGVhclRleHQgKCkge1xyXG4gICAgICAgICAgICB0aGlzLmNoaWxkcmVuLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB3YWxrVGV4dCAoKTogSVdhbGtlcjx0ZXh0LlRleHRVcGRhdGVyPiB7XHJcbiAgICAgICAgICAgIHZhciBpID0gLTE7XHJcbiAgICAgICAgICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50OiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICBzdGVwOiBmdW5jdGlvbiAoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudCA9IGNoaWxkcmVuW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnQgIT09IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG9uVGV4dEF0dGFjaGVkIChjaGlsZDogdGV4dC5UZXh0VXBkYXRlciwgaW5kZXg/OiBudW1iZXIpIHtcclxuICAgICAgICAgICAgaWYgKGluZGV4ID09IG51bGwgfHwgaW5kZXggPCAwIHx8IGluZGV4ID49IHRoaXMuY2hpbGRyZW4ubGVuZ3RoKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKGNoaWxkKTtcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5zcGxpY2UoaW5kZXgsIDAsIGNoaWxkKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG9uVGV4dERldGFjaGVkIChjaGlsZDogdGV4dC5UZXh0VXBkYXRlcikge1xyXG4gICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmNoaWxkcmVuLmluZGV4T2YoY2hpbGQpO1xyXG4gICAgICAgICAgICBpZiAoaW5kZXggPiAtMSlcclxuICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4uc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb250cm9scy50ZXh0Ym94dmlldyB7XHJcbiAgICB2YXIgQ1VSU09SX0JMSU5LX0RJVklERVIgPSAzO1xyXG4gICAgdmFyIENVUlNPUl9CTElOS19PRkZfTVVMVElQTElFUiA9IDI7XHJcbiAgICB2YXIgQ1VSU09SX0JMSU5LX0RFTEFZX01VTFRJUExJRVIgPSAzO1xyXG4gICAgdmFyIENVUlNPUl9CTElOS19PTl9NVUxUSVBMSUVSID0gNDtcclxuICAgIHZhciBDVVJTT1JfQkxJTktfVElNRU9VVF9ERUZBVUxUID0gOTAwO1xyXG5cclxuICAgIGV4cG9ydCBjbGFzcyBCbGlua2VyIHtcclxuICAgICAgICBpc0VuYWJsZWQ6IGJvb2xlYW4gPSB0cnVlO1xyXG4gICAgICAgIGlzVmlzaWJsZTogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAgICAgICBwcml2YXRlICQkYmxpbmtfZGVsYXkgPSBDVVJTT1JfQkxJTktfVElNRU9VVF9ERUZBVUxUO1xyXG4gICAgICAgIHByaXZhdGUgJCR0aW1lb3V0ID0gMDtcclxuICAgICAgICBwcml2YXRlICQkb25DaGFuZ2U6IChpc1Zpc2libGU6IGJvb2xlYW4pID0+IHZvaWQ7XHJcblxyXG4gICAgICAgIGNvbnN0cnVjdG9yIChvbkNoYW5nZTogKGlzVmlzaWJsZTogYm9vbGVhbikgPT4gdm9pZCkge1xyXG4gICAgICAgICAgICB0aGlzLiQkb25DaGFuZ2UgPSBvbkNoYW5nZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGRlbGF5ICgpIHtcclxuICAgICAgICAgICAgdGhpcy4kZGlzY29ubmVjdCgpO1xyXG4gICAgICAgICAgICB0aGlzLiRjb25uZWN0KENVUlNPUl9CTElOS19ERUxBWV9NVUxUSVBMSUVSKTtcclxuICAgICAgICAgICAgdGhpcy4kc2hvdygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYmVnaW4gKCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy4kJHRpbWVvdXQgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuJGNvbm5lY3QoQ1VSU09SX0JMSU5LX09OX01VTFRJUExJRVIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy4kc2hvdygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBlbmQgKCkge1xyXG4gICAgICAgICAgICB0aGlzLiRkaXNjb25uZWN0KCk7XHJcbiAgICAgICAgICAgIHRoaXMuJGhpZGUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgJGNvbm5lY3QgKG11bHRpcGxpZXI6IG51bWJlcikge1xyXG4gICAgICAgICAgICB2YXIgZGVsYXkgPSB0aGlzLiQkYmxpbmtfZGVsYXkgKiBtdWx0aXBsaWVyIC8gQ1VSU09SX0JMSU5LX0RJVklERVI7XHJcbiAgICAgICAgICAgIHRoaXMuJCR0aW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoKCkgPT4gdGhpcy4kYmxpbmsoKSwgZGVsYXkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSAkZGlzY29ubmVjdCAoKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLiQkdGltZW91dCAhPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgd2luZG93LmNsZWFyVGltZW91dCh0aGlzLiQkdGltZW91dCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiQkdGltZW91dCA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgJGJsaW5rICgpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNWaXNpYmxlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRoaWRlKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRjb25uZWN0KENVUlNPUl9CTElOS19PRkZfTVVMVElQTElFUik7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRzaG93KCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRjb25uZWN0KENVUlNPUl9CTElOS19PTl9NVUxUSVBMSUVSKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSAkc2hvdyAoKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlzVmlzaWJsZSlcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgdGhpcy5pc1Zpc2libGUgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLiQkb25DaGFuZ2UgJiYgdGhpcy4kJG9uQ2hhbmdlKHRydWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSAkaGlkZSAoKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5pc1Zpc2libGUpXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIHRoaXMuaXNWaXNpYmxlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuJCRvbkNoYW5nZSAmJiB0aGlzLiQkb25DaGFuZ2UoZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvbnRyb2xzLnRleHRib3h2aWV3IHtcclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSVRleHRCb3hWaWV3VXBkYXRlckFzc2V0cyBleHRlbmRzIGNvcmUuSVVwZGF0ZXJBc3NldHMsIG1lYXN1cmUuSUlucHV0LCBhcnJhbmdlLklJbnB1dCwgcmVuZGVyLklJbnB1dCwgdGV4dC5JRG9jdW1lbnRDb250ZXh0IHtcclxuICAgICAgICBpc1JlYWRPbmx5OiBib29sZWFuO1xyXG4gICAgICAgIGlzRm9jdXNlZDogYm9vbGVhbjtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgY2xhc3MgVGV4dEJveFZpZXdVcGRhdGVyIGV4dGVuZHMgY29yZS5VcGRhdGVyIHtcclxuICAgICAgICBhc3NldHM6IElUZXh0Qm94Vmlld1VwZGF0ZXJBc3NldHM7XHJcbiAgICAgICAgdHJlZTogVGV4dEJveFZpZXdVcGRhdGVyVHJlZTtcclxuICAgICAgICBibGlua2VyOiBCbGlua2VyO1xyXG5cclxuICAgICAgICBpbml0ICgpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRUcmVlKG5ldyBUZXh0Qm94Vmlld1VwZGF0ZXJUcmVlKCkpXHJcbiAgICAgICAgICAgICAgICAuc2V0TWVhc3VyZVBpcGUoc2luZ2xldG9uKG1lYXN1cmUuVGV4dEJveFZpZXdNZWFzdXJlUGlwZURlZikpXHJcbiAgICAgICAgICAgICAgICAuc2V0QXJyYW5nZVBpcGUoc2luZ2xldG9uKGFycmFuZ2UuVGV4dEJveFZpZXdBcnJhbmdlUGlwZURlZikpXHJcbiAgICAgICAgICAgICAgICAuc2V0UHJvY2Vzc1VwUGlwZShzaW5nbGV0b24ocHJvY2Vzc3VwLlRleHRCb3hWaWV3UHJvY2Vzc1VwUGlwZURlZikpXHJcbiAgICAgICAgICAgICAgICAuc2V0UmVuZGVyUGlwZShzaW5nbGV0b24ocmVuZGVyLlRleHRCb3hWaWV3UmVuZGVyUGlwZURlZikpXHJcbiAgICAgICAgICAgICAgICAuc2V0SGl0VGVzdFBpcGUoc2luZ2xldG9uKGhpdHRlc3QuVGV4dEJveFZpZXdIaXRUZXN0UGlwZURlZikpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5zZXREb2N1bWVudCgpO1xyXG5cclxuICAgICAgICAgICAgdmFyIGFzc2V0cyA9IHRoaXMuYXNzZXRzO1xyXG4gICAgICAgICAgICBhc3NldHMuc2VsZWN0aW9uU3RhcnQgPSAwO1xyXG4gICAgICAgICAgICBhc3NldHMuc2VsZWN0aW9uTGVuZ3RoID0gMDtcclxuICAgICAgICAgICAgYXNzZXRzLnRleHRXcmFwcGluZyA9IFRleHRXcmFwcGluZy5Ob1dyYXA7XHJcbiAgICAgICAgICAgIGFzc2V0cy50ZXh0QWxpZ25tZW50ID0gVGV4dEFsaWdubWVudC5MZWZ0O1xyXG4gICAgICAgICAgICBhc3NldHMubGluZVN0YWNraW5nU3RyYXRlZ3kgPSBMaW5lU3RhY2tpbmdTdHJhdGVneS5NYXhIZWlnaHQ7XHJcbiAgICAgICAgICAgIGFzc2V0cy5saW5lSGVpZ2h0ID0gTmFOO1xyXG5cclxuICAgICAgICAgICAgYXNzZXRzLmlzQ2FyZXRWaXNpYmxlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGFzc2V0cy5jYXJldEJydXNoID0gbnVsbDtcclxuICAgICAgICAgICAgYXNzZXRzLmNhcmV0UmVnaW9uID0gbmV3IFJlY3QoKTtcclxuICAgICAgICAgICAgYXNzZXRzLmlzUmVhZE9ubHkgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuYmxpbmtlciA9IG5ldyBCbGlua2VyKChpc1Zpc2libGUpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYXNzZXRzLmlzQ2FyZXRWaXNpYmxlID0gaXNWaXNpYmxlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pbnZhbGlkYXRlQ2FyZXQoKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBzdXBlci5pbml0KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZXREb2N1bWVudCAoZG9jZGVmPzogdGV4dC5JRG9jdW1lbnRMYXlvdXREZWYpOiBUZXh0Qm94Vmlld1VwZGF0ZXIge1xyXG4gICAgICAgICAgICBpZiAodGhpcy50cmVlLmRvYylcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB0aGlzLnRyZWUuZG9jID0gdGV4dC5jcmVhdGVEb2N1bWVudExheW91dChkb2NkZWYgfHwgbmV3IHRleHQuRG9jdW1lbnRMYXlvdXREZWYoKSk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZ2V0Q3Vyc29yRnJvbVBvaW50IChwb2ludDogSVBvaW50KTogbnVtYmVyIHtcclxuICAgICAgICAgICAgdmFyIGRvYyA9IHRoaXMudHJlZS5kb2M7XHJcbiAgICAgICAgICAgIHJldHVybiBkb2MuZGVmLmdldEN1cnNvckZyb21Qb2ludChwb2ludCwgdGhpcy5hc3NldHMsIGRvYy5hc3NldHMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaW52YWxpZGF0ZUZvbnQgKGZ1bGw/OiBib29sZWFuKSB7XHJcbiAgICAgICAgICAgIGlmIChmdWxsID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmludmFsaWRhdGVNZWFzdXJlKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmludmFsaWRhdGVBcnJhbmdlKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUJvdW5kcyh0cnVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmludmFsaWRhdGUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGludmFsaWRhdGVUZXh0TWV0cmljcyAoKTogVGV4dEJveFZpZXdVcGRhdGVyIHtcclxuICAgICAgICAgICAgdGhpcy5pbnZhbGlkYXRlTWVhc3VyZSgpXHJcbiAgICAgICAgICAgICAgICAuaW52YWxpZGF0ZUFycmFuZ2UoKVxyXG4gICAgICAgICAgICAgICAgLnVwZGF0ZUJvdW5kcyh0cnVlKVxyXG4gICAgICAgICAgICAgICAgLmludmFsaWRhdGUoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpbnZhbGlkYXRlTWVhc3VyZSAoKTogVGV4dEJveFZpZXdVcGRhdGVyIHtcclxuICAgICAgICAgICAgc3VwZXIuaW52YWxpZGF0ZU1lYXN1cmUoKTtcclxuICAgICAgICAgICAgdmFyIGRvY2Fzc2V0cyA9IHRoaXMudHJlZS5kb2MuYXNzZXRzO1xyXG4gICAgICAgICAgICBkb2Nhc3NldHMuYWN0dWFsV2lkdGggPSBOYU47XHJcbiAgICAgICAgICAgIGRvY2Fzc2V0cy5hY3R1YWxIZWlnaHQgPSBOYU47XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaW52YWxpZGF0ZUNhcmV0ICgpIHtcclxuICAgICAgICAgICAgdmFyIGFzc2V0cyA9IHRoaXMuYXNzZXRzO1xyXG4gICAgICAgICAgICB2YXIgcmVnaW9uID0gbmV3IFJlY3QoKTtcclxuICAgICAgICAgICAgUmVjdC5jb3B5VG8oYXNzZXRzLmNhcmV0UmVnaW9uLCByZWdpb24pO1xyXG4gICAgICAgICAgICBSZWN0LnRyYW5zZm9ybShyZWdpb24sIGFzc2V0cy5hYnNvbHV0ZVhmb3JtKTtcclxuICAgICAgICAgICAgdGhpcy5pbnZhbGlkYXRlKHJlZ2lvbilcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGludmFsaWRhdGVTZWxlY3Rpb25TdGFydCAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMudHJlZS5kb2MuYXNzZXRzLnNlbENhY2hlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLmludmFsaWRhdGVDYXJldFJlZ2lvbigpO1xyXG4gICAgICAgICAgICB0aGlzLnJlc2V0Q2FyZXRCbGlua2VyKHRydWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaW52YWxpZGF0ZVNlbGVjdGlvbkxlbmd0aCAoc3dpdGNoaW5nOiBib29sZWFuKSB7XHJcbiAgICAgICAgICAgIHRoaXMudHJlZS5kb2MuYXNzZXRzLnNlbENhY2hlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLmludmFsaWRhdGUoKTtcclxuICAgICAgICAgICAgdGhpcy5yZXNldENhcmV0Qmxpbmtlcihzd2l0Y2hpbmcpO1xyXG4gICAgICAgICAgICBpZiAoc3dpdGNoaW5nKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5pbnZhbGlkYXRlQ2FyZXRSZWdpb24oKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGludmFsaWRhdGVDYXJldFJlZ2lvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW52YWxpZGF0ZUNhcmV0KCk7XHJcbiAgICAgICAgICAgIHZhciBjciA9IHRoaXMuYXNzZXRzLmNhcmV0UmVnaW9uO1xyXG4gICAgICAgICAgICBjci54ID0gY3IueSA9IGNyLndpZHRoID0gY3IuaGVpZ2h0ID0gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJlc2V0Q2FyZXRCbGlua2VyIChzaG91bGREZWxheTogYm9vbGVhbikge1xyXG4gICAgICAgICAgICB2YXIgYXNzZXRzID0gdGhpcy5hc3NldHM7XHJcbiAgICAgICAgICAgIHZhciBibGlua2VyID0gdGhpcy5ibGlua2VyO1xyXG5cclxuICAgICAgICAgICAgaWYgKGFzc2V0cy5zZWxlY3Rpb25MZW5ndGggPiAwIHx8IGFzc2V0cy5pc1JlYWRPbmx5IHx8ICFhc3NldHMuaXNGb2N1c2VkKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGJsaW5rZXIuZW5kKCk7XHJcbiAgICAgICAgICAgIGlmIChzaG91bGREZWxheSlcclxuICAgICAgICAgICAgICAgIHJldHVybiBibGlua2VyLmRlbGF5KCk7XHJcbiAgICAgICAgICAgIHJldHVybiBibGlua2VyLmJlZ2luKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwibW9kdWxlIG1pbmVydmEuY29udHJvbHMudGV4dGJveHZpZXcge1xyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJVGV4dEJveFZpZXdVcGRhdGVyVHJlZSB7XHJcbiAgICAgICAgZG9jOiB0ZXh0LklEb2N1bWVudExheW91dDx0ZXh0LklEb2N1bWVudExheW91dERlZiwgdGV4dC5JRG9jdW1lbnRBc3NldHM+O1xyXG4gICAgICAgIGxheW91dChjb25zdHJhaW50OiBTaXplLCBkb2NjdHg6IHRleHQuSURvY3VtZW50Q29udGV4dCk6IFNpemU7XHJcbiAgICAgICAgcmVuZGVyKGN0eDogY29yZS5yZW5kZXIuUmVuZGVyQ29udGV4dCwgZG9jY3R4OiB0ZXh0LklEb2N1bWVudENvbnRleHQpO1xyXG4gICAgICAgIGdldENhcmV0UmVnaW9uIChkb2NjdHg6IHRleHQuSURvY3VtZW50Q29udGV4dCk6IFJlY3Q7XHJcbiAgICAgICAgc2V0QXZhaWxhYmxlV2lkdGgod2lkdGg6IG51bWJlcik7XHJcbiAgICAgICAgZ2V0SG9yaXpvbnRhbE9mZnNldChkb2NjdHg6IHRleHQuSURvY3VtZW50Q29udGV4dCk6IG51bWJlcjtcclxuICAgICAgICB3YWxrVGV4dCgpOiBJV2Fsa2VyPHRleHQuVGV4dFVwZGF0ZXI+O1xyXG4gICAgICAgIG9uVGV4dEF0dGFjaGVkKGNoaWxkOiB0ZXh0LlRleHRVcGRhdGVyKTtcclxuICAgICAgICBvblRleHREZXRhY2hlZChjaGlsZDogdGV4dC5UZXh0VXBkYXRlcik7XHJcbiAgICB9XHJcbiAgICBleHBvcnQgY2xhc3MgVGV4dEJveFZpZXdVcGRhdGVyVHJlZSBleHRlbmRzIGNvcmUuVXBkYXRlclRyZWUgaW1wbGVtZW50cyBJVGV4dEJveFZpZXdVcGRhdGVyVHJlZSB7XHJcbiAgICAgICAgZG9jOiB0ZXh0LklEb2N1bWVudExheW91dDx0ZXh0LklEb2N1bWVudExheW91dERlZiwgdGV4dC5JRG9jdW1lbnRBc3NldHM+O1xyXG4gICAgICAgIGNoaWxkcmVuOiB0ZXh0LlRleHRVcGRhdGVyW10gPSBbXTtcclxuXHJcbiAgICAgICAgc2V0TWF4V2lkdGggKHdpZHRoOiBudW1iZXIsIGRvY2N0eDogdGV4dC5JRG9jdW1lbnRDb250ZXh0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRvYy5kZWYuc2V0TWF4V2lkdGgoZG9jY3R4LCB0aGlzLmRvYy5hc3NldHMsIHdpZHRoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxheW91dCAoY29uc3RyYWludDogU2l6ZSwgZG9jY3R4OiB0ZXh0LklEb2N1bWVudENvbnRleHQpOiBTaXplIHtcclxuICAgICAgICAgICAgdmFyIGRvYyA9IHRoaXMuZG9jO1xyXG4gICAgICAgICAgICBkb2MuZGVmLmxheW91dChkb2NjdHgsIGRvYy5hc3NldHMsIGNvbnN0cmFpbnQsIHRoaXMud2Fsa1RleHQoKSk7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgU2l6ZShkb2MuYXNzZXRzLmFjdHVhbFdpZHRoLCBkb2MuYXNzZXRzLmFjdHVhbEhlaWdodCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZW5kZXIgKGN0eDogY29yZS5yZW5kZXIuUmVuZGVyQ29udGV4dCwgZG9jY3R4OiB0ZXh0LklEb2N1bWVudENvbnRleHQpIHtcclxuICAgICAgICAgICAgdmFyIGRvYyA9IHRoaXMuZG9jO1xyXG4gICAgICAgICAgICBkb2MuZGVmLnJlbmRlcihjdHgsIGRvY2N0eCwgZG9jLmFzc2V0cyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZXRBdmFpbGFibGVXaWR0aCAod2lkdGg6IG51bWJlcikge1xyXG4gICAgICAgICAgICB0aGlzLmRvYy5hc3NldHMuYXZhaWxhYmxlV2lkdGggPSB3aWR0aDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdldEhvcml6b250YWxPZmZzZXQgKGRvY2N0eDogdGV4dC5JRG9jdW1lbnRDb250ZXh0KTogbnVtYmVyIHtcclxuICAgICAgICAgICAgdmFyIGRvYyA9IHRoaXMuZG9jO1xyXG4gICAgICAgICAgICByZXR1cm4gZG9jLmRlZi5nZXRIb3Jpem9udGFsQWxpZ25tZW50WChkb2NjdHgsIGRvYy5hc3NldHMsIGRvYy5hc3NldHMuYWN0dWFsV2lkdGgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZ2V0Q2FyZXRSZWdpb24gKGRvY2N0eDogdGV4dC5JRG9jdW1lbnRDb250ZXh0KTogUmVjdCB7XHJcbiAgICAgICAgICAgIHZhciBkb2MgPSB0aGlzLmRvYztcclxuICAgICAgICAgICAgcmV0dXJuIGRvYy5kZWYuZ2V0Q2FyZXRGcm9tQ3Vyc29yKGRvY2N0eCwgZG9jLmFzc2V0cyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGVhclRleHQgKCkge1xyXG4gICAgICAgICAgICB0aGlzLmNoaWxkcmVuLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB3YWxrVGV4dCAoKTogSVdhbGtlcjx0ZXh0LlRleHRVcGRhdGVyPiB7XHJcbiAgICAgICAgICAgIHZhciBpID0gLTE7XHJcbiAgICAgICAgICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50OiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICBzdGVwOiBmdW5jdGlvbiAoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudCA9IGNoaWxkcmVuW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnQgIT09IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG9uVGV4dEF0dGFjaGVkIChjaGlsZDogdGV4dC5UZXh0VXBkYXRlciwgaW5kZXg/OiBudW1iZXIpIHtcclxuICAgICAgICAgICAgaWYgKGluZGV4ID09IG51bGwgfHwgaW5kZXggPCAwIHx8IGluZGV4ID49IHRoaXMuY2hpbGRyZW4ubGVuZ3RoKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKGNoaWxkKTtcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5zcGxpY2UoaW5kZXgsIDAsIGNoaWxkKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG9uVGV4dERldGFjaGVkIChjaGlsZDogdGV4dC5UZXh0VXBkYXRlcikge1xyXG4gICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmNoaWxkcmVuLmluZGV4T2YoY2hpbGQpO1xyXG4gICAgICAgICAgICBpZiAoaW5kZXggPiAtMSlcclxuICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4uc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb250cm9scy51c2VyY29udHJvbCB7XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElVc2VyQ29udHJvbFVwZGF0ZXJBc3NldHMgZXh0ZW5kcyBjb250cm9sLklDb250cm9sVXBkYXRlckFzc2V0cywgbWVhc3VyZS5JSW5wdXQsIGFycmFuZ2UuSUlucHV0IHtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgY2xhc3MgVXNlckNvbnRyb2xVcGRhdGVyIGV4dGVuZHMgY29udHJvbHMuY29udHJvbC5Db250cm9sVXBkYXRlciB7XHJcbiAgICAgICAgYXNzZXRzOiBJVXNlckNvbnRyb2xVcGRhdGVyQXNzZXRzO1xyXG5cclxuICAgICAgICBpbml0ICgpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRNZWFzdXJlUGlwZShzaW5nbGV0b24obWVhc3VyZS5Vc2VyQ29udHJvbE1lYXN1cmVQaXBlRGVmKSlcclxuICAgICAgICAgICAgICAgIC5zZXRBcnJhbmdlUGlwZShzaW5nbGV0b24oYXJyYW5nZS5Vc2VyQ29udHJvbEFycmFuZ2VQaXBlRGVmKSlcclxuICAgICAgICAgICAgICAgIC5zZXRQcm9jZXNzRG93blBpcGUoc2luZ2xldG9uKHByb2Nlc3Nkb3duLlVzZXJDb250cm9sUHJvY2Vzc0Rvd25QaXBlRGVmKSk7XHJcblxyXG4gICAgICAgICAgICB2YXIgYXNzZXRzID0gdGhpcy5hc3NldHM7XHJcbiAgICAgICAgICAgIGFzc2V0cy5icmVha0xheW91dENsaXAgPSB0cnVlO1xyXG4gICAgICAgICAgICBhc3NldHMucGFkZGluZyA9IG5ldyBUaGlja25lc3MoKTtcclxuICAgICAgICAgICAgYXNzZXRzLmJvcmRlclRoaWNrbmVzcyA9IG5ldyBUaGlja25lc3MoKTtcclxuXHJcbiAgICAgICAgICAgIHN1cGVyLmluaXQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb250cm9scy52aWRlbyB7XG4gICAgZXhwb3J0IGludGVyZmFjZSBJVmlkZW9VcGRhdGVyQXNzZXRzIGV4dGVuZHMgaW1hZ2UuSUltYWdlVXBkYXRlckFzc2V0cyB7XG4gICAgICAgIHNvdXJjZTogSVZpZGVvU291cmNlO1xuICAgIH1cblxuICAgIGV4cG9ydCBjbGFzcyBWaWRlb1VwZGF0ZXIgZXh0ZW5kcyBpbWFnZS5JbWFnZVVwZGF0ZXIge1xuICAgICAgICBhc3NldHM6IElWaWRlb1VwZGF0ZXJBc3NldHM7XG5cbiAgICAgICAgb25TdXJmYWNlQ2hhbmdlZChvbGRTdXJmYWNlOiBjb3JlLklTdXJmYWNlLCBuZXdTdXJmYWNlOiBjb3JlLklTdXJmYWNlKSB7XG4gICAgICAgICAgICBpZiAob2xkU3VyZmFjZSlcbiAgICAgICAgICAgICAgICBvbGRTdXJmYWNlLnVuaG9va1ByZXJlbmRlcih0aGlzKTtcbiAgICAgICAgICAgIGlmIChuZXdTdXJmYWNlKVxuICAgICAgICAgICAgICAgIG5ld1N1cmZhY2UuaG9va1ByZXJlbmRlcih0aGlzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByZVJlbmRlcigpIHtcbiAgICAgICAgICAgIHZhciBhc3NldHMgPSB0aGlzLmFzc2V0cztcbiAgICAgICAgICAgIGlmIChhc3NldHMuc291cmNlICYmIGFzc2V0cy5zb3VyY2UuZ2V0SXNQbGF5aW5nKCkpXG4gICAgICAgICAgICAgICAgdGhpcy5pbnZhbGlkYXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG59IiwibW9kdWxlIG1pbmVydmEuY29udHJvbHMudmlydHVhbGl6aW5ncGFuZWwge1xyXG4gICAgZXhwb3J0IGNsYXNzIFZpcnR1YWxpemluZ1BhbmVsVXBkYXRlciBleHRlbmRzIHBhbmVsLlBhbmVsVXBkYXRlciB7XHJcbiAgICAgICAgdHJlZTogVmlydHVhbGl6aW5nUGFuZWxVcGRhdGVyVHJlZTtcclxuXHJcbiAgICAgICAgaW5pdCgpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRUcmVlKG5ldyBWaXJ0dWFsaXppbmdQYW5lbFVwZGF0ZXJUcmVlKCkpO1xyXG5cclxuICAgICAgICAgICAgc3VwZXIuaW5pdCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvbnRyb2xzLnZpcnR1YWxpemluZ3BhbmVsIHtcclxuICAgIGV4cG9ydCB2YXIgTk9fQ09OVEFJTkVSX09XTkVSOiBJVmlydHVhbGl6aW5nQ29udGFpbmVyT3duZXIgPSB7XHJcbiAgICAgICAgaXRlbUNvdW50OiAwLFxyXG4gICAgICAgIGNyZWF0ZUdlbmVyYXRvcjogZnVuY3Rpb24gKCk6IElWaXJ0dWFsaXppbmdHZW5lcmF0b3Ige1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgY3VycmVudDogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICAgICAgZ2VuZXJhdGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSxcclxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIChpbmRleDogbnVtYmVyLCBjb3VudDogbnVtYmVyKSB7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnQgY2xhc3MgVmlydHVhbGl6aW5nUGFuZWxVcGRhdGVyVHJlZSBleHRlbmRzIHBhbmVsLlBhbmVsVXBkYXRlclRyZWUge1xyXG4gICAgICAgIGNvbnRhaW5lck93bmVyOiBJVmlydHVhbGl6aW5nQ29udGFpbmVyT3duZXIgPSBOT19DT05UQUlORVJfT1dORVI7XHJcbiAgICB9XHJcbn0iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vdmlydHVhbGl6aW5ncGFuZWwvVmlydHVhbGl6aW5nUGFuZWxVcGRhdGVyXCIgLz5cclxuXHJcbm1vZHVsZSBtaW5lcnZhLmNvbnRyb2xzLnZpcnR1YWxpemluZ3N0YWNrcGFuZWwge1xyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJVmlydHVhbGl6aW5nU3RhY2tQYW5lbFVwZGF0ZXJBc3NldHMgZXh0ZW5kcyBwYW5lbC5JUGFuZWxVcGRhdGVyQXNzZXRzLCBtZWFzdXJlLklJbnB1dCwgYXJyYW5nZS5JSW5wdXQge1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBjbGFzcyBWaXJ0dWFsaXppbmdTdGFja1BhbmVsVXBkYXRlciBleHRlbmRzIHZpcnR1YWxpemluZ3BhbmVsLlZpcnR1YWxpemluZ1BhbmVsVXBkYXRlciB7XHJcbiAgICAgICAgYXNzZXRzOiBJVmlydHVhbGl6aW5nU3RhY2tQYW5lbFVwZGF0ZXJBc3NldHM7XHJcblxyXG4gICAgICAgIGluaXQgKCkge1xyXG4gICAgICAgICAgICB0aGlzLnNldE1lYXN1cmVQaXBlKHNpbmdsZXRvbihtZWFzdXJlLlZpcnR1YWxpemluZ1N0YWNrUGFuZWxNZWFzdXJlUGlwZURlZikpXHJcbiAgICAgICAgICAgICAgICAuc2V0QXJyYW5nZVBpcGUoc2luZ2xldG9uKGFycmFuZ2UuVmlydHVhbGl6aW5nU3RhY2tQYW5lbEFycmFuZ2VQaXBlRGVmKSk7XHJcblxyXG4gICAgICAgICAgICB2YXIgYXNzZXRzID0gdGhpcy5hc3NldHM7XHJcbiAgICAgICAgICAgIGFzc2V0cy5vcmllbnRhdGlvbiA9IE9yaWVudGF0aW9uLlZlcnRpY2FsO1xyXG4gICAgICAgICAgICBhc3NldHMuc2Nyb2xsRGF0YSA9IHtcclxuICAgICAgICAgICAgICAgIGNhbkhvcml6b250YWxseVNjcm9sbDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBjYW5WZXJ0aWNhbGx5U2Nyb2xsOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIG9mZnNldFg6IDAsXHJcbiAgICAgICAgICAgICAgICBvZmZzZXRZOiAwLFxyXG4gICAgICAgICAgICAgICAgY2FjaGVkT2Zmc2V0WDogMCxcclxuICAgICAgICAgICAgICAgIGNhY2hlZE9mZnNldFk6IDAsXHJcbiAgICAgICAgICAgICAgICB2aWV3cG9ydFdpZHRoOiAwLFxyXG4gICAgICAgICAgICAgICAgdmlld3BvcnRIZWlnaHQ6IDAsXHJcbiAgICAgICAgICAgICAgICBleHRlbnRXaWR0aDogMCxcclxuICAgICAgICAgICAgICAgIGV4dGVudEhlaWdodDogMCxcclxuICAgICAgICAgICAgICAgIG1heERlc2lyZWRXaWR0aDogMCxcclxuICAgICAgICAgICAgICAgIG1heERlc2lyZWRIZWlnaHQ6IDAsXHJcbiAgICAgICAgICAgICAgICBpbnZhbGlkYXRlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBzdXBlci5pbml0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwibW9kdWxlIG1pbmVydmEuY29yZS5hcnJhbmdlIHtcclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUFycmFuZ2VCaW5kZXIge1xyXG4gICAgICAgIGJpbmQgKHVwZGF0ZXI6IFVwZGF0ZXIpOiBib29sZWFuO1xyXG4gICAgfVxyXG4gICAgZXhwb3J0IGNsYXNzIEFycmFuZ2VCaW5kZXIgaW1wbGVtZW50cyBJQXJyYW5nZUJpbmRlciB7XHJcbiAgICAgICAgYmluZCAodXBkYXRlcjogVXBkYXRlcik6IGJvb2xlYW4ge1xyXG4gICAgICAgICAgICB2YXIgYXNzZXRzID0gdXBkYXRlci5hc3NldHM7XHJcbiAgICAgICAgICAgIHZhciB0cmVlID0gdXBkYXRlci50cmVlO1xyXG4gICAgICAgICAgICB2YXIgbGFzdCA9IGFzc2V0cy5sYXlvdXRTbG90IHx8IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgaWYgKCF0cmVlLnZpc3VhbFBhcmVudCkge1xyXG4gICAgICAgICAgICAgICAgbGFzdCA9IG5ldyBSZWN0KCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmV4cGFuZFZpZXdwb3J0KGxhc3QsIGFzc2V0cywgdHJlZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNoaWZ0Vmlld3BvcnQobGFzdCwgdXBkYXRlcik7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChsYXN0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdXBkYXRlci5hcnJhbmdlKGxhc3QpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRyZWUudmlzdWFsUGFyZW50KSB7XHJcbiAgICAgICAgICAgICAgICB0cmVlLnZpc3VhbFBhcmVudC5pbnZhbGlkYXRlQXJyYW5nZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGV4cGFuZFZpZXdwb3J0ICh2aWV3cG9ydDogUmVjdCwgYXNzZXRzOiBJVXBkYXRlckFzc2V0cywgdHJlZTogSVVwZGF0ZXJUcmVlKSB7XHJcbiAgICAgICAgICAgIGlmICh0cmVlLmlzTGF5b3V0Q29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgICAgICBTaXplLmNvcHlUbyhhc3NldHMuZGVzaXJlZFNpemUsIHZpZXdwb3J0KTtcclxuICAgICAgICAgICAgICAgIGlmICh0cmVlLnN1cmZhY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbWVhc3VyZSA9IGFzc2V0cy5wcmV2aW91c0NvbnN0cmFpbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFTaXplLmlzVW5kZWYobWVhc3VyZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmlld3BvcnQud2lkdGggPSBNYXRoLm1heCh2aWV3cG9ydC53aWR0aCwgbWVhc3VyZS53aWR0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdwb3J0LmhlaWdodCA9IE1hdGgubWF4KHZpZXdwb3J0LmhlaWdodCwgbWVhc3VyZS5oZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdwb3J0LndpZHRoID0gdHJlZS5zdXJmYWNlLndpZHRoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2aWV3cG9ydC5oZWlnaHQgPSB0cmVlLnN1cmZhY2UuaGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZpZXdwb3J0LndpZHRoID0gYXNzZXRzLmFjdHVhbFdpZHRoO1xyXG4gICAgICAgICAgICAgICAgdmlld3BvcnQuaGVpZ2h0ID0gYXNzZXRzLmFjdHVhbEhlaWdodDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2hpZnRWaWV3cG9ydCAodmlld3BvcnQ6IFJlY3QsIHVwZGF0ZXI6IFVwZGF0ZXIpIHtcclxuICAgICAgICAgICAgLy9OT1RFOiBDb2VyY2luZyB1bmRlZmluZWQsIG51bGwsIE5hTiwgYW5kIDAgdG8gMFxyXG4gICAgICAgICAgICB2aWV3cG9ydC54ID0gdXBkYXRlci5nZXRBdHRhY2hlZFZhbHVlKFwiQ2FudmFzLkxlZnRcIikgfHwgMDtcclxuICAgICAgICAgICAgdmlld3BvcnQueSA9IHVwZGF0ZXIuZ2V0QXR0YWNoZWRWYWx1ZShcIkNhbnZhcy5Ub3BcIikgfHwgMDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb3JlLmRyYWZ0IHtcclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSURyYWZ0VGFwaW4gZXh0ZW5kcyBwaXBlLklUYXBpbiB7XHJcbiAgICAgICAgKGRhdGE6IElEcmFmdFBpcGVEYXRhKTogYm9vbGVhbjtcclxuICAgIH1cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSURyYWZ0UGlwZURhdGEgZXh0ZW5kcyBwaXBlLklQaXBlRGF0YSB7XHJcbiAgICAgICAgdXBkYXRlcjogVXBkYXRlcjtcclxuICAgICAgICB0cmVlOiBJVXBkYXRlclRyZWU7XHJcbiAgICAgICAgYXNzZXRzOiBJVXBkYXRlckFzc2V0cztcclxuICAgICAgICBmbGFnOiBVSUZsYWdzO1xyXG4gICAgICAgIG1lYXN1cmVMaXN0OiBVcGRhdGVyW107XHJcbiAgICAgICAgYXJyYW5nZUxpc3Q6IFVwZGF0ZXJbXTtcclxuICAgICAgICBzaXppbmdMaXN0OiBVcGRhdGVyW107XHJcbiAgICAgICAgc3VyZmFjZVNpemU6IFNpemU7XHJcbiAgICAgICAgc2l6aW5nVXBkYXRlczogSVNpemluZ1VwZGF0ZVtdO1xyXG4gICAgfVxyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJU2l6aW5nVXBkYXRlIHtcclxuICAgICAgICB1cGRhdGVyOiBVcGRhdGVyO1xyXG4gICAgICAgIG9sZFNpemU6IFNpemU7XHJcbiAgICAgICAgbmV3U2l6ZTogU2l6ZTtcclxuICAgIH1cclxuICAgIGV4cG9ydCBjbGFzcyBEcmFmdFBpcGVEZWYgZXh0ZW5kcyBwaXBlLlBpcGVEZWY8SURyYWZ0VGFwaW4sIElEcmFmdFBpcGVEYXRhPiB7XHJcbiAgICAgICAgY29uc3RydWN0b3IgKCkge1xyXG4gICAgICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgICAgICB0aGlzLmFkZFRhcGluKCdmbHVzaFByZXZpb3VzJywgdGFwaW5zLmZsdXNoUHJldmlvdXMpXHJcbiAgICAgICAgICAgICAgICAuYWRkVGFwaW4oJ2RldGVybWluZVBoYXNlJywgdGFwaW5zLmRldGVybWluZVBoYXNlKVxyXG4gICAgICAgICAgICAgICAgLmFkZFRhcGluKCdwcmVwYXJlTWVhc3VyZScsIHRhcGlucy5wcmVwYXJlTWVhc3VyZSlcclxuICAgICAgICAgICAgICAgIC5hZGRUYXBpbignbWVhc3VyZScsIHRhcGlucy5tZWFzdXJlKVxyXG4gICAgICAgICAgICAgICAgLmFkZFRhcGluKCdwcmVwYXJlQXJyYW5nZScsIHRhcGlucy5wcmVwYXJlQXJyYW5nZSlcclxuICAgICAgICAgICAgICAgIC5hZGRUYXBpbignYXJyYW5nZScsIHRhcGlucy5hcnJhbmdlKVxyXG4gICAgICAgICAgICAgICAgLmFkZFRhcGluKCdwcmVwYXJlU2l6aW5nJywgdGFwaW5zLnByZXBhcmVTaXppbmcpXHJcbiAgICAgICAgICAgICAgICAuYWRkVGFwaW4oJ3NpemluZycsIHRhcGlucy5zaXppbmcpXHJcbiAgICAgICAgICAgICAgICAuYWRkVGFwaW4oJ25vdGlmeVJlc2l6ZScsIHRhcGlucy5ub3RpZnlSZXNpemUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJlcGFyZSAoZGF0YTogSURyYWZ0UGlwZURhdGEpIHtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZsdXNoIChkYXRhOiBJRHJhZnRQaXBlRGF0YSkge1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvcmUuaGl0dGVzdCB7XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElIaXRUZXN0VGFwaW4ge1xyXG4gICAgICAgIChkYXRhOiBJSGl0VGVzdERhdGEsIHBvczogUG9pbnQsIGhpdExpc3Q6IFVwZGF0ZXJbXSwgY3R4OiByZW5kZXIuUmVuZGVyQ29udGV4dCwgaW5jbHVkZUFsbDogYm9vbGVhbik6IGJvb2xlYW47XHJcbiAgICB9XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElIaXRUZXN0RGF0YSB7XHJcbiAgICAgICAgYXNzZXRzOiBJVXBkYXRlckFzc2V0cztcclxuICAgICAgICB0cmVlOiBJVXBkYXRlclRyZWU7XHJcbiAgICAgICAgdXBkYXRlcjogVXBkYXRlcjtcclxuICAgICAgICBoaXRDaGlsZHJlbjogYm9vbGVhbjtcclxuICAgICAgICBib3VuZHM6IFJlY3Q7XHJcbiAgICAgICAgbGF5b3V0Q2xpcEJvdW5kczogUmVjdDtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgY2xhc3MgSGl0VGVzdFBpcGVEZWYgZXh0ZW5kcyBwaXBlLlBpcGVEZWY8SUhpdFRlc3RUYXBpbiwgSUhpdFRlc3REYXRhPiB7XHJcbiAgICAgICAgY29uc3RydWN0b3IgKCkge1xyXG4gICAgICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgICAgICB0aGlzLmFkZFRhcGluKCdjYW5IaXQnLCB0YXBpbnMuY2FuSGl0KVxyXG4gICAgICAgICAgICAgICAgLmFkZFRhcGluKCdwcmVwYXJlQ3R4JywgdGFwaW5zLnByZXBhcmVDdHgpXHJcbiAgICAgICAgICAgICAgICAuYWRkVGFwaW4oJ2luc2lkZUNsaXAnLCB0YXBpbnMuaW5zaWRlQ2xpcClcclxuICAgICAgICAgICAgICAgIC5hZGRUYXBpbignaW5zaWRlQ2hpbGRyZW4nLCB0YXBpbnMuaW5zaWRlQ2hpbGRyZW4pXHJcbiAgICAgICAgICAgICAgICAuYWRkVGFwaW4oJ2NhbkhpdEluc2lkZScsIHRhcGlucy5jYW5IaXRJbnNpZGUpXHJcbiAgICAgICAgICAgICAgICAuYWRkVGFwaW4oJ2luc2lkZU9iamVjdCcsIHRhcGlucy5pbnNpZGVPYmplY3QpXHJcbiAgICAgICAgICAgICAgICAuYWRkVGFwaW4oJ2luc2lkZUxheW91dENsaXAnLCB0YXBpbnMuaW5zaWRlTGF5b3V0Q2xpcClcclxuICAgICAgICAgICAgICAgIC5hZGRUYXBpbignY29tcGxldGVDdHgnLCB0YXBpbnMuY29tcGxldGVDdHgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvcmUubWVhc3VyZSB7XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElNZWFzdXJlQmluZGVyIHtcclxuICAgICAgICBiaW5kKHVwZGF0ZXI6IFVwZGF0ZXIpOiBib29sZWFuO1xyXG4gICAgfVxyXG4gICAgZXhwb3J0IGNsYXNzIE1lYXN1cmVCaW5kZXIgaW1wbGVtZW50cyBJTWVhc3VyZUJpbmRlciB7XHJcbiAgICAgICAgYmluZCAodXBkYXRlcjogVXBkYXRlcik6IGJvb2xlYW4ge1xyXG4gICAgICAgICAgICB2YXIgYXNzZXRzID0gdXBkYXRlci5hc3NldHM7XHJcbiAgICAgICAgICAgIHZhciBsYXN0ID0gYXNzZXRzLnByZXZpb3VzQ29uc3RyYWludDtcclxuICAgICAgICAgICAgdmFyIG9sZCA9IG5ldyBTaXplKCk7XHJcbiAgICAgICAgICAgIHZhciB0cmVlID0gdXBkYXRlci50cmVlO1xyXG5cclxuICAgICAgICAgICAgaWYgKCF0cmVlLnN1cmZhY2UgJiYgU2l6ZS5pc1VuZGVmKGxhc3QpICYmICF0cmVlLnZpc3VhbFBhcmVudCAmJiB0cmVlLmlzTGF5b3V0Q29udGFpbmVyKVxyXG4gICAgICAgICAgICAgICAgbGFzdC53aWR0aCA9IGxhc3QuaGVpZ2h0ID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xyXG5cclxuICAgICAgICAgICAgdmFyIHN1Y2Nlc3MgPSBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKCFTaXplLmlzVW5kZWYobGFzdCkpIHtcclxuICAgICAgICAgICAgICAgIFNpemUuY29weVRvKGFzc2V0cy5kZXNpcmVkU2l6ZSwgb2xkKTtcclxuICAgICAgICAgICAgICAgIHN1Y2Nlc3MgPSB1cGRhdGVyLm1lYXN1cmUobGFzdCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoU2l6ZS5pc0VxdWFsKG9sZCwgYXNzZXRzLmRlc2lyZWRTaXplKSlcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3VjY2VzcztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRyZWUudmlzdWFsUGFyZW50KVxyXG4gICAgICAgICAgICAgICAgdHJlZS52aXN1YWxQYXJlbnQuaW52YWxpZGF0ZU1lYXN1cmUoKTtcclxuXHJcbiAgICAgICAgICAgIGFzc2V0cy5kaXJ0eUZsYWdzICY9IH5EaXJ0eUZsYWdzLk1lYXN1cmU7XHJcbiAgICAgICAgICAgIHJldHVybiBzdWNjZXNzO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvcmUucHJvY2Vzc2Rvd24ge1xyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJUHJvY2Vzc0Rvd25UYXBpbiBleHRlbmRzIHBpcGUuSVRyaVRhcGluIHtcclxuICAgICAgICAoaW5wdXQ6IElJbnB1dCwgc3RhdGU6IElTdGF0ZSwgb3V0cHV0OiBJT3V0cHV0LCB2cGlucHV0OiBJSW5wdXQsIHRyZWU6IGNvcmUuSVVwZGF0ZXJUcmVlKTpib29sZWFuO1xyXG4gICAgfVxyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJSW5wdXQgZXh0ZW5kcyBwaXBlLklQaXBlSW5wdXQge1xyXG4gICAgICAgIHZpc2liaWxpdHk6IFZpc2liaWxpdHk7XHJcbiAgICAgICAgb3BhY2l0eTogbnVtYmVyO1xyXG4gICAgICAgIGlzSGl0VGVzdFZpc2libGU6IGJvb2xlYW47XHJcbiAgICAgICAgcmVuZGVyVHJhbnNmb3JtOiBJVHJhbnNmb3JtO1xyXG4gICAgICAgIHJlbmRlclRyYW5zZm9ybU9yaWdpbjogUG9pbnQ7XHJcbiAgICAgICAgYWN0dWFsV2lkdGg6IG51bWJlcjtcclxuICAgICAgICBhY3R1YWxIZWlnaHQ6IG51bWJlcjtcclxuICAgICAgICBzdXJmYWNlQm91bmRzV2l0aENoaWxkcmVuOiBSZWN0O1xyXG4gICAgICAgIHRvdGFsSXNSZW5kZXJWaXNpYmxlOiBib29sZWFuO1xyXG4gICAgICAgIHRvdGFsT3BhY2l0eTogbnVtYmVyO1xyXG4gICAgICAgIHRvdGFsSXNIaXRUZXN0VmlzaWJsZTogYm9vbGVhbjtcclxuICAgICAgICB6OiBudW1iZXI7XHJcbiAgICAgICAgbGF5b3V0Q2xpcDogUmVjdDtcclxuICAgICAgICBjb21wb3NpdGVMYXlvdXRDbGlwOiBSZWN0O1xyXG4gICAgICAgIGxheW91dFhmb3JtOiBudW1iZXJbXTtcclxuICAgICAgICBjYXJyaWVyWGZvcm06IG51bWJlcltdO1xyXG4gICAgICAgIHJlbmRlclhmb3JtOiBudW1iZXJbXTtcclxuICAgICAgICBhYnNvbHV0ZVhmb3JtOiBudW1iZXJbXTtcclxuICAgICAgICBkaXJ0eUZsYWdzOiBEaXJ0eUZsYWdzO1xyXG4gICAgfVxyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJU3RhdGUgZXh0ZW5kcyBwaXBlLklQaXBlU3RhdGUge1xyXG4gICAgICAgIHhmb3JtT3JpZ2luOiBQb2ludDtcclxuICAgICAgICBsb2NhbFhmb3JtOiBudW1iZXJbXTtcclxuICAgICAgICBzdWJ0cmVlRG93bkRpcnR5OiBEaXJ0eUZsYWdzO1xyXG4gICAgfVxyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJT3V0cHV0IGV4dGVuZHMgcGlwZS5JUGlwZU91dHB1dCB7XHJcbiAgICAgICAgdG90YWxJc1JlbmRlclZpc2libGU6IGJvb2xlYW47XHJcbiAgICAgICAgdG90YWxPcGFjaXR5OiBudW1iZXI7XHJcbiAgICAgICAgdG90YWxJc0hpdFRlc3RWaXNpYmxlOiBib29sZWFuO1xyXG4gICAgICAgIHo6IG51bWJlcjtcclxuICAgICAgICBjb21wb3NpdGVMYXlvdXRDbGlwOiBSZWN0O1xyXG4gICAgICAgIHJlbmRlclhmb3JtOiBudW1iZXJbXTtcclxuICAgICAgICBhYnNvbHV0ZVhmb3JtOiBudW1iZXJbXTtcclxuICAgICAgICBkaXJ0eUZsYWdzOiBEaXJ0eUZsYWdzO1xyXG4gICAgICAgIG5ld1VwRGlydHk6IERpcnR5RmxhZ3M7XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGNsYXNzIFByb2Nlc3NEb3duUGlwZURlZiBleHRlbmRzIHBpcGUuVHJpUGlwZURlZjxJUHJvY2Vzc0Rvd25UYXBpbiwgSUlucHV0LCBJU3RhdGUsIElPdXRwdXQ+IHtcclxuICAgICAgICBjb25zdHJ1Y3RvciAoKSB7XHJcbiAgICAgICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkVGFwaW4oJ3Byb2Nlc3NSZW5kZXJWaXNpYmlsaXR5JywgdGFwaW5zLnByb2Nlc3NSZW5kZXJWaXNpYmlsaXR5KVxyXG4gICAgICAgICAgICAgICAgLmFkZFRhcGluKCdwcm9jZXNzSGl0VGVzdFZpc2liaWxpdHknLCB0YXBpbnMucHJvY2Vzc0hpdFRlc3RWaXNpYmlsaXR5KVxyXG4gICAgICAgICAgICAgICAgLmFkZFRhcGluKCdjYWxjWGZvcm1PcmlnaW4nLCB0YXBpbnMuY2FsY1hmb3JtT3JpZ2luKVxyXG4gICAgICAgICAgICAgICAgLmFkZFRhcGluKCdwcm9jZXNzTG9jYWxYZm9ybScsIHRhcGlucy5wcm9jZXNzTG9jYWxYZm9ybSlcclxuICAgICAgICAgICAgICAgIC5hZGRUYXBpbignY2FsY1JlbmRlclhmb3JtJywgdGFwaW5zLmNhbGNSZW5kZXJYZm9ybSlcclxuICAgICAgICAgICAgICAgIC5hZGRUYXBpbignY2FsY0Fic29sdXRlWGZvcm0nLCB0YXBpbnMuY2FsY0Fic29sdXRlWGZvcm0pXHJcbiAgICAgICAgICAgICAgICAuYWRkVGFwaW4oJ3Byb2Nlc3NYZm9ybScsIHRhcGlucy5wcm9jZXNzWGZvcm0pXHJcbiAgICAgICAgICAgICAgICAuYWRkVGFwaW4oJ3Byb2Nlc3NMYXlvdXRDbGlwJywgdGFwaW5zLnByb2Nlc3NMYXlvdXRDbGlwKVxyXG4gICAgICAgICAgICAgICAgLmFkZFRhcGluKCdwcm9wYWdhdGVEaXJ0eVRvQ2hpbGRyZW4nLCB0YXBpbnMucHJvcGFnYXRlRGlydHlUb0NoaWxkcmVuKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNyZWF0ZVN0YXRlICgpOiBJU3RhdGUge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgeGZvcm1PcmlnaW46IG5ldyBQb2ludCgpLFxyXG4gICAgICAgICAgICAgICAgbG9jYWxYZm9ybTogbWF0My5pZGVudGl0eSgpLFxyXG4gICAgICAgICAgICAgICAgc3VidHJlZURvd25EaXJ0eTogMFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY3JlYXRlT3V0cHV0ICgpOiBJT3V0cHV0IHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHRvdGFsSXNSZW5kZXJWaXNpYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIHRvdGFsT3BhY2l0eTogMS4wLFxyXG4gICAgICAgICAgICAgICAgdG90YWxJc0hpdFRlc3RWaXNpYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIHo6IE5hTixcclxuICAgICAgICAgICAgICAgIGNvbXBvc2l0ZUxheW91dENsaXA6IG5ldyBSZWN0KCksXHJcbiAgICAgICAgICAgICAgICByZW5kZXJYZm9ybTogbWF0My5pZGVudGl0eSgpLFxyXG4gICAgICAgICAgICAgICAgYWJzb2x1dGVYZm9ybTogbWF0My5pZGVudGl0eSgpLFxyXG4gICAgICAgICAgICAgICAgZGlydHlGbGFnczogMCxcclxuICAgICAgICAgICAgICAgIG5ld1VwRGlydHk6IDBcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByZXBhcmUgKGlucHV0OiBJSW5wdXQsIHN0YXRlOiBJU3RhdGUsIG91dHB1dDogSU91dHB1dCwgdnBpbnB1dDogSUlucHV0LCB0cmVlOiBjb3JlLklVcGRhdGVyVHJlZSkge1xyXG4gICAgICAgICAgICBpZiAoKGlucHV0LmRpcnR5RmxhZ3MgJiBEaXJ0eUZsYWdzLkxvY2FsVHJhbnNmb3JtKSA+IDApIHtcclxuICAgICAgICAgICAgICAgIGlucHV0LmRpcnR5RmxhZ3MgfD0gRGlydHlGbGFncy5UcmFuc2Zvcm07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3V0cHV0LmRpcnR5RmxhZ3MgPSBpbnB1dC5kaXJ0eUZsYWdzO1xyXG4gICAgICAgICAgICBvdXRwdXQudG90YWxJc1JlbmRlclZpc2libGUgPSBpbnB1dC50b3RhbElzUmVuZGVyVmlzaWJsZTtcclxuICAgICAgICAgICAgb3V0cHV0LnRvdGFsT3BhY2l0eSA9IGlucHV0LnRvdGFsT3BhY2l0eTtcclxuICAgICAgICAgICAgb3V0cHV0LnRvdGFsSXNIaXRUZXN0VmlzaWJsZSA9IGlucHV0LnRvdGFsSXNIaXRUZXN0VmlzaWJsZTtcclxuICAgICAgICAgICAgb3V0cHV0LnogPSBpbnB1dC56O1xyXG4gICAgICAgICAgICBSZWN0LmNvcHlUbyhpbnB1dC5jb21wb3NpdGVMYXlvdXRDbGlwLCBvdXRwdXQuY29tcG9zaXRlTGF5b3V0Q2xpcCk7XHJcbiAgICAgICAgICAgIG1hdDMuY29weVRvKGlucHV0LnJlbmRlclhmb3JtLCBvdXRwdXQucmVuZGVyWGZvcm0pO1xyXG4gICAgICAgICAgICBtYXQzLmNvcHlUbyhpbnB1dC5hYnNvbHV0ZVhmb3JtLCBvdXRwdXQuYWJzb2x1dGVYZm9ybSk7XHJcbiAgICAgICAgICAgIHN0YXRlLnN1YnRyZWVEb3duRGlydHkgPSAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZmx1c2ggKGlucHV0OiBJSW5wdXQsIHN0YXRlOiBJU3RhdGUsIG91dHB1dDogSU91dHB1dCwgdnBpbnB1dDogSUlucHV0LCB0cmVlOiBjb3JlLklVcGRhdGVyVHJlZSkge1xyXG4gICAgICAgICAgICBvdXRwdXQubmV3VXBEaXJ0eSA9IChvdXRwdXQuZGlydHlGbGFncyAmIH5pbnB1dC5kaXJ0eUZsYWdzKSAmIERpcnR5RmxhZ3MuVXBEaXJ0eVN0YXRlO1xyXG4gICAgICAgICAgICBpbnB1dC5kaXJ0eUZsYWdzID0gb3V0cHV0LmRpcnR5RmxhZ3MgJiB+RGlydHlGbGFncy5Eb3duRGlydHlTdGF0ZTtcclxuICAgICAgICAgICAgaW5wdXQudG90YWxJc1JlbmRlclZpc2libGUgPSBvdXRwdXQudG90YWxJc1JlbmRlclZpc2libGU7XHJcbiAgICAgICAgICAgIGlucHV0LnRvdGFsT3BhY2l0eSA9IG91dHB1dC50b3RhbE9wYWNpdHk7XHJcbiAgICAgICAgICAgIGlucHV0LnRvdGFsSXNIaXRUZXN0VmlzaWJsZSA9IG91dHB1dC50b3RhbElzSGl0VGVzdFZpc2libGU7XHJcbiAgICAgICAgICAgIGlucHV0LnogPSBvdXRwdXQuejtcclxuICAgICAgICAgICAgUmVjdC5jb3B5VG8ob3V0cHV0LmNvbXBvc2l0ZUxheW91dENsaXAsIGlucHV0LmNvbXBvc2l0ZUxheW91dENsaXApO1xyXG4gICAgICAgICAgICBtYXQzLmNvcHlUbyhvdXRwdXQucmVuZGVyWGZvcm0sIGlucHV0LnJlbmRlclhmb3JtKTtcclxuICAgICAgICAgICAgbWF0My5jb3B5VG8ob3V0cHV0LmFic29sdXRlWGZvcm0sIGlucHV0LmFic29sdXRlWGZvcm0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvcmUucHJvY2Vzc3VwIHtcclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSVByb2Nlc3NVcFRhcGluIGV4dGVuZHMgcGlwZS5JVHJpVGFwaW4ge1xyXG4gICAgICAgIChpbnB1dDogSUlucHV0LCBzdGF0ZTogSVN0YXRlLCBvdXRwdXQ6IElPdXRwdXQsIHRyZWU6IGNvcmUuSVVwZGF0ZXJUcmVlKTpib29sZWFuO1xyXG4gICAgfVxyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJSW5wdXQgZXh0ZW5kcyBwaXBlLklQaXBlSW5wdXQge1xyXG4gICAgICAgIHdpZHRoOiBudW1iZXI7XHJcbiAgICAgICAgaGVpZ2h0OiBudW1iZXI7XHJcbiAgICAgICAgbWluV2lkdGg6IG51bWJlcjtcclxuICAgICAgICBtaW5IZWlnaHQ6IG51bWJlcjtcclxuICAgICAgICBtYXhXaWR0aDogbnVtYmVyO1xyXG4gICAgICAgIG1heEhlaWdodDogbnVtYmVyO1xyXG4gICAgICAgIHVzZUxheW91dFJvdW5kaW5nOiBib29sZWFuO1xyXG4gICAgICAgIGNsaXA6IElHZW9tZXRyeTtcclxuICAgICAgICBhY3R1YWxXaWR0aDogbnVtYmVyO1xyXG4gICAgICAgIGFjdHVhbEhlaWdodDogbnVtYmVyO1xyXG4gICAgICAgIGVmZmVjdFBhZGRpbmc6IFRoaWNrbmVzcztcclxuICAgICAgICByZW5kZXJYZm9ybTogbnVtYmVyW107XHJcbiAgICAgICAgYWJzb2x1dGVYZm9ybTogbnVtYmVyW107XHJcbiAgICAgICAgbGF5b3V0Q2xpcDogUmVjdDtcclxuICAgICAgICBleHRlbnRzOiBSZWN0O1xyXG4gICAgICAgIGV4dGVudHNXaXRoQ2hpbGRyZW46IFJlY3Q7XHJcbiAgICAgICAgZ2xvYmFsQm91bmRzV2l0aENoaWxkcmVuOiBSZWN0O1xyXG4gICAgICAgIHN1cmZhY2VCb3VuZHNXaXRoQ2hpbGRyZW46IFJlY3Q7XHJcbiAgICAgICAgdG90YWxJc1JlbmRlclZpc2libGU6IGJvb2xlYW47XHJcbiAgICAgICAgdG90YWxPcGFjaXR5OiBudW1iZXI7XHJcbiAgICAgICAgZGlydHlGbGFnczogRGlydHlGbGFncztcclxuICAgICAgICBkaXJ0eVJlZ2lvbjogUmVjdDtcclxuICAgICAgICBmb3JjZUludmFsaWRhdGU6IGJvb2xlYW47XHJcbiAgICB9XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElTdGF0ZSBleHRlbmRzIHBpcGUuSVBpcGVTdGF0ZSB7XHJcbiAgICAgICAgYWN0dWFsU2l6ZTogU2l6ZTtcclxuICAgICAgICBpbnZhbGlkYXRlU3VidHJlZVBhaW50OiBib29sZWFuO1xyXG4gICAgICAgIGhhc05ld0JvdW5kczogYm9vbGVhbjtcclxuICAgICAgICBoYXNJbnZhbGlkYXRlOiBib29sZWFuO1xyXG4gICAgfVxyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJT3V0cHV0IGV4dGVuZHMgcGlwZS5JUGlwZU91dHB1dCB7XHJcbiAgICAgICAgZXh0ZW50czogUmVjdDtcclxuICAgICAgICBleHRlbnRzV2l0aENoaWxkcmVuOiBSZWN0O1xyXG4gICAgICAgIGdsb2JhbEJvdW5kc1dpdGhDaGlsZHJlbjogUmVjdDtcclxuICAgICAgICBzdXJmYWNlQm91bmRzV2l0aENoaWxkcmVuOiBSZWN0O1xyXG4gICAgICAgIGRpcnR5RmxhZ3M6IERpcnR5RmxhZ3M7XHJcbiAgICAgICAgZGlydHlSZWdpb246IFJlY3Q7XHJcbiAgICAgICAgZm9yY2VJbnZhbGlkYXRlOiBib29sZWFuO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBleHBvcnQgY2xhc3MgUHJvY2Vzc1VwUGlwZURlZiBleHRlbmRzIHBpcGUuVHJpUGlwZURlZjxJUHJvY2Vzc1VwVGFwaW4sIElJbnB1dCwgSVN0YXRlLCBJT3V0cHV0PiB7XHJcbiAgICAgICAgY29uc3RydWN0b3IgKCkge1xyXG4gICAgICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgICAgICB0aGlzLmFkZFRhcGluKCdjYWxjQWN0dWFsU2l6ZScsIHRhcGlucy5jYWxjQWN0dWFsU2l6ZSlcclxuICAgICAgICAgICAgICAgIC5hZGRUYXBpbignY2FsY0V4dGVudHMnLCB0YXBpbnMuY2FsY0V4dGVudHMpXHJcbiAgICAgICAgICAgICAgICAuYWRkVGFwaW4oJ2NhbGNQYWludEJvdW5kcycsIHRhcGlucy5jYWxjUGFpbnRCb3VuZHMpXHJcbiAgICAgICAgICAgICAgICAuYWRkVGFwaW4oJ3Byb2Nlc3NCb3VuZHMnLCB0YXBpbnMucHJvY2Vzc0JvdW5kcylcclxuICAgICAgICAgICAgICAgIC5hZGRUYXBpbigncHJvY2Vzc05ld0JvdW5kcycsIHRhcGlucy5wcm9jZXNzTmV3Qm91bmRzKVxyXG4gICAgICAgICAgICAgICAgLmFkZFRhcGluKCdwcm9jZXNzSW52YWxpZGF0ZScsIHRhcGlucy5wcm9jZXNzSW52YWxpZGF0ZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjcmVhdGVTdGF0ZSAoKTogSVN0YXRlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGludmFsaWRhdGVTdWJ0cmVlUGFpbnQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgYWN0dWFsU2l6ZTogbmV3IFNpemUoKSxcclxuICAgICAgICAgICAgICAgIGhhc05ld0JvdW5kczogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBoYXNJbnZhbGlkYXRlOiBmYWxzZVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY3JlYXRlT3V0cHV0ICgpOiBJT3V0cHV0IHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGV4dGVudHM6IG5ldyBSZWN0KCksXHJcbiAgICAgICAgICAgICAgICBleHRlbnRzV2l0aENoaWxkcmVuOiBuZXcgUmVjdCgpLFxyXG4gICAgICAgICAgICAgICAgZ2xvYmFsQm91bmRzV2l0aENoaWxkcmVuOiBuZXcgUmVjdCgpLFxyXG4gICAgICAgICAgICAgICAgc3VyZmFjZUJvdW5kc1dpdGhDaGlsZHJlbjogbmV3IFJlY3QoKSxcclxuICAgICAgICAgICAgICAgIGRpcnR5RmxhZ3M6IDAsXHJcbiAgICAgICAgICAgICAgICBkaXJ0eVJlZ2lvbjogbmV3IFJlY3QoKSxcclxuICAgICAgICAgICAgICAgIGZvcmNlSW52YWxpZGF0ZTogZmFsc2VcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByZXBhcmUgKGlucHV0OiBJSW5wdXQsIHN0YXRlOiBJU3RhdGUsIG91dHB1dDogSU91dHB1dCkge1xyXG4gICAgICAgICAgICBvdXRwdXQuZGlydHlGbGFncyA9IGlucHV0LmRpcnR5RmxhZ3M7XHJcbiAgICAgICAgICAgIFJlY3QuY29weVRvKGlucHV0LmV4dGVudHMsIG91dHB1dC5leHRlbnRzKTtcclxuICAgICAgICAgICAgUmVjdC5jb3B5VG8oaW5wdXQuZXh0ZW50c1dpdGhDaGlsZHJlbiwgb3V0cHV0LmV4dGVudHNXaXRoQ2hpbGRyZW4pO1xyXG4gICAgICAgICAgICBSZWN0LmNvcHlUbyhpbnB1dC5nbG9iYWxCb3VuZHNXaXRoQ2hpbGRyZW4sIG91dHB1dC5nbG9iYWxCb3VuZHNXaXRoQ2hpbGRyZW4pO1xyXG4gICAgICAgICAgICBSZWN0LmNvcHlUbyhpbnB1dC5zdXJmYWNlQm91bmRzV2l0aENoaWxkcmVuLCBvdXRwdXQuc3VyZmFjZUJvdW5kc1dpdGhDaGlsZHJlbik7XHJcbiAgICAgICAgICAgIFJlY3QuY29weVRvKGlucHV0LmRpcnR5UmVnaW9uLCBvdXRwdXQuZGlydHlSZWdpb24pO1xyXG4gICAgICAgICAgICBvdXRwdXQuZm9yY2VJbnZhbGlkYXRlID0gaW5wdXQuZm9yY2VJbnZhbGlkYXRlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZmx1c2ggKGlucHV0OiBJSW5wdXQsIHN0YXRlOiBJU3RhdGUsIG91dHB1dDogSU91dHB1dCkge1xyXG4gICAgICAgICAgICBpbnB1dC5kaXJ0eUZsYWdzID0gb3V0cHV0LmRpcnR5RmxhZ3MgJiB+RGlydHlGbGFncy5VcERpcnR5U3RhdGU7XHJcbiAgICAgICAgICAgIFJlY3QuY29weVRvKG91dHB1dC5leHRlbnRzLCBpbnB1dC5leHRlbnRzKTtcclxuICAgICAgICAgICAgUmVjdC5jb3B5VG8ob3V0cHV0LmV4dGVudHNXaXRoQ2hpbGRyZW4sIGlucHV0LmV4dGVudHNXaXRoQ2hpbGRyZW4pO1xyXG4gICAgICAgICAgICBSZWN0LmNvcHlUbyhvdXRwdXQuZ2xvYmFsQm91bmRzV2l0aENoaWxkcmVuLCBpbnB1dC5nbG9iYWxCb3VuZHNXaXRoQ2hpbGRyZW4pO1xyXG4gICAgICAgICAgICBSZWN0LmNvcHlUbyhvdXRwdXQuc3VyZmFjZUJvdW5kc1dpdGhDaGlsZHJlbiwgaW5wdXQuc3VyZmFjZUJvdW5kc1dpdGhDaGlsZHJlbik7XHJcbiAgICAgICAgICAgIFJlY3QuY29weVRvKG91dHB1dC5kaXJ0eVJlZ2lvbiwgaW5wdXQuZGlydHlSZWdpb24pO1xyXG4gICAgICAgICAgICBpbnB1dC5mb3JjZUludmFsaWRhdGUgPSBvdXRwdXQuZm9yY2VJbnZhbGlkYXRlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvcmUucmVuZGVyIHtcclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSVN0cm9rZVBhcmFtZXRlcnMge1xyXG4gICAgICAgIHN0cm9rZTogSUJydXNoO1xyXG4gICAgICAgIHN0cm9rZVRoaWNrbmVzczogbnVtYmVyO1xyXG4gICAgICAgIHN0cm9rZUxpbmVKb2luOiBQZW5MaW5lSm9pbjtcclxuICAgICAgICBzdHJva2VTdGFydExpbmVDYXA6IFBlbkxpbmVDYXA7XHJcbiAgICAgICAgc3Ryb2tlRW5kTGluZUNhcDogUGVuTGluZUNhcDtcclxuICAgICAgICBzdHJva2VNaXRlckxpbWl0OiBudW1iZXI7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIGNhcHM6IHN0cmluZ1tdID0gW1xyXG4gICAgICAgIFwiYnV0dFwiLCAvL2ZsYXRcclxuICAgICAgICBcInNxdWFyZVwiLCAvL3NxdWFyZVxyXG4gICAgICAgIFwicm91bmRcIiwgLy9yb3VuZFxyXG4gICAgICAgIFwiYnV0dFwiIC8vdHJpYW5nbGVcclxuICAgIF07XHJcbiAgICB2YXIgam9pbnM6IHN0cmluZ1tdID0gW1xyXG4gICAgICAgIFwibWl0ZXJcIixcclxuICAgICAgICBcImJldmVsXCIsXHJcbiAgICAgICAgXCJyb3VuZFwiXHJcbiAgICBdO1xyXG4gICAgZXhwb3J0IGNsYXNzIFJlbmRlckNvbnRleHQge1xyXG4gICAgICAgIHByaXZhdGUgJCR0cmFuc2Zvcm1zID0gW107XHJcbiAgICAgICAgY3VycmVudFRyYW5zZm9ybSA9IG1hdDMuaWRlbnRpdHkoKTtcclxuICAgICAgICBoYXNGaWxsUnVsZTogYm9vbGVhbjtcclxuICAgICAgICByYXc6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRDtcclxuICAgICAgICBzaXplOiBSZW5kZXJDb250ZXh0U2l6ZTtcclxuXHJcbiAgICAgICAgY29uc3RydWN0b3IgKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEKSB7XHJcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHtcclxuICAgICAgICAgICAgICAgIFwicmF3XCI6IHt2YWx1ZTogY3R4LCB3cml0YWJsZTogZmFsc2V9LFxyXG4gICAgICAgICAgICAgICAgXCJjdXJyZW50VHJhbnNmb3JtXCI6IHt2YWx1ZTogbWF0My5pZGVudGl0eSgpLCB3cml0YWJsZTogZmFsc2V9LFxyXG4gICAgICAgICAgICAgICAgXCJoYXNGaWxsUnVsZVwiOiB7dmFsdWU6IFJlbmRlckNvbnRleHQuaGFzRmlsbFJ1bGUsIHdyaXRhYmxlOiBmYWxzZX0sXHJcbiAgICAgICAgICAgICAgICBcInNpemVcIjoge3ZhbHVlOiBuZXcgUmVuZGVyQ29udGV4dFNpemUoKSwgd3JpdGFibGU6IGZhbHNlfSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRoaXMuc2l6ZS5pbml0KGN0eCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzdGF0aWMgZ2V0IGhhc0ZpbGxSdWxlICgpOiBib29sZWFuIHtcclxuICAgICAgICAgICAgaWYgKG5hdmlnYXRvci5hcHBOYW1lID09PSBcIk1pY3Jvc29mdCBJbnRlcm5ldCBFeHBsb3JlclwiKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmVyc2lvbiA9IGdldElFVmVyc2lvbigpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZlcnNpb24gPCAwIHx8IHZlcnNpb24gPiAxMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGFwcGx5RHBpUmF0aW8oKSB7XHJcbiAgICAgICAgICAgIHZhciByYXRpbyA9IHRoaXMuc2l6ZS5kcGlSYXRpbztcclxuICAgICAgICAgICAgdGhpcy5zY2FsZShyYXRpbywgcmF0aW8pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2F2ZSAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuJCR0cmFuc2Zvcm1zLnB1c2gobWF0My5jcmVhdGUodGhpcy5jdXJyZW50VHJhbnNmb3JtKSk7XHJcbiAgICAgICAgICAgIHRoaXMucmF3LnNhdmUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJlc3RvcmUgKCkge1xyXG4gICAgICAgICAgICB2YXIgb2xkID0gdGhpcy4kJHRyYW5zZm9ybXMucG9wKCk7XHJcbiAgICAgICAgICAgIGlmIChvbGQpXHJcbiAgICAgICAgICAgICAgICBtYXQzLmNvcHlUbyhvbGQsIHRoaXMuY3VycmVudFRyYW5zZm9ybSk7XHJcbiAgICAgICAgICAgIHRoaXMucmF3LnJlc3RvcmUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNldFRyYW5zZm9ybSAobTExOiBudW1iZXIsIG0xMjogbnVtYmVyLCBtMjE6IG51bWJlciwgbTIyOiBudW1iZXIsIGR4OiBudW1iZXIsIGR5OiBudW1iZXIpIHtcclxuICAgICAgICAgICAgbWF0My5jb3B5VG8oW20xMSwgbTEyLCBtMjEsIG0yMiwgZHgsIGR5XSwgdGhpcy5jdXJyZW50VHJhbnNmb3JtKTtcclxuICAgICAgICAgICAgdGhpcy5yYXcuc2V0VHJhbnNmb3JtKG0xMSwgbTEyLCBtMjEsIG0yMiwgZHgsIGR5KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJlc2V0VHJhbnNmb3JtICgpIHtcclxuICAgICAgICAgICAgbWF0My5pZGVudGl0eSh0aGlzLmN1cnJlbnRUcmFuc2Zvcm0pO1xyXG4gICAgICAgICAgICB2YXIgcmF3ID0gPGFueT50aGlzLnJhdztcclxuICAgICAgICAgICAgaWYgKHJhdy5yZXNldFRyYW5zZm9ybSlcclxuICAgICAgICAgICAgICAgIHJhdy5yZXNldFRyYW5zZm9ybSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdHJhbnNmb3JtIChtMTE6IG51bWJlciwgbTEyOiBudW1iZXIsIG0yMTogbnVtYmVyLCBtMjI6IG51bWJlciwgZHg6IG51bWJlciwgZHk6IG51bWJlcikge1xyXG4gICAgICAgICAgICB2YXIgY3QgPSB0aGlzLmN1cnJlbnRUcmFuc2Zvcm07XHJcbiAgICAgICAgICAgIG1hdDMubXVsdGlwbHkoY3QsIG1hdDMuY3JlYXRlKFttMTEsIG0xMiwgbTIxLCBtMjIsIGR4LCBkeV0pLCBjdCk7XHJcbiAgICAgICAgICAgIHRoaXMucmF3LnRyYW5zZm9ybShtMTEsIG0xMiwgbTIxLCBtMjIsIGR4LCBkeSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzY2FsZSAoeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcclxuICAgICAgICAgICAgbWF0My5zY2FsZSh0aGlzLmN1cnJlbnRUcmFuc2Zvcm0sIHgsIHkpO1xyXG4gICAgICAgICAgICB0aGlzLnJhdy5zY2FsZSh4LCB5KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJvdGF0ZSAoYW5nbGU6IG51bWJlcikge1xyXG4gICAgICAgICAgICB2YXIgY3QgPSB0aGlzLmN1cnJlbnRUcmFuc2Zvcm07XHJcbiAgICAgICAgICAgIHZhciByID0gbWF0My5jcmVhdGVSb3RhdGUoYW5nbGUpO1xyXG4gICAgICAgICAgICBtYXQzLm11bHRpcGx5KGN0LCByLCBjdCk7IC8vY3QgPSBjdCAqIHJcclxuICAgICAgICAgICAgdGhpcy5yYXcucm90YXRlKGFuZ2xlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRyYW5zbGF0ZSAoeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcclxuICAgICAgICAgICAgbWF0My50cmFuc2xhdGUodGhpcy5jdXJyZW50VHJhbnNmb3JtLCB4LCB5KTtcclxuICAgICAgICAgICAgdGhpcy5yYXcudHJhbnNsYXRlKHgsIHkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYXBwbHkgKG1hdDogbnVtYmVyW10pIHtcclxuICAgICAgICAgICAgdmFyIGN0ID0gbWF0My5hcHBseSh0aGlzLmN1cnJlbnRUcmFuc2Zvcm0sIG1hdCk7XHJcbiAgICAgICAgICAgIHRoaXMucmF3LnNldFRyYW5zZm9ybShjdFswXSwgY3RbMV0sIGN0WzJdLCBjdFszXSwgY3RbNF0sIGN0WzVdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByZWFwcGx5IChtYXQ6IG51bWJlcltdKSB7XHJcbiAgICAgICAgICAgIHZhciBjdCA9IG1hdDMucHJlYXBwbHkodGhpcy5jdXJyZW50VHJhbnNmb3JtLCBtYXQpO1xyXG4gICAgICAgICAgICB0aGlzLnJhdy5zZXRUcmFuc2Zvcm0oY3RbMF0sIGN0WzFdLCBjdFsyXSwgY3RbM10sIGN0WzRdLCBjdFs1XSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGlwR2VvbWV0cnkgKGdlb206IElHZW9tZXRyeSkge1xyXG4gICAgICAgICAgICBnZW9tLkRyYXcodGhpcyk7XHJcbiAgICAgICAgICAgIHRoaXMucmF3LmNsaXAoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsaXBSZWN0IChyZWN0OiBSZWN0KSB7XHJcbiAgICAgICAgICAgIHZhciByYXcgPSB0aGlzLnJhdztcclxuICAgICAgICAgICAgcmF3LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgICAgICByYXcucmVjdChyZWN0LngsIHJlY3QueSwgcmVjdC53aWR0aCwgcmVjdC5oZWlnaHQpO1xyXG4gICAgICAgICAgICByYXcuY2xpcCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZmlsbEV4IChicnVzaDogSUJydXNoLCByZWdpb246IFJlY3QsIGZpbGxSdWxlPzogRmlsbFJ1bGUpIHtcclxuICAgICAgICAgICAgdmFyIHJhdyA9IHRoaXMucmF3O1xyXG4gICAgICAgICAgICBicnVzaC5zZXR1cEJydXNoKHJhdywgcmVnaW9uKTtcclxuICAgICAgICAgICAgcmF3LmZpbGxTdHlsZSA9IGJydXNoLnRvSHRtbDVPYmplY3QoKTtcclxuICAgICAgICAgICAgaWYgKGZpbGxSdWxlID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICg8YW55PnJhdykuZmlsbFJ1bGUgPSByYXcubXNGaWxsUnVsZSA9IFwibm9uemVyb1wiO1xyXG4gICAgICAgICAgICAgICAgcmF3LmZpbGwoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZhciBmciA9IGZpbGxSdWxlID09PSBGaWxsUnVsZS5FdmVuT2RkID8gXCJldmVub2RkXCIgOiBcIm5vbnplcm9cIjtcclxuICAgICAgICAgICAgICAgICg8YW55PnJhdykuZmlsbFJ1bGUgPSByYXcubXNGaWxsUnVsZSA9IGZyO1xyXG4gICAgICAgICAgICAgICAgcmF3LmZpbGwoZnIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpc1BvaW50SW5TdHJva2VFeCAoc3Ryb2tlUGFyczogSVN0cm9rZVBhcmFtZXRlcnMsIHg6IG51bWJlciwgeTogbnVtYmVyKTogYm9vbGVhbiB7XHJcbiAgICAgICAgICAgIHZhciByYXcgPSB0aGlzLnJhdztcclxuICAgICAgICAgICAgcmF3LmxpbmVXaWR0aCA9IHN0cm9rZVBhcnMuc3Ryb2tlVGhpY2tuZXNzO1xyXG4gICAgICAgICAgICByYXcubGluZUNhcCA9IGNhcHNbc3Ryb2tlUGFycy5zdHJva2VTdGFydExpbmVDYXAgfHwgc3Ryb2tlUGFycy5zdHJva2VFbmRMaW5lQ2FwIHx8IDBdIHx8IGNhcHNbMF07XHJcbiAgICAgICAgICAgIHJhdy5saW5lSm9pbiA9IGpvaW5zW3N0cm9rZVBhcnMuc3Ryb2tlTGluZUpvaW4gfHwgMF0gfHwgam9pbnNbMF07XHJcbiAgICAgICAgICAgIHJhdy5taXRlckxpbWl0ID0gc3Ryb2tlUGFycy5zdHJva2VNaXRlckxpbWl0O1xyXG4gICAgICAgICAgICByZXR1cm4gcmF3LmlzUG9pbnRJblN0cm9rZSh4LCB5KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0SUVWZXJzaW9uICgpOiBudW1iZXIge1xyXG4gICAgICAgIHZhciByZSA9IG5ldyBSZWdFeHAoXCJNU0lFIChbMC05XXsxLH1bXFwuMC05XXswLH0pXCIpO1xyXG4gICAgICAgIGlmIChyZS5leGVjKG5hdmlnYXRvci51c2VyQWdlbnQpICE9IG51bGwpXHJcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUZsb2F0KFJlZ0V4cC4kMSk7XHJcbiAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgfVxyXG59IiwibW9kdWxlIG1pbmVydmEuY29yZS5yZW5kZXIge1xuICAgIC8vTk9URTogSWYgd2UgcmVzaXplIHRoZSBIVE1MNSBjYW52YXMgZHVyaW5nIHJlc2l6ZSwgdGhlIGNhbnZhcyB3aWxsIGdvIGJsYW5rIHVudGlsIHJlbmRlciBoYXBwZW5zXG4gICAgdmFyIGVwc2lsb24gPSAxZS0xMDtcbiAgICBleHBvcnQgY2xhc3MgUmVuZGVyQ29udGV4dFNpemUge1xuICAgICAgICBwcml2YXRlICQkY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQgPSBudWxsO1xuICAgICAgICAvL05PVEU6IFRoaXMgaXMgdGhlIGRlc2lyZWQgb24tc2NyZWVuIHNpemUgKGJhY2tpbmcgc2l6ZSBmb3IgaGlnaC1kcGkgZGV2aWNlcyB3aWxsIGJlIGxhcmdlcilcbiAgICAgICAgcHJpdmF0ZSAkJGRlc2lyZWRXaWR0aDogbnVtYmVyID0gMDtcbiAgICAgICAgcHJpdmF0ZSAkJGRlc2lyZWRIZWlnaHQ6IG51bWJlciA9IDA7XG4gICAgICAgIHByaXZhdGUgJCRjaGFuZ2VkOiBJU2l6ZSA9IG51bGw7XG4gICAgICAgIHByaXZhdGUgJCRsYXN0RHBpUmF0aW8gPSAxO1xuXG4gICAgICAgIGdldCBkZXNpcmVkV2lkdGgoKTogbnVtYmVyIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiQkZGVzaXJlZFdpZHRoO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0IGRlc2lyZWRIZWlnaHQoKTogbnVtYmVyIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiQkZGVzaXJlZEhlaWdodDtcbiAgICAgICAgfVxuXG4gICAgICAgIGdldCBwYWludFdpZHRoKCk6IG51bWJlciB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy4kJGRlc2lyZWRXaWR0aCAqIHRoaXMuZHBpUmF0aW87XG4gICAgICAgIH1cblxuICAgICAgICBnZXQgcGFpbnRIZWlnaHQoKTogbnVtYmVyIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiQkZGVzaXJlZEhlaWdodCAqIHRoaXMuZHBpUmF0aW87XG4gICAgICAgIH1cblxuICAgICAgICBnZXQgZHBpUmF0aW8oKTogbnVtYmVyIHtcbiAgICAgICAgICAgIHJldHVybiAod2luZG93LmRldmljZVBpeGVsUmF0aW8gfHwgMSkgLyB0aGlzLiQkY3R4LmJhY2tpbmdTdG9yZVBpeGVsUmF0aW87XG4gICAgICAgIH1cblxuICAgICAgICBpbml0KGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEKSB7XG4gICAgICAgICAgICB0aGlzLiQkY3R4ID0gY3R4O1xuICAgICAgICAgICAgdmFyIGRlc2lyZWQgPSBnZXROYXR1cmFsQ2FudmFzU2l6ZShjdHguY2FudmFzKTtcbiAgICAgICAgICAgIHRoaXMuJCRkZXNpcmVkV2lkdGggPSBkZXNpcmVkLndpZHRoO1xuICAgICAgICAgICAgdGhpcy4kJGRlc2lyZWRIZWlnaHQgPSBkZXNpcmVkLmhlaWdodDtcbiAgICAgICAgICAgIHRoaXMuJGFkanVzdENhbnZhcygpO1xuICAgICAgICB9XG5cbiAgICAgICAgcXVldWVSZXNpemUod2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpOiBSZW5kZXJDb250ZXh0U2l6ZSB7XG4gICAgICAgICAgICBpZiAodGhpcy4kJGNoYW5nZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiQkY2hhbmdlZC53aWR0aCA9IHdpZHRoO1xuICAgICAgICAgICAgICAgIHRoaXMuJCRjaGFuZ2VkLmhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kJGNoYW5nZWQgPSB7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHRcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBjb21taXRSZXNpemUoKTogUmVuZGVyQ29udGV4dFNpemUge1xuICAgICAgICAgICAgaWYgKHRoaXMuJCRjaGFuZ2VkKSB7XG4gICAgICAgICAgICAgICAgLy9Eb24ndCByZXNpemUgYW55dGhpbmcgaWYgbW92ZW1lbnQgaXMgbm90IG5vdGljZWFibGVcbiAgICAgICAgICAgICAgICBpZiAoTWF0aC5hYnModGhpcy4kJGNoYW5nZWQud2lkdGggLSB0aGlzLiQkZGVzaXJlZFdpZHRoKSA8IGVwc2lsb24gJiYgTWF0aC5hYnModGhpcy4kJGNoYW5nZWQuaGVpZ2h0IC0gdGhpcy4kJGRlc2lyZWRIZWlnaHQpIDwgZXBzaWxvbilcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIHRoaXMuJCRkZXNpcmVkV2lkdGggPSB0aGlzLiQkY2hhbmdlZC53aWR0aDtcbiAgICAgICAgICAgICAgICB0aGlzLiQkZGVzaXJlZEhlaWdodCA9IHRoaXMuJCRjaGFuZ2VkLmhlaWdodDtcbiAgICAgICAgICAgICAgICB0aGlzLiQkY2hhbmdlZCA9IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy4kYWRqdXN0Q2FudmFzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHVwZGF0ZURwaVJhdGlvKCk6IGJvb2xlYW4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuJCRsYXN0RHBpUmF0aW8gPT09IHRoaXMuZHBpUmF0aW8pXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgdGhpcy4kYWRqdXN0Q2FudmFzKCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgJGFkanVzdENhbnZhcygpIHtcbiAgICAgICAgICAgIHZhciBjYW52YXMgPSB0aGlzLiQkY3R4LmNhbnZhcztcbiAgICAgICAgICAgIHZhciBkcGlSYXRpbyA9IHRoaXMuZHBpUmF0aW87XG4gICAgICAgICAgICBpZiAoTWF0aC5hYnMoZHBpUmF0aW8gLSAxKSA8IGVwc2lsb24pIHtcbiAgICAgICAgICAgICAgICBjYW52YXMud2lkdGggPSB0aGlzLmRlc2lyZWRXaWR0aDtcbiAgICAgICAgICAgICAgICBjYW52YXMuaGVpZ2h0ID0gdGhpcy5kZXNpcmVkSGVpZ2h0O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBTaXplIHRoZSBjYW52YXMgd2lkdGggYW5kIGhlaWdodCAodGhlIHZpcnR1YWwgY2FudmFzIHNpemUpIHRvIHRoZSBzY2FsZWQgdXAgcGl4ZWwgY291bnQuXG4gICAgICAgICAgICAgICAgY2FudmFzLndpZHRoID0gdGhpcy5wYWludFdpZHRoO1xuICAgICAgICAgICAgICAgIGNhbnZhcy5oZWlnaHQgPSB0aGlzLnBhaW50SGVpZ2h0O1xuICAgICAgICAgICAgICAgIC8vIFNpemUgdGhlIHBoeXNpY2FsIGNhbnZhcyB1c2luZyBDU1Mgd2lkdGggYW5kIGhlaWdodCB0byB0aGUgcGl4ZWwgZGltZW5zaW9ucy5cbiAgICAgICAgICAgICAgICBjYW52YXMuc3R5bGUud2lkdGggPSB0aGlzLmRlc2lyZWRXaWR0aC50b1N0cmluZygpICsgXCJweFwiO1xuICAgICAgICAgICAgICAgIGNhbnZhcy5zdHlsZS5oZWlnaHQgPSB0aGlzLmRlc2lyZWRIZWlnaHQudG9TdHJpbmcoKSArIFwicHhcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuJCRsYXN0RHBpUmF0aW8gPSBkcGlSYXRpbztcbiAgICAgICAgfVxuICAgIH1cbn0iLCJtb2R1bGUgbWluZXJ2YS5jb3JlLnJlbmRlciB7XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElSZW5kZXJUYXBpbiBleHRlbmRzIHBpcGUuSVRyaVRhcGluIHtcclxuICAgICAgICAoaW5wdXQ6IElJbnB1dCwgc3RhdGU6IElTdGF0ZSwgb3V0cHV0OiBJT3V0cHV0LCBjdHg6IFJlbmRlckNvbnRleHQsIHJlZ2lvbjogUmVjdCwgdHJlZTogSVVwZGF0ZXJUcmVlKTpib29sZWFuO1xyXG4gICAgfVxyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJSW5wdXQgZXh0ZW5kcyBwaXBlLklQaXBlSW5wdXQge1xyXG4gICAgICAgIHRvdGFsSXNSZW5kZXJWaXNpYmxlOiBib29sZWFuO1xyXG4gICAgICAgIHRvdGFsT3BhY2l0eTogbnVtYmVyO1xyXG4gICAgICAgIHN1cmZhY2VCb3VuZHNXaXRoQ2hpbGRyZW46IFJlY3Q7XHJcbiAgICAgICAgbGF5b3V0Q2xpcDogUmVjdDtcclxuICAgICAgICBicmVha0xheW91dENsaXA6IGJvb2xlYW47XHJcbiAgICAgICAgdmlzdWFsT2Zmc2V0OiBQb2ludDtcclxuICAgICAgICByZW5kZXJYZm9ybTogbnVtYmVyW107XHJcbiAgICAgICAgY2xpcDogSUdlb21ldHJ5O1xyXG4gICAgICAgIGVmZmVjdDogSUVmZmVjdDtcclxuICAgIH1cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSVN0YXRlIGV4dGVuZHMgcGlwZS5JUGlwZVN0YXRlIHtcclxuICAgICAgICByZW5kZXJSZWdpb246IFJlY3Q7XHJcbiAgICB9XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElPdXRwdXQgZXh0ZW5kcyBwaXBlLklQaXBlT3V0cHV0IHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGNsYXNzIFJlbmRlclBpcGVEZWYgZXh0ZW5kcyBwaXBlLlRyaVBpcGVEZWY8SVJlbmRlclRhcGluLCBJSW5wdXQsIElTdGF0ZSwgSU91dHB1dD4ge1xyXG4gICAgICAgIGNvbnN0cnVjdG9yICgpIHtcclxuICAgICAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICAgICAgdGhpcy5hZGRUYXBpbigndmFsaWRhdGUnLCB0YXBpbnMudmFsaWRhdGUpXHJcbiAgICAgICAgICAgICAgICAuYWRkVGFwaW4oJ3ZhbGlkYXRlUmVnaW9uJywgdGFwaW5zLnZhbGlkYXRlUmVnaW9uKVxyXG4gICAgICAgICAgICAgICAgLmFkZFRhcGluKCdwcmVwYXJlQ29udGV4dCcsIHRhcGlucy5wcmVwYXJlQ29udGV4dClcclxuICAgICAgICAgICAgICAgIC5hZGRUYXBpbignYXBwbHlDbGlwJywgdGFwaW5zLmFwcGx5Q2xpcClcclxuICAgICAgICAgICAgICAgIC5hZGRUYXBpbigncHJlUmVuZGVyJywgdGFwaW5zLnByZVJlbmRlcilcclxuICAgICAgICAgICAgICAgIC5hZGRUYXBpbignZG9SZW5kZXInLCB0YXBpbnMuZG9SZW5kZXIpXHJcbiAgICAgICAgICAgICAgICAuYWRkVGFwaW4oJ3Bvc3RSZW5kZXInLCB0YXBpbnMucG9zdFJlbmRlcilcclxuICAgICAgICAgICAgICAgIC5hZGRUYXBpbigncmVuZGVyQ2hpbGRyZW4nLCB0YXBpbnMucmVuZGVyQ2hpbGRyZW4pXHJcbiAgICAgICAgICAgICAgICAuYWRkVGFwaW4oJ3Jlc3RvcmVDb250ZXh0JywgdGFwaW5zLnJlc3RvcmVDb250ZXh0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNyZWF0ZVN0YXRlICgpOiBJU3RhdGUge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgcmVuZGVyUmVnaW9uOiBuZXcgUmVjdCgpXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjcmVhdGVPdXRwdXQgKCk6IElPdXRwdXQge1xyXG4gICAgICAgICAgICByZXR1cm4ge307XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwibW9kdWxlIG1pbmVydmEuY29yZS5zaXppbmcge1xyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJU2l6aW5nVGFwaW4gZXh0ZW5kcyBwaXBlLklUcmlUYXBpbiB7XHJcbiAgICAgICAgKGlucHV0OiBJSW5wdXQsIHN0YXRlOiBJU3RhdGUsIG91dHB1dDogSU91dHB1dCwgdHJlZTogSVVwZGF0ZXJUcmVlKTpib29sZWFuO1xyXG4gICAgfVxyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJSW5wdXQgZXh0ZW5kcyBwaXBlLklQaXBlSW5wdXQsIGhlbHBlcnMuSVNpemVkIHtcclxuICAgICAgICB2aXNpYmlsaXR5OiBWaXNpYmlsaXR5O1xyXG4gICAgICAgIHJlbmRlclNpemU6IFNpemU7XHJcbiAgICAgICAgYWN0dWFsV2lkdGg6IG51bWJlcjtcclxuICAgICAgICBhY3R1YWxIZWlnaHQ6IG51bWJlcjtcclxuICAgIH1cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSVN0YXRlIGV4dGVuZHMgcGlwZS5JUGlwZVN0YXRlIHtcclxuICAgICAgICB1c2VSZW5kZXI6IGJvb2xlYW47XHJcbiAgICB9XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElPdXRwdXQgZXh0ZW5kcyBwaXBlLklQaXBlT3V0cHV0IHtcclxuICAgICAgICBhY3R1YWxTaXplOiBTaXplO1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBjbGFzcyBTaXppbmdQaXBlRGVmIGV4dGVuZHMgcGlwZS5UcmlQaXBlRGVmPElTaXppbmdUYXBpbiwgSUlucHV0LCBJU3RhdGUsIElPdXRwdXQ+IHtcclxuICAgICAgICBjb25zdHJ1Y3RvciAoKSB7XHJcbiAgICAgICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkVGFwaW4oJ2NhbGNVc2VSZW5kZXInLCB0YXBpbnMuY2FsY1VzZVJlbmRlcilcclxuICAgICAgICAgICAgICAgIC5hZGRUYXBpbignY29tcHV0ZUFjdHVhbCcsIHRhcGlucy5jb21wdXRlQWN0dWFsKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNyZWF0ZVN0YXRlICgpOiBJU3RhdGUge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgdXNlUmVuZGVyOiBmYWxzZVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY3JlYXRlT3V0cHV0ICgpOiBJT3V0cHV0IHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGFjdHVhbFNpemU6IG5ldyBTaXplKClcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByZXBhcmUgKGlucHV0OiBJSW5wdXQsIHN0YXRlOiBJU3RhdGUsIG91dHB1dDogSU91dHB1dCwgdHJlZTogSVVwZGF0ZXJUcmVlKSB7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmbHVzaCAoaW5wdXQ6IElJbnB1dCwgc3RhdGU6IElTdGF0ZSwgb3V0cHV0OiBJT3V0cHV0LCB0cmVlOiBJVXBkYXRlclRyZWUpIHtcclxuICAgICAgICAgICAgdmFyIGFzID0gb3V0cHV0LmFjdHVhbFNpemU7XHJcbiAgICAgICAgICAgIGlucHV0LmFjdHVhbFdpZHRoID0gYXMud2lkdGg7XHJcbiAgICAgICAgICAgIGlucHV0LmFjdHVhbEhlaWdodCA9IGFzLmhlaWdodDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5wYXRoLnNlZ21lbnRzIHtcclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUFyYyBleHRlbmRzIElQYXRoU2VnbWVudCB7XHJcbiAgICAgICAgeDogbnVtYmVyO1xyXG4gICAgICAgIHk6IG51bWJlcjtcclxuICAgICAgICByYWRpdXM6IG51bWJlcjtcclxuICAgICAgICBzQW5nbGU6IG51bWJlcjtcclxuICAgICAgICBlQW5nbGU6IG51bWJlcjtcclxuICAgICAgICBhQ2xvY2t3aXNlOiBib29sZWFuO1xyXG4gICAgfVxyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGFyYyh4OiBudW1iZXIsIHk6IG51bWJlciwgcmFkaXVzOiBudW1iZXIsIHNhOiBudW1iZXIsIGVhOiBudW1iZXIsIGNjOiBib29sZWFuKTogSUFyYyB7XHJcbiAgICAgICAgdmFyIGluaXRlZCA9IGZhbHNlO1xyXG4gICAgICAgIC8vc3RhcnQgcG9pbnRcclxuICAgICAgICB2YXIgc3g6IG51bWJlcjtcclxuICAgICAgICB2YXIgc3k6IG51bWJlcjtcclxuICAgICAgICAvL2VuZCBwb2ludFxyXG4gICAgICAgIHZhciBleDogbnVtYmVyO1xyXG4gICAgICAgIHZhciBleTogbnVtYmVyO1xyXG4gICAgICAgIC8vY2FyZGluYWwgY29ybmVyc1xyXG4gICAgICAgIHZhciBsOiBudW1iZXI7XHJcbiAgICAgICAgdmFyIHI6IG51bWJlcjtcclxuICAgICAgICB2YXIgdDogbnVtYmVyO1xyXG4gICAgICAgIHZhciBiOiBudW1iZXI7XHJcbiAgICAgICAgLy9jb250YWlucyBjYXJkaW5hbCBjb3JuZXJzXHJcbiAgICAgICAgdmFyIGNsOiBib29sZWFuO1xyXG4gICAgICAgIHZhciBjcjogYm9vbGVhbjtcclxuICAgICAgICB2YXIgY3Q6IGJvb2xlYW47XHJcbiAgICAgICAgdmFyIGNiOiBib29sZWFuO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBpbml0KCkge1xyXG4gICAgICAgICAgICBpZiAoaW5pdGVkKSByZXR1cm47XHJcbiAgICAgICAgICAgIHN4ID0geCArIChyYWRpdXMgKiBNYXRoLmNvcyhzYSkpO1xyXG4gICAgICAgICAgICBzeSA9IHkgKyAocmFkaXVzICogTWF0aC5zaW4oc2EpKTtcclxuICAgICAgICAgICAgZXggPSB4ICsgKHJhZGl1cyAqIE1hdGguY29zKGVhKSk7XHJcbiAgICAgICAgICAgIGV5ID0geSArIChyYWRpdXMgKiBNYXRoLnNpbihlYSkpO1xyXG5cclxuICAgICAgICAgICAgbCA9IHggLSByYWRpdXM7XHJcbiAgICAgICAgICAgIGNsID0gYXJjQ29udGFpbnNQb2ludChzeCwgc3ksIGV4LCBleSwgbCwgeSwgY2MpO1xyXG5cclxuICAgICAgICAgICAgciA9IHggKyByYWRpdXM7XHJcbiAgICAgICAgICAgIGNyID0gYXJjQ29udGFpbnNQb2ludChzeCwgc3ksIGV4LCBleSwgciwgeSwgY2MpO1xyXG5cclxuICAgICAgICAgICAgdCA9IHkgLSByYWRpdXM7XHJcbiAgICAgICAgICAgIGN0ID0gYXJjQ29udGFpbnNQb2ludChzeCwgc3ksIGV4LCBleSwgeCwgdCwgY2MpO1xyXG5cclxuICAgICAgICAgICAgYiA9IHkgKyByYWRpdXM7XHJcbiAgICAgICAgICAgIGNiID0gYXJjQ29udGFpbnNQb2ludChzeCwgc3ksIGV4LCBleSwgeCwgYiwgY2MpO1xyXG5cclxuICAgICAgICAgICAgaW5pdGVkID0gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHN4OiBudWxsLFxyXG4gICAgICAgICAgICBzeTogbnVsbCxcclxuICAgICAgICAgICAgaXNTaW5nbGU6IHRydWUsXHJcbiAgICAgICAgICAgIHg6IHgsXHJcbiAgICAgICAgICAgIHk6IHksXHJcbiAgICAgICAgICAgIGV4OiB4LFxyXG4gICAgICAgICAgICBleTogeSxcclxuICAgICAgICAgICAgcmFkaXVzOiByYWRpdXMsXHJcbiAgICAgICAgICAgIHNBbmdsZTogc2EsXHJcbiAgICAgICAgICAgIGVBbmdsZTogZWEsXHJcbiAgICAgICAgICAgIGFDbG9ja3dpc2U6IGNjLFxyXG4gICAgICAgICAgICBkcmF3OiBmdW5jdGlvbiAoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQpIHtcclxuICAgICAgICAgICAgICAgIGN0eC5hcmMoeCwgeSwgcmFkaXVzLCBzYSwgZWEsIGNjKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZXh0ZW5kRmlsbEJveDogZnVuY3Rpb24gKGJveDogSUJvdW5kaW5nQm94KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZWEgPT09IHNhKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIGluaXQoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZXggPSBleDtcclxuICAgICAgICAgICAgICAgIHRoaXMuZXkgPSBleTtcclxuXHJcbiAgICAgICAgICAgICAgICBib3gubCA9IE1hdGgubWluKGJveC5sLCBzeCwgZXgpO1xyXG4gICAgICAgICAgICAgICAgYm94LnIgPSBNYXRoLm1heChib3guciwgc3gsIGV4KTtcclxuICAgICAgICAgICAgICAgIGJveC50ID0gTWF0aC5taW4oYm94LnQsIHN5LCBleSk7XHJcbiAgICAgICAgICAgICAgICBib3guYiA9IE1hdGgubWF4KGJveC5iLCBzeSwgZXkpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChjbClcclxuICAgICAgICAgICAgICAgICAgICBib3gubCA9IE1hdGgubWluKGJveC5sLCBsKTtcclxuICAgICAgICAgICAgICAgIGlmIChjcilcclxuICAgICAgICAgICAgICAgICAgICBib3guciA9IE1hdGgubWF4KGJveC5yLCByKTtcclxuICAgICAgICAgICAgICAgIGlmIChjdClcclxuICAgICAgICAgICAgICAgICAgICBib3gudCA9IE1hdGgubWluKGJveC50LCB0KTtcclxuICAgICAgICAgICAgICAgIGlmIChjYilcclxuICAgICAgICAgICAgICAgICAgICBib3guYiA9IE1hdGgubWF4KGJveC5iLCBiKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZXh0ZW5kU3Ryb2tlQm94OiBmdW5jdGlvbiAoYm94OiBJQm91bmRpbmdCb3gsIHBhcnM6IElTdHJva2VQYXJhbWV0ZXJzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZWEgPT09IHNhKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIGluaXQoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZXggPSBleDtcclxuICAgICAgICAgICAgICAgIHRoaXMuZXkgPSBleTtcclxuXHJcbiAgICAgICAgICAgICAgICBib3gubCA9IE1hdGgubWluKGJveC5sLCBzeCwgZXgpO1xyXG4gICAgICAgICAgICAgICAgYm94LnIgPSBNYXRoLm1heChib3guciwgc3gsIGV4KTtcclxuICAgICAgICAgICAgICAgIGJveC50ID0gTWF0aC5taW4oYm94LnQsIHN5LCBleSk7XHJcbiAgICAgICAgICAgICAgICBib3guYiA9IE1hdGgubWF4KGJveC5iLCBzeSwgZXkpO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBocyA9IHBhcnMuc3Ryb2tlVGhpY2tuZXNzIC8gMi4wO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNsKVxyXG4gICAgICAgICAgICAgICAgICAgIGJveC5sID0gTWF0aC5taW4oYm94LmwsIGwgLSBocyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY3IpXHJcbiAgICAgICAgICAgICAgICAgICAgYm94LnIgPSBNYXRoLm1heChib3guciwgciArIGhzKTtcclxuICAgICAgICAgICAgICAgIGlmIChjdClcclxuICAgICAgICAgICAgICAgICAgICBib3gudCA9IE1hdGgubWluKGJveC50LCB0IC0gaHMpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNiKVxyXG4gICAgICAgICAgICAgICAgICAgIGJveC5iID0gTWF0aC5tYXgoYm94LmIsIGIgKyBocyk7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGNhcCA9IHBhcnMuc3Ryb2tlU3RhcnRMaW5lQ2FwIHx8IHBhcnMuc3Ryb2tlRW5kTGluZUNhcCB8fCAwOyAvL0hUTUw1IGRvZXNuJ3Qgc3VwcG9ydCBzdGFydCBhbmQgZW5kIGNhcFxyXG4gICAgICAgICAgICAgICAgdmFyIHN2ID0gdGhpcy5nZXRTdGFydFZlY3RvcigpO1xyXG4gICAgICAgICAgICAgICAgc3ZbMF0gPSAtc3ZbMF07XHJcbiAgICAgICAgICAgICAgICBzdlsxXSA9IC1zdlsxXTtcclxuICAgICAgICAgICAgICAgIHZhciBzcyA9IGdldENhcFNwcmVhZChzeCwgc3ksIHBhcnMuc3Ryb2tlVGhpY2tuZXNzLCBjYXAsIHN2KTtcclxuICAgICAgICAgICAgICAgIHZhciBldiA9IHRoaXMuZ2V0RW5kVmVjdG9yKCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgZXMgPSBnZXRDYXBTcHJlYWQoZXgsIGV5LCBwYXJzLnN0cm9rZVRoaWNrbmVzcywgY2FwLCBldik7XHJcblxyXG4gICAgICAgICAgICAgICAgYm94LmwgPSBNYXRoLm1pbihib3gubCwgc3MueDEsIHNzLngyLCBlcy54MSwgZXMueDIpO1xyXG4gICAgICAgICAgICAgICAgYm94LnIgPSBNYXRoLm1heChib3guciwgc3MueDEsIHNzLngyLCBlcy54MSwgZXMueDIpO1xyXG4gICAgICAgICAgICAgICAgYm94LnQgPSBNYXRoLm1pbihib3gudCwgc3MueTEsIHNzLnkyLCBlcy55MSwgZXMueTIpO1xyXG4gICAgICAgICAgICAgICAgYm94LmIgPSBNYXRoLm1heChib3guYiwgc3MueTEsIHNzLnkyLCBlcy55MSwgZXMueTIpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB0b1N0cmluZzogZnVuY3Rpb24gKCk6IHN0cmluZyB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJcIjtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2V0U3RhcnRWZWN0b3I6IGZ1bmN0aW9uICgpOiBudW1iZXJbXSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcnYgPSBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN4IC0geCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3kgLSB5XHJcbiAgICAgICAgICAgICAgICBdO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNjKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbcnZbMV0sIC1ydlswXV07XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWy1ydlsxXSwgcnZbMF1dO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXRFbmRWZWN0b3I6IGZ1bmN0aW9uICgpOiBudW1iZXJbXSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcnYgPSBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4IC0geCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXkgLSB5XHJcbiAgICAgICAgICAgICAgICBdO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNjKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbcnZbMV0sIC1ydlswXV07XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWy1ydlsxXSwgcnZbMF1dO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gYXJjQ29udGFpbnNQb2ludChzeDogbnVtYmVyLCBzeTogbnVtYmVyLCBleDogbnVtYmVyLCBleTogbnVtYmVyLCBjcHg6IG51bWJlciwgY3B5OiBudW1iZXIsIGNjOiBib29sZWFuKTogYm9vbGVhbiB7XHJcbiAgICAgICAgLy8gdmFyIGEgPSBleCAtIHN4O1xyXG4gICAgICAgIC8vIHZhciBiID0gY3B4IC0gc3g7XHJcbiAgICAgICAgLy8gdmFyIGMgPSBleSAtIHN5O1xyXG4gICAgICAgIC8vIHZhciBkID0gY3B5IC0gc3k7XHJcbiAgICAgICAgLy8gZGV0ID0gYWQgLSBiYztcclxuICAgICAgICB2YXIgbiA9IChleCAtIHN4KSAqIChjcHkgLSBzeSkgLSAoY3B4IC0gc3gpICogKGV5IC0gc3kpO1xyXG4gICAgICAgIGlmIChuID09PSAwKVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICBpZiAobiA+IDAgJiYgY2MpXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIGlmIChuIDwgMCAmJiAhY2MpXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBnZXRDYXBTcHJlYWQoeDogbnVtYmVyLCB5OiBudW1iZXIsIHRoaWNrbmVzczogbnVtYmVyLCBjYXA6IFBlbkxpbmVDYXAsIHZlY3RvcjogbnVtYmVyW10pIHtcclxuICAgICAgICB2YXIgaHMgPSB0aGlja25lc3MgLyAyLjA7XHJcbiAgICAgICAgc3dpdGNoIChjYXApIHtcclxuICAgICAgICAgICAgY2FzZSBQZW5MaW5lQ2FwLlJvdW5kOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICB4MTogeCAtIGhzLFxyXG4gICAgICAgICAgICAgICAgICAgIHgyOiB4ICsgaHMsXHJcbiAgICAgICAgICAgICAgICAgICAgeTE6IHkgLSBocyxcclxuICAgICAgICAgICAgICAgICAgICB5MjogeSArIGhzXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgUGVuTGluZUNhcC5TcXVhcmU6XHJcbiAgICAgICAgICAgICAgICB2YXIgZWQgPSBub3JtYWxpemVWZWN0b3IodmVjdG9yKTtcclxuICAgICAgICAgICAgICAgIHZhciBlZG8gPSBwZXJwZW5kaWN1bGFyVmVjdG9yKGVkKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgeDE6IHggKyBocyAqIChlZFswXSArIGVkb1swXSksXHJcbiAgICAgICAgICAgICAgICAgICAgeDI6IHggKyBocyAqIChlZFswXSAtIGVkb1swXSksXHJcbiAgICAgICAgICAgICAgICAgICAgeTE6IHkgKyBocyAqIChlZFsxXSArIGVkb1sxXSksXHJcbiAgICAgICAgICAgICAgICAgICAgeTI6IHkgKyBocyAqIChlZFsxXSAtIGVkb1sxXSlcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBQZW5MaW5lQ2FwLkZsYXQ6XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICB2YXIgZWQgPSBub3JtYWxpemVWZWN0b3IodmVjdG9yKTtcclxuICAgICAgICAgICAgICAgIHZhciBlZG8gPSBwZXJwZW5kaWN1bGFyVmVjdG9yKGVkKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgeDE6IHggKyBocyAqIGVkb1swXSxcclxuICAgICAgICAgICAgICAgICAgICB4MjogeCArIGhzICogLWVkb1swXSxcclxuICAgICAgICAgICAgICAgICAgICB5MTogeSArIGhzICogZWRvWzFdLFxyXG4gICAgICAgICAgICAgICAgICAgIHkyOiB5ICsgaHMgKiAtZWRvWzFdXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIG5vcm1hbGl6ZVZlY3Rvcih2OiBudW1iZXJbXSk6IG51bWJlcltdIHtcclxuICAgICAgICB2YXIgbGVuID0gTWF0aC5zcXJ0KHZbMF0gKiB2WzBdICsgdlsxXSAqIHZbMV0pO1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgICAgICB2WzBdIC8gbGVuLFxyXG4gICAgICAgICAgICAgICAgdlsxXSAvIGxlblxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcGVycGVuZGljdWxhclZlY3Rvcih2OiBudW1iZXJbXSk6IG51bWJlcltdIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICAtdlsxXSxcclxuICAgICAgICAgICAgdlswXVxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5wYXRoLnNlZ21lbnRzIHtcclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUNsb3NlIGV4dGVuZHMgSVBhdGhTZWdtZW50IHtcclxuICAgICAgICBpc0Nsb3NlOiBib29sZWFuO1xyXG4gICAgfVxyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGNsb3NlKCk6IElDbG9zZSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgc3g6IG51bGwsXHJcbiAgICAgICAgICAgIHN5OiBudWxsLFxyXG4gICAgICAgICAgICBleDogbnVsbCxcclxuICAgICAgICAgICAgZXk6IG51bGwsXHJcbiAgICAgICAgICAgIGlzU2luZ2xlOiBmYWxzZSxcclxuICAgICAgICAgICAgaXNDbG9zZTogdHJ1ZSxcclxuICAgICAgICAgICAgZHJhdzogZnVuY3Rpb24gKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEKSB7XHJcbiAgICAgICAgICAgICAgICBjdHguY2xvc2VQYXRoKCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGV4dGVuZEZpbGxCb3g6IGZ1bmN0aW9uIChib3g6IElCb3VuZGluZ0JveCkge1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBleHRlbmRTdHJva2VCb3g6IGZ1bmN0aW9uIChib3g6IElCb3VuZGluZ0JveCwgcGFyczogSVN0cm9rZVBhcmFtZXRlcnMpIHtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uICgpOiBzdHJpbmcge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiWlwiO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXRTdGFydFZlY3RvcjogZnVuY3Rpb24gKCk6IG51bWJlcltdIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXRFbmRWZWN0b3I6IGZ1bmN0aW9uICgpOiBudW1iZXJbXSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5wYXRoLnNlZ21lbnRzIHtcclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUN1YmljQmV6aWVyIGV4dGVuZHMgSVBhdGhTZWdtZW50IHtcclxuICAgICAgICBjcDF4OiBudW1iZXI7XHJcbiAgICAgICAgY3AxeTogbnVtYmVyO1xyXG4gICAgICAgIGNwMng6IG51bWJlcjtcclxuICAgICAgICBjcDJ5OiBudW1iZXI7XHJcbiAgICAgICAgeDogbnVtYmVyO1xyXG4gICAgICAgIHk6IG51bWJlcjtcclxuICAgIH1cclxuICAgIGV4cG9ydCBmdW5jdGlvbiBjdWJpY0JlemllcihjcDF4OiBudW1iZXIsIGNwMXk6IG51bWJlciwgY3AyeDogbnVtYmVyLCBjcDJ5OiBudW1iZXIsIHg6IG51bWJlciwgeTogbnVtYmVyKTogSUN1YmljQmV6aWVyIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBzeDogbnVsbCxcclxuICAgICAgICAgICAgc3k6IG51bGwsXHJcbiAgICAgICAgICAgIGV4OiB4LFxyXG4gICAgICAgICAgICBleTogeSxcclxuICAgICAgICAgICAgaXNTaW5nbGU6IGZhbHNlLFxyXG4gICAgICAgICAgICBjcDF4OiBjcDF4LFxyXG4gICAgICAgICAgICBjcDF5OiBjcDF5LFxyXG4gICAgICAgICAgICBjcDJ4OiBjcDJ4LFxyXG4gICAgICAgICAgICBjcDJ5OiBjcDJ5LFxyXG4gICAgICAgICAgICB4OiB4LFxyXG4gICAgICAgICAgICB5OiB5LFxyXG4gICAgICAgICAgICBkcmF3OiBmdW5jdGlvbiAoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQpIHtcclxuICAgICAgICAgICAgICAgIGN0eC5iZXppZXJDdXJ2ZVRvKGNwMXgsIGNwMXksIGNwMngsIGNwMnksIHgsIHkpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBleHRlbmRGaWxsQm94OiBmdW5jdGlvbiAoYm94OiBJQm91bmRpbmdCb3gpIHtcclxuICAgICAgICAgICAgICAgIHZhciBtID0gZ2V0TWF4aW1hKHRoaXMuc3gsIGNwMXgsIGNwMngsIHgsIHRoaXMuc3ksIGNwMXksIGNwMnksIHkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG0ueFswXSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYm94LmwgPSBNYXRoLm1pbihib3gubCwgbS54WzBdKTtcclxuICAgICAgICAgICAgICAgICAgICBib3guciA9IE1hdGgubWF4KGJveC5yLCBtLnhbMF0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKG0ueFsxXSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYm94LmwgPSBNYXRoLm1pbihib3gubCwgbS54WzFdKTtcclxuICAgICAgICAgICAgICAgICAgICBib3guciA9IE1hdGgubWF4KGJveC5yLCBtLnhbMV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKG0ueVswXSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYm94LnQgPSBNYXRoLm1pbihib3gudCwgbS55WzBdKTtcclxuICAgICAgICAgICAgICAgICAgICBib3guYiA9IE1hdGgubWF4KGJveC5iLCBtLnlbMF0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKG0ueVsxXSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYm94LnQgPSBNYXRoLm1pbihib3gudCwgbS55WzFdKTtcclxuICAgICAgICAgICAgICAgICAgICBib3guYiA9IE1hdGgubWF4KGJveC5iLCBtLnlbMV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGJveC5sID0gTWF0aC5taW4oYm94LmwsIHgpO1xyXG4gICAgICAgICAgICAgICAgYm94LnIgPSBNYXRoLm1heChib3guciwgeCk7XHJcbiAgICAgICAgICAgICAgICBib3gudCA9IE1hdGgubWluKGJveC50LCB5KTtcclxuICAgICAgICAgICAgICAgIGJveC5iID0gTWF0aC5tYXgoYm94LmIsIHkpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBleHRlbmRTdHJva2VCb3g6IGZ1bmN0aW9uIChib3g6IElCb3VuZGluZ0JveCwgcGFyczogSVN0cm9rZVBhcmFtZXRlcnMpIHtcclxuICAgICAgICAgICAgICAgIHZhciBocyA9IHBhcnMuc3Ryb2tlVGhpY2tuZXNzIC8gMi4wO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBtID0gZ2V0TWF4aW1hKHRoaXMuc3gsIGNwMXgsIGNwMngsIHgsIHRoaXMuc3ksIGNwMXksIGNwMnksIHkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG0ueFswXSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYm94LmwgPSBNYXRoLm1pbihib3gubCwgbS54WzBdIC0gaHMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJveC5yID0gTWF0aC5tYXgoYm94LnIsIG0ueFswXSArIGhzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChtLnhbMV0gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJveC5sID0gTWF0aC5taW4oYm94LmwsIG0ueFsxXSAtIGhzKTtcclxuICAgICAgICAgICAgICAgICAgICBib3guciA9IE1hdGgubWF4KGJveC5yLCBtLnhbMV0gKyBocyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAobS55WzBdICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBib3gudCA9IE1hdGgubWluKGJveC50LCBtLnlbMF0gLSBocyk7XHJcbiAgICAgICAgICAgICAgICAgICAgYm94LmIgPSBNYXRoLm1heChib3guYiwgbS55WzBdICsgaHMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKG0ueVsxXSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYm94LnQgPSBNYXRoLm1pbihib3gudCwgbS55WzFdIC0gaHMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJveC5iID0gTWF0aC5tYXgoYm94LmIsIG0ueVsxXSArIGhzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBib3gubCA9IE1hdGgubWluKGJveC5sLCB4KTtcclxuICAgICAgICAgICAgICAgIGJveC5yID0gTWF0aC5tYXgoYm94LnIsIHgpO1xyXG4gICAgICAgICAgICAgICAgYm94LnQgPSBNYXRoLm1pbihib3gudCwgeSk7XHJcbiAgICAgICAgICAgICAgICBib3guYiA9IE1hdGgubWF4KGJveC5iLCB5KTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uICgpOiBzdHJpbmcge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiQ1wiICsgY3AxeC50b1N0cmluZygpICsgXCIsXCIgKyBjcDF5LnRvU3RyaW5nKCkgKyBcIiBcIiArIGNwMngudG9TdHJpbmcoKSArIFwiLFwiICsgY3AyeS50b1N0cmluZygpICsgXCIgXCIgKyB4LnRvU3RyaW5nKCkgKyBcIixcIiArIHkudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2V0U3RhcnRWZWN0b3I6IGZ1bmN0aW9uICgpOiBudW1iZXJbXSB7XHJcbiAgICAgICAgICAgICAgICAvL1tGKDApJ3gsIEYoMCkneV1cclxuICAgICAgICAgICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDMgKiAoY3AxeCAtIHRoaXMuc3gpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAzICogKGNwMXkgLSB0aGlzLnN5KVxyXG4gICAgICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2V0RW5kVmVjdG9yOiBmdW5jdGlvbiAoKTogbnVtYmVyW10ge1xyXG4gICAgICAgICAgICAgICAgLy9bRigxKSd4LCBGKDEpJ3ldXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAzICogKHggLSBjcDJ4KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgMyAqICh5IC0gY3AyeSlcclxuICAgICAgICAgICAgICAgIF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIC8vaHR0cDovL3BvbWF4Lm5paG9uZ29yZXNvdXJjZXMuY29tL3BhZ2VzL2Jlemllci9cclxuICAgIC8qIEN1YmljIEJlemllciBjdXJ2ZSBpcyBkZWZpbmVkIGJ5IHBhcmFtZXRlcmljIGN1cnZlOlxyXG4gICAgICogRih0KXggPVxyXG4gICAgICogRih0KXkgPVxyXG4gICAgICogd2hlcmVcclxuICAgICAqICBzID0gc3RhcnQgcG9pbnRcclxuICAgICAqICBjcDEgPSBjb250cm9sIHBvaW50IDFcclxuICAgICAqICBjcDIgPSBjb250cm9sIHBvaW50IDJcclxuICAgICAqICBlID0gZW5kIHBvaW50XHJcbiAgICAgKlxyXG4gICAgICogV2UgZmluZCB0aGUgY29vcmRpbmF0ZXMgKDQpIHdoZXJlIEYodCl4L2R0ID0gMCwgRih0KXkvZHQgPSAwXHJcbiAgICAgKiAod2l0aGluIHRoZSBjb25zdHJhaW50cyBvZiB0aGUgY3VydmUgKDAgPD0gdCA8PSAxKVxyXG4gICAgICogVGhlc2UgcG9pbnRzIHdpbGwgZXhwYW5kIHRoZSBib3VuZGluZyBib3hcclxuICAgICAqL1xyXG5cclxuICAgIGludGVyZmFjZSBJTWF4aW1hIHtcclxuICAgICAgICB4OiBudW1iZXJbXTtcclxuICAgICAgICB5OiBudW1iZXJbXTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGdldE1heGltYSh4MTogbnVtYmVyLCB4MjogbnVtYmVyLCB4MzogbnVtYmVyLCB4NDogbnVtYmVyLCB5MTogbnVtYmVyLCB5MjogbnVtYmVyLCB5MzogbnVtYmVyLCB5NDogbnVtYmVyKTogSU1heGltYSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgeDogY29kKHgxLCB4MiwgeDMsIHg0KSxcclxuICAgICAgICAgICAgeTogY29kKHkxLCB5MiwgeTMsIHk0KVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gY29kKGE6IG51bWJlciwgYjogbnVtYmVyLCBjOiBudW1iZXIsIGQ6IG51bWJlcik6IG51bWJlcltdIHtcclxuICAgICAgICB2YXIgdSA9IDIgKiBhIC0gNCAqIGIgKyAyICogYztcclxuICAgICAgICB2YXIgdiA9IGIgLSBhO1xyXG4gICAgICAgIHZhciB3ID0gLWEgKyAzICogYiArIGQgLSAzICogYztcclxuICAgICAgICB2YXIgcnQgPSBNYXRoLnNxcnQodSAqIHUgLSA0ICogdiAqIHcpO1xyXG5cclxuICAgICAgICB2YXIgY29kczogbnVtYmVyW10gPSBbbnVsbCwgbnVsbF07XHJcbiAgICAgICAgaWYgKGlzTmFOKHJ0KSlcclxuICAgICAgICAgICAgcmV0dXJuIGNvZHM7XHJcblxyXG4gICAgICAgIHZhciB0OiBudW1iZXIsXHJcbiAgICAgICAgICAgIG90OiBudW1iZXI7XHJcblxyXG4gICAgICAgIHQgPSAoLXUgKyBydCkgLyAoMiAqIHcpO1xyXG4gICAgICAgIGlmICh0ID49IDAgJiYgdCA8PSAxKSB7XHJcbiAgICAgICAgICAgIG90ID0gMSAtIHQ7XHJcbiAgICAgICAgICAgIGNvZHNbMF0gPSAoYSAqIG90ICogb3QgKiBvdCkgKyAoMyAqIGIgKiB0ICogb3QgKiBvdCkgKyAoMyAqIGMgKiBvdCAqIHQgKiB0KSArIChkICogdCAqIHQgKiB0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHQgPSAoLXUgLSBydCkgLyAoMiAqIHcpO1xyXG4gICAgICAgIGlmICh0ID49IDAgJiYgdCA8PSAxKSB7XHJcbiAgICAgICAgICAgIG90ID0gMSAtIHQ7XHJcbiAgICAgICAgICAgIGNvZHNbMV0gPSAoYSAqIG90ICogb3QgKiBvdCkgKyAoMyAqIGIgKiB0ICogb3QgKiBvdCkgKyAoMyAqIGMgKiBvdCAqIHQgKiB0KSArIChkICogdCAqIHQgKiB0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBjb2RzO1xyXG4gICAgfVxyXG59IiwibW9kdWxlIG1pbmVydmEucGF0aC5zZWdtZW50cyB7XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElFbGxpcHNlIGV4dGVuZHMgSVBhdGhTZWdtZW50IHtcclxuICAgICAgICB4OiBudW1iZXI7XHJcbiAgICAgICAgeTogbnVtYmVyO1xyXG4gICAgICAgIHdpZHRoOiBudW1iZXI7XHJcbiAgICAgICAgaGVpZ2h0OiBudW1iZXI7XHJcbiAgICB9XHJcbiAgICBleHBvcnQgZnVuY3Rpb24gZWxsaXBzZSAoeDogbnVtYmVyLCB5OiBudW1iZXIsIHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKTogSUVsbGlwc2Uge1xyXG4gICAgICAgIHZhciByYWRpdXNYID0gd2lkdGggLyAyO1xyXG4gICAgICAgIHZhciByYWRpdXNZID0gaGVpZ2h0IC8gMjtcclxuICAgICAgICB2YXIgcmlnaHQgPSB4ICsgd2lkdGg7XHJcbiAgICAgICAgdmFyIGJvdHRvbSA9IHkgKyBoZWlnaHQ7XHJcbiAgICAgICAgdmFyIGNlbnRlclggPSB4ICsgcmFkaXVzWDtcclxuICAgICAgICB2YXIgY2VudGVyWSA9IHkgKyByYWRpdXNZO1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBzeDogbnVsbCxcclxuICAgICAgICAgICAgc3k6IG51bGwsXHJcbiAgICAgICAgICAgIGV4OiB4LFxyXG4gICAgICAgICAgICBleTogeSxcclxuICAgICAgICAgICAgaXNTaW5nbGU6IHRydWUsXHJcbiAgICAgICAgICAgIHg6IHgsXHJcbiAgICAgICAgICAgIHk6IHksXHJcbiAgICAgICAgICAgIHdpZHRoOiB3aWR0aCxcclxuICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQsXHJcbiAgICAgICAgICAgIGRyYXc6IGZ1bmN0aW9uIChjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCkge1xyXG4gICAgICAgICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHdpZHRoID09PSBoZWlnaHQpIHsgLy9jaXJjbGVcclxuICAgICAgICAgICAgICAgICAgICBjdHguYXJjKGNlbnRlclgsIGNlbnRlclksIHJhZGl1c1gsIDAsIE1hdGguUEkgKiAyLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHZhciBrYXBwYSA9IC41NTIyODQ4OyAvLyA0ICogKChzcXJ0KDIpIC0gMSkgLyAzKVxyXG4gICAgICAgICAgICAgICAgdmFyIG94ID0gcmFkaXVzWCAqIGthcHBhO1xyXG4gICAgICAgICAgICAgICAgdmFyIG95ID0gcmFkaXVzWSAqIGthcHBhO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vbW92ZSB0byBsZWZ0IGVkZ2UsIGhhbGZ3YXkgZG93blxyXG4gICAgICAgICAgICAgICAgY3R4Lm1vdmVUbyh4LCBjZW50ZXJZKTtcclxuICAgICAgICAgICAgICAgIC8vdG9wIGxlZnQgYmV6aWVyIGN1cnZlXHJcbiAgICAgICAgICAgICAgICBjdHguYmV6aWVyQ3VydmVUbyh4LCBjZW50ZXJZIC0gb3ksIGNlbnRlclggLSBveCwgeSwgY2VudGVyWCwgeSk7XHJcbiAgICAgICAgICAgICAgICAvL3RvcCByaWdodCBiZXppZXIgY3VydmVcclxuICAgICAgICAgICAgICAgIGN0eC5iZXppZXJDdXJ2ZVRvKGNlbnRlclggKyBveCwgeSwgcmlnaHQsIGNlbnRlclkgLSBveSwgcmlnaHQsIGNlbnRlclkpO1xyXG4gICAgICAgICAgICAgICAgLy9ib3R0b20gcmlnaHQgYmV6aWVyIGN1cnZlXHJcbiAgICAgICAgICAgICAgICBjdHguYmV6aWVyQ3VydmVUbyhyaWdodCwgY2VudGVyWSArIG95LCBjZW50ZXJYICsgb3gsIGJvdHRvbSwgY2VudGVyWCwgYm90dG9tKTtcclxuICAgICAgICAgICAgICAgIC8vYm90dG9tIGxlZnQgYmV6aWVyIGN1cnZlXHJcbiAgICAgICAgICAgICAgICBjdHguYmV6aWVyQ3VydmVUbyhjZW50ZXJYIC0gb3gsIGJvdHRvbSwgeCwgY2VudGVyWSArIG95LCB4LCBjZW50ZXJZKTtcclxuICAgICAgICAgICAgICAgIGN0eC5jbG9zZVBhdGgoKTtcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGV4dGVuZEZpbGxCb3g6IGZ1bmN0aW9uIChib3g6IElCb3VuZGluZ0JveCkge1xyXG4gICAgICAgICAgICAgICAgYm94LmwgPSBNYXRoLm1pbihib3gubCwgeCk7XHJcbiAgICAgICAgICAgICAgICBib3guciA9IE1hdGgubWF4KGJveC5yLCB4ICsgd2lkdGgpO1xyXG4gICAgICAgICAgICAgICAgYm94LnQgPSBNYXRoLm1pbihib3gudCwgeSk7XHJcbiAgICAgICAgICAgICAgICBib3guYiA9IE1hdGgubWF4KGJveC5iLCB5ICsgaGVpZ2h0KTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZXh0ZW5kU3Ryb2tlQm94OiBmdW5jdGlvbiAoYm94OiBJQm91bmRpbmdCb3gsIHBhcnM6IElTdHJva2VQYXJhbWV0ZXJzKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaHMgPSBwYXJzLnN0cm9rZVRoaWNrbmVzcyAvIDIuMDtcclxuICAgICAgICAgICAgICAgIGJveC5sID0gTWF0aC5taW4oYm94LmwsIHggLSBocyk7XHJcbiAgICAgICAgICAgICAgICBib3guciA9IE1hdGgubWF4KGJveC5yLCB4ICsgd2lkdGggKyBocyk7XHJcbiAgICAgICAgICAgICAgICBib3gudCA9IE1hdGgubWluKGJveC50LCB5IC0gaHMpO1xyXG4gICAgICAgICAgICAgICAgYm94LmIgPSBNYXRoLm1heChib3guYiwgeSArIGhlaWdodCArIGhzKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2V0U3RhcnRWZWN0b3I6IGZ1bmN0aW9uICgpOiBudW1iZXJbXSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2V0RW5kVmVjdG9yOiBmdW5jdGlvbiAoKTogbnVtYmVyW10ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59IiwibW9kdWxlIG1pbmVydmEucGF0aC5zZWdtZW50cyB7XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElFbGxpcHRpY2FsQXJjIGV4dGVuZHMgSVBhdGhTZWdtZW50IHtcclxuICAgICAgICByeDogbnVtYmVyO1xyXG4gICAgICAgIHJ5OiBudW1iZXI7XHJcbiAgICAgICAgcm90YXRpb25BbmdsZTogbnVtYmVyO1xyXG4gICAgICAgIGlzTGFyZ2VBcmNGbGFnOiBib29sZWFuO1xyXG4gICAgICAgIHN3ZWVwRGlyZWN0aW9uRmxhZzogU3dlZXBEaXJlY3Rpb247XHJcbiAgICAgICAgZXg6IG51bWJlcjtcclxuICAgICAgICBleTogbnVtYmVyO1xyXG4gICAgfVxyXG5cclxuICAgIC8vU1ZHIGltcGxlbWVudGF0aW9uOiBodHRwOi8vd3d3LnczLm9yZy9UUi9TVkcvaW1wbG5vdGUuaHRtbCNBcmNTeW50YXhcclxuICAgIGV4cG9ydCBmdW5jdGlvbiBlbGxpcHRpY2FsQXJjIChyeDogbnVtYmVyLCByeTogbnVtYmVyLCByb3RhdGlvbkFuZ2xlOiBudW1iZXIsIGlzTGFyZ2VBcmNGbGFnOiBib29sZWFuLCBzd2VlcERpcmVjdGlvbkZsYWc6IFN3ZWVwRGlyZWN0aW9uLCBleDogbnVtYmVyLCBleTogbnVtYmVyKTogSUVsbGlwdGljYWxBcmMge1xyXG4gICAgICAgIHJldHVybiA8SUVsbGlwdGljYWxBcmM+e1xyXG4gICAgICAgICAgICBzeDogbnVsbCxcclxuICAgICAgICAgICAgc3k6IG51bGwsXHJcbiAgICAgICAgICAgIGlzU2luZ2xlOiBmYWxzZSxcclxuICAgICAgICAgICAgcng6IHJ4LFxyXG4gICAgICAgICAgICByeTogcnksXHJcbiAgICAgICAgICAgIHJvdGF0aW9uQW5nbGU6IHJvdGF0aW9uQW5nbGUsXHJcbiAgICAgICAgICAgIGlzTGFyZ2VBcmNGbGFnOiBpc0xhcmdlQXJjRmxhZyxcclxuICAgICAgICAgICAgc3dlZXBEaXJlY3Rpb25GbGFnOiBzd2VlcERpcmVjdGlvbkZsYWcsXHJcbiAgICAgICAgICAgIGV4OiBleCxcclxuICAgICAgICAgICAgZXk6IGV5LFxyXG4gICAgICAgICAgICBzdWI6IG51bGwsXHJcbiAgICAgICAgICAgIGRyYXc6IGZ1bmN0aW9uIChjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdWIgPSB0aGlzLnN1YiB8fCBidWlsZFNlZ21lbnRzKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIHN1YiA9IHRoaXMuc3ViLCBsZW4gPSBzdWIubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBzdWJbaV0uZHJhdyhjdHgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBleHRlbmRGaWxsQm94OiBmdW5jdGlvbiAoYm94OiBJQm91bmRpbmdCb3gpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3ViID0gdGhpcy5zdWIgfHwgYnVpbGRTZWdtZW50cyh0aGlzKTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBzdWIgPSB0aGlzLnN1YiwgbGVuID0gc3ViLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3ViW2ldLmV4dGVuZEZpbGxCb3goYm94KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZXh0ZW5kU3Ryb2tlQm94OiBmdW5jdGlvbiAoYm94OiBJQm91bmRpbmdCb3gsIHBhcnM6IElTdHJva2VQYXJhbWV0ZXJzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN1YiA9IHRoaXMuc3ViIHx8IGJ1aWxkU2VnbWVudHModGhpcyk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgc3ViID0gdGhpcy5zdWIsIGxlbiA9IHN1Yi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHN1YltpXS5leHRlbmRTdHJva2VCb3goYm94LCBwYXJzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uICgpOiBzdHJpbmcge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiQVwiICsgcngudG9TdHJpbmcoKSArIFwiLFwiICsgcnkudG9TdHJpbmcoKSArIFwiIFwiICsgcm90YXRpb25BbmdsZS50b1N0cmluZygpICsgXCIgXCIgKyBpc0xhcmdlQXJjRmxhZy50b1N0cmluZygpICsgXCIgXCIgKyBzd2VlcERpcmVjdGlvbkZsYWcudG9TdHJpbmcoKSArIFwiIFwiICsgZXgudG9TdHJpbmcoKSArIFwiLFwiICsgZXkudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2V0U3RhcnRWZWN0b3I6IGZ1bmN0aW9uICgpOiBudW1iZXJbXSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN1YiA9IHRoaXMuc3ViIHx8IGJ1aWxkU2VnbWVudHModGhpcyk7XHJcbiAgICAgICAgICAgICAgICB2YXIgc3ViID0gdGhpcy5zdWJbMF07XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc3ViID8gc3ViLmdldFN0YXJ0VmVjdG9yKCkgOiBbMCwgMF07XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldEVuZFZlY3RvcjogZnVuY3Rpb24gKCk6IG51bWJlcltdIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3ViID0gdGhpcy5zdWIgfHwgYnVpbGRTZWdtZW50cyh0aGlzKTtcclxuICAgICAgICAgICAgICAgIHZhciBzdWIgPSB0aGlzLnN1Ylt0aGlzLnN1Yi5sZW5ndGggLSAxXTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzdWIgPyBzdWIuZ2V0RW5kVmVjdG9yKCkgOiBbMCwgMF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBOT19EUkFXX0VQU0lMT04gPSAwLjAwMDAwMjtcclxuICAgIHZhciBaRVJPX0VQU0lMT04gPSAwLjAwMDAxOTtcclxuICAgIHZhciBTTUFMTF9FUFNJTE9OID0gMC4wMDAxMTc7XHJcblxyXG4gICAgZnVuY3Rpb24gYnVpbGRTZWdtZW50cyAoZWE6IElFbGxpcHRpY2FsQXJjKTogSVBhdGhTZWdtZW50W10ge1xyXG4gICAgICAgIC8vIGZyb20gdGVzdHMgaXQgc2VlbXMgdGhhdCBTaWx2ZXJsaWdodCBjbG9zZWx5IGZvbGxvd3MgU1ZHIGFyY1xyXG4gICAgICAgIC8vIGJlaGF2aW9yICh3aGljaCBpcyB2ZXJ5IGRpZmZlcmVudCBmcm9tIHRoZSBtb2RlbCB1c2VkIHdpdGggR0RJKylcclxuICAgICAgICAvLyBzb21lIGhlbHBmdWwgc3R1ZmYgaXMgYXZhaWxhYmxlIGhlcmU6XHJcbiAgICAgICAgLy8gaHR0cDovL3d3dy53My5vcmcvVFIvU1ZHL2ltcGxub3RlLmh0bWwjQXJjSW1wbGVtZW50YXRpb25Ob3Rlc1xyXG5cclxuICAgICAgICB2YXIgc2VnbWVudHM6IElQYXRoU2VnbWVudFtdID0gW107XHJcblxyXG4gICAgICAgIC8vIGdldCBzdGFydCBwb2ludCBmcm9tIHRoZSBleGlzdGluZyBwYXRoXHJcbiAgICAgICAgdmFyIHN4ID0gZWEuc3gsXHJcbiAgICAgICAgICAgIHN5ID0gZWEuc3ksXHJcbiAgICAgICAgICAgIGV4ID0gZWEuZXgsXHJcbiAgICAgICAgICAgIGV5ID0gZWEuZXksXHJcbiAgICAgICAgICAgIHJ4ID0gZWEucngsXHJcbiAgICAgICAgICAgIHJ5ID0gZWEucnk7XHJcblxyXG4gICAgICAgIC8vIGlmIHN0YXJ0IGFuZCBlbmQgcG9pbnRzIGFyZSBpZGVudGljYWwsIHRoZW4gbm8gYXJjIGlzIGRyYXduXHJcbiAgICAgICAgLy8gRklYTUU6IHdoYXQncyB0aGUgbG9naWMgKGlmIGFueSkgdG8gY29tcGFyZSBwb2ludHNcclxuICAgICAgICAvLyBlLmcuIDYwIGFuZCA2MC4wMDAwMDIgYXJlIGRyYXduIHdoaWxlIDgwIGFuZCA4MC4wMDAwMDMgYXJlbid0XHJcbiAgICAgICAgaWYgKE1hdGguYWJzKGV4IC0gc3gpIDwgTk9fRFJBV19FUFNJTE9OICYmIE1hdGguYWJzKGV5IC0gc3kpIDwgTk9fRFJBV19FUFNJTE9OKVxyXG4gICAgICAgICAgICByZXR1cm4gc2VnbWVudHM7XHJcblxyXG4gICAgICAgIC8vIENvcnJlY3Rpb24gb2Ygb3V0LW9mLXJhbmdlIHJhZGlpLCBzZWUgRjYuNiAoc3RlcCAxKVxyXG4gICAgICAgIGlmIChNYXRoLmFicyhyeCkgPCBaRVJPX0VQU0lMT04gfHwgTWF0aC5hYnMocnkpIDwgWkVST19FUFNJTE9OKSB7XHJcbiAgICAgICAgICAgIC8vIHRyZWF0IHRoaXMgYXMgYSBzdHJhaWdodCBsaW5lICh0byBlbmQgcG9pbnQpXHJcbiAgICAgICAgICAgIHNlZ21lbnRzLnB1c2gobGluZShleCwgZXkpKTtcclxuICAgICAgICAgICAgcmV0dXJuIHNlZ21lbnRzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gU2lsdmVybGlnaHQgXCJ0b28gc21hbGwgdG8gYmUgdXNlZnVsXCJcclxuICAgICAgICBpZiAoTWF0aC5hYnMocngpIDwgU01BTExfRVBTSUxPTiB8fCBNYXRoLmFicyhyeSkgPCBTTUFMTF9FUFNJTE9OKSB7XHJcbiAgICAgICAgICAgIC8vIHllcyBpdCBkb2VzIG1lYW4gdGhlcmUncyBhIGhvbGUgYmV0d2VlbiBcIm5vcm1hbFwiIEZQIHZhbHVlcyBhbmQgXCJ6ZXJvXCIgRlAgdmFsdWVzXHJcbiAgICAgICAgICAgIC8vIGFuZCBTTCBkb2Vzbid0IHJlbmRlciBhbnl0aGluZyBpbiB0aGlzIHR3aWxpZ2h0IHNvbnplXHJcbiAgICAgICAgICAgIHJldHVybiBzZWdtZW50cztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIENvcnJlY3Rpb24gb2Ygb3V0LW9mLXJhbmdlIHJhZGlpLCBzZWUgRjYuNi4xIChzdGVwIDIpXHJcbiAgICAgICAgcnggPSBNYXRoLmFicyhyeCk7XHJcbiAgICAgICAgcnkgPSBNYXRoLmFicyhyeSk7XHJcblxyXG4gICAgICAgIC8vIGNvbnZlcnQgYW5nbGUgaW50byByYWRpYW5zXHJcbiAgICAgICAgdmFyIGFuZ2xlID0gZWEucm90YXRpb25BbmdsZSAqIE1hdGguUEkgLyAxODAuMDtcclxuXHJcbiAgICAgICAgLy8gdmFyaWFibGVzIHJlcXVpcmVkIGZvciBGNi4zLjFcclxuICAgICAgICB2YXIgY29zX3BoaSA9IE1hdGguY29zKGFuZ2xlKTtcclxuICAgICAgICB2YXIgc2luX3BoaSA9IE1hdGguc2luKGFuZ2xlKTtcclxuICAgICAgICB2YXIgZHgyID0gKHN4IC0gZXgpIC8gMi4wO1xyXG4gICAgICAgIHZhciBkeTIgPSAoc3kgLSBleSkgLyAyLjA7XHJcbiAgICAgICAgdmFyIHgxcCA9IGNvc19waGkgKiBkeDIgKyBzaW5fcGhpICogZHkyO1xyXG4gICAgICAgIHZhciB5MXAgPSBjb3NfcGhpICogZHkyIC0gc2luX3BoaSAqIGR4MjtcclxuICAgICAgICB2YXIgeDFwMiA9IHgxcCAqIHgxcDtcclxuICAgICAgICB2YXIgeTFwMiA9IHkxcCAqIHkxcDtcclxuICAgICAgICB2YXIgcngyID0gcnggKiByeDtcclxuICAgICAgICB2YXIgcnkyID0gcnkgKiByeTtcclxuXHJcbiAgICAgICAgLy8gQ29ycmVjdGlvbiBvZiBvdXQtb2YtcmFuZ2UgcmFkaWksIHNlZSBGNi42LjIgKHN0ZXAgNClcclxuICAgICAgICB2YXIgbGFtYmRhID0gKHgxcDIgLyByeDIpICsgKHkxcDIgLyByeTIpO1xyXG4gICAgICAgIGlmIChsYW1iZGEgPiAxLjApIHtcclxuICAgICAgICAgICAgLy8gc2VlIEY2LjYuM1xyXG4gICAgICAgICAgICB2YXIgbGFtYmRhX3Jvb3QgPSBNYXRoLnNxcnQobGFtYmRhKTtcclxuICAgICAgICAgICAgcnggKj0gbGFtYmRhX3Jvb3Q7XHJcbiAgICAgICAgICAgIHJ5ICo9IGxhbWJkYV9yb290O1xyXG4gICAgICAgICAgICAvLyB1cGRhdGUgcngyIGFuZCByeTJcclxuICAgICAgICAgICAgcngyID0gcnggKiByeDtcclxuICAgICAgICAgICAgcnkyID0gcnkgKiByeTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBjeHAsIGN5cCwgY3gsIGN5O1xyXG4gICAgICAgIHZhciBjID0gKHJ4MiAqIHJ5MikgLSAocngyICogeTFwMikgLSAocnkyICogeDFwMik7XHJcblxyXG4gICAgICAgIHZhciBsYXJnZSA9IGVhLmlzTGFyZ2VBcmNGbGFnID09PSB0cnVlO1xyXG4gICAgICAgIHZhciBzd2VlcCA9IGVhLnN3ZWVwRGlyZWN0aW9uRmxhZyA9PT0gU3dlZXBEaXJlY3Rpb24uQ2xvY2t3aXNlO1xyXG4gICAgICAgIC8vIGNoZWNrIGlmIHRoZXJlIGlzIG5vIHBvc3NpYmxlIHNvbHV0aW9uIChpLmUuIHdlIGNhbid0IGRvIGEgc3F1YXJlIHJvb3Qgb2YgYSBuZWdhdGl2ZSB2YWx1ZSlcclxuICAgICAgICBpZiAoYyA8IDAuMCkge1xyXG4gICAgICAgICAgICAvLyBzY2FsZSB1bmlmb3JtbHkgdW50aWwgd2UgaGF2ZSBhIHNpbmdsZSBzb2x1dGlvbiAoc2VlIEY2LjIpIGkuZS4gd2hlbiBjID09IDAuMFxyXG4gICAgICAgICAgICB2YXIgc2NhbGUgPSBNYXRoLnNxcnQoMS4wIC0gYyAvIChyeDIgKiByeTIpKTtcclxuICAgICAgICAgICAgcnggKj0gc2NhbGU7XHJcbiAgICAgICAgICAgIHJ5ICo9IHNjYWxlO1xyXG4gICAgICAgICAgICAvLyB1cGRhdGUgcngyIGFuZCByeTJcclxuICAgICAgICAgICAgcngyID0gcnggKiByeDtcclxuICAgICAgICAgICAgcnkyID0gcnkgKiByeTtcclxuXHJcbiAgICAgICAgICAgIC8vIHN0ZXAgMiAoRjYuNS4yKSAtIHNpbXBsaWZpZWQgc2luY2UgYyA9PSAwLjBcclxuICAgICAgICAgICAgY3hwID0gMC4wO1xyXG4gICAgICAgICAgICBjeXAgPSAwLjA7XHJcblxyXG4gICAgICAgICAgICAvLyBzdGVwIDMgKEY2LjUuMyBmaXJzdCBwYXJ0KSAtIHNpbXBsaWZpZWQgc2luY2UgY3hwIGFuZCBjeXAgPT0gMC4wXHJcbiAgICAgICAgICAgIGN4ID0gMC4wO1xyXG4gICAgICAgICAgICBjeSA9IDAuMDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBjb21wbGV0ZSBjIGNhbGN1bGF0aW9uXHJcbiAgICAgICAgICAgIGMgPSBNYXRoLnNxcnQoYyAvICgocngyICogeTFwMikgKyAocnkyICogeDFwMikpKTtcclxuXHJcbiAgICAgICAgICAgIC8vIGludmVyc2Ugc2lnbiBpZiBGYSA9PSBGc1xyXG4gICAgICAgICAgICBpZiAobGFyZ2UgPT09IHN3ZWVwKVxyXG4gICAgICAgICAgICAgICAgYyA9IC1jO1xyXG5cclxuICAgICAgICAgICAgLy8gc3RlcCAyIChGNi41LjIpXHJcbiAgICAgICAgICAgIGN4cCA9IGMgKiAoIHJ4ICogeTFwIC8gcnkpO1xyXG4gICAgICAgICAgICBjeXAgPSBjICogKC1yeSAqIHgxcCAvIHJ4KTtcclxuXHJcbiAgICAgICAgICAgIC8vIHN0ZXAgMyAoRjYuNS4zIGZpcnN0IHBhcnQpXHJcbiAgICAgICAgICAgIGN4ID0gY29zX3BoaSAqIGN4cCAtIHNpbl9waGkgKiBjeXA7XHJcbiAgICAgICAgICAgIGN5ID0gc2luX3BoaSAqIGN4cCArIGNvc19waGkgKiBjeXA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBzdGVwIDMgKEY2LjUuMyBzZWNvbmQgcGFydCkgd2Ugbm93IGhhdmUgdGhlIGNlbnRlciBwb2ludCBvZiB0aGUgZWxsaXBzZVxyXG4gICAgICAgIGN4ICs9IChzeCArIGV4KSAvIDIuMDtcclxuICAgICAgICBjeSArPSAoc3kgKyBleSkgLyAyLjA7XHJcblxyXG4gICAgICAgIC8vIHN0ZXAgNCAoRjYuNS40KVxyXG4gICAgICAgIC8vIHdlIGRvbnQnIHVzZSBhcmNjb3MgKGFzIHBlciB3M2MgZG9jKSwgc2VlIGh0dHA6Ly93d3cuZXVjbGlkZWFuc3BhY2UuY29tL21hdGhzL2FsZ2VicmEvdmVjdG9ycy9hbmdsZUJldHdlZW4vaW5kZXguaHRtXHJcbiAgICAgICAgLy8gbm90ZTogYXRhbjIgKDAuMCwgMS4wKSA9PSAwLjBcclxuICAgICAgICB2YXIgYXQgPSBNYXRoLmF0YW4yKCgoeTFwIC0gY3lwKSAvIHJ5KSwgKCh4MXAgLSBjeHApIC8gcngpKTtcclxuICAgICAgICB2YXIgdGhldGExID0gKGF0IDwgMC4wKSA/IDIuMCAqIE1hdGguUEkgKyBhdCA6IGF0O1xyXG5cclxuICAgICAgICB2YXIgbmF0ID0gTWF0aC5hdGFuMigoKC15MXAgLSBjeXApIC8gcnkpLCAoKC14MXAgLSBjeHApIC8gcngpKTtcclxuICAgICAgICB2YXIgZGVsdGFfdGhldGEgPSAobmF0IDwgYXQpID8gMi4wICogTWF0aC5QSSAtIGF0ICsgbmF0IDogbmF0IC0gYXQ7XHJcblxyXG4gICAgICAgIGlmIChzd2VlcCkge1xyXG4gICAgICAgICAgICAvLyBlbnN1cmUgZGVsdGEgdGhldGEgPCAwIG9yIGVsc2UgYWRkIDM2MCBkZWdyZWVzXHJcbiAgICAgICAgICAgIGlmIChkZWx0YV90aGV0YSA8IDAuMClcclxuICAgICAgICAgICAgICAgIGRlbHRhX3RoZXRhICs9IDIuMCAqIE1hdGguUEk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gZW5zdXJlIGRlbHRhIHRoZXRhID4gMCBvciBlbHNlIHN1YnN0cmFjdCAzNjAgZGVncmVlc1xyXG4gICAgICAgICAgICBpZiAoZGVsdGFfdGhldGEgPiAwLjApXHJcbiAgICAgICAgICAgICAgICBkZWx0YV90aGV0YSAtPSAyLjAgKiBNYXRoLlBJO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gYWRkIHNldmVyYWwgY3ViaWMgYmV6aWVyIHRvIGFwcHJveGltYXRlIHRoZSBhcmMgKHNtYWxsZXIgdGhhbiA5MCBkZWdyZWVzKVxyXG4gICAgICAgIC8vIHdlIGFkZCBvbmUgZXh0cmEgc2VnbWVudCBiZWNhdXNlIHdlIHdhbnQgc29tZXRoaW5nIHNtYWxsZXIgdGhhbiA5MGRlZyAoaS5lLiBub3QgOTAgaXRzZWxmKVxyXG4gICAgICAgIHZhciBzZWdtZW50X2NvdW50ID0gTWF0aC5mbG9vcihNYXRoLmFicyhkZWx0YV90aGV0YSAvIChNYXRoLlBJIC8gMikpKSArIDE7XHJcbiAgICAgICAgdmFyIGRlbHRhID0gZGVsdGFfdGhldGEgLyBzZWdtZW50X2NvdW50O1xyXG5cclxuICAgICAgICAvLyBodHRwOi8vd3d3LnN0aWxsaHEuY29tL2N0cGZhcS8yMDAxL2NvbXAudGV4dC5wZGYtZmFxLTIwMDEtMDQudHh0IChzZWN0aW9uIDIuMTMpXHJcbiAgICAgICAgdmFyIGJjcCA9IDQuMCAvIDMgKiAoMSAtIE1hdGguY29zKGRlbHRhIC8gMikpIC8gTWF0aC5zaW4oZGVsdGEgLyAyKTtcclxuXHJcbiAgICAgICAgdmFyIGNvc19waGlfcnggPSBjb3NfcGhpICogcng7XHJcbiAgICAgICAgdmFyIGNvc19waGlfcnkgPSBjb3NfcGhpICogcnk7XHJcbiAgICAgICAgdmFyIHNpbl9waGlfcnggPSBzaW5fcGhpICogcng7XHJcbiAgICAgICAgdmFyIHNpbl9waGlfcnkgPSBzaW5fcGhpICogcnk7XHJcblxyXG4gICAgICAgIHZhciBjb3NfdGhldGExID0gTWF0aC5jb3ModGhldGExKTtcclxuICAgICAgICB2YXIgc2luX3RoZXRhMSA9IE1hdGguc2luKHRoZXRhMSk7XHJcblxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VnbWVudF9jb3VudDsgKytpKSB7XHJcbiAgICAgICAgICAgIC8vIGVuZCBhbmdsZSAoZm9yIHRoaXMgc2VnbWVudCkgPSBjdXJyZW50ICsgZGVsdGFcclxuICAgICAgICAgICAgdmFyIHRoZXRhMiA9IHRoZXRhMSArIGRlbHRhO1xyXG4gICAgICAgICAgICB2YXIgY29zX3RoZXRhMiA9IE1hdGguY29zKHRoZXRhMik7XHJcbiAgICAgICAgICAgIHZhciBzaW5fdGhldGEyID0gTWF0aC5zaW4odGhldGEyKTtcclxuXHJcbiAgICAgICAgICAgIC8vIGZpcnN0IGNvbnRyb2wgcG9pbnQgKGJhc2VkIG9uIHN0YXJ0IHBvaW50IHN4LHN5KVxyXG4gICAgICAgICAgICB2YXIgYzF4ID0gc3ggLSBiY3AgKiAoY29zX3BoaV9yeCAqIHNpbl90aGV0YTEgKyBzaW5fcGhpX3J5ICogY29zX3RoZXRhMSk7XHJcbiAgICAgICAgICAgIHZhciBjMXkgPSBzeSArIGJjcCAqIChjb3NfcGhpX3J5ICogY29zX3RoZXRhMSAtIHNpbl9waGlfcnggKiBzaW5fdGhldGExKTtcclxuXHJcbiAgICAgICAgICAgIC8vIGVuZCBwb2ludCAoZm9yIHRoaXMgc2VnbWVudClcclxuICAgICAgICAgICAgdmFyIGN1cl9leCA9IGN4ICsgKGNvc19waGlfcnggKiBjb3NfdGhldGEyIC0gc2luX3BoaV9yeSAqIHNpbl90aGV0YTIpO1xyXG4gICAgICAgICAgICB2YXIgY3VyX2V5ID0gY3kgKyAoc2luX3BoaV9yeCAqIGNvc190aGV0YTIgKyBjb3NfcGhpX3J5ICogc2luX3RoZXRhMik7XHJcblxyXG4gICAgICAgICAgICAvLyBzZWNvbmQgY29udHJvbCBwb2ludCAoYmFzZWQgb24gZW5kIHBvaW50IGV4LGV5KVxyXG4gICAgICAgICAgICB2YXIgYzJ4ID0gY3VyX2V4ICsgYmNwICogKGNvc19waGlfcnggKiBzaW5fdGhldGEyICsgc2luX3BoaV9yeSAqIGNvc190aGV0YTIpO1xyXG4gICAgICAgICAgICB2YXIgYzJ5ID0gY3VyX2V5ICsgYmNwICogKHNpbl9waGlfcnggKiBzaW5fdGhldGEyIC0gY29zX3BoaV9yeSAqIGNvc190aGV0YTIpO1xyXG5cclxuICAgICAgICAgICAgc2VnbWVudHMucHVzaChjdWJpY0JlemllcihjMXgsIGMxeSwgYzJ4LCBjMnksIGN1cl9leCwgY3VyX2V5KSk7XHJcblxyXG4gICAgICAgICAgICAvLyBuZXh0IHN0YXJ0IHBvaW50IGlzIHRoZSBjdXJyZW50IGVuZCBwb2ludCAoc2FtZSBmb3IgYW5nbGUpXHJcbiAgICAgICAgICAgIHN4ID0gY3VyX2V4O1xyXG4gICAgICAgICAgICBzeSA9IGN1cl9leTtcclxuICAgICAgICAgICAgdGhldGExID0gdGhldGEyO1xyXG4gICAgICAgICAgICAvLyBhdm9pZCByZWNvbXB1dGF0aW9uc1xyXG4gICAgICAgICAgICBjb3NfdGhldGExID0gY29zX3RoZXRhMjtcclxuICAgICAgICAgICAgc2luX3RoZXRhMSA9IHNpbl90aGV0YTI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gc2VnbWVudHM7XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5wYXRoLnNlZ21lbnRzIHtcclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUxpbmUgZXh0ZW5kcyBJUGF0aFNlZ21lbnQge1xyXG4gICAgICAgIHg6IG51bWJlcjtcclxuICAgICAgICB5OiBudW1iZXI7XHJcbiAgICB9XHJcbiAgICBleHBvcnQgZnVuY3Rpb24gbGluZSh4OiBudW1iZXIsIHk6IG51bWJlcik6IElMaW5lIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBpc1NpbmdsZTogZmFsc2UsXHJcbiAgICAgICAgICAgIHN4OiBudWxsLFxyXG4gICAgICAgICAgICBzeTogbnVsbCxcclxuICAgICAgICAgICAgeDogeCxcclxuICAgICAgICAgICAgeTogeSxcclxuICAgICAgICAgICAgZXg6IHgsXHJcbiAgICAgICAgICAgIGV5OiB5LFxyXG4gICAgICAgICAgICBkcmF3OiBmdW5jdGlvbiAoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQpIHtcclxuICAgICAgICAgICAgICAgIGN0eC5saW5lVG8oeCwgeSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGV4dGVuZEZpbGxCb3g6IGZ1bmN0aW9uIChib3g6IElCb3VuZGluZ0JveCkge1xyXG4gICAgICAgICAgICAgICAgYm94LmwgPSBNYXRoLm1pbihib3gubCwgeCk7XHJcbiAgICAgICAgICAgICAgICBib3guciA9IE1hdGgubWF4KGJveC5yLCB4KTtcclxuICAgICAgICAgICAgICAgIGJveC50ID0gTWF0aC5taW4oYm94LnQsIHkpO1xyXG4gICAgICAgICAgICAgICAgYm94LmIgPSBNYXRoLm1heChib3guYiwgeSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGV4dGVuZFN0cm9rZUJveDogZnVuY3Rpb24gKGJveDogSUJvdW5kaW5nQm94LCBwYXJzOiBJU3Ryb2tlUGFyYW1ldGVycykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5leHRlbmRGaWxsQm94KGJveCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbiAoKTogc3RyaW5nIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIkxcIiArIHgudG9TdHJpbmcoKSArIFwiLFwiICsgeS50b1N0cmluZygpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXRTdGFydFZlY3RvcjogZnVuY3Rpb24gKCk6IG51bWJlcltdIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHggLSB0aGlzLnN4LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB5IC0gdGhpcy5zeVxyXG4gICAgICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2V0RW5kVmVjdG9yOiBmdW5jdGlvbiAoKTogbnVtYmVyW10ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgeCAtIHRoaXMuc3gsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHkgLSB0aGlzLnN5XHJcbiAgICAgICAgICAgICAgICBdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLnBhdGguc2VnbWVudHMge1xyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJTW92ZSBleHRlbmRzIElQYXRoU2VnbWVudCB7XHJcbiAgICAgICAgeDogbnVtYmVyO1xyXG4gICAgICAgIHk6IG51bWJlcjtcclxuICAgICAgICBpc01vdmU6IGJvb2xlYW47XHJcbiAgICB9XHJcbiAgICBleHBvcnQgZnVuY3Rpb24gbW92ZSh4OiBudW1iZXIsIHk6IG51bWJlcik6IElNb3ZlIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBzeDogbnVsbCxcclxuICAgICAgICAgICAgc3k6IG51bGwsXHJcbiAgICAgICAgICAgIGV4OiB4LFxyXG4gICAgICAgICAgICBleTogeSxcclxuICAgICAgICAgICAgaXNTaW5nbGU6IGZhbHNlLFxyXG4gICAgICAgICAgICBpc01vdmU6IHRydWUsXHJcbiAgICAgICAgICAgIHg6IHgsXHJcbiAgICAgICAgICAgIHk6IHksXHJcbiAgICAgICAgICAgIGRyYXc6IGZ1bmN0aW9uIChjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCkge1xyXG4gICAgICAgICAgICAgICAgY3R4Lm1vdmVUbyh4LCB5KTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZXh0ZW5kRmlsbEJveDogZnVuY3Rpb24gKGJveDogSUJvdW5kaW5nQm94KSB7XHJcbiAgICAgICAgICAgICAgICBib3gubCA9IE1hdGgubWluKGJveC5sLCB4KTtcclxuICAgICAgICAgICAgICAgIGJveC5yID0gTWF0aC5tYXgoYm94LnIsIHgpO1xyXG4gICAgICAgICAgICAgICAgYm94LnQgPSBNYXRoLm1pbihib3gudCwgeSk7XHJcbiAgICAgICAgICAgICAgICBib3guYiA9IE1hdGgubWF4KGJveC5iLCB5KTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZXh0ZW5kU3Ryb2tlQm94OiBmdW5jdGlvbiAoYm94OiBJQm91bmRpbmdCb3gsIHBhcnM6IElTdHJva2VQYXJhbWV0ZXJzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmV4dGVuZEZpbGxCb3goYm94KTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uICgpOiBzdHJpbmcge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiTVwiICsgeC50b1N0cmluZygpICsgXCIsXCIgKyB5LnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldFN0YXJ0VmVjdG9yOiBmdW5jdGlvbiAoKTogbnVtYmVyW10ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldEVuZFZlY3RvcjogZnVuY3Rpb24gKCk6IG51bWJlcltdIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLnBhdGguc2VnbWVudHMge1xyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJUXVhZHJhdGljQmV6aWVyIGV4dGVuZHMgSVBhdGhTZWdtZW50IHtcclxuICAgICAgICBjcHg6IG51bWJlcjtcclxuICAgICAgICBjcHk6IG51bWJlcjtcclxuICAgICAgICB4OiBudW1iZXI7XHJcbiAgICAgICAgeTogbnVtYmVyO1xyXG4gICAgfVxyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHF1YWRyYXRpY0JlemllcihjcHg6IG51bWJlciwgY3B5OiBudW1iZXIsIHg6IG51bWJlciwgeTogbnVtYmVyKTogSVF1YWRyYXRpY0JlemllciB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgc3g6IG51bGwsXHJcbiAgICAgICAgICAgIHN5OiBudWxsLFxyXG4gICAgICAgICAgICBleDogeCxcclxuICAgICAgICAgICAgZXk6IHksXHJcbiAgICAgICAgICAgIGlzU2luZ2xlOiBmYWxzZSxcclxuICAgICAgICAgICAgY3B4OiBjcHgsXHJcbiAgICAgICAgICAgIGNweTogY3B5LFxyXG4gICAgICAgICAgICB4OiB4LFxyXG4gICAgICAgICAgICB5OiB5LFxyXG4gICAgICAgICAgICBkcmF3OiBmdW5jdGlvbiAoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQpIHtcclxuICAgICAgICAgICAgICAgIGN0eC5xdWFkcmF0aWNDdXJ2ZVRvKGNweCwgY3B5LCB4LCB5KTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZXh0ZW5kRmlsbEJveDogZnVuY3Rpb24gKGJveDogSUJvdW5kaW5nQm94KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbSA9IGdldE1heGltYSh0aGlzLnN4LCBjcHgsIHgsIHRoaXMuc3ksIGNweSwgeSk7XHJcbiAgICAgICAgICAgICAgICBpZiAobS54ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBib3gubCA9IE1hdGgubWluKGJveC5sLCBtLngpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJveC5yID0gTWF0aC5tYXgoYm94LnIsIG0ueCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAobS55ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBib3gudCA9IE1hdGgubWluKGJveC50LCBtLnkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJveC5iID0gTWF0aC5tYXgoYm94LmIsIG0ueSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgYm94LmwgPSBNYXRoLm1pbihib3gubCwgeCk7XHJcbiAgICAgICAgICAgICAgICBib3guciA9IE1hdGgubWF4KGJveC5yLCB4KTtcclxuICAgICAgICAgICAgICAgIGJveC50ID0gTWF0aC5taW4oYm94LnQsIHkpO1xyXG4gICAgICAgICAgICAgICAgYm94LmIgPSBNYXRoLm1heChib3guYiwgeSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGV4dGVuZFN0cm9rZUJveDogZnVuY3Rpb24gKGJveDogSUJvdW5kaW5nQm94LCBwYXJzOiBJU3Ryb2tlUGFyYW1ldGVycykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGhzID0gcGFycy5zdHJva2VUaGlja25lc3MgLyAyLjA7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIG0gPSBnZXRNYXhpbWEodGhpcy5zeCwgY3B4LCB4LCB0aGlzLnN5LCBjcHksIHkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG0ueCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJveC5sID0gTWF0aC5taW4oYm94LmwsIG0ueCAtIGhzKTtcclxuICAgICAgICAgICAgICAgICAgICBib3guciA9IE1hdGgubWF4KGJveC5yLCBtLnggKyBocyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAobS55KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYm94LnQgPSBNYXRoLm1pbihib3gudCwgbS55IC0gaHMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJveC5iID0gTWF0aC5tYXgoYm94LmIsIG0ueSArIGhzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBib3gubCA9IE1hdGgubWluKGJveC5sLCB4KTtcclxuICAgICAgICAgICAgICAgIGJveC5yID0gTWF0aC5tYXgoYm94LnIsIHgpO1xyXG4gICAgICAgICAgICAgICAgYm94LnQgPSBNYXRoLm1pbihib3gudCwgeSk7XHJcbiAgICAgICAgICAgICAgICBib3guYiA9IE1hdGgubWF4KGJveC5iLCB5KTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uICgpOiBzdHJpbmcge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiUVwiICsgY3B4LnRvU3RyaW5nKCkgKyBcIixcIiArIGNweS50b1N0cmluZygpICsgXCIgXCIgKyB4LnRvU3RyaW5nKCkgKyBcIixcIiArIHkudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2V0U3RhcnRWZWN0b3I6IGZ1bmN0aW9uICgpOiBudW1iZXJbXSB7XHJcbiAgICAgICAgICAgICAgICAvL1tGKDApJ3gsIEYoMCkneV1cclxuICAgICAgICAgICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDIgKiAoY3B4IC0gdGhpcy5zeCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDIgKiAoY3B5IC0gdGhpcy5zeSlcclxuICAgICAgICAgICAgICAgIF07XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldEVuZFZlY3RvcjogZnVuY3Rpb24gKCk6IG51bWJlcltdIHtcclxuICAgICAgICAgICAgICAgIC8vW0YoMSkneCwgRigxKSd5XVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgMiAqICh4IC0gY3B4KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgMiAqICh5IC0gY3B5KVxyXG4gICAgICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4vL2h0dHA6Ly9wb21heC5uaWhvbmdvcmVzb3VyY2VzLmNvbS9wYWdlcy9iZXppZXIvXHJcbiAgICAvKiBRdWFkcmF0aWMgQmV6aWVyIGN1cnZlIGlzIGRlZmluZWQgYnkgcGFyYW1ldHJpYyBjdXJ2ZTpcclxuICAgICAqICBGKHQpeCA9IHMueCgxLXQpXjIgKyBjcC54KDEtdCl0ICsgZS54KHReMilcclxuICAgICAqICBGKHQpeCA9IHMueSgxLXQpXjIgKyBjcC55KDEtdCl0ICsgZS55KHReMilcclxuICAgICAqIHdoZXJlXHJcbiAgICAgKiAgcyA9IHN0YXJ0IHBvaW50XHJcbiAgICAgKiAgY3AgPSBjb250cm9sIHBvaW50XHJcbiAgICAgKiAgZSA9IGVuZCBwb2ludFxyXG4gICAgICpcclxuICAgICAqIFdlIGZpbmQgdGhlIGNvb3JkaW5hdGVzICgyKSB3aGVyZSBGKHQpeC9kdCA9IDAsIEYodCl5L2R0ID0gMFxyXG4gICAgICogKHdpdGhpbiB0aGUgY29uc3RyYWludHMgb2YgdGhlIGN1cnZlICgwIDw9IHQgPD0gMSlcclxuICAgICAqIFRoZXNlIHBvaW50cyB3aWxsIGV4cGFuZCB0aGUgYm91bmRpbmcgYm94XHJcbiAgICAgKi9cclxuXHJcbiAgICBpbnRlcmZhY2UgSU1heGltYSB7XHJcbiAgICAgICAgeDogbnVtYmVyO1xyXG4gICAgICAgIHk6IG51bWJlcjtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGdldE1heGltYSh4MTogbnVtYmVyLCB4MjogbnVtYmVyLCB4MzogbnVtYmVyLCB5MTogbnVtYmVyLCB5MjogbnVtYmVyLCB5MzogbnVtYmVyKTogSU1heGltYSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgeDogY29kKHgxLCB4MiwgeDMpLFxyXG4gICAgICAgICAgICB5OiBjb2QoeTEsIHkyLCB5MylcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGNvZChhOiBudW1iZXIsIGI6IG51bWJlciwgYzogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgICAgICB2YXIgdCA9IChhIC0gYikgLyAoYSAtIDIgKiBiICsgYyk7XHJcbiAgICAgICAgaWYgKHQgPCAwIHx8IHQgPiAxKVxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICByZXR1cm4gKGEgKiBNYXRoLnBvdygxIC0gdCwgMikpICsgKDIgKiBiICogKDEgLSB0KSAqIHQpICsgKGMgKiBNYXRoLnBvdyh0LCAyKSk7XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5wYXRoLnNlZ21lbnRzIHtcclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSVJlY3QgZXh0ZW5kcyBJUGF0aFNlZ21lbnQge1xyXG4gICAgICAgIHg6IG51bWJlcjtcclxuICAgICAgICB5OiBudW1iZXI7XHJcbiAgICAgICAgd2lkdGg6IG51bWJlcjtcclxuICAgICAgICBoZWlnaHQ6IG51bWJlcjtcclxuICAgIH1cclxuICAgIGV4cG9ydCBmdW5jdGlvbiByZWN0ICh4OiBudW1iZXIsIHk6IG51bWJlciwgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpOiBJUmVjdCB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgc3g6IG51bGwsXHJcbiAgICAgICAgICAgIHN5OiBudWxsLFxyXG4gICAgICAgICAgICBpc1NpbmdsZTogdHJ1ZSxcclxuICAgICAgICAgICAgeDogeCxcclxuICAgICAgICAgICAgeTogeSxcclxuICAgICAgICAgICAgZXg6IHgsXHJcbiAgICAgICAgICAgIGV5OiB5LFxyXG4gICAgICAgICAgICB3aWR0aDogd2lkdGgsXHJcbiAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0LFxyXG4gICAgICAgICAgICBkcmF3OiBmdW5jdGlvbiAoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQpIHtcclxuICAgICAgICAgICAgICAgIGN0eC5yZWN0KHgsIHksIHdpZHRoLCBoZWlnaHQpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBleHRlbmRGaWxsQm94OiBmdW5jdGlvbiAoYm94OiBJQm91bmRpbmdCb3gpIHtcclxuICAgICAgICAgICAgICAgIGJveC5sID0gTWF0aC5taW4oYm94LmwsIHgpO1xyXG4gICAgICAgICAgICAgICAgYm94LnIgPSBNYXRoLm1heChib3guciwgeCArIHdpZHRoKTtcclxuICAgICAgICAgICAgICAgIGJveC50ID0gTWF0aC5taW4oYm94LnQsIHkpO1xyXG4gICAgICAgICAgICAgICAgYm94LmIgPSBNYXRoLm1heChib3guYiwgeSArIGhlaWdodCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGV4dGVuZFN0cm9rZUJveDogZnVuY3Rpb24gKGJveDogSUJvdW5kaW5nQm94LCBwYXJzOiBJU3Ryb2tlUGFyYW1ldGVycykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGhzID0gcGFycy5zdHJva2VUaGlja25lc3MgLyAyLjA7XHJcbiAgICAgICAgICAgICAgICBib3gubCA9IE1hdGgubWluKGJveC5sLCB4IC0gaHMpO1xyXG4gICAgICAgICAgICAgICAgYm94LnIgPSBNYXRoLm1heChib3guciwgeCArIHdpZHRoICsgaHMpO1xyXG4gICAgICAgICAgICAgICAgYm94LnQgPSBNYXRoLm1pbihib3gudCwgeSAtIGhzKTtcclxuICAgICAgICAgICAgICAgIGJveC5iID0gTWF0aC5tYXgoYm94LmIsIHkgKyBoZWlnaHQgKyBocyk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldFN0YXJ0VmVjdG9yOiBmdW5jdGlvbiAoKTogbnVtYmVyW10ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldEVuZFZlY3RvcjogZnVuY3Rpb24gKCk6IG51bWJlcltdIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLnBhdGguc2VnbWVudHMge1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHJvdW5kZWRSZWN0ICh4OiBudW1iZXIsIHk6IG51bWJlciwgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIsIHJhZGl1c1g6IG51bWJlciwgcmFkaXVzWTogbnVtYmVyKTogSVJlY3Qge1xyXG4gICAgICAgIGlmIChyYWRpdXNYID09PSAwLjAgJiYgcmFkaXVzWSA9PT0gMC4wKVxyXG4gICAgICAgICAgICByZXR1cm4gcmVjdCh4LCB5LCB3aWR0aCwgaGVpZ2h0KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIDxJUmVjdD57XHJcbiAgICAgICAgICAgIHN4OiBudWxsLFxyXG4gICAgICAgICAgICBzeTogbnVsbCxcclxuICAgICAgICAgICAgZXg6IHgsXHJcbiAgICAgICAgICAgIGV5OiB5LFxyXG4gICAgICAgICAgICBpc1NpbmdsZTogdHJ1ZSxcclxuICAgICAgICAgICAgeDogeCxcclxuICAgICAgICAgICAgeTogeSxcclxuICAgICAgICAgICAgd2lkdGg6IHdpZHRoLFxyXG4gICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCxcclxuICAgICAgICAgICAgcmFkaXVzWDogcmFkaXVzWCxcclxuICAgICAgICAgICAgcmFkaXVzWTogcmFkaXVzWSxcclxuICAgICAgICAgICAgZHJhdzogZnVuY3Rpb24gKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEKSB7XHJcbiAgICAgICAgICAgICAgICBtaW5lcnZhLnNoYXBlcy5yZWN0YW5nbGUuaGVscGVycy5kcmF3KGN0eCwgeCwgeSwgd2lkdGgsIGhlaWdodCwgcmFkaXVzWCwgcmFkaXVzWSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGV4dGVuZEZpbGxCb3g6IGZ1bmN0aW9uIChib3g6IElCb3VuZGluZ0JveCkge1xyXG4gICAgICAgICAgICAgICAgYm94LmwgPSBNYXRoLm1pbihib3gubCwgeCk7XHJcbiAgICAgICAgICAgICAgICBib3guciA9IE1hdGgubWF4KGJveC5yLCB4ICsgd2lkdGgpO1xyXG4gICAgICAgICAgICAgICAgYm94LnQgPSBNYXRoLm1pbihib3gudCwgeSk7XHJcbiAgICAgICAgICAgICAgICBib3guYiA9IE1hdGgubWF4KGJveC5iLCB5ICsgaGVpZ2h0KTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZXh0ZW5kU3Ryb2tlQm94OiBmdW5jdGlvbiAoYm94OiBJQm91bmRpbmdCb3gsIHBhcnM6IElTdHJva2VQYXJhbWV0ZXJzKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaHMgPSBwYXJzLnN0cm9rZVRoaWNrbmVzcyAvIDIuMDtcclxuICAgICAgICAgICAgICAgIGJveC5sID0gTWF0aC5taW4oYm94LmwsIHggLSBocyk7XHJcbiAgICAgICAgICAgICAgICBib3guciA9IE1hdGgubWF4KGJveC5yLCB4ICsgd2lkdGggKyBocyk7XHJcbiAgICAgICAgICAgICAgICBib3gudCA9IE1hdGgubWluKGJveC50LCB5IC0gaHMpO1xyXG4gICAgICAgICAgICAgICAgYm94LmIgPSBNYXRoLm1heChib3guYiwgeSArIGhlaWdodCArIGhzKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2V0U3RhcnRWZWN0b3I6IGZ1bmN0aW9uICgpOiBudW1iZXJbXSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2V0RW5kVmVjdG9yOiBmdW5jdGlvbiAoKTogbnVtYmVyW10ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59IiwiaW50ZXJmYWNlIENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCB7XHJcbiAgICBiYWNraW5nU3RvcmVQaXhlbFJhdGlvOiBudW1iZXI7XHJcbn1cclxuaWYgKCFDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQucHJvdG90eXBlLmhhc093blByb3BlcnR5KFwiYmFja2luZ1N0b3JlUGl4ZWxSYXRpb1wiKSkge1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRC5wcm90b3R5cGUsIFwiYmFja2luZ1N0b3JlUGl4ZWxSYXRpb1wiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKTogbnVtYmVyIHtcclxuICAgICAgICAgICAgdmFyIGN0eCA9IDxhbnk+dGhpcztcclxuICAgICAgICAgICAgcmV0dXJuIGN0eC53ZWJraXRCYWNraW5nU3RvcmVQaXhlbFJhdGlvXHJcbiAgICAgICAgICAgICAgICB8fCBjdHgubW96QmFja2luZ1N0b3JlUGl4ZWxSYXRpb1xyXG4gICAgICAgICAgICAgICAgfHwgY3R4Lm1zQmFja2luZ1N0b3JlUGl4ZWxSYXRpb1xyXG4gICAgICAgICAgICAgICAgfHwgY3R4Lm9CYWNraW5nU3RvcmVQaXhlbFJhdGlvXHJcbiAgICAgICAgICAgICAgICB8fCAxO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59IiwiaW50ZXJmYWNlIENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCB7XHJcbiAgICBlbGxpcHNlKHg6IG51bWJlciwgeTogbnVtYmVyLCByYWRpdXNYOiBudW1iZXIsIHJhZGl1c1k6IG51bWJlciwgcm90YXRpb246IG51bWJlciwgc3RhcnRBbmdsZTogbnVtYmVyLCBlbmRBbmdsZTogbnVtYmVyLCBhbnRpQ2xvY2t3aXNlPzogYm9vbGVhbik7XHJcbn1cclxuaWYgKCFDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQucHJvdG90eXBlLmVsbGlwc2UpIHtcclxuICAgIENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRC5wcm90b3R5cGUuZWxsaXBzZSA9IGZ1bmN0aW9uICh4OiBudW1iZXIsIHk6IG51bWJlciwgcmFkaXVzWDogbnVtYmVyLCByYWRpdXNZOiBudW1iZXIsIHJvdGF0aW9uOiBudW1iZXIsIHN0YXJ0QW5nbGU6IG51bWJlciwgZW5kQW5nbGU6IG51bWJlciwgYW50aUNsb2Nrd2lzZTogYm9vbGVhbikge1xyXG4gICAgICAgIHRoaXMuc2F2ZSgpO1xyXG4gICAgICAgIHRoaXMudHJhbnNsYXRlKHgsIHkpO1xyXG4gICAgICAgIHRoaXMucm90YXRlKHJvdGF0aW9uKTtcclxuICAgICAgICB0aGlzLnNjYWxlKHJhZGl1c1gsIHJhZGl1c1kpO1xyXG4gICAgICAgIHRoaXMuYXJjKDAsIDAsIDEsIHN0YXJ0QW5nbGUsIGVuZEFuZ2xlLCBhbnRpQ2xvY2t3aXNlKTtcclxuICAgICAgICB0aGlzLnJlc3RvcmUoKTtcclxuICAgIH07XHJcbn0iLCJpbnRlcmZhY2UgQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEIHtcclxuICAgIGlzUG9pbnRJblN0cm9rZSh4OiBudW1iZXIsIHk6IG51bWJlcik6IGJvb2xlYW47XHJcbn1cclxuaWYgKCFDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQucHJvdG90eXBlLmlzUG9pbnRJblN0cm9rZSkge1xyXG4gICAgQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELnByb3RvdHlwZS5pc1BvaW50SW5TdHJva2UgPSBmdW5jdGlvbiAoeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9O1xyXG59IiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2NvcmUvVXBkYXRlclwiIC8+XHJcblxyXG5tb2R1bGUgbWluZXJ2YS5zaGFwZXMuc2hhcGUge1xyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJU2hhcGVVcGRhdGVyQXNzZXRzIGV4dGVuZHMgY29yZS5JVXBkYXRlckFzc2V0cywgbWVhc3VyZS5JSW5wdXQsIGFycmFuZ2UuSUlucHV0LCBwcm9jZXNzdXAuSUlucHV0LCByZW5kZXIuSUlucHV0IHtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgY2xhc3MgU2hhcGVVcGRhdGVyIGV4dGVuZHMgY29yZS5VcGRhdGVyIHtcclxuICAgICAgICBhc3NldHM6IElTaGFwZVVwZGF0ZXJBc3NldHM7XHJcblxyXG4gICAgICAgIGluaXQgKCkge1xyXG4gICAgICAgICAgICB0aGlzLnNldE1lYXN1cmVQaXBlKHNpbmdsZXRvbihtZWFzdXJlLlNoYXBlTWVhc3VyZVBpcGVEZWYpKVxyXG4gICAgICAgICAgICAgICAgLnNldEFycmFuZ2VQaXBlKHNpbmdsZXRvbihhcnJhbmdlLlNoYXBlQXJyYW5nZVBpcGVEZWYpKVxyXG4gICAgICAgICAgICAgICAgLnNldFJlbmRlclBpcGUoc2luZ2xldG9uKHJlbmRlci5TaGFwZVJlbmRlclBpcGVEZWYpKVxyXG4gICAgICAgICAgICAgICAgLnNldFByb2Nlc3NVcFBpcGUoc2luZ2xldG9uKHByb2Nlc3N1cC5TaGFwZVByb2Nlc3NVcFBpcGVEZWYpKVxyXG4gICAgICAgICAgICAgICAgLnNldEhpdFRlc3RQaXBlKHNpbmdsZXRvbihoaXR0ZXN0LlNoYXBlSGl0VGVzdFBpcGVEZWYpKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBhc3NldHMgPSB0aGlzLmFzc2V0cztcclxuICAgICAgICAgICAgYXNzZXRzLm5hdHVyYWxCb3VuZHMgPSBuZXcgUmVjdCgpO1xyXG4gICAgICAgICAgICBhc3NldHMuc2hhcGVGbGFncyA9IFNoYXBlRmxhZ3MuTm9uZTtcclxuICAgICAgICAgICAgYXNzZXRzLnNoYXBlUmVjdCA9IG5ldyBSZWN0KCk7XHJcblxyXG4gICAgICAgICAgICBhc3NldHMuZmlsbCA9IG51bGw7XHJcbiAgICAgICAgICAgIGFzc2V0cy5zdHJldGNoID0gU3RyZXRjaC5Ob25lO1xyXG4gICAgICAgICAgICBhc3NldHMuc3Ryb2tlID0gbnVsbDtcclxuICAgICAgICAgICAgYXNzZXRzLnN0cm9rZVRoaWNrbmVzcyA9IDEuMDtcclxuICAgICAgICAgICAgYXNzZXRzLnN0cm9rZURhc2hBcnJheSA9IFtdO1xyXG4gICAgICAgICAgICBhc3NldHMuc3Ryb2tlRGFzaENhcCA9IFBlbkxpbmVDYXAuRmxhdDtcclxuICAgICAgICAgICAgYXNzZXRzLnN0cm9rZURhc2hPZmZzZXQgPSAwO1xyXG4gICAgICAgICAgICBhc3NldHMuc3Ryb2tlU3RhcnRMaW5lQ2FwID0gUGVuTGluZUNhcC5GbGF0O1xyXG4gICAgICAgICAgICBhc3NldHMuc3Ryb2tlRW5kTGluZUNhcCA9IFBlbkxpbmVDYXAuRmxhdDtcclxuICAgICAgICAgICAgYXNzZXRzLnN0cm9rZUxpbmVKb2luID0gUGVuTGluZUpvaW4uTWl0ZXI7XHJcbiAgICAgICAgICAgIGFzc2V0cy5zdHJva2VNaXRlckxpbWl0ID0gMTA7XHJcblxyXG4gICAgICAgICAgICBzdXBlci5pbml0KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpbnZhbGlkYXRlTmF0dXJhbEJvdW5kcyAoKSB7XHJcbiAgICAgICAgICAgIHZhciBuYiA9IHRoaXMuYXNzZXRzLm5hdHVyYWxCb3VuZHM7XHJcbiAgICAgICAgICAgIG5iLnggPSBuYi55ID0gbmIud2lkdGggPSBuYi5oZWlnaHQgPSAwO1xyXG4gICAgICAgICAgICB0aGlzLmludmFsaWRhdGVNZWFzdXJlKCk7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQm91bmRzKHRydWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9zaGFwZS9TaGFwZVVwZGF0ZXJcIiAvPlxyXG5cclxubW9kdWxlIG1pbmVydmEuc2hhcGVzLmVsbGlwc2Uge1xyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJRWxsaXBzZVVwZGF0ZXJBc3NldHMgZXh0ZW5kcyBzaGFwZS5JU2hhcGVVcGRhdGVyQXNzZXRzLCByZW5kZXIuSUlucHV0IHtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgY2xhc3MgRWxsaXBzZVVwZGF0ZXIgZXh0ZW5kcyBzaGFwZS5TaGFwZVVwZGF0ZXIge1xyXG4gICAgICAgIGFzc2V0czogSUVsbGlwc2VVcGRhdGVyQXNzZXRzO1xyXG5cclxuICAgICAgICBpbml0ICgpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRNZWFzdXJlUGlwZShzaW5nbGV0b24obWVhc3VyZS5FbGxpcHNlTWVhc3VyZVBpcGVEZWYpKVxyXG4gICAgICAgICAgICAgICAgLnNldFJlbmRlclBpcGUoc2luZ2xldG9uKHJlbmRlci5FbGxpcHNlUmVuZGVyUGlwZURlZikpXHJcbiAgICAgICAgICAgICAgICAuc2V0SGl0VGVzdFBpcGUoc2luZ2xldG9uKGhpdHRlc3QuRWxsaXBzZUhpdFRlc3RQaXBlRGVmKSk7XHJcblxyXG4gICAgICAgICAgICB2YXIgYXNzZXRzID0gdGhpcy5hc3NldHM7XHJcbiAgICAgICAgICAgIGFzc2V0cy5zdHJldGNoID0gU3RyZXRjaC5GaWxsO1xyXG5cclxuICAgICAgICAgICAgc3VwZXIuaW5pdCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9zaGFwZS9TaGFwZVVwZGF0ZXJcIiAvPlxyXG5cclxubW9kdWxlIG1pbmVydmEuc2hhcGVzLnBhdGgge1xyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJUGF0aFVwZGF0ZXJBc3NldHMgZXh0ZW5kcyBzaGFwZS5JU2hhcGVVcGRhdGVyQXNzZXRzLCBtZWFzdXJlLklJbnB1dCwgcHJvY2Vzc3VwLklJbnB1dCwgcmVuZGVyLklJbnB1dCB7XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGNsYXNzIFBhdGhVcGRhdGVyIGV4dGVuZHMgc2hhcGUuU2hhcGVVcGRhdGVyIHtcclxuICAgICAgICBhc3NldHM6IElQYXRoVXBkYXRlckFzc2V0cztcclxuXHJcbiAgICAgICAgaW5pdCAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0TWVhc3VyZVBpcGUoc2luZ2xldG9uKG1lYXN1cmUuUGF0aE1lYXN1cmVQaXBlRGVmKSlcclxuICAgICAgICAgICAgICAgIC5zZXRQcm9jZXNzVXBQaXBlKHNpbmdsZXRvbihwcm9jZXNzdXAuUGF0aFByb2Nlc3NVcFBpcGVEZWYpKVxyXG4gICAgICAgICAgICAgICAgLnNldFJlbmRlclBpcGUoc2luZ2xldG9uKHJlbmRlci5QYXRoUmVuZGVyUGlwZURlZikpXHJcbiAgICAgICAgICAgICAgICAuc2V0SGl0VGVzdFBpcGUoc2luZ2xldG9uKGhpdHRlc3QuUGF0aEhpdFRlc3RQaXBlRGVmKSk7XHJcblxyXG4gICAgICAgICAgICB2YXIgYXNzZXRzID0gdGhpcy5hc3NldHM7XHJcbiAgICAgICAgICAgIGFzc2V0cy5zdHJldGNoID0gU3RyZXRjaC5Ob25lO1xyXG4gICAgICAgICAgICBhc3NldHMuc3RyZXRjaFhmb3JtID0gbWF0My5pZGVudGl0eSgpO1xyXG5cclxuICAgICAgICAgICAgc3VwZXIuaW5pdCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9wYXRoL1BhdGhVcGRhdGVyXCIgLz5cclxuXHJcbm1vZHVsZSBtaW5lcnZhLnNoYXBlcy5saW5lIHtcclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUxpbmVVcGRhdGVyQXNzZXRzIGV4dGVuZHMgcGF0aC5JUGF0aFVwZGF0ZXJBc3NldHMsIG1lYXN1cmUuSUlucHV0IHtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgY2xhc3MgTGluZVVwZGF0ZXIgZXh0ZW5kcyBwYXRoLlBhdGhVcGRhdGVyIHtcclxuICAgICAgICBhc3NldHM6IElMaW5lVXBkYXRlckFzc2V0cztcclxuXHJcbiAgICAgICAgaW5pdCAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0TWVhc3VyZVBpcGUoc2luZ2xldG9uKG1lYXN1cmUuTGluZU1lYXN1cmVQaXBlRGVmKSk7XHJcblxyXG4gICAgICAgICAgICB2YXIgYXNzZXRzID0gdGhpcy5hc3NldHM7XHJcbiAgICAgICAgICAgIGFzc2V0cy54MSA9IDA7XHJcbiAgICAgICAgICAgIGFzc2V0cy55MSA9IDA7XHJcbiAgICAgICAgICAgIGFzc2V0cy54MiA9IDA7XHJcbiAgICAgICAgICAgIGFzc2V0cy55MiA9IDA7XHJcblxyXG4gICAgICAgICAgICBhc3NldHMuZGF0YSA9IG5ldyBwYXRoLkFub25QYXRoR2VvbWV0cnkoKTtcclxuXHJcbiAgICAgICAgICAgIHN1cGVyLmluaXQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGludmFsaWRhdGVQYXRoICgpIHtcclxuICAgICAgICAgICAgdGhpcy5hc3NldHMuZGF0YS5vbGQgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLmludmFsaWRhdGVOYXR1cmFsQm91bmRzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwibW9kdWxlIG1pbmVydmEuc2hhcGVzLnBhdGgge1xyXG4gICAgZXhwb3J0IGNsYXNzIEFub25QYXRoR2VvbWV0cnkgaW1wbGVtZW50cyBJUGF0aEdlb21ldHJ5IHtcclxuICAgICAgICBvbGQ6IGJvb2xlYW4gPSB0cnVlO1xyXG4gICAgICAgIHBhdGggPSBuZXcgbWluZXJ2YS5wYXRoLlBhdGgoKTtcclxuICAgICAgICBmaWxsUnVsZSA9IEZpbGxSdWxlLkV2ZW5PZGQ7XHJcblxyXG4gICAgICAgIERyYXcgKGN0eDogbWluZXJ2YS5jb3JlLnJlbmRlci5SZW5kZXJDb250ZXh0KSB7XHJcbiAgICAgICAgICAgIHRoaXMucGF0aC5kcmF3KGN0eC5yYXcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgR2V0Qm91bmRzIChwYXJzPzogbWluZXJ2YS5wYXRoLklTdHJva2VQYXJhbWV0ZXJzKTogUmVjdCB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBhdGguY2FsY0JvdW5kcyhwYXJzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vcGF0aC9QYXRoVXBkYXRlclwiIC8+XHJcblxyXG5tb2R1bGUgbWluZXJ2YS5zaGFwZXMucG9seWxpbmUge1xyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJUG9seWxpbmVVcGRhdGVyQXNzZXRzIGV4dGVuZHMgcGF0aC5JUGF0aFVwZGF0ZXJBc3NldHMsIG1lYXN1cmUuSUlucHV0IHtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgY2xhc3MgUG9seWxpbmVVcGRhdGVyIGV4dGVuZHMgcGF0aC5QYXRoVXBkYXRlciB7XHJcbiAgICAgICAgYXNzZXRzOiBJUG9seWxpbmVVcGRhdGVyQXNzZXRzO1xyXG5cclxuICAgICAgICBpbml0ICgpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRNZWFzdXJlUGlwZShzaW5nbGV0b24obWVhc3VyZS5Qb2x5bGluZU1lYXN1cmVQaXBlRGVmKSk7XHJcblxyXG4gICAgICAgICAgICB2YXIgYXNzZXRzID0gdGhpcy5hc3NldHM7XHJcbiAgICAgICAgICAgIGFzc2V0cy5kYXRhID0gbmV3IHBhdGguQW5vblBhdGhHZW9tZXRyeSgpO1xyXG4gICAgICAgICAgICBhc3NldHMuaXNDbG9zZWQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIHN1cGVyLmluaXQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGludmFsaWRhdGVGaWxsUnVsZSAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXNzZXRzLmRhdGEuZmlsbFJ1bGUgPSB0aGlzLmFzc2V0cy5maWxsUnVsZTtcclxuICAgICAgICAgICAgdGhpcy5pbnZhbGlkYXRlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpbnZhbGlkYXRlUGF0aCAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXNzZXRzLmRhdGEub2xkID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5pbnZhbGlkYXRlTmF0dXJhbEJvdW5kcygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9wb2x5bGluZS9Qb2x5bGluZVVwZGF0ZXJcIiAvPlxyXG5cclxubW9kdWxlIG1pbmVydmEuc2hhcGVzLnBvbHlnb24ge1xyXG4gICAgZXhwb3J0IGNsYXNzIFBvbHlnb25VcGRhdGVyIGV4dGVuZHMgcG9seWxpbmUuUG9seWxpbmVVcGRhdGVyIHtcclxuICAgICAgICBpbml0ICgpIHtcclxuICAgICAgICAgICAgc3VwZXIuaW5pdCgpO1xyXG4gICAgICAgICAgICB0aGlzLmFzc2V0cy5pc0Nsb3NlZCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL3NoYXBlL1NoYXBlVXBkYXRlclwiIC8+XHJcblxyXG5tb2R1bGUgbWluZXJ2YS5zaGFwZXMucmVjdGFuZ2xlIHtcclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSVJlY3RhbmdsZVVwZGF0ZXJBc3NldHMgZXh0ZW5kcyBzaGFwZS5JU2hhcGVVcGRhdGVyQXNzZXRzLCByZW5kZXIuSUlucHV0IHtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgY2xhc3MgUmVjdGFuZ2xlVXBkYXRlciBleHRlbmRzIHNoYXBlLlNoYXBlVXBkYXRlciB7XHJcbiAgICAgICAgYXNzZXRzOiBJUmVjdGFuZ2xlVXBkYXRlckFzc2V0cztcclxuXHJcbiAgICAgICAgaW5pdCAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0TWVhc3VyZVBpcGUoc2luZ2xldG9uKG1lYXN1cmUuUmVjdGFuZ2xlTWVhc3VyZVBpcGVEZWYpKVxyXG4gICAgICAgICAgICAgICAgLnNldFJlbmRlclBpcGUoc2luZ2xldG9uKHJlbmRlci5SZWN0YW5nbGVSZW5kZXJQaXBlRGVmKSlcclxuICAgICAgICAgICAgICAgIC5zZXRIaXRUZXN0UGlwZShzaW5nbGV0b24oaGl0dGVzdC5SZWN0YW5nbGVIaXRUZXN0UGlwZURlZikpO1xyXG5cclxuICAgICAgICAgICAgdmFyIGFzc2V0cyA9IHRoaXMuYXNzZXRzO1xyXG4gICAgICAgICAgICBhc3NldHMuc3RyZXRjaCA9IFN0cmV0Y2guRmlsbDtcclxuICAgICAgICAgICAgYXNzZXRzLnJhZGl1c1ggPSAwO1xyXG4gICAgICAgICAgICBhc3NldHMucmFkaXVzWSA9IDA7XHJcblxyXG4gICAgICAgICAgICBzdXBlci5pbml0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwibW9kdWxlIG1pbmVydmEudGV4dC5sYXlvdXQge1xyXG4gICAgdmFyIGlzRmlyZWZveCA9IC9maXJlZm94L2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcclxuXHJcbiAgICBleHBvcnQgY2xhc3MgQ2x1c3RlciB7XHJcbiAgICAgICAgaXNTZWxlY3RlZDogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgICAgIHRleHQ6IHN0cmluZyA9IG51bGw7XHJcbiAgICAgICAgd2lkdGg6IG51bWJlciA9IDA7XHJcblxyXG4gICAgICAgIHN0YXRpYyBERUZBVUxUX1NFTEVDVElPTl9CRyA9IG5ldyBGYWtlQnJ1c2goXCIjNDQ0NDQ0XCIpO1xyXG4gICAgICAgIHN0YXRpYyBERUZBVUxUX1NFTEVDVElPTl9GRyA9IG5ldyBGYWtlQnJ1c2goXCIjRkZGRkZGXCIpO1xyXG5cclxuICAgICAgICBzdGF0aWMgcmVuZGVyIChjbHVzdGVyOiBDbHVzdGVyLCBhc3NldHM6IElUZXh0QXNzZXRzLCBjdHg6IGNvcmUucmVuZGVyLlJlbmRlckNvbnRleHQpIHtcclxuICAgICAgICAgICAgdmFyIGZvbnRIZWlnaHQgPSBhc3NldHMuZm9udC5nZXRIZWlnaHQoKTtcclxuICAgICAgICAgICAgdmFyIGFyZWEgPSBuZXcgUmVjdCgwLCAwLCBjbHVzdGVyLndpZHRoLCBmb250SGVpZ2h0KTtcclxuXHJcbiAgICAgICAgICAgIHZhciByYXcgPSBjdHgucmF3O1xyXG5cclxuICAgICAgICAgICAgLy9CYWNrZ3JvdW5kXHJcbiAgICAgICAgICAgIHZhciBiZyA9IGNsdXN0ZXIuaXNTZWxlY3RlZCA/IChhc3NldHMuc2VsZWN0aW9uQmFja2dyb3VuZCB8fCBDbHVzdGVyLkRFRkFVTFRfU0VMRUNUSU9OX0JHKSA6IGFzc2V0cy5iYWNrZ3JvdW5kO1xyXG4gICAgICAgICAgICBpZiAoYmcpIHtcclxuICAgICAgICAgICAgICAgIHJhdy5iZWdpblBhdGgoKTtcclxuICAgICAgICAgICAgICAgIHJhdy5yZWN0KGFyZWEueCwgYXJlYS55LCBhcmVhLndpZHRoLCBhcmVhLmhlaWdodCk7XHJcbiAgICAgICAgICAgICAgICBjdHguZmlsbEV4KGJnLCBhcmVhKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy9UZXh0XHJcbiAgICAgICAgICAgIHZhciBmZyA9IGNsdXN0ZXIuaXNTZWxlY3RlZCA/IChhc3NldHMuc2VsZWN0aW9uRm9yZWdyb3VuZCB8fCBDbHVzdGVyLkRFRkFVTFRfU0VMRUNUSU9OX0ZHKSA6IGFzc2V0cy5mb3JlZ3JvdW5kO1xyXG4gICAgICAgICAgICB2YXIgZmc1ID0gXCIjMDAwMDAwXCI7XHJcbiAgICAgICAgICAgIGlmIChmZykge1xyXG4gICAgICAgICAgICAgICAgZmcuc2V0dXBCcnVzaChyYXcsIGFyZWEpO1xyXG4gICAgICAgICAgICAgICAgZmc1ID0gZmcudG9IdG1sNU9iamVjdCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJhdy5maWxsU3R5bGUgPSBmZzU7XHJcbiAgICAgICAgICAgIHJhdy5mb250ID0gYXNzZXRzLmZvbnQudG9IdG1sNU9iamVjdCgpO1xyXG4gICAgICAgICAgICByYXcudGV4dEFsaWduID0gXCJsZWZ0XCI7XHJcbiAgICAgICAgICAgIGlmIChpc0ZpcmVmb3gpIHtcclxuICAgICAgICAgICAgICAgIHJhdy50ZXh0QmFzZWxpbmUgPSBcImJvdHRvbVwiO1xyXG4gICAgICAgICAgICAgICAgcmF3LmZpbGxUZXh0KGNsdXN0ZXIudGV4dCwgMCwgZm9udEhlaWdodCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByYXcudGV4dEJhc2VsaW5lID0gXCJ0b3BcIjtcclxuICAgICAgICAgICAgICAgIHJhdy5maWxsVGV4dChjbHVzdGVyLnRleHQsIDAsIDApO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvL1VuZGVybGluZVxyXG4gICAgICAgICAgICBpZiAoYXNzZXRzLmlzVW5kZXJsaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgcmF3LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgICAgICAgICAgcmF3Lm1vdmVUbygwLCBmb250SGVpZ2h0KTtcclxuICAgICAgICAgICAgICAgIHJhdy5saW5lVG8oY2x1c3Rlci53aWR0aCwgZm9udEhlaWdodCk7XHJcbiAgICAgICAgICAgICAgICByYXcubGluZVdpZHRoID0gMjtcclxuICAgICAgICAgICAgICAgIHJhdy5zdHJva2VTdHlsZSA9IGZnNTtcclxuICAgICAgICAgICAgICAgIHJhdy5zdHJva2UoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLnRleHQubGF5b3V0IHtcclxuICAgIGV4cG9ydCBjbGFzcyBMaW5lIHtcclxuICAgICAgICBydW5zOiBSdW5bXSA9IFtdO1xyXG4gICAgICAgIHdpZHRoOiBudW1iZXIgPSAwO1xyXG4gICAgICAgIGhlaWdodDogbnVtYmVyID0gMDtcclxuXHJcbiAgICAgICAgc3RhdGljIGdldExpbmVGcm9tWShsaW5lczogTGluZVtdLCB5OiBudW1iZXIpIHtcclxuICAgICAgICAgICAgdmFyIGxpbmU6IGxheW91dC5MaW5lO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgb3kgPSAwLjA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgbGluZSA9IGxpbmVzW2ldO1xyXG4gICAgICAgICAgICAgICAgb3kgKz0gbGluZS5oZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICBpZiAoeSA8IG95KVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBsaW5lO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBsaW5lc1tsaW5lcy5sZW5ndGggLSAxXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN0YXRpYyBlbGxpcHRpZnkoZG9jY3R4OiBJRG9jdW1lbnRDb250ZXh0LCBkb2Nhc3NldHM6IElEb2N1bWVudEFzc2V0cywgbGluZTogbGF5b3V0LkxpbmUsIG1lYXN1cmVUZXh0V2lkdGg6ICh0ZXh0OiBzdHJpbmcsIGZvbnQ6IEZvbnQpID0+IG51bWJlcik6IGJvb2xlYW4ge1xyXG4gICAgICAgICAgICBpZiAoZG9jY3R4LnRleHRUcmltbWluZyA9PT0gVGV4dFRyaW1taW5nLk5vbmVcclxuICAgICAgICAgICAgICAgIHx8IGRvY2N0eC50ZXh0V3JhcHBpbmcgIT09IFRleHRXcmFwcGluZy5Ob1dyYXBcclxuICAgICAgICAgICAgICAgIHx8IGxpbmUud2lkdGggPD0gZG9jYXNzZXRzLm1heFdpZHRoKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgdmFyIG5ld1J1bnM6IGxheW91dC5SdW5bXSA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBydW5zID0gbGluZS5ydW5zLCB0b3RhbCA9IDAsIGkgPSAwOyBpIDwgcnVucy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHJ1biA9IHJ1bnNbaV07XHJcbiAgICAgICAgICAgICAgICB0b3RhbCArPSBydW4ud2lkdGg7XHJcbiAgICAgICAgICAgICAgICBuZXdSdW5zLnB1c2gocnVuKTtcclxuICAgICAgICAgICAgICAgIGlmICh0b3RhbCA+PSBkb2Nhc3NldHMubWF4V2lkdGgpIHtcclxuICAgICAgICAgICAgICAgICAgICB0b3RhbCAtPSBydW4ud2lkdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgbGF5b3V0LlJ1bi5lbGxpcHRpZnkocnVuLCBkb2Nhc3NldHMubWF4V2lkdGggLSB0b3RhbCwgZG9jY3R4LnRleHRUcmltbWluZywgbWVhc3VyZVRleHRXaWR0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGluZS53aWR0aCA9IHRvdGFsICsgcnVuLndpZHRoO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxpbmUucnVucyA9IG5ld1J1bnM7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLnRleHQubGF5b3V0IHtcclxuICAgIGV4cG9ydCBjbGFzcyBSdW4ge1xyXG4gICAgICAgIGF0dHJzOiBJVGV4dEFzc2V0cztcclxuICAgICAgICB0ZXh0OiBzdHJpbmcgPSBcIlwiO1xyXG4gICAgICAgIHN0YXJ0OiBudW1iZXIgPSAwO1xyXG4gICAgICAgIGxlbmd0aDogbnVtYmVyID0gMDtcclxuICAgICAgICB3aWR0aDogbnVtYmVyID0gMDtcclxuXHJcbiAgICAgICAgcHJlOiBDbHVzdGVyO1xyXG4gICAgICAgIHNlbDogQ2x1c3RlcjtcclxuICAgICAgICBwb3N0OiBDbHVzdGVyO1xyXG5cclxuICAgICAgICBzdGF0aWMgc3BsaXRTZWxlY3Rpb24ocnVuOiBSdW4sIHN0YXJ0OiBudW1iZXIsIGVuZDogbnVtYmVyLCBtZWFzdXJlV2lkdGg6ICh0ZXh0OiBzdHJpbmcsIGFzc2V0czogSVRleHRBc3NldHMpID0+IG51bWJlcikge1xyXG4gICAgICAgICAgICBydW4ucHJlID0gcnVuLnNlbCA9IHJ1bi5wb3N0ID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIHZhciBycyA9IHJ1bi5zdGFydDtcclxuICAgICAgICAgICAgdmFyIHJlID0gcnMgKyBydW4ubGVuZ3RoO1xyXG5cclxuICAgICAgICAgICAgdmFyIHByZWxlbiA9IE1hdGgubWluKHJ1bi5sZW5ndGgsIE1hdGgubWF4KDAsIHN0YXJ0IC0gcnMpKTtcclxuICAgICAgICAgICAgaWYgKHByZWxlbiA+IDApIHtcclxuICAgICAgICAgICAgICAgIHZhciBwcmUgPSBydW4ucHJlID0gbmV3IENsdXN0ZXIoKTtcclxuICAgICAgICAgICAgICAgIHByZS50ZXh0ID0gcnVuLnRleHQuc3Vic3RyKDAsIHByZWxlbik7XHJcbiAgICAgICAgICAgICAgICBwcmUud2lkdGggPSBtZWFzdXJlV2lkdGgocHJlLnRleHQsIHJ1bi5hdHRycyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciBwb3N0bGVuID0gTWF0aC5taW4ocnVuLmxlbmd0aCwgTWF0aC5tYXgoMCwgcmUgLSBlbmQpKTtcclxuICAgICAgICAgICAgaWYgKHBvc3RsZW4gPiAwKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcG9zdCA9IHJ1bi5wb3N0ID0gbmV3IENsdXN0ZXIoKTtcclxuICAgICAgICAgICAgICAgIHBvc3QudGV4dCA9IHJ1bi50ZXh0LnN1YnN0cihydW4ubGVuZ3RoIC0gcG9zdGxlbik7XHJcbiAgICAgICAgICAgICAgICBwb3N0LndpZHRoID0gbWVhc3VyZVdpZHRoKHBvc3QudGV4dCwgcnVuLmF0dHJzKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIHNzID0gTWF0aC5taW4ocmUsIE1hdGgubWF4KHJzLCBzdGFydCkpO1xyXG4gICAgICAgICAgICB2YXIgc2UgPSBNYXRoLm1heChycywgTWF0aC5taW4ocmUsIGVuZCkpO1xyXG4gICAgICAgICAgICB2YXIgc2VsbGVuID0gTWF0aC5tYXgoMCwgc2UgLSBzcyk7XHJcbiAgICAgICAgICAgIGlmIChzZWxsZW4gPiAwKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgc2VsID0gcnVuLnNlbCA9IG5ldyBDbHVzdGVyKCk7XHJcbiAgICAgICAgICAgICAgICBzZWwuaXNTZWxlY3RlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBzZWwudGV4dCA9IHJ1bi50ZXh0LnN1YnN0cihzcyAtIHJzLCBzZWxsZW4pO1xyXG4gICAgICAgICAgICAgICAgc2VsLndpZHRoID0gbWVhc3VyZVdpZHRoKHNlbC50ZXh0LCBydW4uYXR0cnMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzdGF0aWMgZWxsaXB0aWZ5KHJ1bjogUnVuLCBhdmFpbGFibGU6IG51bWJlciwgdGV4dFRyaW1taW5nOiBUZXh0VHJpbW1pbmcsIG1lYXN1cmVUZXh0V2lkdGg6ICh0ZXh0OiBzdHJpbmcsIGZvbnQ6IEZvbnQpID0+IG51bWJlcikge1xyXG4gICAgICAgICAgICBpZiAocnVuLndpZHRoIDwgYXZhaWxhYmxlKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB2YXIgdGV4dCA9IHJ1bi50ZXh0O1xyXG4gICAgICAgICAgICB2YXIgZm9udCA9IHJ1bi5hdHRycy5mb250O1xyXG4gICAgICAgICAgICB2YXIgbWVhc3VyZSA9IChpbmRleDogbnVtYmVyKSA9PiBtZWFzdXJlVGV4dFdpZHRoKHRleHQuc3Vic3RyKDAsIGluZGV4KSwgZm9udCk7XHJcbiAgICAgICAgICAgIGlmICh0ZXh0VHJpbW1pbmcgPT09IFRleHRUcmltbWluZy5Xb3JkRWxsaXBzaXMpIHtcclxuICAgICAgICAgICAgICAgIHNob3J0ZW5Xb3JkKHJ1biwgYXZhaWxhYmxlIC0gbWVhc3VyZVRleHRXaWR0aChcIi4uLlwiLCBmb250KSwgbWVhc3VyZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7IC8vQ2hhcmFjdGVyRWxsaXBzaXNcclxuICAgICAgICAgICAgICAgIHNob3J0ZW5DaGFyKHJ1biwgYXZhaWxhYmxlIC0gbWVhc3VyZVRleHRXaWR0aChcIi4uLlwiLCBmb250KSwgbWVhc3VyZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gc2hvcnRlbldvcmQocnVuOiBSdW4sIGF2YWlsYWJsZTogbnVtYmVyLCBtZWFzdXJlOiAoaW5kZXg6IG51bWJlcikgPT4gbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKGF2YWlsYWJsZSA+IDApIHtcclxuICAgICAgICAgICAgdmFyIGxlbiA9IHJ1bi50ZXh0Lmxlbmd0aDtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIG5leHQgPSAwOyAoaSA9IG5leHQpIDwgbGVuICYmIChuZXh0ID0gcnVuLnRleHQuaW5kZXhPZignICcsIGkgKyAxKSkgIT09IC0xOykge1xyXG4gICAgICAgICAgICAgICAgaWYgKG1lYXN1cmUobmV4dCkgPiBhdmFpbGFibGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBydW4udGV4dCA9IHJ1bi50ZXh0LnN1YnN0cigwLCBpKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAobGVuID09PSBydW4udGV4dC5sZW5ndGgpXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcnVuLnRleHQgPSBcIlwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICBydW4udGV4dCArPSBcIi4uLlwiO1xyXG4gICAgICAgIHJ1bi5sZW5ndGggPSBydW4udGV4dC5sZW5ndGg7XHJcbiAgICAgICAgcnVuLndpZHRoID0gbWVhc3VyZShydW4ubGVuZ3RoKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBzaG9ydGVuQ2hhcihydW46IFJ1biwgYXZhaWxhYmxlOiBudW1iZXIsIG1lYXN1cmU6IChpbmRleDogbnVtYmVyKSA9PiBudW1iZXIpIHtcclxuICAgICAgICBpZiAoYXZhaWxhYmxlID4gMCkge1xyXG4gICAgICAgICAgICB2YXIgbGVuID0gcnVuLnRleHQubGVuZ3RoO1xyXG4gICAgICAgICAgICB2YXIgbG93ID0gMDtcclxuICAgICAgICAgICAgdmFyIGhpZ2ggPSBsZW47XHJcbiAgICAgICAgICAgIHZhciBpID0gTWF0aC5jZWlsKGxvdyArIChoaWdoIC0gbG93KSAvIDIpO1xyXG4gICAgICAgICAgICBmb3IgKHZhciByYXdyID0gMDsgKGhpZ2ggLSBsb3cpID4gMSAmJiByYXdyIDwgMTAwMDsgaSA9IE1hdGguY2VpbChsb3cgKyAoaGlnaCAtIGxvdykgLyAyKSwgcmF3cisrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobWVhc3VyZShpKSA+IGF2YWlsYWJsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGhpZ2ggPSBpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBsb3cgPSBpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJ1bi50ZXh0ID0gcnVuLnRleHQuc3Vic3RyKDAsIGxvdyk7XHJcbiAgICAgICAgICAgIGlmIChsZW4gPT09IHJ1bi50ZXh0Lmxlbmd0aClcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBydW4udGV4dCA9IFwiXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJ1bi50ZXh0ICs9IFwiLi4uXCI7XHJcbiAgICAgICAgcnVuLmxlbmd0aCA9IHJ1bi50ZXh0Lmxlbmd0aDtcclxuICAgICAgICBydW4ud2lkdGggPSBtZWFzdXJlKHJ1bi5sZW5ndGgpO1xyXG4gICAgfVxyXG59IiwibW9kdWxlIG1pbmVydmEudGV4dC5ydW4ge1xyXG4gICAgaW50ZXJmYWNlIElSdW5MYXlvdXRQYXNzIHtcclxuICAgICAgICB0ZXh0OiBzdHJpbmc7XHJcbiAgICAgICAgaW5kZXg6IG51bWJlcjtcclxuICAgICAgICBtYXg6IG51bWJlcjtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gZG9MYXlvdXROb1dyYXAgKGRvY2N0eDogSURvY3VtZW50Q29udGV4dCwgZG9jYXNzZXRzOiBJRG9jdW1lbnRBc3NldHMsIGFzc2V0czogSVRleHRBc3NldHMpIHtcclxuICAgICAgICB2YXIgcGFzczogSVJ1bkxheW91dFBhc3MgPSB7XHJcbiAgICAgICAgICAgIHRleHQ6IGFzc2V0cy50ZXh0LFxyXG4gICAgICAgICAgICBpbmRleDogMCxcclxuICAgICAgICAgICAgbWF4OiBhc3NldHMudGV4dC5sZW5ndGhcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgZm9udCA9IGFzc2V0cy5mb250O1xyXG5cclxuICAgICAgICB2YXIgbGluZSA9IG5ldyBsYXlvdXQuTGluZSgpO1xyXG4gICAgICAgIGxpbmUuaGVpZ2h0ID0gZm9udC5nZXRIZWlnaHQoKTtcclxuICAgICAgICBkb2Nhc3NldHMuYWN0dWFsSGVpZ2h0ICs9IGxpbmUuaGVpZ2h0O1xyXG4gICAgICAgIGRvY2Fzc2V0cy5saW5lcy5wdXNoKGxpbmUpO1xyXG5cclxuICAgICAgICB2YXIgcnVuID0gbmV3IGxheW91dC5SdW4oKTtcclxuICAgICAgICBydW4uYXR0cnMgPSBhc3NldHM7XHJcbiAgICAgICAgbGluZS5ydW5zLnB1c2gocnVuKTtcclxuXHJcbiAgICAgICAgd2hpbGUgKHBhc3MuaW5kZXggPCBwYXNzLm1heCkge1xyXG4gICAgICAgICAgICB2YXIgaGl0YnJlYWsgPSBhZHZhbmNlKHJ1biwgcGFzcywgZm9udCk7XHJcbiAgICAgICAgICAgIGlmIChoaXRicmVhaykge1xyXG4gICAgICAgICAgICAgICAgZG9jYXNzZXRzLmFjdHVhbFdpZHRoID0gTWF0aC5tYXgoZG9jYXNzZXRzLmFjdHVhbFdpZHRoLCBydW4ud2lkdGgpO1xyXG4gICAgICAgICAgICAgICAgbGluZS53aWR0aCA9IHJ1bi53aWR0aDtcclxuICAgICAgICAgICAgICAgIGxpbmUgPSBuZXcgbGF5b3V0LkxpbmUoKTtcclxuICAgICAgICAgICAgICAgIGxpbmUuaGVpZ2h0ID0gZm9udC5nZXRIZWlnaHQoKTtcclxuICAgICAgICAgICAgICAgIGRvY2Fzc2V0cy5hY3R1YWxIZWlnaHQgKz0gbGluZS5oZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICBkb2Nhc3NldHMubGluZXMucHVzaChsaW5lKTtcclxuXHJcbiAgICAgICAgICAgICAgICBydW4gPSBuZXcgbGF5b3V0LlJ1bigpO1xyXG4gICAgICAgICAgICAgICAgcnVuLmF0dHJzID0gYXNzZXRzO1xyXG4gICAgICAgICAgICAgICAgbGluZS5ydW5zLnB1c2gocnVuKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBsaW5lLndpZHRoID0gcnVuLndpZHRoO1xyXG4gICAgICAgIGxheW91dC5MaW5lLmVsbGlwdGlmeShkb2NjdHgsIGRvY2Fzc2V0cywgbGluZSwgbWVhc3VyZVRleHRXaWR0aCk7XHJcbiAgICAgICAgZG9jYXNzZXRzLmFjdHVhbFdpZHRoID0gTWF0aC5tYXgoZG9jYXNzZXRzLmFjdHVhbFdpZHRoLCBydW4ud2lkdGgpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGFkdmFuY2UgKHJ1bjogbGF5b3V0LlJ1biwgcGFzczogSVJ1bkxheW91dFBhc3MsIGZvbnQ6IEZvbnQpOiBib29sZWFuIHtcclxuICAgICAgICAvL05PVEU6IFJldHVybmluZyB0cnVlIGltcGxpZXMgYSBuZXcgbGluZSBpcyBuZWNlc3NhcnlcclxuICAgICAgICB2YXIgcmVtYWluaW5nID0gcGFzcy50ZXh0LnN1YnN0cihwYXNzLmluZGV4KTtcclxuICAgICAgICB2YXIgcmluZGV4ID0gcmVtYWluaW5nLmluZGV4T2YoJ1xccicpO1xyXG4gICAgICAgIHZhciBuaW5kZXggPSByZW1haW5pbmcuaW5kZXhPZignXFxuJyk7XHJcblxyXG4gICAgICAgIGlmIChyaW5kZXggPCAwICYmIG5pbmRleCA8IDApIHtcclxuICAgICAgICAgICAgLy9EaWRuJ3QgZmluZCBcXHIgb3IgXFxuXHJcbiAgICAgICAgICAgIHJ1bi5sZW5ndGggPSByZW1haW5pbmcubGVuZ3RoO1xyXG4gICAgICAgICAgICBydW4udGV4dCA9IHJlbWFpbmluZztcclxuICAgICAgICAgICAgcnVuLndpZHRoID0gbWVhc3VyZVRleHRXaWR0aChydW4udGV4dCwgZm9udCk7XHJcbiAgICAgICAgICAgIHBhc3MuaW5kZXggKz0gcnVuLmxlbmd0aDtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHJpbmRleCA+IC0xICYmIHJpbmRleCArIDEgPT09IG5pbmRleCkge1xyXG4gICAgICAgICAgICAvL0ZvdW5kIFxcclxcblxyXG4gICAgICAgICAgICBydW4ubGVuZ3RoID0gbmluZGV4ICsgMTtcclxuICAgICAgICAgICAgcnVuLnRleHQgPSByZW1haW5pbmcuc3Vic3RyKDAsIHJ1bi5sZW5ndGgpO1xyXG4gICAgICAgICAgICBydW4ud2lkdGggPSBtZWFzdXJlVGV4dFdpZHRoKHJ1bi50ZXh0LCBmb250KTtcclxuICAgICAgICAgICAgcGFzcy5pbmRleCArPSBydW4ubGVuZ3RoO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChyaW5kZXggPiAtMSAmJiByaW5kZXggPCBuaW5kZXgpIHtcclxuICAgICAgICAgICAgLy9Gb3VuZCBcXHIgYmVmb3JlIFxcbiwgYnV0IG5vdCBiYWNrLXRvLWJhY2tcclxuICAgICAgICAgICAgcnVuLmxlbmd0aCA9IHJpbmRleCArIDE7XHJcbiAgICAgICAgICAgIHJ1bi50ZXh0ID0gcmVtYWluaW5nLnN1YnN0cigwLCBydW4ubGVuZ3RoKTtcclxuICAgICAgICAgICAgcnVuLndpZHRoID0gbWVhc3VyZVRleHRXaWR0aChydW4udGV4dCwgZm9udCk7XHJcbiAgICAgICAgICAgIHBhc3MuaW5kZXggKz0gcnVuLmxlbmd0aDtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL0ZvdW5kIFxcbiAocG90ZW50aWFsbHkgYmVmb3JlIFxcciwgZG9uJ3QgY2FyZSlcclxuICAgICAgICBydW4ubGVuZ3RoID0gbmluZGV4ICsgMTtcclxuICAgICAgICBydW4udGV4dCA9IHJlbWFpbmluZy5zdWJzdHIoMCwgcnVuLmxlbmd0aCk7XHJcbiAgICAgICAgcnVuLndpZHRoID0gbWVhc3VyZVRleHRXaWR0aChydW4udGV4dCwgZm9udCk7XHJcbiAgICAgICAgcGFzcy5pbmRleCArPSBydW4ubGVuZ3RoO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIG1lYXN1cmVUZXh0V2lkdGggKHRleHQ6IHN0cmluZywgZm9udDogRm9udCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIGVuZ2luZS5TdXJmYWNlLm1lYXN1cmVXaWR0aCh0ZXh0LCBmb250KTtcclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLnRleHQucnVuIHtcclxuICAgIGludGVyZmFjZSBJUnVuTGF5b3V0UGFzcyB7XHJcbiAgICAgICAgdGV4dDogc3RyaW5nO1xyXG4gICAgICAgIGluZGV4OiBudW1iZXI7XHJcbiAgICAgICAgbWF4OiBudW1iZXI7XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGRvTGF5b3V0V3JhcCAoZG9jY3R4OiBJRG9jdW1lbnRDb250ZXh0LCBkb2Nhc3NldHM6IElEb2N1bWVudEFzc2V0cywgYXNzZXRzOiBJVGV4dEFzc2V0cykge1xyXG4gICAgICAgIHZhciBwYXNzOiBJUnVuTGF5b3V0UGFzcyA9IHtcclxuICAgICAgICAgICAgdGV4dDogYXNzZXRzLnRleHQsXHJcbiAgICAgICAgICAgIGluZGV4OiAwLFxyXG4gICAgICAgICAgICBtYXg6IGFzc2V0cy50ZXh0Lmxlbmd0aFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBmb250ID0gYXNzZXRzLmZvbnQ7XHJcblxyXG4gICAgICAgIHZhciBsaW5lID0gbmV3IGxheW91dC5MaW5lKCk7XHJcbiAgICAgICAgbGluZS5oZWlnaHQgPSBmb250LmdldEhlaWdodCgpO1xyXG4gICAgICAgIGRvY2Fzc2V0cy5hY3R1YWxIZWlnaHQgKz0gbGluZS5oZWlnaHQ7XHJcbiAgICAgICAgZG9jYXNzZXRzLmxpbmVzLnB1c2gobGluZSk7XHJcblxyXG4gICAgICAgIHZhciBydW4gPSBuZXcgbGF5b3V0LlJ1bigpO1xyXG4gICAgICAgIHJ1bi5hdHRycyA9IGFzc2V0cztcclxuICAgICAgICBsaW5lLnJ1bnMucHVzaChydW4pO1xyXG5cclxuICAgICAgICB3aGlsZSAocGFzcy5pbmRleCA8IHBhc3MubWF4KSB7XHJcbiAgICAgICAgICAgIHZhciBoaXRicmVhayA9IGlzRmluaXRlKGRvY2Fzc2V0cy5tYXhXaWR0aCkgPyBhZHZhbmNlRmluaXRlKHJ1biwgcGFzcywgZm9udCwgZG9jYXNzZXRzLm1heFdpZHRoKSA6IGFkdmFuY2VJbmZpbml0ZShydW4sIHBhc3MsIGZvbnQpO1xyXG4gICAgICAgICAgICBpZiAoaGl0YnJlYWspIHtcclxuICAgICAgICAgICAgICAgIGRvY2Fzc2V0cy5hY3R1YWxXaWR0aCA9IE1hdGgubWF4KGRvY2Fzc2V0cy5hY3R1YWxXaWR0aCwgcnVuLndpZHRoKTtcclxuICAgICAgICAgICAgICAgIGxpbmUud2lkdGggPSBydW4ud2lkdGg7XHJcbiAgICAgICAgICAgICAgICBsaW5lID0gbmV3IGxheW91dC5MaW5lKCk7XHJcbiAgICAgICAgICAgICAgICBsaW5lLmhlaWdodCA9IGZvbnQuZ2V0SGVpZ2h0KCk7XHJcbiAgICAgICAgICAgICAgICBkb2Nhc3NldHMuYWN0dWFsSGVpZ2h0ICs9IGxpbmUuaGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgZG9jYXNzZXRzLmxpbmVzLnB1c2gobGluZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgcnVuID0gbmV3IGxheW91dC5SdW4oKTtcclxuICAgICAgICAgICAgICAgIHJ1bi5hdHRycyA9IGFzc2V0cztcclxuICAgICAgICAgICAgICAgIGxpbmUucnVucy5wdXNoKHJ1bik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgbGluZS53aWR0aCA9IHJ1bi53aWR0aDtcclxuICAgICAgICBkb2Nhc3NldHMuYWN0dWFsV2lkdGggPSBNYXRoLm1heChkb2Nhc3NldHMuYWN0dWFsV2lkdGgsIHJ1bi53aWR0aCk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gYWR2YW5jZUluZmluaXRlIChydW46IGxheW91dC5SdW4sIHBhc3M6IElSdW5MYXlvdXRQYXNzLCBmb250OiBGb250KTogYm9vbGVhbiB7XHJcbiAgICAgICAgLy9OT1RFOiBSZXR1cm5pbmcgdHJ1ZSBpbXBsaWVzIGEgbmV3IGxpbmUgaXMgbmVjZXNzYXJ5XHJcbiAgICAgICAgdmFyIHJlbWFpbmluZyA9IHBhc3MudGV4dC5zdWJzdHIocGFzcy5pbmRleCk7XHJcbiAgICAgICAgdmFyIHJpbmRleCA9IHJlbWFpbmluZy5pbmRleE9mKCdcXHInKTtcclxuICAgICAgICB2YXIgbmluZGV4ID0gcmVtYWluaW5nLmluZGV4T2YoJ1xcbicpO1xyXG5cclxuICAgICAgICBpZiAocmluZGV4IDwgMCAmJiBuaW5kZXggPCAwKSB7XHJcbiAgICAgICAgICAgIC8vRGlkbid0IGZpbmQgXFxyIG9yIFxcblxyXG4gICAgICAgICAgICBydW4ubGVuZ3RoID0gcmVtYWluaW5nLmxlbmd0aDtcclxuICAgICAgICAgICAgcnVuLnRleHQgPSByZW1haW5pbmc7XHJcbiAgICAgICAgICAgIHJ1bi53aWR0aCA9IG1lYXN1cmVUZXh0V2lkdGgocnVuLnRleHQsIGZvbnQpO1xyXG4gICAgICAgICAgICBwYXNzLmluZGV4ICs9IHJ1bi5sZW5ndGg7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChyaW5kZXggPiAtMSAmJiByaW5kZXggKyAxID09PSBuaW5kZXgpIHtcclxuICAgICAgICAgICAgLy9Gb3VuZCBcXHJcXG5cclxuICAgICAgICAgICAgcnVuLmxlbmd0aCA9IG5pbmRleCArIDE7XHJcbiAgICAgICAgICAgIHJ1bi50ZXh0ID0gcmVtYWluaW5nLnN1YnN0cigwLCBydW4ubGVuZ3RoKTtcclxuICAgICAgICAgICAgcnVuLndpZHRoID0gbWVhc3VyZVRleHRXaWR0aChydW4udGV4dCwgZm9udCk7XHJcbiAgICAgICAgICAgIHBhc3MuaW5kZXggKz0gcnVuLmxlbmd0aDtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAocmluZGV4ID4gLTEgJiYgcmluZGV4IDwgbmluZGV4KSB7XHJcbiAgICAgICAgICAgIC8vRm91bmQgXFxyIGJlZm9yZSBcXG4sIGJ1dCBub3QgYmFjay10by1iYWNrXHJcbiAgICAgICAgICAgIHJ1bi5sZW5ndGggPSByaW5kZXggKyAxO1xyXG4gICAgICAgICAgICBydW4udGV4dCA9IHJlbWFpbmluZy5zdWJzdHIoMCwgcnVuLmxlbmd0aCk7XHJcbiAgICAgICAgICAgIHJ1bi53aWR0aCA9IG1lYXN1cmVUZXh0V2lkdGgocnVuLnRleHQsIGZvbnQpO1xyXG4gICAgICAgICAgICBwYXNzLmluZGV4ICs9IHJ1bi5sZW5ndGg7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9Gb3VuZCBcXG4gKHBvdGVudGlhbGx5IGJlZm9yZSBcXHIsIGRvbid0IGNhcmUpXHJcbiAgICAgICAgcnVuLmxlbmd0aCA9IG5pbmRleCArIDE7XHJcbiAgICAgICAgcnVuLnRleHQgPSByZW1haW5pbmcuc3Vic3RyKDAsIHJ1bi5sZW5ndGgpO1xyXG4gICAgICAgIHJ1bi53aWR0aCA9IG1lYXN1cmVUZXh0V2lkdGgocnVuLnRleHQsIGZvbnQpO1xyXG4gICAgICAgIHBhc3MuaW5kZXggKz0gcnVuLmxlbmd0aDtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBhZHZhbmNlRmluaXRlIChydW46IGxheW91dC5SdW4sIHBhc3M6IElSdW5MYXlvdXRQYXNzLCBmb250OiBGb250LCBtYXhXaWR0aDogbnVtYmVyKTogYm9vbGVhbiB7XHJcbiAgICAgICAgLy9OT1RFOiBSZXR1cm5pbmcgdHJ1ZSBpbXBsaWVzIGEgbmV3IGxpbmUgaXMgbmVjZXNzYXJ5XHJcbiAgICAgICAgdmFyIHRleHQgPSBwYXNzLnRleHQ7XHJcbiAgICAgICAgdmFyIHN0YXJ0ID0gcGFzcy5pbmRleDtcclxuICAgICAgICB2YXIgbGFzdFNwYWNlID0gLTE7XHJcbiAgICAgICAgdmFyIGM6IHN0cmluZztcclxuICAgICAgICB2YXIgY3VyVGV4dCA9IFwiXCI7XHJcbiAgICAgICAgdmFyIGN1cldpZHRoID0gMDtcclxuICAgICAgICB3aGlsZSAocGFzcy5pbmRleCA8IHBhc3MubWF4KSB7XHJcbiAgICAgICAgICAgIGMgPSB0ZXh0LmNoYXJBdChwYXNzLmluZGV4KTtcclxuICAgICAgICAgICAgY3VyVGV4dCArPSBjO1xyXG4gICAgICAgICAgICBjdXJXaWR0aCA9IG1lYXN1cmVUZXh0V2lkdGgoY3VyVGV4dCwgZm9udCk7XHJcbiAgICAgICAgICAgIGlmIChjID09PSAnXFxuJykge1xyXG4gICAgICAgICAgICAgICAgcnVuLmxlbmd0aCA9IHBhc3MuaW5kZXggLSBzdGFydCArIDE7XHJcbiAgICAgICAgICAgICAgICBydW4udGV4dCA9IHRleHQuc3Vic3RyKHN0YXJ0LCBydW4ubGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgIHJ1bi53aWR0aCA9IG1lYXN1cmVUZXh0V2lkdGgocnVuLnRleHQsIGZvbnQpO1xyXG4gICAgICAgICAgICAgICAgcGFzcy5pbmRleCsrO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYyA9PT0gJ1xccicpIHtcclxuICAgICAgICAgICAgICAgIHJ1bi5sZW5ndGggPSBwYXNzLmluZGV4IC0gc3RhcnQgKyAxO1xyXG4gICAgICAgICAgICAgICAgcGFzcy5pbmRleCsrO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRleHQuY2hhckF0KHBhc3MuaW5kZXgpID09PSAnXFxuJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJ1bi5sZW5ndGgrKztcclxuICAgICAgICAgICAgICAgICAgICBwYXNzLmluZGV4Kys7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBydW4udGV4dCA9IHRleHQuc3Vic3RyKHN0YXJ0LCBydW4ubGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgIHJ1bi53aWR0aCA9IG1lYXN1cmVUZXh0V2lkdGgocnVuLnRleHQsIGZvbnQpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGN1cldpZHRoID4gbWF4V2lkdGgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBicmVha0luZGV4ID0gKGxhc3RTcGFjZSA+IC0xKSA/IGxhc3RTcGFjZSArIDEgOiBwYXNzLmluZGV4O1xyXG4gICAgICAgICAgICAgICAgcnVuLmxlbmd0aCA9IChicmVha0luZGV4IC0gc3RhcnQpIHx8IDE7IC8vRm9yY2UgYXQgbGVhc3QgMSBjaGFyYWN0ZXJcclxuICAgICAgICAgICAgICAgIHJ1bi50ZXh0ID0gdGV4dC5zdWJzdHIoc3RhcnQsIHJ1bi5sZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgcnVuLndpZHRoID0gbWVhc3VyZVRleHRXaWR0aChydW4udGV4dCwgZm9udCk7XHJcbiAgICAgICAgICAgICAgICBwYXNzLmluZGV4ID0gc3RhcnQgKyBydW4ubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhc3MuaW5kZXggPCBwYXNzLm1heDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoYyA9PT0gJyAnKVxyXG4gICAgICAgICAgICAgICAgbGFzdFNwYWNlID0gcGFzcy5pbmRleDtcclxuICAgICAgICAgICAgcGFzcy5pbmRleCsrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBydW4udGV4dCA9IHRleHQuc3Vic3RyKHN0YXJ0KTtcclxuICAgICAgICBydW4ubGVuZ3RoID0gcnVuLnRleHQubGVuZ3RoO1xyXG4gICAgICAgIHJ1bi53aWR0aCA9IG1lYXN1cmVUZXh0V2lkdGgocnVuLnRleHQsIGZvbnQpO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBtZWFzdXJlVGV4dFdpZHRoICh0ZXh0OiBzdHJpbmcsIGZvbnQ6IEZvbnQpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiBlbmdpbmUuU3VyZmFjZS5tZWFzdXJlV2lkdGgodGV4dCwgZm9udCk7XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS50ZXh0LnJ1biB7XHJcbiAgICBleHBvcnQgY2xhc3MgUnVuTGF5b3V0RGVmIGltcGxlbWVudHMgSVRleHRMYXlvdXREZWYge1xyXG4gICAgICAgIGxheW91dCAoZG9jY3R4OiBJRG9jdW1lbnRDb250ZXh0LCBkb2Nhc3NldHM6IElEb2N1bWVudEFzc2V0cywgYXNzZXRzOiBJVGV4dEFzc2V0cyk6IGJvb2xlYW4ge1xyXG4gICAgICAgICAgICAvL1RPRE86IEltcGxlbWVudCBsaW5lU3RhY2tpbmdTdHJhdGVneSwgbGluZUhlaWdodFxyXG4gICAgICAgICAgICB2YXIgdGV4dCA9IGFzc2V0cy50ZXh0O1xyXG4gICAgICAgICAgICBpZiAoIXRleHQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBsaW5lID0gbmV3IGxheW91dC5MaW5lKCk7XHJcbiAgICAgICAgICAgICAgICBsaW5lLmhlaWdodCA9IGFzc2V0cy5mb250LmdldEhlaWdodCgpO1xyXG4gICAgICAgICAgICAgICAgZG9jYXNzZXRzLmxpbmVzLnB1c2gobGluZSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgcnVuMSA9IG5ldyBsYXlvdXQuUnVuKCk7XHJcbiAgICAgICAgICAgICAgICBydW4xLmF0dHJzID0gYXNzZXRzO1xyXG4gICAgICAgICAgICAgICAgbGluZS5ydW5zLnB1c2gocnVuMSk7XHJcbiAgICAgICAgICAgICAgICBkb2Nhc3NldHMuYWN0dWFsSGVpZ2h0ID0gbGluZS5oZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8qXHJcbiAgICAgICAgICAgICBUaGUgVGV4dFRyaW1taW5nIHByb3BlcnR5IGhhcyBubyBlZmZlY3QgdW5sZXNzIHRoZSBUZXh0V3JhcHBpbmcgcHJvcGVydHkgaXMgc2V0IHRvIE5vV3JhcC5cclxuICAgICAgICAgICAgIFNvdXJjZTogaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9zeXN0ZW0ud2luZG93cy5jb250cm9scy50ZXh0YmxvY2sudGV4dHRyaW1taW5nKHY9dnMuOTUpLmFzcHhcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGlmIChkb2NjdHgudGV4dFdyYXBwaW5nID09PSBUZXh0V3JhcHBpbmcuTm9XcmFwKVxyXG4gICAgICAgICAgICAgICAgcnVuLmRvTGF5b3V0Tm9XcmFwKGRvY2N0eCwgZG9jYXNzZXRzLCBhc3NldHMpO1xyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICBydW4uZG9MYXlvdXRXcmFwKGRvY2N0eCwgZG9jYXNzZXRzLCBhc3NldHMpO1xyXG5cclxuICAgICAgICAgICAgZG9jYXNzZXRzLnNlbENhY2hlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb250cm9scy5ib3JkZXIuYXJyYW5nZSB7XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElJbnB1dCBleHRlbmRzIGNvcmUuYXJyYW5nZS5JSW5wdXQge1xyXG4gICAgICAgIHBhZGRpbmc6IFRoaWNrbmVzcztcclxuICAgICAgICBib3JkZXJUaGlja25lc3M6IFRoaWNrbmVzcztcclxuICAgIH1cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSVN0YXRlIGV4dGVuZHMgY29yZS5hcnJhbmdlLklTdGF0ZSB7XHJcbiAgICAgICAgdG90YWxCb3JkZXI6IFRoaWNrbmVzcztcclxuICAgIH1cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSU91dHB1dCBleHRlbmRzIGNvcmUuYXJyYW5nZS5JT3V0cHV0IHtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgY2xhc3MgQm9yZGVyQXJyYW5nZVBpcGVEZWYgZXh0ZW5kcyBjb3JlLmFycmFuZ2UuQXJyYW5nZVBpcGVEZWYge1xyXG4gICAgICAgIGNvbnN0cnVjdG9yICgpIHtcclxuICAgICAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICAgICAgdGhpcy5hZGRUYXBpbkJlZm9yZSgnZG9PdmVycmlkZScsICdwcmVPdmVycmlkZScsIHByZU92ZXJyaWRlKVxyXG4gICAgICAgICAgICAgICAgLnJlcGxhY2VUYXBpbignZG9PdmVycmlkZScsIGRvT3ZlcnJpZGUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY3JlYXRlU3RhdGUgKCk6IElTdGF0ZSB7XHJcbiAgICAgICAgICAgIHZhciBzdGF0ZSA9IDxJU3RhdGU+c3VwZXIuY3JlYXRlU3RhdGUoKTtcclxuICAgICAgICAgICAgc3RhdGUudG90YWxCb3JkZXIgPSBuZXcgVGhpY2tuZXNzKCk7XHJcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHByZU92ZXJyaWRlIChpbnB1dDogSUlucHV0LCBzdGF0ZTogSVN0YXRlLCBvdXRwdXQ6IElPdXRwdXQsIHRyZWU6IEJvcmRlclVwZGF0ZXJUcmVlLCBmaW5hbFJlY3Q6IFJlY3QpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAoIXRyZWUuc3VidHJlZSlcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgdmFyIHRiID0gc3RhdGUudG90YWxCb3JkZXI7XHJcbiAgICAgICAgVGhpY2tuZXNzLmNvcHlUbyhpbnB1dC5wYWRkaW5nLCB0Yik7XHJcbiAgICAgICAgVGhpY2tuZXNzLmFkZCh0YiwgaW5wdXQuYm9yZGVyVGhpY2tuZXNzKTtcclxuXHJcbiAgICAgICAgdmFyIGNyID0gc3RhdGUuY2hpbGRSZWN0O1xyXG4gICAgICAgIGNyLnggPSBjci55ID0gMDtcclxuICAgICAgICBTaXplLmNvcHlUbyhzdGF0ZS5maW5hbFNpemUsIGNyKTtcclxuICAgICAgICBUaGlja25lc3Muc2hyaW5rUmVjdCh0YiwgY3IpO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBmdW5jdGlvbiBkb092ZXJyaWRlIChpbnB1dDogSUlucHV0LCBzdGF0ZTogSVN0YXRlLCBvdXRwdXQ6IElPdXRwdXQsIHRyZWU6IEJvcmRlclVwZGF0ZXJUcmVlLCBmaW5hbFJlY3Q6IFJlY3QpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAodHJlZS5zdWJ0cmVlKVxyXG4gICAgICAgICAgICB0cmVlLnN1YnRyZWUuYXJyYW5nZShzdGF0ZS5jaGlsZFJlY3QpO1xyXG4gICAgICAgIFNpemUuY29weVRvKHN0YXRlLmZpbmFsU2l6ZSwgc3RhdGUuYXJyYW5nZWRTaXplKTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxufVxyXG4iLCJtb2R1bGUgbWluZXJ2YS5jb250cm9scy5ib3JkZXIuaGl0dGVzdCB7XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElIaXRUZXN0RGF0YSBleHRlbmRzIGNvcmUuaGl0dGVzdC5JSGl0VGVzdERhdGEge1xyXG4gICAgICAgIGFzc2V0czogSUJvcmRlclVwZGF0ZXJBc3NldHM7XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGNsYXNzIEJvcmRlckhpdFRlc3RQaXBlRGVmIGV4dGVuZHMgY29yZS5oaXR0ZXN0LkhpdFRlc3RQaXBlRGVmIHtcclxuICAgICAgICBjb25zdHJ1Y3RvciAoKSB7XHJcbiAgICAgICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgICAgIHRoaXMucmVwbGFjZVRhcGluKCdjYW5IaXRJbnNpZGUnLCB0YXBpbnMuY2FuSGl0SW5zaWRlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IG1vZHVsZSB0YXBpbnMge1xyXG4gICAgICAgIGV4cG9ydCBmdW5jdGlvbiBjYW5IaXRJbnNpZGUgKGRhdGE6IElIaXRUZXN0RGF0YSwgcG9zOiBQb2ludCwgaGl0TGlzdDogY29yZS5VcGRhdGVyW10sIGN0eDogY29yZS5yZW5kZXIuUmVuZGVyQ29udGV4dCk6IGJvb2xlYW4ge1xyXG4gICAgICAgICAgICBpZiAoZGF0YS5oaXRDaGlsZHJlbilcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFkYXRhLmFzc2V0cy5iYWNrZ3JvdW5kICYmICFkYXRhLmFzc2V0cy5ib3JkZXJCcnVzaCkge1xyXG4gICAgICAgICAgICAgICAgaGl0TGlzdC5zaGlmdCgpO1xyXG4gICAgICAgICAgICAgICAgY3R4LnJlc3RvcmUoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vLi4vY29yZS9tZWFzdXJlL01lYXN1cmVQaXBlRGVmXCIgLz5cclxuXHJcbm1vZHVsZSBtaW5lcnZhLmNvbnRyb2xzLmJvcmRlci5tZWFzdXJlIHtcclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUlucHV0IGV4dGVuZHMgY29yZS5tZWFzdXJlLklJbnB1dCB7XHJcbiAgICAgICAgcGFkZGluZzogVGhpY2tuZXNzO1xyXG4gICAgICAgIGJvcmRlclRoaWNrbmVzczogVGhpY2tuZXNzO1xyXG4gICAgfVxyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJU3RhdGUgZXh0ZW5kcyBjb3JlLm1lYXN1cmUuSVN0YXRlIHtcclxuICAgICAgICB0b3RhbEJvcmRlcjogVGhpY2tuZXNzO1xyXG4gICAgfVxyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJT3V0cHV0IGV4dGVuZHMgY29yZS5tZWFzdXJlLklPdXRwdXQge1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBjbGFzcyBCb3JkZXJNZWFzdXJlUGlwZURlZiBleHRlbmRzIGNvcmUubWVhc3VyZS5NZWFzdXJlUGlwZURlZiB7XHJcbiAgICAgICAgY29uc3RydWN0b3IgKCkge1xyXG4gICAgICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgICAgICB0aGlzLmFkZFRhcGluQmVmb3JlKCdkb092ZXJyaWRlJywgJ3ByZU92ZXJyaWRlJywgcHJlT3ZlcnJpZGUpXHJcbiAgICAgICAgICAgICAgICAucmVwbGFjZVRhcGluKCdkb092ZXJyaWRlJywgZG9PdmVycmlkZSlcclxuICAgICAgICAgICAgICAgIC5hZGRUYXBpbkFmdGVyKCdkb092ZXJyaWRlJywgJ3Bvc3RPdmVycmlkZScsIHBvc3RPdmVycmlkZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjcmVhdGVTdGF0ZSAoKTogSVN0YXRlIHtcclxuICAgICAgICAgICAgdmFyIHN0YXRlID0gPElTdGF0ZT5zdXBlci5jcmVhdGVTdGF0ZSgpO1xyXG4gICAgICAgICAgICBzdGF0ZS50b3RhbEJvcmRlciA9IG5ldyBUaGlja25lc3MoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gcHJlT3ZlcnJpZGUgKGlucHV0OiBJSW5wdXQsIHN0YXRlOiBJU3RhdGUsIG91dHB1dDogSU91dHB1dCwgdHJlZTogQm9yZGVyVXBkYXRlclRyZWUsIGF2YWlsYWJsZVNpemU6IFNpemUpOiBib29sZWFuIHtcclxuICAgICAgICB2YXIgdGIgPSBzdGF0ZS50b3RhbEJvcmRlcjtcclxuICAgICAgICBUaGlja25lc3MuY29weVRvKGlucHV0LnBhZGRpbmcsIHRiKTtcclxuICAgICAgICBUaGlja25lc3MuYWRkKHRiLCBpbnB1dC5ib3JkZXJUaGlja25lc3MpO1xyXG4gICAgICAgIFRoaWNrbmVzcy5zaHJpbmtTaXplKHRiLCBzdGF0ZS5hdmFpbGFibGVTaXplKTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gZG9PdmVycmlkZSAoaW5wdXQ6IElJbnB1dCwgc3RhdGU6IElTdGF0ZSwgb3V0cHV0OiBJT3V0cHV0LCB0cmVlOiBCb3JkZXJVcGRhdGVyVHJlZSwgYXZhaWxhYmxlU2l6ZTogU2l6ZSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHZhciBkcyA9IG91dHB1dC5kZXNpcmVkU2l6ZTtcclxuICAgICAgICBpZiAodHJlZS5zdWJ0cmVlKSB7XHJcbiAgICAgICAgICAgIHRyZWUuc3VidHJlZS5tZWFzdXJlKHN0YXRlLmF2YWlsYWJsZVNpemUpO1xyXG4gICAgICAgICAgICBTaXplLmNvcHlUbyh0cmVlLnN1YnRyZWUuYXNzZXRzLmRlc2lyZWRTaXplLCBkcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBmdW5jdGlvbiBwb3N0T3ZlcnJpZGUgKGlucHV0OiBJSW5wdXQsIHN0YXRlOiBJU3RhdGUsIG91dHB1dDogSU91dHB1dCwgdHJlZTogQm9yZGVyVXBkYXRlclRyZWUsIGF2YWlsYWJsZVNpemU6IFNpemUpOiBib29sZWFuIHtcclxuICAgICAgICBUaGlja25lc3MuZ3Jvd1NpemUoc3RhdGUudG90YWxCb3JkZXIsIG91dHB1dC5kZXNpcmVkU2l6ZSk7XHJcbiAgICAgICAgU2l6ZS5taW4ob3V0cHV0LmRlc2lyZWRTaXplLCBzdGF0ZS5hdmFpbGFibGVTaXplKTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvbnRyb2xzLmJvcmRlci5yZW5kZXIge1xyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJSW5wdXQgZXh0ZW5kcyBjb3JlLnJlbmRlci5JSW5wdXQge1xyXG4gICAgICAgIGV4dGVudHM6IFJlY3Q7XHJcbiAgICAgICAgYmFja2dyb3VuZDogSUJydXNoO1xyXG4gICAgICAgIGJvcmRlckJydXNoOiBJQnJ1c2g7XHJcbiAgICAgICAgYm9yZGVyVGhpY2tuZXNzOiBUaGlja25lc3M7XHJcbiAgICAgICAgY29ybmVyUmFkaXVzOiBDb3JuZXJSYWRpdXM7XHJcbiAgICB9XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElTdGF0ZSBleHRlbmRzIGNvcmUucmVuZGVyLklTdGF0ZSB7XHJcbiAgICAgICAgc2hvdWxkUmVuZGVyOiBib29sZWFuO1xyXG4gICAgICAgIGZpbGxFeHRlbnRzOiBSZWN0O1xyXG4gICAgICAgIGlubmVyQ29ybmVyUmFkaXVzOiBDb3JuZXJSYWRpdXM7XHJcbiAgICAgICAgb3V0ZXJDb3JuZXJSYWRpdXM6IENvcm5lclJhZGl1cztcclxuICAgIH1cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSU91dHB1dCBleHRlbmRzIGNvcmUucmVuZGVyLklPdXRwdXQge1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBjbGFzcyBCb3JkZXJSZW5kZXJQaXBlRGVmIGV4dGVuZHMgY29yZS5yZW5kZXIuUmVuZGVyUGlwZURlZiB7XHJcbiAgICAgICAgY29uc3RydWN0b3IgKCkge1xyXG4gICAgICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgICAgICB0aGlzLmFkZFRhcGluQmVmb3JlKCdkb1JlbmRlcicsICdjYWxjU2hvdWxkUmVuZGVyJywgdGFwaW5zLmNhbGNTaG91bGRSZW5kZXIpXHJcbiAgICAgICAgICAgICAgICAuYWRkVGFwaW5CZWZvcmUoJ2RvUmVuZGVyJywgJ2NhbGNJbm5lck91dGVyJywgdGFwaW5zLmNhbGNJbm5lck91dGVyKVxyXG4gICAgICAgICAgICAgICAgLnJlcGxhY2VUYXBpbignZG9SZW5kZXInLCB0YXBpbnMuZG9SZW5kZXIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY3JlYXRlU3RhdGUgKCk6IElTdGF0ZSB7XHJcbiAgICAgICAgICAgIHZhciBzdGF0ZSA9IDxJU3RhdGU+c3VwZXIuY3JlYXRlU3RhdGUoKTtcclxuICAgICAgICAgICAgc3RhdGUuZmlsbEV4dGVudHMgPSBuZXcgUmVjdCgpO1xyXG4gICAgICAgICAgICBzdGF0ZS5pbm5lckNvcm5lclJhZGl1cyA9IG5ldyBDb3JuZXJSYWRpdXMoKTtcclxuICAgICAgICAgICAgc3RhdGUub3V0ZXJDb3JuZXJSYWRpdXMgPSBuZXcgQ29ybmVyUmFkaXVzKCk7XHJcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb250cm9scy5ib3JkZXIucmVuZGVyIHtcclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSVNoaW1TdGF0ZSBleHRlbmRzIElTdGF0ZSB7XHJcbiAgICAgICAgbWlkZGxlQ29ybmVyUmFkaXVzOiBDb3JuZXJSYWRpdXM7XHJcbiAgICAgICAgc3Ryb2tlRXh0ZW50czogUmVjdDtcclxuICAgICAgICBwYXR0ZXJuOiBDYW52YXNQYXR0ZXJuO1xyXG4gICAgICAgIG9sZE1ldHJpY3M6IGFueTtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgY2xhc3MgU2hpbUJvcmRlclJlbmRlclBpcGVEZWYgZXh0ZW5kcyBCb3JkZXJSZW5kZXJQaXBlRGVmIHtcclxuICAgICAgICBjb25zdHJ1Y3RvciAoKSB7XHJcbiAgICAgICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkVGFwaW5CZWZvcmUoJ2RvUmVuZGVyJywgJ2NhbGNCYWxhbmNlZCcsIHRhcGlucy5zaGltLmNhbGNCYWxhbmNlZClcclxuICAgICAgICAgICAgICAgIC5hZGRUYXBpbkJlZm9yZSgnZG9SZW5kZXInLCAnaW52YWxpZGF0ZVBhdHRlcm4nLCB0YXBpbnMuc2hpbS5pbnZhbGlkYXRlUGF0dGVybilcclxuICAgICAgICAgICAgICAgIC5hZGRUYXBpbkJlZm9yZSgnZG9SZW5kZXInLCAnY3JlYXRlUGF0dGVybicsIHRhcGlucy5zaGltLmNyZWF0ZVBhdHRlcm4pXHJcbiAgICAgICAgICAgICAgICAucmVwbGFjZVRhcGluKCdkb1JlbmRlcicsIHRhcGlucy5zaGltLmRvUmVuZGVyKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNyZWF0ZVN0YXRlICgpOiBJU2hpbVN0YXRlIHtcclxuICAgICAgICAgICAgdmFyIHN0YXRlID0gPElTaGltU3RhdGU+c3VwZXIuY3JlYXRlU3RhdGUoKTtcclxuICAgICAgICAgICAgc3RhdGUubWlkZGxlQ29ybmVyUmFkaXVzID0gbmV3IENvcm5lclJhZGl1cygpO1xyXG4gICAgICAgICAgICBzdGF0ZS5zdHJva2VFeHRlbnRzID0gbmV3IFJlY3QoKTtcclxuICAgICAgICAgICAgc3RhdGUucGF0dGVybiA9IG51bGw7XHJcbiAgICAgICAgICAgIHN0YXRlLm9sZE1ldHJpY3MgPSBudWxsO1xyXG4gICAgICAgICAgICByZXR1cm4gc3RhdGU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwibW9kdWxlIG1pbmVydmEuY29udHJvbHMucGFuZWwuYXJyYW5nZSB7XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElJbnB1dCBleHRlbmRzIGNvcmUuYXJyYW5nZS5JSW5wdXQge1xyXG4gICAgfVxyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJU3RhdGUgZXh0ZW5kcyBjb3JlLmFycmFuZ2UuSVN0YXRlIHtcclxuICAgIH1cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSU91dHB1dCBleHRlbmRzIGNvcmUuYXJyYW5nZS5JT3V0cHV0IHtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgY2xhc3MgUGFuZWxBcnJhbmdlUGlwZURlZiBleHRlbmRzIGNvcmUuYXJyYW5nZS5BcnJhbmdlUGlwZURlZiB7XHJcbiAgICAgICAgY29uc3RydWN0b3IgKCkge1xyXG4gICAgICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgICAgICB0aGlzLnJlcGxhY2VUYXBpbignZG9PdmVycmlkZScsIHRhcGlucy5kb092ZXJyaWRlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vcGFuZWwvYXJyYW5nZS9QYW5lbEFycmFuZ2VQaXBlRGVmXCIgLz5cclxuXHJcbm1vZHVsZSBtaW5lcnZhLmNvbnRyb2xzLmNhbnZhcy5hcnJhbmdlIHtcclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUlucHV0IGV4dGVuZHMgcGFuZWwuYXJyYW5nZS5JSW5wdXQge1xyXG4gICAgfVxyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJU3RhdGUgZXh0ZW5kcyBwYW5lbC5hcnJhbmdlLklTdGF0ZSB7XHJcbiAgICB9XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElPdXRwdXQgZXh0ZW5kcyBwYW5lbC5hcnJhbmdlLklPdXRwdXQge1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBjbGFzcyBDYW52YXNBcnJhbmdlUGlwZURlZiBleHRlbmRzIHBhbmVsLmFycmFuZ2UuUGFuZWxBcnJhbmdlUGlwZURlZiB7XHJcbiAgICAgICAgY29uc3RydWN0b3IgKCkge1xyXG4gICAgICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgICAgICB0aGlzLnJlcGxhY2VUYXBpbignZG9PdmVycmlkZScsIHRhcGlucy5kb092ZXJyaWRlKVxyXG4gICAgICAgICAgICAgICAgLnJlcGxhY2VUYXBpbignYnVpbGRMYXlvdXRDbGlwJywgdGFwaW5zLmJ1aWxkTGF5b3V0Q2xpcCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwibW9kdWxlIG1pbmVydmEuY29udHJvbHMucGFuZWwubWVhc3VyZSB7XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElJbnB1dCBleHRlbmRzIGNvcmUubWVhc3VyZS5JSW5wdXQge1xyXG4gICAgfVxyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJU3RhdGUgZXh0ZW5kcyBjb3JlLm1lYXN1cmUuSVN0YXRlIHtcclxuICAgIH1cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSU91dHB1dCBleHRlbmRzIGNvcmUubWVhc3VyZS5JT3V0cHV0IHtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgY2xhc3MgUGFuZWxNZWFzdXJlUGlwZURlZiBleHRlbmRzIGNvcmUubWVhc3VyZS5NZWFzdXJlUGlwZURlZiB7XHJcbiAgICAgICAgY29uc3RydWN0b3IgKCkge1xyXG4gICAgICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgICAgICB0aGlzLnJlcGxhY2VUYXBpbignZG9PdmVycmlkZScsIGRvT3ZlcnJpZGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBkb092ZXJyaWRlIChpbnB1dDogSUlucHV0LCBzdGF0ZTogSVN0YXRlLCBvdXRwdXQ6IElPdXRwdXQsIHRyZWU6IGNvcmUuSVVwZGF0ZXJUcmVlLCBhdmFpbGFibGVTaXplOiBTaXplKTogYm9vbGVhbiB7XHJcbiAgICAgICAgdmFyIGRlc2lyZWQgPSBvdXRwdXQuZGVzaXJlZFNpemU7XHJcbiAgICAgICAgZGVzaXJlZC53aWR0aCA9IGRlc2lyZWQuaGVpZ2h0ID0gMDtcclxuICAgICAgICBmb3IgKHZhciB3YWxrZXIgPSB0cmVlLndhbGsoKTsgd2Fsa2VyLnN0ZXAoKTspIHtcclxuICAgICAgICAgICAgd2Fsa2VyLmN1cnJlbnQubWVhc3VyZShzdGF0ZS5hdmFpbGFibGVTaXplKTtcclxuICAgICAgICAgICAgdmFyIGNoaWxkZHMgPSB3YWxrZXIuY3VycmVudC5hc3NldHMuZGVzaXJlZFNpemU7XHJcbiAgICAgICAgICAgIGRlc2lyZWQud2lkdGggPSBNYXRoLm1heChkZXNpcmVkLndpZHRoLCBjaGlsZGRzLndpZHRoKTtcclxuICAgICAgICAgICAgZGVzaXJlZC5oZWlnaHQgPSBNYXRoLm1heChkZXNpcmVkLmhlaWdodCwgY2hpbGRkcy5oZWlnaHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxufSIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9wYW5lbC9tZWFzdXJlL1BhbmVsTWVhc3VyZVBpcGVEZWZcIiAvPlxyXG5cclxubW9kdWxlIG1pbmVydmEuY29udHJvbHMuY2FudmFzLm1lYXN1cmUge1xyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJSW5wdXQgZXh0ZW5kcyBwYW5lbC5tZWFzdXJlLklJbnB1dCB7XHJcbiAgICB9XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElTdGF0ZSBleHRlbmRzIHBhbmVsLm1lYXN1cmUuSVN0YXRlIHtcclxuICAgIH1cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSU91dHB1dCBleHRlbmRzIHBhbmVsLm1lYXN1cmUuSU91dHB1dCB7XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGNsYXNzIENhbnZhc01lYXN1cmVQaXBlRGVmIGV4dGVuZHMgcGFuZWwubWVhc3VyZS5QYW5lbE1lYXN1cmVQaXBlRGVmIHtcclxuICAgICAgICBjb25zdHJ1Y3RvciAoKSB7XHJcbiAgICAgICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgICAgIHRoaXMucmVwbGFjZVRhcGluKCdkb092ZXJyaWRlJywgdGFwaW5zLmRvT3ZlcnJpZGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvbnRyb2xzLmNhbnZhcy5wcm9jZXNzZG93biB7XHJcbiAgICBleHBvcnQgY2xhc3MgQ2FudmFzUHJvY2Vzc0Rvd25QaXBlRGVmIGV4dGVuZHMgY29yZS5wcm9jZXNzZG93bi5Qcm9jZXNzRG93blBpcGVEZWYge1xyXG4gICAgICAgIGNvbnN0cnVjdG9yICgpIHtcclxuICAgICAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICAgICAgdGhpcy5yZXBsYWNlVGFwaW4oJ3Byb2Nlc3NMYXlvdXRDbGlwJywgdGFwaW5zLnByb2Nlc3NMYXlvdXRDbGlwKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IG1vZHVsZSB0YXBpbnMge1xyXG4gICAgICAgIGV4cG9ydCBmdW5jdGlvbiBwcm9jZXNzTGF5b3V0Q2xpcCAoaW5wdXQ6IGNvcmUucHJvY2Vzc2Rvd24uSUlucHV0LCBzdGF0ZTogY29yZS5wcm9jZXNzZG93bi5JU3RhdGUsIG91dHB1dDogY29yZS5wcm9jZXNzZG93bi5JT3V0cHV0LCB2cGlucHV0OiBjb3JlLnByb2Nlc3Nkb3duLklJbnB1dCwgdHJlZTogY29yZS5JVXBkYXRlclRyZWUpOiBib29sZWFuIHtcclxuICAgICAgICAgICAgaWYgKChpbnB1dC5kaXJ0eUZsYWdzICYgRGlydHlGbGFncy5MYXlvdXRDbGlwKSA9PT0gMClcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG5cclxuICAgICAgICAgICAgdmFyIGNsYyA9IGlucHV0LmNvbXBvc2l0ZUxheW91dENsaXA7XHJcbiAgICAgICAgICAgIGNsYy54ID0gY2xjLnkgPSBjbGMud2lkdGggPSBjbGMuaGVpZ2h0O1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb250cm9scy5jYW52YXMucHJvY2Vzc3VwIHtcclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUlucHV0IGV4dGVuZHMgY29yZS5wcm9jZXNzdXAuSUlucHV0IHtcclxuICAgIH1cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSVN0YXRlIGV4dGVuZHMgY29yZS5wcm9jZXNzdXAuSVN0YXRlIHtcclxuICAgIH1cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSU91dHB1dCBleHRlbmRzIGNvcmUucHJvY2Vzc3VwLklPdXRwdXQge1xyXG4gICAgfVxyXG4gICAgZXhwb3J0IGNsYXNzIENhbnZhc1Byb2Nlc3NVcFBpcGVEZWYgZXh0ZW5kcyBjb3JlLnByb2Nlc3N1cC5Qcm9jZXNzVXBQaXBlRGVmIHtcclxuICAgICAgICBjb25zdHJ1Y3RvciAoKSB7XHJcbiAgICAgICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgICAgIHRoaXMucmVwbGFjZVRhcGluKCdjYWxjUGFpbnRCb3VuZHMnLCB0YXBpbnMuY2FsY1BhaW50Qm91bmRzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb250cm9scy5jb250cm9sLmhpdHRlc3Qge1xyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJSGl0VGVzdERhdGEgZXh0ZW5kcyBjb3JlLmhpdHRlc3QuSUhpdFRlc3REYXRhIHtcclxuICAgICAgICBhc3NldHM6IElDb250cm9sVXBkYXRlckFzc2V0cztcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgY2xhc3MgQ29udHJvbEhpdFRlc3RQaXBlRGVmIGV4dGVuZHMgY29yZS5oaXR0ZXN0LkhpdFRlc3RQaXBlRGVmIHtcclxuICAgICAgICBjb25zdHJ1Y3RvciAoKSB7XHJcbiAgICAgICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkVGFwaW5CZWZvcmUoJ2NhbkhpdCcsICdzaG91bGRTa2lwJywgdGFwaW5zLnNob3VsZFNraXApXHJcbiAgICAgICAgICAgICAgICAucmVwbGFjZVRhcGluKCdjYW5IaXRJbnNpZGUnLCB0YXBpbnMuY2FuSGl0SW5zaWRlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IG1vZHVsZSB0YXBpbnMge1xyXG4gICAgICAgIGV4cG9ydCBmdW5jdGlvbiBzaG91bGRTa2lwIChkYXRhOiBJSGl0VGVzdERhdGEsIHBvczogUG9pbnQsIGhpdExpc3Q6IGNvcmUuVXBkYXRlcltdLCBjdHg6IGNvcmUucmVuZGVyLlJlbmRlckNvbnRleHQpOiBib29sZWFuIHtcclxuICAgICAgICAgICAgcmV0dXJuICEhZGF0YS5hc3NldHMuaXNFbmFibGVkO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZXhwb3J0IGZ1bmN0aW9uIGNhbkhpdEluc2lkZSAoZGF0YTogSUhpdFRlc3REYXRhLCBwb3M6IFBvaW50LCBoaXRMaXN0OiBjb3JlLlVwZGF0ZXJbXSwgY3R4OiBjb3JlLnJlbmRlci5SZW5kZXJDb250ZXh0KTogYm9vbGVhbiB7XHJcbiAgICAgICAgICAgIGlmIChkYXRhLmhpdENoaWxkcmVuKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcblxyXG4gICAgICAgICAgICBoaXRMaXN0LnNoaWZ0KCk7XHJcbiAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb250cm9scy5ncmlkLmFycmFuZ2Uge1xyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJSW5wdXQgZXh0ZW5kcyBwYW5lbC5hcnJhbmdlLklJbnB1dCB7XHJcbiAgICAgICAgZ3JpZFN0YXRlOiBJR3JpZFN0YXRlO1xyXG4gICAgICAgIGNvbHVtbkRlZmluaXRpb25zOiBJQ29sdW1uRGVmaW5pdGlvbltdO1xyXG4gICAgICAgIHJvd0RlZmluaXRpb25zOiBJUm93RGVmaW5pdGlvbltdO1xyXG4gICAgfVxyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJU3RhdGUgZXh0ZW5kcyBwYW5lbC5hcnJhbmdlLklTdGF0ZSB7XHJcbiAgICAgICAgY29uc3VtZWQ6IFNpemU7XHJcbiAgICB9XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElPdXRwdXQgZXh0ZW5kcyBwYW5lbC5hcnJhbmdlLklPdXRwdXQge1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBjbGFzcyBHcmlkQXJyYW5nZVBpcGVEZWYgZXh0ZW5kcyBwYW5lbC5hcnJhbmdlLlBhbmVsQXJyYW5nZVBpcGVEZWYge1xyXG4gICAgICAgIGNvbnN0cnVjdG9yICgpIHtcclxuICAgICAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICAgICAgdGhpcy5hZGRUYXBpbkJlZm9yZSgnZG9PdmVycmlkZScsICdyZXN0b3JlTWVhc3VyZVJlc3VsdHMnLCB0YXBpbnMucmVzdG9yZU1lYXN1cmVSZXN1bHRzKVxyXG4gICAgICAgICAgICAgICAgLmFkZFRhcGluQmVmb3JlKCdkb092ZXJyaWRlJywgJ2NhbGNDb25zdW1lZCcsIHRhcGlucy5jYWxjQ29uc3VtZWQpXHJcbiAgICAgICAgICAgICAgICAuYWRkVGFwaW5CZWZvcmUoJ2RvT3ZlcnJpZGUnLCAnc2V0QWN0dWFscycsIHRhcGlucy5zZXRBY3R1YWxzKVxyXG4gICAgICAgICAgICAgICAgLnJlcGxhY2VUYXBpbignZG9PdmVycmlkZScsIHRhcGlucy5kb092ZXJyaWRlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNyZWF0ZVN0YXRlICgpIHtcclxuICAgICAgICAgICAgdmFyIHN0YXRlID0gPElTdGF0ZT5zdXBlci5jcmVhdGVTdGF0ZSgpO1xyXG4gICAgICAgICAgICBzdGF0ZS5jb25zdW1lZCA9IG5ldyBTaXplKCk7XHJcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb250cm9scy5ncmlkLmhlbHBlcnMge1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGFsbG9jYXRlRGVzaXJlZFNpemUgKHJvd01hdDogU2VnbWVudFtdW10sIGNvbE1hdDogU2VnbWVudFtdW10pIHtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDI7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgbWF0cml4ID0gaSA9PT0gMCA/IHJvd01hdCA6IGNvbE1hdDtcclxuICAgICAgICAgICAgdmFyIGNvdW50ID0gbWF0cml4Lmxlbmd0aDtcclxuXHJcbiAgICAgICAgICAgIGZvciAodmFyIHJvdyA9IGNvdW50IC0gMTsgcm93ID49IDA7IHJvdy0tKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBjb2wgPSByb3c7IGNvbCA+PSAwOyBjb2wtLSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzcGFuc1N0YXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gcm93OyBqID49IGNvbDsgai0tKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNwYW5zU3RhciA9IHNwYW5zU3RhciB8fCAobWF0cml4W2pdW2pdLnR5cGUgPT09IEdyaWRVbml0VHlwZS5TdGFyKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSBtYXRyaXhbcm93XVtjb2xdLmRlc2lyZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRvdGFsQWxsb2NhdGVkID0gMDtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBhID0gcm93OyBhID49IGNvbDsgYS0tKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQWxsb2NhdGVkICs9IG1hdHJpeFthXVthXS5kZXNpcmVkO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodG90YWxBbGxvY2F0ZWQgPCBjdXJyZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhZGRpdGlvbmFsID0gY3VycmVudCAtIHRvdGFsQWxsb2NhdGVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3BhbnNTdGFyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRpdGlvbmFsID0gYXNzaWduU2l6ZShtYXRyaXgsIGNvbCwgcm93LCBhZGRpdGlvbmFsLCBHcmlkVW5pdFR5cGUuU3RhciwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRpdGlvbmFsID0gYXNzaWduU2l6ZShtYXRyaXgsIGNvbCwgcm93LCBhZGRpdGlvbmFsLCBHcmlkVW5pdFR5cGUuUGl4ZWwsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkaXRpb25hbCA9IGFzc2lnblNpemUobWF0cml4LCBjb2wsIHJvdywgYWRkaXRpb25hbCwgR3JpZFVuaXRUeXBlLkF1dG8sIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcm93TWF0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHJvd01hdFtpXVtpXS5vZmZlcmVkID0gcm93TWF0W2ldW2ldLmRlc2lyZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWF0cml4Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbE1hdFtpXVtpXS5vZmZlcmVkID0gY29sTWF0W2ldW2ldLmRlc2lyZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwibW9kdWxlIG1pbmVydmEuY29udHJvbHMuZ3JpZC5oZWxwZXJzIHtcclxuICAgIGV4cG9ydCBmdW5jdGlvbiBhc3NpZ25TaXplIChtYXQ6IFNlZ21lbnRbXVtdLCBzdGFydDogbnVtYmVyLCBlbmQ6IG51bWJlciwgc2l6ZTogbnVtYmVyLCB1bml0VHlwZTogR3JpZFVuaXRUeXBlLCBkZXNpcmVkU2l6ZTogYm9vbGVhbik6IG51bWJlciB7XHJcbiAgICAgICAgdmFyIGNvdW50ID0gMDtcclxuICAgICAgICB2YXIgYXNzaWduZWQgPSBmYWxzZTtcclxuICAgICAgICB2YXIgc2VnbWVudFNpemUgPSAwO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8PSBlbmQ7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgY3VyID0gbWF0W2ldW2ldO1xyXG4gICAgICAgICAgICBzZWdtZW50U2l6ZSA9IGRlc2lyZWRTaXplID8gY3VyLmRlc2lyZWQgOiBjdXIub2ZmZXJlZDtcclxuICAgICAgICAgICAgaWYgKHNlZ21lbnRTaXplIDwgY3VyLm1heClcclxuICAgICAgICAgICAgICAgIGNvdW50ICs9ICh1bml0VHlwZSA9PT0gR3JpZFVuaXRUeXBlLlN0YXIpID8gY3VyLnN0YXJzIDogMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGRvIHtcclxuICAgICAgICAgICAgYXNzaWduZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgdmFyIGNvbnRyaWJ1dGlvbiA9IHNpemUgLyBjb3VudDtcclxuICAgICAgICAgICAgZm9yIChpID0gc3RhcnQ7IGkgPD0gZW5kOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGN1ciA9IG1hdFtpXVtpXTtcclxuICAgICAgICAgICAgICAgIHNlZ21lbnRTaXplID0gZGVzaXJlZFNpemUgPyBjdXIuZGVzaXJlZCA6IGN1ci5vZmZlcmVkO1xyXG4gICAgICAgICAgICAgICAgaWYgKCEoY3VyLnR5cGUgPT09IHVuaXRUeXBlICYmIHNlZ21lbnRTaXplIDwgY3VyLm1heCkpXHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB2YXIgbmV3U2l6ZSA9IHNlZ21lbnRTaXplO1xyXG4gICAgICAgICAgICAgICAgbmV3U2l6ZSArPSBjb250cmlidXRpb24gKiAodW5pdFR5cGUgPT09IEdyaWRVbml0VHlwZS5TdGFyID8gY3VyLnN0YXJzIDogMSk7XHJcbiAgICAgICAgICAgICAgICBuZXdTaXplID0gTWF0aC5taW4obmV3U2l6ZSwgY3VyLm1heCk7XHJcbiAgICAgICAgICAgICAgICBhc3NpZ25lZCA9IGFzc2lnbmVkIHx8IChuZXdTaXplID4gc2VnbWVudFNpemUpO1xyXG4gICAgICAgICAgICAgICAgc2l6ZSAtPSBuZXdTaXplIC0gc2VnbWVudFNpemU7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGVzaXJlZFNpemUpXHJcbiAgICAgICAgICAgICAgICAgICAgY3VyLmRlc2lyZWQgPSBuZXdTaXplO1xyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIGN1ci5vZmZlcmVkID0gbmV3U2l6ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gd2hpbGUgKGFzc2lnbmVkKTtcclxuICAgICAgICByZXR1cm4gc2l6ZTtcclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvbnRyb2xzLmdyaWQuaGVscGVycyB7XHJcbiAgICBleHBvcnQgZnVuY3Rpb24gZXhwYW5kU3RhckNvbHMgKG1hdDogU2VnbWVudFtdW10sIGNvbGRlZnM6IElDb2x1bW5EZWZpbml0aW9uW10sIGF2YWlsYWJsZVNpemU6IFNpemUpIHtcclxuICAgICAgICB2YXIgYXcgPSBhdmFpbGFibGVTaXplLndpZHRoO1xyXG5cclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1hdC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgY3VyID0gbWF0W2ldW2ldO1xyXG4gICAgICAgICAgICBpZiAoY3VyLnR5cGUgPT09IEdyaWRVbml0VHlwZS5TdGFyKVxyXG4gICAgICAgICAgICAgICAgY3VyLm9mZmVyZWQgPSAwO1xyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICBhdyA9IE1hdGgubWF4KGF3IC0gY3VyLm9mZmVyZWQsIDApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBhdyA9IGFzc2lnblNpemUobWF0LCAwLCBtYXQubGVuZ3RoIC0gMSwgYXcsIEdyaWRVbml0VHlwZS5TdGFyLCBmYWxzZSk7XHJcblxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29sZGVmcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgY3VyID0gbWF0W2ldW2ldO1xyXG4gICAgICAgICAgICBpZiAoY3VyLnR5cGUgPT09IEdyaWRVbml0VHlwZS5TdGFyKVxyXG4gICAgICAgICAgICAgICAgY29sZGVmc1tpXS5zZXRBY3R1YWxXaWR0aChjdXIub2ZmZXJlZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsIm1vZHVsZSBtaW5lcnZhLmNvbnRyb2xzLmdyaWQuaGVscGVycyB7XHJcbiAgICBleHBvcnQgZnVuY3Rpb24gZXhwYW5kU3RhclJvd3MgKG1hdDogU2VnbWVudFtdW10sIHJvd2RlZnM6IElSb3dEZWZpbml0aW9uW10sIGF2YWlsYWJsZVNpemU6IFNpemUpIHtcclxuICAgICAgICB2YXIgYWggPSBhdmFpbGFibGVTaXplLmhlaWdodDtcclxuXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXQubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdmFyIGN1ciA9IG1hdFtpXVtpXTtcclxuICAgICAgICAgICAgaWYgKGN1ci50eXBlID09PSBHcmlkVW5pdFR5cGUuU3RhcilcclxuICAgICAgICAgICAgICAgIGN1ci5vZmZlcmVkID0gMDtcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgYWggPSBNYXRoLm1heChhaCAtIGN1ci5vZmZlcmVkLCAwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYWggPSBhc3NpZ25TaXplKG1hdCwgMCwgbWF0Lmxlbmd0aCAtIDEsIGFoLCBHcmlkVW5pdFR5cGUuU3RhciwgZmFsc2UpO1xyXG5cclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJvd2RlZnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdmFyIGN1ciA9IG1hdFtpXVtpXTtcclxuICAgICAgICAgICAgaWYgKGN1ci50eXBlID09PSBHcmlkVW5pdFR5cGUuU3RhcilcclxuICAgICAgICAgICAgICAgIHJvd2RlZnNbaV0uc2V0QWN0dWFsSGVpZ2h0KGN1ci5vZmZlcmVkKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb250cm9scy5ncmlkLm1lYXN1cmUge1xyXG4gICAgZXhwb3J0IGNsYXNzIEdyaWRDaGlsZFBsYWNlbWVudCB7XHJcbiAgICAgICAgY29uc3RydWN0b3IgKHB1YmxpYyBtYXRyaXg6IFNlZ21lbnRbXVtdLCBwdWJsaWMgcm93OiBudW1iZXIsIHB1YmxpYyBjb2w6IG51bWJlciwgcHVibGljIHNpemU6IG51bWJlcikge1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3RhdGljIHJvdyAobWF0cml4OiBTZWdtZW50W11bXSwgY2hpbGRTaGFwZTogR3JpZENoaWxkU2hhcGUsIGNoaWxkOiBjb3JlLlVwZGF0ZXIpOiBHcmlkQ2hpbGRQbGFjZW1lbnQge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEdyaWRDaGlsZFBsYWNlbWVudChtYXRyaXgsIGNoaWxkU2hhcGUucm93ICsgY2hpbGRTaGFwZS5yb3dzcGFuIC0gMSwgY2hpbGRTaGFwZS5yb3csIGNoaWxkLmFzc2V0cy5kZXNpcmVkU2l6ZS5oZWlnaHQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3RhdGljIGNvbCAobWF0cml4OiBTZWdtZW50W11bXSwgY2hpbGRTaGFwZTogR3JpZENoaWxkU2hhcGUsIGNoaWxkOiBjb3JlLlVwZGF0ZXIpOiBHcmlkQ2hpbGRQbGFjZW1lbnQge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEdyaWRDaGlsZFBsYWNlbWVudChtYXRyaXgsIGNoaWxkU2hhcGUuY29sICsgY2hpbGRTaGFwZS5jb2xzcGFuIC0gMSwgY2hpbGRTaGFwZS5jb2wsIGNoaWxkLmFzc2V0cy5kZXNpcmVkU2l6ZS53aWR0aCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwibW9kdWxlIG1pbmVydmEuY29udHJvbHMuZ3JpZC5tZWFzdXJlIHtcclxuICAgIGV4cG9ydCBlbnVtIE92ZXJyaWRlUGFzcyB7XHJcbiAgICAgICAgQXV0b0F1dG8sIC8vQ2hpbGQgaW4gYXV0byByb3csIGF1dG8gY29sXHJcbiAgICAgICAgU3RhckF1dG8sIC8vQ2hpbGQgaW4gc3RhciByb3csIGF1dG8gY29sXHJcbiAgICAgICAgQXV0b1N0YXIsIC8vQ2hpbGQgaW4gYXV0byByb3csIHN0YXIgY29sXHJcbiAgICAgICAgU3RhckF1dG9BZ2FpbiwgLy9zdGFyIHJvdywgYXV0byBjb2wgcmVwZWF0ZWRcclxuICAgICAgICBOb25TdGFyLCAvL0NoaWxkIGluIGF1dG8vcGl4ZWwgcm93LCBhdXRvL3BpeGVsIGNvbFxyXG4gICAgICAgIFJlbWFpbmluZ1N0YXIgLy9DaGlsZCBpbiA/XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGNsYXNzIEdyaWRDaGlsZFNoYXBlIHtcclxuICAgICAgICBzdGFyUm93OiBib29sZWFuO1xyXG4gICAgICAgIGF1dG9Sb3c6IGJvb2xlYW47XHJcbiAgICAgICAgc3RhckNvbDogYm9vbGVhbjtcclxuICAgICAgICBhdXRvQ29sOiBib29sZWFuO1xyXG5cclxuICAgICAgICBjb2w6IG51bWJlcjtcclxuICAgICAgICByb3c6IG51bWJlcjtcclxuICAgICAgICBjb2xzcGFuOiBudW1iZXI7XHJcbiAgICAgICAgcm93c3BhbjogbnVtYmVyO1xyXG5cclxuICAgICAgICBpbml0IChjaGlsZDogY29yZS5VcGRhdGVyLCBybTogU2VnbWVudFtdW10sIGNtOiBTZWdtZW50W11bXSk6IEdyaWRDaGlsZFNoYXBlIHtcclxuICAgICAgICAgICAgdmFyIGNvbCA9IHRoaXMuY29sID0gTWF0aC5taW4oY2hpbGQuZ2V0QXR0YWNoZWRWYWx1ZShcIkdyaWQuQ29sdW1uXCIpLCBjbS5sZW5ndGggLSAxKTtcclxuICAgICAgICAgICAgaWYgKGlzTmFOKGNvbCkpXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbCA9IGNvbCA9IDA7XHJcbiAgICAgICAgICAgIHZhciByb3cgPSB0aGlzLnJvdyA9IE1hdGgubWluKGNoaWxkLmdldEF0dGFjaGVkVmFsdWUoXCJHcmlkLlJvd1wiKSwgcm0ubGVuZ3RoIC0gMSk7XHJcbiAgICAgICAgICAgIGlmIChpc05hTihyb3cpKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5yb3cgPSByb3cgPSAwO1xyXG4gICAgICAgICAgICB2YXIgY29sc3BhbiA9IHRoaXMuY29sc3BhbiA9IE1hdGgubWluKGNoaWxkLmdldEF0dGFjaGVkVmFsdWUoXCJHcmlkLkNvbHVtblNwYW5cIiksIGNtLmxlbmd0aCAtIGNvbCk7XHJcbiAgICAgICAgICAgIGlmIChpc05hTihjb2xzcGFuKSlcclxuICAgICAgICAgICAgICAgIHRoaXMuY29sc3BhbiA9IGNvbHNwYW4gPSAxO1xyXG4gICAgICAgICAgICB2YXIgcm93c3BhbiA9IHRoaXMucm93c3BhbiA9IE1hdGgubWluKGNoaWxkLmdldEF0dGFjaGVkVmFsdWUoXCJHcmlkLlJvd1NwYW5cIiksIHJtLmxlbmd0aCAtIHJvdyk7XHJcbiAgICAgICAgICAgIGlmIChpc05hTihyb3dzcGFuKSlcclxuICAgICAgICAgICAgICAgIHRoaXMucm93c3BhbiA9IHJvd3NwYW4gPSAxO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5zdGFyUm93ID0gdGhpcy5hdXRvUm93ID0gdGhpcy5zdGFyQ29sID0gdGhpcy5hdXRvQ29sID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gcm93OyBpIDwgcm93ICsgcm93c3BhbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJSb3cgPSB0aGlzLnN0YXJSb3cgfHwgKHJtW2ldW2ldLnR5cGUgPT09IEdyaWRVbml0VHlwZS5TdGFyKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYXV0b1JvdyA9IHRoaXMuYXV0b1JvdyB8fCAocm1baV1baV0udHlwZSA9PT0gR3JpZFVuaXRUeXBlLkF1dG8pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBjb2w7IGkgPCBjb2wgKyBjb2xzcGFuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RhckNvbCA9IHRoaXMuc3RhckNvbCB8fCAoY21baV1baV0udHlwZSA9PT0gR3JpZFVuaXRUeXBlLlN0YXIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hdXRvQ29sID0gdGhpcy5hdXRvQ29sIHx8IChjbVtpXVtpXS50eXBlID09PSBHcmlkVW5pdFR5cGUuQXV0byk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2hvdWxkTWVhc3VyZVBhc3MgKGdyaWRTaGFwZTogR3JpZFNoYXBlLCBjaGlsZFNpemU6IFNpemUsIHBhc3M6IE92ZXJyaWRlUGFzcyk6IGJvb2xlYW4ge1xyXG4gICAgICAgICAgICBjaGlsZFNpemUud2lkdGggPSBjaGlsZFNpemUuaGVpZ2h0ID0gMDtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmF1dG9Sb3cgJiYgdGhpcy5hdXRvQ29sICYmICF0aGlzLnN0YXJSb3cgJiYgIXRoaXMuc3RhckNvbCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHBhc3MgIT09IE92ZXJyaWRlUGFzcy5BdXRvQXV0bylcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBjaGlsZFNpemUud2lkdGggPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XHJcbiAgICAgICAgICAgICAgICBjaGlsZFNpemUuaGVpZ2h0ID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnN0YXJSb3cgJiYgdGhpcy5hdXRvQ29sICYmICF0aGlzLnN0YXJDb2wpIHtcclxuICAgICAgICAgICAgICAgIGlmIChwYXNzICE9PSBPdmVycmlkZVBhc3MuU3RhckF1dG8gJiYgcGFzcyAhPT0gT3ZlcnJpZGVQYXNzLlN0YXJBdXRvQWdhaW4pXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBhc3MgPT09IE92ZXJyaWRlUGFzcy5BdXRvQXV0byAmJiBncmlkU2hhcGUuaGFzQXV0b1N0YXIpXHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRTaXplLmhlaWdodCA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcclxuICAgICAgICAgICAgICAgIGNoaWxkU2l6ZS53aWR0aCA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5hdXRvUm93ICYmIHRoaXMuc3RhckNvbCAmJiAhdGhpcy5zdGFyUm93KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocGFzcyAhPT0gT3ZlcnJpZGVQYXNzLkF1dG9TdGFyKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGNoaWxkU2l6ZS5oZWlnaHQgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCh0aGlzLmF1dG9Sb3cgfHwgdGhpcy5hdXRvQ29sKSAmJiAhKHRoaXMuc3RhclJvdyB8fCB0aGlzLnN0YXJDb2wpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocGFzcyAhPT0gT3ZlcnJpZGVQYXNzLk5vblN0YXIpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYXV0b1JvdylcclxuICAgICAgICAgICAgICAgICAgICBjaGlsZFNpemUuaGVpZ2h0ID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYXV0b0NvbClcclxuICAgICAgICAgICAgICAgICAgICBjaGlsZFNpemUud2lkdGggPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCEodGhpcy5zdGFyUm93IHx8IHRoaXMuc3RhckNvbCkpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFzcyA9PT0gT3ZlcnJpZGVQYXNzLk5vblN0YXI7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcGFzcyA9PT0gT3ZlcnJpZGVQYXNzLlJlbWFpbmluZ1N0YXI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzaXplIChjaGlsZFNpemU6IFNpemUsIHJtOiBTZWdtZW50W11bXSwgY206IFNlZ21lbnRbXVtdKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSB0aGlzLnJvdzsgaSA8IHRoaXMucm93ICsgdGhpcy5yb3dzcGFuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGNoaWxkU2l6ZS5oZWlnaHQgKz0gcm1baV1baV0ub2ZmZXJlZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gdGhpcy5jb2w7IGkgPCB0aGlzLmNvbCArIHRoaXMuY29sc3BhbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjaGlsZFNpemUud2lkdGggKz0gY21baV1baV0ub2ZmZXJlZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvbnRyb2xzLmdyaWQubWVhc3VyZSB7XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElJbnB1dCBleHRlbmRzIHBhbmVsLm1lYXN1cmUuSUlucHV0IHtcclxuICAgICAgICBncmlkU3RhdGU6IElHcmlkU3RhdGU7XHJcbiAgICAgICAgY29sdW1uRGVmaW5pdGlvbnM6IElDb2x1bW5EZWZpbml0aW9uW107XHJcbiAgICAgICAgcm93RGVmaW5pdGlvbnM6IElSb3dEZWZpbml0aW9uW107XHJcbiAgICB9XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElTdGF0ZSBleHRlbmRzIHBhbmVsLm1lYXN1cmUuSVN0YXRlIHtcclxuICAgICAgICB0b3RhbFN0YXJzOiBTaXplO1xyXG4gICAgICAgIGdyaWRTaGFwZTogR3JpZFNoYXBlO1xyXG4gICAgICAgIGNoaWxkU2hhcGVzOiBHcmlkQ2hpbGRTaGFwZVtdO1xyXG4gICAgICAgIGNoaWxkU2l6ZTogU2l6ZTtcclxuICAgICAgICBwbGFjZW1lbnRzOiBHcmlkQ2hpbGRQbGFjZW1lbnRbXTtcclxuICAgICAgICBwbGFjZW1lbnRJbmRleDogbnVtYmVyO1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBjbGFzcyBHcmlkTWVhc3VyZVBpcGVEZWYgZXh0ZW5kcyBwYW5lbC5tZWFzdXJlLlBhbmVsTWVhc3VyZVBpcGVEZWYge1xyXG4gICAgICAgIGNvbnN0cnVjdG9yICgpIHtcclxuICAgICAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICAgICAgdGhpcy5hZGRUYXBpbkJlZm9yZSgnZG9PdmVycmlkZScsICdlbnN1cmVSb3dNYXRyaXgnLCB0YXBpbnMuZW5zdXJlUm93TWF0cml4KVxyXG4gICAgICAgICAgICAgICAgLmFkZFRhcGluQmVmb3JlKCdkb092ZXJyaWRlJywgJ3ByZXBhcmVSb3dNYXRyaXgnLCB0YXBpbnMucHJlcGFyZVJvd01hdHJpeClcclxuICAgICAgICAgICAgICAgIC5hZGRUYXBpbkJlZm9yZSgnZG9PdmVycmlkZScsICdlbnN1cmVDb2xNYXRyaXgnLCB0YXBpbnMuZW5zdXJlQ29sTWF0cml4KVxyXG4gICAgICAgICAgICAgICAgLmFkZFRhcGluQmVmb3JlKCdkb092ZXJyaWRlJywgJ3ByZXBhcmVDb2xNYXRyaXgnLCB0YXBpbnMucHJlcGFyZUNvbE1hdHJpeClcclxuICAgICAgICAgICAgICAgIC5hZGRUYXBpbkJlZm9yZSgnZG9PdmVycmlkZScsICdidWlsZFNoYXBlJywgdGFwaW5zLmJ1aWxkU2hhcGUpXHJcbiAgICAgICAgICAgICAgICAuYWRkVGFwaW5CZWZvcmUoJ2RvT3ZlcnJpZGUnLCAnZG9PdmVycmlkZUF1dG9BdXRvJywgdGFwaW5zLmNyZWF0ZURvT3ZlcnJpZGVQYXNzKE92ZXJyaWRlUGFzcy5BdXRvQXV0bykpXHJcbiAgICAgICAgICAgICAgICAuYWRkVGFwaW5CZWZvcmUoJ2RvT3ZlcnJpZGUnLCAnZG9PdmVycmlkZVN0YXJBdXRvJywgdGFwaW5zLmNyZWF0ZURvT3ZlcnJpZGVQYXNzKE92ZXJyaWRlUGFzcy5TdGFyQXV0bykpXHJcbiAgICAgICAgICAgICAgICAuYWRkVGFwaW5CZWZvcmUoJ2RvT3ZlcnJpZGUnLCAnZG9PdmVycmlkZUF1dG9TdGFyJywgdGFwaW5zLmNyZWF0ZURvT3ZlcnJpZGVQYXNzKE92ZXJyaWRlUGFzcy5BdXRvU3RhcikpXHJcbiAgICAgICAgICAgICAgICAuYWRkVGFwaW5CZWZvcmUoJ2RvT3ZlcnJpZGUnLCAnZG9PdmVycmlkZVN0YXJBdXRvQWdhaW4nLCB0YXBpbnMuY3JlYXRlRG9PdmVycmlkZVBhc3MoT3ZlcnJpZGVQYXNzLlN0YXJBdXRvQWdhaW4pKVxyXG4gICAgICAgICAgICAgICAgLmFkZFRhcGluQmVmb3JlKCdkb092ZXJyaWRlJywgJ2RvT3ZlcnJpZGVOb25TdGFyJywgdGFwaW5zLmNyZWF0ZURvT3ZlcnJpZGVQYXNzKE92ZXJyaWRlUGFzcy5Ob25TdGFyKSlcclxuICAgICAgICAgICAgICAgIC5hZGRUYXBpbkJlZm9yZSgnZG9PdmVycmlkZScsICdkb092ZXJyaWRlUmVtYWluaW5nU3RhcicsIHRhcGlucy5jcmVhdGVEb092ZXJyaWRlUGFzcyhPdmVycmlkZVBhc3MuUmVtYWluaW5nU3RhcikpXHJcbiAgICAgICAgICAgICAgICAucmVwbGFjZVRhcGluKCdkb092ZXJyaWRlJywgdGFwaW5zLmRvT3ZlcnJpZGUpXHJcbiAgICAgICAgICAgICAgICAuYWRkVGFwaW5BZnRlcignZG9PdmVycmlkZScsICdzYXZlTWVhc3VyZVJlc3VsdHMnLCB0YXBpbnMuc2F2ZU1lYXN1cmVSZXN1bHRzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNyZWF0ZVN0YXRlICgpIHtcclxuICAgICAgICAgICAgdmFyIHN0YXRlID0gPElTdGF0ZT5zdXBlci5jcmVhdGVTdGF0ZSgpO1xyXG4gICAgICAgICAgICBzdGF0ZS50b3RhbFN0YXJzID0gbmV3IFNpemUoKTtcclxuICAgICAgICAgICAgc3RhdGUuZ3JpZFNoYXBlID0gbmV3IEdyaWRTaGFwZSgpO1xyXG4gICAgICAgICAgICBzdGF0ZS5jaGlsZFNoYXBlcyA9IFtdO1xyXG4gICAgICAgICAgICBzdGF0ZS5jaGlsZFNpemUgPSBuZXcgU2l6ZSgpO1xyXG4gICAgICAgICAgICBzdGF0ZS5wbGFjZW1lbnRzID0gW107XHJcbiAgICAgICAgICAgIHN0YXRlLnBsYWNlbWVudEluZGV4ID0gMDtcclxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvbnRyb2xzLmdyaWQubWVhc3VyZSB7XHJcbiAgICBleHBvcnQgY2xhc3MgR3JpZFNoYXBlIHtcclxuICAgICAgICBoYXNBdXRvQXV0bzogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgICAgIGhhc1N0YXJBdXRvOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICAgICAgaGFzQXV0b1N0YXI6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICAgICAgaW5pdCAoY2hpbGRTaGFwZXM6IEdyaWRDaGlsZFNoYXBlW10pIHtcclxuICAgICAgICAgICAgdGhpcy5oYXNBdXRvQXV0byA9IHRoaXMuaGFzU3RhckF1dG8gPSB0aGlzLmhhc0F1dG9TdGFyID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRTaGFwZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBjcyA9IGNoaWxkU2hhcGVzW2ldO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5oYXNBdXRvQXV0byA9IHRoaXMuaGFzQXV0b0F1dG8gfHwgKGNzLmF1dG9Sb3cgJiYgY3MuYXV0b0NvbCAmJiAhY3Muc3RhclJvdyAmJiAhY3Muc3RhckNvbCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmhhc1N0YXJBdXRvID0gdGhpcy5oYXNTdGFyQXV0byB8fCAoY3Muc3RhclJvdyAmJiBjcy5hdXRvQ29sKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuaGFzQXV0b1N0YXIgPSB0aGlzLmhhc0F1dG9TdGFyIHx8IChjcy5hdXRvUm93ICYmIGNzLnN0YXJDb2wpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwibW9kdWxlIG1pbmVydmEuY29udHJvbHMucGFuZWwucHJvY2Vzc3VwIHtcclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUlucHV0IGV4dGVuZHMgY29yZS5wcm9jZXNzdXAuSUlucHV0IHtcclxuICAgICAgICBiYWNrZ3JvdW5kOiBJQnJ1c2g7XHJcbiAgICB9XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElTdGF0ZSBleHRlbmRzIGNvcmUucHJvY2Vzc3VwLklTdGF0ZSB7XHJcbiAgICB9XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElPdXRwdXQgZXh0ZW5kcyBjb3JlLnByb2Nlc3N1cC5JT3V0cHV0IHtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgY2xhc3MgUGFuZWxQcm9jZXNzVXBQaXBlRGVmIGV4dGVuZHMgY29yZS5wcm9jZXNzdXAuUHJvY2Vzc1VwUGlwZURlZiB7XHJcbiAgICAgICAgY29uc3RydWN0b3IgKCkge1xyXG4gICAgICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgICAgICB0aGlzLmFkZFRhcGluQmVmb3JlKCdjYWxjRXh0ZW50cycsICdwcmVDYWxjRXh0ZW50cycsIHRhcGlucy5wcmVDYWxjRXh0ZW50cyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL3BhbmVsL3Byb2Nlc3N1cC9QYW5lbFByb2Nlc3NVcFBpcGVEZWZcIiAvPlxyXG5cclxubW9kdWxlIG1pbmVydmEuY29udHJvbHMuZ3JpZC5wcm9jZXNzdXAge1xyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJSW5wdXQgZXh0ZW5kcyBwYW5lbC5wcm9jZXNzdXAuSUlucHV0IHtcclxuICAgICAgICBzaG93R3JpZExpbmVzOiBib29sZWFuO1xyXG4gICAgfVxyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJU3RhdGUgZXh0ZW5kcyBwYW5lbC5wcm9jZXNzdXAuSVN0YXRlIHtcclxuICAgIH1cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSU91dHB1dCBleHRlbmRzIHBhbmVsLnByb2Nlc3N1cC5JT3V0cHV0IHtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgY2xhc3MgR3JpZFByb2Nlc3NVcFBpcGVEZWYgZXh0ZW5kcyBwYW5lbC5wcm9jZXNzdXAuUGFuZWxQcm9jZXNzVXBQaXBlRGVmIHtcclxuICAgICAgICBjb25zdHJ1Y3RvciAoKSB7XHJcbiAgICAgICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgICAgIHRoaXMucmVwbGFjZVRhcGluKCdwcmVDYWxjRXh0ZW50cycsIHRhcGlucy5wcmVDYWxjRXh0ZW50cylcclxuICAgICAgICAgICAgICAgIC5yZXBsYWNlVGFwaW4oJ2NhbGNFeHRlbnRzJywgdGFwaW5zLmNhbGNFeHRlbnRzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb250cm9scy5wYW5lbC5yZW5kZXIge1xyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJSW5wdXQgZXh0ZW5kcyBjb3JlLnJlbmRlci5JSW5wdXQsIGNvcmUuaGVscGVycy5JU2l6ZWQge1xyXG4gICAgICAgIGJhY2tncm91bmQ6IElCcnVzaDtcclxuICAgICAgICBleHRlbnRzOiBSZWN0O1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBjbGFzcyBQYW5lbFJlbmRlclBpcGVEZWYgZXh0ZW5kcyBjb3JlLnJlbmRlci5SZW5kZXJQaXBlRGVmIHtcclxuICAgICAgICBjb25zdHJ1Y3RvciAoKSB7XHJcbiAgICAgICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgICAgIHRoaXMucmVwbGFjZVRhcGluKCdkb1JlbmRlcicsIGRvUmVuZGVyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZG9SZW5kZXIgKGlucHV0OiBJSW5wdXQsIHN0YXRlOiBjb3JlLnJlbmRlci5JU3RhdGUsIG91dHB1dDogY29yZS5yZW5kZXIuSU91dHB1dCwgY3R4OiBjb3JlLnJlbmRlci5SZW5kZXJDb250ZXh0LCByZWdpb246IFJlY3QsIHRyZWU6IGNvcmUuSVVwZGF0ZXJUcmVlKTogYm9vbGVhbiB7XHJcbiAgICAgICAgdmFyIGJhY2tncm91bmQgPSBpbnB1dC5iYWNrZ3JvdW5kO1xyXG4gICAgICAgIGlmICghYmFja2dyb3VuZCB8fCBiYWNrZ3JvdW5kLmlzVHJhbnNwYXJlbnQoKSlcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgdmFyIGV4dGVudHMgPSBpbnB1dC5leHRlbnRzO1xyXG4gICAgICAgIGlmIChSZWN0LmlzRW1wdHkoZXh0ZW50cykpXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG5cclxuICAgICAgICBjdHguc2F2ZSgpO1xyXG4gICAgICAgIGNvcmUuaGVscGVycy5yZW5kZXJMYXlvdXRDbGlwKGN0eCwgaW5wdXQsIHRyZWUpO1xyXG5cclxuICAgICAgICB2YXIgcmF3ID0gY3R4LnJhdztcclxuICAgICAgICByYXcuYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgcmF3LnJlY3QoZXh0ZW50cy54LCBleHRlbnRzLnksIGV4dGVudHMud2lkdGgsIGV4dGVudHMuaGVpZ2h0KTtcclxuICAgICAgICBjdHguZmlsbEV4KGJhY2tncm91bmQsIGV4dGVudHMpO1xyXG5cclxuICAgICAgICBjdHgucmVzdG9yZSgpO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG59IiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL3BhbmVsL3JlbmRlci9QYW5lbFJlbmRlclBpcGVEZWZcIiAvPlxyXG5cclxubW9kdWxlIG1pbmVydmEuY29udHJvbHMuZ3JpZC5yZW5kZXIge1xyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJSW5wdXQgZXh0ZW5kcyBwYW5lbC5yZW5kZXIuSUlucHV0IHtcclxuICAgICAgICBhY3R1YWxXaWR0aDogbnVtYmVyO1xyXG4gICAgICAgIGFjdHVhbEhlaWdodDogbnVtYmVyO1xyXG4gICAgICAgIHNob3dHcmlkTGluZXM6IGJvb2xlYW47XHJcbiAgICAgICAgY29sdW1uRGVmaW5pdGlvbnM6IElDb2x1bW5EZWZpbml0aW9uW107XHJcbiAgICAgICAgcm93RGVmaW5pdGlvbnM6IElSb3dEZWZpbml0aW9uW107XHJcbiAgICB9XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElTdGF0ZSBleHRlbmRzIGNvcmUucmVuZGVyLklTdGF0ZSB7XHJcbiAgICAgICAgZnJhbWV3b3JrOiBTaXplO1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBjbGFzcyBHcmlkUmVuZGVyUGlwZURlZiBleHRlbmRzIHBhbmVsLnJlbmRlci5QYW5lbFJlbmRlclBpcGVEZWYge1xyXG4gICAgICAgIGNvbnN0cnVjdG9yICgpIHtcclxuICAgICAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICAgICAgdGhpcy5hZGRUYXBpbkFmdGVyKCdkb1JlbmRlcicsICdyZW5kZXJHcmlkTGluZXMnLCB0YXBpbnMucmVuZGVyR3JpZExpbmVzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNyZWF0ZVN0YXRlKCkge1xyXG4gICAgICAgICAgICB2YXIgc3RhdGUgPSA8SVN0YXRlPnN1cGVyLmNyZWF0ZVN0YXRlKCk7XHJcbiAgICAgICAgICAgIHN0YXRlLmZyYW1ld29yayA9IG5ldyBTaXplKCk7XHJcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IG1vZHVsZSB0YXBpbnMge1xyXG4gICAgICAgIGV4cG9ydCBmdW5jdGlvbiByZW5kZXJHcmlkTGluZXMgKGlucHV0OiBJSW5wdXQsIHN0YXRlOiBJU3RhdGUsIG91dHB1dDogY29yZS5yZW5kZXIuSU91dHB1dCwgY3R4OiBjb3JlLnJlbmRlci5SZW5kZXJDb250ZXh0LCByZWdpb246IFJlY3QsIHRyZWU6IGNvcmUuSVVwZGF0ZXJUcmVlKTogYm9vbGVhbiB7XHJcbiAgICAgICAgICAgIGlmICghaW5wdXQuc2hvd0dyaWRMaW5lcylcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG5cclxuICAgICAgICAgICAgdmFyIGZyYW1ld29yayA9IHN0YXRlLmZyYW1ld29yaztcclxuICAgICAgICAgICAgZnJhbWV3b3JrLndpZHRoID0gaW5wdXQuYWN0dWFsV2lkdGg7XHJcbiAgICAgICAgICAgIGZyYW1ld29yay5oZWlnaHQgPSBpbnB1dC5hY3R1YWxIZWlnaHQ7XHJcbiAgICAgICAgICAgIGNvcmUuaGVscGVycy5jb2VyY2VTaXplKGZyYW1ld29yaywgaW5wdXQpO1xyXG5cclxuICAgICAgICAgICAgdmFyIHJhdyA9IGN0eC5yYXc7XHJcbiAgICAgICAgICAgIHJhdy5zYXZlKCk7XHJcblxyXG4gICAgICAgICAgICBmb3IgKHZhciBjb2xzID0gaW5wdXQuY29sdW1uRGVmaW5pdGlvbnMsIGkgPSAwLCB4ID0gMDsgaSA8IGNvbHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHggKz0gY29sc1tpXS5BY3R1YWxXaWR0aDtcclxuICAgICAgICAgICAgICAgIHJhdy5iZWdpblBhdGgoKTtcclxuICAgICAgICAgICAgICAgIHJhdy5zZXRMaW5lRGFzaChbNV0pO1xyXG4gICAgICAgICAgICAgICAgcmF3Lm1vdmVUbyh4LCAwKTtcclxuICAgICAgICAgICAgICAgIHJhdy5saW5lVG8oeCwgZnJhbWV3b3JrLmhlaWdodCk7XHJcbiAgICAgICAgICAgICAgICByYXcuc3Ryb2tlKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZvciAodmFyIHJvd3MgPSBpbnB1dC5yb3dEZWZpbml0aW9ucywgaSA9IDAsIHkgPSAwOyBpIDwgcm93cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgeSArPSByb3dzW2ldLkFjdHVhbEhlaWdodDtcclxuICAgICAgICAgICAgICAgIHJhdy5iZWdpblBhdGgoKTtcclxuICAgICAgICAgICAgICAgIHJhdy5zZXRMaW5lRGFzaChbNV0pO1xyXG4gICAgICAgICAgICAgICAgcmF3Lm1vdmVUbygwLCB5KTtcclxuICAgICAgICAgICAgICAgIHJhdy5saW5lVG8oZnJhbWV3b3JrLndpZHRoLCB5KTtcclxuICAgICAgICAgICAgICAgIHJhdy5zdHJva2UoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmF3LnJlc3RvcmUoKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvbnRyb2xzLmltYWdlLmFycmFuZ2Uge1xyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJSW5wdXQgZXh0ZW5kcyBjb3JlLmFycmFuZ2UuSUlucHV0IHtcclxuICAgICAgICBzb3VyY2U6IElJbWFnZVNvdXJjZTtcclxuICAgICAgICBzdHJldGNoOiBTdHJldGNoO1xyXG4gICAgfVxyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJU3RhdGUgZXh0ZW5kcyBjb3JlLmFycmFuZ2UuSVN0YXRlIHtcclxuICAgICAgICBpbWFnZUJvdW5kczogUmVjdDtcclxuICAgICAgICBzdHJldGNoWDogbnVtYmVyO1xyXG4gICAgICAgIHN0cmV0Y2hZOiBudW1iZXI7XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGNsYXNzIEltYWdlQXJyYW5nZVBpcGVEZWYgZXh0ZW5kcyBjb3JlLmFycmFuZ2UuQXJyYW5nZVBpcGVEZWYge1xyXG4gICAgICAgIGNvbnN0cnVjdG9yICgpIHtcclxuICAgICAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICAgICAgdGhpcy5hZGRUYXBpbkFmdGVyKCdpbnZhbGlkYXRlRnV0dXJlJywgJ2ludmFsaWRhdGVNZXRyaWNzJywgdGFwaW5zLmludmFsaWRhdGVNZXRyaWNzKVxyXG4gICAgICAgICAgICAgICAgLmFkZFRhcGluQmVmb3JlKCdkb092ZXJyaWRlJywgJ2NhbGNJbWFnZUJvdW5kcycsIHRhcGlucy5jYWxjSW1hZ2VCb3VuZHMpXHJcbiAgICAgICAgICAgICAgICAuYWRkVGFwaW5CZWZvcmUoJ2RvT3ZlcnJpZGUnLCAnY2FsY1N0cmV0Y2gnLCB0YXBpbnMuY2FsY1N0cmV0Y2gpXHJcbiAgICAgICAgICAgICAgICAucmVwbGFjZVRhcGluKCdkb092ZXJyaWRlJywgdGFwaW5zLmRvT3ZlcnJpZGUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY3JlYXRlU3RhdGUgKCkge1xyXG4gICAgICAgICAgICB2YXIgc3RhdGUgPSA8SVN0YXRlPnN1cGVyLmNyZWF0ZVN0YXRlKCk7XHJcbiAgICAgICAgICAgIHN0YXRlLmltYWdlQm91bmRzID0gbmV3IFJlY3QoKTtcclxuICAgICAgICAgICAgc3RhdGUuc3RyZXRjaFggPSAwO1xyXG4gICAgICAgICAgICBzdGF0ZS5zdHJldGNoWSA9IDA7XHJcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwibW9kdWxlIG1pbmVydmEuY29udHJvbHMuaW1hZ2UuaGl0dGVzdCB7XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElIaXRUZXN0RGF0YSBleHRlbmRzIGNvcmUuaGl0dGVzdC5JSGl0VGVzdERhdGEge1xyXG4gICAgICAgIGFzc2V0czogSUltYWdlVXBkYXRlckFzc2V0cztcclxuICAgICAgICBpbWdSZWN0OiBSZWN0O1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBjbGFzcyBJbWFnZUhpdFRlc3RQaXBlRGVmIGV4dGVuZHMgY29yZS5oaXR0ZXN0LkhpdFRlc3RQaXBlRGVmIHtcclxuICAgICAgICBjb25zdHJ1Y3RvciAoKSB7XHJcbiAgICAgICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgICAgIHRoaXMucmVwbGFjZVRhcGluKCdpbnNpZGVDaGlsZHJlbicsIHRhcGlucy5pbnNpZGVDaGlsZHJlbilcclxuICAgICAgICAgICAgICAgIC5yZXBsYWNlVGFwaW4oJ2NhbkhpdEluc2lkZScsIHRhcGlucy5jYW5IaXRJbnNpZGUpXHJcbiAgICAgICAgICAgICAgICAuYWRkVGFwaW5BZnRlcignaW5zaWRlT2JqZWN0JywgJ2luc2lkZVN0cmV0Y2gnLCB0YXBpbnMuaW5zaWRlU3RyZXRjaCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcmVwYXJlIChkYXRhOiBJSGl0VGVzdERhdGEpIHtcclxuICAgICAgICAgICAgZGF0YS5pbWdSZWN0ID0gZGF0YS5pbWdSZWN0IHx8IG5ldyBSZWN0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwibW9kdWxlIG1pbmVydmEuY29udHJvbHMuaW1hZ2UubWVhc3VyZSB7XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElJbnB1dCBleHRlbmRzIGNvcmUubWVhc3VyZS5JSW5wdXQge1xyXG4gICAgICAgIHNvdXJjZTogSUltYWdlU291cmNlO1xyXG4gICAgICAgIHN0cmV0Y2g6IFN0cmV0Y2g7XHJcbiAgICB9XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElTdGF0ZSBleHRlbmRzIGNvcmUubWVhc3VyZS5JU3RhdGUge1xyXG4gICAgICAgIGltYWdlQm91bmRzOiBSZWN0O1xyXG4gICAgICAgIHN0cmV0Y2hYOiBudW1iZXI7XHJcbiAgICAgICAgc3RyZXRjaFk6IG51bWJlcjtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgY2xhc3MgSW1hZ2VNZWFzdXJlUGlwZURlZiBleHRlbmRzIGNvcmUubWVhc3VyZS5NZWFzdXJlUGlwZURlZiB7XHJcbiAgICAgICAgY29uc3RydWN0b3IgKCkge1xyXG4gICAgICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgICAgICB0aGlzLmFkZFRhcGluQmVmb3JlKCdkb092ZXJyaWRlJywgJ2NhbGNJbWFnZUJvdW5kcycsIHRhcGlucy5jYWxjSW1hZ2VCb3VuZHMpXHJcbiAgICAgICAgICAgICAgICAuYWRkVGFwaW5CZWZvcmUoJ2RvT3ZlcnJpZGUnLCAnY2FsY1N0cmV0Y2gnLCB0YXBpbnMuY2FsY1N0cmV0Y2gpXHJcbiAgICAgICAgICAgICAgICAucmVwbGFjZVRhcGluKCdkb092ZXJyaWRlJywgdGFwaW5zLmRvT3ZlcnJpZGUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY3JlYXRlU3RhdGUgKCkge1xyXG4gICAgICAgICAgICB2YXIgc3RhdGUgPSA8SVN0YXRlPnN1cGVyLmNyZWF0ZVN0YXRlKCk7XHJcbiAgICAgICAgICAgIHN0YXRlLmltYWdlQm91bmRzID0gbmV3IFJlY3QoKTtcclxuICAgICAgICAgICAgc3RhdGUuc3RyZXRjaFggPSAwO1xyXG4gICAgICAgICAgICBzdGF0ZS5zdHJldGNoWSA9IDA7XHJcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwibW9kdWxlIG1pbmVydmEuY29udHJvbHMuaW1hZ2UucHJvY2Vzc2Rvd24ge1xyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJSW5wdXQgZXh0ZW5kcyBjb3JlLnByb2Nlc3Nkb3duLklJbnB1dCwgY29yZS5oZWxwZXJzLklTaXplZCB7XHJcbiAgICAgICAgc291cmNlOiBJSW1hZ2VTb3VyY2U7XHJcbiAgICAgICAgc3RyZXRjaDogU3RyZXRjaDtcclxuICAgICAgICBpbWdYZm9ybTogbnVtYmVyW107XHJcbiAgICAgICAgb3ZlcmxhcDogUmVjdE92ZXJsYXA7XHJcbiAgICAgICAgcmVuZGVyU2l6ZTogU2l6ZTtcclxuICAgIH1cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSVN0YXRlIGV4dGVuZHMgY29yZS5wcm9jZXNzZG93bi5JU3RhdGUge1xyXG4gICAgICAgIGltZ1JlY3Q6IFJlY3Q7XHJcbiAgICAgICAgcGFpbnRSZWN0OiBSZWN0O1xyXG4gICAgICAgIGNhbGNJbWFnZU1ldHJpY3M6IGJvb2xlYW47XHJcbiAgICAgICAgaW1nQWRqdXN0OiBib29sZWFuOyAvL1RPRE86IFRoaXMgbWF5IGJlIG92ZXJraWxsLCByZXF1aXJlcyBtb3JlIGludmVzdGlnYXRpb25cclxuICAgIH1cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSU91dHB1dCBleHRlbmRzIGNvcmUucHJvY2Vzc2Rvd24uSU91dHB1dCB7XHJcbiAgICAgICAgaW1nWGZvcm06IG51bWJlcltdO1xyXG4gICAgICAgIG92ZXJsYXA6IFJlY3RPdmVybGFwO1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBjbGFzcyBJbWFnZVByb2Nlc3NEb3duUGlwZURlZiBleHRlbmRzIGNvcmUucHJvY2Vzc2Rvd24uUHJvY2Vzc0Rvd25QaXBlRGVmIHtcclxuICAgICAgICBjb25zdHJ1Y3RvciAoKSB7XHJcbiAgICAgICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgICAgIC8vVE9ETzogU2hvdWxkIHdlIG1lcmdlIHRoZSBvdmVybGFwIGludG8gdGhlIGxheW91dCBjbGlwIGZvciByZW5kZXI/XHJcbiAgICAgICAgICAgIHRoaXMuYWRkVGFwaW5CZWZvcmUoJ3Byb2Nlc3NMYXlvdXRDbGlwJywgJ2NoZWNrTmVlZEltYWdlTWV0cmljcycsIHRhcGlucy5jaGVja05lZWRJbWFnZU1ldHJpY3MpXHJcbiAgICAgICAgICAgICAgICAuYWRkVGFwaW5BZnRlcignY2hlY2tOZWVkSW1hZ2VNZXRyaWNzJywgJ3ByZXBhcmVJbWFnZU1ldHJpY3MnLCB0YXBpbnMucHJlcGFyZUltYWdlTWV0cmljcylcclxuICAgICAgICAgICAgICAgIC5hZGRUYXBpbkFmdGVyKCdwcmVwYXJlSW1hZ2VNZXRyaWNzJywgJ2NhbGNJbWFnZVRyYW5zZm9ybScsIHRhcGlucy5jYWxjSW1hZ2VUcmFuc2Zvcm0pXHJcbiAgICAgICAgICAgICAgICAuYWRkVGFwaW5BZnRlcignY2FsY0ltYWdlVHJhbnNmb3JtJywgJ2NhbGNPdmVybGFwJywgdGFwaW5zLmNhbGNPdmVybGFwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNyZWF0ZVN0YXRlICgpIHtcclxuICAgICAgICAgICAgdmFyIHN0YXRlID0gPElTdGF0ZT5zdXBlci5jcmVhdGVTdGF0ZSgpO1xyXG4gICAgICAgICAgICBzdGF0ZS5pbWdSZWN0ID0gbmV3IFJlY3QoKTtcclxuICAgICAgICAgICAgc3RhdGUucGFpbnRSZWN0ID0gbmV3IFJlY3QoKTtcclxuICAgICAgICAgICAgc3RhdGUuY2FsY0ltYWdlTWV0cmljcyA9IGZhbHNlO1xyXG4gICAgICAgICAgICBzdGF0ZS5pbWdBZGp1c3QgPSBmYWxzZTtcclxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY3JlYXRlT3V0cHV0ICgpIHtcclxuICAgICAgICAgICAgdmFyIG91dHB1dCA9IDxJT3V0cHV0PnN1cGVyLmNyZWF0ZU91dHB1dCgpO1xyXG4gICAgICAgICAgICBvdXRwdXQuaW1nWGZvcm0gPSBtYXQzLmlkZW50aXR5KCk7XHJcbiAgICAgICAgICAgIG91dHB1dC5vdmVybGFwID0gUmVjdE92ZXJsYXAuSW47XHJcbiAgICAgICAgICAgIHJldHVybiBvdXRwdXQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcmVwYXJlIChpbnB1dDogSUlucHV0LCBzdGF0ZTogSVN0YXRlLCBvdXRwdXQ6IElPdXRwdXQsIHZwaW5wdXQ6IElJbnB1dCwgdHJlZTogY29yZS5JVXBkYXRlclRyZWUpIHtcclxuICAgICAgICAgICAgc3VwZXIucHJlcGFyZShpbnB1dCwgc3RhdGUsIG91dHB1dCwgdnBpbnB1dCwgdHJlZSk7XHJcbiAgICAgICAgICAgIG91dHB1dC5vdmVybGFwID0gaW5wdXQub3ZlcmxhcDtcclxuICAgICAgICAgICAgbWF0My5jb3B5VG8oaW5wdXQuaW1nWGZvcm0sIG91dHB1dC5pbWdYZm9ybSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmbHVzaCAoaW5wdXQ6IElJbnB1dCwgc3RhdGU6IElTdGF0ZSwgb3V0cHV0OiBJT3V0cHV0LCB2cGlucHV0OiBJSW5wdXQsIHRyZWU6IGNvcmUuSVVwZGF0ZXJUcmVlKSB7XHJcbiAgICAgICAgICAgIHN1cGVyLmZsdXNoKGlucHV0LCBzdGF0ZSwgb3V0cHV0LCB2cGlucHV0LCB0cmVlKTtcclxuICAgICAgICAgICAgaW5wdXQub3ZlcmxhcCA9IG91dHB1dC5vdmVybGFwO1xyXG4gICAgICAgICAgICBtYXQzLmNvcHlUbyhvdXRwdXQuaW1nWGZvcm0sIGlucHV0LmltZ1hmb3JtKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb250cm9scy5pbWFnZS5yZW5kZXIge1xyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJSW5wdXQgZXh0ZW5kcyBjb3JlLnJlbmRlci5JSW5wdXQge1xyXG4gICAgICAgIHNvdXJjZTogSUltYWdlU291cmNlO1xyXG4gICAgICAgIGltZ1hmb3JtOiBudW1iZXJbXTtcclxuICAgICAgICBvdmVybGFwOiBSZWN0T3ZlcmxhcDtcclxuICAgIH1cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSVN0YXRlIGV4dGVuZHMgY29yZS5yZW5kZXIuSVN0YXRlIHtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgY2xhc3MgSW1hZ2VSZW5kZXJQaXBlRGVmIGV4dGVuZHMgY29yZS5yZW5kZXIuUmVuZGVyUGlwZURlZiB7XHJcbiAgICAgICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgICAgIHRoaXMucmVwbGFjZVRhcGluKCdkb1JlbmRlcicsIHRhcGlucy5kb1JlbmRlcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwibW9kdWxlIG1pbmVydmEuY29udHJvbHMub3ZlcmxheS5oaXR0ZXN0IHtcclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUhpdFRlc3REYXRhIGV4dGVuZHMgY29yZS5oaXR0ZXN0LklIaXRUZXN0RGF0YSB7XHJcbiAgICAgICAgYXNzZXRzOiBJT3ZlcmxheVVwZGF0ZXJBc3NldHM7XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGNsYXNzIE92ZXJsYXlIaXRUZXN0UGlwZURlZiBleHRlbmRzIGNvcmUuaGl0dGVzdC5IaXRUZXN0UGlwZURlZiB7XHJcbiAgICAgICAgY29uc3RydWN0b3IgKCkge1xyXG4gICAgICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgICAgICB0aGlzLmFkZFRhcGluQmVmb3JlKCdjYW5IaXQnLCAnc2hvdWxkU2tpcCcsIHRhcGlucy5zaG91bGRTa2lwKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IG1vZHVsZSB0YXBpbnMge1xyXG4gICAgICAgIGV4cG9ydCBmdW5jdGlvbiBzaG91bGRTa2lwIChkYXRhOiBJSGl0VGVzdERhdGEsIHBvczogUG9pbnQsIGhpdExpc3Q6IGNvcmUuVXBkYXRlcltdLCBjdHg6IGNvcmUucmVuZGVyLlJlbmRlckNvbnRleHQpOiBib29sZWFuIHtcclxuICAgICAgICAgICAgcmV0dXJuICEhZGF0YS5hc3NldHMuaXNWaXNpYmxlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvbnRyb2xzLm92ZXJsYXkucHJvY2Vzc3VwIHtcclxuICAgIGV4cG9ydCBjbGFzcyBPdmVybGF5UHJvY2Vzc1VwUGlwZURlZiBleHRlbmRzIGNvcmUucHJvY2Vzc3VwLlByb2Nlc3NVcFBpcGVEZWYge1xyXG4gICAgICAgIGNvbnN0cnVjdG9yICgpIHtcclxuICAgICAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICAgICAgdGhpcy5yZW1vdmVUYXBpbignY2FsY0FjdHVhbFNpemUnKVxyXG4gICAgICAgICAgICAgICAgLnJlbW92ZVRhcGluKCdjYWxjRXh0ZW50cycpXHJcbiAgICAgICAgICAgICAgICAucmVtb3ZlVGFwaW4oJ2NhbGNQYWludEJvdW5kcycpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvbnRyb2xzLnBhbmVsLmhpdHRlc3Qge1xyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJSGl0VGVzdERhdGEgZXh0ZW5kcyBjb3JlLmhpdHRlc3QuSUhpdFRlc3REYXRhIHtcclxuICAgICAgICBhc3NldHM6IElQYW5lbFVwZGF0ZXJBc3NldHM7XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGNsYXNzIFBhbmVsSGl0VGVzdFBpcGVEZWYgZXh0ZW5kcyBjb3JlLmhpdHRlc3QuSGl0VGVzdFBpcGVEZWYge1xyXG4gICAgICAgIGNvbnN0cnVjdG9yICgpIHtcclxuICAgICAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICAgICAgdGhpcy5yZXBsYWNlVGFwaW4oJ2NhbkhpdEluc2lkZScsIHRhcGlucy5jYW5IaXRJbnNpZGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgbW9kdWxlIHRhcGlucyB7XHJcbiAgICAgICAgZXhwb3J0IGZ1bmN0aW9uIGNhbkhpdEluc2lkZSAoZGF0YTogSUhpdFRlc3REYXRhLCBwb3M6IFBvaW50LCBoaXRMaXN0OiBjb3JlLlVwZGF0ZXJbXSwgY3R4OiBjb3JlLnJlbmRlci5SZW5kZXJDb250ZXh0KTogYm9vbGVhbiB7XHJcbiAgICAgICAgICAgIGlmIChkYXRhLmhpdENoaWxkcmVuKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcblxyXG4gICAgICAgICAgICBpZiAoIWRhdGEuYXNzZXRzLmJhY2tncm91bmQpIHtcclxuICAgICAgICAgICAgICAgIGhpdExpc3Quc2hpZnQoKTtcclxuICAgICAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwibW9kdWxlIG1pbmVydmEuY29udHJvbHMucG9wdXAuaGl0dGVzdCB7XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElIaXRUZXN0RGF0YSBleHRlbmRzIGNvcmUuaGl0dGVzdC5JSGl0VGVzdERhdGEge1xyXG4gICAgICAgIGFzc2V0czogSVBvcHVwVXBkYXRlckFzc2V0cztcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgY2xhc3MgUG9wdXBIaXRUZXN0UGlwZURlZiBleHRlbmRzIGNvcmUuaGl0dGVzdC5IaXRUZXN0UGlwZURlZiB7XHJcbiAgICAgICAgY29uc3RydWN0b3IgKCkge1xyXG4gICAgICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgICAgICB0aGlzLmFkZFRhcGluQmVmb3JlKCdjYW5IaXQnLCAnc2hvdWxkU2tpcCcsIHRhcGlucy5zaG91bGRTa2lwKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IG1vZHVsZSB0YXBpbnMge1xyXG4gICAgICAgIGV4cG9ydCBmdW5jdGlvbiBzaG91bGRTa2lwIChkYXRhOiBJSGl0VGVzdERhdGEsIHBvczogUG9pbnQsIGhpdExpc3Q6IGNvcmUuVXBkYXRlcltdLCBjdHg6IGNvcmUucmVuZGVyLlJlbmRlckNvbnRleHQpOiBib29sZWFuIHtcclxuICAgICAgICAgICAgcmV0dXJuICEhZGF0YS5hc3NldHMuaXNWaXNpYmxlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvbnRyb2xzLnBvcHVwLnByb2Nlc3Nkb3duIHtcclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUlucHV0IGV4dGVuZHMgY29yZS5wcm9jZXNzZG93bi5JSW5wdXQge1xyXG4gICAgICAgIGhvcml6b250YWxPZmZzZXQ6IG51bWJlcjtcclxuICAgICAgICB2ZXJ0aWNhbE9mZnNldDogbnVtYmVyO1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBjbGFzcyBQb3B1cFByb2Nlc3NEb3duUGlwZURlZiBleHRlbmRzIGNvcmUucHJvY2Vzc2Rvd24uUHJvY2Vzc0Rvd25QaXBlRGVmIHtcclxuICAgICAgICBjb25zdHJ1Y3RvciAoKSB7XHJcbiAgICAgICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkVGFwaW5CZWZvcmUoJ3Byb2Nlc3NYZm9ybScsICdwcmVQcm9jZXNzWGZvcm0nLCB0YXBpbnMucHJlUHJvY2Vzc1hmb3JtKVxyXG4gICAgICAgICAgICAgICAgLmFkZFRhcGluQWZ0ZXIoJ3Byb2Nlc3NYZm9ybScsICdwb3N0UHJvY2Vzc1hmb3JtJywgdGFwaW5zLnBvc3RQcm9jZXNzWGZvcm0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvbnRyb2xzLnBvcHVwLnByb2Nlc3N1cCB7XHJcbiAgICBleHBvcnQgY2xhc3MgUG9wdXBQcm9jZXNzVXBQaXBlRGVmIGV4dGVuZHMgY29yZS5wcm9jZXNzdXAuUHJvY2Vzc1VwUGlwZURlZiB7XHJcbiAgICAgICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlVGFwaW4oJ2NhbGNBY3R1YWxTaXplJylcclxuICAgICAgICAgICAgICAgIC5yZW1vdmVUYXBpbignY2FsY0V4dGVudHMnKVxyXG4gICAgICAgICAgICAgICAgLnJlbW92ZVRhcGluKCdjYWxjUGFpbnRCb3VuZHMnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb250cm9scy5zY3JvbGxjb250ZW50cHJlc2VudGVyLmFycmFuZ2Uge1xyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJSW5wdXQgZXh0ZW5kcyBjb3JlLmFycmFuZ2UuSUlucHV0IHtcclxuICAgICAgICBzY3JvbGxEYXRhOiBJU2Nyb2xsRGF0YTtcclxuICAgICAgICBkZXNpcmVkU2l6ZTogU2l6ZTtcclxuICAgICAgICBpbnRlcm5hbENsaXA6IFJlY3Q7XHJcbiAgICB9XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElTdGF0ZSBleHRlbmRzIGNvcmUuYXJyYW5nZS5JU3RhdGUge1xyXG4gICAgfVxyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJT3V0cHV0IGV4dGVuZHMgY29yZS5hcnJhbmdlLklPdXRwdXQge1xyXG4gICAgICAgIGludGVybmFsQ2xpcDogUmVjdDtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgY2xhc3MgU2Nyb2xsQ29udGVudFByZXNlbnRlckFycmFuZ2VQaXBlRGVmIGV4dGVuZHMgY29yZS5hcnJhbmdlLkFycmFuZ2VQaXBlRGVmIHtcclxuICAgICAgICBjb25zdHJ1Y3RvciAoKSB7XHJcbiAgICAgICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgICAgIHRoaXMucmVwbGFjZVRhcGluKCdkb092ZXJyaWRlJywgdGFwaW5zLmRvT3ZlcnJpZGUpXHJcbiAgICAgICAgICAgICAgICAuYWRkVGFwaW5BZnRlcignY29tcGxldGVPdmVycmlkZScsICd1cGRhdGVDbGlwJywgdGFwaW5zLnVwZGF0ZUNsaXApXHJcbiAgICAgICAgICAgICAgICAuYWRkVGFwaW5BZnRlcigndXBkYXRlQ2xpcCcsICd1cGRhdGVFeHRlbnRzJywgdGFwaW5zLnVwZGF0ZUV4dGVudHMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY3JlYXRlT3V0cHV0ICgpOiBJT3V0cHV0IHtcclxuICAgICAgICAgICAgdmFyIG91dHB1dCA9IDxJT3V0cHV0PnN1cGVyLmNyZWF0ZU91dHB1dCgpO1xyXG4gICAgICAgICAgICBvdXRwdXQuaW50ZXJuYWxDbGlwID0gbmV3IFJlY3QoKTtcclxuICAgICAgICAgICAgcmV0dXJuIG91dHB1dDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByZXBhcmUgKGlucHV0OiBJSW5wdXQsIHN0YXRlOiBJU3RhdGUsIG91dHB1dDogSU91dHB1dCkge1xyXG4gICAgICAgICAgICBSZWN0LmNvcHlUbyhpbnB1dC5pbnRlcm5hbENsaXAsIG91dHB1dC5pbnRlcm5hbENsaXApO1xyXG4gICAgICAgICAgICBzdXBlci5wcmVwYXJlKGlucHV0LCBzdGF0ZSwgb3V0cHV0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZsdXNoIChpbnB1dDogSUlucHV0LCBzdGF0ZTogSVN0YXRlLCBvdXRwdXQ6IElPdXRwdXQpIHtcclxuICAgICAgICAgICAgc3VwZXIuZmx1c2goaW5wdXQsIHN0YXRlLCBvdXRwdXQpO1xyXG4gICAgICAgICAgICBSZWN0LmNvcHlUbyhvdXRwdXQuaW50ZXJuYWxDbGlwLCBpbnB1dC5pbnRlcm5hbENsaXApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvbnRyb2xzLnNjcm9sbGNvbnRlbnRwcmVzZW50ZXIubWVhc3VyZSB7XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElJbnB1dCBleHRlbmRzIGNvcmUubWVhc3VyZS5JSW5wdXQge1xyXG4gICAgICAgIHNjcm9sbERhdGE6IElTY3JvbGxEYXRhO1xyXG4gICAgfVxyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJU3RhdGUgZXh0ZW5kcyBjb3JlLm1lYXN1cmUuSVN0YXRlIHtcclxuICAgICAgICBpZGVhbFNpemU6IFNpemU7XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGNsYXNzIFNjcm9sbENvbnRlbnRQcmVzZW50ZXJNZWFzdXJlUGlwZURlZiBleHRlbmRzIGNvcmUubWVhc3VyZS5NZWFzdXJlUGlwZURlZiB7XHJcbiAgICAgICAgY29uc3RydWN0b3IgKCkge1xyXG4gICAgICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgICAgICB0aGlzLnJlcGxhY2VUYXBpbignZG9PdmVycmlkZScsIHRhcGlucy5kb092ZXJyaWRlKVxyXG4gICAgICAgICAgICAgICAgLmFkZFRhcGluQWZ0ZXIoJ2RvT3ZlcnJpZGUnLCAndXBkYXRlRXh0ZW50cycsIHRhcGlucy51cGRhdGVFeHRlbnRzKVxyXG4gICAgICAgICAgICAgICAgLmFkZFRhcGluQWZ0ZXIoJ3VwZGF0ZUV4dGVudHMnLCAnZmluaXNoRG9PdmVycmlkZScsIHRhcGlucy5maW5pc2hEb092ZXJyaWRlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNyZWF0ZVN0YXRlICgpOiBJU3RhdGUge1xyXG4gICAgICAgICAgICB2YXIgc3RhdGUgPSA8SVN0YXRlPnN1cGVyLmNyZWF0ZVN0YXRlKCk7XHJcbiAgICAgICAgICAgIHN0YXRlLmlkZWFsU2l6ZSA9IG5ldyBTaXplKCk7XHJcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb250cm9scy5zY3JvbGxjb250ZW50cHJlc2VudGVyLnJlbmRlciB7XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElJbnB1dCBleHRlbmRzIGNvcmUucmVuZGVyLklJbnB1dCB7XHJcbiAgICAgICAgaW50ZXJuYWxDbGlwOiBSZWN0O1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBjbGFzcyBTY3JvbGxDb250ZW50UHJlc2VudGVyUmVuZGVyUGlwZURlZiBleHRlbmRzIGNvcmUucmVuZGVyLlJlbmRlclBpcGVEZWYge1xyXG4gICAgICAgIGNvbnN0cnVjdG9yICgpIHtcclxuICAgICAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICAgICAgdGhpcy5hZGRUYXBpbkFmdGVyKCdhcHBseUNsaXAnLCAnYXBwbHlJbnRlcm5hbENsaXAnLCB0YXBpbnMuYXBwbHlJbnRlcm5hbENsaXApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgbW9kdWxlIHRhcGlucyB7XHJcbiAgICAgICAgZXhwb3J0IGZ1bmN0aW9uIGFwcGx5SW50ZXJuYWxDbGlwIChpbnB1dDogSUlucHV0LCBzdGF0ZTogY29yZS5yZW5kZXIuSVN0YXRlLCBvdXRwdXQ6IGNvcmUucmVuZGVyLklPdXRwdXQsIGN0eDogY29yZS5yZW5kZXIuUmVuZGVyQ29udGV4dCwgcmVnaW9uOiBSZWN0LCB0cmVlOiBjb3JlLklVcGRhdGVyVHJlZSk6IGJvb2xlYW4ge1xyXG4gICAgICAgICAgICBpZiAoUmVjdC5pc0VtcHR5KGlucHV0LmludGVybmFsQ2xpcCkpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgY3R4LmNsaXBSZWN0KGlucHV0LmludGVybmFsQ2xpcCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvbnRyb2xzLnN0YWNrcGFuZWwuYXJyYW5nZSB7XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElJbnB1dCBleHRlbmRzIHBhbmVsLmFycmFuZ2UuSUlucHV0IHtcclxuICAgICAgICBvcmllbnRhdGlvbjogT3JpZW50YXRpb247XHJcbiAgICB9XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElTdGF0ZSBleHRlbmRzIHBhbmVsLmFycmFuZ2UuSVN0YXRlIHtcclxuICAgIH1cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSU91dHB1dCBleHRlbmRzIHBhbmVsLmFycmFuZ2UuSU91dHB1dCB7XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGNsYXNzIFN0YWNrUGFuZWxBcnJhbmdlUGlwZURlZiBleHRlbmRzIHBhbmVsLmFycmFuZ2UuUGFuZWxBcnJhbmdlUGlwZURlZiB7XHJcbiAgICAgICAgY29uc3RydWN0b3IgKCkge1xyXG4gICAgICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgICAgICB0aGlzLnJlcGxhY2VUYXBpbignZG9PdmVycmlkZScsIHRhcGlucy5kb092ZXJyaWRlKVxyXG4gICAgICAgICAgICAgICAgLmFkZFRhcGluQWZ0ZXIoJ2RvT3ZlcnJpZGUnLCAnZG9Ib3Jpem9udGFsJywgdGFwaW5zLmRvSG9yaXpvbnRhbClcclxuICAgICAgICAgICAgICAgIC5hZGRUYXBpbkFmdGVyKCdkb092ZXJyaWRlJywgJ2RvVmVydGljYWwnLCB0YXBpbnMuZG9WZXJ0aWNhbCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwibW9kdWxlIG1pbmVydmEuY29udHJvbHMuc3RhY2twYW5lbC5tZWFzdXJlIHtcclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUlucHV0IGV4dGVuZHMgcGFuZWwubWVhc3VyZS5JSW5wdXQge1xyXG4gICAgICAgIG9yaWVudGF0aW9uOiBPcmllbnRhdGlvbjtcclxuICAgIH1cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSVN0YXRlIGV4dGVuZHMgcGFuZWwubWVhc3VyZS5JU3RhdGUge1xyXG4gICAgICAgIGNoaWxkQXZhaWxhYmxlOiBTaXplO1xyXG4gICAgfVxyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJT3V0cHV0IGV4dGVuZHMgcGFuZWwubWVhc3VyZS5JT3V0cHV0IHtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgY2xhc3MgU3RhY2tQYW5lbE1lYXN1cmVQaXBlRGVmIGV4dGVuZHMgcGFuZWwubWVhc3VyZS5QYW5lbE1lYXN1cmVQaXBlRGVmIHtcclxuICAgICAgICBjb25zdHJ1Y3RvciAoKSB7XHJcbiAgICAgICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgICAgIHRoaXMucmVwbGFjZVRhcGluKCdkb092ZXJyaWRlJywgdGFwaW5zLmRvT3ZlcnJpZGUpXHJcbiAgICAgICAgICAgICAgICAuYWRkVGFwaW5BZnRlcignZG9PdmVycmlkZScsICdkb0hvcml6b250YWwnLCB0YXBpbnMuZG9Ib3Jpem9udGFsKVxyXG4gICAgICAgICAgICAgICAgLmFkZFRhcGluQWZ0ZXIoJ2RvT3ZlcnJpZGUnLCAnZG9WZXJ0aWNhbCcsIHRhcGlucy5kb1ZlcnRpY2FsKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNyZWF0ZVN0YXRlICgpOiBJU3RhdGUge1xyXG4gICAgICAgICAgICB2YXIgc3RhdGUgPSA8SVN0YXRlPnN1cGVyLmNyZWF0ZVN0YXRlKCk7XHJcbiAgICAgICAgICAgIHN0YXRlLmNoaWxkQXZhaWxhYmxlID0gbmV3IFNpemUoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvbnRyb2xzLnRleHRibG9jay5hcnJhbmdlIHtcclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUlucHV0IGV4dGVuZHMgY29yZS5hcnJhbmdlLklJbnB1dCwgdGV4dC5JRG9jdW1lbnRDb250ZXh0IHtcclxuICAgICAgICBwYWRkaW5nOiBUaGlja25lc3M7XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGNsYXNzIFRleHRCbG9ja0FycmFuZ2VQaXBlRGVmIGV4dGVuZHMgY29yZS5hcnJhbmdlLkFycmFuZ2VQaXBlRGVmIHtcclxuICAgICAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICAgICAgdGhpcy5yZXBsYWNlVGFwaW4oJ2RvT3ZlcnJpZGUnLCB0YXBpbnMuZG9PdmVycmlkZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBtb2R1bGUgdGFwaW5zIHtcclxuICAgICAgICBleHBvcnQgZnVuY3Rpb24gZG9PdmVycmlkZShpbnB1dDogSUlucHV0LCBzdGF0ZTogY29yZS5hcnJhbmdlLklTdGF0ZSwgb3V0cHV0OiBjb3JlLmFycmFuZ2UuSU91dHB1dCwgdHJlZTogVGV4dEJsb2NrVXBkYXRlclRyZWUsIGZpbmFsUmVjdDogUmVjdCk6IGJvb2xlYW4ge1xyXG4gICAgICAgICAgICB2YXIgZnMgPSBzdGF0ZS5maW5hbFNpemU7XHJcbiAgICAgICAgICAgIHZhciBhcyA9IHN0YXRlLmFycmFuZ2VkU2l6ZTtcclxuXHJcbiAgICAgICAgICAgIFRoaWNrbmVzcy5zaHJpbmtTaXplKGlucHV0LnBhZGRpbmcsIGZzKTtcclxuICAgICAgICAgICAgU2l6ZS5jb3B5VG8odHJlZS5sYXlvdXQoZnMsIGlucHV0KSwgYXMpO1xyXG4gICAgICAgICAgICBhcy53aWR0aCA9IE1hdGgubWF4KGFzLndpZHRoLCBmcy53aWR0aCk7XHJcbiAgICAgICAgICAgIGFzLmhlaWdodCA9IE1hdGgubWF4KGFzLmhlaWdodCwgZnMuaGVpZ2h0KTtcclxuICAgICAgICAgICAgdHJlZS5zZXRBdmFpbGFibGVXaWR0aChmcy53aWR0aCk7XHJcbiAgICAgICAgICAgIFRoaWNrbmVzcy5ncm93U2l6ZShpbnB1dC5wYWRkaW5nLCBhcyk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb250cm9scy50ZXh0YmxvY2suaGl0dGVzdCB7XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElIaXRUZXN0RGF0YSBleHRlbmRzIGNvcmUuaGl0dGVzdC5JSGl0VGVzdERhdGEge1xyXG4gICAgICAgIGFzc2V0czogSVRleHRCbG9ja1VwZGF0ZXJBc3NldHM7XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGNsYXNzIFRleHRCbG9ja0hpdFRlc3RQaXBlRGVmIGV4dGVuZHMgY29yZS5oaXR0ZXN0LkhpdFRlc3RQaXBlRGVmIHtcclxuICAgICAgICBjb25zdHJ1Y3RvciAoKSB7XHJcbiAgICAgICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgICAgIHRoaXMucmVwbGFjZVRhcGluKCdjYW5IaXRJbnNpZGUnLCB0YXBpbnMuY2FuSGl0SW5zaWRlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IG1vZHVsZSB0YXBpbnMge1xyXG4gICAgICAgIGV4cG9ydCBmdW5jdGlvbiBjYW5IaXRJbnNpZGUgKGRhdGE6IElIaXRUZXN0RGF0YSwgcG9zOiBQb2ludCwgaGl0TGlzdDogY29yZS5VcGRhdGVyW10sIGN0eDogY29yZS5yZW5kZXIuUmVuZGVyQ29udGV4dCk6IGJvb2xlYW4ge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb250cm9scy50ZXh0YmxvY2subWVhc3VyZSB7XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElJbnB1dCBleHRlbmRzIGNvcmUubWVhc3VyZS5JSW5wdXQsIHRleHQuSURvY3VtZW50Q29udGV4dCB7XHJcbiAgICAgICAgcGFkZGluZzogVGhpY2tuZXNzO1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBjbGFzcyBUZXh0QmxvY2tNZWFzdXJlUGlwZURlZiBleHRlbmRzIGNvcmUubWVhc3VyZS5NZWFzdXJlUGlwZURlZiB7XHJcbiAgICAgICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgICAgIHRoaXMucmVwbGFjZVRhcGluKCdkb092ZXJyaWRlJywgdGFwaW5zLmRvT3ZlcnJpZGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgbW9kdWxlIHRhcGlucyB7XHJcbiAgICAgICAgZXhwb3J0IGZ1bmN0aW9uIGRvT3ZlcnJpZGUoaW5wdXQ6IElJbnB1dCwgc3RhdGU6IGNvcmUubWVhc3VyZS5JU3RhdGUsIG91dHB1dDogY29yZS5tZWFzdXJlLklPdXRwdXQsIHRyZWU6IFRleHRCbG9ja1VwZGF0ZXJUcmVlLCBhdmFpbGFibGVTaXplOiBTaXplKTogYm9vbGVhbiB7XHJcbiAgICAgICAgICAgIHZhciBkcyA9IG91dHB1dC5kZXNpcmVkU2l6ZTtcclxuXHJcbiAgICAgICAgICAgIFRoaWNrbmVzcy5zaHJpbmtTaXplKGlucHV0LnBhZGRpbmcsIHN0YXRlLmF2YWlsYWJsZVNpemUpO1xyXG4gICAgICAgICAgICB0cmVlLnNldE1heFdpZHRoKHN0YXRlLmF2YWlsYWJsZVNpemUud2lkdGgsIGlucHV0KTtcclxuICAgICAgICAgICAgU2l6ZS5jb3B5VG8odHJlZS5sYXlvdXQoc3RhdGUuYXZhaWxhYmxlU2l6ZSwgaW5wdXQpLCBkcyk7XHJcbiAgICAgICAgICAgIFRoaWNrbmVzcy5ncm93U2l6ZShpbnB1dC5wYWRkaW5nLCBkcyk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb250cm9scy50ZXh0YmxvY2sucHJvY2Vzc3VwIHtcclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUlucHV0IGV4dGVuZHMgY29yZS5wcm9jZXNzdXAuSUlucHV0LCB0ZXh0LklEb2N1bWVudENvbnRleHQge1xyXG4gICAgICAgIHBhZGRpbmc6IFRoaWNrbmVzcztcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgY2xhc3MgVGV4dEJsb2NrUHJvY2Vzc1VwUGlwZURlZiBleHRlbmRzIGNvcmUucHJvY2Vzc3VwLlByb2Nlc3NVcFBpcGVEZWYge1xyXG4gICAgICAgIGNvbnN0cnVjdG9yICgpIHtcclxuICAgICAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICAgICAgdGhpcy5yZXBsYWNlVGFwaW4oJ2NhbGNBY3R1YWxTaXplJywgdGFwaW5zLmNhbGNBY3R1YWxTaXplKVxyXG4gICAgICAgICAgICAgICAgLnJlcGxhY2VUYXBpbignY2FsY0V4dGVudHMnLCB0YXBpbnMuY2FsY0V4dGVudHMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgbW9kdWxlIHRhcGlucyB7XHJcbiAgICAgICAgZXhwb3J0IGZ1bmN0aW9uIGNhbGNBY3R1YWxTaXplIChpbnB1dDogSUlucHV0LCBzdGF0ZTogY29yZS5wcm9jZXNzdXAuSVN0YXRlLCBvdXRwdXQ6IGNvcmUucHJvY2Vzc3VwLklPdXRwdXQsIHRyZWU6IFRleHRCbG9ja1VwZGF0ZXJUcmVlKTogYm9vbGVhbiB7XHJcbiAgICAgICAgICAgIGlmICgoaW5wdXQuZGlydHlGbGFncyAmIERpcnR5RmxhZ3MuQm91bmRzKSA9PT0gMClcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG5cclxuICAgICAgICAgICAgdmFyIGFjdHVhbCA9IHN0YXRlLmFjdHVhbFNpemU7XHJcbiAgICAgICAgICAgIGFjdHVhbC53aWR0aCA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcclxuICAgICAgICAgICAgYWN0dWFsLmhlaWdodCA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcclxuICAgICAgICAgICAgY29yZS5oZWxwZXJzLmNvZXJjZVNpemUoYWN0dWFsLCBpbnB1dCk7XHJcblxyXG4gICAgICAgICAgICBUaGlja25lc3Muc2hyaW5rU2l6ZShpbnB1dC5wYWRkaW5nLCBhY3R1YWwpO1xyXG4gICAgICAgICAgICBTaXplLmNvcHlUbyh0cmVlLmxheW91dChhY3R1YWwsIGlucHV0KSwgYWN0dWFsKTtcclxuICAgICAgICAgICAgVGhpY2tuZXNzLmdyb3dTaXplKGlucHV0LnBhZGRpbmcsIGFjdHVhbCk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGV4cG9ydCBmdW5jdGlvbiBjYWxjRXh0ZW50cyAoaW5wdXQ6IElJbnB1dCwgc3RhdGU6IGNvcmUucHJvY2Vzc3VwLklTdGF0ZSwgb3V0cHV0OiBjb3JlLnByb2Nlc3N1cC5JT3V0cHV0LCB0cmVlOiBUZXh0QmxvY2tVcGRhdGVyVHJlZSk6IGJvb2xlYW4ge1xyXG4gICAgICAgICAgICBpZiAoKGlucHV0LmRpcnR5RmxhZ3MgJiBEaXJ0eUZsYWdzLkJvdW5kcykgPT09IDApXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIHZhciBlID0gb3V0cHV0LmV4dGVudHM7XHJcbiAgICAgICAgICAgIGUueCA9IHRyZWUuZ2V0SG9yaXpvbnRhbE9mZnNldChpbnB1dCk7XHJcbiAgICAgICAgICAgIGUueSA9IDA7XHJcbiAgICAgICAgICAgIFNpemUuY29weVRvKHN0YXRlLmFjdHVhbFNpemUsIGUpO1xyXG5cclxuICAgICAgICAgICAgdmFyIHBhZGRpbmcgPSBpbnB1dC5wYWRkaW5nO1xyXG4gICAgICAgICAgICBlLnggKz0gcGFkZGluZy5sZWZ0O1xyXG4gICAgICAgICAgICBlLnkgKz0gcGFkZGluZy50b3A7XHJcbiAgICAgICAgICAgIFJlY3QuY29weVRvKGUsIG91dHB1dC5leHRlbnRzV2l0aENoaWxkcmVuKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvbnRyb2xzLnRleHRibG9jay5yZW5kZXIge1xyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJSW5wdXQgZXh0ZW5kcyBjb3JlLnJlbmRlci5JSW5wdXQsIHRleHQuSURvY3VtZW50Q29udGV4dCB7XHJcbiAgICAgICAgcGFkZGluZzogVGhpY2tuZXNzO1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBjbGFzcyBUZXh0QmxvY2tSZW5kZXJQaXBlRGVmIGV4dGVuZHMgY29yZS5yZW5kZXIuUmVuZGVyUGlwZURlZiB7XHJcbiAgICAgICAgY29uc3RydWN0b3IgKCkge1xyXG4gICAgICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgICAgICB0aGlzLnJlcGxhY2VUYXBpbignZG9SZW5kZXInLCB0YXBpbnMuZG9SZW5kZXIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgbW9kdWxlIHRhcGlucyB7XHJcbiAgICAgICAgZXhwb3J0IGZ1bmN0aW9uIGRvUmVuZGVyIChpbnB1dDogSUlucHV0LCBzdGF0ZTogY29yZS5yZW5kZXIuSVN0YXRlLCBvdXRwdXQ6IGNvcmUucmVuZGVyLklPdXRwdXQsIGN0eDogY29yZS5yZW5kZXIuUmVuZGVyQ29udGV4dCwgcmVnaW9uOiBSZWN0LCB0cmVlOiBUZXh0QmxvY2tVcGRhdGVyVHJlZSk6IGJvb2xlYW4ge1xyXG4gICAgICAgICAgICBjdHguc2F2ZSgpO1xyXG4gICAgICAgICAgICBjb3JlLmhlbHBlcnMucmVuZGVyTGF5b3V0Q2xpcChjdHgsIGlucHV0LCB0cmVlKTtcclxuICAgICAgICAgICAgdmFyIHBhZGRpbmcgPSBpbnB1dC5wYWRkaW5nO1xyXG4gICAgICAgICAgICBpZiAocGFkZGluZylcclxuICAgICAgICAgICAgICAgIGN0eC50cmFuc2xhdGUocGFkZGluZy5sZWZ0LCBwYWRkaW5nLnRvcCk7XHJcbiAgICAgICAgICAgIHRyZWUucmVuZGVyKGN0eCwgaW5wdXQpO1xyXG4gICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb250cm9scy50ZXh0Ym94dmlldy5hcnJhbmdlIHtcclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUlucHV0IGV4dGVuZHMgY29yZS5hcnJhbmdlLklJbnB1dCwgdGV4dC5JRG9jdW1lbnRDb250ZXh0IHtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgY2xhc3MgVGV4dEJveFZpZXdBcnJhbmdlUGlwZURlZiBleHRlbmRzIGNvcmUuYXJyYW5nZS5BcnJhbmdlUGlwZURlZiB7XHJcbiAgICAgICAgY29uc3RydWN0b3IgKCkge1xyXG4gICAgICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgICAgICB0aGlzLnJlcGxhY2VUYXBpbignZG9PdmVycmlkZScsIHRhcGlucy5kb092ZXJyaWRlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IG1vZHVsZSB0YXBpbnMge1xyXG4gICAgICAgIGV4cG9ydCBmdW5jdGlvbiBkb092ZXJyaWRlIChpbnB1dDogSUlucHV0LCBzdGF0ZTogY29yZS5hcnJhbmdlLklTdGF0ZSwgb3V0cHV0OiBjb3JlLmFycmFuZ2UuSU91dHB1dCwgdHJlZTogVGV4dEJveFZpZXdVcGRhdGVyVHJlZSwgZmluYWxSZWN0OiBSZWN0KTogYm9vbGVhbiB7XHJcbiAgICAgICAgICAgIHZhciBmcyA9IHN0YXRlLmZpbmFsU2l6ZTtcclxuICAgICAgICAgICAgdmFyIGFzID0gc3RhdGUuYXJyYW5nZWRTaXplO1xyXG5cclxuICAgICAgICAgICAgU2l6ZS5jb3B5VG8odHJlZS5sYXlvdXQoZnMsIGlucHV0KSwgYXMpO1xyXG4gICAgICAgICAgICBhcy53aWR0aCA9IE1hdGgubWF4KGFzLndpZHRoLCBmcy53aWR0aCk7XHJcbiAgICAgICAgICAgIGFzLmhlaWdodCA9IE1hdGgubWF4KGFzLmhlaWdodCwgZnMuaGVpZ2h0KTtcclxuICAgICAgICAgICAgdHJlZS5zZXRBdmFpbGFibGVXaWR0aChmcy53aWR0aCk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb250cm9scy50ZXh0Ym94dmlldy5oaXR0ZXN0IHtcclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUhpdFRlc3REYXRhIGV4dGVuZHMgY29yZS5oaXR0ZXN0LklIaXRUZXN0RGF0YSB7XHJcbiAgICAgICAgYXNzZXRzOiBJVGV4dEJveFZpZXdVcGRhdGVyQXNzZXRzO1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBjbGFzcyBUZXh0Qm94Vmlld0hpdFRlc3RQaXBlRGVmIGV4dGVuZHMgY29yZS5oaXR0ZXN0LkhpdFRlc3RQaXBlRGVmIHtcclxuICAgICAgICBjb25zdHJ1Y3RvciAoKSB7XHJcbiAgICAgICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgICAgIHRoaXMucmVwbGFjZVRhcGluKCdjYW5IaXRJbnNpZGUnLCB0YXBpbnMuY2FuSGl0SW5zaWRlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IG1vZHVsZSB0YXBpbnMge1xyXG4gICAgICAgIGV4cG9ydCBmdW5jdGlvbiBjYW5IaXRJbnNpZGUgKGRhdGE6IElIaXRUZXN0RGF0YSwgcG9zOiBQb2ludCwgaGl0TGlzdDogY29yZS5VcGRhdGVyW10sIGN0eDogY29yZS5yZW5kZXIuUmVuZGVyQ29udGV4dCk6IGJvb2xlYW4ge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb250cm9scy50ZXh0Ym94dmlldy5tZWFzdXJlIHtcclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUlucHV0IGV4dGVuZHMgY29yZS5tZWFzdXJlLklJbnB1dCwgdGV4dC5JRG9jdW1lbnRDb250ZXh0IHtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgY2xhc3MgVGV4dEJveFZpZXdNZWFzdXJlUGlwZURlZiBleHRlbmRzIGNvcmUubWVhc3VyZS5NZWFzdXJlUGlwZURlZiB7XHJcbiAgICAgICAgY29uc3RydWN0b3IgKCkge1xyXG4gICAgICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgICAgICB0aGlzLnJlcGxhY2VUYXBpbignZG9PdmVycmlkZScsIHRhcGlucy5kb092ZXJyaWRlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IG1vZHVsZSB0YXBpbnMge1xyXG4gICAgICAgIGV4cG9ydCBmdW5jdGlvbiBkb092ZXJyaWRlIChpbnB1dDogSUlucHV0LCBzdGF0ZTogY29yZS5tZWFzdXJlLklTdGF0ZSwgb3V0cHV0OiBjb3JlLm1lYXN1cmUuSU91dHB1dCwgdHJlZTogVGV4dEJveFZpZXdVcGRhdGVyVHJlZSwgYXZhaWxhYmxlU2l6ZTogU2l6ZSk6IGJvb2xlYW4ge1xyXG4gICAgICAgICAgICB2YXIgZHMgPSBvdXRwdXQuZGVzaXJlZFNpemU7XHJcbiAgICAgICAgICAgIHZhciBhdmFpbGFibGUgPSBzdGF0ZS5hdmFpbGFibGVTaXplO1xyXG4gICAgICAgICAgICB0cmVlLnNldE1heFdpZHRoKGF2YWlsYWJsZS53aWR0aCwgaW5wdXQpO1xyXG4gICAgICAgICAgICBTaXplLmNvcHlUbyh0cmVlLmxheW91dChhdmFpbGFibGUsIGlucHV0KSwgZHMpO1xyXG4gICAgICAgICAgICBpZiAoIWlzRmluaXRlKGF2YWlsYWJsZS53aWR0aCkpXHJcbiAgICAgICAgICAgICAgICBkcy53aWR0aCA9IE1hdGgubWF4KGRzLndpZHRoLCAxMSk7XHJcbiAgICAgICAgICAgIGRzLndpZHRoID0gTWF0aC5taW4oZHMud2lkdGgsIGF2YWlsYWJsZS53aWR0aCk7XHJcbiAgICAgICAgICAgIGRzLmhlaWdodCA9IE1hdGgubWluKGRzLmhlaWdodCwgYXZhaWxhYmxlLmhlaWdodCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvbnRyb2xzLnRleHRib3h2aWV3LnByb2Nlc3N1cCB7XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElJbnB1dCBleHRlbmRzIGNvcmUucHJvY2Vzc3VwLklJbnB1dCwgdGV4dC5JRG9jdW1lbnRDb250ZXh0IHtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgY2xhc3MgVGV4dEJveFZpZXdQcm9jZXNzVXBQaXBlRGVmIGV4dGVuZHMgY29yZS5wcm9jZXNzdXAuUHJvY2Vzc1VwUGlwZURlZiB7XHJcbiAgICAgICAgY29uc3RydWN0b3IgKCkge1xyXG4gICAgICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgICAgICB0aGlzLnJlcGxhY2VUYXBpbignY2FsY0FjdHVhbFNpemUnLCB0YXBpbnMuY2FsY0FjdHVhbFNpemUpXHJcbiAgICAgICAgICAgICAgICAucmVwbGFjZVRhcGluKCdjYWxjRXh0ZW50cycsIHRhcGlucy5jYWxjRXh0ZW50cyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBtb2R1bGUgdGFwaW5zIHtcclxuICAgICAgICBleHBvcnQgZnVuY3Rpb24gY2FsY0FjdHVhbFNpemUgKGlucHV0OiBJSW5wdXQsIHN0YXRlOiBjb3JlLnByb2Nlc3N1cC5JU3RhdGUsIG91dHB1dDogY29yZS5wcm9jZXNzdXAuSU91dHB1dCwgdHJlZTogVGV4dEJveFZpZXdVcGRhdGVyVHJlZSk6IGJvb2xlYW4ge1xyXG4gICAgICAgICAgICBpZiAoKGlucHV0LmRpcnR5RmxhZ3MgJiBEaXJ0eUZsYWdzLkJvdW5kcykgPT09IDApXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIHZhciBhcyA9IHN0YXRlLmFjdHVhbFNpemU7XHJcbiAgICAgICAgICAgIGFzLndpZHRoID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xyXG4gICAgICAgICAgICBhcy5oZWlnaHQgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XHJcbiAgICAgICAgICAgIGNvcmUuaGVscGVycy5jb2VyY2VTaXplKGFzLCBpbnB1dCk7XHJcblxyXG4gICAgICAgICAgICBTaXplLmNvcHlUbyh0cmVlLmxheW91dChhcywgaW5wdXQpLCBhcyk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGV4cG9ydCBmdW5jdGlvbiBjYWxjRXh0ZW50cyAoaW5wdXQ6IElJbnB1dCwgc3RhdGU6IGNvcmUucHJvY2Vzc3VwLklTdGF0ZSwgb3V0cHV0OiBjb3JlLnByb2Nlc3N1cC5JT3V0cHV0LCB0cmVlOiBUZXh0Qm94Vmlld1VwZGF0ZXJUcmVlKTogYm9vbGVhbiB7XHJcbiAgICAgICAgICAgIGlmICgoaW5wdXQuZGlydHlGbGFncyAmIERpcnR5RmxhZ3MuQm91bmRzKSA9PT0gMClcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG5cclxuICAgICAgICAgICAgdmFyIGUgPSBvdXRwdXQuZXh0ZW50cztcclxuICAgICAgICAgICAgZS54ID0gZS55ID0gMDtcclxuICAgICAgICAgICAgU2l6ZS5jb3B5VG8oc3RhdGUuYWN0dWFsU2l6ZSwgZSk7XHJcbiAgICAgICAgICAgIFJlY3QuY29weVRvKGUsIG91dHB1dC5leHRlbnRzV2l0aENoaWxkcmVuKTtcclxuICAgICAgICAgICAgb3V0cHV0LmV4dGVudHNXaXRoQ2hpbGRyZW4ud2lkdGgrKzsgLy9pbmNsdWRlIGNhcmV0XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb250cm9scy50ZXh0Ym94dmlldy5yZW5kZXIge1xyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJSW5wdXQgZXh0ZW5kcyBjb3JlLnJlbmRlci5JSW5wdXQsIHRleHQuSURvY3VtZW50Q29udGV4dCB7XHJcbiAgICAgICAgaXNDYXJldFZpc2libGU6IGJvb2xlYW47XHJcbiAgICAgICAgY2FyZXRSZWdpb246IFJlY3Q7XHJcbiAgICAgICAgY2FyZXRCcnVzaDogSUJydXNoO1xyXG4gICAgfVxyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJT3V0cHV0IGV4dGVuZHMgY29yZS5yZW5kZXIuSU91dHB1dCB7XHJcbiAgICAgICAgY2FyZXRSZWdpb246IFJlY3Q7XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGNsYXNzIFRleHRCb3hWaWV3UmVuZGVyUGlwZURlZiBleHRlbmRzIGNvcmUucmVuZGVyLlJlbmRlclBpcGVEZWYge1xyXG4gICAgICAgIGNvbnN0cnVjdG9yICgpIHtcclxuICAgICAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICAgICAgdGhpcy5yZXBsYWNlVGFwaW4oJ2RvUmVuZGVyJywgdGFwaW5zLmRvUmVuZGVyKVxyXG4gICAgICAgICAgICAgICAgLmFkZFRhcGluQWZ0ZXIoJ2RvUmVuZGVyJywgJ2NhbGNDYXJldFJlZ2lvbicsIHRhcGlucy5jYWxjQ2FyZXRSZWdpb24pXHJcbiAgICAgICAgICAgICAgICAuYWRkVGFwaW5BZnRlcignY2FsY0NhcmV0UmVnaW9uJywgJ3JlbmRlckNhcmV0JywgdGFwaW5zLnJlbmRlckNhcmV0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNyZWF0ZU91dHB1dCAoKSB7XHJcbiAgICAgICAgICAgIHZhciBvdXRwdXQgPSA8SU91dHB1dD5zdXBlci5jcmVhdGVPdXRwdXQoKTtcclxuICAgICAgICAgICAgb3V0cHV0LmNhcmV0UmVnaW9uID0gbmV3IFJlY3QoKTtcclxuICAgICAgICAgICAgcmV0dXJuIG91dHB1dDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByZXBhcmUgKGlucHV0OiBJSW5wdXQsIHN0YXRlOiBjb3JlLnJlbmRlci5JU3RhdGUsIG91dHB1dDogSU91dHB1dCkge1xyXG4gICAgICAgICAgICBSZWN0LmNvcHlUbyhpbnB1dC5jYXJldFJlZ2lvbiwgb3V0cHV0LmNhcmV0UmVnaW9uKTtcclxuICAgICAgICAgICAgc3VwZXIucHJlcGFyZShpbnB1dCwgc3RhdGUsIG91dHB1dCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmbHVzaCAoaW5wdXQ6IElJbnB1dCwgc3RhdGU6IGNvcmUucmVuZGVyLklTdGF0ZSwgb3V0cHV0OiBJT3V0cHV0KSB7XHJcbiAgICAgICAgICAgIHN1cGVyLmZsdXNoKGlucHV0LCBzdGF0ZSwgb3V0cHV0KTtcclxuICAgICAgICAgICAgUmVjdC5jb3B5VG8ob3V0cHV0LmNhcmV0UmVnaW9uLCBpbnB1dC5jYXJldFJlZ2lvbik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBtb2R1bGUgdGFwaW5zIHtcclxuICAgICAgICBleHBvcnQgZnVuY3Rpb24gZG9SZW5kZXIgKGlucHV0OiBJSW5wdXQsIHN0YXRlOiBjb3JlLnJlbmRlci5JU3RhdGUsIG91dHB1dDogSU91dHB1dCwgY3R4OiBjb3JlLnJlbmRlci5SZW5kZXJDb250ZXh0LCByZWdpb246IFJlY3QsIHRyZWU6IFRleHRCb3hWaWV3VXBkYXRlclRyZWUpOiBib29sZWFuIHtcclxuICAgICAgICAgICAgY3R4LnNhdmUoKTtcclxuICAgICAgICAgICAgY29yZS5oZWxwZXJzLnJlbmRlckxheW91dENsaXAoY3R4LCBpbnB1dCwgdHJlZSk7XHJcbiAgICAgICAgICAgIHRyZWUucmVuZGVyKGN0eCwgaW5wdXQpO1xyXG4gICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGV4cG9ydCBmdW5jdGlvbiBjYWxjQ2FyZXRSZWdpb24gKGlucHV0OiBJSW5wdXQsIHN0YXRlOiBjb3JlLnJlbmRlci5JU3RhdGUsIG91dHB1dDogSU91dHB1dCwgY3R4OiBjb3JlLnJlbmRlci5SZW5kZXJDb250ZXh0LCByZWdpb246IFJlY3QsIHRyZWU6IFRleHRCb3hWaWV3VXBkYXRlclRyZWUpOiBib29sZWFuIHtcclxuICAgICAgICAgICAgaWYgKCFSZWN0LmlzRW1wdHkob3V0cHV0LmNhcmV0UmVnaW9uKSB8fCBpbnB1dC5zZWxlY3Rpb25MZW5ndGggPiAwKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIFJlY3QuY29weVRvKHRyZWUuZ2V0Q2FyZXRSZWdpb24oaW5wdXQpLCBvdXRwdXQuY2FyZXRSZWdpb24pO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGV4cG9ydCBmdW5jdGlvbiByZW5kZXJDYXJldCAoaW5wdXQ6IElJbnB1dCwgc3RhdGU6IGNvcmUucmVuZGVyLklTdGF0ZSwgb3V0cHV0OiBJT3V0cHV0LCBjdHg6IGNvcmUucmVuZGVyLlJlbmRlckNvbnRleHQsIHJlZ2lvbjogUmVjdCwgdHJlZTogVGV4dEJveFZpZXdVcGRhdGVyVHJlZSk6IGJvb2xlYW4ge1xyXG4gICAgICAgICAgICBpZiAoIWlucHV0LmlzQ2FyZXRWaXNpYmxlIHx8IGlucHV0LnNlbGVjdGlvbkxlbmd0aCA+IDApXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIHZhciByZWdpb24gPSBvdXRwdXQuY2FyZXRSZWdpb247XHJcbiAgICAgICAgICAgIHZhciBicnVzaCA9IGlucHV0LmNhcmV0QnJ1c2g7XHJcbiAgICAgICAgICAgIHZhciByYXcgPSBjdHgucmF3O1xyXG5cclxuICAgICAgICAgICAgcmF3LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgICAgICByYXcubW92ZVRvKHJlZ2lvbi54ICsgMC41LCByZWdpb24ueSk7XHJcbiAgICAgICAgICAgIHJhdy5saW5lVG8ocmVnaW9uLnggKyAwLjUsIHJlZ2lvbi55ICsgcmVnaW9uLmhlaWdodCk7XHJcbiAgICAgICAgICAgIHJhdy5saW5lV2lkdGggPSAxLjA7XHJcbiAgICAgICAgICAgIGlmIChicnVzaCkge1xyXG4gICAgICAgICAgICAgICAgYnJ1c2guc2V0dXBCcnVzaChyYXcsIHJlZ2lvbik7XHJcbiAgICAgICAgICAgICAgICByYXcuc3Ryb2tlU3R5bGUgPSBicnVzaC50b0h0bWw1T2JqZWN0KCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByYXcuc3Ryb2tlU3R5bGUgPSBcIiMwMDAwMDBcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByYXcuc3Ryb2tlKCk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb250cm9scy51c2VyY29udHJvbC5hcnJhbmdlIHtcclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUlucHV0IGV4dGVuZHMgY29yZS5hcnJhbmdlLklJbnB1dCB7XHJcbiAgICAgICAgcGFkZGluZzogVGhpY2tuZXNzO1xyXG4gICAgICAgIGJvcmRlclRoaWNrbmVzczogVGhpY2tuZXNzO1xyXG4gICAgfVxyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJU3RhdGUgZXh0ZW5kcyBjb3JlLmFycmFuZ2UuSVN0YXRlIHtcclxuICAgICAgICB0b3RhbEJvcmRlcjogVGhpY2tuZXNzO1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBjbGFzcyBVc2VyQ29udHJvbEFycmFuZ2VQaXBlRGVmIGV4dGVuZHMgY29yZS5hcnJhbmdlLkFycmFuZ2VQaXBlRGVmIHtcclxuICAgICAgICBjb25zdHJ1Y3RvciAoKSB7XHJcbiAgICAgICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkVGFwaW5CZWZvcmUoJ2RvT3ZlcnJpZGUnLCAncHJlT3ZlcnJpZGUnLCB0YXBpbnMucHJlT3ZlcnJpZGUpXHJcbiAgICAgICAgICAgICAgICAucmVwbGFjZVRhcGluKCdkb092ZXJyaWRlJywgdGFwaW5zLmRvT3ZlcnJpZGUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY3JlYXRlU3RhdGUgKCk6IElTdGF0ZSB7XHJcbiAgICAgICAgICAgIHZhciBzdGF0ZSA9IDxJU3RhdGU+c3VwZXIuY3JlYXRlU3RhdGUoKTtcclxuICAgICAgICAgICAgc3RhdGUudG90YWxCb3JkZXIgPSBuZXcgVGhpY2tuZXNzKCk7XHJcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwibW9kdWxlIG1pbmVydmEuY29udHJvbHMudXNlcmNvbnRyb2wubWVhc3VyZSB7XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElJbnB1dCBleHRlbmRzIGNvcmUubWVhc3VyZS5JSW5wdXQge1xyXG4gICAgICAgIHBhZGRpbmc6IFRoaWNrbmVzcztcclxuICAgICAgICBib3JkZXJUaGlja25lc3M6IFRoaWNrbmVzcztcclxuICAgIH1cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSVN0YXRlIGV4dGVuZHMgY29yZS5tZWFzdXJlLklTdGF0ZSB7XHJcbiAgICAgICAgdG90YWxCb3JkZXI6IFRoaWNrbmVzcztcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgY2xhc3MgVXNlckNvbnRyb2xNZWFzdXJlUGlwZURlZiBleHRlbmRzIGNvcmUubWVhc3VyZS5NZWFzdXJlUGlwZURlZiB7XHJcbiAgICAgICAgY29uc3RydWN0b3IgKCkge1xyXG4gICAgICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgICAgICB0aGlzLmFkZFRhcGluQmVmb3JlKCdkb092ZXJyaWRlJywgJ3ByZU92ZXJyaWRlJywgdGFwaW5zLnByZU92ZXJyaWRlKVxyXG4gICAgICAgICAgICAgICAgLnJlcGxhY2VUYXBpbignZG9PdmVycmlkZScsIHRhcGlucy5kb092ZXJyaWRlKVxyXG4gICAgICAgICAgICAgICAgLmFkZFRhcGluQWZ0ZXIoJ2RvT3ZlcnJpZGUnLCAncG9zdE92ZXJyaWRlJywgdGFwaW5zLnBvc3RPdmVycmlkZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjcmVhdGVTdGF0ZSAoKTogSVN0YXRlIHtcclxuICAgICAgICAgICAgdmFyIHN0YXRlID0gPElTdGF0ZT5zdXBlci5jcmVhdGVTdGF0ZSgpO1xyXG4gICAgICAgICAgICBzdGF0ZS50b3RhbEJvcmRlciA9IG5ldyBUaGlja25lc3MoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJtb2R1bGUgbWluZXJ2YS5jb250cm9scy51c2VyY29udHJvbC5wcm9jZXNzZG93biB7XHJcbiAgICBleHBvcnQgY2xhc3MgVXNlckNvbnRyb2xQcm9jZXNzRG93blBpcGVEZWYgZXh0ZW5kcyBjb3JlLnByb2Nlc3Nkb3duLlByb2Nlc3NEb3duUGlwZURlZiB7XHJcbiAgICAgICAgY29uc3RydWN0b3IgKCkge1xyXG4gICAgICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgICAgICB0aGlzLnJlcGxhY2VUYXBpbigncHJvY2Vzc0xheW91dENsaXAnLCB0YXBpbnMucHJvY2Vzc0xheW91dENsaXApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgbW9kdWxlIHRhcGlucyB7XHJcbiAgICAgICAgZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3NMYXlvdXRDbGlwIChpbnB1dDogY29yZS5wcm9jZXNzZG93bi5JSW5wdXQsIHN0YXRlOiBjb3JlLnByb2Nlc3Nkb3duLklTdGF0ZSwgb3V0cHV0OiBjb3JlLnByb2Nlc3Nkb3duLklPdXRwdXQsIHZwaW5wdXQ6IGNvcmUucHJvY2Vzc2Rvd24uSUlucHV0LCB0cmVlOiBjb3JlLklVcGRhdGVyVHJlZSk6IGJvb2xlYW4ge1xyXG4gICAgICAgICAgICBpZiAoKGlucHV0LmRpcnR5RmxhZ3MgJiBEaXJ0eUZsYWdzLkxheW91dENsaXApID09PSAwKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcblxyXG4gICAgICAgICAgICB2YXIgY2xjID0gaW5wdXQuY29tcG9zaXRlTGF5b3V0Q2xpcDtcclxuICAgICAgICAgICAgY2xjLnggPSBjbGMueSA9IGNsYy53aWR0aCA9IGNsYy5oZWlnaHQ7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvbnRyb2xzLnZpcnR1YWxpemluZ3N0YWNrcGFuZWwuYXJyYW5nZSB7XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElJbnB1dCBleHRlbmRzIHBhbmVsLmFycmFuZ2UuSUlucHV0IHtcclxuICAgICAgICBvcmllbnRhdGlvbjogT3JpZW50YXRpb247XHJcbiAgICAgICAgc2Nyb2xsRGF0YTogSVNjcm9sbERhdGE7XHJcbiAgICB9XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElTdGF0ZSBleHRlbmRzIHBhbmVsLmFycmFuZ2UuSVN0YXRlIHtcclxuICAgIH1cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSU91dHB1dCBleHRlbmRzIHBhbmVsLmFycmFuZ2UuSU91dHB1dCB7XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGNsYXNzIFZpcnR1YWxpemluZ1N0YWNrUGFuZWxBcnJhbmdlUGlwZURlZiBleHRlbmRzIHBhbmVsLmFycmFuZ2UuUGFuZWxBcnJhbmdlUGlwZURlZiB7XHJcbiAgICAgICAgY29uc3RydWN0b3IgKCkge1xyXG4gICAgICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgICAgICB0aGlzLnJlcGxhY2VUYXBpbignZG9PdmVycmlkZScsIHRhcGlucy5kb092ZXJyaWRlKVxyXG4gICAgICAgICAgICAgICAgLmFkZFRhcGluQWZ0ZXIoJ2RvT3ZlcnJpZGUnLCAnZG9Ib3Jpem9udGFsJywgdGFwaW5zLmRvSG9yaXpvbnRhbClcclxuICAgICAgICAgICAgICAgIC5hZGRUYXBpbkFmdGVyKCdkb092ZXJyaWRlJywgJ2RvVmVydGljYWwnLCB0YXBpbnMuZG9WZXJ0aWNhbCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwibW9kdWxlIG1pbmVydmEuY29udHJvbHMudmlydHVhbGl6aW5nc3RhY2twYW5lbC5tZWFzdXJlIHtcclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUlucHV0IGV4dGVuZHMgcGFuZWwubWVhc3VyZS5JSW5wdXQge1xyXG4gICAgICAgIG9yaWVudGF0aW9uOiBPcmllbnRhdGlvbjtcclxuICAgICAgICBzY3JvbGxEYXRhOiBJU2Nyb2xsRGF0YTtcclxuICAgIH1cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSVN0YXRlIGV4dGVuZHMgcGFuZWwubWVhc3VyZS5JU3RhdGUge1xyXG4gICAgICAgIGNoaWxkQXZhaWxhYmxlOiBTaXplO1xyXG4gICAgfVxyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJT3V0cHV0IGV4dGVuZHMgcGFuZWwubWVhc3VyZS5JT3V0cHV0IHtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgY2xhc3MgVmlydHVhbGl6aW5nU3RhY2tQYW5lbE1lYXN1cmVQaXBlRGVmIGV4dGVuZHMgcGFuZWwubWVhc3VyZS5QYW5lbE1lYXN1cmVQaXBlRGVmIHtcclxuICAgICAgICBjb25zdHJ1Y3RvciAoKSB7XHJcbiAgICAgICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgICAgIHRoaXMucmVwbGFjZVRhcGluKCdkb092ZXJyaWRlJywgdGFwaW5zLmRvT3ZlcnJpZGUpXHJcbiAgICAgICAgICAgICAgICAuYWRkVGFwaW5BZnRlcignZG9PdmVycmlkZScsICdkb0hvcml6b250YWwnLCB0YXBpbnMuZG9Ib3Jpem9udGFsKVxyXG4gICAgICAgICAgICAgICAgLmFkZFRhcGluQWZ0ZXIoJ2RvT3ZlcnJpZGUnLCAnZG9WZXJ0aWNhbCcsIHRhcGlucy5kb1ZlcnRpY2FsKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNyZWF0ZVN0YXRlICgpIHtcclxuICAgICAgICAgICAgdmFyIHN0YXRlID0gPElTdGF0ZT5zdXBlci5jcmVhdGVTdGF0ZSgpO1xyXG4gICAgICAgICAgICBzdGF0ZS5jaGlsZEF2YWlsYWJsZSA9IG5ldyBTaXplKCk7XHJcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb3JlLmFycmFuZ2UudGFwaW5zIHtcclxuICAgIGV4cG9ydCB2YXIgYXBwbHlSb3VuZGluZzogSUFycmFuZ2VUYXBpbiA9IGZ1bmN0aW9uIChpbnB1dDogSUlucHV0LCBzdGF0ZTogSVN0YXRlLCBvdXRwdXQ6IElPdXRwdXQsIHRyZWU6IElVcGRhdGVyVHJlZSwgZmluYWxSZWN0OiBSZWN0KTogYm9vbGVhbiB7XHJcbiAgICAgICAgdmFyIGZyID0gc3RhdGUuZmluYWxSZWN0O1xyXG4gICAgICAgIGlmIChpbnB1dC51c2VMYXlvdXRSb3VuZGluZykge1xyXG4gICAgICAgICAgICBmci54ID0gTWF0aC5yb3VuZChmaW5hbFJlY3QueCk7XHJcbiAgICAgICAgICAgIGZyLnkgPSBNYXRoLnJvdW5kKGZpbmFsUmVjdC55KTtcclxuICAgICAgICAgICAgZnIud2lkdGggPSBNYXRoLnJvdW5kKGZpbmFsUmVjdC53aWR0aCk7XHJcbiAgICAgICAgICAgIGZyLmhlaWdodCA9IE1hdGgucm91bmQoZmluYWxSZWN0LmhlaWdodCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgUmVjdC5jb3B5VG8oZmluYWxSZWN0LCBmcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfTtcclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvcmUuYXJyYW5nZS50YXBpbnMge1xyXG4gICAgdmFyIHRlc3RSZWN0ID0gbmV3IFJlY3QoKTtcclxuICAgIHZhciBmd0NsaXAgPSBuZXcgUmVjdCgpO1xyXG4gICAgZXhwb3J0IHZhciBidWlsZExheW91dENsaXA6IElBcnJhbmdlVGFwaW4gPSBmdW5jdGlvbiAoaW5wdXQ6IElJbnB1dCwgc3RhdGU6IElTdGF0ZSwgb3V0cHV0OiBJT3V0cHV0LCB0cmVlOiBJVXBkYXRlclRyZWUsIGZpbmFsUmVjdDogUmVjdCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHZhciBsYyA9IG91dHB1dC5sYXlvdXRDbGlwO1xyXG4gICAgICAgIFJlY3QuY29weVRvKHN0YXRlLmZpbmFsUmVjdCwgbGMpO1xyXG5cclxuICAgICAgICB2YXIgdm8gPSBvdXRwdXQudmlzdWFsT2Zmc2V0O1xyXG4gICAgICAgIGxjLnggPSBNYXRoLm1heChsYy54IC0gdm8ueCwgMCk7XHJcbiAgICAgICAgbGMueSA9IE1hdGgubWF4KGxjLnkgLSB2by55LCAwKTtcclxuXHJcbiAgICAgICAgaWYgKGlucHV0LnVzZUxheW91dFJvdW5kaW5nKSB7XHJcbiAgICAgICAgICAgIGxjLnggPSBNYXRoLnJvdW5kKGxjLngpO1xyXG4gICAgICAgICAgICBsYy55ID0gTWF0aC5yb3VuZChsYy55KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRlc3RSZWN0LnggPSB0ZXN0UmVjdC55ID0gMDtcclxuICAgICAgICB2YXIgYXMgPSBzdGF0ZS5hcnJhbmdlZFNpemU7XHJcbiAgICAgICAgU2l6ZS5jb3B5VG8oYXMsIHRlc3RSZWN0KTtcclxuICAgICAgICBpZiAoKCF0cmVlLmlzVG9wICYmICFSZWN0LmlzQ29udGFpbmVkSW4odGVzdFJlY3QsIGxjKSkgfHwgIVNpemUuaXNFcXVhbChzdGF0ZS5jb25zdHJhaW5lZCwgYXMpKSB7XHJcbiAgICAgICAgICAgIGZ3Q2xpcC54ID0gZndDbGlwLnkgPSAwO1xyXG4gICAgICAgICAgICBmd0NsaXAud2lkdGggPSBmd0NsaXAuaGVpZ2h0ID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xyXG4gICAgICAgICAgICBoZWxwZXJzLmNvZXJjZVNpemUoZndDbGlwLCBpbnB1dCk7XHJcbiAgICAgICAgICAgIFJlY3QuaW50ZXJzZWN0aW9uKGxjLCBmd0NsaXApO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGxjLnggPSBsYy55ID0gbGMud2lkdGggPSBsYy5oZWlnaHQgPSAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFSZWN0LmlzRXF1YWwob3V0cHV0LmxheW91dENsaXAsIGlucHV0LmxheW91dENsaXApKSB7XHJcbiAgICAgICAgICAgIG91dHB1dC5kaXJ0eUZsYWdzIHw9IERpcnR5RmxhZ3MuTGF5b3V0Q2xpcDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfTtcclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvcmUuYXJyYW5nZS50YXBpbnMge1xyXG4gICAgZXhwb3J0IHZhciBidWlsZExheW91dFhmb3JtOiBJQXJyYW5nZVRhcGluID0gZnVuY3Rpb24gKGlucHV0OiBJSW5wdXQsIHN0YXRlOiBJU3RhdGUsIG91dHB1dDogSU91dHB1dCwgdHJlZTogSVVwZGF0ZXJUcmVlLCBmaW5hbFJlY3Q6IFJlY3QpOiBib29sZWFuIHtcclxuICAgICAgICB2YXIgdm8gPSBvdXRwdXQudmlzdWFsT2Zmc2V0O1xyXG4gICAgICAgIHZhciBsYXlvdXRYZm9ybSA9IG1hdDMuY3JlYXRlVHJhbnNsYXRlKHZvLngsIHZvLnksIG91dHB1dC5sYXlvdXRYZm9ybSk7XHJcbiAgICAgICAgaWYgKHN0YXRlLmZsaXBIb3Jpem9udGFsKSB7XHJcbiAgICAgICAgICAgIG1hdDMudHJhbnNsYXRlKGxheW91dFhmb3JtLCBzdGF0ZS5hcnJhbmdlZFNpemUud2lkdGgsIDApO1xyXG4gICAgICAgICAgICBtYXQzLnNjYWxlKGxheW91dFhmb3JtLCAtMSwgMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghbWF0My5lcXVhbChpbnB1dC5sYXlvdXRYZm9ybSwgb3V0cHV0LmxheW91dFhmb3JtKSlcclxuICAgICAgICAgICAgb3V0cHV0LmRpcnR5RmxhZ3MgfD0gRGlydHlGbGFncy5Mb2NhbFRyYW5zZm9ybTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH07XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb3JlLmFycmFuZ2UudGFwaW5zIHtcclxuICAgIGV4cG9ydCB2YXIgYnVpbGRSZW5kZXJTaXplOiBJQXJyYW5nZVRhcGluID0gZnVuY3Rpb24gKGlucHV0OiBJSW5wdXQsIHN0YXRlOiBJU3RhdGUsIG91dHB1dDogSU91dHB1dCwgdHJlZTogSVVwZGF0ZXJUcmVlLCBmaW5hbFJlY3Q6IFJlY3QpOiBib29sZWFuIHtcclxuICAgICAgICBTaXplLmNvcHlUbyhzdGF0ZS5hcnJhbmdlZFNpemUsIG91dHB1dC5yZW5kZXJTaXplKTtcclxuICAgICAgICBpZiAoIVNpemUuaXNFcXVhbChpbnB1dC5yZW5kZXJTaXplLCBvdXRwdXQucmVuZGVyU2l6ZSkpIHtcclxuICAgICAgICAgICAgaWYgKCFvdXRwdXQubGFzdFJlbmRlclNpemUpIHtcclxuICAgICAgICAgICAgICAgIG91dHB1dC5sYXN0UmVuZGVyU2l6ZSA9IG91dHB1dC5yZW5kZXJTaXplO1xyXG4gICAgICAgICAgICAgICAgb3V0cHV0LnVpRmxhZ3MgfD0gVUlGbGFncy5TaXplSGludDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH07XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb3JlLmFycmFuZ2UudGFwaW5zIHtcclxuICAgIGV4cG9ydCB2YXIgY2FsY0ZsaXA6IElBcnJhbmdlVGFwaW4gPSBmdW5jdGlvbiAoaW5wdXQ6IElJbnB1dCwgc3RhdGU6IElTdGF0ZSwgb3V0cHV0OiBJT3V0cHV0LCB0cmVlOiBJVXBkYXRlclRyZWUsIGZpbmFsUmVjdDogUmVjdCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIC8qIFRPRE86IElNUExFTUVOVFxyXG4gICAgICAgICB2YXIgZmxpcEhvcml6ID0gZmFsc2U7XHJcbiAgICAgICAgIHZhciBmbG93RGlyZWN0aW9uID0gZmUuRmxvd0RpcmVjdGlvbjtcclxuICAgICAgICAgdmFyIHZpc3VhbFBhcmVudE5vZGUgPSA8RkVOb2RlPm5vZGUuVmlzdWFsUGFyZW50Tm9kZTtcclxuICAgICAgICAgaWYgKHZpc3VhbFBhcmVudE5vZGUpXHJcbiAgICAgICAgIGZsaXBIb3JpeiA9IHZpc3VhbFBhcmVudE5vZGUuWE9iamVjdC5GbG93RGlyZWN0aW9uICE9PSBmbG93RGlyZWN0aW9uO1xyXG4gICAgICAgICBlbHNlIGlmIChub2RlLlBhcmVudE5vZGUgaW5zdGFuY2VvZiBDb250cm9scy5QcmltaXRpdmVzLlBvcHVwTm9kZSlcclxuICAgICAgICAgZmxpcEhvcml6ID0gKDxDb250cm9scy5QcmltaXRpdmVzLlBvcHVwTm9kZT5ub2RlLlBhcmVudE5vZGUpLlhPYmplY3QuRmxvd0RpcmVjdGlvbiAhPT0gZmxvd0RpcmVjdGlvbjtcclxuICAgICAgICAgZWxzZVxyXG4gICAgICAgICBmbGlwSG9yaXogPSBmbG93RGlyZWN0aW9uID09PSBGbG93RGlyZWN0aW9uLlJpZ2h0VG9MZWZ0O1xyXG4gICAgICAgICAqL1xyXG5cclxuICAgICAgICBzdGF0ZS5mbGlwSG9yaXpvbnRhbCA9IGZhbHNlO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfTtcclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvcmUuYXJyYW5nZS50YXBpbnMge1xyXG4gICAgZXhwb3J0IHZhciBjYWxjU3RyZXRjaGVkOiBJQXJyYW5nZVRhcGluID0gZnVuY3Rpb24gKGlucHV0OiBJSW5wdXQsIHN0YXRlOiBJU3RhdGUsIG91dHB1dDogSU91dHB1dCwgdHJlZTogSVVwZGF0ZXJUcmVlLCBmaW5hbFJlY3Q6IFJlY3QpOiBib29sZWFuIHtcclxuICAgICAgICBSZWN0LmNvcHlUbyhmaW5hbFJlY3QsIG91dHB1dC5sYXlvdXRTbG90KTtcclxuXHJcbiAgICAgICAgdmFyIGZyID0gc3RhdGUuZmluYWxSZWN0O1xyXG4gICAgICAgIFRoaWNrbmVzcy5zaHJpbmtSZWN0KGlucHV0Lm1hcmdpbiwgZnIpO1xyXG5cclxuICAgICAgICB2YXIgc3RyZXRjaGVkID0gc3RhdGUuc3RyZXRjaGVkO1xyXG4gICAgICAgIHN0cmV0Y2hlZC53aWR0aCA9IGZyLndpZHRoO1xyXG4gICAgICAgIHN0cmV0Y2hlZC5oZWlnaHQgPSBmci5oZWlnaHQ7XHJcbiAgICAgICAgaGVscGVycy5jb2VyY2VTaXplKHN0cmV0Y2hlZCwgaW5wdXQpO1xyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvcmUuYXJyYW5nZS50YXBpbnMge1xyXG4gICAgZXhwb3J0IHZhciBjYWxjVmlzdWFsT2Zmc2V0OiBJQXJyYW5nZVRhcGluID0gZnVuY3Rpb24gKGlucHV0OiBJSW5wdXQsIHN0YXRlOiBJU3RhdGUsIG91dHB1dDogSU91dHB1dCwgdHJlZTogSVVwZGF0ZXJUcmVlLCBmaW5hbFJlY3Q6IFJlY3QpOiBib29sZWFuIHtcclxuICAgICAgICB2YXIgdm8gPSBvdXRwdXQudmlzdWFsT2Zmc2V0O1xyXG4gICAgICAgIHZhciBmciA9IHN0YXRlLmZpbmFsUmVjdDtcclxuICAgICAgICB2YXIgY29uc3RyYWluZWQgPSBzdGF0ZS5jb25zdHJhaW5lZDtcclxuICAgICAgICB2by54ID0gZnIueDtcclxuICAgICAgICB2by55ID0gZnIueTtcclxuXHJcbiAgICAgICAgaWYgKCF0cmVlLmlzVG9wKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoaW5wdXQuaG9yaXpvbnRhbEFsaWdubWVudCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBIb3Jpem9udGFsQWxpZ25tZW50LkxlZnQ6XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIEhvcml6b250YWxBbGlnbm1lbnQuUmlnaHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgdm8ueCArPSBmci53aWR0aCAtIGNvbnN0cmFpbmVkLndpZHRoO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBIb3Jpem9udGFsQWxpZ25tZW50LkNlbnRlcjpcclxuICAgICAgICAgICAgICAgICAgICB2by54ICs9IChmci53aWR0aCAtIGNvbnN0cmFpbmVkLndpZHRoKSAqIDAuNTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgdm8ueCArPSBNYXRoLm1heCgoZnIud2lkdGggLSBjb25zdHJhaW5lZC53aWR0aCkgKiAwLjUsIDApO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzd2l0Y2ggKGlucHV0LnZlcnRpY2FsQWxpZ25tZW50KSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFZlcnRpY2FsQWxpZ25tZW50LlRvcDpcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgVmVydGljYWxBbGlnbm1lbnQuQm90dG9tOlxyXG4gICAgICAgICAgICAgICAgICAgIHZvLnkgKz0gZnIuaGVpZ2h0IC0gY29uc3RyYWluZWQuaGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBWZXJ0aWNhbEFsaWdubWVudC5DZW50ZXI6XHJcbiAgICAgICAgICAgICAgICAgICAgdm8ueSArPSAoZnIuaGVpZ2h0IC0gY29uc3RyYWluZWQuaGVpZ2h0KSAqIDAuNTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgdm8ueSArPSBNYXRoLm1heCgoZnIuaGVpZ2h0IC0gY29uc3RyYWluZWQuaGVpZ2h0KSAqIDAuNSwgMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChpbnB1dC51c2VMYXlvdXRSb3VuZGluZykge1xyXG4gICAgICAgICAgICB2by54ID0gTWF0aC5yb3VuZCh2by54KTtcclxuICAgICAgICAgICAgdm8ueSA9IE1hdGgucm91bmQodm8ueSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH07XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb3JlLmFycmFuZ2UudGFwaW5zIHtcclxuICAgIGV4cG9ydCB2YXIgY2hlY2tOZWVkQXJyYW5nZTogSUFycmFuZ2VUYXBpbiA9IGZ1bmN0aW9uIChpbnB1dDogSUlucHV0LCBzdGF0ZTogSVN0YXRlLCBvdXRwdXQ6IElPdXRwdXQsIHRyZWU6IElVcGRhdGVyVHJlZSwgZmluYWxSZWN0OiBSZWN0KTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKChpbnB1dC5kaXJ0eUZsYWdzICYgRGlydHlGbGFncy5BcnJhbmdlKSA+IDApXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIHJldHVybiAhUmVjdC5pc0VxdWFsKG91dHB1dC5sYXlvdXRTbG90LCBzdGF0ZS5maW5hbFJlY3QpO1xyXG4gICAgfTtcclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvcmUuYXJyYW5nZS50YXBpbnMge1xyXG4gICAgZXhwb3J0IHZhciBjb21wbGV0ZU92ZXJyaWRlOiBJQXJyYW5nZVRhcGluID0gZnVuY3Rpb24gKGlucHV0OiBJSW5wdXQsIHN0YXRlOiBJU3RhdGUsIG91dHB1dDogSU91dHB1dCwgdHJlZTogSVVwZGF0ZXJUcmVlLCBmaW5hbFJlY3Q6IFJlY3QpOiBib29sZWFuIHtcclxuICAgICAgICBvdXRwdXQuZGlydHlGbGFncyAmPSB+RGlydHlGbGFncy5BcnJhbmdlO1xyXG5cclxuICAgICAgICB2YXIgYXMgPSBzdGF0ZS5hcnJhbmdlZFNpemU7XHJcbiAgICAgICAgaWYgKGlucHV0Lmhvcml6b250YWxBbGlnbm1lbnQgPT09IEhvcml6b250YWxBbGlnbm1lbnQuU3RyZXRjaClcclxuICAgICAgICAgICAgYXMud2lkdGggPSBNYXRoLm1heChhcy53aWR0aCwgc3RhdGUuZnJhbWV3b3JrLndpZHRoKTtcclxuXHJcbiAgICAgICAgaWYgKGlucHV0LnZlcnRpY2FsQWxpZ25tZW50ID09PSBWZXJ0aWNhbEFsaWdubWVudC5TdHJldGNoKVxyXG4gICAgICAgICAgICBhcy5oZWlnaHQgPSBNYXRoLm1heChhcy5oZWlnaHQsIHN0YXRlLmZyYW1ld29yay5oZWlnaHQpO1xyXG5cclxuICAgICAgICBpZiAoaW5wdXQudXNlTGF5b3V0Um91bmRpbmcpIHtcclxuICAgICAgICAgICAgYXMud2lkdGggPSBNYXRoLnJvdW5kKGFzLndpZHRoKTtcclxuICAgICAgICAgICAgYXMuaGVpZ2h0ID0gTWF0aC5yb3VuZChhcy5oZWlnaHQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGNvbnN0cmFpbmVkID0gc3RhdGUuY29uc3RyYWluZWQ7XHJcbiAgICAgICAgU2l6ZS5jb3B5VG8oYXMsIGNvbnN0cmFpbmVkKTtcclxuICAgICAgICBoZWxwZXJzLmNvZXJjZVNpemUoY29uc3RyYWluZWQsIGlucHV0KTtcclxuICAgICAgICBjb25zdHJhaW5lZC53aWR0aCA9IE1hdGgubWluKGNvbnN0cmFpbmVkLndpZHRoLCBhcy53aWR0aCk7XHJcbiAgICAgICAgY29uc3RyYWluZWQuaGVpZ2h0ID0gTWF0aC5taW4oY29uc3RyYWluZWQuaGVpZ2h0LCBhcy5oZWlnaHQpO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfTtcclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvcmUuYXJyYW5nZS50YXBpbnMge1xyXG4gICAgZXhwb3J0IHZhciBkb092ZXJyaWRlOiBJQXJyYW5nZVRhcGluID0gZnVuY3Rpb24gKGlucHV0OiBJSW5wdXQsIHN0YXRlOiBJU3RhdGUsIG91dHB1dDogSU91dHB1dCwgdHJlZTogSVVwZGF0ZXJUcmVlLCBmaW5hbFJlY3Q6IFJlY3QpOiBib29sZWFuIHtcclxuICAgICAgICB2YXIgY3IgPSBzdGF0ZS5jaGlsZFJlY3Q7XHJcbiAgICAgICAgY3IueCA9IGNyLnkgPSAwO1xyXG4gICAgICAgIFNpemUuY29weVRvKHN0YXRlLmZpbmFsU2l6ZSwgY3IpO1xyXG5cclxuICAgICAgICBmb3IgKHZhciB3YWxrZXIgPSB0cmVlLndhbGsoKTsgd2Fsa2VyLnN0ZXAoKTspIHtcclxuICAgICAgICAgICAgdmFyIGNoaWxkID0gd2Fsa2VyLmN1cnJlbnQ7XHJcbiAgICAgICAgICAgIGNoaWxkLmFycmFuZ2Uoc3RhdGUuY2hpbGRSZWN0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIFNpemUuY29weVRvKGNyLCBzdGF0ZS5hcnJhbmdlZFNpemUpO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfTtcclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvcmUuYXJyYW5nZS50YXBpbnMge1xyXG4gICAgZXhwb3J0IHZhciBpbnZhbGlkYXRlRnV0dXJlOiBJQXJyYW5nZVRhcGluID0gZnVuY3Rpb24gKGlucHV0OiBJSW5wdXQsIHN0YXRlOiBJU3RhdGUsIG91dHB1dDogSU91dHB1dCwgdHJlZTogSVVwZGF0ZXJUcmVlLCBmaW5hbFJlY3Q6IFJlY3QpOiBib29sZWFuIHtcclxuICAgICAgICB2YXIgbGMgPSBvdXRwdXQubGF5b3V0Q2xpcDtcclxuICAgICAgICBsYy54ID0gbGMueSA9IGxjLndpZHRoID0gbGMuaGVpZ2h0ID0gMDtcclxuICAgICAgICBvdXRwdXQuZGlydHlGbGFncyB8PSBEaXJ0eUZsYWdzLkxvY2FsVHJhbnNmb3JtO1xyXG4gICAgICAgIG91dHB1dC5kaXJ0eUZsYWdzIHw9IERpcnR5RmxhZ3MuQm91bmRzO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfTtcclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvcmUuYXJyYW5nZS50YXBpbnMge1xyXG4gICAgZXhwb3J0IHZhciBwcmVwYXJlT3ZlcnJpZGU6IElBcnJhbmdlVGFwaW4gPSBmdW5jdGlvbiAoaW5wdXQ6IElJbnB1dCwgc3RhdGU6IElTdGF0ZSwgb3V0cHV0OiBJT3V0cHV0LCB0cmVlOiBJVXBkYXRlclRyZWUsIGZpbmFsUmVjdDogUmVjdCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHZhciBmcmFtZXdvcmsgPSBzdGF0ZS5mcmFtZXdvcms7XHJcbiAgICAgICAgZnJhbWV3b3JrLndpZHRoID0gMDtcclxuICAgICAgICBmcmFtZXdvcmsuaGVpZ2h0ID0gMDtcclxuICAgICAgICBoZWxwZXJzLmNvZXJjZVNpemUoZnJhbWV3b3JrLCBpbnB1dCk7XHJcblxyXG4gICAgICAgIGlmIChpbnB1dC5ob3Jpem9udGFsQWxpZ25tZW50ID09PSBIb3Jpem9udGFsQWxpZ25tZW50LlN0cmV0Y2gpXHJcbiAgICAgICAgICAgIGZyYW1ld29yay53aWR0aCA9IE1hdGgubWF4KGZyYW1ld29yay53aWR0aCwgc3RhdGUuc3RyZXRjaGVkLndpZHRoKTtcclxuXHJcbiAgICAgICAgaWYgKGlucHV0LnZlcnRpY2FsQWxpZ25tZW50ID09PSBWZXJ0aWNhbEFsaWdubWVudC5TdHJldGNoKVxyXG4gICAgICAgICAgICBmcmFtZXdvcmsuaGVpZ2h0ID0gTWF0aC5tYXgoZnJhbWV3b3JrLmhlaWdodCwgc3RhdGUuc3RyZXRjaGVkLmhlaWdodCk7XHJcblxyXG4gICAgICAgIHZhciBmcyA9IHN0YXRlLmZpbmFsU2l6ZTtcclxuICAgICAgICB2YXIgaGQgPSBpbnB1dC5oaWRkZW5EZXNpcmU7XHJcbiAgICAgICAgZnMud2lkdGggPSBNYXRoLm1heChoZC53aWR0aCwgZnJhbWV3b3JrLndpZHRoKTtcclxuICAgICAgICBmcy5oZWlnaHQgPSBNYXRoLm1heChoZC5oZWlnaHQsIGZyYW1ld29yay5oZWlnaHQpO1xyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH07XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb3JlLmFycmFuZ2UudGFwaW5zIHtcclxuICAgIGV4cG9ydCB2YXIgdmFsaWRhdGVGaW5hbFJlY3Q6IElBcnJhbmdlVGFwaW4gPSBmdW5jdGlvbiAoaW5wdXQ6IElJbnB1dCwgc3RhdGU6IElTdGF0ZSwgb3V0cHV0OiBJT3V0cHV0LCB0cmVlOiBJVXBkYXRlclRyZWUsIGZpbmFsUmVjdDogUmVjdCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmIChmaW5hbFJlY3Qud2lkdGggPCAwIHx8IGZpbmFsUmVjdC5oZWlnaHQgPCAwXHJcbiAgICAgICAgICAgIHx8ICFpc0Zpbml0ZShmaW5hbFJlY3Qud2lkdGgpIHx8ICFpc0Zpbml0ZShmaW5hbFJlY3QuaGVpZ2h0KVxyXG4gICAgICAgICAgICB8fCBpc05hTihmaW5hbFJlY3QueCkgfHwgaXNOYU4oZmluYWxSZWN0LnkpXHJcbiAgICAgICAgICAgIHx8IGlzTmFOKGZpbmFsUmVjdC53aWR0aCkgfHwgaXNOYU4oZmluYWxSZWN0LmhlaWdodCkpIHtcclxuICAgICAgICAgICAgbWluZXJ2YS5sYXlvdXRFcnJvcih0cmVlLCB0aGlzLCBcIkludmFsaWQgYXJndW1lbnRzIHRvIEFycmFuZ2UuXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfTtcclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvcmUuYXJyYW5nZS50YXBpbnMge1xyXG4gICAgZXhwb3J0IHZhciB2YWxpZGF0ZVZpc2liaWxpdHk6IElBcnJhbmdlVGFwaW4gPSBmdW5jdGlvbiAoaW5wdXQ6IElJbnB1dCwgc3RhdGU6IElTdGF0ZSwgb3V0cHV0OiBJT3V0cHV0LCB0cmVlOiBJVXBkYXRlclRyZWUsIGZpbmFsUmVjdDogUmVjdCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmIChpbnB1dC52aXNpYmlsaXR5ICE9PSBWaXNpYmlsaXR5LlZpc2libGUpIHtcclxuICAgICAgICAgICAgUmVjdC5jb3B5VG8oc3RhdGUuZmluYWxSZWN0LCBvdXRwdXQubGF5b3V0U2xvdCk7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9O1xyXG59IiwibW9kdWxlIG1pbmVydmEuY29yZS5kcmFmdC50YXBpbnMge1xyXG4gICAgZXhwb3J0IHZhciBhcnJhbmdlOiBJRHJhZnRUYXBpbiA9IGZ1bmN0aW9uIChkYXRhOiBJRHJhZnRQaXBlRGF0YSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmIChkYXRhLmZsYWcgIT09IFVJRmxhZ3MuQXJyYW5nZUhpbnQpXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG5cclxuICAgICAgICBpZiAoZGF0YS5hcnJhbmdlTGlzdC5sZW5ndGggPD0gMClcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgICAgICB2YXIgdXBkYXRlcjogVXBkYXRlcjtcclxuICAgICAgICB3aGlsZSAoKHVwZGF0ZXIgPSBkYXRhLmFycmFuZ2VMaXN0LnNoaWZ0KCkpICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdXBkYXRlci5kb0FycmFuZ2UoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfTtcclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvcmUuZHJhZnQudGFwaW5zIHtcclxuICAgIGV4cG9ydCB2YXIgZGV0ZXJtaW5lUGhhc2U6IElEcmFmdFRhcGluID0gZnVuY3Rpb24gKGRhdGE6IElEcmFmdFBpcGVEYXRhKTogYm9vbGVhbiB7XHJcbiAgICAgICAgZGF0YS5mbGFnID0gVUlGbGFncy5Ob25lO1xyXG4gICAgICAgIHZhciBhc3NldHMgPSBkYXRhLmFzc2V0cztcclxuICAgICAgICBpZiAoYXNzZXRzLnZpc2liaWxpdHkgIT09IFZpc2liaWxpdHkuVmlzaWJsZSlcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcblxyXG4gICAgICAgIGlmICgoYXNzZXRzLnVpRmxhZ3MgJiBVSUZsYWdzLk1lYXN1cmVIaW50KSA+IDApIHtcclxuICAgICAgICAgICAgZGF0YS5mbGFnID0gVUlGbGFncy5NZWFzdXJlSGludDtcclxuICAgICAgICB9IGVsc2UgaWYgKChhc3NldHMudWlGbGFncyAmIFVJRmxhZ3MuQXJyYW5nZUhpbnQpID4gMCkge1xyXG4gICAgICAgICAgICBkYXRhLmZsYWcgPSBVSUZsYWdzLkFycmFuZ2VIaW50O1xyXG4gICAgICAgIH0gZWxzZSBpZiAoKGFzc2V0cy51aUZsYWdzICYgVUlGbGFncy5TaXplSGludCkgPiAwKSB7XHJcbiAgICAgICAgICAgIGRhdGEuZmxhZyA9IFVJRmxhZ3MuU2l6ZUhpbnQ7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9O1xyXG59IiwibW9kdWxlIG1pbmVydmEuY29yZS5kcmFmdC50YXBpbnMge1xyXG4gICAgZXhwb3J0IHZhciBmbHVzaFByZXZpb3VzOiBJRHJhZnRUYXBpbiA9IGZ1bmN0aW9uIChkYXRhOiBJRHJhZnRQaXBlRGF0YSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHZhciB1cGRhdGVyOiBVcGRhdGVyO1xyXG4gICAgICAgIHdoaWxlICgodXBkYXRlciA9IGRhdGEuYXJyYW5nZUxpc3Quc2hpZnQoKSkgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBVcGRhdGVyLiQkcHJvcGFnYXRlVWlGbGFnc1VwKHVwZGF0ZXIsIFVJRmxhZ3MuQXJyYW5nZUhpbnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB3aGlsZSAoKHVwZGF0ZXIgPSBkYXRhLnNpemluZ0xpc3Quc2hpZnQoKSkgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBVcGRhdGVyLiQkcHJvcGFnYXRlVWlGbGFnc1VwKHVwZGF0ZXIsIFVJRmxhZ3MuU2l6ZUhpbnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH07XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb3JlLmRyYWZ0LnRhcGlucyB7XHJcbiAgICBleHBvcnQgdmFyIG1lYXN1cmU6IElEcmFmdFRhcGluID0gZnVuY3Rpb24gKGRhdGE6IElEcmFmdFBpcGVEYXRhKTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKGRhdGEuZmxhZyAhPT0gVUlGbGFncy5NZWFzdXJlSGludClcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcblxyXG4gICAgICAgIGlmIChkYXRhLm1lYXN1cmVMaXN0Lmxlbmd0aCA8PSAwKVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgICAgIHZhciB1cGRhdGVyOiBVcGRhdGVyO1xyXG4gICAgICAgIHdoaWxlICgodXBkYXRlciA9IGRhdGEubWVhc3VyZUxpc3Quc2hpZnQoKSkgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB1cGRhdGVyLmRvTWVhc3VyZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9O1xyXG59IiwibW9kdWxlIG1pbmVydmEuY29yZS5kcmFmdC50YXBpbnMge1xyXG4gICAgZXhwb3J0IHZhciBub3RpZnlSZXNpemU6IElEcmFmdFRhcGluID0gZnVuY3Rpb24gKGRhdGE6IElEcmFmdFBpcGVEYXRhKTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKGRhdGEuZmxhZyAhPT0gVUlGbGFncy5TaXplSGludClcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgaWYgKGRhdGEuc2l6aW5nVXBkYXRlcy5sZW5ndGggPD0gMClcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcblxyXG4gICAgICAgIHZhciB1cGRhdGU6IElTaXppbmdVcGRhdGU7XHJcbiAgICAgICAgd2hpbGUgKCh1cGRhdGUgPSBkYXRhLnNpemluZ1VwZGF0ZXMucG9wKCkpICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdXBkYXRlLnVwZGF0ZXIub25TaXplQ2hhbmdlZCh1cGRhdGUub2xkU2l6ZSwgdXBkYXRlLm5ld1NpemUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9O1xyXG59IiwibW9kdWxlIG1pbmVydmEuY29yZS5kcmFmdC50YXBpbnMge1xyXG4gICAgZXhwb3J0IHZhciBwcmVwYXJlQXJyYW5nZTogSURyYWZ0VGFwaW4gPSBmdW5jdGlvbiAoZGF0YTogSURyYWZ0UGlwZURhdGEpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAoZGF0YS5mbGFnICE9PSBVSUZsYWdzLkFycmFuZ2VIaW50KVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuXHJcbiAgICAgICAgZm9yICh2YXIgd2Fsa2VyID0gZGF0YS51cGRhdGVyLndhbGtEZWVwKCk7IHdhbGtlci5zdGVwKCk7KSB7XHJcbiAgICAgICAgICAgIHZhciBhc3NldHMgPSB3YWxrZXIuY3VycmVudC5hc3NldHM7XHJcbiAgICAgICAgICAgIGlmIChhc3NldHMudmlzaWJpbGl0eSAhPT0gVmlzaWJpbGl0eS5WaXNpYmxlKSB7XHJcbiAgICAgICAgICAgICAgICB3YWxrZXIuc2tpcEJyYW5jaCgpO1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKChhc3NldHMudWlGbGFncyAmIFVJRmxhZ3MuQXJyYW5nZUhpbnQpID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICB3YWxrZXIuc2tpcEJyYW5jaCgpO1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGFzc2V0cy51aUZsYWdzICY9IH5VSUZsYWdzLkFycmFuZ2VIaW50O1xyXG4gICAgICAgICAgICBpZiAoKGFzc2V0cy5kaXJ0eUZsYWdzICYgRGlydHlGbGFncy5BcnJhbmdlKSA+IDApXHJcbiAgICAgICAgICAgICAgICBkYXRhLmFycmFuZ2VMaXN0LnB1c2god2Fsa2VyLmN1cnJlbnQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9O1xyXG59IiwibW9kdWxlIG1pbmVydmEuY29yZS5kcmFmdC50YXBpbnMge1xyXG4gICAgZXhwb3J0IHZhciBwcmVwYXJlTWVhc3VyZTogSURyYWZ0VGFwaW4gPSBmdW5jdGlvbiAoZGF0YTogSURyYWZ0UGlwZURhdGEpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAoZGF0YS5mbGFnICE9PSBVSUZsYWdzLk1lYXN1cmVIaW50KVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuXHJcbiAgICAgICAgdmFyIGxhc3QgPSBkYXRhLmFzc2V0cy5wcmV2aW91c0NvbnN0cmFpbnQ7XHJcbiAgICAgICAgaWYgKGRhdGEudHJlZS5pc0NvbnRhaW5lciAmJiAoU2l6ZS5pc1VuZGVmKGxhc3QpIHx8ICghU2l6ZS5pc0VxdWFsKGxhc3QsIGRhdGEuc3VyZmFjZVNpemUpKSkpIHtcclxuICAgICAgICAgICAgZGF0YS5hc3NldHMuZGlydHlGbGFncyB8PSBEaXJ0eUZsYWdzLk1lYXN1cmU7XHJcbiAgICAgICAgICAgIFNpemUuY29weVRvKGRhdGEuc3VyZmFjZVNpemUsIGRhdGEuYXNzZXRzLnByZXZpb3VzQ29uc3RyYWludCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKHZhciB3YWxrZXIgPSBkYXRhLnVwZGF0ZXIud2Fsa0RlZXAoKTsgd2Fsa2VyLnN0ZXAoKTspIHtcclxuICAgICAgICAgICAgdmFyIGFzc2V0cyA9IHdhbGtlci5jdXJyZW50LmFzc2V0cztcclxuICAgICAgICAgICAgaWYgKGFzc2V0cy52aXNpYmlsaXR5ICE9PSBWaXNpYmlsaXR5LlZpc2libGUpIHtcclxuICAgICAgICAgICAgICAgIHdhbGtlci5za2lwQnJhbmNoKCk7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoKGFzc2V0cy51aUZsYWdzICYgVUlGbGFncy5NZWFzdXJlSGludCkgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIHdhbGtlci5za2lwQnJhbmNoKCk7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgYXNzZXRzLnVpRmxhZ3MgJj0gflVJRmxhZ3MuTWVhc3VyZUhpbnQ7XHJcbiAgICAgICAgICAgIGlmICgoYXNzZXRzLmRpcnR5RmxhZ3MgJiBEaXJ0eUZsYWdzLk1lYXN1cmUpID4gMClcclxuICAgICAgICAgICAgICAgIGRhdGEubWVhc3VyZUxpc3QucHVzaCh3YWxrZXIuY3VycmVudCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH07XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb3JlLmRyYWZ0LnRhcGlucyB7XHJcbiAgICBleHBvcnQgdmFyIHByZXBhcmVTaXppbmc6IElEcmFmdFRhcGluID0gZnVuY3Rpb24gKGRhdGE6IElEcmFmdFBpcGVEYXRhKTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKGRhdGEuZmxhZyAhPT0gVUlGbGFncy5TaXplSGludClcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcblxyXG4gICAgICAgIGZvciAodmFyIHdhbGtlciA9IGRhdGEudXBkYXRlci53YWxrRGVlcCgpOyB3YWxrZXIuc3RlcCgpOykge1xyXG4gICAgICAgICAgICB2YXIgYXNzZXRzID0gd2Fsa2VyLmN1cnJlbnQuYXNzZXRzO1xyXG4gICAgICAgICAgICBpZiAoYXNzZXRzLnZpc2liaWxpdHkgIT09IFZpc2liaWxpdHkuVmlzaWJsZSkge1xyXG4gICAgICAgICAgICAgICAgd2Fsa2VyLnNraXBCcmFuY2goKTtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICgoYXNzZXRzLnVpRmxhZ3MgJiBVSUZsYWdzLlNpemVIaW50KSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgd2Fsa2VyLnNraXBCcmFuY2goKTtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBhc3NldHMudWlGbGFncyAmPSB+VUlGbGFncy5TaXplSGludDtcclxuICAgICAgICAgICAgaWYgKGFzc2V0cy5sYXN0UmVuZGVyU2l6ZSAhPT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICAgICAgZGF0YS5zaXppbmdMaXN0LnB1c2god2Fsa2VyLmN1cnJlbnQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9O1xyXG59IiwibW9kdWxlIG1pbmVydmEuY29yZS5kcmFmdC50YXBpbnMge1xyXG4gICAgZXhwb3J0IHZhciBzaXppbmc6IElEcmFmdFRhcGluID0gZnVuY3Rpb24gKGRhdGE6IElEcmFmdFBpcGVEYXRhKTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKGRhdGEuZmxhZyAhPT0gVUlGbGFncy5TaXplSGludClcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcblxyXG4gICAgICAgIGlmIChkYXRhLnNpemluZ0xpc3QubGVuZ3RoIDw9IDApXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICAgICAgdmFyIHVwZGF0ZXI6IFVwZGF0ZXI7XHJcbiAgICAgICAgdmFyIG9sZFNpemUgPSBuZXcgU2l6ZSgpO1xyXG4gICAgICAgIHZhciBuZXdTaXplID0gbmV3IFNpemUoKTtcclxuICAgICAgICB3aGlsZSAoKHVwZGF0ZXIgPSBkYXRhLnNpemluZ0xpc3QucG9wKCkpICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdXBkYXRlci5zaXppbmcob2xkU2l6ZSwgbmV3U2l6ZSk7XHJcbiAgICAgICAgICAgIGlmICghU2l6ZS5pc0VxdWFsKG9sZFNpemUsIG5ldyBTaXplKSkge1xyXG4gICAgICAgICAgICAgICAgZGF0YS5zaXppbmdVcGRhdGVzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgb2xkU2l6ZTogb2xkU2l6ZSxcclxuICAgICAgICAgICAgICAgICAgICBuZXdTaXplOiBuZXdTaXplXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIG9sZFNpemUgPSBuZXcgU2l6ZSgpO1xyXG4gICAgICAgICAgICAgICAgbmV3U2l6ZSA9IG5ldyBTaXplKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfTtcclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvcmUuaGl0dGVzdC50YXBpbnMge1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGNhbkhpdCAoZGF0YTogSUhpdFRlc3REYXRhLCBwb3M6IFBvaW50LCBoaXRMaXN0OiBVcGRhdGVyW10sIGN0eDogcmVuZGVyLlJlbmRlckNvbnRleHQsIGluY2x1ZGVBbGw6IGJvb2xlYW4pOiBib29sZWFuIHtcclxuICAgICAgICB2YXIgYXNzZXRzID0gZGF0YS5hc3NldHM7XHJcbiAgICAgICAgcmV0dXJuICEhYXNzZXRzLnRvdGFsSXNSZW5kZXJWaXNpYmxlXHJcbiAgICAgICAgICAgICYmICEhYXNzZXRzLnRvdGFsSXNIaXRUZXN0VmlzaWJsZTtcclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvcmUuaGl0dGVzdC50YXBpbnMge1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGNhbkhpdEluc2lkZSAoZGF0YTogSUhpdFRlc3REYXRhLCBwb3M6IFBvaW50LCBoaXRMaXN0OiBVcGRhdGVyW10sIGN0eDogcmVuZGVyLlJlbmRlckNvbnRleHQsIGluY2x1ZGVBbGw6IGJvb2xlYW4pOiBib29sZWFuIHtcclxuICAgICAgICBpZiAoZGF0YS5oaXRDaGlsZHJlbilcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcblxyXG4gICAgICAgIGhpdExpc3Quc2hpZnQoKTtcclxuICAgICAgICBjdHgucmVzdG9yZSgpO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvcmUuaGl0dGVzdC50YXBpbnMge1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGNvbXBsZXRlQ3R4IChkYXRhOiBJSGl0VGVzdERhdGEsIHBvczogUG9pbnQsIGhpdExpc3Q6IFVwZGF0ZXJbXSwgY3R4OiByZW5kZXIuUmVuZGVyQ29udGV4dCwgaW5jbHVkZUFsbDogYm9vbGVhbik6IGJvb2xlYW4ge1xyXG4gICAgICAgIGN0eC5yZXN0b3JlKCk7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb3JlLmhpdHRlc3QudGFwaW5zIHtcclxuICAgIGV4cG9ydCBmdW5jdGlvbiBpbnNpZGVDaGlsZHJlbiAoZGF0YTogSUhpdFRlc3REYXRhLCBwb3M6IFBvaW50LCBoaXRMaXN0OiBVcGRhdGVyW10sIGN0eDogcmVuZGVyLlJlbmRlckNvbnRleHQsIGluY2x1ZGVBbGw6IGJvb2xlYW4pOiBib29sZWFuIHtcclxuICAgICAgICBoaXRMaXN0LnVuc2hpZnQoZGF0YS51cGRhdGVyKTtcclxuXHJcbiAgICAgICAgdmFyIGhpdCA9IGZhbHNlO1xyXG4gICAgICAgIGZvciAodmFyIHdhbGtlciA9IGRhdGEudHJlZS53YWxrKFdhbGtEaXJlY3Rpb24uWlJldmVyc2UpOyB3YWxrZXIuc3RlcCgpOykge1xyXG4gICAgICAgICAgICBoaXQgPSB3YWxrZXIuY3VycmVudC5oaXRUZXN0KHBvcywgaGl0TGlzdCwgY3R4LCBpbmNsdWRlQWxsKSB8fCBoaXQ7XHJcbiAgICAgICAgICAgIGlmIChoaXQgJiYgIWluY2x1ZGVBbGwpXHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgZGF0YS5oaXRDaGlsZHJlbiA9IGhpdDtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb3JlLmhpdHRlc3QudGFwaW5zIHtcclxuICAgIGV4cG9ydCBmdW5jdGlvbiBpbnNpZGVDbGlwIChkYXRhOiBJSGl0VGVzdERhdGEsIHBvczogUG9pbnQsIGhpdExpc3Q6IFVwZGF0ZXJbXSwgY3R4OiByZW5kZXIuUmVuZGVyQ29udGV4dCwgaW5jbHVkZUFsbDogYm9vbGVhbik6IGJvb2xlYW4ge1xyXG4gICAgICAgIHZhciBjbGlwID0gZGF0YS5hc3NldHMuY2xpcDtcclxuICAgICAgICBpZiAoIWNsaXApXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG5cclxuICAgICAgICB2YXIgYm91bmRzID0gY2xpcC5HZXRCb3VuZHMoKTtcclxuICAgICAgICBSZWN0LnRyYW5zZm9ybShib3VuZHMsIGN0eC5jdXJyZW50VHJhbnNmb3JtKTtcclxuICAgICAgICBpZiAoIVJlY3QuY29udGFpbnNQb2ludChib3VuZHMsIHBvcykpIHtcclxuICAgICAgICAgICAgY3R4LnJlc3RvcmUoKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xpcC5EcmF3KGN0eCk7XHJcbiAgICAgICAgaWYgKCFjdHgucmF3LmlzUG9pbnRJblBhdGgocG9zLngsIHBvcy55KSkge1xyXG4gICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvcmUuaGl0dGVzdC50YXBpbnMge1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGluc2lkZUxheW91dENsaXAgKGRhdGE6IElIaXRUZXN0RGF0YSwgcG9zOiBQb2ludCwgaGl0TGlzdDogVXBkYXRlcltdLCBjdHg6IHJlbmRlci5SZW5kZXJDb250ZXh0LCBpbmNsdWRlQWxsOiBib29sZWFuKTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKGRhdGEuaGl0Q2hpbGRyZW4pXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG5cclxuICAgICAgICB2YXIgY2xjID0gZGF0YS5hc3NldHMuY29tcG9zaXRlTGF5b3V0Q2xpcDtcclxuICAgICAgICBpZiAoIWNsYyB8fCBSZWN0LmlzRW1wdHkoY2xjKSlcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcblxyXG4gICAgICAgIHZhciBsY2JvdW5kcyA9IGRhdGEubGF5b3V0Q2xpcEJvdW5kcztcclxuICAgICAgICBSZWN0LmNvcHlUbyhjbGMsIGxjYm91bmRzKTtcclxuICAgICAgICBSZWN0LnRyYW5zZm9ybShsY2JvdW5kcywgY3R4LmN1cnJlbnRUcmFuc2Zvcm0pO1xyXG5cclxuICAgICAgICBpZiAoIVJlY3QuY29udGFpbnNQb2ludChsY2JvdW5kcywgcG9zKSkge1xyXG4gICAgICAgICAgICBoaXRMaXN0LnNoaWZ0KCk7XHJcbiAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG59IiwibW9kdWxlIG1pbmVydmEuY29yZS5oaXR0ZXN0LnRhcGlucyB7XHJcbiAgICBleHBvcnQgZnVuY3Rpb24gaW5zaWRlT2JqZWN0IChkYXRhOiBJSGl0VGVzdERhdGEsIHBvczogUG9pbnQsIGhpdExpc3Q6IFVwZGF0ZXJbXSwgY3R4OiByZW5kZXIuUmVuZGVyQ29udGV4dCwgaW5jbHVkZUFsbDogYm9vbGVhbik6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmIChkYXRhLmhpdENoaWxkcmVuKVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuXHJcbiAgICAgICAgdmFyIGJvdW5kcyA9IGRhdGEuYm91bmRzO1xyXG4gICAgICAgIFJlY3QuY29weVRvKGRhdGEuYXNzZXRzLmV4dGVudHMsIGJvdW5kcyk7XHJcbiAgICAgICAgUmVjdC50cmFuc2Zvcm0oYm91bmRzLCBjdHguY3VycmVudFRyYW5zZm9ybSk7XHJcbiAgICAgICAgaWYgKCFSZWN0LmNvbnRhaW5zUG9pbnQoYm91bmRzLCBwb3MpKSB7XHJcbiAgICAgICAgICAgIGhpdExpc3Quc2hpZnQoKTtcclxuICAgICAgICAgICAgY3R4LnJlc3RvcmUoKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb3JlLmhpdHRlc3QudGFwaW5zIHtcclxuICAgIGV4cG9ydCBmdW5jdGlvbiBwcmVwYXJlQ3R4IChkYXRhOiBJSGl0VGVzdERhdGEsIHBvczogUG9pbnQsIGhpdExpc3Q6IFVwZGF0ZXJbXSwgY3R4OiByZW5kZXIuUmVuZGVyQ29udGV4dCwgaW5jbHVkZUFsbDogYm9vbGVhbik6IGJvb2xlYW4ge1xyXG4gICAgICAgIGN0eC5zYXZlKCk7XHJcbiAgICAgICAgY3R4LnByZWFwcGx5KGRhdGEuYXNzZXRzLnJlbmRlclhmb3JtKTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvcmUubWVhc3VyZS50YXBpbnMge1xyXG4gICAgZXhwb3J0IHZhciBhcHBseVRlbXBsYXRlOiBJTWVhc3VyZVRhcGluID0gZnVuY3Rpb24gKGlucHV0OiBJSW5wdXQsIHN0YXRlOiBJU3RhdGUsIG91dHB1dDogSU91dHB1dCwgdHJlZTogSVVwZGF0ZXJUcmVlLCBhdmFpbGFibGVTaXplOiBTaXplKTogYm9vbGVhbiB7XHJcbiAgICAgICAgdHJlZS5hcHBseVRlbXBsYXRlKCk7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9O1xyXG59IiwibW9kdWxlIG1pbmVydmEuY29yZS5tZWFzdXJlLnRhcGlucyB7XHJcbiAgICBleHBvcnQgdmFyIGNoZWNrTmVlZE1lYXN1cmU6IElNZWFzdXJlVGFwaW4gPSBmdW5jdGlvbiAoaW5wdXQ6IElJbnB1dCwgc3RhdGU6IElTdGF0ZSwgb3V0cHV0OiBJT3V0cHV0LCB0cmVlOiBJVXBkYXRlclRyZWUsIGF2YWlsYWJsZVNpemU6IFNpemUpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAoKGlucHV0LmRpcnR5RmxhZ3MgJiBEaXJ0eUZsYWdzLk1lYXN1cmUpID4gMClcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgdmFyIHBjID0gaW5wdXQucHJldmlvdXNDb25zdHJhaW50O1xyXG4gICAgICAgIGlmIChTaXplLmlzVW5kZWYocGMpIHx8IHBjLndpZHRoICE9PSBhdmFpbGFibGVTaXplLndpZHRoIHx8IHBjLmhlaWdodCAhPT0gYXZhaWxhYmxlU2l6ZS5oZWlnaHQpIHtcclxuICAgICAgICAgICAgU2l6ZS5jb3B5VG8oYXZhaWxhYmxlU2l6ZSwgb3V0cHV0LnByZXZpb3VzQ29uc3RyYWludCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9O1xyXG59IiwibW9kdWxlIG1pbmVydmEuY29yZS5tZWFzdXJlLnRhcGlucyB7XHJcbiAgICBleHBvcnQgdmFyIGNvbXBsZXRlT3ZlcnJpZGU6IElNZWFzdXJlVGFwaW4gPSBmdW5jdGlvbiAoaW5wdXQ6IElJbnB1dCwgc3RhdGU6IElTdGF0ZSwgb3V0cHV0OiBJT3V0cHV0LCB0cmVlOiBJVXBkYXRlclRyZWUsIGF2YWlsYWJsZVNpemU6IFNpemUpOiBib29sZWFuIHtcclxuICAgICAgICBvdXRwdXQuZGlydHlGbGFncyAmPSB+RGlydHlGbGFncy5NZWFzdXJlO1xyXG4gICAgICAgIFNpemUuY29weVRvKG91dHB1dC5kZXNpcmVkU2l6ZSwgb3V0cHV0LmhpZGRlbkRlc2lyZSk7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9O1xyXG59IiwibW9kdWxlIG1pbmVydmEuY29yZS5tZWFzdXJlLnRhcGlucyB7XHJcbiAgICBleHBvcnQgdmFyIGRvT3ZlcnJpZGU6IElNZWFzdXJlVGFwaW4gPSBmdW5jdGlvbiAoaW5wdXQ6IElJbnB1dCwgc3RhdGU6IElTdGF0ZSwgb3V0cHV0OiBJT3V0cHV0LCB0cmVlOiBJVXBkYXRlclRyZWUsIGF2YWlsYWJsZVNpemU6IFNpemUpOiBib29sZWFuIHtcclxuICAgICAgICB2YXIgZHMgPSBvdXRwdXQuZGVzaXJlZFNpemU7XHJcbiAgICAgICAgZHMud2lkdGggPSBkcy5oZWlnaHQgPSAwO1xyXG4gICAgICAgIGZvciAodmFyIHdhbGtlciA9IHRyZWUud2FsaygpOyB3YWxrZXIuc3RlcCgpOykge1xyXG4gICAgICAgICAgICB2YXIgY2hpbGQgPSB3YWxrZXIuY3VycmVudDtcclxuICAgICAgICAgICAgY2hpbGQubWVhc3VyZShzdGF0ZS5hdmFpbGFibGVTaXplKTtcclxuICAgICAgICAgICAgU2l6ZS5jb3B5VG8oY2hpbGQuYXNzZXRzLmRlc2lyZWRTaXplLCBkcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfTtcclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvcmUubWVhc3VyZS50YXBpbnMge1xyXG4gICAgZXhwb3J0IHZhciBmaW5pc2hEZXNpcmVkOiBJTWVhc3VyZVRhcGluID0gZnVuY3Rpb24gKGlucHV0OiBJSW5wdXQsIHN0YXRlOiBJU3RhdGUsIG91dHB1dDogSU91dHB1dCwgdHJlZTogSVVwZGF0ZXJUcmVlLCBhdmFpbGFibGVTaXplOiBTaXplKTogYm9vbGVhbiB7XHJcbiAgICAgICAgdmFyIGRzID0gb3V0cHV0LmRlc2lyZWRTaXplO1xyXG4gICAgICAgIGhlbHBlcnMuY29lcmNlU2l6ZShkcywgaW5wdXQpO1xyXG4gICAgICAgIFRoaWNrbmVzcy5ncm93U2l6ZShpbnB1dC5tYXJnaW4sIGRzKTtcclxuICAgICAgICBkcy53aWR0aCA9IE1hdGgubWluKGRzLndpZHRoLCBhdmFpbGFibGVTaXplLndpZHRoKTtcclxuICAgICAgICBkcy5oZWlnaHQgPSBNYXRoLm1pbihkcy5oZWlnaHQsIGF2YWlsYWJsZVNpemUuaGVpZ2h0KTtcclxuICAgICAgICBpZiAoaW5wdXQudXNlTGF5b3V0Um91bmRpbmcpIHtcclxuICAgICAgICAgICAgZHMud2lkdGggPSBNYXRoLnJvdW5kKGRzLndpZHRoKTtcclxuICAgICAgICAgICAgZHMuaGVpZ2h0ID0gTWF0aC5yb3VuZChkcy5oZWlnaHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH07XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb3JlLm1lYXN1cmUudGFwaW5zIHtcclxuICAgIGV4cG9ydCB2YXIgaW52YWxpZGF0ZUZ1dHVyZTogSU1lYXN1cmVUYXBpbiA9IGZ1bmN0aW9uIChpbnB1dDogSUlucHV0LCBzdGF0ZTogSVN0YXRlLCBvdXRwdXQ6IElPdXRwdXQsIHRyZWU6IElVcGRhdGVyVHJlZSwgYXZhaWxhYmxlU2l6ZTogU2l6ZSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIG91dHB1dC5kaXJ0eUZsYWdzIHw9IERpcnR5RmxhZ3MuQXJyYW5nZTtcclxuICAgICAgICBvdXRwdXQudWlGbGFncyB8PSBVSUZsYWdzLkFycmFuZ2VIaW50O1xyXG4gICAgICAgIG91dHB1dC5kaXJ0eUZsYWdzIHw9IERpcnR5RmxhZ3MuQm91bmRzO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfTtcclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvcmUubWVhc3VyZS50YXBpbnMge1xyXG4gICAgZXhwb3J0IHZhciBwcmVwYXJlT3ZlcnJpZGU6IElNZWFzdXJlVGFwaW4gPSBmdW5jdGlvbiAoaW5wdXQ6IElJbnB1dCwgc3RhdGU6IElTdGF0ZSwgb3V0cHV0OiBJT3V0cHV0LCB0cmVlOiBJVXBkYXRlclRyZWUsIGF2YWlsYWJsZVNpemU6IFNpemUpOiBib29sZWFuIHtcclxuICAgICAgICBTaXplLmNvcHlUbyhhdmFpbGFibGVTaXplLCBzdGF0ZS5hdmFpbGFibGVTaXplKTtcclxuICAgICAgICBUaGlja25lc3Muc2hyaW5rU2l6ZShpbnB1dC5tYXJnaW4sIHN0YXRlLmF2YWlsYWJsZVNpemUpO1xyXG4gICAgICAgIGhlbHBlcnMuY29lcmNlU2l6ZShzdGF0ZS5hdmFpbGFibGVTaXplLCBpbnB1dCk7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9O1xyXG59IiwibW9kdWxlIG1pbmVydmEuY29yZS5tZWFzdXJlLnRhcGlucyB7XHJcbiAgICBleHBvcnQgdmFyIHZhbGlkYXRlOiBJTWVhc3VyZVRhcGluID0gZnVuY3Rpb24gKGlucHV0OiBJSW5wdXQsIHN0YXRlOiBJU3RhdGUsIG91dHB1dDogSU91dHB1dCwgdHJlZTogSVVwZGF0ZXJUcmVlLCBhdmFpbGFibGVTaXplOiBTaXplKTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKGlzTmFOKGF2YWlsYWJsZVNpemUud2lkdGgpIHx8IGlzTmFOKGF2YWlsYWJsZVNpemUuaGVpZ2h0KSkge1xyXG4gICAgICAgICAgICBtaW5lcnZhLmxheW91dEVycm9yKHRyZWUsIHRoaXMsIFwiQ2Fubm90IGNhbGwgTWVhc3VyZSB1c2luZyBhIHNpemUgd2l0aCBOYU4gdmFsdWVzLlwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH07XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb3JlLm1lYXN1cmUudGFwaW5zIHtcclxuICAgIGV4cG9ydCB2YXIgdmFsaWRhdGVWaXNpYmlsaXR5OiBJTWVhc3VyZVRhcGluID0gZnVuY3Rpb24gKGlucHV0OiBJSW5wdXQsIHN0YXRlOiBJU3RhdGUsIG91dHB1dDogSU91dHB1dCwgdHJlZTogSVVwZGF0ZXJUcmVlLCBhdmFpbGFibGVTaXplOiBTaXplKTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKGlucHV0LnZpc2liaWxpdHkgIT09IFZpc2liaWxpdHkuVmlzaWJsZSkge1xyXG4gICAgICAgICAgICBTaXplLmNvcHlUbyhhdmFpbGFibGVTaXplLCBvdXRwdXQucHJldmlvdXNDb25zdHJhaW50KTtcclxuICAgICAgICAgICAgdmFyIGRzID0gb3V0cHV0LmRlc2lyZWRTaXplO1xyXG4gICAgICAgICAgICBkcy53aWR0aCA9IGRzLmhlaWdodCA9IDA7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9O1xyXG59IiwibW9kdWxlIG1pbmVydmEuY29yZS5wcm9jZXNzZG93bi50YXBpbnMge1xyXG4gICAgZXhwb3J0IHZhciBjYWxjQWJzb2x1dGVYZm9ybTogSVByb2Nlc3NEb3duVGFwaW4gPSBmdW5jdGlvbiAoaW5wdXQ6IElJbnB1dCwgc3RhdGU6IElTdGF0ZSwgb3V0cHV0OiBJT3V0cHV0LCB2cGlucHV0OiBJSW5wdXQsIHRyZWU6IGNvcmUuSVVwZGF0ZXJUcmVlKTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKChpbnB1dC5kaXJ0eUZsYWdzICYgRGlydHlGbGFncy5UcmFuc2Zvcm0pID09PSAwKVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuXHJcbiAgICAgICAgdmFyIGF4ID0gb3V0cHV0LmFic29sdXRlWGZvcm07XHJcbiAgICAgICAgbWF0My5jb3B5VG8ob3V0cHV0LnJlbmRlclhmb3JtLCBheCk7XHJcbiAgICAgICAgaWYgKHZwaW5wdXQpXHJcbiAgICAgICAgICAgIG1hdDMuYXBwbHkoYXgsIHZwaW5wdXQuYWJzb2x1dGVYZm9ybSk7XHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfTtcclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvcmUucHJvY2Vzc2Rvd24udGFwaW5zIHtcclxuICAgIGV4cG9ydCB2YXIgY2FsY1JlbmRlclhmb3JtOiBJUHJvY2Vzc0Rvd25UYXBpbiA9IGZ1bmN0aW9uIChpbnB1dDogSUlucHV0LCBzdGF0ZTogSVN0YXRlLCBvdXRwdXQ6IElPdXRwdXQsIHZwaW5wdXQ6IElJbnB1dCwgdHJlZTogY29yZS5JVXBkYXRlclRyZWUpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAoKGlucHV0LmRpcnR5RmxhZ3MgJiBEaXJ0eUZsYWdzLlRyYW5zZm9ybSkgPT09IDApXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG5cclxuICAgICAgICB2YXIgcnggPSBvdXRwdXQucmVuZGVyWGZvcm07XHJcbiAgICAgICAgbWF0My5jb3B5VG8oc3RhdGUubG9jYWxYZm9ybSwgcngpO1xyXG4gICAgICAgIG1hdDMuYXBwbHkocngsIGlucHV0LmxheW91dFhmb3JtKTtcclxuICAgICAgICBpZiAoaW5wdXQuY2Fycmllclhmb3JtKVxyXG4gICAgICAgICAgICBtYXQzLmFwcGx5KHJ4LCBpbnB1dC5jYXJyaWVyWGZvcm0pO1xyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH07XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb3JlLnByb2Nlc3Nkb3duLnRhcGlucyB7XHJcbiAgICBleHBvcnQgdmFyIGNhbGNYZm9ybU9yaWdpbjogSVByb2Nlc3NEb3duVGFwaW4gPSBmdW5jdGlvbiAoaW5wdXQ6IElJbnB1dCwgc3RhdGU6IElTdGF0ZSwgb3V0cHV0OiBJT3V0cHV0LCB2cGlucHV0OiBJSW5wdXQsIHRyZWU6IGNvcmUuSVVwZGF0ZXJUcmVlKTogYm9vbGVhbiB7XHJcbiAgICAgICAgdmFyIHhvID0gc3RhdGUueGZvcm1PcmlnaW47XHJcbiAgICAgICAgdmFyIHVzZXJ4byA9IGlucHV0LnJlbmRlclRyYW5zZm9ybU9yaWdpbjtcclxuICAgICAgICBpZiAoIXVzZXJ4bykge1xyXG4gICAgICAgICAgICB4by54ID0gMDtcclxuICAgICAgICAgICAgeG8ueSA9IDA7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgeG8ueCA9IGlucHV0LmFjdHVhbFdpZHRoICogdXNlcnhvLng7XHJcbiAgICAgICAgICAgIHhvLnkgPSBpbnB1dC5hY3R1YWxIZWlnaHQgKiB1c2VyeG8ueTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9O1xyXG59IiwibW9kdWxlIG1pbmVydmEuY29yZS5wcm9jZXNzZG93bi50YXBpbnMge1xyXG4gICAgZXhwb3J0IHZhciBwcm9jZXNzSGl0VGVzdFZpc2liaWxpdHk6IElQcm9jZXNzRG93blRhcGluID0gZnVuY3Rpb24gKGlucHV0OiBJSW5wdXQsIHN0YXRlOiBJU3RhdGUsIG91dHB1dDogSU91dHB1dCwgdnBpbnB1dDogSUlucHV0LCB0cmVlOiBjb3JlLklVcGRhdGVyVHJlZSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmICgoaW5wdXQuZGlydHlGbGFncyAmIERpcnR5RmxhZ3MuSGl0VGVzdFZpc2liaWxpdHkpID09PSAwKVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuXHJcbiAgICAgICAgaWYgKHZwaW5wdXQpIHtcclxuICAgICAgICAgICAgb3V0cHV0LnRvdGFsSXNIaXRUZXN0VmlzaWJsZSA9IHZwaW5wdXQudG90YWxJc0hpdFRlc3RWaXNpYmxlICYmIGlucHV0LmlzSGl0VGVzdFZpc2libGU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgb3V0cHV0LnRvdGFsSXNIaXRUZXN0VmlzaWJsZSA9IGlucHV0LmlzSGl0VGVzdFZpc2libGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAob3V0cHV0LnRvdGFsSXNIaXRUZXN0VmlzaWJsZSAhPT0gaW5wdXQudG90YWxJc0hpdFRlc3RWaXNpYmxlKVxyXG4gICAgICAgICAgICBzdGF0ZS5zdWJ0cmVlRG93bkRpcnR5IHw9IERpcnR5RmxhZ3MuSGl0VGVzdFZpc2liaWxpdHk7XHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfTtcclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvcmUucHJvY2Vzc2Rvd24udGFwaW5zIHtcclxuICAgIC8vTk9URTogQ2FudmFzK1VzZXJDb250cm9sIGRvZXNuJ3QgZG8gdGhpc1xyXG4gICAgZXhwb3J0IHZhciBwcm9jZXNzTGF5b3V0Q2xpcDogSVByb2Nlc3NEb3duVGFwaW4gPSBmdW5jdGlvbiAoaW5wdXQ6IElJbnB1dCwgc3RhdGU6IElTdGF0ZSwgb3V0cHV0OiBJT3V0cHV0LCB2cGlucHV0OiBJSW5wdXQsIHRyZWU6IGNvcmUuSVVwZGF0ZXJUcmVlKTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKChpbnB1dC5kaXJ0eUZsYWdzICYgRGlydHlGbGFncy5MYXlvdXRDbGlwKSA9PT0gMClcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcblxyXG4gICAgICAgIHZhciBsYyA9IGlucHV0LmxheW91dENsaXA7XHJcbiAgICAgICAgdmFyIGNsYyA9IG91dHB1dC5jb21wb3NpdGVMYXlvdXRDbGlwO1xyXG4gICAgICAgIGlmICghdnBpbnB1dCB8fCBSZWN0LmlzRW1wdHkodnBpbnB1dC5jb21wb3NpdGVMYXlvdXRDbGlwKSkge1xyXG4gICAgICAgICAgICBSZWN0LmNvcHlUbyhsYywgY2xjKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBSZWN0LmNvcHlUbyh2cGlucHV0LmNvbXBvc2l0ZUxheW91dENsaXAsIGNsYyk7XHJcbiAgICAgICAgICAgIGlmICghUmVjdC5pc0VtcHR5KGxjKSlcclxuICAgICAgICAgICAgICAgIFJlY3QuaW50ZXJzZWN0aW9uKGNsYywgbGMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFSZWN0LmlzRXF1YWwoaW5wdXQuY29tcG9zaXRlTGF5b3V0Q2xpcCwgb3V0cHV0LmNvbXBvc2l0ZUxheW91dENsaXApKSB7XHJcbiAgICAgICAgICAgIHN0YXRlLnN1YnRyZWVEb3duRGlydHkgfD0gRGlydHlGbGFncy5MYXlvdXRDbGlwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9O1xyXG59IiwibW9kdWxlIG1pbmVydmEuY29yZS5wcm9jZXNzZG93bi50YXBpbnMge1xyXG4gICAgZXhwb3J0IHZhciBwcm9jZXNzTG9jYWxYZm9ybTogSVByb2Nlc3NEb3duVGFwaW4gPSBmdW5jdGlvbiAoaW5wdXQ6IElJbnB1dCwgc3RhdGU6IElTdGF0ZSwgb3V0cHV0OiBJT3V0cHV0LCB2cGlucHV0OiBJSW5wdXQsIHRyZWU6IGNvcmUuSVVwZGF0ZXJUcmVlKTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKChpbnB1dC5kaXJ0eUZsYWdzICYgRGlydHlGbGFncy5Mb2NhbFRyYW5zZm9ybSkgPT09IDApXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG5cclxuICAgICAgICB2YXIgbG9jYWwgPSBtYXQzLmlkZW50aXR5KHN0YXRlLmxvY2FsWGZvcm0pO1xyXG4gICAgICAgIHZhciByZW5kZXIgPSBpbnB1dC5yZW5kZXJUcmFuc2Zvcm07XHJcbiAgICAgICAgaWYgKCFyZW5kZXIpXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG5cclxuICAgICAgICB2YXIgb3JpZ2luID0gc3RhdGUueGZvcm1PcmlnaW47XHJcbiAgICAgICAgbWF0My50cmFuc2xhdGUobG9jYWwsIC1vcmlnaW4ueCwgLW9yaWdpbi55KTtcclxuICAgICAgICBtYXQzLmFwcGx5KGxvY2FsLCByZW5kZXIuZ2V0UmF3KCkpO1xyXG4gICAgICAgIG1hdDMudHJhbnNsYXRlKGxvY2FsLCBvcmlnaW4ueCwgb3JpZ2luLnkpO1xyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH07XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb3JlLnByb2Nlc3Nkb3duLnRhcGlucyB7XHJcbiAgICBleHBvcnQgdmFyIHByb2Nlc3NSZW5kZXJWaXNpYmlsaXR5OiBJUHJvY2Vzc0Rvd25UYXBpbiA9IGZ1bmN0aW9uIChpbnB1dDogSUlucHV0LCBzdGF0ZTogSVN0YXRlLCBvdXRwdXQ6IElPdXRwdXQsIHZwaW5wdXQ6IElJbnB1dCwgdHJlZTogY29yZS5JVXBkYXRlclRyZWUpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAoKGlucHV0LmRpcnR5RmxhZ3MgJiBEaXJ0eUZsYWdzLlJlbmRlclZpc2liaWxpdHkpID09PSAwKVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuXHJcbiAgICAgICAgLy9VcGRhdGUgYm91bmRzXHJcbiAgICAgICAgb3V0cHV0LmRpcnR5RmxhZ3MgfD0gRGlydHlGbGFncy5Cb3VuZHM7XHJcbiAgICAgICAgLy9OT1RFOiBSZW1vdmluZyB2aXN1YWwgcGFyZW50IGBVcGRhdGVCb3VuZHNgXHJcbiAgICAgICAgLy8gICAgICBJbiBvdXIgZG93biBwYXNzLCB3ZSBzaG91bGQgb25seSBiZSBhZmZlY3Rpbmcgc2VsZiBhbmQgY2hpbGRyZW5cclxuXHJcbiAgICAgICAgLy9DYWxjdWxhdGVcclxuICAgICAgICBpZiAodnBpbnB1dCkge1xyXG4gICAgICAgICAgICBvdXRwdXQudG90YWxPcGFjaXR5ID0gdnBpbnB1dC50b3RhbE9wYWNpdHkgKiBpbnB1dC5vcGFjaXR5O1xyXG4gICAgICAgICAgICBvdXRwdXQudG90YWxJc1JlbmRlclZpc2libGUgPSB2cGlucHV0LnRvdGFsSXNSZW5kZXJWaXNpYmxlICYmIChpbnB1dC52aXNpYmlsaXR5ID09PSBWaXNpYmlsaXR5LlZpc2libGUpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIG91dHB1dC50b3RhbE9wYWNpdHkgPSBpbnB1dC5vcGFjaXR5O1xyXG4gICAgICAgICAgICBvdXRwdXQudG90YWxJc1JlbmRlclZpc2libGUgPSBpbnB1dC52aXNpYmlsaXR5ID09PSBWaXNpYmlsaXR5LlZpc2libGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL1VwZGF0ZSBib3VuZHMsIHByb3BhZ2F0ZSByZW5kZXIgdmlzaWJpbGl0eVxyXG4gICAgICAgIGlmIChpbnB1dC50b3RhbElzUmVuZGVyVmlzaWJsZSAhPT0gb3V0cHV0LnRvdGFsSXNSZW5kZXJWaXNpYmxlKSB7XHJcbiAgICAgICAgICAgIG91dHB1dC5kaXJ0eUZsYWdzIHw9IERpcnR5RmxhZ3MuTmV3Qm91bmRzO1xyXG4gICAgICAgICAgICBzdGF0ZS5zdWJ0cmVlRG93bkRpcnR5IHw9IERpcnR5RmxhZ3MuUmVuZGVyVmlzaWJpbGl0eTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGlucHV0LnRvdGFsT3BhY2l0eSAhPT0gb3V0cHV0LnRvdGFsT3BhY2l0eSkge1xyXG4gICAgICAgICAgICBzdGF0ZS5zdWJ0cmVlRG93bkRpcnR5IHw9IERpcnR5RmxhZ3MuUmVuZGVyVmlzaWJpbGl0eTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfTtcclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvcmUucHJvY2Vzc2Rvd24udGFwaW5zIHtcclxuICAgIGV4cG9ydCB2YXIgcHJvY2Vzc1hmb3JtOiBJUHJvY2Vzc0Rvd25UYXBpbiA9IGZ1bmN0aW9uIChpbnB1dDogSUlucHV0LCBzdGF0ZTogSVN0YXRlLCBvdXRwdXQ6IElPdXRwdXQsIHZwaW5wdXQ6IElJbnB1dCwgdHJlZTogY29yZS5JVXBkYXRlclRyZWUpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAoKGlucHV0LmRpcnR5RmxhZ3MgJiBEaXJ0eUZsYWdzLlRyYW5zZm9ybSkgPT09IDApXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG5cclxuICAgICAgICBpZiAoIW1hdDMuZXF1YWwoaW5wdXQucmVuZGVyWGZvcm0sIG91dHB1dC5yZW5kZXJYZm9ybSkpIHtcclxuICAgICAgICAgICAgLy9OT1RFOiBSZW1vdmluZyB2aXN1YWwgcGFyZW50IChvciBzdXJmYWNlKSBgSW52YWxpZGF0ZWBcclxuICAgICAgICAgICAgLy8gICAgICBJbiBvdXIgZG93biBwYXNzLCB3ZSBzaG91bGQgb25seSBiZSBpbnZhbGlkYXRpbmcgc2VsZiBhbmQgY2hpbGRyZW5cclxuICAgICAgICAgICAgb3V0cHV0LmRpcnR5RmxhZ3MgfD0gRGlydHlGbGFncy5OZXdCb3VuZHM7XHJcbiAgICAgICAgICAgIHN0YXRlLnN1YnRyZWVEb3duRGlydHkgfD0gRGlydHlGbGFncy5UcmFuc2Zvcm07XHJcbiAgICAgICAgfSBlbHNlIGlmICghbWF0My5lcXVhbChpbnB1dC5hYnNvbHV0ZVhmb3JtLCBvdXRwdXQuYWJzb2x1dGVYZm9ybSkpIHtcclxuICAgICAgICAgICAgc3RhdGUuc3VidHJlZURvd25EaXJ0eSB8PSBEaXJ0eUZsYWdzLlRyYW5zZm9ybTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vVE9ETzogV2UgY2FuIG9wdGltaXplIHRvIHNoaWZ0IGJvdW5kcyByYXRoZXIgdGhhbiBnb2luZyB0aHJvdWdoIGFuIFVwZGF0ZUJvdW5kcyBpbnZhbGlkYXRpb25cclxuICAgICAgICBvdXRwdXQuZGlydHlGbGFncyB8PSBEaXJ0eUZsYWdzLkJvdW5kcztcclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9O1xyXG59IiwibW9kdWxlIG1pbmVydmEuY29yZS5wcm9jZXNzZG93bi50YXBpbnMge1xyXG4gICAgZXhwb3J0IHZhciBwcm9wYWdhdGVEaXJ0eVRvQ2hpbGRyZW46IElQcm9jZXNzRG93blRhcGluID0gZnVuY3Rpb24gKGlucHV0OiBJSW5wdXQsIHN0YXRlOiBJU3RhdGUsIG91dHB1dDogSU91dHB1dCwgdnBpbnB1dDogSUlucHV0LCB0cmVlOiBjb3JlLklVcGRhdGVyVHJlZSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHZhciBuZXdEb3duRGlydHkgPSBzdGF0ZS5zdWJ0cmVlRG93bkRpcnR5ICYgRGlydHlGbGFncy5Qcm9wYWdhdGVEb3duO1xyXG4gICAgICAgIGlmIChuZXdEb3duRGlydHkgPT09IDApXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIGZvciAodmFyIHdhbGtlciA9IHRyZWUud2FsaygpOyB3YWxrZXIuc3RlcCgpOykge1xyXG4gICAgICAgICAgICB3YWxrZXIuY3VycmVudC5hc3NldHMuZGlydHlGbGFncyB8PSBuZXdEb3duRGlydHk7XHJcbiAgICAgICAgICAgIFVwZGF0ZXIuJCRhZGREb3duRGlydHkod2Fsa2VyLmN1cnJlbnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH07XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb3JlLnByb2Nlc3N1cC50YXBpbnMge1xyXG4gICAgZXhwb3J0IHZhciBjYWxjQWN0dWFsU2l6ZTogSVByb2Nlc3NVcFRhcGluID0gZnVuY3Rpb24gKGlucHV0OiBJSW5wdXQsIHN0YXRlOiBJU3RhdGUsIG91dHB1dDogSU91dHB1dCwgdHJlZTogY29yZS5JVXBkYXRlclRyZWUpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAoKGlucHV0LmRpcnR5RmxhZ3MgJiBEaXJ0eUZsYWdzLkJvdW5kcykgPT09IDApXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG5cclxuICAgICAgICB2YXIgYWN0dWFsID0gc3RhdGUuYWN0dWFsU2l6ZTtcclxuICAgICAgICBhY3R1YWwud2lkdGggPSBpbnB1dC5hY3R1YWxXaWR0aDtcclxuICAgICAgICBhY3R1YWwuaGVpZ2h0ID0gaW5wdXQuYWN0dWFsSGVpZ2h0O1xyXG4gICAgICAgIGhlbHBlcnMuY29lcmNlU2l6ZShhY3R1YWwsIGlucHV0KTtcclxuICAgICAgICBpZiAoaXNOYU4oYWN0dWFsLndpZHRoKSlcclxuICAgICAgICAgICAgYWN0dWFsLndpZHRoID0gMDtcclxuICAgICAgICBpZiAoaXNOYU4oYWN0dWFsLmhlaWdodCkpXHJcbiAgICAgICAgICAgIGFjdHVhbC5oZWlnaHQgPSAwO1xyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH07XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb3JlLnByb2Nlc3N1cC50YXBpbnMge1xyXG4gICAgZXhwb3J0IHZhciBjYWxjRXh0ZW50czogSVByb2Nlc3NVcFRhcGluID0gZnVuY3Rpb24gKGlucHV0OiBJSW5wdXQsIHN0YXRlOiBJU3RhdGUsIG91dHB1dDogSU91dHB1dCwgdHJlZTogY29yZS5JVXBkYXRlclRyZWUpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAoKGlucHV0LmRpcnR5RmxhZ3MgJiBEaXJ0eUZsYWdzLkJvdW5kcykgPT09IDApXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG5cclxuICAgICAgICB2YXIgZSA9IG91dHB1dC5leHRlbnRzO1xyXG4gICAgICAgIHZhciBld2MgPSBvdXRwdXQuZXh0ZW50c1dpdGhDaGlsZHJlbjtcclxuICAgICAgICBlLnggPSBld2MueCA9IDA7XHJcbiAgICAgICAgZS55ID0gZXdjLnkgPSAwO1xyXG4gICAgICAgIHZhciBhcyA9IHN0YXRlLmFjdHVhbFNpemU7XHJcbiAgICAgICAgZS53aWR0aCA9IGV3Yy53aWR0aCA9IGFzLndpZHRoO1xyXG4gICAgICAgIGUuaGVpZ2h0ID0gZXdjLmhlaWdodCA9IGFzLmhlaWdodDtcclxuXHJcbiAgICAgICAgdmFyIGFzc2V0czogSVVwZGF0ZXJBc3NldHM7XHJcbiAgICAgICAgZm9yICh2YXIgd2Fsa2VyID0gdHJlZS53YWxrKCk7IHdhbGtlci5zdGVwKCk7KSB7XHJcbiAgICAgICAgICAgIGFzc2V0cyA9IHdhbGtlci5jdXJyZW50LmFzc2V0cztcclxuICAgICAgICAgICAgaWYgKGFzc2V0cy50b3RhbElzUmVuZGVyVmlzaWJsZSlcclxuICAgICAgICAgICAgICAgIFJlY3QudW5pb24oZXdjLCBhc3NldHMuZ2xvYmFsQm91bmRzV2l0aENoaWxkcmVuKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfTtcclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvcmUucHJvY2Vzc3VwLnRhcGlucyB7XHJcbiAgICBleHBvcnQgdmFyIGNhbGNQYWludEJvdW5kczogSVByb2Nlc3NVcFRhcGluID0gZnVuY3Rpb24gKGlucHV0OiBJSW5wdXQsIHN0YXRlOiBJU3RhdGUsIG91dHB1dDogSU91dHB1dCwgdHJlZTogY29yZS5JVXBkYXRlclRyZWUpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAoKGlucHV0LmRpcnR5RmxhZ3MgJiBEaXJ0eUZsYWdzLkJvdW5kcykgPT09IDApXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG5cclxuICAgICAgICBoZWxwZXJzLmludGVyc2VjdEJvdW5kc1dpdGhDbGlwUGF0aChvdXRwdXQuZ2xvYmFsQm91bmRzV2l0aENoaWxkcmVuLCBvdXRwdXQuZXh0ZW50c1dpdGhDaGlsZHJlbiwgaW5wdXQuZWZmZWN0UGFkZGluZywgaW5wdXQucmVuZGVyWGZvcm0sIGlucHV0LmNsaXAsIGlucHV0LmxheW91dENsaXApO1xyXG4gICAgICAgIGhlbHBlcnMuaW50ZXJzZWN0Qm91bmRzV2l0aENsaXBQYXRoKG91dHB1dC5zdXJmYWNlQm91bmRzV2l0aENoaWxkcmVuLCBvdXRwdXQuZXh0ZW50c1dpdGhDaGlsZHJlbiwgaW5wdXQuZWZmZWN0UGFkZGluZywgaW5wdXQuYWJzb2x1dGVYZm9ybSwgaW5wdXQuY2xpcCwgaW5wdXQubGF5b3V0Q2xpcCk7XHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfTtcclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvcmUucHJvY2Vzc3VwLnRhcGlucyB7XHJcbiAgICBleHBvcnQgdmFyIHByb2Nlc3NCb3VuZHM6IElQcm9jZXNzVXBUYXBpbiA9IGZ1bmN0aW9uIChpbnB1dDogSUlucHV0LCBzdGF0ZTogSVN0YXRlLCBvdXRwdXQ6IElPdXRwdXQsIHRyZWU6IGNvcmUuSVVwZGF0ZXJUcmVlKTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKChpbnB1dC5kaXJ0eUZsYWdzICYgRGlydHlGbGFncy5Cb3VuZHMpID09PSAwKVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICBzdGF0ZS5oYXNOZXdCb3VuZHMgPSBmYWxzZTtcclxuICAgICAgICBpZiAoIVJlY3QuaXNFcXVhbChpbnB1dC5nbG9iYWxCb3VuZHNXaXRoQ2hpbGRyZW4sIG91dHB1dC5nbG9iYWxCb3VuZHNXaXRoQ2hpbGRyZW4pKSB7XHJcbiAgICAgICAgICAgIHZhciB2byA9IHRyZWUudmlzdWFsT3duZXI7XHJcbiAgICAgICAgICAgIHZvLnVwZGF0ZUJvdW5kcygpO1xyXG4gICAgICAgICAgICB2by5pbnZhbGlkYXRlKGlucHV0LnN1cmZhY2VCb3VuZHNXaXRoQ2hpbGRyZW4pO1xyXG4gICAgICAgICAgICBzdGF0ZS5oYXNOZXdCb3VuZHMgPSB0cnVlO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoIVJlY3QuaXNFcXVhbChpbnB1dC5leHRlbnRzV2l0aENoaWxkcmVuLCBvdXRwdXQuZXh0ZW50c1dpdGhDaGlsZHJlbikgfHwgaW5wdXQuZm9yY2VJbnZhbGlkYXRlKSB7XHJcbiAgICAgICAgICAgIHN0YXRlLmhhc05ld0JvdW5kcyA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG91dHB1dC5mb3JjZUludmFsaWRhdGUgPSBmYWxzZTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH07XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb3JlLnByb2Nlc3N1cC50YXBpbnMge1xyXG4gICAgZXhwb3J0IHZhciBwcm9jZXNzSW52YWxpZGF0ZTogSVByb2Nlc3NVcFRhcGluID0gZnVuY3Rpb24gKGlucHV0OiBJSW5wdXQsIHN0YXRlOiBJU3RhdGUsIG91dHB1dDogSU91dHB1dCwgdHJlZTogY29yZS5JVXBkYXRlclRyZWUpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAoKGlucHV0LmRpcnR5RmxhZ3MgJiBEaXJ0eUZsYWdzLkludmFsaWRhdGUpID09PSAwICYmICFzdGF0ZS5oYXNJbnZhbGlkYXRlKVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB2YXIgZGlydHkgPSBvdXRwdXQuZGlydHlSZWdpb247XHJcbiAgICAgICAgdHJlZS52aXN1YWxPd25lci5pbnZhbGlkYXRlKGRpcnR5KTtcclxuICAgICAgICBkaXJ0eS54ID0gZGlydHkueSA9IGRpcnR5LndpZHRoID0gZGlydHkuaGVpZ2h0ID0gMDtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH07XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb3JlLnByb2Nlc3N1cC50YXBpbnMge1xyXG4gICAgZXhwb3J0IHZhciBwcm9jZXNzTmV3Qm91bmRzOiBJUHJvY2Vzc1VwVGFwaW4gPSBmdW5jdGlvbiAoaW5wdXQ6IElJbnB1dCwgc3RhdGU6IElTdGF0ZSwgb3V0cHV0OiBJT3V0cHV0LCB0cmVlOiBjb3JlLklVcGRhdGVyVHJlZSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmICgoaW5wdXQuZGlydHlGbGFncyAmIERpcnR5RmxhZ3MuTmV3Qm91bmRzKSA9PT0gMCAmJiAhc3RhdGUuaGFzTmV3Qm91bmRzKVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICBvdXRwdXQuZGlydHlGbGFncyB8PSBEaXJ0eUZsYWdzLkludmFsaWRhdGU7XHJcbiAgICAgICAgc3RhdGUuaGFzSW52YWxpZGF0ZSA9IHRydWU7XHJcbiAgICAgICAgUmVjdC51bmlvbihvdXRwdXQuZGlydHlSZWdpb24sIG91dHB1dC5zdXJmYWNlQm91bmRzV2l0aENoaWxkcmVuKTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH07XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb3JlLnJlbmRlci50YXBpbnMge1xyXG4gICAgZXhwb3J0IHZhciBhcHBseUNsaXA6IElSZW5kZXJUYXBpbiA9IGZ1bmN0aW9uIChpbnB1dDogSUlucHV0LCBzdGF0ZTogSVN0YXRlLCBvdXRwdXQ6IElPdXRwdXQsIGN0eDogUmVuZGVyQ29udGV4dCwgcmVnaW9uOiBSZWN0LCB0cmVlOiBJVXBkYXRlclRyZWUpOiBib29sZWFuIHtcclxuICAgICAgICB2YXIgY2xpcCA9IGlucHV0LmNsaXA7XHJcbiAgICAgICAgaWYgKGNsaXApXHJcbiAgICAgICAgICAgIGN0eC5jbGlwR2VvbWV0cnkoY2xpcCk7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9O1xyXG59IiwibW9kdWxlIG1pbmVydmEuY29yZS5yZW5kZXIudGFwaW5zIHtcclxuICAgIGV4cG9ydCB2YXIgZG9SZW5kZXI6IElSZW5kZXJUYXBpbiA9IGZ1bmN0aW9uIChpbnB1dDogSUlucHV0LCBzdGF0ZTogSVN0YXRlLCBvdXRwdXQ6IElPdXRwdXQsIGN0eDogUmVuZGVyQ29udGV4dCwgcmVnaW9uOiBSZWN0LCB0cmVlOiBJVXBkYXRlclRyZWUpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH07XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb3JlLnJlbmRlci50YXBpbnMge1xyXG4gICAgZXhwb3J0IHZhciBwb3N0UmVuZGVyOiBJUmVuZGVyVGFwaW4gPSBmdW5jdGlvbiAoaW5wdXQ6IElJbnB1dCwgc3RhdGU6IElTdGF0ZSwgb3V0cHV0OiBJT3V0cHV0LCBjdHg6IFJlbmRlckNvbnRleHQsIHJlZ2lvbjogUmVjdCwgdHJlZTogSVVwZGF0ZXJUcmVlKTogYm9vbGVhbiB7XHJcbiAgICAgICAgdmFyIGVmZmVjdCA9IGlucHV0LmVmZmVjdDtcclxuICAgICAgICBpZiAoIWVmZmVjdClcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgZWZmZWN0LlBvc3RSZW5kZXIoY3R4KTtcclxuICAgICAgICBjdHgucmVzdG9yZSgpO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfTtcclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvcmUucmVuZGVyLnRhcGlucyB7XHJcbiAgICBleHBvcnQgdmFyIHByZXBhcmVDb250ZXh0OiBJUmVuZGVyVGFwaW4gPSBmdW5jdGlvbiAoaW5wdXQ6IElJbnB1dCwgc3RhdGU6IElTdGF0ZSwgb3V0cHV0OiBJT3V0cHV0LCBjdHg6IFJlbmRlckNvbnRleHQsIHJlZ2lvbjogUmVjdCwgdHJlZTogSVVwZGF0ZXJUcmVlKTogYm9vbGVhbiB7XHJcbiAgICAgICAgY3R4LnNhdmUoKTtcclxuICAgICAgICBjdHgucHJlYXBwbHkoaW5wdXQucmVuZGVyWGZvcm0pO1xyXG4gICAgICAgIGN0eC5yYXcuZ2xvYmFsQWxwaGEgPSBpbnB1dC50b3RhbE9wYWNpdHk7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9O1xyXG59IiwibW9kdWxlIG1pbmVydmEuY29yZS5yZW5kZXIudGFwaW5zIHtcclxuICAgIGV4cG9ydCB2YXIgcHJlUmVuZGVyOiBJUmVuZGVyVGFwaW4gPSBmdW5jdGlvbiAoaW5wdXQ6IElJbnB1dCwgc3RhdGU6IElTdGF0ZSwgb3V0cHV0OiBJT3V0cHV0LCBjdHg6IFJlbmRlckNvbnRleHQsIHJlZ2lvbjogUmVjdCwgdHJlZTogSVVwZGF0ZXJUcmVlKTogYm9vbGVhbiB7XHJcbiAgICAgICAgdmFyIGVmZmVjdCA9IGlucHV0LmVmZmVjdDtcclxuICAgICAgICBpZiAoIWVmZmVjdClcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgY3R4LnNhdmUoKTtcclxuICAgICAgICBlZmZlY3QuUHJlUmVuZGVyKGN0eCk7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9O1xyXG59IiwibW9kdWxlIG1pbmVydmEuY29yZS5yZW5kZXIudGFwaW5zIHtcclxuICAgIGV4cG9ydCB2YXIgcmVuZGVyQ2hpbGRyZW46IElSZW5kZXJUYXBpbiA9IGZ1bmN0aW9uIChpbnB1dDogSUlucHV0LCBzdGF0ZTogSVN0YXRlLCBvdXRwdXQ6IElPdXRwdXQsIGN0eDogUmVuZGVyQ29udGV4dCwgcmVnaW9uOiBSZWN0LCB0cmVlOiBJVXBkYXRlclRyZWUpOiBib29sZWFuIHtcclxuICAgICAgICBmb3IgKHZhciB3YWxrZXIgPSB0cmVlLndhbGsoV2Fsa0RpcmVjdGlvbi5aRm9yd2FyZCk7IHdhbGtlci5zdGVwKCk7KSB7XHJcbiAgICAgICAgICAgIHdhbGtlci5jdXJyZW50LnJlbmRlcihjdHgsIHN0YXRlLnJlbmRlclJlZ2lvbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfTtcclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvcmUucmVuZGVyLnRhcGlucyB7XHJcbiAgICBleHBvcnQgdmFyIHJlc3RvcmVDb250ZXh0OiBJUmVuZGVyVGFwaW4gPSBmdW5jdGlvbiAoaW5wdXQ6IElJbnB1dCwgc3RhdGU6IElTdGF0ZSwgb3V0cHV0OiBJT3V0cHV0LCBjdHg6IFJlbmRlckNvbnRleHQsIHJlZ2lvbjogUmVjdCwgdHJlZTogSVVwZGF0ZXJUcmVlKTogYm9vbGVhbiB7XHJcbiAgICAgICAgY3R4LnJlc3RvcmUoKTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH07XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb3JlLnJlbmRlci50YXBpbnMge1xyXG4gICAgZXhwb3J0IHZhciB2YWxpZGF0ZTogSVJlbmRlclRhcGluID0gZnVuY3Rpb24gKGlucHV0OiBJSW5wdXQsIHN0YXRlOiBJU3RhdGUsIG91dHB1dDogSU91dHB1dCwgY3R4OiBSZW5kZXJDb250ZXh0LCByZWdpb246IFJlY3QsIHRyZWU6IElVcGRhdGVyVHJlZSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiAhIWlucHV0LnRvdGFsSXNSZW5kZXJWaXNpYmxlXHJcbiAgICAgICAgICAgICYmICgoaW5wdXQudG90YWxPcGFjaXR5ICogMjU1KSA+PSAwLjUpO1xyXG4gICAgfTtcclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvcmUucmVuZGVyLnRhcGlucyB7XHJcbiAgICBleHBvcnQgdmFyIHZhbGlkYXRlUmVnaW9uOiBJUmVuZGVyVGFwaW4gPSBmdW5jdGlvbiAoaW5wdXQ6IElJbnB1dCwgc3RhdGU6IElTdGF0ZSwgb3V0cHV0OiBJT3V0cHV0LCBjdHg6IFJlbmRlckNvbnRleHQsIHJlZ2lvbjogUmVjdCwgdHJlZTogSVVwZGF0ZXJUcmVlKTogYm9vbGVhbiB7XHJcbiAgICAgICAgdmFyIHIgPSBzdGF0ZS5yZW5kZXJSZWdpb247XHJcbiAgICAgICAgUmVjdC5jb3B5VG8oaW5wdXQuc3VyZmFjZUJvdW5kc1dpdGhDaGlsZHJlbiwgcik7XHJcbiAgICAgICAgUmVjdC5yb3VuZE91dChyKTtcclxuICAgICAgICBSZWN0LmludGVyc2VjdGlvbihyLCByZWdpb24pO1xyXG4gICAgICAgIHJldHVybiByLndpZHRoID4gMCAmJiByLmhlaWdodCA+IDA7XHJcbiAgICB9O1xyXG59IiwibW9kdWxlIG1pbmVydmEuY29yZS5zaXppbmcudGFwaW5zIHtcclxuICAgIGV4cG9ydCB2YXIgY2FsY1VzZVJlbmRlcjogSVNpemluZ1RhcGluID0gZnVuY3Rpb24gKGlucHV0OiBJSW5wdXQsIHN0YXRlOiBJU3RhdGUsIG91dHB1dDogSU91dHB1dCwgdHJlZTogSVVwZGF0ZXJUcmVlKTogYm9vbGVhbiB7XHJcbiAgICAgICAgc3RhdGUudXNlUmVuZGVyID0gdHJ1ZTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH07XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb3JlLnNpemluZy50YXBpbnMge1xyXG4gICAgZXhwb3J0IHZhciBjb21wdXRlQWN0dWFsOiBJU2l6aW5nVGFwaW4gPSBmdW5jdGlvbiAoaW5wdXQ6IElJbnB1dCwgc3RhdGU6IElTdGF0ZSwgb3V0cHV0OiBJT3V0cHV0LCB0cmVlOiBJVXBkYXRlclRyZWUpOiBib29sZWFuIHtcclxuICAgICAgICB2YXIgYXMgPSBvdXRwdXQuYWN0dWFsU2l6ZTtcclxuICAgICAgICBhcy53aWR0aCA9IGFzLmhlaWdodCA9IDA7XHJcbiAgICAgICAgaWYgKGlucHV0LnZpc2liaWxpdHkgIT09IFZpc2liaWxpdHkuVmlzaWJsZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChzdGF0ZS51c2VSZW5kZXIpIHtcclxuICAgICAgICAgICAgU2l6ZS5jb3B5VG8oaW5wdXQucmVuZGVyU2l6ZSwgYXMpO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGhlbHBlcnMuY29lcmNlU2l6ZShhcywgaW5wdXQpO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfTtcclxufSIsIm1vZHVsZSBtaW5lcnZhLnNoYXBlcy5lbGxpcHNlLmhlbHBlcnMge1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGRyYXcgKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCB4OiBudW1iZXIsIHk6IG51bWJlciwgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpIHtcclxuICAgICAgICB2YXIgcmFkaXVzWCA9IHdpZHRoIC8gMjtcclxuICAgICAgICB2YXIgcmFkaXVzWSA9IGhlaWdodCAvIDI7XHJcbiAgICAgICAgdmFyIHJpZ2h0ID0geCArIHdpZHRoO1xyXG4gICAgICAgIHZhciBib3R0b20gPSB5ICsgaGVpZ2h0O1xyXG4gICAgICAgIHZhciBjZW50ZXJYID0geCArIHJhZGl1c1g7XHJcbiAgICAgICAgdmFyIGNlbnRlclkgPSB5ICsgcmFkaXVzWTtcclxuXHJcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGlmICh3aWR0aCA9PT0gaGVpZ2h0KSB7IC8vY2lyY2xlXHJcbiAgICAgICAgICAgIGN0eC5hcmMoY2VudGVyWCwgY2VudGVyWSwgcmFkaXVzWCwgMCwgTWF0aC5QSSAqIDIsIGZhbHNlKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGthcHBhID0gLjU1MjI4NDg7IC8vIDQgKiAoKHNxcnQoMikgLSAxKSAvIDMpXHJcbiAgICAgICAgdmFyIG94ID0gcmFkaXVzWCAqIGthcHBhO1xyXG4gICAgICAgIHZhciBveSA9IHJhZGl1c1kgKiBrYXBwYTtcclxuXHJcbiAgICAgICAgLy9tb3ZlIHRvIGxlZnQgZWRnZSwgaGFsZndheSBkb3duXHJcbiAgICAgICAgY3R4Lm1vdmVUbyh4LCBjZW50ZXJZKTtcclxuICAgICAgICAvL3RvcCBsZWZ0IGJlemllciBjdXJ2ZVxyXG4gICAgICAgIGN0eC5iZXppZXJDdXJ2ZVRvKHgsIGNlbnRlclkgLSBveSwgY2VudGVyWCAtIG94LCB5LCBjZW50ZXJYLCB5KTtcclxuICAgICAgICAvL3RvcCByaWdodCBiZXppZXIgY3VydmVcclxuICAgICAgICBjdHguYmV6aWVyQ3VydmVUbyhjZW50ZXJYICsgb3gsIHksIHJpZ2h0LCBjZW50ZXJZIC0gb3ksIHJpZ2h0LCBjZW50ZXJZKTtcclxuICAgICAgICAvL2JvdHRvbSByaWdodCBiZXppZXIgY3VydmVcclxuICAgICAgICBjdHguYmV6aWVyQ3VydmVUbyhyaWdodCwgY2VudGVyWSArIG95LCBjZW50ZXJYICsgb3gsIGJvdHRvbSwgY2VudGVyWCwgYm90dG9tKTtcclxuICAgICAgICAvL2JvdHRvbSBsZWZ0IGJlemllciBjdXJ2ZVxyXG4gICAgICAgIGN0eC5iZXppZXJDdXJ2ZVRvKGNlbnRlclggLSBveCwgYm90dG9tLCB4LCBjZW50ZXJZICsgb3ksIHgsIGNlbnRlclkpO1xyXG4gICAgICAgIGN0eC5jbG9zZVBhdGgoKTtcclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLnNoYXBlcy5zaGFwZS5oaXR0ZXN0IHtcclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUhpdFRlc3REYXRhIGV4dGVuZHMgY29yZS5oaXR0ZXN0LklIaXRUZXN0RGF0YSB7XHJcbiAgICAgICAgYXNzZXRzOiBJU2hhcGVVcGRhdGVyQXNzZXRzO1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBjbGFzcyBTaGFwZUhpdFRlc3RQaXBlRGVmIGV4dGVuZHMgY29yZS5oaXR0ZXN0LkhpdFRlc3RQaXBlRGVmIHtcclxuICAgICAgICBjb25zdHJ1Y3RvciAoKSB7XHJcbiAgICAgICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgICAgIHRoaXMucmVwbGFjZVRhcGluKCdjYW5IaXRJbnNpZGUnLCB0YXBpbnMuY2FuSGl0SW5zaWRlKVxyXG4gICAgICAgICAgICAgICAgLnJlcGxhY2VUYXBpbignaW5zaWRlQ2hpbGRyZW4nLCB0YXBpbnMuaW5zaWRlQ2hpbGRyZW4pXHJcbiAgICAgICAgICAgICAgICAuYWRkVGFwaW5BZnRlcignaW5zaWRlT2JqZWN0JywgJ2NhbkhpdFNoYXBlJywgdGFwaW5zLmNhbkhpdFNoYXBlKVxyXG4gICAgICAgICAgICAgICAgLmFkZFRhcGluQWZ0ZXIoJ2NhbkhpdFNoYXBlJywgJ3ByZXBhcmVTaGFwZScsIHRhcGlucy5wcmVwYXJlU2hhcGUpXHJcbiAgICAgICAgICAgICAgICAuYWRkVGFwaW5BZnRlcigncHJlcGFyZVNoYXBlJywgJ2RyYXdTaGFwZScsIHRhcGlucy5kcmF3U2hhcGUpXHJcbiAgICAgICAgICAgICAgICAuYWRkVGFwaW5BZnRlcignZHJhd1NoYXBlJywgJ2ZpbmlzaFNoYXBlJywgdGFwaW5zLmZpbmlzaFNoYXBlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vc2hhcGUvaGl0dGVzdC9TaGFwZUhpdFRlc3RQaXBlRGVmXCIgLz5cclxuXHJcbm1vZHVsZSBtaW5lcnZhLnNoYXBlcy5lbGxpcHNlLmhpdHRlc3Qge1xyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJSGl0VGVzdERhdGEgZXh0ZW5kcyBzaGFwZS5oaXR0ZXN0LklIaXRUZXN0RGF0YSB7XHJcbiAgICAgICAgYXNzZXRzOiBJRWxsaXBzZVVwZGF0ZXJBc3NldHM7XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGNsYXNzIEVsbGlwc2VIaXRUZXN0UGlwZURlZiBleHRlbmRzIHNoYXBlLmhpdHRlc3QuU2hhcGVIaXRUZXN0UGlwZURlZiB7XHJcbiAgICAgICAgY29uc3RydWN0b3IgKCkge1xyXG4gICAgICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgICAgICB0aGlzLnJlcGxhY2VUYXBpbignZHJhd1NoYXBlJywgdGFwaW5zLmRyYXdTaGFwZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBtb2R1bGUgdGFwaW5zIHtcclxuICAgICAgICBleHBvcnQgZnVuY3Rpb24gZHJhd1NoYXBlIChkYXRhOiBJSGl0VGVzdERhdGEsIHBvczogUG9pbnQsIGhpdExpc3Q6IGNvcmUuVXBkYXRlcltdLCBjdHg6IGNvcmUucmVuZGVyLlJlbmRlckNvbnRleHQpOiBib29sZWFuIHtcclxuICAgICAgICAgICAgdmFyIHNyID0gZGF0YS5hc3NldHMuc2hhcGVSZWN0O1xyXG4gICAgICAgICAgICBoZWxwZXJzLmRyYXcoY3R4LnJhdywgc3IueCwgc3IueSwgc3Iud2lkdGgsIHNyLmhlaWdodCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLnNoYXBlcy5zaGFwZS5tZWFzdXJlIHtcclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUlucHV0IGV4dGVuZHMgY29yZS5tZWFzdXJlLklJbnB1dCwgSVNoYXBlUHJvcGVydGllcyB7XHJcbiAgICAgICAgbmF0dXJhbEJvdW5kczogUmVjdDtcclxuICAgIH1cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSVN0YXRlIGV4dGVuZHMgY29yZS5tZWFzdXJlLklTdGF0ZSB7XHJcbiAgICB9XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElPdXRwdXQgZXh0ZW5kcyBjb3JlLm1lYXN1cmUuSU91dHB1dCB7XHJcbiAgICAgICAgbmF0dXJhbEJvdW5kczogUmVjdDtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgY2xhc3MgU2hhcGVNZWFzdXJlUGlwZURlZiBleHRlbmRzIGNvcmUubWVhc3VyZS5NZWFzdXJlUGlwZURlZiB7XHJcbiAgICAgICAgY29uc3RydWN0b3IgKCkge1xyXG4gICAgICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgICAgICB0aGlzLmFkZFRhcGluQmVmb3JlKCdkb092ZXJyaWRlJywgJ2NhbGNOYXR1cmFsQm91bmRzJywgdGFwaW5zLmNhbGNOYXR1cmFsQm91bmRzKVxyXG4gICAgICAgICAgICAgICAgLnJlcGxhY2VUYXBpbignZG9PdmVycmlkZScsIHRhcGlucy5kb092ZXJyaWRlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNyZWF0ZU91dHB1dCAoKSB7XHJcbiAgICAgICAgICAgIHZhciBvdXRwdXQgPSA8SU91dHB1dD5zdXBlci5jcmVhdGVPdXRwdXQoKTtcclxuICAgICAgICAgICAgb3V0cHV0Lm5hdHVyYWxCb3VuZHMgPSBuZXcgUmVjdCgpO1xyXG4gICAgICAgICAgICByZXR1cm4gb3V0cHV0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJlcGFyZSAoaW5wdXQ6IElJbnB1dCwgc3RhdGU6IElTdGF0ZSwgb3V0cHV0OiBJT3V0cHV0KSB7XHJcbiAgICAgICAgICAgIFJlY3QuY29weVRvKGlucHV0Lm5hdHVyYWxCb3VuZHMsIG91dHB1dC5uYXR1cmFsQm91bmRzKTtcclxuICAgICAgICAgICAgc3VwZXIucHJlcGFyZShpbnB1dCwgc3RhdGUsIG91dHB1dCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmbHVzaCAoaW5wdXQ6IElJbnB1dCwgc3RhdGU6IElTdGF0ZSwgb3V0cHV0OiBJT3V0cHV0KSB7XHJcbiAgICAgICAgICAgIHN1cGVyLmZsdXNoKGlucHV0LCBzdGF0ZSwgb3V0cHV0KTtcclxuICAgICAgICAgICAgUmVjdC5jb3B5VG8ob3V0cHV0Lm5hdHVyYWxCb3VuZHMsIGlucHV0Lm5hdHVyYWxCb3VuZHMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9zaGFwZS9tZWFzdXJlL1NoYXBlTWVhc3VyZVBpcGVEZWZcIiAvPlxyXG5cclxubW9kdWxlIG1pbmVydmEuc2hhcGVzLmVsbGlwc2UubWVhc3VyZSB7XHJcbiAgICBleHBvcnQgY2xhc3MgRWxsaXBzZU1lYXN1cmVQaXBlRGVmIGV4dGVuZHMgc2hhcGUubWVhc3VyZS5TaGFwZU1lYXN1cmVQaXBlRGVmIHtcclxuICAgICAgICBjb25zdHJ1Y3RvciAoKSB7XHJcbiAgICAgICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkVGFwaW5CZWZvcmUoJ2RvT3ZlcnJpZGUnLCAnc2hyaW5rQXZhaWxhYmxlJywgdGFwaW5zLnNocmlua0F2YWlsYWJsZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBtb2R1bGUgdGFwaW5zIHtcclxuICAgICAgICBleHBvcnQgZnVuY3Rpb24gc2hyaW5rQXZhaWxhYmxlIChpbnB1dDogc2hhcGUubWVhc3VyZS5JSW5wdXQsIHN0YXRlOiBzaGFwZS5tZWFzdXJlLklTdGF0ZSwgb3V0cHV0OiBzaGFwZS5tZWFzdXJlLklPdXRwdXQsIHRyZWU6IGNvcmUuSVVwZGF0ZXJUcmVlKSB7XHJcbiAgICAgICAgICAgIHZhciBhdmFpbGFibGUgPSBzdGF0ZS5hdmFpbGFibGVTaXplO1xyXG4gICAgICAgICAgICBhdmFpbGFibGUud2lkdGggPSBhdmFpbGFibGUuaGVpZ2h0ID0gMDtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwibW9kdWxlIG1pbmVydmEuc2hhcGVzLnNoYXBlLnJlbmRlciB7XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElJbnB1dCBleHRlbmRzIGNvcmUucmVuZGVyLklJbnB1dCB7XHJcbiAgICAgICAgZmlsbDogSUJydXNoO1xyXG4gICAgICAgIGZpbGxSdWxlOiBGaWxsUnVsZTtcclxuICAgICAgICBzdHJva2U6IElCcnVzaDtcclxuICAgICAgICBzdHJva2VUaGlja25lc3M6IG51bWJlcjtcclxuICAgICAgICBzdHJva2VTdGFydExpbmVDYXA6IFBlbkxpbmVDYXA7XHJcbiAgICAgICAgc3Ryb2tlRW5kTGluZUNhcDogUGVuTGluZUNhcDtcclxuICAgICAgICBzdHJva2VMaW5lSm9pbjogUGVuTGluZUpvaW47XHJcbiAgICAgICAgc3Ryb2tlTWl0ZXJMaW1pdDogbnVtYmVyO1xyXG5cclxuICAgICAgICBzaGFwZUZsYWdzOiBTaGFwZUZsYWdzO1xyXG4gICAgICAgIHNoYXBlUmVjdDogUmVjdDtcclxuICAgICAgICBuYXR1cmFsQm91bmRzOiBSZWN0O1xyXG4gICAgfVxyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJU3RhdGUgZXh0ZW5kcyBjb3JlLnJlbmRlci5JU3RhdGUge1xyXG4gICAgICAgIHNob3VsZERyYXc6IGJvb2xlYW47XHJcbiAgICB9XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElPdXRwdXQgZXh0ZW5kcyBjb3JlLnJlbmRlci5JT3V0cHV0IHtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgY2xhc3MgU2hhcGVSZW5kZXJQaXBlRGVmIGV4dGVuZHMgY29yZS5yZW5kZXIuUmVuZGVyUGlwZURlZiB7XHJcbiAgICAgICAgY29uc3RydWN0b3IgKCkge1xyXG4gICAgICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgICAgICB0aGlzLmFkZFRhcGluQmVmb3JlKCdkb1JlbmRlcicsICdjYWxjU2hvdWxkRHJhdycsIHRhcGlucy5jYWxjU2hvdWxkRHJhdylcclxuICAgICAgICAgICAgICAgIC5hZGRUYXBpbkJlZm9yZSgnZG9SZW5kZXInLCAncHJlcGFyZURyYXcnLCB0YXBpbnMucHJlcGFyZURyYXcpXHJcbiAgICAgICAgICAgICAgICAucmVwbGFjZVRhcGluKCdkb1JlbmRlcicsIHRhcGlucy5kb1JlbmRlcilcclxuICAgICAgICAgICAgICAgIC5hZGRUYXBpbkFmdGVyKCdkb1JlbmRlcicsICdmaWxsJywgdGFwaW5zLmZpbGwpXHJcbiAgICAgICAgICAgICAgICAuYWRkVGFwaW5BZnRlcignZmlsbCcsICdmaW5pc2hEcmF3JywgdGFwaW5zLmZpbmlzaERyYXcpXHJcbiAgICAgICAgICAgICAgICAuYWRkVGFwaW5BZnRlcignZmluaXNoRHJhdycsICdzdHJva2UnLCB0YXBpbnMuc3Ryb2tlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNyZWF0ZVN0YXRlICgpOiBJU3RhdGUge1xyXG4gICAgICAgICAgICB2YXIgc3RhdGUgPSA8SVN0YXRlPnN1cGVyLmNyZWF0ZVN0YXRlKCk7XHJcbiAgICAgICAgICAgIHN0YXRlLnNob3VsZERyYXcgPSBmYWxzZTtcclxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9zaGFwZS9yZW5kZXIvU2hhcGVSZW5kZXJQaXBlRGVmXCIgLz5cclxuXHJcbm1vZHVsZSBtaW5lcnZhLnNoYXBlcy5lbGxpcHNlLnJlbmRlciB7XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElJbnB1dCBleHRlbmRzIHNoYXBlLnJlbmRlci5JSW5wdXQge1xyXG4gICAgICAgIHNoYXBlUmVjdDogUmVjdDtcclxuICAgIH1cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSVN0YXRlIGV4dGVuZHMgc2hhcGUucmVuZGVyLklTdGF0ZSB7XHJcbiAgICB9XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElPdXRwdXQgZXh0ZW5kcyBzaGFwZS5yZW5kZXIuSU91dHB1dCB7XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGNsYXNzIEVsbGlwc2VSZW5kZXJQaXBlRGVmIGV4dGVuZHMgc2hhcGUucmVuZGVyLlNoYXBlUmVuZGVyUGlwZURlZiB7XHJcbiAgICAgICAgY29uc3RydWN0b3IgKCkge1xyXG4gICAgICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgICAgICB0aGlzLnJlcGxhY2VUYXBpbignZG9SZW5kZXInLCB0YXBpbnMuZG9SZW5kZXIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgbW9kdWxlIHRhcGlucyB7XHJcbiAgICAgICAgZXhwb3J0IGZ1bmN0aW9uIGRvUmVuZGVyIChpbnB1dDogSUlucHV0LCBzdGF0ZTogSVN0YXRlLCBvdXRwdXQ6IElPdXRwdXQsIGN0eDogY29yZS5yZW5kZXIuUmVuZGVyQ29udGV4dCwgcmVnaW9uOiBSZWN0KTogYm9vbGVhbiB7XHJcbiAgICAgICAgICAgIGlmICghc3RhdGUuc2hvdWxkRHJhdylcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG5cclxuICAgICAgICAgICAgdmFyIHNyID0gaW5wdXQuc2hhcGVSZWN0O1xyXG4gICAgICAgICAgICBoZWxwZXJzLmRyYXcoY3R4LnJhdywgc3IueCwgc3IueSwgc3Iud2lkdGgsIHNyLmhlaWdodCk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vc2hhcGUvbWVhc3VyZS9TaGFwZU1lYXN1cmVQaXBlRGVmXCIgLz5cclxuXHJcbm1vZHVsZSBtaW5lcnZhLnNoYXBlcy5wYXRoLm1lYXN1cmUge1xyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJSW5wdXQgZXh0ZW5kcyBzaGFwZS5tZWFzdXJlLklJbnB1dCB7XHJcbiAgICAgICAgZGF0YTogQW5vblBhdGhHZW9tZXRyeTtcclxuICAgIH1cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSVN0YXRlIGV4dGVuZHMgc2hhcGUubWVhc3VyZS5JU3RhdGUge1xyXG4gICAgfVxyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJT3V0cHV0IGV4dGVuZHMgc2hhcGUubWVhc3VyZS5JT3V0cHV0IHtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgY2xhc3MgUGF0aE1lYXN1cmVQaXBlRGVmIGV4dGVuZHMgc2hhcGUubWVhc3VyZS5TaGFwZU1lYXN1cmVQaXBlRGVmIHtcclxuICAgICAgICBjb25zdHJ1Y3RvciAoKSB7XHJcbiAgICAgICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkVGFwaW5CZWZvcmUoJ2NhbGNOYXR1cmFsQm91bmRzJywgJ2J1aWxkUGF0aCcsIHRhcGlucy5idWlsZFBhdGgpXHJcbiAgICAgICAgICAgICAgICAucmVwbGFjZVRhcGluKCdjYWxjTmF0dXJhbEJvdW5kcycsIHRhcGlucy5jYWxjTmF0dXJhbEJvdW5kcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBtb2R1bGUgdGFwaW5zIHtcclxuICAgICAgICBleHBvcnQgZnVuY3Rpb24gYnVpbGRQYXRoIChpbnB1dDogSUlucHV0LCBzdGF0ZTogSVN0YXRlLCBvdXRwdXQ6IElPdXRwdXQsIHRyZWU6IGNvcmUuSVVwZGF0ZXJUcmVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZXhwb3J0IGZ1bmN0aW9uIGNhbGNOYXR1cmFsQm91bmRzIChpbnB1dDogSUlucHV0LCBzdGF0ZTogSVN0YXRlLCBvdXRwdXQ6IElPdXRwdXQsIHRyZWU6IGNvcmUuSVVwZGF0ZXJUcmVlKSB7XHJcbiAgICAgICAgICAgIHZhciBuYiA9IG91dHB1dC5uYXR1cmFsQm91bmRzO1xyXG4gICAgICAgICAgICBuYi54ID0gbmIueSA9IG5iLndpZHRoID0gbmIuaGVpZ2h0ID0gMDtcclxuICAgICAgICAgICAgaWYgKGlucHV0LmRhdGEpIHtcclxuICAgICAgICAgICAgICAgIHZhciBib3VuZHMgPSBpbnB1dC5kYXRhLkdldEJvdW5kcyhpbnB1dCk7XHJcbiAgICAgICAgICAgICAgICBSZWN0LmNvcHlUbyhib3VuZHMsIG5iKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL3BhdGgvbWVhc3VyZS9QYXRoTWVhc3VyZVBpcGVEZWZcIiAvPlxyXG5cclxubW9kdWxlIG1pbmVydmEuc2hhcGVzLmxpbmUubWVhc3VyZSB7XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElJbnB1dCBleHRlbmRzIHBhdGgubWVhc3VyZS5JSW5wdXQge1xyXG4gICAgICAgIHgxOiBudW1iZXI7XHJcbiAgICAgICAgeTE6IG51bWJlcjtcclxuICAgICAgICB4MjogbnVtYmVyO1xyXG4gICAgICAgIHkyOiBudW1iZXI7XHJcbiAgICB9XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElTdGF0ZSBleHRlbmRzIHBhdGgubWVhc3VyZS5JU3RhdGUge1xyXG4gICAgfVxyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJT3V0cHV0IGV4dGVuZHMgcGF0aC5tZWFzdXJlLklPdXRwdXQge1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBjbGFzcyBMaW5lTWVhc3VyZVBpcGVEZWYgZXh0ZW5kcyBwYXRoLm1lYXN1cmUuUGF0aE1lYXN1cmVQaXBlRGVmIHtcclxuICAgICAgICBjb25zdHJ1Y3RvciAoKSB7XHJcbiAgICAgICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgICAgIHRoaXMucmVwbGFjZVRhcGluKCdidWlsZFBhdGgnLCB0YXBpbnMuYnVpbGRQYXRoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IG1vZHVsZSB0YXBpbnMge1xyXG4gICAgICAgIGV4cG9ydCBmdW5jdGlvbiBidWlsZFBhdGggKGlucHV0OiBJSW5wdXQsIHN0YXRlOiBJU3RhdGUsIG91dHB1dDogSU91dHB1dCwgdHJlZTogY29yZS5JVXBkYXRlclRyZWUpIHtcclxuICAgICAgICAgICAgaWYgKCFpbnB1dC5kYXRhLm9sZClcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB2YXIgcGF0aCA9IGlucHV0LmRhdGEucGF0aDtcclxuICAgICAgICAgICAgcGF0aC5yZXNldCgpO1xyXG4gICAgICAgICAgICBwYXRoLm1vdmUoaW5wdXQueDEsIGlucHV0LnkxKTtcclxuICAgICAgICAgICAgcGF0aC5saW5lKGlucHV0LngyLCBpbnB1dC55Mik7XHJcbiAgICAgICAgICAgIGlucHV0LmRhdGEub2xkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLnNoYXBlcy5wYXRoLmhpdHRlc3Qge1xyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJSGl0VGVzdERhdGEgZXh0ZW5kcyBzaGFwZS5oaXR0ZXN0LklIaXRUZXN0RGF0YSB7XHJcbiAgICAgICAgYXNzZXRzOiBJUGF0aFVwZGF0ZXJBc3NldHM7XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGNsYXNzIFBhdGhIaXRUZXN0UGlwZURlZiBleHRlbmRzIHNoYXBlLmhpdHRlc3QuU2hhcGVIaXRUZXN0UGlwZURlZiB7XHJcbiAgICAgICAgY29uc3RydWN0b3IgKCkge1xyXG4gICAgICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgICAgICB0aGlzLnJlcGxhY2VUYXBpbignZHJhd1NoYXBlJywgdGFwaW5zLmRyYXdTaGFwZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBtb2R1bGUgdGFwaW5zIHtcclxuICAgICAgICBleHBvcnQgZnVuY3Rpb24gZHJhd1NoYXBlIChkYXRhOiBJSGl0VGVzdERhdGEsIHBvczogUG9pbnQsIGhpdExpc3Q6IGNvcmUuVXBkYXRlcltdLCBjdHg6IGNvcmUucmVuZGVyLlJlbmRlckNvbnRleHQpOiBib29sZWFuIHtcclxuICAgICAgICAgICAgdmFyIGFzc2V0cyA9IGRhdGEuYXNzZXRzO1xyXG4gICAgICAgICAgICBjdHgucHJlYXBwbHkoYXNzZXRzLnN0cmV0Y2hYZm9ybSk7XHJcbiAgICAgICAgICAgIGFzc2V0cy5kYXRhLkRyYXcoY3R4KTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwibW9kdWxlIG1pbmVydmEuc2hhcGVzLnNoYXBlLnByb2Nlc3N1cCB7XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElJbnB1dCBleHRlbmRzIGNvcmUucHJvY2Vzc3VwLklJbnB1dCB7XHJcbiAgICAgICAgc3Ryb2tlOiBJQnJ1c2g7XHJcbiAgICAgICAgc3Ryb2tlVGhpY2tuZXNzOiBudW1iZXI7XHJcblxyXG4gICAgICAgIHNoYXBlRmxhZ3M6IFNoYXBlRmxhZ3M7XHJcbiAgICAgICAgc2hhcGVSZWN0OiBSZWN0O1xyXG4gICAgfVxyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJU3RhdGUgZXh0ZW5kcyBjb3JlLnByb2Nlc3N1cC5JU3RhdGUge1xyXG4gICAgfVxyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJT3V0cHV0IGV4dGVuZHMgY29yZS5wcm9jZXNzdXAuSU91dHB1dCB7XHJcbiAgICAgICAgc2hhcGVGbGFnczogU2hhcGVGbGFncztcclxuICAgICAgICBzaGFwZVJlY3Q6IFJlY3Q7XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGNsYXNzIFNoYXBlUHJvY2Vzc1VwUGlwZURlZiBleHRlbmRzIGNvcmUucHJvY2Vzc3VwLlByb2Nlc3NVcFBpcGVEZWYge1xyXG4gICAgICAgIGNvbnN0cnVjdG9yICgpIHtcclxuICAgICAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICAgICAgdGhpcy5hZGRUYXBpbkJlZm9yZSgnY2FsY0V4dGVudHMnLCAnY2FsY1NoYXBlUmVjdCcsIHRhcGlucy5jYWxjU2hhcGVSZWN0KVxyXG4gICAgICAgICAgICAgICAgLnJlcGxhY2VUYXBpbignY2FsY0V4dGVudHMnLCB0YXBpbnMuY2FsY0V4dGVudHMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY3JlYXRlT3V0cHV0ICgpIHtcclxuICAgICAgICAgICAgdmFyIG91dHB1dCA9IDxJT3V0cHV0PnN1cGVyLmNyZWF0ZU91dHB1dCgpO1xyXG4gICAgICAgICAgICBvdXRwdXQuc2hhcGVGbGFncyA9IFNoYXBlRmxhZ3MuTm9uZTtcclxuICAgICAgICAgICAgb3V0cHV0LnNoYXBlUmVjdCA9IG5ldyBSZWN0KCk7XHJcbiAgICAgICAgICAgIHJldHVybiBvdXRwdXQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcmVwYXJlIChpbnB1dDogSUlucHV0LCBzdGF0ZTogSVN0YXRlLCBvdXRwdXQ6IElPdXRwdXQpIHtcclxuICAgICAgICAgICAgb3V0cHV0LnNoYXBlRmxhZ3MgPSBpbnB1dC5zaGFwZUZsYWdzO1xyXG4gICAgICAgICAgICBSZWN0LmNvcHlUbyhpbnB1dC5zaGFwZVJlY3QsIG91dHB1dC5zaGFwZVJlY3QpO1xyXG4gICAgICAgICAgICBzdXBlci5wcmVwYXJlKGlucHV0LCBzdGF0ZSwgb3V0cHV0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZsdXNoIChpbnB1dDogSUlucHV0LCBzdGF0ZTogSVN0YXRlLCBvdXRwdXQ6IElPdXRwdXQpIHtcclxuICAgICAgICAgICAgc3VwZXIuZmx1c2goaW5wdXQsIHN0YXRlLCBvdXRwdXQpO1xyXG4gICAgICAgICAgICBSZWN0LmNvcHlUbyhvdXRwdXQuc2hhcGVSZWN0LCBpbnB1dC5zaGFwZVJlY3QpO1xyXG4gICAgICAgICAgICBpbnB1dC5zaGFwZUZsYWdzID0gb3V0cHV0LnNoYXBlRmxhZ3M7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL3NoYXBlL3Byb2Nlc3N1cC9TaGFwZVByb2Nlc3NVcFBpcGVEZWZcIiAvPlxyXG5cclxubW9kdWxlIG1pbmVydmEuc2hhcGVzLnBhdGgucHJvY2Vzc3VwIHtcclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUlucHV0IGV4dGVuZHMgc2hhcGUucHJvY2Vzc3VwLklJbnB1dCB7XHJcbiAgICAgICAgbmF0dXJhbEJvdW5kczogUmVjdDtcclxuICAgICAgICBkYXRhOiBBbm9uUGF0aEdlb21ldHJ5O1xyXG4gICAgICAgIHN0cmV0Y2g6IFN0cmV0Y2g7XHJcbiAgICAgICAgc3RyZXRjaFhmb3JtOiBudW1iZXJbXTtcclxuICAgIH1cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSVN0YXRlIGV4dGVuZHMgc2hhcGUucHJvY2Vzc3VwLklTdGF0ZSB7XHJcbiAgICB9XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElPdXRwdXQgZXh0ZW5kcyBzaGFwZS5wcm9jZXNzdXAuSU91dHB1dCB7XHJcbiAgICAgICAgc3RyZXRjaFhmb3JtOiBudW1iZXJbXTtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgY2xhc3MgUGF0aFByb2Nlc3NVcFBpcGVEZWYgZXh0ZW5kcyBzaGFwZS5wcm9jZXNzdXAuU2hhcGVQcm9jZXNzVXBQaXBlRGVmIHtcclxuICAgICAgICBjb25zdHJ1Y3RvciAoKSB7XHJcbiAgICAgICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgICAgIHRoaXMucmVwbGFjZVRhcGluKCdjYWxjQWN0dWFsU2l6ZScsIHRhcGlucy5jYWxjQWN0dWFsU2l6ZSlcclxuICAgICAgICAgICAgICAgIC5yZXBsYWNlVGFwaW4oJ2NhbGNTaGFwZVJlY3QnLCB0YXBpbnMuY2FsY1NoYXBlUmVjdClcclxuICAgICAgICAgICAgICAgIC5hZGRUYXBpbkJlZm9yZSgnY2FsY0V4dGVudHMnLCAnY2FsY1N0cmV0Y2gnLCB0YXBpbnMuY2FsY1N0cmV0Y2gpXHJcbiAgICAgICAgICAgICAgICAucmVwbGFjZVRhcGluKCdjYWxjRXh0ZW50cycsIHRhcGlucy5jYWxjRXh0ZW50cyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjcmVhdGVPdXRwdXQgKCkge1xyXG4gICAgICAgICAgICB2YXIgb3V0cHV0ID0gPElPdXRwdXQ+c3VwZXIuY3JlYXRlT3V0cHV0KCk7XHJcbiAgICAgICAgICAgIG91dHB1dC5zdHJldGNoWGZvcm0gPSBtYXQzLmlkZW50aXR5KCk7XHJcbiAgICAgICAgICAgIHJldHVybiBvdXRwdXQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcmVwYXJlIChpbnB1dDogSUlucHV0LCBzdGF0ZTogSVN0YXRlLCBvdXRwdXQ6IElPdXRwdXQpIHtcclxuICAgICAgICAgICAgbWF0My5jb3B5VG8oaW5wdXQuc3RyZXRjaFhmb3JtLCBvdXRwdXQuc3RyZXRjaFhmb3JtKTtcclxuICAgICAgICAgICAgc3VwZXIucHJlcGFyZShpbnB1dCwgc3RhdGUsIG91dHB1dCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmbHVzaCAoaW5wdXQ6IElJbnB1dCwgc3RhdGU6IElTdGF0ZSwgb3V0cHV0OiBJT3V0cHV0KSB7XHJcbiAgICAgICAgICAgIHN1cGVyLmZsdXNoKGlucHV0LCBzdGF0ZSwgb3V0cHV0KTtcclxuICAgICAgICAgICAgbWF0My5jb3B5VG8ob3V0cHV0LnN0cmV0Y2hYZm9ybSwgaW5wdXQuc3RyZXRjaFhmb3JtKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vc2hhcGUvcmVuZGVyL1NoYXBlUmVuZGVyUGlwZURlZlwiIC8+XHJcblxyXG5tb2R1bGUgbWluZXJ2YS5zaGFwZXMucGF0aC5yZW5kZXIge1xyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJSW5wdXQgZXh0ZW5kcyBzaGFwZS5yZW5kZXIuSUlucHV0IHtcclxuICAgICAgICBkYXRhOiBBbm9uUGF0aEdlb21ldHJ5O1xyXG4gICAgICAgIHN0cmV0Y2hYZm9ybTogbnVtYmVyW107XHJcbiAgICB9XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElTdGF0ZSBleHRlbmRzIHNoYXBlLnJlbmRlci5JU3RhdGUge1xyXG4gICAgfVxyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJT3V0cHV0IGV4dGVuZHMgc2hhcGUucmVuZGVyLklPdXRwdXQge1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBjbGFzcyBQYXRoUmVuZGVyUGlwZURlZiBleHRlbmRzIHNoYXBlLnJlbmRlci5TaGFwZVJlbmRlclBpcGVEZWYge1xyXG4gICAgICAgIGNvbnN0cnVjdG9yICgpIHtcclxuICAgICAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICAgICAgdGhpcy5yZXBsYWNlVGFwaW4oJ2RvUmVuZGVyJywgdGFwaW5zLmRvUmVuZGVyKVxyXG4gICAgICAgICAgICAgICAgLnJlcGxhY2VUYXBpbignZmlsbCcsIHRhcGlucy5maWxsKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vcGF0aC9tZWFzdXJlL1BhdGhNZWFzdXJlUGlwZURlZlwiIC8+XHJcblxyXG5tb2R1bGUgbWluZXJ2YS5zaGFwZXMucG9seWxpbmUubWVhc3VyZSB7XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElJbnB1dCBleHRlbmRzIHBhdGgubWVhc3VyZS5JSW5wdXQge1xyXG4gICAgICAgIGlzQ2xvc2VkOiBib29sZWFuO1xyXG4gICAgICAgIHBvaW50czogSVBvaW50W107XHJcbiAgICB9XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElTdGF0ZSBleHRlbmRzIHBhdGgubWVhc3VyZS5JU3RhdGUge1xyXG4gICAgfVxyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJT3V0cHV0IGV4dGVuZHMgcGF0aC5tZWFzdXJlLklPdXRwdXQge1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBjbGFzcyBQb2x5bGluZU1lYXN1cmVQaXBlRGVmIGV4dGVuZHMgcGF0aC5tZWFzdXJlLlBhdGhNZWFzdXJlUGlwZURlZiB7XHJcbiAgICAgICAgY29uc3RydWN0b3IgKCkge1xyXG4gICAgICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgICAgICB0aGlzLnJlcGxhY2VUYXBpbignYnVpbGRQYXRoJywgdGFwaW5zLmJ1aWxkUGF0aCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBtb2R1bGUgdGFwaW5zIHtcclxuICAgICAgICBleHBvcnQgZnVuY3Rpb24gYnVpbGRQYXRoIChpbnB1dDogSUlucHV0LCBzdGF0ZTogSVN0YXRlLCBvdXRwdXQ6IElPdXRwdXQsIHRyZWU6IGNvcmUuSVVwZGF0ZXJUcmVlKSB7XHJcbiAgICAgICAgICAgIGlmICghaW5wdXQuZGF0YS5vbGQpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIHZhciBwYXRoID0gaW5wdXQuZGF0YS5wYXRoO1xyXG4gICAgICAgICAgICBwYXRoLnJlc2V0KCk7XHJcblxyXG4gICAgICAgICAgICB2YXIgcG9pbnRzID0gaW5wdXQucG9pbnRzO1xyXG4gICAgICAgICAgICBpZiAocG9pbnRzLmxlbmd0aCA8IDIpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIHZhciBwMCA9IHBvaW50c1swXTtcclxuICAgICAgICAgICAgdmFyIHAgPSBwb2ludHNbMV07XHJcbiAgICAgICAgICAgIGlmIChwb2ludHMubGVuZ3RoID09PSAyKSB7XHJcbiAgICAgICAgICAgICAgICBleHRlbmRMaW5lKHAwLCBwLCBpbnB1dC5zdHJva2VUaGlja25lc3MpO1xyXG4gICAgICAgICAgICAgICAgcGF0aC5tb3ZlKHAwLngsIHAwLnkpO1xyXG4gICAgICAgICAgICAgICAgcGF0aC5saW5lKHAueCwgcC55KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHBhdGgubW92ZShwMC54LCBwMC55KTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgcG9pbnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHAgPSBwb2ludHNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aC5saW5lKHAueCwgcC55KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoaW5wdXQuaXNDbG9zZWQpXHJcbiAgICAgICAgICAgICAgICBwYXRoLmNsb3NlKCk7XHJcblxyXG4gICAgICAgICAgICBpbnB1dC5kYXRhLm9sZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGV4dGVuZExpbmUgKHAxOiBJUG9pbnQsIHAyOiBJUG9pbnQsIHRoaWNrbmVzczogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgIHZhciB0NSA9IHRoaWNrbmVzcyAqIDUuMDtcclxuICAgICAgICAgICAgdmFyIGR4ID0gcDEueCAtIHAyLng7XHJcbiAgICAgICAgICAgIHZhciBkeSA9IHAxLnkgLSBwMi55O1xyXG5cclxuICAgICAgICAgICAgaWYgKGR5ID09PSAwLjApIHtcclxuICAgICAgICAgICAgICAgIHQ1IC09IHRoaWNrbmVzcyAvIDIuMDtcclxuICAgICAgICAgICAgICAgIGlmIChkeCA+IDAuMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHAxLnggKz0gdDU7XHJcbiAgICAgICAgICAgICAgICAgICAgcDIueCAtPSB0NTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcDEueCAtPSB0NTtcclxuICAgICAgICAgICAgICAgICAgICBwMi54ICs9IHQ1O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGR4ID09PSAwLjApIHtcclxuICAgICAgICAgICAgICAgIHQ1IC09IHRoaWNrbmVzcyAvIDIuMDtcclxuICAgICAgICAgICAgICAgIGlmIChkeSA+IDAuMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHAxLnkgKz0gdDU7XHJcbiAgICAgICAgICAgICAgICAgICAgcDIueSAtPSB0NTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcDEueSAtPSB0NTtcclxuICAgICAgICAgICAgICAgICAgICBwMi55ICs9IHQ1O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdmFyIGFuZ2xlID0gTWF0aC5hdGFuMihkeSwgZHgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGF4ID0gTWF0aC5hYnMoTWF0aC5zaW4oYW5nbGUpICogdDUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGR4ID4gMC4wKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcDEueCArPSBheDtcclxuICAgICAgICAgICAgICAgICAgICBwMi54IC09IGF4O1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBwMS54IC09IGF4O1xyXG4gICAgICAgICAgICAgICAgICAgIHAyLnggKz0gYXg7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2YXIgYXkgPSBNYXRoLmFicyhNYXRoLnNpbihNYXRoLlBJIC8gMiAtIGFuZ2xlKSkgKiB0NTtcclxuICAgICAgICAgICAgICAgIGlmIChkeSA+IDAuMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHAxLnkgKz0gYXk7XHJcbiAgICAgICAgICAgICAgICAgICAgcDIueSAtPSBheTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcDEueSAtPSBheTtcclxuICAgICAgICAgICAgICAgICAgICBwMi55ICs9IGF5O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwibW9kdWxlIG1pbmVydmEuc2hhcGVzLnJlY3RhbmdsZS5oZWxwZXJzIHtcclxuICAgIGV4cG9ydCBmdW5jdGlvbiBkcmF3IChjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgbGVmdDogbnVtYmVyLCB0b3A6IG51bWJlciwgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIsIHJhZGl1c1g6IG51bWJlciwgcmFkaXVzWTogbnVtYmVyKSB7XHJcbiAgICAgICAgdmFyIHJpZ2h0ID0gbGVmdCArIHdpZHRoO1xyXG4gICAgICAgIHZhciBib3R0b20gPSB0b3AgKyBoZWlnaHQ7XHJcbiAgICAgICAgaWYgKCFyYWRpdXNYICYmICFyYWRpdXNZKSB7XHJcbiAgICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICAgICAgY3R4LnJlY3QobGVmdCwgdG9wLCByaWdodCAtIGxlZnQsIGJvdHRvbSAtIHRvcCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgY3R4Lm1vdmVUbyhsZWZ0ICsgcmFkaXVzWCwgdG9wKTtcclxuICAgICAgICAvL3RvcCBlZGdlXHJcbiAgICAgICAgY3R4LmxpbmVUbyhyaWdodCAtIHJhZGl1c1gsIHRvcCk7XHJcbiAgICAgICAgLy90b3AgcmlnaHQgYXJjXHJcbiAgICAgICAgY3R4LmVsbGlwc2UocmlnaHQgLSByYWRpdXNYLCB0b3AgKyByYWRpdXNZLCByYWRpdXNYLCByYWRpdXNZLCAwLCAzICogTWF0aC5QSSAvIDIsIDIgKiBNYXRoLlBJKTtcclxuICAgICAgICAvL3JpZ2h0IGVkZ2VcclxuICAgICAgICBjdHgubGluZVRvKHJpZ2h0LCBib3R0b20gLSByYWRpdXNZKTtcclxuICAgICAgICAvL2JvdHRvbSByaWdodCBhcmNcclxuICAgICAgICBjdHguZWxsaXBzZShyaWdodCAtIHJhZGl1c1gsIGJvdHRvbSAtIHJhZGl1c1ksIHJhZGl1c1gsIHJhZGl1c1ksIDAsIDAsIE1hdGguUEkgLyAyKTtcclxuICAgICAgICAvL2JvdHRvbSBlZGdlXHJcbiAgICAgICAgY3R4LmxpbmVUbyhsZWZ0ICsgcmFkaXVzWCwgYm90dG9tKTtcclxuICAgICAgICAvL2JvdHRvbSBsZWZ0IGFyY1xyXG4gICAgICAgIGN0eC5lbGxpcHNlKGxlZnQgKyByYWRpdXNYLCBib3R0b20gLSByYWRpdXNZLCByYWRpdXNYLCByYWRpdXNZLCAwLCBNYXRoLlBJIC8gMiwgTWF0aC5QSSk7XHJcbiAgICAgICAgLy9sZWZ0IGVkZ2VcclxuICAgICAgICBjdHgubGluZVRvKGxlZnQsIHRvcCArIHJhZGl1c1kpO1xyXG4gICAgICAgIC8vdG9wIGxlZnQgYXJjXHJcbiAgICAgICAgY3R4LmVsbGlwc2UobGVmdCArIHJhZGl1c1gsIHRvcCArIHJhZGl1c1ksIHJhZGl1c1gsIHJhZGl1c1ksIDAsIE1hdGguUEksIDMgKiBNYXRoLlBJIC8gMik7XHJcbiAgICAgICAgY3R4LmNsb3NlUGF0aCgpO1xyXG4gICAgfVxyXG59IiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL3NoYXBlL2hpdHRlc3QvU2hhcGVIaXRUZXN0UGlwZURlZlwiIC8+XHJcblxyXG5tb2R1bGUgbWluZXJ2YS5zaGFwZXMucmVjdGFuZ2xlLmhpdHRlc3Qge1xyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJSGl0VGVzdERhdGEgZXh0ZW5kcyBzaGFwZS5oaXR0ZXN0LklIaXRUZXN0RGF0YSB7XHJcbiAgICAgICAgYXNzZXRzOiBJUmVjdGFuZ2xlVXBkYXRlckFzc2V0cztcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgY2xhc3MgUmVjdGFuZ2xlSGl0VGVzdFBpcGVEZWYgZXh0ZW5kcyBzaGFwZS5oaXR0ZXN0LlNoYXBlSGl0VGVzdFBpcGVEZWYge1xyXG4gICAgICAgIGNvbnN0cnVjdG9yICgpIHtcclxuICAgICAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICAgICAgdGhpcy5yZXBsYWNlVGFwaW4oJ2RyYXdTaGFwZScsIHRhcGlucy5kcmF3U2hhcGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgbW9kdWxlIHRhcGlucyB7XHJcbiAgICAgICAgZXhwb3J0IGZ1bmN0aW9uIGRyYXdTaGFwZSAoZGF0YTogSUhpdFRlc3REYXRhLCBwb3M6IFBvaW50LCBoaXRMaXN0OiBjb3JlLlVwZGF0ZXJbXSwgY3R4OiBjb3JlLnJlbmRlci5SZW5kZXJDb250ZXh0KTogYm9vbGVhbiB7XHJcbiAgICAgICAgICAgIHZhciBhc3NldHMgPSBkYXRhLmFzc2V0cztcclxuICAgICAgICAgICAgdmFyIHNyID0gYXNzZXRzLnNoYXBlUmVjdDtcclxuICAgICAgICAgICAgdmFyIHJ4ID0gTWF0aC5taW4oTWF0aC5hYnMoYXNzZXRzLnJhZGl1c1gpLCBzci53aWR0aCAvIDIuMCk7XHJcbiAgICAgICAgICAgIGlmIChpc05hTihyeCkpXHJcbiAgICAgICAgICAgICAgICByeCA9IDA7XHJcbiAgICAgICAgICAgIHZhciByeSA9IE1hdGgubWluKE1hdGguYWJzKGFzc2V0cy5yYWRpdXNZKSwgc3IuaGVpZ2h0IC8gMi4wKTtcclxuICAgICAgICAgICAgaWYgKGlzTmFOKHJ5KSlcclxuICAgICAgICAgICAgICAgIHJ5ID0gMDtcclxuXHJcbiAgICAgICAgICAgIGhlbHBlcnMuZHJhdyhjdHgucmF3LCBzci54LCBzci55LCBzci53aWR0aCwgc3IuaGVpZ2h0LCByeCwgcnkpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL3NoYXBlL21lYXN1cmUvU2hhcGVNZWFzdXJlUGlwZURlZlwiIC8+XHJcblxyXG5tb2R1bGUgbWluZXJ2YS5zaGFwZXMucmVjdGFuZ2xlLm1lYXN1cmUge1xyXG4gICAgZXhwb3J0IGNsYXNzIFJlY3RhbmdsZU1lYXN1cmVQaXBlRGVmIGV4dGVuZHMgc2hhcGUubWVhc3VyZS5TaGFwZU1lYXN1cmVQaXBlRGVmIHtcclxuICAgICAgICBjb25zdHJ1Y3RvciAoKSB7XHJcbiAgICAgICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkVGFwaW5CZWZvcmUoJ2RvT3ZlcnJpZGUnLCAnc2hyaW5rQXZhaWxhYmxlJywgdGFwaW5zLnNocmlua0F2YWlsYWJsZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBtb2R1bGUgdGFwaW5zIHtcclxuICAgICAgICBleHBvcnQgZnVuY3Rpb24gc2hyaW5rQXZhaWxhYmxlIChpbnB1dDogc2hhcGUubWVhc3VyZS5JSW5wdXQsIHN0YXRlOiBzaGFwZS5tZWFzdXJlLklTdGF0ZSwgb3V0cHV0OiBzaGFwZS5tZWFzdXJlLklPdXRwdXQsIHRyZWU6IGNvcmUuSVVwZGF0ZXJUcmVlKSB7XHJcbiAgICAgICAgICAgIHZhciBhdmFpbGFibGUgPSBzdGF0ZS5hdmFpbGFibGVTaXplO1xyXG4gICAgICAgICAgICBhdmFpbGFibGUud2lkdGggPSBhdmFpbGFibGUuaGVpZ2h0ID0gMDtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL3NoYXBlL3JlbmRlci9TaGFwZVJlbmRlclBpcGVEZWZcIiAvPlxyXG5cclxubW9kdWxlIG1pbmVydmEuc2hhcGVzLnJlY3RhbmdsZS5yZW5kZXIge1xyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJSW5wdXQgZXh0ZW5kcyBzaGFwZS5yZW5kZXIuSUlucHV0IHtcclxuICAgICAgICByYWRpdXNYOiBudW1iZXI7XHJcbiAgICAgICAgcmFkaXVzWTogbnVtYmVyO1xyXG4gICAgICAgIHNoYXBlUmVjdDogUmVjdDtcclxuICAgIH1cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSVN0YXRlIGV4dGVuZHMgc2hhcGUucmVuZGVyLklTdGF0ZSB7XHJcbiAgICB9XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElPdXRwdXQgZXh0ZW5kcyBzaGFwZS5yZW5kZXIuSU91dHB1dCB7XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGNsYXNzIFJlY3RhbmdsZVJlbmRlclBpcGVEZWYgZXh0ZW5kcyBzaGFwZS5yZW5kZXIuU2hhcGVSZW5kZXJQaXBlRGVmIHtcclxuICAgICAgICBjb25zdHJ1Y3RvciAoKSB7XHJcbiAgICAgICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgICAgIHRoaXMucmVwbGFjZVRhcGluKCdkb1JlbmRlcicsIHRhcGlucy5kb1JlbmRlcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBtb2R1bGUgdGFwaW5zIHtcclxuICAgICAgICBleHBvcnQgZnVuY3Rpb24gZG9SZW5kZXIgKGlucHV0OiBJSW5wdXQsIHN0YXRlOiBJU3RhdGUsIG91dHB1dDogSU91dHB1dCwgY3R4OiBjb3JlLnJlbmRlci5SZW5kZXJDb250ZXh0LCByZWdpb246IFJlY3QpOiBib29sZWFuIHtcclxuICAgICAgICAgICAgaWYgKCFzdGF0ZS5zaG91bGREcmF3KVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcblxyXG4gICAgICAgICAgICB2YXIgc3IgPSBpbnB1dC5zaGFwZVJlY3Q7XHJcbiAgICAgICAgICAgIHZhciByeCA9IE1hdGgubWluKE1hdGgubWF4KDAsIGlucHV0LnJhZGl1c1gpLCBzci53aWR0aCAvIDIuMCk7XHJcbiAgICAgICAgICAgIGlmIChpc05hTihyeCkpXHJcbiAgICAgICAgICAgICAgICByeCA9IDA7XHJcbiAgICAgICAgICAgIHZhciByeSA9IE1hdGgubWluKE1hdGgubWF4KDAsIGlucHV0LnJhZGl1c1kpLCBzci5oZWlnaHQgLyAyLjApO1xyXG4gICAgICAgICAgICBpZiAoaXNOYU4ocnkpKVxyXG4gICAgICAgICAgICAgICAgcnkgPSAwO1xyXG5cclxuICAgICAgICAgICAgaGVscGVycy5kcmF3KGN0eC5yYXcsIHNyLngsIHNyLnksIHNyLndpZHRoLCBzci5oZWlnaHQsIHJ4LCByeSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5zaGFwZXMuc2hhcGUuYXJyYW5nZSB7XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElJbnB1dCBleHRlbmRzIGNvcmUuYXJyYW5nZS5JSW5wdXQge1xyXG4gICAgICAgIHN0cmV0Y2g6IFN0cmV0Y2g7XHJcbiAgICAgICAgZmlsbDogSUJydXNoO1xyXG4gICAgICAgIGZpbGxSdWxlOiBGaWxsUnVsZTtcclxuICAgICAgICBzdHJva2U6IElCcnVzaDtcclxuICAgICAgICBzdHJva2VUaGlja25lc3M6IG51bWJlcjtcclxuICAgICAgICBzdHJva2VTdGFydExpbmVDYXA6IFBlbkxpbmVDYXA7XHJcbiAgICAgICAgc3Ryb2tlRW5kTGluZUNhcDogUGVuTGluZUNhcDtcclxuICAgICAgICBzdHJva2VMaW5lSm9pbjogUGVuTGluZUpvaW47XHJcbiAgICAgICAgc3Ryb2tlTWl0ZXJMaW1pdDogbnVtYmVyO1xyXG5cclxuICAgICAgICBuYXR1cmFsQm91bmRzOiBSZWN0O1xyXG4gICAgfVxyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJU3RhdGUgZXh0ZW5kcyBjb3JlLmFycmFuZ2UuSVN0YXRlIHtcclxuICAgIH1cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSU91dHB1dCBleHRlbmRzIGNvcmUuYXJyYW5nZS5JT3V0cHV0IHtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgY2xhc3MgU2hhcGVBcnJhbmdlUGlwZURlZiBleHRlbmRzIGNvcmUuYXJyYW5nZS5BcnJhbmdlUGlwZURlZiB7XHJcbiAgICAgICAgY29uc3RydWN0b3IgKCkge1xyXG4gICAgICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgICAgICB0aGlzLnJlcGxhY2VUYXBpbignZG9PdmVycmlkZScsIHRhcGlucy5kb092ZXJyaWRlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb250cm9scy5ib3JkZXIucmVuZGVyLmhlbHBlcnMge1xyXG4gICAgdmFyIEFSQ19UT19CRVpJRVIgPSAwLjU1MjI4NDc1O1xyXG5cclxuICAgIGV4cG9ydCBmdW5jdGlvbiBkcmF3Qm9yZGVyUmVjdCAoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIGV4dGVudHM6IFJlY3QsIGNyPzogSUNvcm5lclJhZGl1cykge1xyXG4gICAgICAgIGlmICghY3IgfHwgQ29ybmVyUmFkaXVzLmlzRW1wdHkoY3IpKSB7XHJcbiAgICAgICAgICAgIGN0eC5yZWN0KGV4dGVudHMueCwgZXh0ZW50cy55LCBleHRlbnRzLndpZHRoLCBleHRlbnRzLmhlaWdodCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciB0b3BfYWRqID0gTWF0aC5tYXgoY3IudG9wTGVmdCArIGNyLnRvcFJpZ2h0IC0gZXh0ZW50cy53aWR0aCwgMCkgLyAyO1xyXG4gICAgICAgIHZhciBib3R0b21fYWRqID0gTWF0aC5tYXgoY3IuYm90dG9tTGVmdCArIGNyLmJvdHRvbVJpZ2h0IC0gZXh0ZW50cy53aWR0aCwgMCkgLyAyO1xyXG4gICAgICAgIHZhciBsZWZ0X2FkaiA9IE1hdGgubWF4KGNyLnRvcExlZnQgKyBjci5ib3R0b21MZWZ0IC0gZXh0ZW50cy5oZWlnaHQsIDApIC8gMjtcclxuICAgICAgICB2YXIgcmlnaHRfYWRqID0gTWF0aC5tYXgoY3IudG9wUmlnaHQgKyBjci5ib3R0b21SaWdodCAtIGV4dGVudHMuaGVpZ2h0LCAwKSAvIDI7XHJcblxyXG4gICAgICAgIHZhciB0bHQgPSBjci50b3BMZWZ0IC0gdG9wX2FkajtcclxuICAgICAgICBjdHgubW92ZVRvKGV4dGVudHMueCArIHRsdCwgZXh0ZW50cy55KTtcclxuXHJcbiAgICAgICAgdmFyIHRydCA9IGNyLnRvcFJpZ2h0IC0gdG9wX2FkajtcclxuICAgICAgICB2YXIgdHJyID0gY3IudG9wUmlnaHQgLSByaWdodF9hZGo7XHJcbiAgICAgICAgY3R4LmxpbmVUbyhleHRlbnRzLnggKyBleHRlbnRzLndpZHRoIC0gdHJ0LCBleHRlbnRzLnkpO1xyXG4gICAgICAgIGN0eC5iZXppZXJDdXJ2ZVRvKFxyXG4gICAgICAgICAgICBleHRlbnRzLnggKyBleHRlbnRzLndpZHRoIC0gdHJ0ICsgdHJ0ICogQVJDX1RPX0JFWklFUiwgZXh0ZW50cy55LFxyXG4gICAgICAgICAgICBleHRlbnRzLnggKyBleHRlbnRzLndpZHRoLCBleHRlbnRzLnkgKyB0cnIgLSB0cnIgKiBBUkNfVE9fQkVaSUVSLFxyXG4gICAgICAgICAgICBleHRlbnRzLnggKyBleHRlbnRzLndpZHRoLCBleHRlbnRzLnkgKyB0cnIpO1xyXG5cclxuICAgICAgICB2YXIgYnJyID0gY3IuYm90dG9tUmlnaHQgLSByaWdodF9hZGo7XHJcbiAgICAgICAgdmFyIGJyYiA9IGNyLmJvdHRvbVJpZ2h0IC0gYm90dG9tX2FkajtcclxuICAgICAgICBjdHgubGluZVRvKGV4dGVudHMueCArIGV4dGVudHMud2lkdGgsIGV4dGVudHMueSArIGV4dGVudHMuaGVpZ2h0IC0gYnJyKTtcclxuICAgICAgICBjdHguYmV6aWVyQ3VydmVUbyhcclxuICAgICAgICAgICAgZXh0ZW50cy54ICsgZXh0ZW50cy53aWR0aCwgZXh0ZW50cy55ICsgZXh0ZW50cy5oZWlnaHQgLSBicnIgKyBicnIgKiBBUkNfVE9fQkVaSUVSLFxyXG4gICAgICAgICAgICBleHRlbnRzLnggKyBleHRlbnRzLndpZHRoICsgYnJiICogQVJDX1RPX0JFWklFUiAtIGJyYiwgZXh0ZW50cy55ICsgZXh0ZW50cy5oZWlnaHQsXHJcbiAgICAgICAgICAgIGV4dGVudHMueCArIGV4dGVudHMud2lkdGggLSBicmIsIGV4dGVudHMueSArIGV4dGVudHMuaGVpZ2h0KTtcclxuXHJcbiAgICAgICAgdmFyIGJsYiA9IGNyLmJvdHRvbUxlZnQgLSBib3R0b21fYWRqO1xyXG4gICAgICAgIHZhciBibGwgPSBjci5ib3R0b21MZWZ0IC0gbGVmdF9hZGo7XHJcbiAgICAgICAgY3R4LmxpbmVUbyhleHRlbnRzLnggKyBibGIsIGV4dGVudHMueSArIGV4dGVudHMuaGVpZ2h0KTtcclxuICAgICAgICBjdHguYmV6aWVyQ3VydmVUbyhcclxuICAgICAgICAgICAgZXh0ZW50cy54ICsgYmxiIC0gYmxiICogQVJDX1RPX0JFWklFUiwgZXh0ZW50cy55ICsgZXh0ZW50cy5oZWlnaHQsXHJcbiAgICAgICAgICAgIGV4dGVudHMueCwgZXh0ZW50cy55ICsgZXh0ZW50cy5oZWlnaHQgLSBibGwgKyBibGwgKiBBUkNfVE9fQkVaSUVSLFxyXG4gICAgICAgICAgICBleHRlbnRzLngsIGV4dGVudHMueSArIGV4dGVudHMuaGVpZ2h0IC0gYmxsKTtcclxuXHJcbiAgICAgICAgdmFyIHRsbCA9IGNyLnRvcExlZnQgLSBsZWZ0X2FkajtcclxuICAgICAgICBjdHgubGluZVRvKGV4dGVudHMueCwgZXh0ZW50cy55ICsgdGxsKTtcclxuICAgICAgICBjdHguYmV6aWVyQ3VydmVUbyhcclxuICAgICAgICAgICAgZXh0ZW50cy54LCBleHRlbnRzLnkgKyB0bGwgLSB0bGwgKiBBUkNfVE9fQkVaSUVSLFxyXG4gICAgICAgICAgICBleHRlbnRzLnggKyB0bHQgLSB0bHQgKiBBUkNfVE9fQkVaSUVSLCBleHRlbnRzLnksXHJcbiAgICAgICAgICAgIGV4dGVudHMueCArIHRsdCwgZXh0ZW50cy55KTtcclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvbnRyb2xzLmJvcmRlci5yZW5kZXIudGFwaW5zIHtcclxuICAgIGV4cG9ydCBmdW5jdGlvbiBjYWxjSW5uZXJPdXRlciAoaW5wdXQ6IElJbnB1dCwgc3RhdGU6IElTdGF0ZSwgb3V0cHV0OiBJT3V0cHV0LCBjdHg6IGNvcmUucmVuZGVyLlJlbmRlckNvbnRleHQsIHJlZ2lvbjogUmVjdCwgdHJlZTogY29yZS5JVXBkYXRlclRyZWUpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAoIXN0YXRlLnNob3VsZFJlbmRlcilcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcblxyXG4gICAgICAgIFJlY3QuY29weVRvKGlucHV0LmV4dGVudHMsIHN0YXRlLmZpbGxFeHRlbnRzKTtcclxuXHJcbiAgICAgICAgdmFyIGJ0ID0gaW5wdXQuYm9yZGVyVGhpY2tuZXNzO1xyXG4gICAgICAgIFRoaWNrbmVzcy5zaHJpbmtSZWN0KGJ0LCBzdGF0ZS5maWxsRXh0ZW50cyk7XHJcblxyXG4gICAgICAgIHZhciBpYSA9IHN0YXRlLmlubmVyQ29ybmVyUmFkaXVzO1xyXG4gICAgICAgIENvcm5lclJhZGl1cy5jb3B5VG8oaW5wdXQuY29ybmVyUmFkaXVzLCBpYSk7XHJcbiAgICAgICAgVGhpY2tuZXNzLnNocmlua0Nvcm5lclJhZGl1cyhidCwgaWEpO1xyXG5cclxuICAgICAgICB2YXIgb2EgPSBzdGF0ZS5vdXRlckNvcm5lclJhZGl1cztcclxuICAgICAgICBDb3JuZXJSYWRpdXMuY29weVRvKGlucHV0LmNvcm5lclJhZGl1cywgb2EpO1xyXG4gICAgICAgIFRoaWNrbmVzcy5ncm93Q29ybmVyUmFkaXVzKGJ0LCBvYSk7XHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG59IiwibW9kdWxlIG1pbmVydmEuY29udHJvbHMuYm9yZGVyLnJlbmRlci50YXBpbnMge1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGNhbGNTaG91bGRSZW5kZXIgKGlucHV0OiBJSW5wdXQsIHN0YXRlOiBJU3RhdGUsIG91dHB1dDogSU91dHB1dCwgY3R4OiBjb3JlLnJlbmRlci5SZW5kZXJDb250ZXh0LCByZWdpb246IFJlY3QsIHRyZWU6IGNvcmUuSVVwZGF0ZXJUcmVlKTogYm9vbGVhbiB7XHJcbiAgICAgICAgc3RhdGUuc2hvdWxkUmVuZGVyID0gZmFsc2U7XHJcbiAgICAgICAgaWYgKCFpbnB1dC5iYWNrZ3JvdW5kICYmICFpbnB1dC5ib3JkZXJCcnVzaClcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgaWYgKFJlY3QuaXNFbXB0eShpbnB1dC5leHRlbnRzKSlcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgdmFyIGZpbGxPbmx5ID0gIWlucHV0LmJvcmRlckJydXNoIHx8ICFpbnB1dC5ib3JkZXJUaGlja25lc3MgfHwgVGhpY2tuZXNzLmlzRW1wdHkoaW5wdXQuYm9yZGVyVGhpY2tuZXNzKTtcclxuICAgICAgICBpZiAoZmlsbE9ubHkgJiYgIWlucHV0LmJhY2tncm91bmQpXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIHN0YXRlLnNob3VsZFJlbmRlciA9IHRydWU7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb250cm9scy5ib3JkZXIucmVuZGVyLnRhcGlucyB7XHJcbiAgICBleHBvcnQgZnVuY3Rpb24gZG9SZW5kZXIgKGlucHV0OiBJSW5wdXQsIHN0YXRlOiBJU3RhdGUsIG91dHB1dDogSU91dHB1dCwgY3R4OiBjb3JlLnJlbmRlci5SZW5kZXJDb250ZXh0LCByZWdpb246IFJlY3QsIHRyZWU6IGNvcmUuSVVwZGF0ZXJUcmVlKTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKCFzdGF0ZS5zaG91bGRSZW5kZXIpXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIGN0eC5zYXZlKCk7XHJcbiAgICAgICAgY29yZS5oZWxwZXJzLnJlbmRlckxheW91dENsaXAoY3R4LCBpbnB1dCwgdHJlZSk7XHJcblxyXG4gICAgICAgIHZhciBib3JkZXJCcnVzaCA9IGlucHV0LmJvcmRlckJydXNoO1xyXG4gICAgICAgIHZhciBleHRlbnRzID0gaW5wdXQuZXh0ZW50cztcclxuICAgICAgICB2YXIgZmlsbEV4dGVudHMgPSBzdGF0ZS5maWxsRXh0ZW50cztcclxuICAgICAgICB2YXIgcmF3ID0gY3R4LnJhdztcclxuICAgICAgICBpZiAoYm9yZGVyQnJ1c2ggJiYgIVJlY3QuaXNFbXB0eShleHRlbnRzKSkge1xyXG4gICAgICAgICAgICByYXcuYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgICAgIGhlbHBlcnMuZHJhd0JvcmRlclJlY3QocmF3LCBleHRlbnRzLCBzdGF0ZS5vdXRlckNvcm5lclJhZGl1cyk7XHJcbiAgICAgICAgICAgIGhlbHBlcnMuZHJhd0JvcmRlclJlY3QocmF3LCBmaWxsRXh0ZW50cywgc3RhdGUuaW5uZXJDb3JuZXJSYWRpdXMpO1xyXG4gICAgICAgICAgICBjdHguZmlsbEV4KGJvcmRlckJydXNoLCBleHRlbnRzLCBGaWxsUnVsZS5FdmVuT2RkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGJhY2tncm91bmQgPSBpbnB1dC5iYWNrZ3JvdW5kO1xyXG4gICAgICAgIGlmIChiYWNrZ3JvdW5kICYmICFSZWN0LmlzRW1wdHkoZmlsbEV4dGVudHMpKSB7XHJcbiAgICAgICAgICAgIHJhdy5iZWdpblBhdGgoKTtcclxuICAgICAgICAgICAgaGVscGVycy5kcmF3Qm9yZGVyUmVjdChyYXcsIGZpbGxFeHRlbnRzLCBzdGF0ZS5pbm5lckNvcm5lclJhZGl1cyk7XHJcbiAgICAgICAgICAgIGN0eC5maWxsRXgoYmFja2dyb3VuZCwgZmlsbEV4dGVudHMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY3R4LnJlc3RvcmUoKTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvbnRyb2xzLmNhbnZhcy5hcnJhbmdlLnRhcGlucyB7XHJcbiAgICBleHBvcnQgZnVuY3Rpb24gYnVpbGRMYXlvdXRDbGlwIChpbnB1dDogSUlucHV0LCBzdGF0ZTogSVN0YXRlLCBvdXRwdXQ6IElPdXRwdXQsIHRyZWU6IGNvcmUuSVVwZGF0ZXJUcmVlLCBmaW5hbFJlY3Q6IFJlY3QpOiBib29sZWFuIHtcclxuICAgICAgICB2YXIgbGMgPSBvdXRwdXQubGF5b3V0Q2xpcDtcclxuICAgICAgICBsYy54ID0gbGMueSA9IGxjLndpZHRoID0gbGMuaGVpZ2h0ID0gMDtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvbnRyb2xzLmNhbnZhcy5hcnJhbmdlLnRhcGlucyB7XHJcbiAgICBleHBvcnQgZnVuY3Rpb24gZG9PdmVycmlkZSAoaW5wdXQ6IElJbnB1dCwgc3RhdGU6IElTdGF0ZSwgb3V0cHV0OiBJT3V0cHV0LCB0cmVlOiBjb3JlLklVcGRhdGVyVHJlZSwgZmluYWxSZWN0OiBSZWN0KTogYm9vbGVhbiB7XHJcbiAgICAgICAgdmFyIGNyID0gc3RhdGUuY2hpbGRSZWN0O1xyXG4gICAgICAgIHZhciBjaGlsZDogY29yZS5VcGRhdGVyO1xyXG4gICAgICAgIGZvciAodmFyIHdhbGtlciA9IHRyZWUud2FsaygpOyB3YWxrZXIuc3RlcCgpOykge1xyXG4gICAgICAgICAgICBjaGlsZCA9IHdhbGtlci5jdXJyZW50O1xyXG4gICAgICAgICAgICBTaXplLmNvcHlUbyhjaGlsZC5hc3NldHMuZGVzaXJlZFNpemUsIGNyKTtcclxuICAgICAgICAgICAgLy9OT1RFOiBDb2VyY2luZyB1bmRlZmluZWQsIG51bGwsIE5hTiwgYW5kIDAgdG8gMFxyXG4gICAgICAgICAgICBjci54ID0gY2hpbGQuZ2V0QXR0YWNoZWRWYWx1ZShcIkNhbnZhcy5MZWZ0XCIpIHx8IDA7XHJcbiAgICAgICAgICAgIGNyLnkgPSBjaGlsZC5nZXRBdHRhY2hlZFZhbHVlKFwiQ2FudmFzLlRvcFwiKSB8fCAwO1xyXG4gICAgICAgICAgICBjaGlsZC5hcnJhbmdlKGNyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgU2l6ZS5jb3B5VG8oc3RhdGUuZmluYWxTaXplLCBzdGF0ZS5hcnJhbmdlZFNpemUpO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG59IiwibW9kdWxlIG1pbmVydmEuY29udHJvbHMuY2FudmFzLm1lYXN1cmUudGFwaW5zIHtcclxuICAgIGV4cG9ydCBmdW5jdGlvbiBkb092ZXJyaWRlIChpbnB1dDogSUlucHV0LCBzdGF0ZTogSVN0YXRlLCBvdXRwdXQ6IElPdXRwdXQsIHRyZWU6IGNvcmUuSVVwZGF0ZXJUcmVlLCBhdmFpbGFibGVTaXplOiBTaXplKTogYm9vbGVhbiB7XHJcbiAgICAgICAgdmFyIGF2YWlsYWJsZSA9IHN0YXRlLmF2YWlsYWJsZVNpemU7XHJcbiAgICAgICAgYXZhaWxhYmxlLndpZHRoID0gYXZhaWxhYmxlLmhlaWdodCA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcclxuICAgICAgICBmb3IgKHZhciB3YWxrZXIgPSB0cmVlLndhbGsoKTsgd2Fsa2VyLnN0ZXAoKTspIHtcclxuICAgICAgICAgICAgd2Fsa2VyLmN1cnJlbnQubWVhc3VyZShhdmFpbGFibGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgZGVzaXJlZCA9IG91dHB1dC5kZXNpcmVkU2l6ZTtcclxuICAgICAgICBkZXNpcmVkLndpZHRoID0gZGVzaXJlZC5oZWlnaHQgPSAwO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG59IiwibW9kdWxlIG1pbmVydmEuY29udHJvbHMuY2FudmFzLnByb2Nlc3N1cC50YXBpbnMge1xyXG4gICAgZXhwb3J0IHZhciBjYWxjUGFpbnRCb3VuZHMgPSBmdW5jdGlvbiAoaW5wdXQ6IElJbnB1dCwgc3RhdGU6IElTdGF0ZSwgb3V0cHV0OiBJT3V0cHV0LCB0cmVlOiBjb3JlLklVcGRhdGVyVHJlZSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmICgoaW5wdXQuZGlydHlGbGFncyAmIERpcnR5RmxhZ3MuQm91bmRzKSA9PT0gMClcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcblxyXG4gICAgICAgIGNvcmUuaGVscGVycy5pbnRlcnNlY3RCb3VuZHNXaXRoQ2xpcFBhdGgob3V0cHV0Lmdsb2JhbEJvdW5kc1dpdGhDaGlsZHJlbiwgb3V0cHV0LmV4dGVudHNXaXRoQ2hpbGRyZW4sIGlucHV0LmVmZmVjdFBhZGRpbmcsIGlucHV0LnJlbmRlclhmb3JtLCBpbnB1dC5jbGlwLCBpbnB1dC5sYXlvdXRDbGlwKTtcclxuICAgICAgICB2YXIgc2J3YyA9IG91dHB1dC5zdXJmYWNlQm91bmRzV2l0aENoaWxkcmVuO1xyXG4gICAgICAgIHZhciBzdXJmYWNlID0gdHJlZS5zdXJmYWNlO1xyXG4gICAgICAgIGlmIChzdXJmYWNlICYmIHRyZWUuaXNUb3ApIHtcclxuICAgICAgICAgICAgc2J3Yy54ID0gc2J3Yy55ID0gMDtcclxuICAgICAgICAgICAgc2J3Yy53aWR0aCA9IHN1cmZhY2Uud2lkdGg7XHJcbiAgICAgICAgICAgIHNid2MuaGVpZ2h0ID0gc3VyZmFjZS5oZWlnaHQ7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29yZS5oZWxwZXJzLmludGVyc2VjdEJvdW5kc1dpdGhDbGlwUGF0aChzYndjLCBvdXRwdXQuZXh0ZW50c1dpdGhDaGlsZHJlbiwgaW5wdXQuZWZmZWN0UGFkZGluZywgaW5wdXQuYWJzb2x1dGVYZm9ybSwgaW5wdXQuY2xpcCwgaW5wdXQubGF5b3V0Q2xpcCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH07XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb250cm9scy5ncmlkLmFycmFuZ2UudGFwaW5zIHtcclxuICAgIGV4cG9ydCBmdW5jdGlvbiBjYWxjQ29uc3VtZWQgKGlucHV0OiBJSW5wdXQsIHN0YXRlOiBJU3RhdGUsIG91dHB1dDogSU91dHB1dCwgdHJlZTogY29yZS5JVXBkYXRlclRyZWUsIGZpbmFsUmVjdDogUmVjdCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHZhciBjb24gPSBzdGF0ZS5jb25zdW1lZDtcclxuICAgICAgICBjb24ud2lkdGggPSBjb24uaGVpZ2h0ID0gMDtcclxuICAgICAgICB2YXIgZnMgPSBzdGF0ZS5maW5hbFNpemU7XHJcblxyXG4gICAgICAgIHZhciBjbSA9IGlucHV0LmdyaWRTdGF0ZS5jb2xNYXRyaXg7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjbS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb24ud2lkdGggKz0gKGNtW2ldW2ldLm9mZmVyZWQgPSBjbVtpXVtpXS5kZXNpcmVkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHJtID0gaW5wdXQuZ3JpZFN0YXRlLnJvd01hdHJpeDtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJtLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbi5oZWlnaHQgKz0gKHJtW2ldW2ldLm9mZmVyZWQgPSBybVtpXVtpXS5kZXNpcmVkKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjb24ud2lkdGggIT09IGZzLndpZHRoKVxyXG4gICAgICAgICAgICBoZWxwZXJzLmV4cGFuZFN0YXJDb2xzKGNtLCBpbnB1dC5jb2x1bW5EZWZpbml0aW9ucywgZnMpO1xyXG4gICAgICAgIGlmIChjb24uaGVpZ2h0ICE9PSBmcy5oZWlnaHQpXHJcbiAgICAgICAgICAgIGhlbHBlcnMuZXhwYW5kU3RhclJvd3Mocm0sIGlucHV0LnJvd0RlZmluaXRpb25zLCBmcyk7XHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG59IiwibW9kdWxlIG1pbmVydmEuY29udHJvbHMuZ3JpZC5hcnJhbmdlLnRhcGlucyB7XHJcbiAgICBleHBvcnQgZnVuY3Rpb24gZG9PdmVycmlkZSAoaW5wdXQ6IElJbnB1dCwgc3RhdGU6IElTdGF0ZSwgb3V0cHV0OiBJT3V0cHV0LCB0cmVlOiBjb3JlLklVcGRhdGVyVHJlZSwgZmluYWxSZWN0OiBSZWN0KTogYm9vbGVhbiB7XHJcbiAgICAgICAgdmFyIGNyID0gc3RhdGUuY2hpbGRSZWN0O1xyXG5cclxuICAgICAgICB2YXIgcm0gPSBpbnB1dC5ncmlkU3RhdGUucm93TWF0cml4O1xyXG4gICAgICAgIHZhciBjbSA9IGlucHV0LmdyaWRTdGF0ZS5jb2xNYXRyaXg7XHJcblxyXG4gICAgICAgIGZvciAodmFyIHdhbGtlciA9IHRyZWUud2FsaygpOyB3YWxrZXIuc3RlcCgpOykge1xyXG4gICAgICAgICAgICB2YXIgY2hpbGQgPSB3YWxrZXIuY3VycmVudDtcclxuXHJcbiAgICAgICAgICAgIHZhciBjb2wgPSBNYXRoLm1pbihjaGlsZC5nZXRBdHRhY2hlZFZhbHVlKFwiR3JpZC5Db2x1bW5cIiksIGNtLmxlbmd0aCAtIDEpO1xyXG4gICAgICAgICAgICBpZiAoaXNOYU4oY29sKSlcclxuICAgICAgICAgICAgICAgIGNvbCA9IDA7XHJcbiAgICAgICAgICAgIHZhciByb3cgPSBNYXRoLm1pbihjaGlsZC5nZXRBdHRhY2hlZFZhbHVlKFwiR3JpZC5Sb3dcIiksIHJtLmxlbmd0aCAtIDEpO1xyXG4gICAgICAgICAgICBpZiAoaXNOYU4ocm93KSlcclxuICAgICAgICAgICAgICAgIHJvdyA9IDA7XHJcbiAgICAgICAgICAgIHZhciBjb2xzcGFuID0gTWF0aC5taW4oY2hpbGQuZ2V0QXR0YWNoZWRWYWx1ZShcIkdyaWQuQ29sdW1uU3BhblwiKSwgY20ubGVuZ3RoIC0gY29sKTtcclxuICAgICAgICAgICAgaWYgKGlzTmFOKGNvbHNwYW4pKVxyXG4gICAgICAgICAgICAgICAgY29sc3BhbiA9IDE7XHJcbiAgICAgICAgICAgIHZhciByb3dzcGFuID0gTWF0aC5taW4oY2hpbGQuZ2V0QXR0YWNoZWRWYWx1ZShcIkdyaWQuUm93U3BhblwiKSwgcm0ubGVuZ3RoIC0gcm93KTtcclxuICAgICAgICAgICAgaWYgKGlzTmFOKHJvd3NwYW4pKVxyXG4gICAgICAgICAgICAgICAgcm93c3BhbiA9IDE7XHJcblxyXG4gICAgICAgICAgICBjci54ID0gY3IueSA9IGNyLndpZHRoID0gY3IuaGVpZ2h0ID0gMDtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb2w7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY3IueCArPSBjbVtpXVtpXS5vZmZlcmVkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBjb2w7IGkgPCBjb2wgKyBjb2xzcGFuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGNyLndpZHRoICs9IGNtW2ldW2ldLm9mZmVyZWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByb3c7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY3IueSArPSBybVtpXVtpXS5vZmZlcmVkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSByb3c7IGkgPCByb3cgKyByb3dzcGFuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGNyLmhlaWdodCArPSBybVtpXVtpXS5vZmZlcmVkO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjaGlsZC5hcnJhbmdlKGNyKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIFNpemUuY29weVRvKHN0YXRlLmZpbmFsU2l6ZSwgc3RhdGUuYXJyYW5nZWRTaXplKTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvbnRyb2xzLmdyaWQuYXJyYW5nZS50YXBpbnMge1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHJlc3RvcmVNZWFzdXJlUmVzdWx0cyAoaW5wdXQ6IElJbnB1dCwgc3RhdGU6IElTdGF0ZSwgb3V0cHV0OiBJT3V0cHV0LCB0cmVlOiBjb3JlLklVcGRhdGVyVHJlZSwgZmluYWxSZWN0OiBSZWN0KTogYm9vbGVhbiB7XHJcbiAgICAgICAgZm9yICh2YXIgcm0gPSBpbnB1dC5ncmlkU3RhdGUucm93TWF0cml4LCBpID0gMDsgaSA8IHJtLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDw9IGk7IGorKykge1xyXG4gICAgICAgICAgICAgICAgcm1baV1bal0ub2ZmZXJlZCA9IHJtW2ldW2pdLm9yaWdpbmFsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKHZhciBjbSA9IGlucHV0LmdyaWRTdGF0ZS5jb2xNYXRyaXgsIGkgPSAwOyBpIDwgY20ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPD0gaTsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICBjbVtpXVtqXS5vZmZlcmVkID0gY21baV1bal0ub3JpZ2luYWw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG59IiwibW9kdWxlIG1pbmVydmEuY29udHJvbHMuZ3JpZC5hcnJhbmdlLnRhcGlucyB7XHJcbiAgICBleHBvcnQgZnVuY3Rpb24gc2V0QWN0dWFscyAoaW5wdXQ6IElJbnB1dCwgc3RhdGU6IElTdGF0ZSwgb3V0cHV0OiBJT3V0cHV0LCB0cmVlOiBjb3JlLklVcGRhdGVyVHJlZSwgZmluYWxSZWN0OiBSZWN0KTogYm9vbGVhbiB7XHJcbiAgICAgICAgZm9yICh2YXIgY29sZGVmcyA9IGlucHV0LmNvbHVtbkRlZmluaXRpb25zLCBjbSA9IGlucHV0LmdyaWRTdGF0ZS5jb2xNYXRyaXgsIGkgPSAwOyBpIDwgY29sZGVmcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb2xkZWZzW2ldLnNldEFjdHVhbFdpZHRoKGNtW2ldW2ldLm9mZmVyZWQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yICh2YXIgcm93ZGVmcyA9IGlucHV0LnJvd0RlZmluaXRpb25zLCBybSA9IGlucHV0LmdyaWRTdGF0ZS5yb3dNYXRyaXgsIGkgPSAwOyBpIDwgcm93ZGVmcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICByb3dkZWZzW2ldLnNldEFjdHVhbEhlaWdodChybVtpXVtpXS5vZmZlcmVkKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG59IiwibW9kdWxlIG1pbmVydmEuY29udHJvbHMuZ3JpZC5tZWFzdXJlLnRhcGlucyB7XHJcbiAgICBleHBvcnQgZnVuY3Rpb24gYnVpbGRTaGFwZSAoaW5wdXQ6IElJbnB1dCwgc3RhdGU6IElTdGF0ZSwgb3V0cHV0OiBwYW5lbC5tZWFzdXJlLklPdXRwdXQsIHRyZWU6IHBhbmVsLlBhbmVsVXBkYXRlclRyZWUsIGZpbmFsUmVjdDogUmVjdCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHZhciBzaGFwZXMgPSBzdGF0ZS5jaGlsZFNoYXBlcztcclxuICAgICAgICB2YXIgY20gPSBpbnB1dC5ncmlkU3RhdGUuY29sTWF0cml4O1xyXG4gICAgICAgIHZhciBybSA9IGlucHV0LmdyaWRTdGF0ZS5yb3dNYXRyaXg7XHJcbiAgICAgICAgZm9yICh2YXIgd2Fsa2VyID0gdHJlZS53YWxrKCksIGkgPSAwOyB3YWxrZXIuc3RlcCgpOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGkgPiBzaGFwZXMubGVuZ3RoKVxyXG4gICAgICAgICAgICAgICAgc2hhcGVzLnB1c2gobmV3IEdyaWRDaGlsZFNoYXBlKCkuaW5pdCh3YWxrZXIuY3VycmVudCwgcm0sIGNtKSk7XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIChzaGFwZXNbaV0gPSBzaGFwZXNbaV0gfHwgbmV3IEdyaWRDaGlsZFNoYXBlKCkpLmluaXQod2Fsa2VyLmN1cnJlbnQsIHJtLCBjbSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpIDwgc2hhcGVzLmxlbmd0aClcclxuICAgICAgICAgICAgc2hhcGVzLnNsaWNlKGksIHNoYXBlcy5sZW5ndGggLSBpKTtcclxuXHJcbiAgICAgICAgc3RhdGUuZ3JpZFNoYXBlLmluaXQoc3RhdGUuY2hpbGRTaGFwZXMpO1xyXG5cclxuICAgICAgICBzdGF0ZS5wbGFjZW1lbnRzLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgc3RhdGUucGxhY2VtZW50cy5wdXNoKG5ldyBHcmlkQ2hpbGRQbGFjZW1lbnQobnVsbCwgMCwgMCwgMCkpO1xyXG4gICAgICAgIHN0YXRlLnBsYWNlbWVudEluZGV4ID0gMDtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb250cm9scy5ncmlkLm1lYXN1cmUudGFwaW5zIHtcclxuICAgIGV4cG9ydCBmdW5jdGlvbiBjcmVhdGVEb092ZXJyaWRlUGFzcyAocGFzczogT3ZlcnJpZGVQYXNzKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGRvT3ZlcnJpZGVQYXNzIChpbnB1dDogSUlucHV0LCBzdGF0ZTogSVN0YXRlLCBvdXRwdXQ6IHBhbmVsLm1lYXN1cmUuSU91dHB1dCwgdHJlZTogcGFuZWwuUGFuZWxVcGRhdGVyVHJlZSwgZmluYWxSZWN0OiBSZWN0KTogYm9vbGVhbiB7XHJcbiAgICAgICAgICAgIHZhciBybSA9IGlucHV0LmdyaWRTdGF0ZS5yb3dNYXRyaXg7XHJcbiAgICAgICAgICAgIHZhciBjbSA9IGlucHV0LmdyaWRTdGF0ZS5jb2xNYXRyaXg7XHJcblxyXG4gICAgICAgICAgICBpZiAodHJlZS5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBoZWxwZXJzLmV4cGFuZFN0YXJDb2xzKGNtLCBpbnB1dC5jb2x1bW5EZWZpbml0aW9ucywgc3RhdGUuYXZhaWxhYmxlU2l6ZSk7XHJcbiAgICAgICAgICAgICAgICBoZWxwZXJzLmV4cGFuZFN0YXJSb3dzKHJtLCBpbnB1dC5yb3dEZWZpbml0aW9ucywgc3RhdGUuYXZhaWxhYmxlU2l6ZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciBwbGFjZW1lbnRzID0gc3RhdGUucGxhY2VtZW50cztcclxuICAgICAgICAgICAgdmFyIHBsYWNlbWVudDogR3JpZENoaWxkUGxhY2VtZW50O1xyXG4gICAgICAgICAgICB2YXIgc2VwYXJhdG9yID0gcGxhY2VtZW50c1swXTtcclxuXHJcbiAgICAgICAgICAgIHZhciBzaGFwZXMgPSBzdGF0ZS5jaGlsZFNoYXBlcztcclxuICAgICAgICAgICAgdmFyIGNoaWxkU2l6ZSA9IHN0YXRlLmNoaWxkU2l6ZTtcclxuICAgICAgICAgICAgZm9yICh2YXIgd2Fsa2VyID0gdHJlZS53YWxrKCksIGkgPSAwOyB3YWxrZXIuc3RlcCgpOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IHdhbGtlci5jdXJyZW50O1xyXG4gICAgICAgICAgICAgICAgdmFyIGNoaWxkU2hhcGUgPSBzaGFwZXNbaV07XHJcbiAgICAgICAgICAgICAgICBpZiAoIWNoaWxkU2hhcGUuc2hvdWxkTWVhc3VyZVBhc3Moc3RhdGUuZ3JpZFNoYXBlLCBjaGlsZFNpemUsIHBhc3MpKVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY2hpbGRTaGFwZS5zaXplKGNoaWxkU2l6ZSwgcm0sIGNtKTtcclxuICAgICAgICAgICAgICAgIGNoaWxkLm1lYXN1cmUoY2hpbGRTaXplKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAocGFzcyAhPT0gT3ZlcnJpZGVQYXNzLlN0YXJBdXRvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50ID0gR3JpZENoaWxkUGxhY2VtZW50LnJvdyhybSwgY2hpbGRTaGFwZSwgY2hpbGQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwbGFjZW1lbnQucm93ID09PSBwbGFjZW1lbnQuY29sKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlbWVudHMuc3BsaWNlKHN0YXRlLnBsYWNlbWVudEluZGV4ICsgMSwgMCwgcGxhY2VtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnRzLnNwbGljZShzdGF0ZS5wbGFjZW1lbnRJbmRleCwgMCwgcGxhY2VtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUucGxhY2VtZW50SW5kZXgrKztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcGxhY2VtZW50ID0gR3JpZENoaWxkUGxhY2VtZW50LmNvbChjbSwgY2hpbGRTaGFwZSwgY2hpbGQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBsYWNlbWVudC5yb3cgPT09IHBsYWNlbWVudC5jb2wpIHtcclxuICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnRzLnNwbGljZShzdGF0ZS5wbGFjZW1lbnRJbmRleCArIDEsIDAsIHBsYWNlbWVudCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHBsYWNlbWVudHMuc3BsaWNlKHN0YXRlLnBsYWNlbWVudEluZGV4LCAwLCBwbGFjZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLnBsYWNlbWVudEluZGV4Kys7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHBsYWNlbWVudHMuc3BsaWNlKHN0YXRlLnBsYWNlbWVudEluZGV4LCAxKTtcclxuICAgICAgICAgICAgc3RhdGUucGxhY2VtZW50SW5kZXggPSAtMTtcclxuXHJcbiAgICAgICAgICAgIHdoaWxlIChwbGFjZW1lbnQgPSBwbGFjZW1lbnRzLnBvcCgpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY2VsbCA9IHBsYWNlbWVudC5tYXRyaXhbcGxhY2VtZW50LnJvd11bcGxhY2VtZW50LmNvbF07XHJcbiAgICAgICAgICAgICAgICBjZWxsLmRlc2lyZWQgPSBNYXRoLm1heChjZWxsLmRlc2lyZWQsIHBsYWNlbWVudC5zaXplKTtcclxuICAgICAgICAgICAgICAgIGhlbHBlcnMuYWxsb2NhdGVEZXNpcmVkU2l6ZShybSwgY20pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHN0YXRlLnBsYWNlbWVudEluZGV4ID0gcGxhY2VtZW50cy5wdXNoKHNlcGFyYXRvcikgLSAxO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvbnRyb2xzLmdyaWQubWVhc3VyZS50YXBpbnMge1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGRvT3ZlcnJpZGUgKGlucHV0OiBJSW5wdXQsIHN0YXRlOiBJU3RhdGUsIG91dHB1dDogcGFuZWwubWVhc3VyZS5JT3V0cHV0LCB0cmVlOiBjb3JlLklVcGRhdGVyVHJlZSwgZmluYWxSZWN0OiBSZWN0KTogYm9vbGVhbiB7XHJcbiAgICAgICAgdmFyIGRlc2lyZWQgPSBvdXRwdXQuZGVzaXJlZFNpemU7XHJcbiAgICAgICAgZGVzaXJlZC53aWR0aCA9IGRlc2lyZWQuaGVpZ2h0ID0gMDtcclxuICAgICAgICBmb3IgKHZhciBjbSA9IGlucHV0LmdyaWRTdGF0ZS5jb2xNYXRyaXgsIGkgPSAwOyBpIDwgY20ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgZGVzaXJlZC53aWR0aCArPSBjbVtpXVtpXS5kZXNpcmVkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKHZhciBybSA9IGlucHV0LmdyaWRTdGF0ZS5yb3dNYXRyaXgsIGkgPSAwOyBpIDwgcm0ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgZGVzaXJlZC5oZWlnaHQgKz0gcm1baV1baV0uZGVzaXJlZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb250cm9scy5ncmlkLm1lYXN1cmUudGFwaW5zIHtcclxuICAgIGV4cG9ydCBmdW5jdGlvbiBlbnN1cmVDb2xNYXRyaXggKGlucHV0OiBJSW5wdXQsIHN0YXRlOiBJU3RhdGUsIG91dHB1dDogcGFuZWwubWVhc3VyZS5JT3V0cHV0LCB0cmVlOiBjb3JlLklVcGRhdGVyVHJlZSwgZmluYWxSZWN0OiBSZWN0KTogYm9vbGVhbiB7XHJcbiAgICAgICAgdmFyIGNvbENvdW50ID0gaW5wdXQuY29sdW1uRGVmaW5pdGlvbnMubGVuZ3RoIHx8IDE7XHJcbiAgICAgICAgdmFyIGNtID0gaW5wdXQuZ3JpZFN0YXRlLmNvbE1hdHJpeDtcclxuICAgICAgICBpZiAoY20ubGVuZ3RoID4gY29sQ291bnQpXHJcbiAgICAgICAgICAgIGNtLnNwbGljZShjb2xDb3VudCwgY20ubGVuZ3RoIC0gY29sQ291bnQpO1xyXG4gICAgICAgIGZvciAodmFyIGMgPSAwOyBjIDwgY29sQ291bnQ7IGMrKykge1xyXG4gICAgICAgICAgICBpZiAoY20ubGVuZ3RoIDw9IGMpXHJcbiAgICAgICAgICAgICAgICBjbS5wdXNoKFtdKTtcclxuICAgICAgICAgICAgdmFyIG1yb3cgPSBjbVtjXTtcclxuICAgICAgICAgICAgaWYgKG1yb3cubGVuZ3RoID4gYylcclxuICAgICAgICAgICAgICAgIG1yb3cuc3BsaWNlKGMsIG1yb3cubGVuZ3RoIC0gYyk7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGNjID0gMDsgY2MgPD0gYzsgY2MrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKG1yb3cubGVuZ3RoIDw9IGNjKVxyXG4gICAgICAgICAgICAgICAgICAgIG1yb3cucHVzaChuZXcgU2VnbWVudCgpKTtcclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICBTZWdtZW50LmluaXQobXJvd1tjY10pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvbnRyb2xzLmdyaWQubWVhc3VyZS50YXBpbnMge1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGVuc3VyZVJvd01hdHJpeCAoaW5wdXQ6IElJbnB1dCwgc3RhdGU6IElTdGF0ZSwgb3V0cHV0OiBwYW5lbC5tZWFzdXJlLklPdXRwdXQsIHRyZWU6IGNvcmUuSVVwZGF0ZXJUcmVlLCBmaW5hbFJlY3Q6IFJlY3QpOiBib29sZWFuIHtcclxuICAgICAgICB2YXIgcm93Q291bnQgPSBpbnB1dC5yb3dEZWZpbml0aW9ucy5sZW5ndGggfHwgMTtcclxuICAgICAgICB2YXIgcm0gPSBpbnB1dC5ncmlkU3RhdGUucm93TWF0cml4O1xyXG4gICAgICAgIGlmIChybS5sZW5ndGggPiByb3dDb3VudClcclxuICAgICAgICAgICAgcm0uc3BsaWNlKHJvd0NvdW50LCBybS5sZW5ndGggLSByb3dDb3VudCk7XHJcbiAgICAgICAgZm9yICh2YXIgciA9IDA7IHIgPCByb3dDb3VudDsgcisrKSB7XHJcbiAgICAgICAgICAgIGlmIChybS5sZW5ndGggPD0gcilcclxuICAgICAgICAgICAgICAgIHJtLnB1c2goW10pO1xyXG4gICAgICAgICAgICB2YXIgbXJvdyA9IHJtW3JdO1xyXG4gICAgICAgICAgICBpZiAobXJvdy5sZW5ndGggPiAociArIDEpKVxyXG4gICAgICAgICAgICAgICAgbXJvdy5zcGxpY2UociwgbXJvdy5sZW5ndGggLSByIC0gMSk7XHJcbiAgICAgICAgICAgIGZvciAodmFyIHJyID0gMDsgcnIgPD0gcjsgcnIrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKG1yb3cubGVuZ3RoIDw9IHJyKVxyXG4gICAgICAgICAgICAgICAgICAgIG1yb3cucHVzaChuZXcgU2VnbWVudCgpKTtcclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICBTZWdtZW50LmluaXQobXJvd1tycl0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxufSIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9HcmlkVW5pdFR5cGUudHNcIiAvPlxyXG5cclxubW9kdWxlIG1pbmVydmEuY29udHJvbHMuZ3JpZC5tZWFzdXJlLnRhcGlucyB7XHJcbiAgICB2YXIgREVGQVVMVF9HUklEX0xFTjogSUdyaWRMZW5ndGggPSB7XHJcbiAgICAgICAgVmFsdWU6IDEuMCxcclxuICAgICAgICBUeXBlOiBHcmlkVW5pdFR5cGUuU3RhclxyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gcHJlcGFyZUNvbE1hdHJpeCAoaW5wdXQ6IElJbnB1dCwgc3RhdGU6IElTdGF0ZSwgb3V0cHV0OiBwYW5lbC5tZWFzdXJlLklPdXRwdXQsIHRyZWU6IGNvcmUuSVVwZGF0ZXJUcmVlLCBmaW5hbFJlY3Q6IFJlY3QpOiBib29sZWFuIHtcclxuICAgICAgICB2YXIgY29sZGVmcyA9IGlucHV0LmNvbHVtbkRlZmluaXRpb25zO1xyXG4gICAgICAgIHZhciBjbSA9IGlucHV0LmdyaWRTdGF0ZS5jb2xNYXRyaXg7XHJcblxyXG4gICAgICAgIHZhciB0cyA9IHN0YXRlLnRvdGFsU3RhcnM7XHJcbiAgICAgICAgdHMud2lkdGggPSAwLjA7XHJcblxyXG4gICAgICAgIGlmIChjb2xkZWZzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICB2YXIgbWNlbGwgPSBjbVswXVswXTtcclxuICAgICAgICAgICAgbWNlbGwudHlwZSA9IEdyaWRVbml0VHlwZS5TdGFyO1xyXG4gICAgICAgICAgICBtY2VsbC5zdGFycyA9IDEuMDtcclxuICAgICAgICAgICAgdHMud2lkdGggKz0gMS4wO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29sZGVmcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgY29sZGVmID0gY29sZGVmc1tpXTtcclxuICAgICAgICAgICAgdmFyIHdpZHRoID0gY29sZGVmLldpZHRoIHx8IERFRkFVTFRfR1JJRF9MRU47XHJcbiAgICAgICAgICAgIGNvbGRlZi5zZXRBY3R1YWxXaWR0aChOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkpO1xyXG5cclxuICAgICAgICAgICAgdmFyIGNlbGwgPSBTZWdtZW50LmluaXQoY21baV1baV0sIDAuMCwgY29sZGVmLk1pbldpZHRoLCBjb2xkZWYuTWF4V2lkdGgsIHdpZHRoLlR5cGUpO1xyXG4gICAgICAgICAgICBpZiAod2lkdGguVHlwZSA9PT0gR3JpZFVuaXRUeXBlLlBpeGVsKSB7XHJcbiAgICAgICAgICAgICAgICBjZWxsLmRlc2lyZWQgPSBjZWxsLm9mZmVyZWQgPSBjZWxsLmNsYW1wKHdpZHRoLlZhbHVlKTtcclxuICAgICAgICAgICAgICAgIGNvbGRlZi5zZXRBY3R1YWxXaWR0aChjZWxsLmRlc2lyZWQpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHdpZHRoLlR5cGUgPT09IEdyaWRVbml0VHlwZS5TdGFyKSB7XHJcbiAgICAgICAgICAgICAgICBjZWxsLnN0YXJzID0gd2lkdGguVmFsdWU7XHJcbiAgICAgICAgICAgICAgICB0cy53aWR0aCArPSB3aWR0aC5WYWx1ZTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh3aWR0aC5UeXBlID09PSBHcmlkVW5pdFR5cGUuQXV0bykge1xyXG4gICAgICAgICAgICAgICAgY2VsbC5kZXNpcmVkID0gY2VsbC5vZmZlcmVkID0gY2VsbC5jbGFtcCgwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb250cm9scy5ncmlkLm1lYXN1cmUudGFwaW5zIHtcclxuICAgIHZhciBERUZBVUxUX0dSSURfTEVOOiBJR3JpZExlbmd0aCA9IHtcclxuICAgICAgICBWYWx1ZTogMS4wLFxyXG4gICAgICAgIFR5cGU6IEdyaWRVbml0VHlwZS5TdGFyXHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydCBmdW5jdGlvbiBwcmVwYXJlUm93TWF0cml4IChpbnB1dDogSUlucHV0LCBzdGF0ZTogSVN0YXRlLCBvdXRwdXQ6IHBhbmVsLm1lYXN1cmUuSU91dHB1dCwgdHJlZTogY29yZS5JVXBkYXRlclRyZWUsIGZpbmFsUmVjdDogUmVjdCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHZhciByb3dkZWZzID0gaW5wdXQucm93RGVmaW5pdGlvbnM7XHJcbiAgICAgICAgdmFyIHJtID0gaW5wdXQuZ3JpZFN0YXRlLnJvd01hdHJpeDtcclxuXHJcbiAgICAgICAgdmFyIHRzID0gc3RhdGUudG90YWxTdGFycztcclxuICAgICAgICB0cy5oZWlnaHQgPSAwLjA7XHJcblxyXG4gICAgICAgIGlmIChyb3dkZWZzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICB2YXIgbWNlbGwgPSBybVswXVswXTtcclxuICAgICAgICAgICAgbWNlbGwudHlwZSA9IEdyaWRVbml0VHlwZS5TdGFyO1xyXG4gICAgICAgICAgICBtY2VsbC5zdGFycyA9IDEuMDtcclxuICAgICAgICAgICAgdHMuaGVpZ2h0ICs9IDEuMDtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJvd2RlZnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdmFyIHJvd2RlZiA9IHJvd2RlZnNbaV07XHJcbiAgICAgICAgICAgIHZhciBoZWlnaHQgPSByb3dkZWYuSGVpZ2h0IHx8IERFRkFVTFRfR1JJRF9MRU47XHJcbiAgICAgICAgICAgIHJvd2RlZi5zZXRBY3R1YWxIZWlnaHQoTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBjZWxsID0gU2VnbWVudC5pbml0KHJtW2ldW2ldLCAwLjAsIHJvd2RlZi5NaW5IZWlnaHQsIHJvd2RlZi5NYXhIZWlnaHQsIGhlaWdodC5UeXBlKTtcclxuICAgICAgICAgICAgaWYgKGhlaWdodC5UeXBlID09PSBHcmlkVW5pdFR5cGUuUGl4ZWwpIHtcclxuICAgICAgICAgICAgICAgIGNlbGwuZGVzaXJlZCA9IGNlbGwub2ZmZXJlZCA9IGNlbGwuY2xhbXAoaGVpZ2h0LlZhbHVlKTtcclxuICAgICAgICAgICAgICAgIHJvd2RlZi5zZXRBY3R1YWxIZWlnaHQoY2VsbC5kZXNpcmVkKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChoZWlnaHQuVHlwZSA9PT0gR3JpZFVuaXRUeXBlLlN0YXIpIHtcclxuICAgICAgICAgICAgICAgIGNlbGwuc3RhcnMgPSBoZWlnaHQuVmFsdWU7XHJcbiAgICAgICAgICAgICAgICB0cy5oZWlnaHQgKz0gaGVpZ2h0LlZhbHVlO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhlaWdodC5UeXBlID09PSBHcmlkVW5pdFR5cGUuQXV0bykge1xyXG4gICAgICAgICAgICAgICAgY2VsbC5kZXNpcmVkID0gY2VsbC5vZmZlcmVkID0gY2VsbC5jbGFtcCgwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb250cm9scy5ncmlkLm1lYXN1cmUudGFwaW5zIHtcclxuICAgIGV4cG9ydCBmdW5jdGlvbiBzYXZlTWVhc3VyZVJlc3VsdHMgKGlucHV0OiBJSW5wdXQsIHN0YXRlOiBJU3RhdGUsIG91dHB1dDogcGFuZWwubWVhc3VyZS5JT3V0cHV0LCB0cmVlOiBjb3JlLklVcGRhdGVyVHJlZSwgZmluYWxSZWN0OiBSZWN0KTogYm9vbGVhbiB7XHJcbiAgICAgICAgZm9yICh2YXIgcm0gPSBpbnB1dC5ncmlkU3RhdGUucm93TWF0cml4LCBpID0gMDsgaSA8IHJtLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDw9IGk7IGorKykge1xyXG4gICAgICAgICAgICAgICAgcm1baV1bal0ub3JpZ2luYWwgPSBybVtpXVtqXS5vZmZlcmVkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKHZhciBjbSA9IGlucHV0LmdyaWRTdGF0ZS5jb2xNYXRyaXgsIGkgPSAwOyBpIDwgY20ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8PSBpOyBqKyspIHtcclxuICAgICAgICAgICAgICAgIGNtW2ldW2pdLm9yaWdpbmFsID0gY21baV1bal0ub2ZmZXJlZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb250cm9scy5ncmlkLnByb2Nlc3N1cC50YXBpbnMge1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGNhbGNFeHRlbnRzIChpbnB1dDogSUlucHV0LCBzdGF0ZTogSVN0YXRlLCBvdXRwdXQ6IElPdXRwdXQsIHRyZWU6IGNvcmUuSVVwZGF0ZXJUcmVlKTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKChpbnB1dC5kaXJ0eUZsYWdzICYgRGlydHlGbGFncy5Cb3VuZHMpID09PSAwKVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuXHJcbiAgICAgICAgdmFyIGUgPSBvdXRwdXQuZXh0ZW50cztcclxuICAgICAgICB2YXIgZXdjID0gb3V0cHV0LmV4dGVudHNXaXRoQ2hpbGRyZW47XHJcbiAgICAgICAgZS54ID0gZXdjLnggPSAwO1xyXG4gICAgICAgIGUueSA9IGV3Yy55ID0gMDtcclxuICAgICAgICB2YXIgYXMgPSBzdGF0ZS5hY3R1YWxTaXplO1xyXG4gICAgICAgIGUud2lkdGggPSBld2Mud2lkdGggPSBhcy53aWR0aDtcclxuICAgICAgICBlLmhlaWdodCA9IGV3Yy5oZWlnaHQgPSBhcy5oZWlnaHQ7XHJcblxyXG4gICAgICAgIGlmIChpbnB1dC5zaG93R3JpZExpbmVzKVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuXHJcbiAgICAgICAgdmFyIGFzc2V0czogY29yZS5JVXBkYXRlckFzc2V0cztcclxuICAgICAgICBmb3IgKHZhciB3YWxrZXIgPSB0cmVlLndhbGsoKTsgd2Fsa2VyLnN0ZXAoKTspIHtcclxuICAgICAgICAgICAgYXNzZXRzID0gd2Fsa2VyLmN1cnJlbnQuYXNzZXRzO1xyXG4gICAgICAgICAgICBpZiAoYXNzZXRzLnRvdGFsSXNSZW5kZXJWaXNpYmxlKVxyXG4gICAgICAgICAgICAgICAgUmVjdC51bmlvbihld2MsIGFzc2V0cy5nbG9iYWxCb3VuZHNXaXRoQ2hpbGRyZW4pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb250cm9scy5ncmlkLnByb2Nlc3N1cC50YXBpbnMge1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHByZUNhbGNFeHRlbnRzIChpbnB1dDogSUlucHV0LCBzdGF0ZTogSVN0YXRlLCBvdXRwdXQ6IElPdXRwdXQsIHRyZWU6IGNvcmUuSVVwZGF0ZXJUcmVlKTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKChpbnB1dC5kaXJ0eUZsYWdzICYgRGlydHlGbGFncy5Cb3VuZHMpID09PSAwKVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICBpZiAoIWlucHV0LmJhY2tncm91bmQgJiYgIWlucHV0LnNob3dHcmlkTGluZXMpIHtcclxuICAgICAgICAgICAgdmFyIGFzID0gc3RhdGUuYWN0dWFsU2l6ZTtcclxuICAgICAgICAgICAgYXMud2lkdGggPSBhcy5oZWlnaHQgPSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvbnRyb2xzLmltYWdlLmFycmFuZ2UudGFwaW5zIHtcclxuICAgIGV4cG9ydCBmdW5jdGlvbiBjYWxjSW1hZ2VCb3VuZHMgKGlucHV0OiBJSW5wdXQsIHN0YXRlOiBJU3RhdGUsIG91dHB1dDogY29yZS5hcnJhbmdlLklPdXRwdXQsIHRyZWU6IGNvcmUuSVVwZGF0ZXJUcmVlLCBmaW5hbFJlY3Q6IFJlY3QpOiBib29sZWFuIHtcclxuICAgICAgICB2YXIgaWIgPSBzdGF0ZS5pbWFnZUJvdW5kcztcclxuICAgICAgICBpYi54ID0gaWIueSA9IGliLndpZHRoID0gaWIuaGVpZ2h0ID0gMDtcclxuXHJcbiAgICAgICAgaWYgKGlucHV0LnNvdXJjZSkge1xyXG4gICAgICAgICAgICBpYi53aWR0aCA9IGlucHV0LnNvdXJjZS5waXhlbFdpZHRoO1xyXG4gICAgICAgICAgICBpYi5oZWlnaHQgPSBpbnB1dC5zb3VyY2UucGl4ZWxIZWlnaHQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgZnMgPSBzdGF0ZS5maW5hbFNpemU7XHJcbiAgICAgICAgaWYgKGliLndpZHRoID09PSAwKVxyXG4gICAgICAgICAgICBpYi53aWR0aCA9IGZzLndpZHRoO1xyXG4gICAgICAgIGlmIChpYi5oZWlnaHQgPT09IDApXHJcbiAgICAgICAgICAgIGliLmhlaWdodCA9IGZzLmhlaWdodDtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb250cm9scy5pbWFnZS5hcnJhbmdlLnRhcGlucyB7XHJcbiAgICBleHBvcnQgZnVuY3Rpb24gY2FsY1N0cmV0Y2ggKGlucHV0OiBJSW5wdXQsIHN0YXRlOiBJU3RhdGUsIG91dHB1dDogY29yZS5hcnJhbmdlLklPdXRwdXQsIHRyZWU6IGNvcmUuSVVwZGF0ZXJUcmVlLCBmaW5hbFJlY3Q6IFJlY3QpOiBib29sZWFuIHtcclxuICAgICAgICB2YXIgaWIgPSBzdGF0ZS5pbWFnZUJvdW5kcztcclxuXHJcbiAgICAgICAgdmFyIHN4ID0gMS4wO1xyXG4gICAgICAgIHZhciBzeSA9IDEuMDtcclxuXHJcbiAgICAgICAgdmFyIGZzID0gc3RhdGUuZmluYWxTaXplO1xyXG4gICAgICAgIGlmIChpYi53aWR0aCAhPT0gZnMud2lkdGgpXHJcbiAgICAgICAgICAgIHN4ID0gZnMud2lkdGggLyBpYi53aWR0aDtcclxuICAgICAgICBpZiAoaWIuaGVpZ2h0ICE9PSBmcy5oZWlnaHQpXHJcbiAgICAgICAgICAgIHN5ID0gZnMuaGVpZ2h0IC8gaWIuaGVpZ2h0O1xyXG5cclxuICAgICAgICBzd2l0Y2ggKGlucHV0LnN0cmV0Y2gpIHtcclxuICAgICAgICAgICAgY2FzZSBTdHJldGNoLlVuaWZvcm06XHJcbiAgICAgICAgICAgICAgICBzeCA9IHN5ID0gTWF0aC5taW4oc3gsIHN5KTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFN0cmV0Y2guVW5pZm9ybVRvRmlsbDpcclxuICAgICAgICAgICAgICAgIHN4ID0gc3kgPSBNYXRoLm1heChzeCwgc3kpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgU3RyZXRjaC5Ob25lOlxyXG4gICAgICAgICAgICAgICAgc3ggPSBzeSA9IDEuMDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFN0cmV0Y2guRmlsbDpcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3RhdGUuc3RyZXRjaFggPSBzeDtcclxuICAgICAgICBzdGF0ZS5zdHJldGNoWSA9IHN5O1xyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvbnRyb2xzLmltYWdlLmFycmFuZ2UudGFwaW5zIHtcclxuICAgIGV4cG9ydCBmdW5jdGlvbiBkb092ZXJyaWRlIChpbnB1dDogSUlucHV0LCBzdGF0ZTogSVN0YXRlLCBvdXRwdXQ6IGNvcmUuYXJyYW5nZS5JT3V0cHV0LCB0cmVlOiBjb3JlLklVcGRhdGVyVHJlZSwgZmluYWxSZWN0OiBSZWN0KTogYm9vbGVhbiB7XHJcbiAgICAgICAgdmFyIGFzID0gc3RhdGUuYXJyYW5nZWRTaXplO1xyXG4gICAgICAgIGFzLndpZHRoID0gc3RhdGUuaW1hZ2VCb3VuZHMud2lkdGggKiBzdGF0ZS5zdHJldGNoWDtcclxuICAgICAgICBhcy5oZWlnaHQgPSBzdGF0ZS5pbWFnZUJvdW5kcy5oZWlnaHQgKiBzdGF0ZS5zdHJldGNoWTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvbnRyb2xzLmltYWdlLmFycmFuZ2UudGFwaW5zIHtcclxuICAgIGV4cG9ydCBmdW5jdGlvbiBpbnZhbGlkYXRlTWV0cmljcyAoaW5wdXQ6IElJbnB1dCwgc3RhdGU6IElTdGF0ZSwgb3V0cHV0OiBjb3JlLmFycmFuZ2UuSU91dHB1dCwgdHJlZTogY29yZS5JVXBkYXRlclRyZWUsIGZpbmFsUmVjdDogUmVjdCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIG91dHB1dC5kaXJ0eUZsYWdzIHw9IERpcnR5RmxhZ3MuSW1hZ2VNZXRyaWNzO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG59IiwibW9kdWxlIG1pbmVydmEuY29udHJvbHMuaW1hZ2UuaGl0dGVzdC50YXBpbnMge1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGNhbkhpdEluc2lkZSAoZGF0YTogSUhpdFRlc3REYXRhLCBwb3M6IFBvaW50LCBoaXRMaXN0OiBjb3JlLlVwZGF0ZXJbXSwgY3R4OiBjb3JlLnJlbmRlci5SZW5kZXJDb250ZXh0KTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb250cm9scy5pbWFnZS5oaXR0ZXN0LnRhcGlucyB7XHJcbiAgICBleHBvcnQgZnVuY3Rpb24gaW5zaWRlQ2hpbGRyZW4gKGRhdGE6IElIaXRUZXN0RGF0YSwgcG9zOiBQb2ludCwgaGl0TGlzdDogY29yZS5VcGRhdGVyW10sIGN0eDogY29yZS5yZW5kZXIuUmVuZGVyQ29udGV4dCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGhpdExpc3QudW5zaGlmdChkYXRhLnVwZGF0ZXIpO1xyXG4gICAgICAgIGRhdGEuaGl0Q2hpbGRyZW4gPSBmYWxzZTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvbnRyb2xzLmltYWdlLmhpdHRlc3QudGFwaW5zIHtcclxuICAgIGV4cG9ydCBmdW5jdGlvbiBpbnNpZGVTdHJldGNoIChkYXRhOiBJSGl0VGVzdERhdGEsIHBvczogUG9pbnQsIGhpdExpc3Q6IGNvcmUuVXBkYXRlcltdLCBjdHg6IGNvcmUucmVuZGVyLlJlbmRlckNvbnRleHQpOiBib29sZWFuIHtcclxuICAgICAgICB2YXIgc291cmNlID0gZGF0YS5hc3NldHMuc291cmNlO1xyXG4gICAgICAgIGlmICghc291cmNlIHx8IHNvdXJjZS5waXhlbFdpZHRoID09PSAwIHx8IHNvdXJjZS5waXhlbEhlaWdodCA9PT0gMCkge1xyXG4gICAgICAgICAgICBoaXRMaXN0LnNoaWZ0KCk7XHJcbiAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBzdHJldGNoID0gZGF0YS5hc3NldHMuc3RyZXRjaDtcclxuICAgICAgICBpZiAoc3RyZXRjaCA9PT0gU3RyZXRjaC5GaWxsIHx8IHN0cmV0Y2ggPT09IFN0cmV0Y2guVW5pZm9ybVRvRmlsbClcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcblxyXG4gICAgICAgIHZhciBpciA9IGRhdGEuaW1nUmVjdDtcclxuICAgICAgICBpci54ID0gaXIueSA9IDA7XHJcbiAgICAgICAgaXIud2lkdGggPSBzb3VyY2UucGl4ZWxXaWR0aDtcclxuICAgICAgICBpci5oZWlnaHQgPSBzb3VyY2UucGl4ZWxIZWlnaHQ7XHJcbiAgICAgICAgUmVjdC50cmFuc2Zvcm0oaXIsIGRhdGEuYXNzZXRzLmltZ1hmb3JtKTtcclxuICAgICAgICBSZWN0LnRyYW5zZm9ybShpciwgY3R4LmN1cnJlbnRUcmFuc2Zvcm0pO1xyXG5cclxuICAgICAgICBpZiAoIVJlY3QuY29udGFpbnNQb2ludChpciwgcG9zKSkge1xyXG4gICAgICAgICAgICBoaXRMaXN0LnNoaWZ0KCk7XHJcbiAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG59IiwibW9kdWxlIG1pbmVydmEuY29udHJvbHMuaW1hZ2UubWVhc3VyZS50YXBpbnMge1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGNhbGNJbWFnZUJvdW5kcyAoaW5wdXQ6IElJbnB1dCwgc3RhdGU6IElTdGF0ZSwgb3V0cHV0OiBjb3JlLm1lYXN1cmUuSU91dHB1dCwgdHJlZTogY29yZS5JVXBkYXRlclRyZWUsIGF2YWlsYWJsZVNpemU6IFNpemUpOiBib29sZWFuIHtcclxuICAgICAgICB2YXIgaWIgPSBzdGF0ZS5pbWFnZUJvdW5kcztcclxuICAgICAgICBpYi54ID0gaWIueSA9IGliLndpZHRoID0gaWIuaGVpZ2h0ID0gMDtcclxuICAgICAgICBpZiAoIWlucHV0LnNvdXJjZSlcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgaWIud2lkdGggPSBpbnB1dC5zb3VyY2UucGl4ZWxXaWR0aDtcclxuICAgICAgICBpYi5oZWlnaHQgPSBpbnB1dC5zb3VyY2UucGl4ZWxIZWlnaHQ7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb250cm9scy5pbWFnZS5tZWFzdXJlLnRhcGlucyB7XHJcbiAgICBleHBvcnQgZnVuY3Rpb24gY2FsY1N0cmV0Y2ggKGlucHV0OiBJSW5wdXQsIHN0YXRlOiBJU3RhdGUsIG91dHB1dDogY29yZS5tZWFzdXJlLklPdXRwdXQsIHRyZWU6IGNvcmUuSVVwZGF0ZXJUcmVlLCBhdmFpbGFibGVTaXplOiBTaXplKTogYm9vbGVhbiB7XHJcbiAgICAgICAgdmFyIGFzID0gc3RhdGUuYXZhaWxhYmxlU2l6ZTtcclxuICAgICAgICB2YXIgZHcgPSBhcy53aWR0aDtcclxuICAgICAgICB2YXIgZGggPSBhcy5oZWlnaHQ7XHJcbiAgICAgICAgdmFyIGliID0gc3RhdGUuaW1hZ2VCb3VuZHM7XHJcblxyXG4gICAgICAgIGlmICghaXNGaW5pdGUoZHcpKVxyXG4gICAgICAgICAgICBkdyA9IGliLndpZHRoO1xyXG4gICAgICAgIGlmICghaXNGaW5pdGUoZGgpKVxyXG4gICAgICAgICAgICBkaCA9IGliLmhlaWdodDtcclxuXHJcbiAgICAgICAgdmFyIHN4ID0gMC4wO1xyXG4gICAgICAgIHZhciBzeSA9IDAuMDtcclxuICAgICAgICBpZiAoaWIud2lkdGggPiAwKVxyXG4gICAgICAgICAgICBzeCA9IGR3IC8gaWIud2lkdGg7XHJcbiAgICAgICAgaWYgKGliLmhlaWdodCA+IDApXHJcbiAgICAgICAgICAgIHN5ID0gZGggLyBpYi5oZWlnaHQ7XHJcblxyXG4gICAgICAgIGlmICghaXNGaW5pdGUoYXMud2lkdGgpKVxyXG4gICAgICAgICAgICBzeCA9IHN5O1xyXG4gICAgICAgIGlmICghaXNGaW5pdGUoYXMuaGVpZ2h0KSlcclxuICAgICAgICAgICAgc3kgPSBzeDtcclxuXHJcbiAgICAgICAgc3dpdGNoIChpbnB1dC5zdHJldGNoKSB7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIGNhc2UgU3RyZXRjaC5Vbmlmb3JtOlxyXG4gICAgICAgICAgICAgICAgc3ggPSBzeSA9IE1hdGgubWluKHN4LCBzeSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBTdHJldGNoLlVuaWZvcm1Ub0ZpbGw6XHJcbiAgICAgICAgICAgICAgICBzeCA9IHN5ID0gTWF0aC5tYXgoc3gsIHN5KTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFN0cmV0Y2guRmlsbDpcclxuICAgICAgICAgICAgICAgIGlmICghaXNGaW5pdGUoYXMud2lkdGgpKVxyXG4gICAgICAgICAgICAgICAgICAgIHN4ID0gc3k7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWlzRmluaXRlKGFzLmhlaWdodCkpXHJcbiAgICAgICAgICAgICAgICAgICAgc3kgPSBzeDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFN0cmV0Y2guTm9uZTpcclxuICAgICAgICAgICAgICAgIHN4ID0gc3kgPSAxLjA7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN0YXRlLnN0cmV0Y2hYID0gc3g7XHJcbiAgICAgICAgc3RhdGUuc3RyZXRjaFkgPSBzeTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvbnRyb2xzLmltYWdlLm1lYXN1cmUudGFwaW5zIHtcclxuICAgIGV4cG9ydCBmdW5jdGlvbiBkb092ZXJyaWRlIChpbnB1dDogSUlucHV0LCBzdGF0ZTogSVN0YXRlLCBvdXRwdXQ6IGNvcmUubWVhc3VyZS5JT3V0cHV0LCB0cmVlOiBjb3JlLklVcGRhdGVyVHJlZSwgYXZhaWxhYmxlU2l6ZTogU2l6ZSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHZhciBkcyA9IG91dHB1dC5kZXNpcmVkU2l6ZTtcclxuICAgICAgICBkcy53aWR0aCA9IHN0YXRlLmltYWdlQm91bmRzLndpZHRoICogc3RhdGUuc3RyZXRjaFg7XHJcbiAgICAgICAgZHMuaGVpZ2h0ID0gc3RhdGUuaW1hZ2VCb3VuZHMuaGVpZ2h0ICogc3RhdGUuc3RyZXRjaFk7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb250cm9scy5pbWFnZS5wcm9jZXNzZG93bi50YXBpbnMge1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGNhbGNJbWFnZVRyYW5zZm9ybSAoaW5wdXQ6IElJbnB1dCwgc3RhdGU6IElTdGF0ZSwgb3V0cHV0OiBJT3V0cHV0LCB2cGlucHV0OiBJSW5wdXQsIHRyZWU6IGNvcmUuSVVwZGF0ZXJUcmVlKTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKCFzdGF0ZS5jYWxjSW1hZ2VNZXRyaWNzKVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuXHJcbiAgICAgICAgdmFyIHcgPSBzdGF0ZS5wYWludFJlY3Qud2lkdGg7XHJcbiAgICAgICAgdmFyIGggPSBzdGF0ZS5wYWludFJlY3QuaGVpZ2h0O1xyXG4gICAgICAgIHZhciBzdyA9IHN0YXRlLmltZ1JlY3Qud2lkdGg7XHJcbiAgICAgICAgdmFyIHNoID0gc3RhdGUuaW1nUmVjdC5oZWlnaHQ7XHJcblxyXG4gICAgICAgIHZhciBzeCA9IHcgLyBzdztcclxuICAgICAgICB2YXIgc3kgPSBoIC8gc2g7XHJcbiAgICAgICAgaWYgKHcgPT09IDApXHJcbiAgICAgICAgICAgIHN4ID0gMS4wO1xyXG4gICAgICAgIGlmIChoID09PSAwKVxyXG4gICAgICAgICAgICBzeSA9IDEuMDtcclxuXHJcbiAgICAgICAgdmFyIHhmb3JtID0gb3V0cHV0LmltZ1hmb3JtO1xyXG4gICAgICAgIGlmIChpbnB1dC5zdHJldGNoID09PSBTdHJldGNoLkZpbGwpIHtcclxuICAgICAgICAgICAgbWF0My5jcmVhdGVTY2FsZShzeCwgc3ksIHhmb3JtKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgc2NhbGUgPSAxLjA7XHJcbiAgICAgICAgc3dpdGNoIChpbnB1dC5zdHJldGNoKSB7XHJcbiAgICAgICAgICAgIGNhc2UgU3RyZXRjaC5Vbmlmb3JtOlxyXG4gICAgICAgICAgICAgICAgc2NhbGUgPSBzeCA8IHN5ID8gc3ggOiBzeTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFN0cmV0Y2guVW5pZm9ybVRvRmlsbDpcclxuICAgICAgICAgICAgICAgIHNjYWxlID0gc3ggPCBzeSA/IHN5IDogc3g7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBTdHJldGNoLk5vbmU6XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vQWxpZ25tZW50WC5DZW50ZXJcclxuICAgICAgICB2YXIgZHggPSAodyAtIChzY2FsZSAqIHN3KSkgLyAyO1xyXG4gICAgICAgIC8vQWxpZ25tZW50WS5DZW50ZXJcclxuICAgICAgICB2YXIgZHkgPSAoaCAtIChzY2FsZSAqIHNoKSkgLyAyO1xyXG5cclxuICAgICAgICBtYXQzLmNyZWF0ZVNjYWxlKHNjYWxlLCBzY2FsZSwgeGZvcm0pO1xyXG4gICAgICAgIG1hdDMudHJhbnNsYXRlKHhmb3JtLCBkeCwgZHkpO1xyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvbnRyb2xzLmltYWdlLnByb2Nlc3Nkb3duLnRhcGlucyB7XHJcbiAgICBleHBvcnQgZnVuY3Rpb24gY2FsY092ZXJsYXAgKGlucHV0OiBJSW5wdXQsIHN0YXRlOiBJU3RhdGUsIG91dHB1dDogSU91dHB1dCwgdnBpbnB1dDogSUlucHV0LCB0cmVlOiBjb3JlLklVcGRhdGVyVHJlZSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmICghc3RhdGUuY2FsY0ltYWdlTWV0cmljcylcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcblxyXG4gICAgICAgIGlmIChpbnB1dC5zdHJldGNoID09PSBTdHJldGNoLlVuaWZvcm1Ub0ZpbGwgfHwgc3RhdGUuaW1nQWRqdXN0KSB7XHJcbiAgICAgICAgICAgIHZhciBwYWludCA9IHN0YXRlLnBhaW50UmVjdDtcclxuICAgICAgICAgICAgUmVjdC5yb3VuZE91dChwYWludCk7XHJcblxyXG4gICAgICAgICAgICB2YXIgaW1nUmVjdCA9IHN0YXRlLmltZ1JlY3Q7XHJcbiAgICAgICAgICAgIFJlY3QudHJhbnNmb3JtKGltZ1JlY3QsIG91dHB1dC5pbWdYZm9ybSk7XHJcbiAgICAgICAgICAgIFJlY3Qucm91bmRJbihpbWdSZWN0KTtcclxuXHJcbiAgICAgICAgICAgIG91dHB1dC5vdmVybGFwID0gUmVjdC5yZWN0SW4ocGFpbnQsIGltZ1JlY3QpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb250cm9scy5pbWFnZS5wcm9jZXNzZG93bi50YXBpbnMge1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGNoZWNrTmVlZEltYWdlTWV0cmljcyAoaW5wdXQ6IElJbnB1dCwgc3RhdGU6IElTdGF0ZSwgb3V0cHV0OiBJT3V0cHV0LCB2cGlucHV0OiBJSW5wdXQsIHRyZWU6IGNvcmUuSVVwZGF0ZXJUcmVlKTogYm9vbGVhbiB7XHJcbiAgICAgICAgc3RhdGUuY2FsY0ltYWdlTWV0cmljcyA9IGZhbHNlO1xyXG4gICAgICAgIGlmICgoaW5wdXQuZGlydHlGbGFncyAmIERpcnR5RmxhZ3MuSW1hZ2VNZXRyaWNzKSA9PT0gMClcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcblxyXG4gICAgICAgIG1hdDMuaWRlbnRpdHkob3V0cHV0LmltZ1hmb3JtKTtcclxuICAgICAgICBvdXRwdXQub3ZlcmxhcCA9IFJlY3RPdmVybGFwLkluO1xyXG5cclxuICAgICAgICB2YXIgaW1nUmVjdCA9IHN0YXRlLmltZ1JlY3Q7XHJcbiAgICAgICAgaW1nUmVjdC54ID0gaW1nUmVjdC55ID0gaW1nUmVjdC53aWR0aCA9IGltZ1JlY3QuaGVpZ2h0ID0gMDtcclxuXHJcbiAgICAgICAgc3RhdGUuY2FsY0ltYWdlTWV0cmljcyA9ICEhaW5wdXQuc291cmNlO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG59IiwibW9kdWxlIG1pbmVydmEuY29udHJvbHMuaW1hZ2UucHJvY2Vzc2Rvd24udGFwaW5zIHtcclxuICAgIGV4cG9ydCBmdW5jdGlvbiBwcmVwYXJlSW1hZ2VNZXRyaWNzIChpbnB1dDogSUlucHV0LCBzdGF0ZTogSVN0YXRlLCBvdXRwdXQ6IElPdXRwdXQsIHZwaW5wdXQ6IElJbnB1dCwgdHJlZTogY29yZS5JVXBkYXRlclRyZWUpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAoIXN0YXRlLmNhbGNJbWFnZU1ldHJpY3MpXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG5cclxuICAgICAgICB2YXIgaW1nUmVjdCA9IHN0YXRlLmltZ1JlY3Q7XHJcbiAgICAgICAgaW1nUmVjdC54ID0gaW1nUmVjdC55ID0gMDtcclxuXHJcbiAgICAgICAgdmFyIHNvdXJjZSA9IGlucHV0LnNvdXJjZTtcclxuICAgICAgICBpbWdSZWN0LndpZHRoID0gc291cmNlLnBpeGVsV2lkdGg7XHJcbiAgICAgICAgaW1nUmVjdC5oZWlnaHQgPSBzb3VyY2UucGl4ZWxIZWlnaHQ7XHJcblxyXG4gICAgICAgIHZhciBwYWludFJlY3QgPSBzdGF0ZS5wYWludFJlY3Q7XHJcbiAgICAgICAgcGFpbnRSZWN0LnggPSBwYWludFJlY3QueSA9IDA7XHJcbiAgICAgICAgcGFpbnRSZWN0LndpZHRoID0gaW5wdXQuYWN0dWFsV2lkdGg7XHJcbiAgICAgICAgcGFpbnRSZWN0LmhlaWdodCA9IGlucHV0LmFjdHVhbEhlaWdodDtcclxuXHJcbiAgICAgICAgLypcclxuICAgICAgICBTZWUgbm90ZSBiZWxvd1xyXG4gICAgICAgIHZhciBzdHJldGNoZWQgPSBzdGF0ZS5zdHJldGNoZWQ7XHJcbiAgICAgICAgU2l6ZS5jb3B5VG8ocGFpbnRSZWN0LCBzdHJldGNoZWQpO1xyXG4gICAgICAgICovXHJcblxyXG4gICAgICAgIHN0YXRlLmltZ0FkanVzdCA9ICFTaXplLmlzRXF1YWwocGFpbnRSZWN0LCBpbnB1dC5yZW5kZXJTaXplKTtcclxuXHJcbiAgICAgICAgLypcclxuICAgICAgICAgUmVtb3ZpbmcgYHN0cmV0Y2hlZGAgc2luY2UgYWN0dWFsV2lkdGgsIGFjdHVhbEhlaWdodCBzaG91bGQgYWxyZWFkeSBiZSBjb2VyY2VkXHJcbiAgICAgICAgY29yZS5oZWxwZXJzLmNvZXJjZVNpemUoc3RyZXRjaGVkLCBpbnB1dCk7XHJcbiAgICAgICAgaWYgKGlucHV0LnN0cmV0Y2ggIT09IFN0cmV0Y2guVW5pZm9ybVRvRmlsbCkge1xyXG4gICAgICAgICAgICBwYWludFJlY3Qud2lkdGggPSBNYXRoLm1pbihwYWludFJlY3Qud2lkdGgsIHN0cmV0Y2hlZC53aWR0aCk7XHJcbiAgICAgICAgICAgIHBhaW50UmVjdC5oZWlnaHQgPSBNYXRoLm1pbihwYWludFJlY3QuaGVpZ2h0LCBzdHJldGNoZWQuaGVpZ2h0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgKi9cclxuXHJcbiAgICAgICAgaWYgKGlucHV0LnN0cmV0Y2ggPT09IFN0cmV0Y2guTm9uZSlcclxuICAgICAgICAgICAgUmVjdC51bmlvbihwYWludFJlY3QsIGltZ1JlY3QpO1xyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvbnRyb2xzLmltYWdlLnJlbmRlci50YXBpbnMge1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGRvUmVuZGVyIChpbnB1dDogSUlucHV0LCBzdGF0ZTogSVN0YXRlLCBvdXRwdXQ6IGNvcmUucmVuZGVyLklPdXRwdXQsIGN0eDogY29yZS5yZW5kZXIuUmVuZGVyQ29udGV4dCwgcmVnaW9uOiBSZWN0LCB0cmVlOiBjb3JlLklVcGRhdGVyVHJlZSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHZhciBzb3VyY2UgPSBpbnB1dC5zb3VyY2U7XHJcbiAgICAgICAgaWYgKCFzb3VyY2UgfHwgc291cmNlLnBpeGVsV2lkdGggPT09IDAgfHwgc291cmNlLnBpeGVsSGVpZ2h0ID09PSAwKVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuXHJcbiAgICAgICAgY3R4LnNhdmUoKTtcclxuICAgICAgICBjb3JlLmhlbHBlcnMucmVuZGVyTGF5b3V0Q2xpcChjdHgsIGlucHV0LCB0cmVlKTtcclxuICAgICAgICBjdHgucHJlYXBwbHkoaW5wdXQuaW1nWGZvcm0pO1xyXG4gICAgICAgIHNvdXJjZS5kcmF3KGN0eC5yYXcpO1xyXG4gICAgICAgIGN0eC5yZXN0b3JlKCk7XHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG59IiwibW9kdWxlIG1pbmVydmEuY29udHJvbHMucGFuZWwuYXJyYW5nZS50YXBpbnMge1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGRvT3ZlcnJpZGUgKGlucHV0OiBJSW5wdXQsIHN0YXRlOiBJU3RhdGUsIG91dHB1dDogSU91dHB1dCwgdHJlZTogY29yZS5JVXBkYXRlclRyZWUsIGZpbmFsUmVjdDogUmVjdCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHZhciBjciA9IHN0YXRlLmNoaWxkUmVjdDtcclxuICAgICAgICBjci54ID0gY3IueSA9IDA7XHJcbiAgICAgICAgU2l6ZS5jb3B5VG8oc3RhdGUuZmluYWxTaXplLCBjcik7XHJcblxyXG4gICAgICAgIGZvciAodmFyIHdhbGtlciA9IHRyZWUud2FsaygpOyB3YWxrZXIuc3RlcCgpOykge1xyXG4gICAgICAgICAgICB3YWxrZXIuY3VycmVudC5hcnJhbmdlKGNyKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIFNpemUuY29weVRvKHN0YXRlLmZpbmFsU2l6ZSwgc3RhdGUuYXJyYW5nZWRTaXplKTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvbnRyb2xzLnBhbmVsLnByb2Nlc3N1cC50YXBpbnMge1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHByZUNhbGNFeHRlbnRzIChpbnB1dDogSUlucHV0LCBzdGF0ZTogSVN0YXRlLCBvdXRwdXQ6IElPdXRwdXQsIHRyZWU6IGNvcmUuSVVwZGF0ZXJUcmVlKTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKChpbnB1dC5kaXJ0eUZsYWdzICYgRGlydHlGbGFncy5Cb3VuZHMpID09PSAwKVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICBpZiAoIWlucHV0LmJhY2tncm91bmQpIHtcclxuICAgICAgICAgICAgdmFyIGFzID0gc3RhdGUuYWN0dWFsU2l6ZTtcclxuICAgICAgICAgICAgYXMud2lkdGggPSBhcy5oZWlnaHQgPSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvbnRyb2xzLnBvcHVwLnByb2Nlc3Nkb3duLnRhcGlucyB7XHJcbiAgICBleHBvcnQgdmFyIHBvc3RQcm9jZXNzWGZvcm0gPSBmdW5jdGlvbiAoaW5wdXQ6IElJbnB1dCwgc3RhdGU6IGNvcmUucHJvY2Vzc2Rvd24uSVN0YXRlLCBvdXRwdXQ6IGNvcmUucHJvY2Vzc2Rvd24uSU91dHB1dCwgdnBpbnB1dDogY29yZS5wcm9jZXNzZG93bi5JSW5wdXQsIHRyZWU6IFBvcHVwVXBkYXRlclRyZWUpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAoKGlucHV0LmRpcnR5RmxhZ3MgJiBEaXJ0eUZsYWdzLlRyYW5zZm9ybSkgPT09IDApXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG5cclxuICAgICAgICB2YXIgY2hpbGQgPSB0cmVlLnBvcHVwQ2hpbGQ7XHJcbiAgICAgICAgaWYgKCFjaGlsZClcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcblxyXG4gICAgICAgIGNoaWxkLmFzc2V0cy5kaXJ0eUZsYWdzIHw9IERpcnR5RmxhZ3MuTG9jYWxUcmFuc2Zvcm07XHJcblxyXG4gICAgICAgIHZhciBjYXJyaWVyID0gY2hpbGQuYXNzZXRzLmNhcnJpZXJYZm9ybTtcclxuICAgICAgICBpZiAoIWNhcnJpZXIpXHJcbiAgICAgICAgICAgIGNhcnJpZXIgPSBjaGlsZC5hc3NldHMuY2Fycmllclhmb3JtIHx8IG1hdDMuY3JlYXRlKCk7XHJcbiAgICAgICAgbWF0My5jb3B5VG8ob3V0cHV0LmFic29sdXRlWGZvcm0sIGNhcnJpZXIpO1xyXG4gICAgICAgIG1hdDMudHJhbnNsYXRlKGNhcnJpZXIsIGlucHV0Lmhvcml6b250YWxPZmZzZXQsIGlucHV0LnZlcnRpY2FsT2Zmc2V0KTtcclxuXHJcbiAgICAgICAgY29yZS5VcGRhdGVyLiQkYWRkRG93bkRpcnR5KGNoaWxkKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9O1xyXG59IiwibW9kdWxlIG1pbmVydmEuY29udHJvbHMucG9wdXAucHJvY2Vzc2Rvd24udGFwaW5zIHtcclxuICAgIGV4cG9ydCB2YXIgcHJlUHJvY2Vzc1hmb3JtID0gZnVuY3Rpb24gKGlucHV0OiBJSW5wdXQsIHN0YXRlOiBjb3JlLnByb2Nlc3Nkb3duLklTdGF0ZSwgb3V0cHV0OiBjb3JlLnByb2Nlc3Nkb3duLklPdXRwdXQsIHZwaW5wdXQ6IGNvcmUucHJvY2Vzc2Rvd24uSUlucHV0LCB0cmVlOiBQb3B1cFVwZGF0ZXJUcmVlKTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKChpbnB1dC5kaXJ0eUZsYWdzICYgRGlydHlGbGFncy5UcmFuc2Zvcm0pID09PSAwKVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuXHJcbiAgICAgICAgdmFyIGNoaWxkID0gdHJlZS5wb3B1cENoaWxkO1xyXG4gICAgICAgIGlmIChjaGlsZCkge1xyXG4gICAgICAgICAgICBjaGlsZC5hc3NldHMuZGlydHlGbGFncyB8PSBEaXJ0eUZsYWdzLkxvY2FsVHJhbnNmb3JtO1xyXG4gICAgICAgICAgICBjb3JlLlVwZGF0ZXIuJCRhZGREb3duRGlydHkoY2hpbGQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH07XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb250cm9scy5zY3JvbGxjb250ZW50cHJlc2VudGVyLmFycmFuZ2UudGFwaW5zIHtcclxuICAgIGV4cG9ydCBmdW5jdGlvbiBkb092ZXJyaWRlIChpbnB1dDogSUlucHV0LCBzdGF0ZTogSVN0YXRlLCBvdXRwdXQ6IElPdXRwdXQsIHRyZWU6IGNvcmUuVXBkYXRlclRyZWUsIGZpbmFsUmVjdDogUmVjdCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHZhciBhcyA9IHN0YXRlLmFycmFuZ2VkU2l6ZTtcclxuICAgICAgICBpZiAoIXRyZWUuc3VidHJlZSkge1xyXG4gICAgICAgICAgICBhcy53aWR0aCA9IGFzLmhlaWdodCA9IDA7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIHNkID0gaW5wdXQuc2Nyb2xsRGF0YTtcclxuICAgICAgICBpZiAoaGVscGVycy5jbGFtcE9mZnNldHMoc2QpKSB7XHJcbiAgICAgICAgICAgIHNkLmludmFsaWRhdGUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBkZXNpcmVkID0gdHJlZS5zdWJ0cmVlLmFzc2V0cy5kZXNpcmVkU2l6ZTtcclxuXHJcbiAgICAgICAgdmFyIGNyID0gc3RhdGUuY2hpbGRSZWN0O1xyXG4gICAgICAgIGNyLnggPSAtc2Qub2Zmc2V0WDtcclxuICAgICAgICBjci55ID0gLXNkLm9mZnNldFk7XHJcbiAgICAgICAgY3Iud2lkdGggPSBNYXRoLm1heChzdGF0ZS5maW5hbFNpemUud2lkdGgsIGRlc2lyZWQud2lkdGgpO1xyXG4gICAgICAgIGNyLmhlaWdodCA9IE1hdGgubWF4KHN0YXRlLmZpbmFsU2l6ZS5oZWlnaHQsIGRlc2lyZWQuaGVpZ2h0KTtcclxuXHJcbiAgICAgICAgdHJlZS5zdWJ0cmVlLmFycmFuZ2UoY3IpO1xyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvbnRyb2xzLnNjcm9sbGNvbnRlbnRwcmVzZW50ZXIuYXJyYW5nZS50YXBpbnMge1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZUNsaXAgKGlucHV0OiBJSW5wdXQsIHN0YXRlOiBJU3RhdGUsIG91dHB1dDogSU91dHB1dCwgdHJlZTogY29yZS5VcGRhdGVyVHJlZSwgYXZhaWxhYmxlU2l6ZTogU2l6ZSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHZhciBpYyA9IG91dHB1dC5pbnRlcm5hbENsaXA7XHJcbiAgICAgICAgaWMueCA9IGljLnkgPSAwO1xyXG4gICAgICAgIFNpemUuY29weVRvKHN0YXRlLmFycmFuZ2VkU2l6ZSwgaWMpO1xyXG5cclxuICAgICAgICAvL1RPRE86IENsaXAgZm9yIFRleHRCb3gvUmljaFRleHRCb3hcclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgLypcclxuICAgIGZ1bmN0aW9uIF9DYWxjdWxhdGVUZXh0Qm94Q2xpcFJlY3QgKGFycmFuZ2VTaXplOiBtaW5lcnZhLlNpemUpOiBtaW5lcnZhLlJlY3Qge1xyXG4gICAgICAgIHZhciBsZWZ0ID0gMDtcclxuICAgICAgICB2YXIgcmlnaHQgPSAwO1xyXG4gICAgICAgIHZhciBzZCA9IHRoaXMuX1Njcm9sbERhdGE7XHJcbiAgICAgICAgdmFyIHdpZHRoID0gc2QuRXh0ZW50V2lkdGg7XHJcbiAgICAgICAgdmFyIG51bSA9IHNkLlZpZXdwb3J0V2lkdGg7XHJcbiAgICAgICAgdmFyIHggPSBzZC5PZmZzZXRYO1xyXG4gICAgICAgIHZhciB0ZW1wbGF0ZWRQYXJlbnQ6IFNjcm9sbFZpZXdlcjtcclxuICAgICAgICBpZiAodGhpcy5UZW1wbGF0ZU93bmVyIGluc3RhbmNlb2YgU2Nyb2xsVmlld2VyKVxyXG4gICAgICAgICAgICB0ZW1wbGF0ZWRQYXJlbnQgPSA8U2Nyb2xsVmlld2VyPnRoaXMuVGVtcGxhdGVPd25lcjtcclxuXHJcbiAgICAgICAgdmFyIHRvID0gdGVtcGxhdGVkUGFyZW50LlRlbXBsYXRlT3duZXI7XHJcbiAgICAgICAgdmFyIHRleHRXcmFwcGluZyA9IFRleHRXcmFwcGluZy5Ob1dyYXA7XHJcbiAgICAgICAgdmFyIGhvcml6b250YWxTY3JvbGxCYXJWaXNpYmlsaXR5ID0gU2Nyb2xsQmFyVmlzaWJpbGl0eS5EaXNhYmxlZDtcclxuICAgICAgICBpZiAodG8gaW5zdGFuY2VvZiBUZXh0Qm94KSB7XHJcbiAgICAgICAgICAgIHZhciB0ZXh0Ym94ID0gPFRleHRCb3g+dG87XHJcbiAgICAgICAgICAgIHRleHRXcmFwcGluZyA9IHRleHRib3guVGV4dFdyYXBwaW5nO1xyXG4gICAgICAgICAgICBob3Jpem9udGFsU2Nyb2xsQmFyVmlzaWJpbGl0eSA9IHRleHRib3guSG9yaXpvbnRhbFNjcm9sbEJhclZpc2liaWxpdHk7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0byBpbnN0YW5jZW9mIFJpY2hUZXh0Qm94KSB7XHJcbiAgICAgICAgICAgIHZhciByaWNodGV4dGJveCA9IDxSaWNoVGV4dEJveD50bztcclxuICAgICAgICAgICAgdGV4dFdyYXBwaW5nID0gcmljaHRleHRib3guVGV4dFdyYXBwaW5nO1xyXG4gICAgICAgICAgICBob3Jpem9udGFsU2Nyb2xsQmFyVmlzaWJpbGl0eSA9IHJpY2h0ZXh0Ym94Lkhvcml6b250YWxTY3JvbGxCYXJWaXNpYmlsaXR5O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIHBhZGRpbmcgPSB0ZW1wbGF0ZWRQYXJlbnQuUGFkZGluZztcclxuICAgICAgICBpZiAodGV4dFdyYXBwaW5nICE9PSBUZXh0V3JhcHBpbmcuV3JhcCkge1xyXG4gICAgICAgICAgICBpZiAobnVtID4gd2lkdGggfHwgeCA9PT0gMClcclxuICAgICAgICAgICAgICAgIGxlZnQgPSBwYWRkaW5nLmxlZnQgKyAxO1xyXG4gICAgICAgICAgICBpZiAobnVtID4gd2lkdGggfHwgaG9yaXpvbnRhbFNjcm9sbEJhclZpc2liaWxpdHkgIT09IFNjcm9sbEJhclZpc2liaWxpdHkuRGlzYWJsZWQgJiYgTWF0aC5hYnMod2lkdGggLSB4ICsgbnVtKSA8PSAxKVxyXG4gICAgICAgICAgICAgICAgcmlnaHQgPSBwYWRkaW5nLnJpZ2h0ICsgMTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBsZWZ0ID0gcGFkZGluZy5sZWZ0ICsgMTtcclxuICAgICAgICAgICAgcmlnaHQgPSBwYWRkaW5nLnJpZ2h0ICsgMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGVmdCA9IE1hdGgubWF4KDAsIGxlZnQpO1xyXG4gICAgICAgIHJpZ2h0ID0gTWF0aC5tYXgoMCwgcmlnaHQpO1xyXG4gICAgICAgIHJldHVybiBuZXcgbWluZXJ2YS5SZWN0KC1sZWZ0LCAwLCBhcnJhbmdlU2l6ZS53aWR0aCArIGxlZnQgKyByaWdodCwgYXJyYW5nZVNpemUuaGVpZ2h0KTtcclxuICAgIH1cclxuICAgICovXHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb250cm9scy5zY3JvbGxjb250ZW50cHJlc2VudGVyLmFycmFuZ2UudGFwaW5zIHtcclxuICAgIGV4cG9ydCBmdW5jdGlvbiB1cGRhdGVFeHRlbnRzIChpbnB1dDogSUlucHV0LCBzdGF0ZTogSVN0YXRlLCBvdXRwdXQ6IElPdXRwdXQsIHRyZWU6IGNvcmUuVXBkYXRlclRyZWUsIGF2YWlsYWJsZVNpemU6IFNpemUpOiBib29sZWFuIHtcclxuICAgICAgICB2YXIgc2QgPSBpbnB1dC5zY3JvbGxEYXRhO1xyXG4gICAgICAgIHZhciB2aWV3cG9ydCA9IHN0YXRlLmZpbmFsU2l6ZTtcclxuXHJcbiAgICAgICAgdmFyIGNoYW5nZWQgPSBzZC52aWV3cG9ydFdpZHRoICE9PSB2aWV3cG9ydC53aWR0aFxyXG4gICAgICAgICAgICB8fCBzZC52aWV3cG9ydEhlaWdodCAhPT0gdmlld3BvcnQuaGVpZ2h0O1xyXG4gICAgICAgIHNkLnZpZXdwb3J0V2lkdGggPSB2aWV3cG9ydC53aWR0aDtcclxuICAgICAgICBzZC52aWV3cG9ydEhlaWdodCA9IHZpZXdwb3J0LmhlaWdodDtcclxuXHJcbiAgICAgICAgaWYgKGhlbHBlcnMuY2xhbXBPZmZzZXRzKHNkKSB8fCBjaGFuZ2VkKSB7XHJcbiAgICAgICAgICAgIHNkLmludmFsaWRhdGUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG59IiwibW9kdWxlIG1pbmVydmEuY29udHJvbHMuc2Nyb2xsY29udGVudHByZXNlbnRlci5tZWFzdXJlLnRhcGlucyB7XHJcbiAgICBleHBvcnQgdmFyIGRvT3ZlcnJpZGUgPSBmdW5jdGlvbiAoaW5wdXQ6IElJbnB1dCwgc3RhdGU6IElTdGF0ZSwgb3V0cHV0OiBjb3JlLm1lYXN1cmUuSU91dHB1dCwgdHJlZTogY29yZS5VcGRhdGVyVHJlZSwgYXZhaWxhYmxlU2l6ZTogU2l6ZSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHZhciBkcyA9IG91dHB1dC5kZXNpcmVkU2l6ZTtcclxuICAgICAgICBkcy53aWR0aCA9IGRzLmhlaWdodCA9IDA7XHJcblxyXG4gICAgICAgIGlmICghdHJlZS5zdWJ0cmVlKVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuXHJcbiAgICAgICAgdmFyIHNkID0gaW5wdXQuc2Nyb2xsRGF0YTtcclxuICAgICAgICB2YXIgaWRlYWwgPSBzdGF0ZS5pZGVhbFNpemU7XHJcbiAgICAgICAgaWRlYWwud2lkdGggPSAhc2QuY2FuSG9yaXpvbnRhbGx5U2Nyb2xsID8gc3RhdGUuYXZhaWxhYmxlU2l6ZS53aWR0aCA6IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcclxuICAgICAgICBpZGVhbC5oZWlnaHQgPSAhc2QuY2FuVmVydGljYWxseVNjcm9sbCA/IHN0YXRlLmF2YWlsYWJsZVNpemUuaGVpZ2h0IDogTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xyXG5cclxuICAgICAgICB0cmVlLnN1YnRyZWUubWVhc3VyZShpZGVhbCk7XHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfTtcclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvbnRyb2xzLnNjcm9sbGNvbnRlbnRwcmVzZW50ZXIubWVhc3VyZS50YXBpbnMge1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGZpbmlzaERvT3ZlcnJpZGUgKGlucHV0OiBJSW5wdXQsIHN0YXRlOiBJU3RhdGUsIG91dHB1dDogY29yZS5tZWFzdXJlLklPdXRwdXQsIHRyZWU6IGNvcmUuVXBkYXRlclRyZWUsIGF2YWlsYWJsZVNpemU6IFNpemUpOiBib29sZWFuIHtcclxuICAgICAgICB2YXIgZHMgPSBvdXRwdXQuZGVzaXJlZFNpemU7XHJcbiAgICAgICAgdmFyIHNkID0gaW5wdXQuc2Nyb2xsRGF0YTtcclxuXHJcbiAgICAgICAgU2l6ZS5jb3B5VG8oc3RhdGUuYXZhaWxhYmxlU2l6ZSwgZHMpO1xyXG4gICAgICAgIGRzLndpZHRoID0gTWF0aC5taW4oZHMud2lkdGgsIHNkLmV4dGVudFdpZHRoKTtcclxuICAgICAgICBkcy5oZWlnaHQgPSBNYXRoLm1pbihkcy5oZWlnaHQsIHNkLmV4dGVudEhlaWdodCk7XHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG59IiwibW9kdWxlIG1pbmVydmEuY29udHJvbHMuc2Nyb2xsY29udGVudHByZXNlbnRlci5tZWFzdXJlLnRhcGlucyB7XHJcbiAgICBleHBvcnQgZnVuY3Rpb24gdXBkYXRlRXh0ZW50cyAoaW5wdXQ6IElJbnB1dCwgc3RhdGU6IElTdGF0ZSwgb3V0cHV0OiBjb3JlLm1lYXN1cmUuSU91dHB1dCwgdHJlZTogY29yZS5VcGRhdGVyVHJlZSwgYXZhaWxhYmxlU2l6ZTogU2l6ZSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHZhciBzZCA9IGlucHV0LnNjcm9sbERhdGE7XHJcbiAgICAgICAgdmFyIHZpZXdwb3J0ID0gc3RhdGUuYXZhaWxhYmxlU2l6ZTtcclxuICAgICAgICB2YXIgZXh0ZW50ID0gdHJlZS5zdWJ0cmVlLmFzc2V0cy5kZXNpcmVkU2l6ZTtcclxuXHJcbiAgICAgICAgdmFyIGNoYW5nZWQgPSBzZC52aWV3cG9ydFdpZHRoICE9PSB2aWV3cG9ydC53aWR0aFxyXG4gICAgICAgICAgICB8fCBzZC52aWV3cG9ydEhlaWdodCAhPT0gdmlld3BvcnQuaGVpZ2h0XHJcbiAgICAgICAgICAgIHx8IHNkLmV4dGVudFdpZHRoICE9PSBleHRlbnQud2lkdGhcclxuICAgICAgICAgICAgfHwgc2QuZXh0ZW50SGVpZ2h0ICE9PSBleHRlbnQuaGVpZ2h0O1xyXG4gICAgICAgIHNkLnZpZXdwb3J0V2lkdGggPSB2aWV3cG9ydC53aWR0aDtcclxuICAgICAgICBzZC52aWV3cG9ydEhlaWdodCA9IHZpZXdwb3J0LmhlaWdodDtcclxuICAgICAgICBzZC5leHRlbnRXaWR0aCA9IGV4dGVudC53aWR0aDtcclxuICAgICAgICBzZC5leHRlbnRIZWlnaHQgPSBleHRlbnQuaGVpZ2h0O1xyXG5cclxuICAgICAgICBpZiAoaGVscGVycy5jbGFtcE9mZnNldHMoc2QpIHx8IGNoYW5nZWQpIHtcclxuICAgICAgICAgICAgc2QuaW52YWxpZGF0ZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb250cm9scy5zdGFja3BhbmVsLmFycmFuZ2UudGFwaW5zIHtcclxuICAgIGV4cG9ydCBmdW5jdGlvbiBkb0hvcml6b250YWwgKGlucHV0OiBJSW5wdXQsIHN0YXRlOiBJU3RhdGUsIG91dHB1dDogSU91dHB1dCwgdHJlZTogY29yZS5JVXBkYXRlclRyZWUsIGZpbmFsUmVjdDogUmVjdCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmIChpbnB1dC5vcmllbnRhdGlvbiAhPT0gT3JpZW50YXRpb24uSG9yaXpvbnRhbClcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcblxyXG4gICAgICAgIHZhciBmcyA9IHN0YXRlLmZpbmFsU2l6ZTtcclxuICAgICAgICB2YXIgYXJyYW5nZWQgPSBzdGF0ZS5hcnJhbmdlZFNpemU7XHJcbiAgICAgICAgYXJyYW5nZWQud2lkdGggPSAwO1xyXG4gICAgICAgIHZhciBjaGlsZFJlY3QgPSBzdGF0ZS5jaGlsZFJlY3Q7XHJcblxyXG4gICAgICAgIHZhciBjaGlsZDogY29yZS5VcGRhdGVyO1xyXG4gICAgICAgIHZhciBjaGlsZERlc2lyZWQ6IFNpemU7XHJcbiAgICAgICAgZm9yICh2YXIgd2Fsa2VyID0gdHJlZS53YWxrKCk7IHdhbGtlci5zdGVwKCk7KSB7XHJcbiAgICAgICAgICAgIGNoaWxkID0gd2Fsa2VyLmN1cnJlbnQ7XHJcbiAgICAgICAgICAgIGNoaWxkRGVzaXJlZCA9IGNoaWxkLmFzc2V0cy5kZXNpcmVkU2l6ZTtcclxuICAgICAgICAgICAgY2hpbGREZXNpcmVkLmhlaWdodCA9IGZzLmhlaWdodDtcclxuICAgICAgICAgICAgU2l6ZS5jb3B5VG8oY2hpbGREZXNpcmVkLCBjaGlsZFJlY3QpO1xyXG4gICAgICAgICAgICBjaGlsZFJlY3QueCA9IGFycmFuZ2VkLndpZHRoO1xyXG5cclxuICAgICAgICAgICAgaWYgKFJlY3QuaXNFbXB0eShjaGlsZFJlY3QpKVxyXG4gICAgICAgICAgICAgICAgY2hpbGRSZWN0LnggPSBjaGlsZFJlY3QueSA9IGNoaWxkUmVjdC53aWR0aCA9IGNoaWxkUmVjdC5oZWlnaHQgPSAwO1xyXG4gICAgICAgICAgICBjaGlsZC5hcnJhbmdlKGNoaWxkUmVjdCk7XHJcblxyXG4gICAgICAgICAgICBhcnJhbmdlZC53aWR0aCArPSBjaGlsZERlc2lyZWQud2lkdGg7XHJcbiAgICAgICAgICAgIGFycmFuZ2VkLmhlaWdodCA9IE1hdGgubWF4KGFycmFuZ2VkLmhlaWdodCwgY2hpbGREZXNpcmVkLmhlaWdodCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhcnJhbmdlZC53aWR0aCA9IE1hdGgubWF4KGFycmFuZ2VkLndpZHRoLCBzdGF0ZS5maW5hbFNpemUud2lkdGgpO1xyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvbnRyb2xzLnN0YWNrcGFuZWwuYXJyYW5nZS50YXBpbnMge1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGRvT3ZlcnJpZGUgKGlucHV0OiBJSW5wdXQsIHN0YXRlOiBJU3RhdGUsIG91dHB1dDogSU91dHB1dCwgdHJlZTogY29yZS5JVXBkYXRlclRyZWUsIGZpbmFsUmVjdDogUmVjdCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHZhciBjciA9IHN0YXRlLmNoaWxkUmVjdDtcclxuICAgICAgICBjci54ID0gY3IueSA9IDA7XHJcbiAgICAgICAgU2l6ZS5jb3B5VG8oc3RhdGUuZmluYWxTaXplLCBjcik7XHJcbiAgICAgICAgU2l6ZS5jb3B5VG8oc3RhdGUuZmluYWxTaXplLCBzdGF0ZS5hcnJhbmdlZFNpemUpO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG59IiwibW9kdWxlIG1pbmVydmEuY29udHJvbHMuc3RhY2twYW5lbC5hcnJhbmdlLnRhcGlucyB7XHJcbiAgICBleHBvcnQgZnVuY3Rpb24gZG9WZXJ0aWNhbCAoaW5wdXQ6IElJbnB1dCwgc3RhdGU6IElTdGF0ZSwgb3V0cHV0OiBJT3V0cHV0LCB0cmVlOiBjb3JlLklVcGRhdGVyVHJlZSwgZmluYWxSZWN0OiBSZWN0KTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKGlucHV0Lm9yaWVudGF0aW9uICE9PSBPcmllbnRhdGlvbi5WZXJ0aWNhbClcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcblxyXG4gICAgICAgIHZhciBmcyA9IHN0YXRlLmZpbmFsU2l6ZTtcclxuICAgICAgICB2YXIgYXJyYW5nZWQgPSBzdGF0ZS5hcnJhbmdlZFNpemU7XHJcbiAgICAgICAgYXJyYW5nZWQuaGVpZ2h0ID0gMDtcclxuICAgICAgICB2YXIgY2hpbGRSZWN0ID0gc3RhdGUuY2hpbGRSZWN0O1xyXG5cclxuICAgICAgICB2YXIgY2hpbGQ6IGNvcmUuVXBkYXRlcjtcclxuICAgICAgICB2YXIgY2hpbGREZXNpcmVkOiBTaXplO1xyXG4gICAgICAgIGZvciAodmFyIHdhbGtlciA9IHRyZWUud2FsaygpOyB3YWxrZXIuc3RlcCgpOykge1xyXG4gICAgICAgICAgICBjaGlsZCA9IHdhbGtlci5jdXJyZW50O1xyXG4gICAgICAgICAgICBjaGlsZERlc2lyZWQgPSBjaGlsZC5hc3NldHMuZGVzaXJlZFNpemU7XHJcbiAgICAgICAgICAgIGNoaWxkRGVzaXJlZC53aWR0aCA9IGZzLndpZHRoO1xyXG4gICAgICAgICAgICBTaXplLmNvcHlUbyhjaGlsZERlc2lyZWQsIGNoaWxkUmVjdCk7XHJcbiAgICAgICAgICAgIGNoaWxkUmVjdC55ID0gYXJyYW5nZWQuaGVpZ2h0O1xyXG5cclxuICAgICAgICAgICAgaWYgKFJlY3QuaXNFbXB0eShjaGlsZFJlY3QpKVxyXG4gICAgICAgICAgICAgICAgY2hpbGRSZWN0LnggPSBjaGlsZFJlY3QueSA9IGNoaWxkUmVjdC53aWR0aCA9IGNoaWxkUmVjdC5oZWlnaHQgPSAwO1xyXG4gICAgICAgICAgICBjaGlsZC5hcnJhbmdlKGNoaWxkUmVjdCk7XHJcblxyXG4gICAgICAgICAgICBhcnJhbmdlZC53aWR0aCA9IE1hdGgubWF4KGFycmFuZ2VkLndpZHRoLCBjaGlsZERlc2lyZWQud2lkdGgpO1xyXG4gICAgICAgICAgICBhcnJhbmdlZC5oZWlnaHQgKz0gY2hpbGREZXNpcmVkLmhlaWdodDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGFycmFuZ2VkLmhlaWdodCA9IE1hdGgubWF4KGFycmFuZ2VkLmhlaWdodCwgc3RhdGUuZmluYWxTaXplLmhlaWdodCk7XHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG59IiwibW9kdWxlIG1pbmVydmEuY29udHJvbHMuc3RhY2twYW5lbC5tZWFzdXJlLnRhcGlucyB7XHJcbiAgICBleHBvcnQgZnVuY3Rpb24gZG9Ib3Jpem9udGFsIChpbnB1dDogSUlucHV0LCBzdGF0ZTogSVN0YXRlLCBvdXRwdXQ6IElPdXRwdXQsIHRyZWU6IGNvcmUuSVVwZGF0ZXJUcmVlLCBhdmFpbGFibGVTaXplOiBTaXplKTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKGlucHV0Lm9yaWVudGF0aW9uICE9PSBPcmllbnRhdGlvbi5Ib3Jpem9udGFsKVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuXHJcbiAgICAgICAgdmFyIGNhID0gc3RhdGUuY2hpbGRBdmFpbGFibGU7XHJcbiAgICAgICAgY2EuaGVpZ2h0ID0gc3RhdGUuYXZhaWxhYmxlU2l6ZS5oZWlnaHQ7XHJcbiAgICAgICAgdmFyIGhlaWdodCA9IGlucHV0LmhlaWdodDtcclxuICAgICAgICBpZiAoIWlzTmFOKGhlaWdodCkpXHJcbiAgICAgICAgICAgIGNhLmhlaWdodCA9IGhlaWdodDtcclxuICAgICAgICBjYS5oZWlnaHQgPSBNYXRoLm1heChNYXRoLm1pbihjYS5oZWlnaHQsIGlucHV0Lm1heEhlaWdodCksIGlucHV0Lm1pbkhlaWdodCk7XHJcblxyXG4gICAgICAgIHZhciBkZXNpcmVkID0gb3V0cHV0LmRlc2lyZWRTaXplO1xyXG4gICAgICAgIGZvciAodmFyIHdhbGtlciA9IHRyZWUud2FsaygpLCBjaGlsZDogY29yZS5VcGRhdGVyLCBjaGlsZERlc2lyZWQ6IFNpemU7IHdhbGtlci5zdGVwKCk7KSB7XHJcbiAgICAgICAgICAgIGNoaWxkID0gd2Fsa2VyLmN1cnJlbnQ7XHJcbiAgICAgICAgICAgIGNoaWxkLm1lYXN1cmUoY2EpO1xyXG4gICAgICAgICAgICBjaGlsZERlc2lyZWQgPSBjaGlsZC5hc3NldHMuZGVzaXJlZFNpemU7XHJcblxyXG4gICAgICAgICAgICBkZXNpcmVkLndpZHRoICs9IGNoaWxkRGVzaXJlZC53aWR0aDtcclxuICAgICAgICAgICAgZGVzaXJlZC5oZWlnaHQgPSBNYXRoLm1heChkZXNpcmVkLmhlaWdodCwgY2hpbGREZXNpcmVkLmhlaWdodCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvbnRyb2xzLnN0YWNrcGFuZWwubWVhc3VyZS50YXBpbnMge1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGRvT3ZlcnJpZGUgKGlucHV0OiBJSW5wdXQsIHN0YXRlOiBJU3RhdGUsIG91dHB1dDogSU91dHB1dCwgdHJlZTogY29yZS5JVXBkYXRlclRyZWUsIGF2YWlsYWJsZVNpemU6IFNpemUpOiBib29sZWFuIHtcclxuICAgICAgICB2YXIgY2EgPSBzdGF0ZS5jaGlsZEF2YWlsYWJsZTtcclxuICAgICAgICBjYS53aWR0aCA9IGNhLmhlaWdodCA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcclxuICAgICAgICB2YXIgZGVzaXJlZCA9IG91dHB1dC5kZXNpcmVkU2l6ZTtcclxuICAgICAgICBkZXNpcmVkLndpZHRoID0gZGVzaXJlZC5oZWlnaHQgPSAwO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG59IiwibW9kdWxlIG1pbmVydmEuY29udHJvbHMuc3RhY2twYW5lbC5tZWFzdXJlLnRhcGlucyB7XHJcbiAgICBleHBvcnQgZnVuY3Rpb24gZG9WZXJ0aWNhbCAoaW5wdXQ6IElJbnB1dCwgc3RhdGU6IElTdGF0ZSwgb3V0cHV0OiBJT3V0cHV0LCB0cmVlOiBjb3JlLklVcGRhdGVyVHJlZSwgYXZhaWxhYmxlU2l6ZTogU2l6ZSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmIChpbnB1dC5vcmllbnRhdGlvbiAhPT0gT3JpZW50YXRpb24uVmVydGljYWwpXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG5cclxuICAgICAgICB2YXIgY2EgPSBzdGF0ZS5jaGlsZEF2YWlsYWJsZTtcclxuICAgICAgICBjYS53aWR0aCA9IHN0YXRlLmF2YWlsYWJsZVNpemUud2lkdGg7XHJcbiAgICAgICAgdmFyIHdpZHRoID0gaW5wdXQud2lkdGg7XHJcbiAgICAgICAgaWYgKCFpc05hTih3aWR0aCkpXHJcbiAgICAgICAgICAgIGNhLndpZHRoID0gd2lkdGg7XHJcbiAgICAgICAgY2Eud2lkdGggPSBNYXRoLm1heChNYXRoLm1pbihjYS53aWR0aCwgaW5wdXQubWF4V2lkdGgpLCBpbnB1dC5taW5XaWR0aCk7XHJcblxyXG4gICAgICAgIHZhciBkZXNpcmVkID0gb3V0cHV0LmRlc2lyZWRTaXplO1xyXG4gICAgICAgIGZvciAodmFyIHdhbGtlciA9IHRyZWUud2FsaygpLCBjaGlsZDogY29yZS5VcGRhdGVyLCBjaGlsZERlc2lyZWQ6IFNpemU7IHdhbGtlci5zdGVwKCk7KSB7XHJcbiAgICAgICAgICAgIGNoaWxkID0gd2Fsa2VyLmN1cnJlbnQ7XHJcbiAgICAgICAgICAgIGNoaWxkLm1lYXN1cmUoY2EpO1xyXG4gICAgICAgICAgICBjaGlsZERlc2lyZWQgPSBjaGlsZC5hc3NldHMuZGVzaXJlZFNpemU7XHJcblxyXG4gICAgICAgICAgICBkZXNpcmVkLmhlaWdodCArPSBjaGlsZERlc2lyZWQuaGVpZ2h0O1xyXG4gICAgICAgICAgICBkZXNpcmVkLndpZHRoID0gTWF0aC5tYXgoZGVzaXJlZC53aWR0aCwgY2hpbGREZXNpcmVkLndpZHRoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG59IiwibW9kdWxlIG1pbmVydmEuY29udHJvbHMudXNlcmNvbnRyb2wuYXJyYW5nZS50YXBpbnMge1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGRvT3ZlcnJpZGUgKGlucHV0OiBJSW5wdXQsIHN0YXRlOiBJU3RhdGUsIG91dHB1dDogY29yZS5hcnJhbmdlLklPdXRwdXQsIHRyZWU6IGNvbnRyb2wuQ29udHJvbFVwZGF0ZXJUcmVlLCBmaW5hbFJlY3Q6IFJlY3QpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAodHJlZS5zdWJ0cmVlKVxyXG4gICAgICAgICAgICB0cmVlLnN1YnRyZWUuYXJyYW5nZShzdGF0ZS5jaGlsZFJlY3QpO1xyXG5cclxuICAgICAgICBTaXplLmNvcHlUbyhzdGF0ZS5maW5hbFNpemUsIHN0YXRlLmFycmFuZ2VkU2l6ZSk7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb250cm9scy51c2VyY29udHJvbC5hcnJhbmdlLnRhcGlucyB7XHJcbiAgICBleHBvcnQgZnVuY3Rpb24gcHJlT3ZlcnJpZGUgKGlucHV0OiBJSW5wdXQsIHN0YXRlOiBJU3RhdGUsIG91dHB1dDogY29yZS5hcnJhbmdlLklPdXRwdXQsIHRyZWU6IGNvbnRyb2wuQ29udHJvbFVwZGF0ZXJUcmVlLCBhdmFpbGFibGVTaXplOiBTaXplKTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKCF0cmVlLnN1YnRyZWUpXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIHZhciB0YiA9IHN0YXRlLnRvdGFsQm9yZGVyO1xyXG4gICAgICAgIFRoaWNrbmVzcy5jb3B5VG8oaW5wdXQucGFkZGluZywgdGIpO1xyXG4gICAgICAgIFRoaWNrbmVzcy5hZGQodGIsIGlucHV0LmJvcmRlclRoaWNrbmVzcyk7XHJcblxyXG4gICAgICAgIHZhciBjciA9IHN0YXRlLmNoaWxkUmVjdDtcclxuICAgICAgICBjci54ID0gY3IueSA9IDA7XHJcbiAgICAgICAgU2l6ZS5jb3B5VG8oc3RhdGUuZmluYWxTaXplLCBjcik7XHJcbiAgICAgICAgVGhpY2tuZXNzLnNocmlua1NpemUodGIsIGNyKTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvbnRyb2xzLnVzZXJjb250cm9sLm1lYXN1cmUudGFwaW5zIHtcclxuICAgIGV4cG9ydCBmdW5jdGlvbiBkb092ZXJyaWRlIChpbnB1dDogY29yZS5tZWFzdXJlLklJbnB1dCwgc3RhdGU6IGNvcmUubWVhc3VyZS5JU3RhdGUsIG91dHB1dDogY29yZS5tZWFzdXJlLklPdXRwdXQsIHRyZWU6IGNvbnRyb2wuQ29udHJvbFVwZGF0ZXJUcmVlLCBhdmFpbGFibGVTaXplOiBTaXplKTogYm9vbGVhbiB7XHJcbiAgICAgICAgdmFyIGRzID0gb3V0cHV0LmRlc2lyZWRTaXplO1xyXG4gICAgICAgIHZhciBzdWJ0cmVlID0gdHJlZS5zdWJ0cmVlO1xyXG4gICAgICAgIGlmIChzdWJ0cmVlKSB7XHJcbiAgICAgICAgICAgIHN1YnRyZWUubWVhc3VyZShzdGF0ZS5hdmFpbGFibGVTaXplKTtcclxuICAgICAgICAgICAgU2l6ZS5jb3B5VG8oc3VidHJlZS5hc3NldHMuZGVzaXJlZFNpemUsIGRzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb250cm9scy51c2VyY29udHJvbC5tZWFzdXJlLnRhcGlucyB7XHJcbiAgICBleHBvcnQgZnVuY3Rpb24gcG9zdE92ZXJyaWRlIChpbnB1dDogSUlucHV0LCBzdGF0ZTogSVN0YXRlLCBvdXRwdXQ6IGNvcmUubWVhc3VyZS5JT3V0cHV0LCB0cmVlOiBjb250cm9sLkNvbnRyb2xVcGRhdGVyVHJlZSwgYXZhaWxhYmxlU2l6ZTogU2l6ZSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIFRoaWNrbmVzcy5ncm93U2l6ZShzdGF0ZS50b3RhbEJvcmRlciwgb3V0cHV0LmRlc2lyZWRTaXplKTtcclxuICAgICAgICBTaXplLm1pbihvdXRwdXQuZGVzaXJlZFNpemUsIHN0YXRlLmF2YWlsYWJsZVNpemUpO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG59IiwibW9kdWxlIG1pbmVydmEuY29udHJvbHMudXNlcmNvbnRyb2wubWVhc3VyZS50YXBpbnMge1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHByZU92ZXJyaWRlIChpbnB1dDogSUlucHV0LCBzdGF0ZTogSVN0YXRlLCBvdXRwdXQ6IGNvcmUubWVhc3VyZS5JT3V0cHV0LCB0cmVlOiBjb250cm9sLkNvbnRyb2xVcGRhdGVyVHJlZSwgYXZhaWxhYmxlU2l6ZTogU2l6ZSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHZhciB0YiA9IHN0YXRlLnRvdGFsQm9yZGVyO1xyXG4gICAgICAgIFRoaWNrbmVzcy5jb3B5VG8oaW5wdXQucGFkZGluZywgdGIpO1xyXG4gICAgICAgIFRoaWNrbmVzcy5hZGQodGIsIGlucHV0LmJvcmRlclRoaWNrbmVzcyk7XHJcbiAgICAgICAgVGhpY2tuZXNzLnNocmlua1NpemUodGIsIHN0YXRlLmF2YWlsYWJsZVNpemUpO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG59IiwibW9kdWxlIG1pbmVydmEuY29udHJvbHMudmlydHVhbGl6aW5nc3RhY2twYW5lbC5hcnJhbmdlLnRhcGlucyB7XHJcbiAgICBleHBvcnQgZnVuY3Rpb24gZG9Ib3Jpem9udGFsIChpbnB1dDogSUlucHV0LCBzdGF0ZTogSVN0YXRlLCBvdXRwdXQ6IElPdXRwdXQsIHRyZWU6IGNvcmUuSVVwZGF0ZXJUcmVlLCBmaW5hbFJlY3Q6IFJlY3QpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAoaW5wdXQub3JpZW50YXRpb24gIT09IE9yaWVudGF0aW9uLkhvcml6b250YWwpXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG5cclxuICAgICAgICB2YXIgZnMgPSBzdGF0ZS5maW5hbFNpemU7XHJcbiAgICAgICAgdmFyIGFycmFuZ2VkID0gc3RhdGUuYXJyYW5nZWRTaXplO1xyXG4gICAgICAgIGFycmFuZ2VkLndpZHRoID0gMDtcclxuICAgICAgICB2YXIgY2hpbGRSZWN0ID0gc3RhdGUuY2hpbGRSZWN0O1xyXG4gICAgICAgIHZhciBzZCA9IGlucHV0LnNjcm9sbERhdGE7XHJcblxyXG4gICAgICAgIHZhciBjaGlsZDogY29yZS5VcGRhdGVyO1xyXG4gICAgICAgIHZhciBjaGlsZERlc2lyZWQ6IFNpemU7XHJcbiAgICAgICAgZm9yICh2YXIgd2Fsa2VyID0gdHJlZS53YWxrKCk7IHdhbGtlci5zdGVwKCk7KSB7XHJcbiAgICAgICAgICAgIGNoaWxkID0gd2Fsa2VyLmN1cnJlbnQ7XHJcbiAgICAgICAgICAgIGNoaWxkRGVzaXJlZCA9IGNoaWxkLmFzc2V0cy5kZXNpcmVkU2l6ZTtcclxuICAgICAgICAgICAgY2hpbGREZXNpcmVkLmhlaWdodCA9IGZzLmhlaWdodDtcclxuICAgICAgICAgICAgU2l6ZS5jb3B5VG8oY2hpbGREZXNpcmVkLCBjaGlsZFJlY3QpO1xyXG4gICAgICAgICAgICBjaGlsZFJlY3QueCA9IGFycmFuZ2VkLndpZHRoO1xyXG4gICAgICAgICAgICBjaGlsZFJlY3QueSA9IC1zZC5vZmZzZXRZO1xyXG5cclxuICAgICAgICAgICAgaWYgKFJlY3QuaXNFbXB0eShjaGlsZFJlY3QpKVxyXG4gICAgICAgICAgICAgICAgY2hpbGRSZWN0LnggPSBjaGlsZFJlY3QueSA9IGNoaWxkUmVjdC53aWR0aCA9IGNoaWxkUmVjdC5oZWlnaHQgPSAwO1xyXG4gICAgICAgICAgICBjaGlsZC5hcnJhbmdlKGNoaWxkUmVjdCk7XHJcblxyXG4gICAgICAgICAgICBhcnJhbmdlZC53aWR0aCArPSBjaGlsZERlc2lyZWQud2lkdGg7XHJcbiAgICAgICAgICAgIGFycmFuZ2VkLmhlaWdodCA9IE1hdGgubWF4KGFycmFuZ2VkLmhlaWdodCwgY2hpbGREZXNpcmVkLmhlaWdodCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhcnJhbmdlZC53aWR0aCA9IE1hdGgubWF4KGFycmFuZ2VkLndpZHRoLCBmcy53aWR0aCk7XHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG59IiwibW9kdWxlIG1pbmVydmEuY29udHJvbHMudmlydHVhbGl6aW5nc3RhY2twYW5lbC5hcnJhbmdlLnRhcGlucyB7XHJcbiAgICBleHBvcnQgZnVuY3Rpb24gZG9PdmVycmlkZSAoaW5wdXQ6IElJbnB1dCwgc3RhdGU6IElTdGF0ZSwgb3V0cHV0OiBJT3V0cHV0LCB0cmVlOiBjb3JlLklVcGRhdGVyVHJlZSwgZmluYWxSZWN0OiBSZWN0KTogYm9vbGVhbiB7XHJcbiAgICAgICAgdmFyIGNyID0gc3RhdGUuY2hpbGRSZWN0O1xyXG4gICAgICAgIGNyLnggPSBjci55ID0gMDtcclxuICAgICAgICBTaXplLmNvcHlUbyhzdGF0ZS5maW5hbFNpemUsIGNyKTtcclxuICAgICAgICBTaXplLmNvcHlUbyhzdGF0ZS5maW5hbFNpemUsIHN0YXRlLmFycmFuZ2VkU2l6ZSk7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb250cm9scy52aXJ0dWFsaXppbmdzdGFja3BhbmVsLmFycmFuZ2UudGFwaW5zIHtcclxuICAgIGV4cG9ydCBmdW5jdGlvbiBkb1ZlcnRpY2FsIChpbnB1dDogSUlucHV0LCBzdGF0ZTogSVN0YXRlLCBvdXRwdXQ6IElPdXRwdXQsIHRyZWU6IGNvcmUuSVVwZGF0ZXJUcmVlLCBmaW5hbFJlY3Q6IFJlY3QpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAoaW5wdXQub3JpZW50YXRpb24gIT09IE9yaWVudGF0aW9uLlZlcnRpY2FsKVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuXHJcbiAgICAgICAgdmFyIGZzID0gc3RhdGUuZmluYWxTaXplO1xyXG4gICAgICAgIHZhciBhcnJhbmdlZCA9IHN0YXRlLmFycmFuZ2VkU2l6ZTtcclxuICAgICAgICBhcnJhbmdlZC5oZWlnaHQgPSAwO1xyXG4gICAgICAgIHZhciBjaGlsZFJlY3QgPSBzdGF0ZS5jaGlsZFJlY3Q7XHJcbiAgICAgICAgdmFyIHNkID0gaW5wdXQuc2Nyb2xsRGF0YTtcclxuXHJcbiAgICAgICAgdmFyIGNoaWxkOiBjb3JlLlVwZGF0ZXI7XHJcbiAgICAgICAgdmFyIGNoaWxkRGVzaXJlZDogU2l6ZTtcclxuICAgICAgICBmb3IgKHZhciB3YWxrZXIgPSB0cmVlLndhbGsoKTsgd2Fsa2VyLnN0ZXAoKTspIHtcclxuICAgICAgICAgICAgY2hpbGQgPSB3YWxrZXIuY3VycmVudDtcclxuICAgICAgICAgICAgY2hpbGREZXNpcmVkID0gY2hpbGQuYXNzZXRzLmRlc2lyZWRTaXplO1xyXG4gICAgICAgICAgICBjaGlsZERlc2lyZWQud2lkdGggPSBmcy53aWR0aDtcclxuICAgICAgICAgICAgU2l6ZS5jb3B5VG8oY2hpbGREZXNpcmVkLCBjaGlsZFJlY3QpO1xyXG4gICAgICAgICAgICBjaGlsZFJlY3QueCA9IC1zZC5vZmZzZXRYO1xyXG4gICAgICAgICAgICBjaGlsZFJlY3QueSA9IGFycmFuZ2VkLmhlaWdodDtcclxuXHJcbiAgICAgICAgICAgIGlmIChSZWN0LmlzRW1wdHkoY2hpbGRSZWN0KSlcclxuICAgICAgICAgICAgICAgIGNoaWxkUmVjdC54ID0gY2hpbGRSZWN0LnkgPSBjaGlsZFJlY3Qud2lkdGggPSBjaGlsZFJlY3QuaGVpZ2h0ID0gMDtcclxuICAgICAgICAgICAgY2hpbGQuYXJyYW5nZShjaGlsZFJlY3QpO1xyXG5cclxuICAgICAgICAgICAgYXJyYW5nZWQud2lkdGggPSBNYXRoLm1heChhcnJhbmdlZC53aWR0aCwgY2hpbGREZXNpcmVkLndpZHRoKTtcclxuICAgICAgICAgICAgYXJyYW5nZWQuaGVpZ2h0ICs9IGNoaWxkRGVzaXJlZC5oZWlnaHQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhcnJhbmdlZC5oZWlnaHQgPSBNYXRoLm1heChhcnJhbmdlZC5oZWlnaHQsIGZzLmhlaWdodCk7XHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG59IiwibW9kdWxlIG1pbmVydmEuY29udHJvbHMudmlydHVhbGl6aW5nc3RhY2twYW5lbC5tZWFzdXJlLnRhcGlucyB7XHJcbiAgICBleHBvcnQgZnVuY3Rpb24gZG9Ib3Jpem9udGFsIChpbnB1dDogSUlucHV0LCBzdGF0ZTogSVN0YXRlLCBvdXRwdXQ6IElPdXRwdXQsIHRyZWU6IHZpcnR1YWxpemluZ3BhbmVsLlZpcnR1YWxpemluZ1BhbmVsVXBkYXRlclRyZWUsIGF2YWlsYWJsZVNpemU6IFNpemUpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAoaW5wdXQub3JpZW50YXRpb24gIT09IE9yaWVudGF0aW9uLkhvcml6b250YWwpXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG5cclxuICAgICAgICB2YXIgY2EgPSBzdGF0ZS5jaGlsZEF2YWlsYWJsZTtcclxuICAgICAgICB2YXIgc2QgPSBpbnB1dC5zY3JvbGxEYXRhO1xyXG4gICAgICAgIGlmIChzZC5jYW5WZXJ0aWNhbGx5U2Nyb2xsKVxyXG4gICAgICAgICAgICBjYS5oZWlnaHQgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XHJcblxyXG4gICAgICAgIC8vRGlzcG9zZSBhbmQgcmVtb3ZlIGNvbnRhaW5lcnMgdGhhdCBhcmUgYmVmb3JlIG9mZnNldFxyXG4gICAgICAgIHZhciBpbmRleCA9IE1hdGguZmxvb3Ioc2Qub2Zmc2V0WCk7XHJcbiAgICAgICAgdmFyIGNvdW50ID0gdHJlZS5jb250YWluZXJPd25lci5pdGVtQ291bnQ7XHJcbiAgICAgICAgdHJlZS5jb250YWluZXJPd25lci5yZW1vdmUoMCwgaW5kZXgpO1xyXG5cclxuICAgICAgICB2YXIgdmlzY291bnQgPSAwO1xyXG4gICAgICAgIHZhciBkcyA9IG91dHB1dC5kZXNpcmVkU2l6ZTtcclxuICAgICAgICBmb3IgKHZhciBnZW5lcmF0b3IgPSB0cmVlLmNvbnRhaW5lck93bmVyLmNyZWF0ZUdlbmVyYXRvcihpbmRleCwgY291bnQpOyBnZW5lcmF0b3IuZ2VuZXJhdGUoKTspIHtcclxuICAgICAgICAgICAgdmlzY291bnQrKztcclxuICAgICAgICAgICAgdmFyIGNoaWxkID0gZ2VuZXJhdG9yLmN1cnJlbnQ7XHJcbiAgICAgICAgICAgIGNoaWxkLm1lYXN1cmUoY2EpO1xyXG4gICAgICAgICAgICB2YXIgY2hpbGREZXNpcmVkID0gY2hpbGQuYXNzZXRzLmRlc2lyZWRTaXplO1xyXG4gICAgICAgICAgICBkcy5oZWlnaHQgPSBNYXRoLm1heChkcy5oZWlnaHQsIGNoaWxkRGVzaXJlZC5oZWlnaHQpO1xyXG4gICAgICAgICAgICBkcy53aWR0aCArPSBjaGlsZERlc2lyZWQud2lkdGg7XHJcbiAgICAgICAgICAgIGlmIChkcy53aWR0aCA+IGNhLndpZHRoKVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL0Rpc3Bvc2UgYW5kIHJlbW92ZSBjb250YWluZXJzIHRoYXQgYXJlIGFmdGVyIHZpc2libGVcclxuICAgICAgICB0cmVlLmNvbnRhaW5lck93bmVyLnJlbW92ZShpbmRleCArIHZpc2NvdW50LCBjb3VudCAtIChpbmRleCArIHZpc2NvdW50KSk7XHJcblxyXG4gICAgICAgIHZhciBjaGFuZ2VkID0gc2QuZXh0ZW50SGVpZ2h0ICE9PSBkcy5oZWlnaHRcclxuICAgICAgICAgICAgfHwgc2QuZXh0ZW50V2lkdGggIT09IGNvdW50XHJcbiAgICAgICAgICAgIHx8IHNkLnZpZXdwb3J0SGVpZ2h0ICE9PSBjYS5oZWlnaHRcclxuICAgICAgICAgICAgfHwgc2Qudmlld3BvcnRXaWR0aCAhPT0gdmlzY291bnQ7XHJcbiAgICAgICAgc2QuZXh0ZW50SGVpZ2h0ID0gZHMuaGVpZ2h0O1xyXG4gICAgICAgIHNkLmV4dGVudFdpZHRoID0gY291bnQ7XHJcbiAgICAgICAgc2Qudmlld3BvcnRIZWlnaHQgPSBjYS5oZWlnaHQ7XHJcbiAgICAgICAgc2Qudmlld3BvcnRXaWR0aCA9IHZpc2NvdW50O1xyXG5cclxuICAgICAgICBpZiAoY2hhbmdlZClcclxuICAgICAgICAgICAgc2QuaW52YWxpZGF0ZSgpO1xyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvbnRyb2xzLnZpcnR1YWxpemluZ3N0YWNrcGFuZWwubWVhc3VyZS50YXBpbnMge1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGRvT3ZlcnJpZGUgKGlucHV0OiBJSW5wdXQsIHN0YXRlOiBJU3RhdGUsIG91dHB1dDogSU91dHB1dCwgdHJlZTogY29yZS5JVXBkYXRlclRyZWUsIGF2YWlsYWJsZVNpemU6IFNpemUpOiBib29sZWFuIHtcclxuICAgICAgICB2YXIgY2EgPSBzdGF0ZS5jaGlsZEF2YWlsYWJsZTtcclxuICAgICAgICBTaXplLmNvcHlUbyhzdGF0ZS5hdmFpbGFibGVTaXplLCBjYSk7XHJcbiAgICAgICAgdmFyIGRlc2lyZWQgPSBvdXRwdXQuZGVzaXJlZFNpemU7XHJcbiAgICAgICAgZGVzaXJlZC53aWR0aCA9IGRlc2lyZWQuaGVpZ2h0ID0gMDtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvbnRyb2xzLnZpcnR1YWxpemluZ3N0YWNrcGFuZWwubWVhc3VyZS50YXBpbnMge1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGRvVmVydGljYWwgKGlucHV0OiBJSW5wdXQsIHN0YXRlOiBJU3RhdGUsIG91dHB1dDogSU91dHB1dCwgdHJlZTogdmlydHVhbGl6aW5ncGFuZWwuVmlydHVhbGl6aW5nUGFuZWxVcGRhdGVyVHJlZSwgYXZhaWxhYmxlU2l6ZTogU2l6ZSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmIChpbnB1dC5vcmllbnRhdGlvbiAhPT0gT3JpZW50YXRpb24uVmVydGljYWwpXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG5cclxuICAgICAgICB2YXIgY2EgPSBzdGF0ZS5jaGlsZEF2YWlsYWJsZTtcclxuICAgICAgICB2YXIgc2QgPSBpbnB1dC5zY3JvbGxEYXRhO1xyXG4gICAgICAgIGlmIChzZC5jYW5Ib3Jpem9udGFsbHlTY3JvbGwpXHJcbiAgICAgICAgICAgIGNhLndpZHRoID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xyXG5cclxuICAgICAgICAvL0Rpc3Bvc2UgYW5kIHJlbW92ZSBjb250YWluZXJzIHRoYXQgYXJlIGJlZm9yZSBvZmZzZXRcclxuICAgICAgICB2YXIgaW5kZXggPSBNYXRoLmZsb29yKHNkLm9mZnNldFkpO1xyXG4gICAgICAgIHZhciBjb3VudCA9IHRyZWUuY29udGFpbmVyT3duZXIuaXRlbUNvdW50O1xyXG4gICAgICAgIHRyZWUuY29udGFpbmVyT3duZXIucmVtb3ZlKDAsIGluZGV4KTtcclxuXHJcbiAgICAgICAgdmFyIHZpc2NvdW50ID0gMDtcclxuICAgICAgICB2YXIgZHMgPSBvdXRwdXQuZGVzaXJlZFNpemU7XHJcbiAgICAgICAgZm9yICh2YXIgZ2VuZXJhdG9yID0gdHJlZS5jb250YWluZXJPd25lci5jcmVhdGVHZW5lcmF0b3IoaW5kZXgsIGNvdW50KTsgZ2VuZXJhdG9yLmdlbmVyYXRlKCk7KSB7XHJcbiAgICAgICAgICAgIHZpc2NvdW50Kys7XHJcbiAgICAgICAgICAgIHZhciBjaGlsZCA9IGdlbmVyYXRvci5jdXJyZW50O1xyXG4gICAgICAgICAgICBjaGlsZC5tZWFzdXJlKGNhKTtcclxuICAgICAgICAgICAgdmFyIGNoaWxkRGVzaXJlZCA9IGNoaWxkLmFzc2V0cy5kZXNpcmVkU2l6ZTtcclxuICAgICAgICAgICAgZHMud2lkdGggPSBNYXRoLm1heChkcy53aWR0aCwgY2hpbGREZXNpcmVkLndpZHRoKTtcclxuICAgICAgICAgICAgZHMuaGVpZ2h0ICs9IGNoaWxkRGVzaXJlZC5oZWlnaHQ7XHJcbiAgICAgICAgICAgIGlmIChkcy5oZWlnaHQgPiBjYS5oZWlnaHQpXHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vRGlzcG9zZSBhbmQgcmVtb3ZlIGNvbnRhaW5lcnMgdGhhdCBhcmUgYWZ0ZXIgdmlzaWJsZVxyXG4gICAgICAgIHRyZWUuY29udGFpbmVyT3duZXIucmVtb3ZlKGluZGV4ICsgdmlzY291bnQsIGNvdW50IC0gKGluZGV4ICsgdmlzY291bnQpKTtcclxuXHJcbiAgICAgICAgdmFyIGNoYW5nZWQgPSBzZC5leHRlbnRIZWlnaHQgIT09IGNvdW50XHJcbiAgICAgICAgICAgIHx8IHNkLmV4dGVudFdpZHRoICE9PSBkcy53aWR0aFxyXG4gICAgICAgICAgICB8fCBzZC52aWV3cG9ydEhlaWdodCAhPT0gdmlzY291bnRcclxuICAgICAgICAgICAgfHwgc2Qudmlld3BvcnRXaWR0aCAhPT0gY2Eud2lkdGg7XHJcbiAgICAgICAgc2QuZXh0ZW50SGVpZ2h0ID0gY291bnQ7XHJcbiAgICAgICAgc2QuZXh0ZW50V2lkdGggPSBkcy53aWR0aDtcclxuICAgICAgICBzZC52aWV3cG9ydEhlaWdodCA9IHZpc2NvdW50O1xyXG4gICAgICAgIHNkLnZpZXdwb3J0V2lkdGggPSBjYS53aWR0aDtcclxuXHJcbiAgICAgICAgaWYgKGNoYW5nZWQpXHJcbiAgICAgICAgICAgIHNkLmludmFsaWRhdGUoKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5zaGFwZXMucGF0aC5wcm9jZXNzdXAudGFwaW5zIHtcclxuICAgIGV4cG9ydCBmdW5jdGlvbiBjYWxjQWN0dWFsU2l6ZSAoaW5wdXQ6IElJbnB1dCwgc3RhdGU6IElTdGF0ZSwgb3V0cHV0OiBJT3V0cHV0LCB0cmVlOiBjb3JlLklVcGRhdGVyVHJlZSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmICgoaW5wdXQuZGlydHlGbGFncyAmIERpcnR5RmxhZ3MuQm91bmRzKSA9PT0gMClcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcblxyXG4gICAgICAgIHZhciBhY3R1YWwgPSBzdGF0ZS5hY3R1YWxTaXplO1xyXG4gICAgICAgIGFjdHVhbC53aWR0aCA9IGlucHV0LmFjdHVhbFdpZHRoO1xyXG4gICAgICAgIGFjdHVhbC5oZWlnaHQgPSBpbnB1dC5hY3R1YWxIZWlnaHQ7XHJcblxyXG4gICAgICAgIHZhciBuYXR1cmFsID0gaW5wdXQubmF0dXJhbEJvdW5kcztcclxuICAgICAgICBpZiAoKG5hdHVyYWwud2lkdGggPD0gMC4wIHx8IG5hdHVyYWwuaGVpZ2h0IDw9IDApIHx8IChpbnB1dC53aWR0aCA8PSAwLjAgfHwgaW5wdXQuaGVpZ2h0IDw9IDAuMCkpIHtcclxuICAgICAgICAgICAgYWN0dWFsLndpZHRoID0gMC4wO1xyXG4gICAgICAgICAgICBhY3R1YWwuaGVpZ2h0ID0gMC4wO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0cmVlLnZpc3VhbFBhcmVudCBpbnN0YW5jZW9mIGNvbnRyb2xzLmNhbnZhcy5DYW52YXNVcGRhdGVyKSB7XHJcbiAgICAgICAgICAgIGFjdHVhbC53aWR0aCA9IGFjdHVhbC53aWR0aCA9PT0gMC4wID8gbmF0dXJhbC53aWR0aCA6IGFjdHVhbC53aWR0aDtcclxuICAgICAgICAgICAgYWN0dWFsLmhlaWdodCA9IGFjdHVhbC5oZWlnaHQgPT09IDAuMCA/IG5hdHVyYWwuaGVpZ2h0IDogYWN0dWFsLmhlaWdodDtcclxuICAgICAgICAgICAgaWYgKCFpc05hTihpbnB1dC53aWR0aCkpXHJcbiAgICAgICAgICAgICAgICBhY3R1YWwud2lkdGggPSBpbnB1dC53aWR0aDtcclxuICAgICAgICAgICAgaWYgKCFpc05hTihpbnB1dC5oZWlnaHQpKVxyXG4gICAgICAgICAgICAgICAgYWN0dWFsLmhlaWdodCA9IGlucHV0LmhlaWdodDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG59IiwibW9kdWxlIG1pbmVydmEuc2hhcGVzLnBhdGgucHJvY2Vzc3VwLnRhcGlucyB7XHJcbiAgICBleHBvcnQgZnVuY3Rpb24gY2FsY0V4dGVudHMgKGlucHV0OiBJSW5wdXQsIHN0YXRlOiBJU3RhdGUsIG91dHB1dDogSU91dHB1dCwgdHJlZTogY29yZS5JVXBkYXRlclRyZWUpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAoKGlucHV0LmRpcnR5RmxhZ3MgJiBEaXJ0eUZsYWdzLkJvdW5kcykgPT09IDApXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG5cclxuICAgICAgICBpZiAoU2l6ZS5pc0VtcHR5KHN0YXRlLmFjdHVhbFNpemUpKSB7XHJcbiAgICAgICAgICAgIFJlY3QuY2xlYXIob3V0cHV0LmV4dGVudHMpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIFJlY3QuY29weVRvKG91dHB1dC5zaGFwZVJlY3QsIG91dHB1dC5leHRlbnRzKTtcclxuICAgICAgICAgICAgUmVjdC50cmFuc2Zvcm0ob3V0cHV0LmV4dGVudHMsIG91dHB1dC5zdHJldGNoWGZvcm0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBSZWN0LmNvcHlUbyhvdXRwdXQuZXh0ZW50cywgb3V0cHV0LmV4dGVudHNXaXRoQ2hpbGRyZW4pO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG59IiwibW9kdWxlIG1pbmVydmEuc2hhcGVzLnBhdGgucHJvY2Vzc3VwLnRhcGlucyB7XHJcbiAgICBleHBvcnQgZnVuY3Rpb24gY2FsY1NoYXBlUmVjdCAoaW5wdXQ6IElJbnB1dCwgc3RhdGU6IElTdGF0ZSwgb3V0cHV0OiBJT3V0cHV0LCB0cmVlOiBjb3JlLklVcGRhdGVyVHJlZSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmICgoaW5wdXQuZGlydHlGbGFncyAmIERpcnR5RmxhZ3MuQm91bmRzKSA9PT0gMClcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgLy9UT0RPOiBTaG91bGQgd2UgY2FsY3VsYXRlIHRoaXMgd2l0aG91dCBzdHJva2luZz9cclxuICAgICAgICBSZWN0LmNvcHlUbyhpbnB1dC5uYXR1cmFsQm91bmRzLCBvdXRwdXQuc2hhcGVSZWN0KTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLnNoYXBlcy5wYXRoLnByb2Nlc3N1cC50YXBpbnMge1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGNhbGNTdHJldGNoIChpbnB1dDogSUlucHV0LCBzdGF0ZTogSVN0YXRlLCBvdXRwdXQ6IElPdXRwdXQsIHRyZWU6IGNvcmUuSVVwZGF0ZXJUcmVlKTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKChpbnB1dC5kaXJ0eUZsYWdzICYgRGlydHlGbGFncy5Cb3VuZHMpID09PSAwKVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuXHJcbiAgICAgICAgdmFyIHhmb3JtID0gbWF0My5pZGVudGl0eShvdXRwdXQuc3RyZXRjaFhmb3JtKTtcclxuICAgICAgICB2YXIgYWN0dWFsID0gc3RhdGUuYWN0dWFsU2l6ZTtcclxuICAgICAgICBpZiAoU2l6ZS5pc0VtcHR5KGFjdHVhbCkgfHwgaW5wdXQuc3RyZXRjaCA9PT0gU3RyZXRjaC5Ob25lKVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuXHJcbiAgICAgICAgdmFyIHNoYXBlUmVjdCA9IG91dHB1dC5zaGFwZVJlY3Q7XHJcbiAgICAgICAgdmFyIHN4ID0gYWN0dWFsLndpZHRoIC8gc2hhcGVSZWN0LndpZHRoO1xyXG4gICAgICAgIHZhciBzeSA9IGFjdHVhbC5oZWlnaHQgLyBzaGFwZVJlY3QuaGVpZ2h0O1xyXG4gICAgICAgIHZhciB4cCA9IDA7XHJcbiAgICAgICAgdmFyIHlwID0gMDtcclxuICAgICAgICBzd2l0Y2ggKGlucHV0LnN0cmV0Y2gpIHtcclxuICAgICAgICAgICAgY2FzZSBTdHJldGNoLlVuaWZvcm06XHJcbiAgICAgICAgICAgICAgICBzeCA9IHN5ID0gTWF0aC5taW4oc3gsIHN5KTtcclxuICAgICAgICAgICAgICAgIHhwID0gKGFjdHVhbC53aWR0aCAtIChzaGFwZVJlY3Qud2lkdGggKiBzeCkpIC8gMi4wO1xyXG4gICAgICAgICAgICAgICAgeXAgPSAoYWN0dWFsLmhlaWdodCAtIChzaGFwZVJlY3QuaGVpZ2h0ICogc3kpKSAvIDIuMDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFN0cmV0Y2guVW5pZm9ybVRvRmlsbDpcclxuICAgICAgICAgICAgICAgIHN4ID0gc3kgPSBNYXRoLm1heChzeCwgc3kpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBtYXQzLnRyYW5zbGF0ZSh4Zm9ybSwgLXNoYXBlUmVjdC54LCAtc2hhcGVSZWN0LnkpO1xyXG4gICAgICAgIG1hdDMuc2NhbGUoeGZvcm0sIHN4LCBzeSk7XHJcbiAgICAgICAgbWF0My50cmFuc2xhdGUoeGZvcm0sIHhwLCB5cCk7XHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG59IiwibW9kdWxlIG1pbmVydmEuc2hhcGVzLnBhdGgucmVuZGVyLnRhcGlucyB7XHJcbiAgICBleHBvcnQgZnVuY3Rpb24gZG9SZW5kZXIgKGlucHV0OiBJSW5wdXQsIHN0YXRlOiBJU3RhdGUsIG91dHB1dDogSU91dHB1dCwgY3R4OiBjb3JlLnJlbmRlci5SZW5kZXJDb250ZXh0LCByZWdpb246IFJlY3QpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAoIXN0YXRlLnNob3VsZERyYXcpXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIGN0eC5wcmVhcHBseShpbnB1dC5zdHJldGNoWGZvcm0pO1xyXG4gICAgICAgIGlucHV0LmRhdGEuRHJhdyhjdHgpO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG59IiwibW9kdWxlIG1pbmVydmEuc2hhcGVzLnBhdGgucmVuZGVyLnRhcGlucyB7XHJcbiAgICBleHBvcnQgZnVuY3Rpb24gZmlsbCAoaW5wdXQ6IElJbnB1dCwgc3RhdGU6IElTdGF0ZSwgb3V0cHV0OiBJT3V0cHV0LCBjdHg6IGNvcmUucmVuZGVyLlJlbmRlckNvbnRleHQsIHJlZ2lvbjogUmVjdCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmICghc3RhdGUuc2hvdWxkRHJhdylcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgaWYgKGlucHV0LmZpbGwpXHJcbiAgICAgICAgICAgIGN0eC5maWxsRXgoaW5wdXQuZmlsbCwgaW5wdXQuc2hhcGVSZWN0LCBpbnB1dC5kYXRhID8gaW5wdXQuZGF0YS5maWxsUnVsZSA6IEZpbGxSdWxlLkV2ZW5PZGQpO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG59IiwibW9kdWxlIG1pbmVydmEuc2hhcGVzLnNoYXBlLmFycmFuZ2UudGFwaW5zIHtcclxuICAgIGV4cG9ydCBmdW5jdGlvbiBkb092ZXJyaWRlIChpbnB1dDogSUlucHV0LCBzdGF0ZTogSVN0YXRlLCBvdXRwdXQ6IElPdXRwdXQsIHRyZWU6IGNvcmUuSVVwZGF0ZXJUcmVlKSB7XHJcbiAgICAgICAgdmFyIGFycmFuZ2VkID0gc3RhdGUuYXJyYW5nZWRTaXplO1xyXG4gICAgICAgIFNpemUuY29weVRvKHN0YXRlLmZpbmFsU2l6ZSwgYXJyYW5nZWQpO1xyXG4gICAgICAgIHZhciBuYiA9IGlucHV0Lm5hdHVyYWxCb3VuZHM7XHJcbiAgICAgICAgaWYgKGlucHV0LnN0cmV0Y2ggPT09IFN0cmV0Y2guTm9uZSkge1xyXG4gICAgICAgICAgICBhcnJhbmdlZC53aWR0aCA9IE1hdGgubWF4KGFycmFuZ2VkLndpZHRoLCBuYi54ICsgbmIud2lkdGgpO1xyXG4gICAgICAgICAgICBhcnJhbmdlZC5oZWlnaHQgPSBNYXRoLm1heChhcnJhbmdlZC5oZWlnaHQsIG5iLnkgKyBuYi5oZWlnaHQpO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChuYi53aWR0aCA9PT0gMClcclxuICAgICAgICAgICAgbmIud2lkdGggPSBhcnJhbmdlZC53aWR0aDtcclxuICAgICAgICBpZiAobmIuaGVpZ2h0ID09PSAwKVxyXG4gICAgICAgICAgICBuYi5oZWlnaHQgPSBhcnJhbmdlZC5oZWlnaHQ7XHJcblxyXG4gICAgICAgIHZhciBzeCA9IDEuMCxcclxuICAgICAgICAgICAgc3kgPSAxLjA7XHJcbiAgICAgICAgaWYgKG5iLndpZHRoICE9PSBhcnJhbmdlZC53aWR0aClcclxuICAgICAgICAgICAgc3ggPSBhcnJhbmdlZC53aWR0aCAvIG5iLndpZHRoO1xyXG4gICAgICAgIGlmIChuYi5oZWlnaHQgIT09IGFycmFuZ2VkLmhlaWdodClcclxuICAgICAgICAgICAgc3kgPSBhcnJhbmdlZC5oZWlnaHQgLyBuYi5oZWlnaHQ7XHJcblxyXG5cclxuICAgICAgICBzd2l0Y2ggKGlucHV0LnN0cmV0Y2gpIHtcclxuICAgICAgICAgICAgY2FzZSBTdHJldGNoLlVuaWZvcm06XHJcbiAgICAgICAgICAgICAgICBzeCA9IHN5ID0gTWF0aC5taW4oc3gsIHN5KTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFN0cmV0Y2guVW5pZm9ybVRvRmlsbDpcclxuICAgICAgICAgICAgICAgIHN4ID0gc3kgPSBNYXRoLm1heChzeCwgc3kpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhcnJhbmdlZC53aWR0aCA9IChuYi53aWR0aCAqIHN4KSB8fCAwO1xyXG4gICAgICAgIGFycmFuZ2VkLmhlaWdodCA9IChuYi5oZWlnaHQgKiBzeSkgfHwgMDtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5zaGFwZXMuc2hhcGUuaGl0dGVzdC50YXBpbnMge1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGNhbkhpdEluc2lkZSAoZGF0YTogSUhpdFRlc3REYXRhLCBwb3M6IFBvaW50LCBoaXRMaXN0OiBjb3JlLlVwZGF0ZXJbXSwgY3R4OiBjb3JlLnJlbmRlci5SZW5kZXJDb250ZXh0KTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKCFkYXRhLmFzc2V0cy5maWxsICYmICFkYXRhLmFzc2V0cy5zdHJva2UpIHtcclxuICAgICAgICAgICAgaGl0TGlzdC5zaGlmdCgpO1xyXG4gICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG59IiwibW9kdWxlIG1pbmVydmEuc2hhcGVzLnNoYXBlLmhpdHRlc3QudGFwaW5zIHtcclxuICAgIGV4cG9ydCBmdW5jdGlvbiBjYW5IaXRTaGFwZSAoZGF0YTogSUhpdFRlc3REYXRhLCBwb3M6IFBvaW50LCBoaXRMaXN0OiBjb3JlLlVwZGF0ZXJbXSwgY3R4OiBjb3JlLnJlbmRlci5SZW5kZXJDb250ZXh0KTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKChkYXRhLmFzc2V0cy5zaGFwZUZsYWdzICYgU2hhcGVGbGFncy5FbXB0eSkgPT09IFNoYXBlRmxhZ3MuRW1wdHkpIHtcclxuICAgICAgICAgICAgaGl0TGlzdC5zaGlmdCgpO1xyXG4gICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG59IiwibW9kdWxlIG1pbmVydmEuc2hhcGVzLnNoYXBlLmhpdHRlc3QudGFwaW5zIHtcclxuICAgIGV4cG9ydCBmdW5jdGlvbiBkcmF3U2hhcGUgKGRhdGE6IElIaXRUZXN0RGF0YSwgcG9zOiBQb2ludCwgaGl0TGlzdDogY29yZS5VcGRhdGVyW10sIGN0eDogY29yZS5yZW5kZXIuUmVuZGVyQ29udGV4dCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIC8vTm8tb3BcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLnNoYXBlcy5zaGFwZS5oaXR0ZXN0LnRhcGlucyB7XHJcbiAgICBleHBvcnQgZnVuY3Rpb24gZmluaXNoU2hhcGUgKGRhdGE6IElIaXRUZXN0RGF0YSwgcG9zOiBQb2ludCwgaGl0TGlzdDogY29yZS5VcGRhdGVyW10sIGN0eDogY29yZS5yZW5kZXIuUmVuZGVyQ29udGV4dCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHZhciBhc3NldHMgPSBkYXRhLmFzc2V0cztcclxuICAgICAgICB2YXIgaW5zaWRlID0gKCEhYXNzZXRzLmZpbGwgJiYgY3R4LnJhdy5pc1BvaW50SW5QYXRoKHBvcy54LCBwb3MueSkpXHJcbiAgICAgICAgICAgIHx8ICghIWFzc2V0cy5zdHJva2UgJiYgY3R4LmlzUG9pbnRJblN0cm9rZUV4KGFzc2V0cywgcG9zLngsIHBvcy55KSk7XHJcbiAgICAgICAgY3R4LnJlc3RvcmUoKTtcclxuXHJcbiAgICAgICAgaWYgKCFpbnNpZGUpIHtcclxuICAgICAgICAgICAgaGl0TGlzdC5zaGlmdCgpO1xyXG4gICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLnNoYXBlcy5zaGFwZS5oaXR0ZXN0LnRhcGlucyB7XHJcbiAgICBleHBvcnQgZnVuY3Rpb24gaW5zaWRlQ2hpbGRyZW4gKGRhdGE6IElIaXRUZXN0RGF0YSwgcG9zOiBQb2ludCwgaGl0TGlzdDogY29yZS5VcGRhdGVyW10sIGN0eDogY29yZS5yZW5kZXIuUmVuZGVyQ29udGV4dCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGhpdExpc3QudW5zaGlmdChkYXRhLnVwZGF0ZXIpO1xyXG4gICAgICAgIGRhdGEuaGl0Q2hpbGRyZW4gPSBmYWxzZTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLnNoYXBlcy5zaGFwZS5oaXR0ZXN0LnRhcGlucyB7XHJcbiAgICBleHBvcnQgZnVuY3Rpb24gcHJlcGFyZVNoYXBlIChkYXRhOiBJSGl0VGVzdERhdGEsIHBvczogUG9pbnQsIGhpdExpc3Q6IGNvcmUuVXBkYXRlcltdLCBjdHg6IGNvcmUucmVuZGVyLlJlbmRlckNvbnRleHQpOiBib29sZWFuIHtcclxuICAgICAgICBjdHguc2F2ZSgpO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG59IiwibW9kdWxlIG1pbmVydmEuc2hhcGVzLnNoYXBlLm1lYXN1cmUudGFwaW5zIHtcclxuICAgIGV4cG9ydCBmdW5jdGlvbiBjYWxjTmF0dXJhbEJvdW5kcyAoaW5wdXQ6IElJbnB1dCwgc3RhdGU6IElTdGF0ZSwgb3V0cHV0OiBJT3V0cHV0LCB0cmVlOiBjb3JlLklVcGRhdGVyVHJlZSkge1xyXG4gICAgICAgIHZhciBuYiA9IG91dHB1dC5uYXR1cmFsQm91bmRzO1xyXG4gICAgICAgIG5iLnggPSBuYi55ID0gMDtcclxuICAgICAgICBuYi53aWR0aCA9IG5iLmhlaWdodCA9IDE7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5zaGFwZXMuc2hhcGUubWVhc3VyZS50YXBpbnMge1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGRvT3ZlcnJpZGUgKGlucHV0OiBJSW5wdXQsIHN0YXRlOiBJU3RhdGUsIG91dHB1dDogSU91dHB1dCwgdHJlZTogY29yZS5JVXBkYXRlclRyZWUpIHtcclxuICAgICAgICB2YXIgZHMgPSBvdXRwdXQuZGVzaXJlZFNpemU7XHJcbiAgICAgICAgdmFyIG5iID0gb3V0cHV0Lm5hdHVyYWxCb3VuZHM7XHJcbiAgICAgICAgaWYgKGlucHV0LnN0cmV0Y2ggPT09IFN0cmV0Y2guTm9uZSkge1xyXG4gICAgICAgICAgICBkcy53aWR0aCA9IG5iLnggKyBuYi53aWR0aDtcclxuICAgICAgICAgICAgZHMuaGVpZ2h0ID0gbmIueSArIG5iLmhlaWdodDtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgYXZhaWxhYmxlID0gc3RhdGUuYXZhaWxhYmxlU2l6ZTtcclxuICAgICAgICBTaXplLmNvcHlUbyhhdmFpbGFibGUsIGRzKTtcclxuICAgICAgICBpZiAoIWlzRmluaXRlKGF2YWlsYWJsZS53aWR0aCkpXHJcbiAgICAgICAgICAgIGRzLndpZHRoID0gbmIud2lkdGg7XHJcbiAgICAgICAgaWYgKCFpc0Zpbml0ZShhdmFpbGFibGUuaGVpZ2h0KSlcclxuICAgICAgICAgICAgZHMuaGVpZ2h0ID0gbmIuaGVpZ2h0O1xyXG5cclxuICAgICAgICB2YXIgc3ggPSAwLFxyXG4gICAgICAgICAgICBzeSA9IDA7XHJcbiAgICAgICAgaWYgKG5iLndpZHRoID4gMClcclxuICAgICAgICAgICAgc3ggPSBkcy53aWR0aCAvIG5iLndpZHRoO1xyXG4gICAgICAgIGlmIChuYi5oZWlnaHQgPiAwKVxyXG4gICAgICAgICAgICBzeSA9IGRzLmhlaWdodCAvIG5iLmhlaWdodDtcclxuXHJcbiAgICAgICAgaWYgKCFpc0Zpbml0ZShhdmFpbGFibGUud2lkdGgpKVxyXG4gICAgICAgICAgICBzeCA9IHN5O1xyXG4gICAgICAgIGlmICghaXNGaW5pdGUoYXZhaWxhYmxlLmhlaWdodCkpXHJcbiAgICAgICAgICAgIHN5ID0gc3g7XHJcblxyXG4gICAgICAgIHN3aXRjaCAoaW5wdXQuc3RyZXRjaCkge1xyXG4gICAgICAgICAgICBjYXNlIFN0cmV0Y2guVW5pZm9ybTpcclxuICAgICAgICAgICAgICAgIHN4ID0gc3kgPSBNYXRoLm1pbihzeCwgc3kpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgU3RyZXRjaC5Vbmlmb3JtVG9GaWxsOlxyXG4gICAgICAgICAgICAgICAgc3ggPSBzeSA9IE1hdGgubWF4KHN4LCBzeSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBTdHJldGNoLkZpbGw6XHJcbiAgICAgICAgICAgICAgICBpZiAoIWlzRmluaXRlKGF2YWlsYWJsZS53aWR0aCkpXHJcbiAgICAgICAgICAgICAgICAgICAgc3ggPSAxLjA7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWlzRmluaXRlKGF2YWlsYWJsZS5oZWlnaHQpKVxyXG4gICAgICAgICAgICAgICAgICAgIHN5ID0gMS4wO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBkcy53aWR0aCA9IG5iLndpZHRoICogc3g7XHJcbiAgICAgICAgZHMuaGVpZ2h0ID0gbmIuaGVpZ2h0ICogc3k7XHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG59IiwibW9kdWxlIG1pbmVydmEuc2hhcGVzLnNoYXBlLnByb2Nlc3N1cC50YXBpbnMge1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGNhbGNFeHRlbnRzIChpbnB1dDogSUlucHV0LCBzdGF0ZTogSVN0YXRlLCBvdXRwdXQ6IElPdXRwdXQsIHRyZWU6IGNvcmUuSVVwZGF0ZXJUcmVlKTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKChpbnB1dC5kaXJ0eUZsYWdzICYgRGlydHlGbGFncy5Cb3VuZHMpID09PSAwKVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuXHJcbiAgICAgICAgb3V0cHV0LmV4dGVudHMueCA9IG91dHB1dC5leHRlbnRzLnkgPSAwO1xyXG4gICAgICAgIFNpemUuY29weVRvKHN0YXRlLmFjdHVhbFNpemUsIG91dHB1dC5leHRlbnRzKTtcclxuICAgICAgICBSZWN0LmNvcHlUbyhvdXRwdXQuZXh0ZW50cywgb3V0cHV0LmV4dGVudHNXaXRoQ2hpbGRyZW4pO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG59IiwibW9kdWxlIG1pbmVydmEuc2hhcGVzLnNoYXBlLnByb2Nlc3N1cC50YXBpbnMge1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGNhbGNTaGFwZVJlY3QgKGlucHV0OiBJSW5wdXQsIHN0YXRlOiBJU3RhdGUsIG91dHB1dDogSU91dHB1dCwgdHJlZTogY29yZS5JVXBkYXRlclRyZWUpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAoKGlucHV0LmRpcnR5RmxhZ3MgJiBEaXJ0eUZsYWdzLkJvdW5kcykgPT09IDApXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG5cclxuICAgICAgICB2YXIgc3IgPSBvdXRwdXQuc2hhcGVSZWN0O1xyXG4gICAgICAgIHNyLnggPSBzci55ID0gMDtcclxuICAgICAgICBTaXplLmNvcHlUbyhzdGF0ZS5hY3R1YWxTaXplLCBzcik7XHJcblxyXG4gICAgICAgIG91dHB1dC5zaGFwZUZsYWdzID0gU2hhcGVGbGFncy5FbXB0eTtcclxuICAgICAgICBpZiAoUmVjdC5pc0VtcHR5KHNyKSlcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcblxyXG4gICAgICAgIHZhciB0ID0gISFpbnB1dC5zdHJva2UgPyBpbnB1dC5zdHJva2VUaGlja25lc3MgOiAwLjA7XHJcbiAgICAgICAgaWYgKHQgPj0gc3Iud2lkdGggfHwgdCA+PSBzci5oZWlnaHQpIHtcclxuICAgICAgICAgICAgc3Iud2lkdGggPSBNYXRoLm1heChzci53aWR0aCwgdCArIHQgKiAwLjAwMSk7XHJcbiAgICAgICAgICAgIHNyLmhlaWdodCA9IE1hdGgubWF4KHNyLmhlaWdodCwgdCArIHQgKiAwLjAwMSk7XHJcbiAgICAgICAgICAgIG91dHB1dC5zaGFwZUZsYWdzID0gU2hhcGVGbGFncy5EZWdlbmVyYXRlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIG91dHB1dC5zaGFwZUZsYWdzID0gU2hhcGVGbGFncy5Ob3JtYWw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgaHQgPSB0IC8gMjtcclxuICAgICAgICBSZWN0LnNocmluayhzciwgaHQsIGh0LCBodCwgaHQpO1xyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLnNoYXBlcy5zaGFwZS5yZW5kZXIudGFwaW5zIHtcclxuICAgIGV4cG9ydCBmdW5jdGlvbiBjYWxjU2hvdWxkRHJhdyAoaW5wdXQ6IElJbnB1dCwgc3RhdGU6IElTdGF0ZSwgb3V0cHV0OiBJT3V0cHV0LCBjdHg6IGNvcmUucmVuZGVyLlJlbmRlckNvbnRleHQsIHJlZ2lvbjogUmVjdCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHN0YXRlLnNob3VsZERyYXcgPSBmYWxzZTtcclxuICAgICAgICBpZiAoaW5wdXQuc2hhcGVGbGFncyA9PT0gU2hhcGVGbGFncy5FbXB0eSlcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgaWYgKCFpbnB1dC5maWxsICYmICFpbnB1dC5zdHJva2UpXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIHN0YXRlLnNob3VsZERyYXcgPSB0cnVlO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG59IiwibW9kdWxlIG1pbmVydmEuc2hhcGVzLnNoYXBlLnJlbmRlci50YXBpbnMge1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGRvUmVuZGVyIChpbnB1dDogSUlucHV0LCBzdGF0ZTogSVN0YXRlLCBvdXRwdXQ6IElPdXRwdXQsIGN0eDogY29yZS5yZW5kZXIuUmVuZGVyQ29udGV4dCwgcmVnaW9uOiBSZWN0KTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKCFzdGF0ZS5zaG91bGREcmF3KVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAvL05vLW9wXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5zaGFwZXMuc2hhcGUucmVuZGVyLnRhcGlucyB7XHJcbiAgICBleHBvcnQgZnVuY3Rpb24gZmlsbCAoaW5wdXQ6IElJbnB1dCwgc3RhdGU6IElTdGF0ZSwgb3V0cHV0OiBJT3V0cHV0LCBjdHg6IGNvcmUucmVuZGVyLlJlbmRlckNvbnRleHQsIHJlZ2lvbjogUmVjdCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmICghc3RhdGUuc2hvdWxkRHJhdylcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgaWYgKGlucHV0LmZpbGwpXHJcbiAgICAgICAgICAgIGN0eC5maWxsRXgoaW5wdXQuZmlsbCwgaW5wdXQuc2hhcGVSZWN0LCBpbnB1dC5maWxsUnVsZSk7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5zaGFwZXMuc2hhcGUucmVuZGVyLnRhcGlucyB7XHJcbiAgICBleHBvcnQgZnVuY3Rpb24gZmluaXNoRHJhdyAoaW5wdXQ6IElJbnB1dCwgc3RhdGU6IElTdGF0ZSwgb3V0cHV0OiBJT3V0cHV0LCBjdHg6IGNvcmUucmVuZGVyLlJlbmRlckNvbnRleHQsIHJlZ2lvbjogUmVjdCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmICghc3RhdGUuc2hvdWxkRHJhdylcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgY3R4LnJlc3RvcmUoKTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLnNoYXBlcy5zaGFwZS5yZW5kZXIudGFwaW5zIHtcclxuICAgIGV4cG9ydCBmdW5jdGlvbiBwcmVwYXJlRHJhdyAoaW5wdXQ6IElJbnB1dCwgc3RhdGU6IElTdGF0ZSwgb3V0cHV0OiBJT3V0cHV0LCBjdHg6IGNvcmUucmVuZGVyLlJlbmRlckNvbnRleHQsIHJlZ2lvbjogUmVjdCwgdHJlZTogY29yZS5JVXBkYXRlclRyZWUpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAoIXN0YXRlLnNob3VsZERyYXcpXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIGN0eC5zYXZlKCk7XHJcbiAgICAgICAgY29yZS5oZWxwZXJzLnJlbmRlckxheW91dENsaXAoY3R4LCBpbnB1dCwgdHJlZSk7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5zaGFwZXMuc2hhcGUucmVuZGVyLnRhcGlucyB7XHJcbiAgICB2YXIgY2Fwczogc3RyaW5nW10gPSBbXHJcbiAgICAgICAgXCJidXR0XCIsIC8vZmxhdFxyXG4gICAgICAgIFwic3F1YXJlXCIsIC8vc3F1YXJlXHJcbiAgICAgICAgXCJyb3VuZFwiLCAvL3JvdW5kXHJcbiAgICAgICAgXCJidXR0XCIgLy90cmlhbmdsZVxyXG4gICAgXTtcclxuICAgIHZhciBqb2luczogc3RyaW5nW10gPSBbXHJcbiAgICAgICAgXCJtaXRlclwiLFxyXG4gICAgICAgIFwiYmV2ZWxcIixcclxuICAgICAgICBcInJvdW5kXCJcclxuICAgIF07XHJcblxyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHN0cm9rZSAoaW5wdXQ6IElJbnB1dCwgc3RhdGU6IElTdGF0ZSwgb3V0cHV0OiBJT3V0cHV0LCBjdHg6IGNvcmUucmVuZGVyLlJlbmRlckNvbnRleHQsIHJlZ2lvbjogUmVjdCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmICghc3RhdGUuc2hvdWxkRHJhdylcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcblxyXG4gICAgICAgIHZhciBzdHJva2UgPSBpbnB1dC5zdHJva2U7XHJcbiAgICAgICAgaWYgKCFzdHJva2UgfHwgIShpbnB1dC5zdHJva2VUaGlja25lc3MgPiAwKSlcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcblxyXG4gICAgICAgIHZhciByYXcgPSBjdHgucmF3O1xyXG4gICAgICAgIHJhdy5saW5lV2lkdGggPSBpbnB1dC5zdHJva2VUaGlja25lc3M7XHJcbiAgICAgICAgcmF3LmxpbmVDYXAgPSBjYXBzW2lucHV0LnN0cm9rZVN0YXJ0TGluZUNhcCB8fCBpbnB1dC5zdHJva2VFbmRMaW5lQ2FwIHx8IDBdIHx8IGNhcHNbMF07XHJcbiAgICAgICAgcmF3LmxpbmVKb2luID0gam9pbnNbaW5wdXQuc3Ryb2tlTGluZUpvaW4gfHwgMF0gfHwgam9pbnNbMF07XHJcbiAgICAgICAgcmF3Lm1pdGVyTGltaXQgPSBpbnB1dC5zdHJva2VNaXRlckxpbWl0O1xyXG5cclxuICAgICAgICBzdHJva2Uuc2V0dXBCcnVzaChyYXcsIGlucHV0LnNoYXBlUmVjdCk7XHJcbiAgICAgICAgcmF3LnN0cm9rZVN0eWxlID0gc3Ryb2tlLnRvSHRtbDVPYmplY3QoKTtcclxuICAgICAgICByYXcuc3Ryb2tlKCk7XHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG59IiwibW9kdWxlIG1pbmVydmEuY29udHJvbHMuYm9yZGVyLnJlbmRlci50YXBpbnMuc2hpbSB7XHJcbiAgICBleHBvcnQgZnVuY3Rpb24gY2FsY0JhbGFuY2VkIChpbnB1dDogSUlucHV0LCBzdGF0ZTogSVNoaW1TdGF0ZSwgb3V0cHV0OiBJT3V0cHV0LCBjdHg6IGNvcmUucmVuZGVyLlJlbmRlckNvbnRleHQsIHJlZ2lvbjogUmVjdCwgdHJlZTogY29yZS5JVXBkYXRlclRyZWUpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAoIXN0YXRlLnNob3VsZFJlbmRlciB8fCBUaGlja25lc3MuaXNFbXB0eShpbnB1dC5ib3JkZXJUaGlja25lc3MpKVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuXHJcbiAgICAgICAgaWYgKFRoaWNrbmVzcy5pc0JhbGFuY2VkKGlucHV0LmJvcmRlclRoaWNrbmVzcykpIHtcclxuICAgICAgICAgICAgdmFyIGljciA9IHN0YXRlLmlubmVyQ29ybmVyUmFkaXVzO1xyXG4gICAgICAgICAgICB2YXIgb2NyID0gc3RhdGUub3V0ZXJDb3JuZXJSYWRpdXM7XHJcbiAgICAgICAgICAgIHZhciBtY3IgPSBzdGF0ZS5taWRkbGVDb3JuZXJSYWRpdXM7XHJcbiAgICAgICAgICAgIG1jci50b3BMZWZ0ID0gKGljci50b3BMZWZ0ICsgb2NyLnRvcExlZnQpIC8gMi4wO1xyXG4gICAgICAgICAgICBtY3IudG9wUmlnaHQgPSAoaWNyLnRvcFJpZ2h0ICsgb2NyLnRvcFJpZ2h0KSAvIDIuMDtcclxuICAgICAgICAgICAgbWNyLmJvdHRvbVJpZ2h0ID0gKGljci5ib3R0b21SaWdodCArIG9jci5ib3R0b21SaWdodCkgLyAyLjA7XHJcbiAgICAgICAgICAgIG1jci5ib3R0b21MZWZ0ID0gKGljci5ib3R0b21MZWZ0ICsgb2NyLmJvdHRvbUxlZnQpIC8gMi4wO1xyXG4gICAgICAgICAgICBSZWN0LmNvcHlUbyhpbnB1dC5leHRlbnRzLCBzdGF0ZS5zdHJva2VFeHRlbnRzKTtcclxuICAgICAgICAgICAgdmFyIGJ0ID0gaW5wdXQuYm9yZGVyVGhpY2tuZXNzO1xyXG4gICAgICAgICAgICBSZWN0LnNocmluayhzdGF0ZS5zdHJva2VFeHRlbnRzLCBidC5sZWZ0IC8gMi4wLCBidC50b3AgLyAyLjAsIGJ0LnJpZ2h0IC8gMi4wLCBidC5ib3R0b20gLyAyLjApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgbWluZXJ2YS5jb250cm9scy5ib3JkZXIucmVuZGVyLnRhcGlucy5zaGltIHtcclxuICAgIGV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQYXR0ZXJuIChpbnB1dDogSUlucHV0LCBzdGF0ZTogSVNoaW1TdGF0ZSwgb3V0cHV0OiBJT3V0cHV0LCBjdHg6IGNvcmUucmVuZGVyLlJlbmRlckNvbnRleHQsIHJlZ2lvbjogUmVjdCwgdHJlZTogY29yZS5JVXBkYXRlclRyZWUpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAoIXN0YXRlLnNob3VsZFJlbmRlciB8fCBUaGlja25lc3MuaXNCYWxhbmNlZChpbnB1dC5ib3JkZXJUaGlja25lc3MpKVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuXHJcbiAgICAgICAgaWYgKCFzdGF0ZS5wYXR0ZXJuKSB7XHJcbiAgICAgICAgICAgIHN0YXRlLnBhdHRlcm4gPSBjcmVhdGVCb3JkZXJQYXR0ZXJuKGlucHV0LmJvcmRlckJydXNoLCBpbnB1dC5leHRlbnRzLCBzdGF0ZS5maWxsRXh0ZW50cywgc3RhdGUub3V0ZXJDb3JuZXJSYWRpdXMsIHN0YXRlLmlubmVyQ29ybmVyUmFkaXVzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciB0ZW1wQ3R4OiBjb3JlLnJlbmRlci5SZW5kZXJDb250ZXh0O1xyXG5cclxuICAgIGZ1bmN0aW9uIGNyZWF0ZUJvcmRlclBhdHRlcm4gKGJvcmRlckJydXNoOiBJQnJ1c2gsIGV4dGVudHM6IFJlY3QsIGZpbGxFeHRlbnRzOiBSZWN0LCBvYTogSUNvcm5lclJhZGl1cywgaWE6IElDb3JuZXJSYWRpdXMpOiBDYW52YXNQYXR0ZXJuIHtcclxuICAgICAgICB0ZW1wQ3R4ID0gdGVtcEN0eCB8fCBuZXcgY29yZS5yZW5kZXIuUmVuZGVyQ29udGV4dCg8Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEPmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpLmdldENvbnRleHQoJzJkJykpO1xyXG4gICAgICAgIHZhciByYXcgPSB0ZW1wQ3R4LnJhdztcclxuICAgICAgICBTaXplLmNvcHlUbyhleHRlbnRzLCByYXcuY2FudmFzKTtcclxuICAgICAgICByYXcuYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgaGVscGVycy5kcmF3Qm9yZGVyUmVjdChyYXcsIGV4dGVudHMsIG9hKTtcclxuICAgICAgICB0ZW1wQ3R4LmZpbGxFeChib3JkZXJCcnVzaCwgZXh0ZW50cyk7XHJcbiAgICAgICAgcmF3Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9IFwieG9yXCI7XHJcbiAgICAgICAgcmF3LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGhlbHBlcnMuZHJhd0JvcmRlclJlY3QocmF3LCBmaWxsRXh0ZW50cywgaWEpO1xyXG4gICAgICAgIHJhdy5maWxsKCk7XHJcbiAgICAgICAgcmV0dXJuIHJhdy5jcmVhdGVQYXR0ZXJuKHJhdy5jYW52YXMsIFwibm8tcmVwZWF0XCIpO1xyXG4gICAgfVxyXG59XHJcbiIsIm1vZHVsZSBtaW5lcnZhLmNvbnRyb2xzLmJvcmRlci5yZW5kZXIudGFwaW5zLnNoaW0ge1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGRvUmVuZGVyIChpbnB1dDogSUlucHV0LCBzdGF0ZTogSVNoaW1TdGF0ZSwgb3V0cHV0OiBJT3V0cHV0LCBjdHg6IGNvcmUucmVuZGVyLlJlbmRlckNvbnRleHQsIHJlZ2lvbjogUmVjdCwgdHJlZTogY29yZS5JVXBkYXRlclRyZWUpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAoIXN0YXRlLnNob3VsZFJlbmRlcilcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgY3R4LnNhdmUoKTtcclxuICAgICAgICBjb3JlLmhlbHBlcnMucmVuZGVyTGF5b3V0Q2xpcChjdHgsIGlucHV0LCB0cmVlKTtcclxuXHJcbiAgICAgICAgaWYgKGlucHV0LmJhY2tncm91bmQpXHJcbiAgICAgICAgICAgIHJlbmRlckJhY2tncm91bmQoY3R4LCBpbnB1dCwgc3RhdGUpO1xyXG5cclxuICAgICAgICBpZiAoc3RhdGUucGF0dGVybikge1xyXG4gICAgICAgICAgICByZW5kZXJQYXR0ZXJuKGN0eCwgaW5wdXQsIHN0YXRlKTtcclxuICAgICAgICB9IGVsc2UgaWYgKGlucHV0LmJvcmRlckJydXNoKSB7XHJcbiAgICAgICAgICAgIHJlbmRlckJvcmRlcihjdHgsIGlucHV0LCBzdGF0ZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjdHgucmVzdG9yZSgpO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHJlbmRlclBhdHRlcm4gKGN0eDogY29yZS5yZW5kZXIuUmVuZGVyQ29udGV4dCwgaW5wdXQ6IElJbnB1dCwgc3RhdGU6IElTaGltU3RhdGUpIHtcclxuICAgICAgICB2YXIgcmF3ID0gY3R4LnJhdztcclxuICAgICAgICByYXcuYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgcmF3LmZpbGxTdHlsZSA9IHN0YXRlLnBhdHRlcm47XHJcbiAgICAgICAgaGVscGVycy5kcmF3Qm9yZGVyUmVjdChyYXcsIGlucHV0LmV4dGVudHMsIHN0YXRlLm91dGVyQ29ybmVyUmFkaXVzKTtcclxuICAgICAgICByYXcuZmlsbCgpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHJlbmRlckJhY2tncm91bmQgKGN0eDogY29yZS5yZW5kZXIuUmVuZGVyQ29udGV4dCwgaW5wdXQ6IElJbnB1dCwgc3RhdGU6IElTaGltU3RhdGUpIHtcclxuICAgICAgICBjdHgucmF3LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGhlbHBlcnMuZHJhd0JvcmRlclJlY3QoY3R4LnJhdywgc3RhdGUuZmlsbEV4dGVudHMsIHN0YXRlLmlubmVyQ29ybmVyUmFkaXVzKTtcclxuICAgICAgICBjdHguZmlsbEV4KGlucHV0LmJhY2tncm91bmQsIHN0YXRlLmZpbGxFeHRlbnRzKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiByZW5kZXJCb3JkZXIgKGN0eDogY29yZS5yZW5kZXIuUmVuZGVyQ29udGV4dCwgaW5wdXQ6IElJbnB1dCwgc3RhdGU6IElTaGltU3RhdGUpIHtcclxuICAgICAgICB2YXIgcmF3ID0gY3R4LnJhdztcclxuICAgICAgICByYXcuYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgaGVscGVycy5kcmF3Qm9yZGVyUmVjdChyYXcsIHN0YXRlLnN0cm9rZUV4dGVudHMsIHN0YXRlLm1pZGRsZUNvcm5lclJhZGl1cyk7XHJcbiAgICAgICAgcmF3LmxpbmVXaWR0aCA9IGlucHV0LmJvcmRlclRoaWNrbmVzcy5sZWZ0O1xyXG4gICAgICAgIHJhdy5saW5lQ2FwID0gXCJidXR0XCI7XHJcbiAgICAgICAgcmF3LmxpbmVKb2luID0gXCJtaXRlclwiO1xyXG4gICAgICAgIHJhdy5taXRlckxpbWl0ID0gMDtcclxuICAgICAgICBpbnB1dC5ib3JkZXJCcnVzaC5zZXR1cEJydXNoKHJhdywgc3RhdGUuc3Ryb2tlRXh0ZW50cyk7XHJcbiAgICAgICAgcmF3LnN0cm9rZVN0eWxlID0gaW5wdXQuYm9yZGVyQnJ1c2gudG9IdG1sNU9iamVjdCgpO1xyXG4gICAgICAgIHJhdy5zdHJva2UoKTtcclxuICAgIH1cclxufSIsIm1vZHVsZSBtaW5lcnZhLmNvbnRyb2xzLmJvcmRlci5yZW5kZXIudGFwaW5zLnNoaW0ge1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGludmFsaWRhdGVQYXR0ZXJuIChpbnB1dDogSUlucHV0LCBzdGF0ZTogSVNoaW1TdGF0ZSwgb3V0cHV0OiBJT3V0cHV0LCBjdHg6IGNvcmUucmVuZGVyLlJlbmRlckNvbnRleHQsIHJlZ2lvbjogUmVjdCwgdHJlZTogY29yZS5JVXBkYXRlclRyZWUpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAoIXN0YXRlLnNob3VsZFJlbmRlcilcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcblxyXG4gICAgICAgIGlmIChUaGlja25lc3MuaXNFbXB0eShpbnB1dC5ib3JkZXJUaGlja25lc3MpKSB7XHJcbiAgICAgICAgICAgIHN0YXRlLnBhdHRlcm4gPSBudWxsO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghc3RhdGUub2xkTWV0cmljcykge1xyXG4gICAgICAgICAgICBzdGF0ZS5vbGRNZXRyaWNzID0ge307XHJcbiAgICAgICAgICAgIHNldE9sZE1ldHJpY3MoaW5wdXQsIHN0YXRlLCBzdGF0ZS5vbGRNZXRyaWNzKTtcclxuICAgICAgICAgICAgc3RhdGUucGF0dGVybiA9IG51bGw7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGRpZE1ldHJpY3NDaGFuZ2UoaW5wdXQsIHN0YXRlLCBzdGF0ZS5vbGRNZXRyaWNzKSlcclxuICAgICAgICAgICAgc3RhdGUucGF0dGVybiA9IG51bGw7XHJcblxyXG4gICAgICAgIHNldE9sZE1ldHJpY3MoaW5wdXQsIHN0YXRlLCBzdGF0ZS5vbGRNZXRyaWNzKTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBzZXRPbGRNZXRyaWNzIChpbnB1dDogSUlucHV0LCBzdGF0ZTogSVN0YXRlLCBtZXRyaWNzOiBhbnkpIHtcclxuICAgICAgICBtZXRyaWNzLmJvcmRlckJydXNoID0gaW5wdXQuYm9yZGVyQnJ1c2g7XHJcbiAgICAgICAgbWV0cmljcy5ib3JkZXJUaGlja25lc3MgPSBpbnB1dC5ib3JkZXJUaGlja25lc3M7XHJcbiAgICAgICAgbWV0cmljcy5leHRlbnRzID0gaW5wdXQuZXh0ZW50cztcclxuICAgICAgICBtZXRyaWNzLmZpbGxFeHRlbnRzID0gc3RhdGUuZmlsbEV4dGVudHM7XHJcbiAgICAgICAgbWV0cmljcy5vdXRlckNvcm5lclJhZGl1cyA9IHN0YXRlLm91dGVyQ29ybmVyUmFkaXVzO1xyXG4gICAgICAgIG1ldHJpY3MuaW5uZXJDb3JuZXJSYWRpdXMgPSBzdGF0ZS5pbm5lckNvcm5lclJhZGl1cztcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBkaWRNZXRyaWNzQ2hhbmdlIChpbnB1dDogSUlucHV0LCBzdGF0ZTogSVN0YXRlLCBtZXRyaWNzOiBhbnkpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gbWV0cmljcy5ib3JkZXJCcnVzaCAhPT0gaW5wdXQuYm9yZGVyQnJ1c2hcclxuICAgICAgICAgICAgfHwgIVJlY3QuaXNFcXVhbChtZXRyaWNzLmV4dGVudHMsIGlucHV0LmV4dGVudHMpXHJcbiAgICAgICAgICAgIHx8ICFSZWN0LmlzRXF1YWwobWV0cmljcy5maWxsRXh0ZW50cywgc3RhdGUuZmlsbEV4dGVudHMpXHJcbiAgICAgICAgICAgIHx8ICFDb3JuZXJSYWRpdXMuaXNFcXVhbChtZXRyaWNzLm91dGVyQ29ybmVyUmFkaXVzLCBzdGF0ZS5vdXRlckNvcm5lclJhZGl1cylcclxuICAgICAgICAgICAgfHwgIUNvcm5lclJhZGl1cy5pc0VxdWFsKG1ldHJpY3MuaW5uZXJDb3JuZXJSYWRpdXMsIHN0YXRlLmlubmVyQ29ybmVyUmFkaXVzKTtcclxuICAgIH1cclxufSJdLCJzb3VyY2VSb290IjoiLi9zcmMifQ==

{"version":3,"sources":["path/segments/arcTo.ts","_Version.ts","Alignment.ts","CornerRadius.ts","Enums.ts","Flags.ts","Font.ts","FontHeight.ts","IBrush.ts","ISizeUpdater.ts","IWalker.ts","Point.ts","mat/vec2.ts","Rect.ts","Size.ts","Thickness.ts","Vector.ts","Visibility.ts","findElementsInHostSpace.ts","layoutError.ts","natural.ts","singleton.ts","zoom.ts","pipe/ITriPipe.ts","pipe/PipeDef.ts","minerva.js","pipe/TriPipeDef.ts","core/Updater.ts","core/UpdaterTree.ts","core/helpers.ts","core/react.ts","core/arrange/ArrangeBinder.ts","core/arrange/ArrangePipeDef.ts","core/draft/DraftPipeDef.ts","core/hittest/HitTestPipeDef.ts","core/measure/MeasureBinder.ts","core/measure/MeasurePipeDef.ts","core/processdown/ProcessDownPipeDef.ts","core/processup/ProcessUpPipeDef.ts","core/render/RenderContext.ts","core/render/RenderContextSize.ts","core/render/RenderPipeDef.ts","core/sizing/SizingPipeDef.ts","core/arrange/tapins/applyRounding.ts","core/arrange/tapins/buildLayoutClip.ts","core/arrange/tapins/buildLayoutXform.ts","core/arrange/tapins/buildRenderSize.ts","core/arrange/tapins/calcFlip.ts","core/arrange/tapins/calcStretched.ts","core/arrange/tapins/calcVisualOffset.ts","core/arrange/tapins/checkNeedArrange.ts","core/arrange/tapins/completeOverride.ts","core/arrange/tapins/doOverride.ts","core/arrange/tapins/invalidateFuture.ts","core/arrange/tapins/prepareOverride.ts","core/arrange/tapins/validateFinalRect.ts","core/arrange/tapins/validateVisibility.ts","core/draft/tapins/arrange.ts","core/draft/tapins/determinePhase.ts","core/draft/tapins/flushPrevious.ts","core/draft/tapins/measure.ts","core/draft/tapins/notifyResize.ts","core/draft/tapins/prepareArrange.ts","core/draft/tapins/prepareMeasure.ts","core/draft/tapins/prepareSizing.ts","core/draft/tapins/sizing.ts","core/hittest/tapins/canHit.ts","core/hittest/tapins/canHitInside.ts","core/hittest/tapins/completeCtx.ts","core/hittest/tapins/insideChildren.ts","core/hittest/tapins/insideClip.ts","core/hittest/tapins/insideLayoutClip.ts","core/hittest/tapins/insideObject.ts","core/hittest/tapins/prepareCtx.ts","core/measure/tapins/applyTemplate.ts","core/measure/tapins/checkNeedMeasure.ts","core/measure/tapins/completeOverride.ts","core/measure/tapins/doOverride.ts","core/measure/tapins/finishDesired.ts","core/measure/tapins/invalidateFuture.ts","core/measure/tapins/prepareOverride.ts","core/measure/tapins/validate.ts","core/measure/tapins/validateVisibility.ts","core/processdown/tapins/calcAbsoluteXform.ts","core/processdown/tapins/calcRenderXform.ts","core/processdown/tapins/calcXformOrigin.ts","core/processdown/tapins/processHitTestVisibility.ts","core/processdown/tapins/processLayoutClip.ts","core/processdown/tapins/processLocalXform.ts","core/processdown/tapins/processRenderVisibility.ts","core/processdown/tapins/processXform.ts","core/processdown/tapins/propagateDirtyToChildren.ts","core/processup/tapins/calcActualSize.ts","core/processup/tapins/calcExtents.ts","core/processup/tapins/calcPaintBounds.ts","core/processup/tapins/processBounds.ts","core/processup/tapins/processInvalidate.ts","core/processup/tapins/processNewBounds.ts","core/render/tapins/applyClip.ts","core/render/tapins/doRender.ts","core/render/tapins/postRender.ts","core/render/tapins/preRender.ts","core/render/tapins/prepareContext.ts","core/render/tapins/renderChildren.ts","core/render/tapins/restoreContext.ts","core/render/tapins/validate.ts","core/render/tapins/validateRegion.ts","core/sizing/tapins/calcUseRender.ts","core/sizing/tapins/computeActual.ts","controls/border/arrange/BorderArrangePipeDef.ts","controls/border/hittest/BorderHitTestPipeDef.ts","controls/border/measure/BorderMeasurePipeDef.ts","controls/border/render/BorderRenderPipeDef.ts","controls/border/render/ShimBorderRenderPipeDef.ts","controls/panel/arrange/PanelArrangePipeDef.ts","controls/canvas/arrange/CanvasArrangePipeDef.ts","controls/panel/measure/PanelMeasurePipeDef.ts","controls/canvas/measure/CanvasMeasurePipeDef.ts","controls/canvas/processdown/CanvasProcessDownPipeDef.ts","controls/canvas/processup/CanvasProcessUpPipeDef.ts","controls/control/hittest/ControlHitTestPipeDef.ts","controls/grid/arrange/GridArrangePipeDef.ts","controls/grid/measure/GridChildPlacement.ts","controls/grid/measure/GridChildShape.ts","controls/grid/measure/GridMeasurePipeDef.ts","controls/grid/measure/GridShape.ts","controls/grid/helpers/allocateDesiredSize.ts","controls/grid/helpers/assignSize.ts","controls/grid/helpers/expandStarCols.ts","controls/grid/helpers/expandStarRows.ts","controls/panel/processup/PanelProcessUpPipeDef.ts","controls/grid/processup/GridProcessUpPipeDef.ts","controls/panel/render/PanelRenderPipeDef.ts","controls/grid/render/GridRenderPipeDef.ts","controls/image/hittest/ImageHitTestPipeDef.ts","controls/image/arrange/ImageArrangePipeDef.ts","controls/image/measure/ImageMeasurePipeDef.ts","controls/image/processdown/ImageProcessDownPipeDef.ts","controls/image/render/ImageRenderPipeDef.ts","controls/overlay/hittest/OverlayHitTestPipeDef.ts","controls/overlay/processup/OverlayProcessUpPipeDef.ts","controls/panel/hittest/PanelHitTestPipeDef.ts","controls/popup/hittest/PopupHitTestPipeDef.ts","controls/popup/processdown/PopupProcessDownPipeDef.ts","controls/popup/processup/PopupProcessUpPipeDef.ts","controls/scrollcontentpresenter/arrange/ScrollContentPresenterArrangePipeDef.ts","controls/scrollcontentpresenter/measure/ScrollContentPresenterMeasurePipeDef.ts","controls/scrollcontentpresenter/render/ScrollContentPresenterRenderPipeDef.ts","controls/stackpanel/arrange/StackPanelArrangePipeDef.ts","controls/stackpanel/measure/StackPanelMeasurePipeDef.ts","controls/textblock/arrange/TextBlockArrangePipeDef.ts","controls/textblock/hittest/TextBlockHitTestPipeDef.ts","controls/textblock/measure/TextBlockMeasurePipeDef.ts","controls/textblock/processup/TextBlockProcessUpPipeDef.ts","controls/textblock/render/TextBlockRenderPipeDef.ts","controls/textboxview/arrange/TextBoxViewArrangePipeDef.ts","controls/textboxview/hittest/TextBoxViewHitTestPipeDef.ts","controls/textboxview/measure/TextBoxViewMeasurePipeDef.ts","controls/textboxview/processup/TextBoxViewProcessUpPipeDef.ts","controls/textboxview/render/TextBoxViewRenderPipeDef.ts","controls/usercontrol/arrange/UserControlArrangePipeDef.ts","controls/usercontrol/measure/UserControlMeasurePipeDef.ts","controls/usercontrol/processdown/UserControlProcessDownPipeDef.ts","controls/virtualizingstackpanel/arrange/VirtualizingStackPanelArrangePipeDef.ts","controls/virtualizingstackpanel/measure/VirtualizingStackPanelMeasurePipeDef.ts","shapes/ellipse/helpers/draw.ts","shapes/shape/hittest/ShapeHitTestPipeDef.ts","shapes/ellipse/hittest/EllipseHitTestPipeDef.ts","shapes/shape/measure/ShapeMeasurePipeDef.ts","shapes/ellipse/measure/EllipseMeasurePipeDef.ts","shapes/shape/render/ShapeRenderPipeDef.ts","shapes/ellipse/render/EllipseRenderPipeDef.ts","shapes/path/measure/PathMeasurePipeDef.ts","shapes/line/measure/LineMeasurePipeDef.ts","shapes/path/hittest/PathHitTestPipeDef.ts","shapes/shape/processup/ShapeProcessUpPipeDef.ts","shapes/path/processup/PathProcessUpPipeDef.ts","shapes/path/render/PathRenderPipeDef.ts","shapes/polyline/measure/PolylineMeasurePipeDef.ts","shapes/rectangle/helpers/draw.ts","shapes/rectangle/hittest/RectangleHitTestPipeDef.ts","shapes/rectangle/measure/RectangleMeasurePipeDef.ts","shapes/rectangle/render/RectangleRenderPipeDef.ts","shapes/shape/arrange/ShapeArrangePipeDef.ts","controls/border/render/helpers/drawBorderRect.ts","controls/border/render/tapins/calcInnerOuter.ts","controls/border/render/tapins/calcShouldRender.ts","controls/border/render/tapins/doRender.ts","controls/canvas/arrange/tapins/buildLayoutClip.ts","controls/canvas/arrange/tapins/doOverride.ts","controls/canvas/measure/tapins/doOverride.ts","controls/canvas/processup/tapins/calcPaintBounds.ts","controls/grid/arrange/tapins/calcConsumed.ts","controls/grid/arrange/tapins/doOverride.ts","controls/grid/arrange/tapins/restoreMeasureResults.ts","controls/grid/arrange/tapins/setActuals.ts","controls/grid/measure/tapins/buildShape.ts","controls/grid/measure/tapins/createDoOverridePass.ts","controls/grid/measure/tapins/doOverride.ts","controls/grid/measure/tapins/ensureColMatrix.ts","controls/grid/measure/tapins/ensureRowMatrix.ts","controls/grid/GridUnitType.ts","controls/grid/measure/tapins/prepareColMatrix.ts","controls/grid/measure/tapins/prepareRowMatrix.ts","controls/grid/measure/tapins/saveMeasureResults.ts","controls/grid/processup/tapins/calcExtents.ts","controls/grid/processup/tapins/preCalcExtents.ts","controls/image/hittest/tapins/canHitInside.ts","controls/image/hittest/tapins/insideChildren.ts","controls/image/hittest/tapins/insideStretch.ts","controls/image/arrange/tapins/calcImageBounds.ts","controls/image/arrange/tapins/calcStretch.ts","controls/image/arrange/tapins/doOverride.ts","controls/image/arrange/tapins/invalidateMetrics.ts","controls/image/measure/tapins/calcImageBounds.ts","controls/image/measure/tapins/calcStretch.ts","controls/image/measure/tapins/doOverride.ts","controls/image/processdown/tapins/calcImageTransform.ts","controls/image/processdown/tapins/calcOverlap.ts","controls/image/processdown/tapins/checkNeedImageMetrics.ts","controls/image/processdown/tapins/prepareImageMetrics.ts","controls/image/render/tapins/doRender.ts","controls/panel/arrange/tapins/doOverride.ts","controls/panel/processup/tapins/preCalcExtents.ts","controls/popup/processdown/tapins/postProcessXform.ts","controls/popup/processdown/tapins/preProcessXform.ts","controls/scrollcontentpresenter/arrange/tapins/doOverride.ts","controls/scrollcontentpresenter/arrange/tapins/updateClip.ts","controls/scrollcontentpresenter/arrange/tapins/updateExtents.ts","controls/scrollcontentpresenter/measure/tapins/doOverride.ts","controls/scrollcontentpresenter/measure/tapins/finishDoOverride.ts","controls/scrollcontentpresenter/measure/tapins/updateExtents.ts","controls/stackpanel/arrange/tapins/doHorizontal.ts","controls/stackpanel/arrange/tapins/doOverride.ts","controls/stackpanel/arrange/tapins/doVertical.ts","controls/stackpanel/measure/tapins/doHorizontal.ts","controls/stackpanel/measure/tapins/doOverride.ts","controls/stackpanel/measure/tapins/doVertical.ts","controls/usercontrol/arrange/tapins/doOverride.ts","controls/usercontrol/arrange/tapins/preOverride.ts","controls/usercontrol/measure/tapins/doOverride.ts","controls/usercontrol/measure/tapins/postOverride.ts","controls/usercontrol/measure/tapins/preOverride.ts","controls/virtualizingstackpanel/arrange/tapins/doHorizontal.ts","controls/virtualizingstackpanel/arrange/tapins/doOverride.ts","controls/virtualizingstackpanel/arrange/tapins/doVertical.ts","controls/virtualizingstackpanel/measure/tapins/doHorizontal.ts","controls/virtualizingstackpanel/measure/tapins/doOverride.ts","controls/virtualizingstackpanel/measure/tapins/doVertical.ts","shapes/path/processup/tapins/calcActualSize.ts","shapes/path/processup/tapins/calcExtents.ts","shapes/path/processup/tapins/calcShapeRect.ts","shapes/path/processup/tapins/calcStretch.ts","shapes/path/render/tapins/doRender.ts","shapes/path/render/tapins/fill.ts","shapes/shape/arrange/tapins/doOverride.ts","shapes/shape/hittest/tapins/canHitInside.ts","shapes/shape/hittest/tapins/canHitShape.ts","shapes/shape/hittest/tapins/drawShape.ts","shapes/shape/hittest/tapins/finishShape.ts","shapes/shape/hittest/tapins/insideChildren.ts","shapes/shape/hittest/tapins/prepareShape.ts","shapes/shape/measure/tapins/calcNaturalBounds.ts","shapes/shape/measure/tapins/doOverride.ts","shapes/shape/processup/tapins/calcExtents.ts","shapes/shape/processup/tapins/calcShapeRect.ts","shapes/shape/render/tapins/calcShouldDraw.ts","shapes/shape/render/tapins/doRender.ts","shapes/shape/render/tapins/fill.ts","shapes/shape/render/tapins/finishDraw.ts","shapes/shape/render/tapins/prepareDraw.ts","shapes/shape/render/tapins/stroke.ts","controls/border/render/tapins/shims/calcBalanced.ts","controls/border/render/tapins/shims/createPattern.ts","controls/border/render/tapins/shims/doRender.ts","controls/border/render/tapins/shims/invalidatePattern.ts","anon/AnonymousUpdater.ts","engine/Surface.ts","engine/draft.ts","engine/process.ts","mat/mat3.ts","mat/mat4.ts","mat/transform4.ts","mat/vec4.ts","path/Path.ts","polyfill/perfex.ts","text/DocumentLayoutDef.ts","text/IDocumentLayout.ts","text/TextUpdater.ts","anon/arrange/AnonymousArrangePipeDef.ts","anon/measure/AnonymousMeasurePipeDef.ts","controls/border/BorderUpdater.ts","controls/border/BorderUpdaterTree.ts","controls/panel/PanelUpdater.ts","controls/canvas/CanvasUpdater.ts","controls/control/ControlUpdater.ts","controls/control/ControlUpdaterTree.ts","controls/grid/GridUpdater.ts","controls/grid/IGridState.ts","controls/grid/Segment.ts","controls/image/ImageUpdater.ts","controls/overlay/OverlayUpdater.ts","controls/overlay/OverlayUpdaterTree.ts","controls/panel/PanelUpdaterTree.ts","controls/popup/PopupUpdater.ts","controls/popup/PopupUpdaterTree.ts","controls/scrollcontentpresenter/ScrollContentPresenterUpdater.ts","controls/scrollcontentpresenter/helpers.ts","controls/stackpanel/StackPanelUpdater.ts","controls/textblock/TextBlockUpdater.ts","controls/textblock/TextBlockUpdaterTree.ts","controls/textboxview/Blinker.ts","controls/textboxview/TextBoxViewUpdater.ts","controls/textboxview/TextBoxViewUpdaterTree.ts","controls/usercontrol/UserControlUpdater.ts","controls/video/VideoUpdater.ts","controls/virtualizingpanel/VirtualizingPanelUpdater.ts","controls/virtualizingpanel/VirtualizingPanelUpdaterTree.ts","controls/virtualizingstackpanel/VirtualizingStackPanelUpdater.ts","path/segments/arc.ts","path/segments/close.ts","path/segments/cubicBezier.ts","path/segments/ellipse.ts","path/segments/ellipticalArc.ts","path/segments/line.ts","path/segments/move.ts","path/segments/quadraticBezier.ts","path/segments/rect.ts","path/segments/roundedRect.ts","polyfill/CanvasRenderingContext2D/backingStorePixelRatio.ts","polyfill/CanvasRenderingContext2D/ellipse.ts","polyfill/CanvasRenderingContext2D/isPointInStroke.ts","shapes/shape/ShapeUpdater.ts","shapes/ellipse/EllipseUpdater.ts","shapes/path/PathUpdater.ts","shapes/line/LineUpdater.ts","shapes/path/AnonPathGeometry.ts","shapes/polyline/PolylineUpdater.ts","shapes/polygon/PolygonUpdater.ts","shapes/rectangle/RectangleUpdater.ts","text/layout/Cluster.ts","text/layout/Line.ts","text/layout/Run.ts","text/run/RunLayoutDef.ts","text/run/doLayoutNoWrap.ts","text/run/doLayoutWrap.ts"],"names":["radToDegrees","rad","minerva","minerva.HorizontalAlignment","minerva.VerticalAlignment","minerva.CornerRadius","minerva.CornerRadius.constructor","minerva.CornerRadius.isEmpty","minerva.CornerRadius.isEqual","minerva.CornerRadius.clear","minerva.CornerRadius.copyTo","minerva.Orientation","minerva.PenLineJoin","minerva.PenLineCap","minerva.FillRule","minerva.Stretch","minerva.FlowDirection","minerva.LineStackingStrategy","minerva.TextAlignment","minerva.TextTrimming","minerva.TextWrapping","minerva.TextDecorations","minerva.FontWeight","minerva.SweepDirection","minerva.DirtyFlags","minerva.UIFlags","minerva.ShapeFlags","minerva.translateFont","minerva.Font","minerva.Font.constructor","minerva.Font.mergeInto","minerva.Font.toHtml5Object","minerva.Font.getHeight","minerva.Font.getAscender","minerva.Font.getDescender","minerva.fontHeight","minerva.fontHeight.get","minerva.fontHeight.measure","minerva.FakeBrush","minerva.FakeBrush.constructor","minerva.FakeBrush.isTransparent","minerva.FakeBrush.toHtml5Object","minerva.WalkDirection","minerva.Point","minerva.Point.constructor","minerva.Point.isEqual","minerva.Point.copyTo","Float32Array","length","Array","minerva.create","minerva.init","vec2","minerva.RectOverlap","minerva.Rect","minerva.Rect.constructor","minerva.Rect.clear","minerva.Rect.getBottom","minerva.Rect.getRight","minerva.Rect.isEqual","minerva.Rect.isEmpty","minerva.Rect.copyTo","minerva.Rect.roundOut","minerva.Rect.roundIn","minerva.Rect.intersection","minerva.Rect.union","minerva.Rect.isContainedIn","minerva.Rect.containsPoint","minerva.Rect.extendTo","minerva.Rect.grow","minerva.Rect.shrink","minerva.Rect.rectIn","minerva.Rect.transform","minerva.Size","minerva.Size.constructor","minerva.Size.copyTo","minerva.Size.isEqual","minerva.Size.isEmpty","minerva.Size.min","minerva.Size.isUndef","minerva.Size.undef","minerva.Thickness","minerva.Thickness.constructor","minerva.Thickness.add","minerva.Thickness.copyTo","minerva.Thickness.isEmpty","minerva.Thickness.isBalanced","minerva.Thickness.shrinkSize","minerva.Thickness.shrinkRect","minerva.Thickness.shrinkCornerRadius","minerva.Thickness.growSize","minerva.Thickness.growRect","minerva.Thickness.growCornerRadius","minerva.Vector","minerva.Vector.create","minerva.Vector.reverse","minerva.Vector.orthogonal","minerva.Vector.normalize","minerva.Vector.rotate","minerva.Vector.angleBetween","minerva.Vector.isClockwiseTo","minerva.Vector.intersection","minerva.Visibility","minerva.findElementsInHostSpace","minerva.layoutError","minerva.getNaturalCanvasSize","minerva.singleton","minerva.zoom","minerva.zoom.ie","minerva.zoom.chrome","minerva.zoom.chrome.memoizeSvg","minerva.pipe","minerva.pipe.createTriPipe","minerva.pipe.ITriPipe","minerva.pipe.PipeDef","minerva.pipe.PipeDef.constructor","minerva.pipe.PipeDef.addTapin","minerva.pipe.PipeDef.addTapinBefore","minerva.pipe.PipeDef.addTapinAfter","minerva.pipe.PipeDef.replaceTapin","minerva.pipe.PipeDef.removeTapin","minerva.pipe.PipeDef.run","minerva.pipe.PipeDef.prepare","minerva.pipe.PipeDef.flush","minerva.pipe.TriPipeDef","minerva.pipe.TriPipeDef.constructor","minerva.pipe.TriPipeDef.addTapin","minerva.pipe.TriPipeDef.addTapinBefore","minerva.pipe.TriPipeDef.addTapinAfter","minerva.pipe.TriPipeDef.replaceTapin","minerva.pipe.TriPipeDef.removeTapin","minerva.pipe.TriPipeDef.run","minerva.pipe.TriPipeDef.createState","minerva.pipe.TriPipeDef.createOutput","minerva.pipe.TriPipeDef.prepare","minerva.pipe.TriPipeDef.flush","minerva.core","minerva.core.Updater","minerva.core.Updater.constructor","minerva.core.Updater.init","minerva.core.Updater.setTree","minerva.core.Updater.getAttachedValue","minerva.core.Updater.setAttachedValue","minerva.core.Updater.onDetached","minerva.core.Updater.onAttached","minerva.core.Updater.setVisualParent","minerva.core.Updater.setSurface","minerva.core.Updater.walkDeep","last","subwalker","tree","walk","revdir","step","walkList","unshift","current","this","shift","undefined","minerva.core.Updater.setMeasurePipe","minerva.core.Updater.setMeasureBinder","minerva.core.Updater.setArrangePipe","minerva.core.Updater.setArrangeBinder","minerva.core.Updater.setSizingPipe","minerva.core.Updater.setProcessDownPipe","minerva.core.Updater.setProcessUpPipe","minerva.core.Updater.setRenderPipe","minerva.core.Updater.setHitTestPipe","minerva.core.Updater.doMeasure","minerva.core.Updater.measure","minerva.core.Updater.doArrange","minerva.core.Updater.arrange","minerva.core.Updater.sizing","minerva.core.Updater.processDown","minerva.core.Updater.processUp","minerva.core.Updater.render","minerva.core.Updater.hitTest","minerva.core.Updater.onSizeChanged","minerva.core.Updater.setSizeUpdater","minerva.core.Updater.invalidateMeasure","minerva.core.Updater.invalidateArrange","minerva.core.Updater.updateBounds","minerva.core.Updater.fullInvalidate","minerva.core.Updater.invalidate","minerva.core.Updater.findChildInList","minerva.core.Updater.$$addUpDirty","minerva.core.Updater.$$addDownDirty","minerva.core.Updater.$$propagateUiFlagsUp","minerva.core.Updater.transformToVisual","minerva.core.Updater.transformPoint","minerva.core.UpdaterTree","minerva.core.UpdaterTree.constructor","get","minerva.core.UpdaterTree.visualOwner","enumerable","configurable","minerva.core.UpdaterTree.walk","visited","_this","subtree","minerva.core.UpdaterTree.onChildAttached","minerva.core.UpdaterTree.onChildDetached","minerva.core.UpdaterTree.setTemplateApplier","minerva.core.UpdaterTree.applyTemplate","minerva.core.helpers","minerva.core.helpers.coerceSize","minerva.core.helpers.intersectBoundsWithClipPath","minerva.core.helpers.renderLayoutClip","minerva.core.reactTo","minerva.core.reactTo.isHitTestVisible","minerva.core.reactTo.useLayoutRounding","minerva.core.reactTo.opacity","minerva.core.reactTo.visibility","minerva.core.reactTo.effect","minerva.core.reactTo.clip","minerva.core.reactTo.renderTransform","minerva.core.reactTo.renderTransformOrigin","minerva.core.reactTo.helpers","minerva.core.reactTo.helpers.invalidateParent","minerva.core.reactTo.helpers.sizeChanged","minerva.core.reactTo.helpers.alignmentChanged","minerva.core.arrange","minerva.core.arrange.ArrangeBinder","minerva.core.arrange.ArrangeBinder.bind","minerva.core.arrange.ArrangeBinder.expandViewport","minerva.core.arrange.ArrangeBinder.shiftViewport","__extends","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","minerva.core.arrange.ArrangePipeDef","minerva.core.arrange.ArrangePipeDef.constructor","minerva.core.arrange.ArrangePipeDef.createState","minerva.core.arrange.ArrangePipeDef.createOutput","minerva.core.arrange.ArrangePipeDef.prepare","minerva.core.arrange.ArrangePipeDef.flush","minerva.core.draft","minerva.core.draft.DraftPipeDef","minerva.core.draft.DraftPipeDef.constructor","minerva.core.hittest","minerva.core.hittest.HitTestPipeDef","minerva.core.hittest.HitTestPipeDef.constructor","minerva.core.measure","minerva.core.measure.MeasureBinder","minerva.core.measure.MeasureBinder.bind","minerva.core.measure.MeasurePipeDef","minerva.core.measure.MeasurePipeDef.constructor","minerva.core.measure.MeasurePipeDef.createState","minerva.core.measure.MeasurePipeDef.createOutput","minerva.core.measure.MeasurePipeDef.prepare","minerva.core.measure.MeasurePipeDef.flush","minerva.core.processdown","minerva.core.processdown.ProcessDownPipeDef","minerva.core.processdown.ProcessDownPipeDef.constructor","minerva.core.processdown.ProcessDownPipeDef.createState","minerva.core.processdown.ProcessDownPipeDef.createOutput","minerva.core.processdown.ProcessDownPipeDef.prepare","minerva.core.processdown.ProcessDownPipeDef.flush","minerva.core.processup","minerva.core.processup.ProcessUpPipeDef","minerva.core.processup.ProcessUpPipeDef.constructor","minerva.core.processup.ProcessUpPipeDef.createState","minerva.core.processup.ProcessUpPipeDef.createOutput","minerva.core.processup.ProcessUpPipeDef.prepare","minerva.core.processup.ProcessUpPipeDef.flush","minerva.core.render","minerva.core.render.getIEVersion","minerva.core.render.RenderContext","minerva.core.render.RenderContext.constructor","minerva.core.render.RenderContext.hasFillRule","minerva.core.render.RenderContext.applyDpiRatio","minerva.core.render.RenderContext.save","minerva.core.render.RenderContext.restore","minerva.core.render.RenderContext.setTransform","minerva.core.render.RenderContext.resetTransform","minerva.core.render.RenderContext.transform","minerva.core.render.RenderContext.scale","minerva.core.render.RenderContext.rotate","minerva.core.render.RenderContext.translate","minerva.core.render.RenderContext.apply","minerva.core.render.RenderContext.preapply","minerva.core.render.RenderContext.clipGeometry","minerva.core.render.RenderContext.clipRect","minerva.core.render.RenderContext.fillEx","minerva.core.render.RenderContext.isPointInStrokeEx","minerva.core.render.RenderContextSize","minerva.core.render.RenderContextSize.constructor","minerva.core.render.RenderContextSize.desiredWidth","minerva.core.render.RenderContextSize.desiredHeight","minerva.core.render.RenderContextSize.paintWidth","minerva.core.render.RenderContextSize.paintHeight","minerva.core.render.RenderContextSize.dpiRatio","minerva.core.render.RenderContextSize.init","minerva.core.render.RenderContextSize.queueResize","minerva.core.render.RenderContextSize.commitResize","minerva.core.render.RenderContextSize.updateDpiRatio","minerva.core.render.RenderContextSize.$adjustCanvas","minerva.core.render.RenderPipeDef","minerva.core.render.RenderPipeDef.constructor","minerva.core.render.RenderPipeDef.createState","minerva.core.render.RenderPipeDef.createOutput","minerva.core.sizing","minerva.core.sizing.SizingPipeDef","minerva.core.sizing.SizingPipeDef.constructor","minerva.core.sizing.SizingPipeDef.createState","minerva.core.sizing.SizingPipeDef.createOutput","minerva.core.sizing.SizingPipeDef.flush","minerva.core.arrange.tapins","fr","state","finalRect","input","useLayoutRounding","x","Math","round","y","width","height","Rect","copyTo","lc","output","layoutClip","vo","visualOffset","max","testRect","as","arrangedSize","Size","isTop","isContainedIn","isEqual","constrained","fwClip","Number","POSITIVE_INFINITY","core","helpers","coerceSize","intersection","dirtyFlags","DirtyFlags","LayoutClip","layoutXform","mat3","createTranslate","flipHorizontal","translate","scale","equal","LocalTransform","renderSize","lastRenderSize","uiFlags","UIFlags","SizeHint","layoutSlot","Thickness","shrinkRect","margin","stretched","horizontalAlignment","HorizontalAlignment","Left","Right","Center","verticalAlignment","VerticalAlignment","Top","Bottom","Arrange","Stretch","framework","min","cr","childRect","finalSize","walker","child","arrange","Bounds","fs","hd","hiddenDesire","isFinite","isNaN","layoutError","visibility","Visibility","Visible","minerva.core.draft.tapins","data","flag","ArrangeHint","arrangeList","updater","doArrange","None","assets","MeasureHint","Updater","$$propagateUiFlagsUp","sizingList","measureList","doMeasure","sizingUpdates","update","pop","onSizeChanged","oldSize","newSize","walkDeep","push","skipBranch","previousConstraint","isContainer","isUndef","surfaceSize","Measure","sizing","minerva.core.hittest.tapins","minerva.core.hittest.tapins.canHit","minerva.core.hittest.tapins.canHitInside","minerva.core.hittest.tapins.completeCtx","minerva.core.hittest.tapins.insideChildren","minerva.core.hittest.tapins.insideClip","minerva.core.hittest.tapins.insideLayoutClip","minerva.core.hittest.tapins.insideObject","minerva.core.hittest.tapins.prepareCtx","minerva.core.measure.tapins","applyTemplate","pc","availableSize","desiredSize","ds","measure","growSize","shrinkSize","minerva.core.processdown.tapins","Transform","ax","absoluteXform","renderXform","vpinput","apply","rx","localXform","carrierXform","xo","xformOrigin","userxo","renderTransformOrigin","actualWidth","actualHeight","HitTestVisibility","totalIsHitTestVisible","isHitTestVisible","subtreeDownDirty","clc","compositeLayoutClip","isEmpty","local","identity","render","renderTransform","origin","getRaw","RenderVisibility","totalOpacity","opacity","totalIsRenderVisible","NewBounds","newDownDirty","PropagateDown","$$addDownDirty","minerva.core.processup.tapins","actual","actualSize","e","extents","ewc","extentsWithChildren","union","globalBoundsWithChildren","intersectBoundsWithClipPath","effectPadding","clip","surfaceBoundsWithChildren","hasNewBounds","forceInvalidate","visualOwner","updateBounds","invalidate","Invalidate","hasInvalidate","dirty","dirtyRegion","minerva.core.render.tapins","ctx","clipGeometry","effect","PostRender","restore","save","PreRender","preapply","raw","globalAlpha","WalkDirection","ZForward","renderRegion","r","roundOut","region","minerva.core.sizing.tapins","useRender","minerva.controls","minerva.controls.border","minerva.controls.border.arrange","minerva.controls.border.arrange.preOverride","minerva.controls.border.arrange.doOverride","minerva.controls.border.arrange.BorderArrangePipeDef","minerva.controls.border.arrange.BorderArrangePipeDef.constructor","minerva.controls.border.arrange.BorderArrangePipeDef.createState","minerva.controls.border.hittest","minerva.controls.border.hittest.BorderHitTestPipeDef","minerva.controls.border.hittest.BorderHitTestPipeDef.constructor","minerva.controls.border.hittest.tapins","minerva.controls.border.hittest.tapins.canHitInside","minerva.controls.border.measure","minerva.controls.border.measure.preOverride","minerva.controls.border.measure.doOverride","minerva.controls.border.measure.postOverride","minerva.controls.border.measure.BorderMeasurePipeDef","minerva.controls.border.measure.BorderMeasurePipeDef.constructor","minerva.controls.border.measure.BorderMeasurePipeDef.createState","minerva.controls.border.render","minerva.controls.border.render.BorderRenderPipeDef","minerva.controls.border.render.BorderRenderPipeDef.constructor","minerva.controls.border.render.BorderRenderPipeDef.createState","minerva.controls.border.render.ShimBorderRenderPipeDef","minerva.controls.border.render.ShimBorderRenderPipeDef.constructor","minerva.controls.border.render.ShimBorderRenderPipeDef.createState","minerva.controls.panel","minerva.controls.panel.arrange","minerva.controls.panel.arrange.PanelArrangePipeDef","minerva.controls.panel.arrange.PanelArrangePipeDef.constructor","minerva.controls.canvas","minerva.controls.canvas.arrange","minerva.controls.canvas.arrange.CanvasArrangePipeDef","minerva.controls.canvas.arrange.CanvasArrangePipeDef.constructor","minerva.controls.panel.measure","minerva.controls.panel.measure.doOverride","minerva.controls.panel.measure.PanelMeasurePipeDef","minerva.controls.panel.measure.PanelMeasurePipeDef.constructor","minerva.controls.canvas.measure","minerva.controls.canvas.measure.CanvasMeasurePipeDef","minerva.controls.canvas.measure.CanvasMeasurePipeDef.constructor","minerva.controls.canvas.processdown","minerva.controls.canvas.processdown.CanvasProcessDownPipeDef","minerva.controls.canvas.processdown.CanvasProcessDownPipeDef.constructor","minerva.controls.canvas.processdown.tapins","minerva.controls.canvas.processdown.tapins.processLayoutClip","minerva.controls.canvas.processup","minerva.controls.canvas.processup.CanvasProcessUpPipeDef","minerva.controls.canvas.processup.CanvasProcessUpPipeDef.constructor","minerva.controls.control","minerva.controls.control.hittest","minerva.controls.control.hittest.ControlHitTestPipeDef","minerva.controls.control.hittest.ControlHitTestPipeDef.constructor","minerva.controls.control.hittest.tapins","minerva.controls.control.hittest.tapins.shouldSkip","minerva.controls.control.hittest.tapins.canHitInside","minerva.controls.grid","minerva.controls.grid.arrange","minerva.controls.grid.arrange.GridArrangePipeDef","minerva.controls.grid.arrange.GridArrangePipeDef.constructor","minerva.controls.grid.arrange.GridArrangePipeDef.createState","minerva.controls.grid.measure","minerva.controls.grid.measure.GridChildPlacement","minerva.controls.grid.measure.GridChildPlacement.constructor","minerva.controls.grid.measure.GridChildPlacement.row","minerva.controls.grid.measure.GridChildPlacement.col","minerva.controls.grid.measure.OverridePass","minerva.controls.grid.measure.GridChildShape","minerva.controls.grid.measure.GridChildShape.init","minerva.controls.grid.measure.GridChildShape.shouldMeasurePass","minerva.controls.grid.measure.GridChildShape.size","minerva.controls.grid.measure.GridMeasurePipeDef","minerva.controls.grid.measure.GridMeasurePipeDef.constructor","minerva.controls.grid.measure.GridMeasurePipeDef.createState","minerva.controls.grid.measure.GridShape","minerva.controls.grid.measure.GridShape.constructor","minerva.controls.grid.measure.GridShape.init","minerva.controls.grid.helpers","minerva.controls.grid.helpers.allocateDesiredSize","minerva.controls.grid.helpers.assignSize","minerva.controls.grid.helpers.expandStarCols","minerva.controls.grid.helpers.expandStarRows","minerva.controls.panel.processup","minerva.controls.panel.processup.PanelProcessUpPipeDef","minerva.controls.panel.processup.PanelProcessUpPipeDef.constructor","minerva.controls.grid.processup","minerva.controls.grid.processup.GridProcessUpPipeDef","minerva.controls.grid.processup.GridProcessUpPipeDef.constructor","minerva.controls.panel.render","minerva.controls.panel.render.doRender","minerva.controls.panel.render.PanelRenderPipeDef","minerva.controls.panel.render.PanelRenderPipeDef.constructor","minerva.controls.grid.render","minerva.controls.grid.render.GridRenderPipeDef","minerva.controls.grid.render.GridRenderPipeDef.constructor","minerva.controls.grid.render.GridRenderPipeDef.createState","minerva.controls.grid.render.tapins","minerva.controls.grid.render.tapins.renderGridLines","minerva.controls.image","minerva.controls.image.hittest","minerva.controls.image.hittest.ImageHitTestPipeDef","minerva.controls.image.hittest.ImageHitTestPipeDef.constructor","minerva.controls.image.hittest.ImageHitTestPipeDef.prepare","minerva.controls.image.arrange","minerva.controls.image.arrange.ImageArrangePipeDef","minerva.controls.image.arrange.ImageArrangePipeDef.constructor","minerva.controls.image.arrange.ImageArrangePipeDef.createState","minerva.controls.image.measure","minerva.controls.image.measure.ImageMeasurePipeDef","minerva.controls.image.measure.ImageMeasurePipeDef.constructor","minerva.controls.image.measure.ImageMeasurePipeDef.createState","minerva.controls.image.processdown","minerva.controls.image.processdown.ImageProcessDownPipeDef","minerva.controls.image.processdown.ImageProcessDownPipeDef.constructor","minerva.controls.image.processdown.ImageProcessDownPipeDef.createState","minerva.controls.image.processdown.ImageProcessDownPipeDef.createOutput","minerva.controls.image.processdown.ImageProcessDownPipeDef.prepare","minerva.controls.image.processdown.ImageProcessDownPipeDef.flush","minerva.controls.image.render","minerva.controls.image.render.ImageRenderPipeDef","minerva.controls.image.render.ImageRenderPipeDef.constructor","minerva.controls.overlay","minerva.controls.overlay.hittest","minerva.controls.overlay.hittest.OverlayHitTestPipeDef","minerva.controls.overlay.hittest.OverlayHitTestPipeDef.constructor","minerva.controls.overlay.hittest.tapins","minerva.controls.overlay.hittest.tapins.shouldSkip","minerva.controls.overlay.processup","minerva.controls.overlay.processup.OverlayProcessUpPipeDef","minerva.controls.overlay.processup.OverlayProcessUpPipeDef.constructor","minerva.controls.panel.hittest","minerva.controls.panel.hittest.PanelHitTestPipeDef","minerva.controls.panel.hittest.PanelHitTestPipeDef.constructor","minerva.controls.panel.hittest.tapins","minerva.controls.panel.hittest.tapins.canHitInside","minerva.controls.popup","minerva.controls.popup.hittest","minerva.controls.popup.hittest.PopupHitTestPipeDef","minerva.controls.popup.hittest.PopupHitTestPipeDef.constructor","minerva.controls.popup.hittest.tapins","minerva.controls.popup.hittest.tapins.shouldSkip","minerva.controls.popup.processdown","minerva.controls.popup.processdown.PopupProcessDownPipeDef","minerva.controls.popup.processdown.PopupProcessDownPipeDef.constructor","minerva.controls.popup.processup","minerva.controls.popup.processup.PopupProcessUpPipeDef","minerva.controls.popup.processup.PopupProcessUpPipeDef.constructor","minerva.controls.scrollcontentpresenter","minerva.controls.scrollcontentpresenter.arrange","minerva.controls.scrollcontentpresenter.arrange.ScrollContentPresenterArrangePipeDef","minerva.controls.scrollcontentpresenter.arrange.ScrollContentPresenterArrangePipeDef.constructor","minerva.controls.scrollcontentpresenter.arrange.ScrollContentPresenterArrangePipeDef.createOutput","minerva.controls.scrollcontentpresenter.arrange.ScrollContentPresenterArrangePipeDef.prepare","minerva.controls.scrollcontentpresenter.arrange.ScrollContentPresenterArrangePipeDef.flush","minerva.controls.scrollcontentpresenter.measure","minerva.controls.scrollcontentpresenter.measure.ScrollContentPresenterMeasurePipeDef","minerva.controls.scrollcontentpresenter.measure.ScrollContentPresenterMeasurePipeDef.constructor","minerva.controls.scrollcontentpresenter.measure.ScrollContentPresenterMeasurePipeDef.createState","minerva.controls.scrollcontentpresenter.render","minerva.controls.scrollcontentpresenter.render.ScrollContentPresenterRenderPipeDef","minerva.controls.scrollcontentpresenter.render.ScrollContentPresenterRenderPipeDef.constructor","minerva.controls.scrollcontentpresenter.render.tapins","minerva.controls.scrollcontentpresenter.render.tapins.applyInternalClip","minerva.controls.stackpanel","minerva.controls.stackpanel.arrange","minerva.controls.stackpanel.arrange.StackPanelArrangePipeDef","minerva.controls.stackpanel.arrange.StackPanelArrangePipeDef.constructor","minerva.controls.stackpanel.measure","minerva.controls.stackpanel.measure.StackPanelMeasurePipeDef","minerva.controls.stackpanel.measure.StackPanelMeasurePipeDef.constructor","minerva.controls.stackpanel.measure.StackPanelMeasurePipeDef.createState","minerva.controls.textblock","minerva.controls.textblock.arrange","minerva.controls.textblock.arrange.TextBlockArrangePipeDef","minerva.controls.textblock.arrange.TextBlockArrangePipeDef.constructor","minerva.controls.textblock.arrange.tapins","minerva.controls.textblock.arrange.tapins.doOverride","minerva.controls.textblock.hittest","minerva.controls.textblock.hittest.TextBlockHitTestPipeDef","minerva.controls.textblock.hittest.TextBlockHitTestPipeDef.constructor","minerva.controls.textblock.hittest.tapins","minerva.controls.textblock.hittest.tapins.canHitInside","minerva.controls.textblock.measure","minerva.controls.textblock.measure.TextBlockMeasurePipeDef","minerva.controls.textblock.measure.TextBlockMeasurePipeDef.constructor","minerva.controls.textblock.measure.tapins","minerva.controls.textblock.measure.tapins.doOverride","minerva.controls.textblock.processup","minerva.controls.textblock.processup.TextBlockProcessUpPipeDef","minerva.controls.textblock.processup.TextBlockProcessUpPipeDef.constructor","minerva.controls.textblock.processup.tapins","minerva.controls.textblock.processup.tapins.calcActualSize","minerva.controls.textblock.processup.tapins.calcExtents","minerva.controls.textblock.render","minerva.controls.textblock.render.TextBlockRenderPipeDef","minerva.controls.textblock.render.TextBlockRenderPipeDef.constructor","minerva.controls.textblock.render.tapins","minerva.controls.textblock.render.tapins.doRender","minerva.controls.textboxview","minerva.controls.textboxview.arrange","minerva.controls.textboxview.arrange.TextBoxViewArrangePipeDef","minerva.controls.textboxview.arrange.TextBoxViewArrangePipeDef.constructor","minerva.controls.textboxview.arrange.tapins","minerva.controls.textboxview.arrange.tapins.doOverride","minerva.controls.textboxview.hittest","minerva.controls.textboxview.hittest.TextBoxViewHitTestPipeDef","minerva.controls.textboxview.hittest.TextBoxViewHitTestPipeDef.constructor","minerva.controls.textboxview.hittest.tapins","minerva.controls.textboxview.hittest.tapins.canHitInside","minerva.controls.textboxview.measure","minerva.controls.textboxview.measure.TextBoxViewMeasurePipeDef","minerva.controls.textboxview.measure.TextBoxViewMeasurePipeDef.constructor","minerva.controls.textboxview.measure.tapins","minerva.controls.textboxview.measure.tapins.doOverride","minerva.controls.textboxview.processup","minerva.controls.textboxview.processup.TextBoxViewProcessUpPipeDef","minerva.controls.textboxview.processup.TextBoxViewProcessUpPipeDef.constructor","minerva.controls.textboxview.processup.tapins","minerva.controls.textboxview.processup.tapins.calcActualSize","minerva.controls.textboxview.processup.tapins.calcExtents","minerva.controls.textboxview.render","minerva.controls.textboxview.render.TextBoxViewRenderPipeDef","minerva.controls.textboxview.render.TextBoxViewRenderPipeDef.constructor","minerva.controls.textboxview.render.TextBoxViewRenderPipeDef.createOutput","minerva.controls.textboxview.render.TextBoxViewRenderPipeDef.prepare","minerva.controls.textboxview.render.TextBoxViewRenderPipeDef.flush","minerva.controls.textboxview.render.tapins","minerva.controls.textboxview.render.tapins.doRender","minerva.controls.textboxview.render.tapins.calcCaretRegion","minerva.controls.textboxview.render.tapins.renderCaret","minerva.controls.usercontrol","minerva.controls.usercontrol.arrange","minerva.controls.usercontrol.arrange.UserControlArrangePipeDef","minerva.controls.usercontrol.arrange.UserControlArrangePipeDef.constructor","minerva.controls.usercontrol.arrange.UserControlArrangePipeDef.createState","minerva.controls.usercontrol.measure","minerva.controls.usercontrol.measure.UserControlMeasurePipeDef","minerva.controls.usercontrol.measure.UserControlMeasurePipeDef.constructor","minerva.controls.usercontrol.measure.UserControlMeasurePipeDef.createState","minerva.controls.usercontrol.processdown","minerva.controls.usercontrol.processdown.UserControlProcessDownPipeDef","minerva.controls.usercontrol.processdown.UserControlProcessDownPipeDef.constructor","minerva.controls.usercontrol.processdown.tapins","minerva.controls.usercontrol.processdown.tapins.processLayoutClip","minerva.controls.virtualizingstackpanel","minerva.controls.virtualizingstackpanel.arrange","minerva.controls.virtualizingstackpanel.arrange.VirtualizingStackPanelArrangePipeDef","minerva.controls.virtualizingstackpanel.arrange.VirtualizingStackPanelArrangePipeDef.constructor","minerva.controls.virtualizingstackpanel.measure","minerva.controls.virtualizingstackpanel.measure.VirtualizingStackPanelMeasurePipeDef","minerva.controls.virtualizingstackpanel.measure.VirtualizingStackPanelMeasurePipeDef.constructor","minerva.controls.virtualizingstackpanel.measure.VirtualizingStackPanelMeasurePipeDef.createState","minerva.shapes","minerva.shapes.ellipse","minerva.shapes.ellipse.helpers","minerva.shapes.ellipse.helpers.draw","minerva.shapes.shape","minerva.shapes.shape.hittest","minerva.shapes.shape.hittest.ShapeHitTestPipeDef","minerva.shapes.shape.hittest.ShapeHitTestPipeDef.constructor","minerva.shapes.ellipse.hittest","minerva.shapes.ellipse.hittest.EllipseHitTestPipeDef","minerva.shapes.ellipse.hittest.EllipseHitTestPipeDef.constructor","minerva.shapes.ellipse.hittest.tapins","minerva.shapes.ellipse.hittest.tapins.drawShape","minerva.shapes.shape.measure","minerva.shapes.shape.measure.ShapeMeasurePipeDef","minerva.shapes.shape.measure.ShapeMeasurePipeDef.constructor","minerva.shapes.shape.measure.ShapeMeasurePipeDef.createOutput","minerva.shapes.shape.measure.ShapeMeasurePipeDef.prepare","minerva.shapes.shape.measure.ShapeMeasurePipeDef.flush","minerva.shapes.ellipse.measure","minerva.shapes.ellipse.measure.EllipseMeasurePipeDef","minerva.shapes.ellipse.measure.EllipseMeasurePipeDef.constructor","minerva.shapes.ellipse.measure.tapins","minerva.shapes.ellipse.measure.tapins.shrinkAvailable","minerva.shapes.shape.render","minerva.shapes.shape.render.ShapeRenderPipeDef","minerva.shapes.shape.render.ShapeRenderPipeDef.constructor","minerva.shapes.shape.render.ShapeRenderPipeDef.createState","minerva.shapes.ellipse.render","minerva.shapes.ellipse.render.EllipseRenderPipeDef","minerva.shapes.ellipse.render.EllipseRenderPipeDef.constructor","minerva.shapes.ellipse.render.tapins","minerva.shapes.ellipse.render.tapins.doRender","minerva.shapes.path","minerva.shapes.path.measure","minerva.shapes.path.measure.PathMeasurePipeDef","minerva.shapes.path.measure.PathMeasurePipeDef.constructor","minerva.shapes.path.measure.tapins","minerva.shapes.path.measure.tapins.buildPath","minerva.shapes.path.measure.tapins.calcNaturalBounds","minerva.shapes.line","minerva.shapes.line.measure","minerva.shapes.line.measure.LineMeasurePipeDef","minerva.shapes.line.measure.LineMeasurePipeDef.constructor","minerva.shapes.line.measure.tapins","minerva.shapes.line.measure.tapins.buildPath","minerva.shapes.path.hittest","minerva.shapes.path.hittest.PathHitTestPipeDef","minerva.shapes.path.hittest.PathHitTestPipeDef.constructor","minerva.shapes.path.hittest.tapins","minerva.shapes.path.hittest.tapins.drawShape","minerva.shapes.shape.processup","minerva.shapes.shape.processup.ShapeProcessUpPipeDef","minerva.shapes.shape.processup.ShapeProcessUpPipeDef.constructor","minerva.shapes.shape.processup.ShapeProcessUpPipeDef.createOutput","minerva.shapes.shape.processup.ShapeProcessUpPipeDef.prepare","minerva.shapes.shape.processup.ShapeProcessUpPipeDef.flush","minerva.shapes.path.processup","minerva.shapes.path.processup.PathProcessUpPipeDef","minerva.shapes.path.processup.PathProcessUpPipeDef.constructor","minerva.shapes.path.processup.PathProcessUpPipeDef.createOutput","minerva.shapes.path.processup.PathProcessUpPipeDef.prepare","minerva.shapes.path.processup.PathProcessUpPipeDef.flush","minerva.shapes.path.render","minerva.shapes.path.render.PathRenderPipeDef","minerva.shapes.path.render.PathRenderPipeDef.constructor","minerva.shapes.polyline","minerva.shapes.polyline.measure","minerva.shapes.polyline.measure.PolylineMeasurePipeDef","minerva.shapes.polyline.measure.PolylineMeasurePipeDef.constructor","minerva.shapes.polyline.measure.tapins","minerva.shapes.polyline.measure.tapins.buildPath","minerva.shapes.polyline.measure.tapins.extendLine","minerva.shapes.rectangle","minerva.shapes.rectangle.helpers","minerva.shapes.rectangle.helpers.draw","minerva.shapes.rectangle.hittest","minerva.shapes.rectangle.hittest.RectangleHitTestPipeDef","minerva.shapes.rectangle.hittest.RectangleHitTestPipeDef.constructor","minerva.shapes.rectangle.hittest.tapins","minerva.shapes.rectangle.hittest.tapins.drawShape","minerva.shapes.rectangle.measure","minerva.shapes.rectangle.measure.RectangleMeasurePipeDef","minerva.shapes.rectangle.measure.RectangleMeasurePipeDef.constructor","minerva.shapes.rectangle.measure.tapins","minerva.shapes.rectangle.measure.tapins.shrinkAvailable","minerva.shapes.rectangle.render","minerva.shapes.rectangle.render.RectangleRenderPipeDef","minerva.shapes.rectangle.render.RectangleRenderPipeDef.constructor","minerva.shapes.rectangle.render.tapins","minerva.shapes.rectangle.render.tapins.doRender","minerva.shapes.shape.arrange","minerva.shapes.shape.arrange.ShapeArrangePipeDef","minerva.shapes.shape.arrange.ShapeArrangePipeDef.constructor","minerva.controls.border.render.helpers","minerva.controls.border.render.helpers.drawBorderRect","minerva.controls.border.render.tapins","minerva.controls.border.render.tapins.calcInnerOuter","minerva.controls.border.render.tapins.calcShouldRender","minerva.controls.border.render.tapins.doRender","minerva.controls.canvas.arrange.tapins","minerva.controls.canvas.arrange.tapins.buildLayoutClip","minerva.controls.canvas.arrange.tapins.doOverride","minerva.controls.canvas.measure.tapins","minerva.controls.canvas.measure.tapins.doOverride","minerva.controls.canvas.processup.tapins","sbwc","surface","minerva.controls.grid.arrange.tapins","minerva.controls.grid.arrange.tapins.calcConsumed","minerva.controls.grid.arrange.tapins.doOverride","minerva.controls.grid.arrange.tapins.restoreMeasureResults","minerva.controls.grid.arrange.tapins.setActuals","minerva.controls.grid.measure.tapins","minerva.controls.grid.measure.tapins.buildShape","minerva.controls.grid.measure.tapins.createDoOverridePass","minerva.controls.grid.measure.tapins.createDoOverridePass.doOverridePass","minerva.controls.grid.measure.tapins.doOverride","minerva.controls.grid.measure.tapins.ensureColMatrix","minerva.controls.grid.measure.tapins.ensureRowMatrix","minerva.controls.grid.GridUnitType","minerva.controls.grid.measure.tapins.prepareColMatrix","minerva.controls.grid.measure.tapins.prepareRowMatrix","minerva.controls.grid.measure.tapins.saveMeasureResults","minerva.controls.grid.processup.tapins","minerva.controls.grid.processup.tapins.calcExtents","minerva.controls.grid.processup.tapins.preCalcExtents","minerva.controls.image.hittest.tapins","minerva.controls.image.hittest.tapins.canHitInside","minerva.controls.image.hittest.tapins.insideChildren","minerva.controls.image.hittest.tapins.insideStretch","minerva.controls.image.arrange.tapins","minerva.controls.image.arrange.tapins.calcImageBounds","minerva.controls.image.arrange.tapins.calcStretch","minerva.controls.image.arrange.tapins.doOverride","minerva.controls.image.arrange.tapins.invalidateMetrics","minerva.controls.image.measure.tapins","minerva.controls.image.measure.tapins.calcImageBounds","minerva.controls.image.measure.tapins.calcStretch","minerva.controls.image.measure.tapins.doOverride","minerva.controls.image.processdown.tapins","minerva.controls.image.processdown.tapins.calcImageTransform","minerva.controls.image.processdown.tapins.calcOverlap","minerva.controls.image.processdown.tapins.checkNeedImageMetrics","minerva.controls.image.processdown.tapins.prepareImageMetrics","minerva.controls.image.render.tapins","minerva.controls.image.render.tapins.doRender","minerva.controls.panel.arrange.tapins","minerva.controls.panel.arrange.tapins.doOverride","minerva.controls.panel.processup.tapins","minerva.controls.panel.processup.tapins.preCalcExtents","minerva.controls.popup.processdown.tapins","popupChild","carrier","horizontalOffset","verticalOffset","minerva.controls.scrollcontentpresenter.arrange.tapins","minerva.controls.scrollcontentpresenter.arrange.tapins.doOverride","minerva.controls.scrollcontentpresenter.arrange.tapins.updateClip","minerva.controls.scrollcontentpresenter.arrange.tapins.updateExtents","minerva.controls.scrollcontentpresenter.measure.tapins","sd","scrollData","ideal","idealSize","canHorizontallyScroll","canVerticallyScroll","minerva.controls.scrollcontentpresenter.measure.tapins.finishDoOverride","minerva.controls.scrollcontentpresenter.measure.tapins.updateExtents","minerva.controls.stackpanel.arrange.tapins","minerva.controls.stackpanel.arrange.tapins.doHorizontal","minerva.controls.stackpanel.arrange.tapins.doOverride","minerva.controls.stackpanel.arrange.tapins.doVertical","minerva.controls.stackpanel.measure.tapins","minerva.controls.stackpanel.measure.tapins.doHorizontal","minerva.controls.stackpanel.measure.tapins.doOverride","minerva.controls.stackpanel.measure.tapins.doVertical","minerva.controls.usercontrol.arrange.tapins","minerva.controls.usercontrol.arrange.tapins.doOverride","minerva.controls.usercontrol.arrange.tapins.preOverride","minerva.controls.usercontrol.measure.tapins","minerva.controls.usercontrol.measure.tapins.doOverride","minerva.controls.usercontrol.measure.tapins.postOverride","minerva.controls.usercontrol.measure.tapins.preOverride","minerva.controls.virtualizingstackpanel.arrange.tapins","minerva.controls.virtualizingstackpanel.arrange.tapins.doHorizontal","minerva.controls.virtualizingstackpanel.arrange.tapins.doOverride","minerva.controls.virtualizingstackpanel.arrange.tapins.doVertical","minerva.controls.virtualizingstackpanel.measure.tapins","minerva.controls.virtualizingstackpanel.measure.tapins.doHorizontal","minerva.controls.virtualizingstackpanel.measure.tapins.doOverride","minerva.controls.virtualizingstackpanel.measure.tapins.doVertical","minerva.shapes.path.processup.tapins","minerva.shapes.path.processup.tapins.calcActualSize","minerva.shapes.path.processup.tapins.calcExtents","minerva.shapes.path.processup.tapins.calcShapeRect","minerva.shapes.path.processup.tapins.calcStretch","minerva.shapes.path.render.tapins","minerva.shapes.path.render.tapins.doRender","minerva.shapes.path.render.tapins.fill","minerva.shapes.shape.arrange.tapins","minerva.shapes.shape.arrange.tapins.doOverride","minerva.shapes.shape.hittest.tapins","minerva.shapes.shape.hittest.tapins.canHitInside","minerva.shapes.shape.hittest.tapins.canHitShape","minerva.shapes.shape.hittest.tapins.drawShape","minerva.shapes.shape.hittest.tapins.finishShape","minerva.shapes.shape.hittest.tapins.insideChildren","minerva.shapes.shape.hittest.tapins.prepareShape","minerva.shapes.shape.measure.tapins","minerva.shapes.shape.measure.tapins.calcNaturalBounds","minerva.shapes.shape.measure.tapins.doOverride","minerva.shapes.shape.processup.tapins","minerva.shapes.shape.processup.tapins.calcExtents","minerva.shapes.shape.processup.tapins.calcShapeRect","minerva.shapes.shape.render.tapins","minerva.shapes.shape.render.tapins.calcShouldDraw","minerva.shapes.shape.render.tapins.doRender","minerva.shapes.shape.render.tapins.fill","minerva.shapes.shape.render.tapins.finishDraw","minerva.shapes.shape.render.tapins.prepareDraw","minerva.shapes.shape.render.tapins.stroke","minerva.controls.border.render.tapins.shim","minerva.controls.border.render.tapins.shim.calcBalanced","minerva.controls.border.render.tapins.shim.createPattern","minerva.controls.border.render.tapins.shim.createBorderPattern","minerva.controls.border.render.tapins.shim.doRender","minerva.controls.border.render.tapins.shim.renderPattern","minerva.controls.border.render.tapins.shim.renderBackground","minerva.controls.border.render.tapins.shim.renderBorder","minerva.controls.border.render.tapins.shim.invalidatePattern","minerva.controls.border.render.tapins.shim.setOldMetrics","minerva.controls.border.render.tapins.shim.didMetricsChange","minerva.anon","minerva.anon.AnonymousUpdater","minerva.anon.AnonymousUpdater.constructor","minerva.anon.AnonymousUpdater.init","minerva.anon.AnonymousUpdater.measureOverride","minerva.anon.AnonymousUpdater.arrangeOverride","minerva.engine","minerva.engine.Surface","minerva.engine.Surface.constructor","minerva.engine.Surface.width","minerva.engine.Surface.height","minerva.engine.Surface.init","minerva.engine.Surface.attachLayer","minerva.engine.Surface.detachLayer","minerva.engine.Surface.walkLayers","i","layers","minerva.engine.Surface.invalidate","minerva.engine.Surface.render","minerva.engine.Surface.hookPrerender","minerva.engine.Surface.unhookPrerender","minerva.engine.Surface.addUpDirty","minerva.engine.Surface.addDownDirty","minerva.engine.Surface.updateLayout","minerva.engine.Surface.resize","minerva.engine.Surface.hitTest","minerva.engine.Surface.updateDpiRatio","minerva.engine.Surface.measureWidth","minerva.engine.draft","minerva.engine.process","minerva.engine.processDown","minerva.engine.processUp","minerva.simple_inverse","minerva.complex_inverse","minerva.copyTo","minerva.identity","minerva.equal","minerva.multiply","minerva.inverse","minerva.transformVec2","minerva.createTranslate","minerva.translate","minerva.createScale","minerva.scale","minerva.createRotate","minerva.createSkew","minerva.preapply","minerva.apply","minerva.Indexes","minerva.transpose","minerva.transformVec4","minerva.createRotateX","minerva.createRotateY","minerva.createRotateZ","minerva.createPerspective","minerva.createViewport","mat4","console","warn","vec4","minerva.path","minerva.path.expandStartCap","minerva.path.expandEndCap","minerva.path.expandLineJoin","minerva.path.processStrokedBounds","minerva.path.processStrokedBounds.processEntry","minerva.path.findMiterTips","minerva.path.findBevelTips","minerva.path.Path","minerva.path.Path.constructor","minerva.path.Path.endX","minerva.path.Path.endY","minerva.path.Path.reset","minerva.path.Path.move","minerva.path.Path.line","minerva.path.Path.quadraticBezier","minerva.path.Path.cubicBezier","minerva.path.Path.ellipse","minerva.path.Path.ellipticalArc","minerva.path.Path.arc","minerva.path.Path.arcTo","minerva.path.Path.rect","minerva.path.Path.roundedRect","minerva.path.Path.close","minerva.path.Path.draw","minerva.path.Path.calcBounds","minerva.path.Path.$$calcFillBox","minerva.path.Path.$$calcStrokeBox","minerva.path.Path.Merge","minerva.path.Path.Serialize","context","perfex","timer","all","reset","start","tag","stop","phases","window","minerva.text","minerva.text.getWidthConstraint","minerva.text.DocumentLayoutDef","minerva.text.DocumentLayoutDef.createAssets","minerva.text.DocumentLayoutDef.setMaxWidth","minerva.text.DocumentLayoutDef.layout","minerva.text.DocumentLayoutDef.render","minerva.text.DocumentLayoutDef.getCursorFromPoint","minerva.text.DocumentLayoutDef.getCaretFromCursor","minerva.text.DocumentLayoutDef.splitSelection","minerva.text.DocumentLayoutDef.getHorizontalAlignmentX","minerva.text.DocumentLayoutDef.measureTextWidth","minerva.text.createDocumentLayout","minerva.text.TextUpdater","minerva.text.TextUpdater.constructor","minerva.text.TextUpdater.init","minerva.text.TextUpdater.setTextLayout","minerva.text.TextUpdater.layout","minerva.text.TextUpdater.invalidateFont","minerva.anon.arrange","minerva.anon.arrange.AnonymousArrangePipeDef","minerva.anon.arrange.AnonymousArrangePipeDef.constructor","minerva.anon.measure","minerva.anon.measure.AnonymousMeasurePipeDef","minerva.anon.measure.AnonymousMeasurePipeDef.constructor","minerva.controls.border.BorderUpdater","minerva.controls.border.BorderUpdater.constructor","minerva.controls.border.BorderUpdater.init","minerva.controls.border.BorderUpdaterTree","minerva.controls.border.BorderUpdaterTree.constructor","minerva.controls.border.BorderUpdaterTree.walk","minerva.controls.panel.PanelUpdater","minerva.controls.panel.PanelUpdater.constructor","minerva.controls.panel.PanelUpdater.init","minerva.controls.panel.PanelUpdater.setChildren","minerva.controls.panel.reactTo","minerva.controls.panel.reactTo.zIndex","minerva.controls.canvas.CanvasUpdater","minerva.controls.canvas.CanvasUpdater.constructor","minerva.controls.canvas.CanvasUpdater.init","minerva.controls.canvas.reactTo","minerva.controls.canvas.reactTo.left","minerva.controls.canvas.reactTo.top","minerva.controls.canvas.reactTo.invalidateTopLeft","minerva.controls.control.ControlUpdater","minerva.controls.control.ControlUpdater.constructor","minerva.controls.control.ControlUpdater.init","minerva.controls.control.ControlUpdaterTree","minerva.controls.control.ControlUpdaterTree.constructor","minerva.controls.grid.GridUpdater","minerva.controls.grid.GridUpdater.constructor","minerva.controls.grid.GridUpdater.init","minerva.controls.grid.reactTo","minerva.controls.grid.reactTo.invalidateCell","minerva.controls.grid.reactTo.showGridLines","minerva.controls.grid.reactTo.column","minerva.controls.grid.reactTo.columnSpan","minerva.controls.grid.reactTo.row","minerva.controls.grid.reactTo.rowSpan","minerva.controls.grid.createGridState","minerva.controls.grid.Segment","minerva.controls.grid.Segment.constructor","minerva.controls.grid.Segment.clamp","minerva.controls.grid.Segment.init","minerva.controls.image.ImageUpdater","minerva.controls.image.ImageUpdater.constructor","minerva.controls.image.ImageUpdater.init","minerva.controls.image.ImageUpdater.invalidateMetrics","minerva.controls.overlay.OverlayUpdater","minerva.controls.overlay.OverlayUpdater.constructor","minerva.controls.overlay.OverlayUpdater.init","minerva.controls.overlay.OverlayUpdater.setInitiator","minerva.controls.overlay.OverlayUpdater.setLayer","minerva.controls.overlay.OverlayUpdater.hide","minerva.controls.overlay.OverlayUpdater.show","minerva.controls.overlay.reactTo","minerva.controls.overlay.reactTo.isOpen","minerva.controls.overlay.OverlayUpdaterTree","minerva.controls.overlay.OverlayUpdaterTree.constructor","minerva.controls.panel.walkArray","index","arr","len","minerva.controls.panel.zIndexComparer","minerva.controls.panel.PanelUpdaterTree","minerva.controls.panel.PanelUpdaterTree.constructor","minerva.controls.panel.PanelUpdaterTree.walk","minerva.controls.panel.PanelUpdaterTree.zSort","minerva.controls.panel.PanelUpdaterTree.onChildAttached","minerva.controls.panel.PanelUpdaterTree.onChildDetached","minerva.controls.popup.PopupUpdater","minerva.controls.popup.PopupUpdater.constructor","minerva.controls.popup.PopupUpdater.init","minerva.controls.popup.PopupUpdater.setInitiator","minerva.controls.popup.PopupUpdater.setChild","minerva.controls.popup.PopupUpdater.setLayer","minerva.controls.popup.PopupUpdater.hide","minerva.controls.popup.PopupUpdater.show","minerva.controls.popup.reactTo","minerva.controls.popup.reactTo.isOpen","minerva.controls.popup.reactTo.horizontalOffset","minerva.controls.popup.reactTo.verticalOffset","minerva.controls.popup.reactTo.tweenOffset","minerva.controls.popup.PopupUpdaterTree","minerva.controls.popup.PopupUpdaterTree.constructor","minerva.controls.scrollcontentpresenter.ScrollContentPresenterUpdater","minerva.controls.scrollcontentpresenter.ScrollContentPresenterUpdater.constructor","minerva.controls.scrollcontentpresenter.ScrollContentPresenterUpdater.init","minerva.controls.scrollcontentpresenter.helpers","minerva.controls.scrollcontentpresenter.helpers.clampOffsets","minerva.controls.scrollcontentpresenter.helpers.clampHorizontal","minerva.controls.scrollcontentpresenter.helpers.clampVertical","minerva.controls.scrollcontentpresenter.helpers.areClose","minerva.controls.stackpanel.StackPanelUpdater","minerva.controls.stackpanel.StackPanelUpdater.constructor","minerva.controls.stackpanel.StackPanelUpdater.init","minerva.controls.textblock.TextBlockUpdater","minerva.controls.textblock.TextBlockUpdater.constructor","minerva.controls.textblock.TextBlockUpdater.init","minerva.controls.textblock.TextBlockUpdater.setDocument","minerva.controls.textblock.TextBlockUpdater.invalidateFont","minerva.controls.textblock.TextBlockUpdater.invalidateTextMetrics","minerva.controls.textblock.TextBlockUpdaterTree","minerva.controls.textblock.TextBlockUpdaterTree.constructor","minerva.controls.textblock.TextBlockUpdaterTree.setMaxWidth","minerva.controls.textblock.TextBlockUpdaterTree.layout","minerva.controls.textblock.TextBlockUpdaterTree.render","minerva.controls.textblock.TextBlockUpdaterTree.setAvailableWidth","minerva.controls.textblock.TextBlockUpdaterTree.getHorizontalOffset","minerva.controls.textblock.TextBlockUpdaterTree.clearText","minerva.controls.textblock.TextBlockUpdaterTree.walkText","children","minerva.controls.textblock.TextBlockUpdaterTree.onTextAttached","minerva.controls.textblock.TextBlockUpdaterTree.onTextDetached","minerva.controls.textboxview.Blinker","minerva.controls.textboxview.Blinker.constructor","minerva.controls.textboxview.Blinker.delay","minerva.controls.textboxview.Blinker.begin","minerva.controls.textboxview.Blinker.end","minerva.controls.textboxview.Blinker.$connect","minerva.controls.textboxview.Blinker.$disconnect","minerva.controls.textboxview.Blinker.$blink","minerva.controls.textboxview.Blinker.$show","minerva.controls.textboxview.Blinker.$hide","minerva.controls.textboxview.TextBoxViewUpdater","minerva.controls.textboxview.TextBoxViewUpdater.constructor","minerva.controls.textboxview.TextBoxViewUpdater.init","minerva.controls.textboxview.TextBoxViewUpdater.setDocument","minerva.controls.textboxview.TextBoxViewUpdater.getCursorFromPoint","minerva.controls.textboxview.TextBoxViewUpdater.invalidateFont","minerva.controls.textboxview.TextBoxViewUpdater.invalidateTextMetrics","minerva.controls.textboxview.TextBoxViewUpdater.invalidateMeasure","minerva.controls.textboxview.TextBoxViewUpdater.invalidateCaret","minerva.controls.textboxview.TextBoxViewUpdater.invalidateSelectionStart","minerva.controls.textboxview.TextBoxViewUpdater.invalidateSelectionLength","minerva.controls.textboxview.TextBoxViewUpdater.invalidateCaretRegion","minerva.controls.textboxview.TextBoxViewUpdater.resetCaretBlinker","minerva.controls.textboxview.TextBoxViewUpdaterTree","minerva.controls.textboxview.TextBoxViewUpdaterTree.constructor","minerva.controls.textboxview.TextBoxViewUpdaterTree.setMaxWidth","minerva.controls.textboxview.TextBoxViewUpdaterTree.layout","minerva.controls.textboxview.TextBoxViewUpdaterTree.render","minerva.controls.textboxview.TextBoxViewUpdaterTree.setAvailableWidth","minerva.controls.textboxview.TextBoxViewUpdaterTree.getHorizontalOffset","minerva.controls.textboxview.TextBoxViewUpdaterTree.getCaretRegion","minerva.controls.textboxview.TextBoxViewUpdaterTree.clearText","minerva.controls.textboxview.TextBoxViewUpdaterTree.walkText","minerva.controls.textboxview.TextBoxViewUpdaterTree.onTextAttached","minerva.controls.textboxview.TextBoxViewUpdaterTree.onTextDetached","minerva.controls.usercontrol.UserControlUpdater","minerva.controls.usercontrol.UserControlUpdater.constructor","minerva.controls.usercontrol.UserControlUpdater.init","minerva.controls.video","minerva.controls.video.VideoUpdater","minerva.controls.video.VideoUpdater.constructor","minerva.controls.video.VideoUpdater.onSurfaceChanged","minerva.controls.video.VideoUpdater.preRender","minerva.controls.virtualizingpanel","minerva.controls.virtualizingpanel.VirtualizingPanelUpdater","minerva.controls.virtualizingpanel.VirtualizingPanelUpdater.constructor","minerva.controls.virtualizingpanel.VirtualizingPanelUpdater.init","generate","minerva.controls.virtualizingpanel.VirtualizingPanelUpdaterTree","minerva.controls.virtualizingpanel.VirtualizingPanelUpdaterTree.constructor","minerva.controls.virtualizingstackpanel.VirtualizingStackPanelUpdater","minerva.controls.virtualizingstackpanel.VirtualizingStackPanelUpdater.constructor","minerva.controls.virtualizingstackpanel.VirtualizingStackPanelUpdater.init","minerva.path.segments","minerva.path.segments.arc","minerva.path.segments.arc.init","arc","radius","sa","ea","cc","init","ex","ey","box","l","sx","t","sy","cl","ct","cb","hs","pars","strokeThickness","cap","strokeStartLineCap","strokeEndLineCap","sv","getStartVector","ss","getCapSpread","ev","getEndVector","es","x1","x2","y1","y2","rv","minerva.path.segments.arcContainsPoint","minerva.path.segments.getCapSpread","minerva.path.segments.normalizeVector","minerva.path.segments.perpendicularVector","minerva.path.segments.arcTo","minerva.path.segments.arcTo.init","arcTo","cpx","cpy","line","extendFillBox","extendStrokeBox","minerva.path.segments.getTangentPoint","minerva.path.segments.getPerpendicularIntersections","minerva.path.segments.close","closePath","minerva.path.segments.cubicBezier","bezierCurveTo","cp1x","cp1y","cp2x","cp2y","m","getMaxima","toString","minerva.path.segments.getMaxima","minerva.path.segments.cod","minerva.path.segments.ellipse","beginPath","centerX","centerY","radiusX","PI","kappa","ox","oy","radiusY","moveTo","right","bottom","minerva.path.segments.ellipticalArc","sub","buildSegments","draw","ry","rotationAngle","isLargeArcFlag","sweepDirectionFlag","minerva.path.segments.buildSegments","minerva.path.segments.line","lineTo","minerva.path.segments.move","minerva.path.segments.quadraticBezier","quadraticCurveTo","minerva.path.segments.rect","rect","minerva.path.segments.roundedRect","shapes","rectangle","CanvasRenderingContext2D","defineProperty","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","ellipse","rotation","startAngle","endAngle","antiClockwise","rotate","isPointInStroke","minerva.shapes.shape.ShapeUpdater","minerva.shapes.shape.ShapeUpdater.constructor","minerva.shapes.shape.ShapeUpdater.init","minerva.shapes.shape.ShapeUpdater.invalidateNaturalBounds","minerva.shapes.ellipse.EllipseUpdater","minerva.shapes.ellipse.EllipseUpdater.constructor","minerva.shapes.ellipse.EllipseUpdater.init","minerva.shapes.path.PathUpdater","minerva.shapes.path.PathUpdater.constructor","minerva.shapes.path.PathUpdater.init","minerva.shapes.line.LineUpdater","minerva.shapes.line.LineUpdater.constructor","minerva.shapes.line.LineUpdater.init","minerva.shapes.line.LineUpdater.invalidatePath","minerva.shapes.path.AnonPathGeometry","minerva.shapes.path.AnonPathGeometry.constructor","minerva.shapes.path.AnonPathGeometry.Draw","minerva.shapes.path.AnonPathGeometry.GetBounds","minerva.shapes.polyline.PolylineUpdater","minerva.shapes.polyline.PolylineUpdater.constructor","minerva.shapes.polyline.PolylineUpdater.init","minerva.shapes.polyline.PolylineUpdater.invalidateFillRule","minerva.shapes.polyline.PolylineUpdater.invalidatePath","minerva.shapes.polygon","minerva.shapes.polygon.PolygonUpdater","minerva.shapes.polygon.PolygonUpdater.constructor","minerva.shapes.polygon.PolygonUpdater.init","minerva.shapes.rectangle.RectangleUpdater","minerva.shapes.rectangle.RectangleUpdater.constructor","minerva.shapes.rectangle.RectangleUpdater.init","minerva.text.layout","minerva.text.layout.Cluster","minerva.text.layout.Cluster.constructor","minerva.text.layout.Cluster.render","minerva.text.layout.Line","minerva.text.layout.Line.constructor","minerva.text.layout.Line.getLineFromY","minerva.text.layout.Line.elliptify","minerva.text.layout.shortenWord","minerva.text.layout.shortenChar","minerva.text.layout.Run","minerva.text.layout.Run.constructor","minerva.text.layout.Run.splitSelection","minerva.text.layout.Run.elliptify","minerva.text.run","minerva.text.run.RunLayoutDef","minerva.text.run.RunLayoutDef.layout","minerva.text.run.doLayoutNoWrap","minerva.text.run.advance","minerva.text.run.measureTextWidth","minerva.text.run.doLayoutWrap","minerva.text.run.advanceInfinite","minerva.text.run.advanceFinite"],"mappings":"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","file":"minerva.min.js","sourcesContent":["function radToDegrees(rad) {\r\n    return rad * 180 / Math.PI;\r\n}\r\n\r\nmodule minerva.path.segments {\r\n    var EPSILON = 1e-10;\r\n\r\n    export interface IArcTo extends IPathSegment {\r\n        cpx: number;\r\n        cpy: number;\r\n        x: number;\r\n        y: number;\r\n        radius: number;\r\n    }\r\n    export function arcTo(cpx: number, cpy: number, x: number, y: number, radius: number): IArcTo {\r\n        var line: ILine;\r\n        var arc: IArc;\r\n        var inited = false;\r\n\r\n        function init(prevX: number, prevY: number) {\r\n            if (inited) return;\r\n            if (line && arc) return arc;\r\n            var v1 = [cpx - prevX, cpy - prevY];\r\n            var v2 = [x - cpx, y - cpy];\r\n            var inner_theta = Math.PI - Vector.angleBetween(v1, v2);\r\n            //find 2 points tangent to imaginary circle along guide lines\r\n            var a = getTangentPoint(inner_theta, radius, [prevX, prevY], v1, true);\r\n            var b = getTangentPoint(inner_theta, radius, [cpx, cpy], v2, false);\r\n            //find center point\r\n            var c = getPerpendicularIntersections(a, v1, b, v2);\r\n            //counter clockwise test\r\n            var cc = !Vector.isClockwiseTo(v1, v2);\r\n            //find starting angle -- [1,0] is origin direction of 0rad\r\n            var sa = Math.atan2(a[1] - c[1], a[0] - c[0]);\r\n            if (sa < 0)\r\n                sa = (2 * Math.PI) + sa;\r\n            var ea = Math.atan2(b[1] - c[1], b[0] - c[0]);\r\n            if (ea < 0)\r\n                ea = (2 * Math.PI) + ea;\r\n\r\n            line = segments.line(a[0], a[1]);\r\n            line.sx = prevX;\r\n            line.sy = prevY;\r\n            arc = segments.arc(c[0], c[1], radius, sa, ea, cc);\r\n            inited = true;\r\n        }\r\n\r\n        return {\r\n            sx: null,\r\n            sy: null,\r\n            isSingle: false,\r\n            cpx: cpx,\r\n            cpy: cpy,\r\n            x: x,\r\n            y: y,\r\n            ex: x,\r\n            ey: y,\r\n            radius: radius,\r\n            draw: function (ctx: CanvasRenderingContext2D) {\r\n                ctx.arcTo(cpx, cpy, x, y, radius);\r\n            },\r\n            extendFillBox: function (box: IBoundingBox) {\r\n                init(this.sx, this.sy);\r\n                this.ex = arc.ex;\r\n                this.ey = arc.ey;\r\n\r\n                box.l = Math.min(box.l, this.sx);\r\n                box.r = Math.max(box.r, this.sx);\r\n                box.t = Math.min(box.t, this.sy);\r\n                box.b = Math.max(box.b, this.sy);\r\n\r\n                line.extendFillBox(box);\r\n                arc.extendFillBox(box);\r\n            },\r\n            extendStrokeBox: function (box: IBoundingBox, pars: IStrokeParameters) {\r\n                init(this.sx, this.sy);\r\n                this.ex = arc.ex;\r\n                this.ey = arc.ey;\r\n\r\n                var hs = pars.strokeThickness / 2;\r\n                box.l = Math.min(box.l, this.sx - hs);\r\n                box.r = Math.max(box.r, this.sx + hs);\r\n                box.t = Math.min(box.t, this.sy - hs);\r\n                box.b = Math.max(box.b, this.sy + hs);\r\n\r\n                line.extendStrokeBox(box, pars);\r\n                arc.extendStrokeBox(box, pars);\r\n            },\r\n            toString: function (): string {\r\n                return \"\";\r\n            },\r\n            getStartVector: function (): number[] {\r\n                init(this.sx, this.sy);\r\n                return line.getStartVector();\r\n            },\r\n            getEndVector: function (): number[] {\r\n                return arc.getEndVector();\r\n            }\r\n        };\r\n    }\r\n\r\n    function getTangentPoint(theta: number, radius: number, s: number[], d: number[], invert: boolean): number[] {\r\n        var len = Math.sqrt(d[0] * d[0] + d[1] * d[1]);\r\n        var f = radius / Math.tan(theta / 2);\r\n        var t = f / len;\r\n        if (invert)\r\n            t = 1 - t;\r\n        return [s[0] + t * d[0], s[1] + t * d[1]];\r\n    }\r\n\r\n    function getPerpendicularIntersections(s1: number[], d1: number[], s2: number[], d2: number[]): number[] {\r\n        return Vector.intersection(s1, Vector.orthogonal(d1.slice(0)), s2, Vector.orthogonal(d2.slice(0)));\r\n    }\r\n}","module minerva {\r\n    export var version = '0.7.5';\r\n}","module minerva {\r\n    export enum HorizontalAlignment {\r\n        Left = 0,\r\n        Center = 1,\r\n        Right = 2,\r\n        Stretch = 3,\r\n    }\r\n    export enum VerticalAlignment {\r\n        Top = 0,\r\n        Center = 1,\r\n        Bottom = 2,\r\n        Stretch = 3,\r\n    }\r\n}","module minerva {\r\n    export interface ICornerRadius {\r\n        topLeft: number;\r\n        topRight: number;\r\n        bottomRight: number;\r\n        bottomLeft: number;\r\n    }\r\n    export class CornerRadius implements ICornerRadius {\r\n        topLeft: number;\r\n        topRight: number;\r\n        bottomRight: number;\r\n        bottomLeft: number;\r\n\r\n        constructor (topLeft?: number, topRight?: number, bottomRight?: number, bottomLeft?: number) {\r\n            this.topLeft = topLeft == null ? 0 : topLeft;\r\n            this.topRight = topRight == null ? 0 : topRight;\r\n            this.bottomRight = bottomRight == null ? 0 : bottomRight;\r\n            this.bottomLeft = bottomLeft == null ? 0 : bottomLeft;\r\n        }\r\n\r\n        static isEmpty (cr: ICornerRadius): boolean {\r\n            return cr.topLeft === 0\r\n                && cr.topRight === 0\r\n                && cr.bottomRight === 0\r\n                && cr.bottomLeft === 0;\r\n        }\r\n\r\n        static isEqual (cr1: ICornerRadius, cr2: ICornerRadius): boolean {\r\n            return cr1.topLeft === cr2.topLeft\r\n                && cr1.topRight === cr2.topRight\r\n                && cr1.bottomRight === cr2.bottomRight\r\n                && cr1.bottomLeft === cr2.bottomLeft;\r\n        }\r\n\r\n        static clear (dest: ICornerRadius) {\r\n            dest.topLeft = dest.topRight = dest.bottomRight = dest.bottomLeft = 0;\r\n        }\r\n\r\n        static copyTo (cr2: ICornerRadius, dest: ICornerRadius) {\r\n            dest.topLeft = cr2.topLeft;\r\n            dest.topRight = cr2.topRight;\r\n            dest.bottomRight = cr2.bottomRight;\r\n            dest.bottomLeft = cr2.bottomLeft;\r\n        }\r\n    }\r\n}","module minerva {\r\n    export enum Orientation {\r\n        Horizontal = 0,\r\n        Vertical = 1,\r\n    }\r\n\r\n    export enum PenLineJoin {\r\n        Miter = 0,\r\n        Bevel = 1,\r\n        Round = 2,\r\n    }\r\n\r\n    export enum PenLineCap {\r\n        Flat = 0,\r\n        Square = 1,\r\n        Round = 2,\r\n        Triangle = 3,\r\n    }\r\n\r\n    export enum FillRule {\r\n        EvenOdd = 0,\r\n        NonZero = 1,\r\n    }\r\n\r\n    export enum Stretch {\r\n        None = 0,\r\n        Fill = 1,\r\n        Uniform = 2,\r\n        UniformToFill = 3,\r\n    }\r\n\r\n    export enum FlowDirection {\r\n        LeftToRight = 0,\r\n        RightToLeft = 1,\r\n    }\r\n\r\n    export enum LineStackingStrategy {\r\n        MaxHeight = 0,\r\n        BlockLineHeight = 1,\r\n    }\r\n\r\n    export enum TextAlignment {\r\n        Left = 0,\r\n        Center = 1,\r\n        Right = 2,\r\n        Justify = 3,\r\n    }\r\n\r\n    export enum TextTrimming {\r\n        None = 0,\r\n        WordEllipsis = 1,\r\n        CharacterEllipsis = 2,\r\n    }\r\n\r\n    export enum TextWrapping {\r\n        NoWrap = 0,\r\n        Wrap = 1,\r\n        WrapWithOverflow = 2,\r\n    }\r\n\r\n    export enum TextDecorations {\r\n        None = 0,\r\n        Underline = 1,\r\n    }\r\n\r\n    export enum FontWeight {\r\n        Thin = 100,\r\n        ExtraLight = 200,\r\n        Light = 300,\r\n        Normal = 400,\r\n        Medium = 500,\r\n        SemiBold = 600,\r\n        Bold = 700,\r\n        ExtraBold = 800,\r\n        Black = 900,\r\n        ExtraBlack = 950,\r\n    }\r\n\r\n    export enum SweepDirection {\r\n        Counterclockwise = 0,\r\n        Clockwise = 1,\r\n    }\r\n}\r\n","module minerva {\r\n    export enum DirtyFlags {\r\n        Transform = 1 << 0,\r\n        LocalTransform = 1 << 1,\r\n        Clip = 1 << 3,\r\n        LocalClip = 1 << 4,\r\n        LayoutClip = 1 << 5,\r\n        RenderVisibility = 1 << 6,\r\n        HitTestVisibility = 1 << 7,\r\n        ImageMetrics = 1 << 8,\r\n        Measure = 1 << 9,\r\n        Arrange = 1 << 10,\r\n        Bounds = 1 << 20,\r\n        NewBounds = 1 << 21,\r\n        Invalidate = 1 << 22,\r\n        InUpDirtyList = 1 << 30,\r\n        InDownDirtyList = 1 << 31,\r\n\r\n        DownDirtyState = Transform | LocalTransform\r\n            | Clip | LocalClip | LayoutClip | RenderVisibility\r\n            | HitTestVisibility | ImageMetrics,\r\n        UpDirtyState = Bounds | NewBounds | Invalidate,\r\n\r\n        PropagateDown = RenderVisibility | HitTestVisibility | Transform | LayoutClip\r\n    }\r\n    export enum UIFlags {\r\n        None = 0,\r\n\r\n        RenderVisible = 0x02,\r\n        HitTestVisible = 0x04,\r\n        TotalRenderVisible = 0x08,\r\n        TotalHitTestVisible = 0x10,\r\n\r\n        MeasureHint = 0x800,\r\n        ArrangeHint = 0x1000,\r\n        SizeHint = 0x2000,\r\n        Hints = MeasureHint | ArrangeHint | SizeHint\r\n    }\r\n    export enum ShapeFlags {\r\n        None = 0,\r\n        Empty = 1,\r\n        Normal = 2,\r\n        Degenerate = 4,\r\n        Radii = 8,\r\n    }\r\n}","/// <reference path=\"Enums.ts\" />\r\n\r\nmodule minerva {\r\n    export var FontStyle = {\r\n        Normal: \"normal\",\r\n        Italic: \"italic\",\r\n        Oblique: \"oblique\"\r\n    };\r\n    export var FontStretch = {\r\n        UltraCondensed: \"ultra-condensed\",\r\n        ExtraCondensed: \"extra-condensed\",\r\n        Condensed: \"condensed\",\r\n        SemiCondensed: \"semi-condensed\",\r\n        Normal: \"normal\",\r\n        SemiExpanded: \"semi-expanded\",\r\n        Expanded: \"expanded\",\r\n        ExtraExpanded: \"extra-expanded\",\r\n        UltraExpanded: \"ultra-expanded\"\r\n    };\r\n\r\n    /// References\r\n    //  Font-face generator: http://www.flaticon.com/font-face\r\n    //  How to use: http://stackoverflow.com/questions/14399484/how-to-render-segoe-ui-font-in-different-navigators-and-oss\r\n    //  Font Share: http://www.cssfontstack.com/\r\n\r\n    export class Font {\r\n        static DEFAULT_FAMILY = \"Segoe UI, Lucida Grande, Verdana\";\r\n        static DEFAULT_STRETCH = FontStretch.Normal;\r\n        static DEFAULT_STYLE = FontStyle.Normal;\r\n        static DEFAULT_WEIGHT = FontWeight.Normal;\r\n        static DEFAULT_SIZE = 14;\r\n\r\n        family: string = Font.DEFAULT_FAMILY;\r\n        size: number = Font.DEFAULT_SIZE;\r\n        stretch: string = Font.DEFAULT_STRETCH;\r\n        style: string = Font.DEFAULT_STYLE;\r\n        weight: FontWeight = Font.DEFAULT_WEIGHT;\r\n\r\n        private $$cachedObj: string = null;\r\n        private $$cachedHeight: number = null;\r\n\r\n        static mergeInto (font: Font, family: string, size: number, stretch: string, style: string, weight: FontWeight): boolean {\r\n            var changed = font.family !== family\r\n                || font.size !== size\r\n                || font.stretch !== stretch\r\n                || font.style !== style\r\n                || font.weight !== weight;\r\n            font.family = family;\r\n            font.size = size;\r\n            font.stretch = stretch;\r\n            font.style = style;\r\n            font.weight = weight;\r\n            if (changed) {\r\n                font.$$cachedObj = null;\r\n                font.$$cachedHeight = null;\r\n            }\r\n            return changed;\r\n        }\r\n\r\n        toHtml5Object (): any {\r\n            return this.$$cachedObj = this.$$cachedObj || translateFont(this);\r\n        }\r\n\r\n        getHeight (): number {\r\n            if (this.$$cachedHeight == null)\r\n                this.$$cachedHeight = fontHeight.get(this);\r\n            return this.$$cachedHeight;\r\n        }\r\n\r\n        getAscender (): number {\r\n            return 0;\r\n        }\r\n\r\n        getDescender (): number {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function translateFont (font: Font): string {\r\n        //Format: font-style font-variant font-weight font-size/line-height font-family\r\n        //Font Styles: normal, italic, oblique\r\n        //Font Variants: normal, small-caps\r\n        //Font Weights: normal, bold, bolder, lighter, 100, 200, 300, 400, 500, 600, 700, 800, 900\r\n        var s = \"\";\r\n        s += font.style.toString() + \" \";\r\n        s += \"normal \";\r\n        s += (<number>font.weight).toString() + \" \";\r\n        s += font.size + \"px \";\r\n        s += font.family.toString();\r\n        return s;\r\n    }\r\n}","module minerva.fontHeight {\r\n    var heights = [];\r\n\r\n    export var cache = {\r\n        hits: 0,\r\n        misses: 0\r\n    };\r\n\r\n    export function get (font: Font): number {\r\n        var serial = font.toHtml5Object();\r\n        var height = heights[serial];\r\n        if (height == null) {\r\n            heights[serial] = height = measure(serial);\r\n            cache.misses++;\r\n        } else {\r\n            cache.hits++;\r\n        }\r\n        return height;\r\n    }\r\n\r\n\r\n    var dummy: HTMLElement;\r\n\r\n    function measure (serial: string): number {\r\n        perfex.timer.start('MeasureFontHeight', serial);\r\n        if (!dummy) {\r\n            dummy = document.createElement(\"div\");\r\n            dummy.appendChild(document.createTextNode(\"Hg\"));\r\n            document.body.appendChild(dummy);\r\n        }\r\n        dummy.style.display = \"\";\r\n        dummy.style.font = serial;\r\n        var result = dummy.offsetHeight;\r\n        dummy.style.display = \"none\";\r\n        perfex.timer.stop();\r\n        return result;\r\n    }\r\n}","module minerva {\r\n    export interface IBrush {\r\n        isTransparent(): boolean;\r\n        setupBrush(ctx: CanvasRenderingContext2D, region: Rect);\r\n        toHtml5Object(): any;\r\n    }\r\n\r\n    /*\r\n     function isBrushTransparent (brush: IBrush) {\r\n     if (!brush)\r\n     return true;\r\n     if (brush instanceof Media.SolidColorBrush)\r\n     return (<Media.SolidColorBrush>brush).Color.A < 1.0;\r\n     if (brush instanceof Media.LinearGradientBrush) {\r\n     var enumerator = (<Media.LinearGradientBrush>brush).GradientStops.getEnumerator();\r\n     while (enumerator.moveNext()) {\r\n     if (enumerator.current.Color.A < 1.0)\r\n     return true;\r\n     }\r\n     return false;\r\n     }\r\n     return true;\r\n     }\r\n     */\r\n\r\n    export class FakeBrush implements IBrush {\r\n        constructor (public raw: any) {\r\n        }\r\n\r\n        isTransparent (): boolean {\r\n            return false;\r\n        }\r\n\r\n        setupBrush (ctx: CanvasRenderingContext2D, region: Rect): any {\r\n        }\r\n\r\n        toHtml5Object (): any {\r\n            return this.raw;\r\n        }\r\n    }\r\n}","module minerva {\r\n    export var NO_SIZE_UPDATER: ISizeUpdater = {\r\n        setActualWidth (value: number) {\r\n        },\r\n        setActualHeight (value: number) {\r\n        },\r\n        onSizeChanged (oldSize: Size, newSize: Size) {\r\n        }\r\n    };\r\n\r\n    export interface ISizeUpdater {\r\n        setActualWidth(value: number);\r\n        setActualHeight(value: number);\r\n        onSizeChanged(oldSize: Size, newSize: Size);\r\n    }\r\n}","module minerva {\r\n    export interface IWalker<T> {\r\n        current: T;\r\n        step(): boolean;\r\n    }\r\n\r\n    export interface IDeepWalker<T> {\r\n        current: T;\r\n        step(): boolean;\r\n        skipBranch();\r\n    }\r\n\r\n    export enum WalkDirection {\r\n        Forward = 0,\r\n        Reverse = 1,\r\n        ZForward = 2,\r\n        ZReverse = 3\r\n    }\r\n}","module minerva {\r\n    export interface IPoint {\r\n        x: number;\r\n        y: number;\r\n    }\r\n\r\n    export class Point implements IPoint {\r\n        x: number;\r\n        y: number;\r\n\r\n        constructor(x?: number, y?: number) {\r\n            this.x = x == null ? 0 : x;\r\n            this.y = y == null ? 0 : y;\r\n        }\r\n\r\n        static isEqual(p1: IPoint, p2: IPoint): boolean {\r\n            return p1.x === p2.x\r\n                && p1.y === p2.y;\r\n        }\r\n\r\n        static copyTo(src: IPoint, dest: IPoint) {\r\n            dest.x = src.x;\r\n            dest.y = src.y;\r\n        }\r\n    }\r\n}","interface IVector2Static {\r\n    create(x: number, y: number): number[];\r\n    init(x: number, y: number, dest?: number[]): number[];\r\n}\r\nmodule minerva {\r\n    var createTypedArray: (length: number) => number[];\r\n\r\n    if (typeof Float32Array !== \"undefined\") {\r\n        createTypedArray = function (length: number): number[] {\r\n            return <number[]><any>new Float32Array(length);\r\n        };\r\n    } else {\r\n        createTypedArray = function (length: number): number[] {\r\n            return <number[]>new Array(length);\r\n        };\r\n    }\r\n\r\n    export var vec2: IVector2Static = {\r\n        create (x: number, y: number): number[] {\r\n            var dest = createTypedArray(2);\r\n            dest[0] = x;\r\n            dest[1] = y;\r\n            return dest;\r\n        },\r\n        init (x: number, y: number, dest?: number[]): number[] {\r\n            if (!dest) dest = createTypedArray(2);\r\n            dest[0] = x;\r\n            dest[1] = y;\r\n            return dest;\r\n        }\r\n    };\r\n}\r\n\r\nvar vec2 = minerva.vec2;","/// <reference path=\"mat/vec2\" />\r\n\r\nmodule minerva {\r\n    export enum RectOverlap {\r\n        Out,\r\n        In,\r\n        Part,\r\n    }\r\n\r\n    var p1 = vec2.create(0, 0);\r\n    var p2 = vec2.create(0, 0);\r\n    var p3 = vec2.create(0, 0);\r\n    var p4 = vec2.create(0, 0);\r\n\r\n    export class Rect implements IPoint, ISize {\r\n        x: number;\r\n        y: number;\r\n        width: number;\r\n        height: number;\r\n\r\n        constructor (x?: number, y?: number, width?: number, height?: number) {\r\n            this.x = x == null ? 0 : x;\r\n            this.y = y == null ? 0 : y;\r\n            this.width = width == null ? 0 : width;\r\n            this.height = height == null ? 0 : height;\r\n        }\r\n\r\n        static clear (rect: Rect) {\r\n            rect.x = rect.y = rect.width = rect.height = 0;\r\n        }\r\n\r\n        static getBottom (rect: Rect): number {\r\n            return rect.y + rect.height;\r\n        }\r\n\r\n        static getRight (rect: Rect): number {\r\n            return rect.x + rect.width;\r\n        }\r\n\r\n        static isEqual (rect1: Rect, rect2: Rect): boolean {\r\n            return rect1.x === rect2.x\r\n                && rect1.y === rect2.y\r\n                && rect1.width === rect2.width\r\n                && rect1.height === rect2.height;\r\n        }\r\n\r\n        static isEmpty (src: Rect): boolean {\r\n            return src.width === 0\r\n                || src.height === 0;\r\n        }\r\n\r\n        static copyTo (src: Rect, dest: Rect) {\r\n            dest.x = src.x;\r\n            dest.y = src.y;\r\n            dest.width = src.width;\r\n            dest.height = src.height;\r\n        }\r\n\r\n        static roundOut (dest: Rect) {\r\n            var x = Math.floor(dest.x);\r\n            var y = Math.floor(dest.y);\r\n            dest.width = Math.ceil(dest.x + dest.width) - x;\r\n            dest.height = Math.ceil(dest.y + dest.height) - y;\r\n            dest.x = x;\r\n            dest.y = y;\r\n        }\r\n\r\n        static roundIn (dest: Rect) {\r\n            var x = Math.ceil(dest.x);\r\n            var y = Math.ceil(dest.y);\r\n            dest.width = Math.floor(dest.x + dest.width) - Math.ceil(dest.x);\r\n            dest.height = Math.floor(dest.y + dest.height) - Math.ceil(dest.y);\r\n            dest.x = x;\r\n            dest.y = y;\r\n            return dest;\r\n        }\r\n\r\n        static intersection (dest: Rect, rect2: Rect) {\r\n            var x = Math.max(dest.x, rect2.x);\r\n            var y = Math.max(dest.y, rect2.y);\r\n            dest.width = Math.max(0, Math.min(dest.x + dest.width, rect2.x + rect2.width) - x);\r\n            dest.height = Math.max(0, Math.min(dest.y + dest.height, rect2.y + rect2.height) - y);\r\n            dest.x = x;\r\n            dest.y = y;\r\n        }\r\n\r\n        static union (dest: Rect, rect2: Rect) {\r\n            if (rect2.width <= 0 || rect2.height <= 0)\r\n                return;\r\n            if (dest.width <= 0 || dest.height <= 0) {\r\n                Rect.copyTo(rect2, dest);\r\n                return;\r\n            }\r\n\r\n            var x = Math.min(dest.x, rect2.x);\r\n            var y = Math.min(dest.y, rect2.y);\r\n            dest.width = Math.max(dest.x + dest.width, rect2.x + rect2.width) - x;\r\n            dest.height = Math.max(dest.y + dest.height, rect2.y + rect2.height) - y;\r\n            dest.x = x;\r\n            dest.y = y;\r\n        }\r\n\r\n        static isContainedIn (src: Rect, test: Rect) {\r\n            var sl = src.x;\r\n            var st = src.y;\r\n            var sr = src.x + src.width;\r\n            var sb = src.y + src.height;\r\n\r\n            var tl = test.x;\r\n            var tt = test.y;\r\n            var tr = test.x + test.width;\r\n            var tb = test.y + test.height;\r\n\r\n            if (sl < tl || st < tt || sl > tr || st > tb) //src top-left is outside test\r\n                return false;\r\n            if (sr < tl || sb < tt || sr > tr || sb > tb) //src bottom-right is outside test\r\n                return false;\r\n            return true;\r\n        }\r\n\r\n        static containsPoint (rect1: Rect, p: Point): boolean {\r\n            return rect1.x <= p.x\r\n                && rect1.y <= p.y\r\n                && (rect1.x + rect1.width) >= p.x\r\n                && (rect1.y + rect1.height) >= p.y;\r\n        }\r\n\r\n        static extendTo (dest: Rect, x: number, y: number) {\r\n            var rx = dest.x;\r\n            var ry = dest.y;\r\n            var rw = dest.width;\r\n            var rh = dest.height;\r\n\r\n            if (x < rx || x > (rx + rw))\r\n                rw = Math.max(Math.abs(x - rx), Math.abs(x - rx - rw));\r\n            if (y < ry || y > (ry + rh))\r\n                rh = Math.max(Math.abs(y - ry), Math.abs(y - ry - rh));\r\n\r\n            dest.x = Math.min(rx, x);\r\n            dest.y = Math.min(ry, y);\r\n            dest.width = rw;\r\n            dest.height = rh;\r\n        }\r\n\r\n        static grow (dest: Rect, left: number, top: number, right: number, bottom: number) {\r\n            dest.x -= left;\r\n            dest.y -= top;\r\n            dest.width += left + right;\r\n            dest.height += top + bottom;\r\n            if (dest.width < 0)\r\n                dest.width = 0;\r\n            if (dest.height < 0)\r\n                dest.height = 0;\r\n            return dest;\r\n        }\r\n\r\n        static shrink (dest: Rect, left: number, top: number, right: number, bottom: number) {\r\n            dest.x += left;\r\n            dest.y += top;\r\n            dest.width -= left + right;\r\n            dest.height -= top + bottom;\r\n            if (dest.width < 0)\r\n                dest.width = 0;\r\n            if (dest.height < 0)\r\n                dest.height = 0;\r\n        }\r\n\r\n        static rectIn (rect1: Rect, rect2: Rect) {\r\n            //TODO: Implement without creating Rect\r\n            var copy = new Rect();\r\n            Rect.copyTo(rect1, copy);\r\n            Rect.intersection(copy, rect2);\r\n            if (Rect.isEmpty(copy))\r\n                return RectOverlap.Out;\r\n            if (Rect.isEqual(copy, rect2))\r\n                return RectOverlap.In;\r\n            return RectOverlap.Part;\r\n        }\r\n\r\n        static transform (dest: Rect, mat: number[]) {\r\n            if (!mat)\r\n                return dest;\r\n            var x = dest.x;\r\n            var y = dest.y;\r\n            var width = dest.width;\r\n            var height = dest.height;\r\n\r\n            vec2.init(x, y, p1);\r\n            vec2.init(x + width, y, p2);\r\n            vec2.init(x + width, y + height, p3);\r\n            vec2.init(x, y + height, p4);\r\n\r\n            mat3.transformVec2(mat, p1);\r\n            mat3.transformVec2(mat, p2);\r\n            mat3.transformVec2(mat, p3);\r\n            mat3.transformVec2(mat, p4);\r\n\r\n            var l = Math.min(p1[0], p2[0], p3[0], p4[0]);\r\n            var t = Math.min(p1[1], p2[1], p3[1], p4[1]);\r\n            var r = Math.max(p1[0], p2[0], p3[0], p4[0]);\r\n            var b = Math.max(p1[1], p2[1], p3[1], p4[1]);\r\n\r\n            dest.x = l;\r\n            dest.y = t;\r\n            dest.width = r - l;\r\n            dest.height = b - t;\r\n            return dest;\r\n        }\r\n\r\n        static transform4 (dest: Rect, projection: number[]) {\r\n            //See mat/transform4.ts\r\n        }\r\n    }\r\n}","module minerva {\r\n    export interface ISize {\r\n        width: number;\r\n        height: number;\r\n    }\r\n\r\n    export class Size implements ISize {\r\n        width: number;\r\n        height: number;\r\n\r\n        constructor (width?: number, height?: number) {\r\n            this.width = width == null ? 0 : width;\r\n            this.height = height == null ? 0 : height;\r\n        }\r\n\r\n        static copyTo (src: ISize, dest: ISize) {\r\n            dest.width = src.width;\r\n            dest.height = src.height;\r\n        }\r\n\r\n        static isEqual (size1: ISize, size2: ISize): boolean {\r\n            return size1.width === size2.width\r\n                && size1.height === size2.height;\r\n        }\r\n\r\n        static isEmpty (size: Size): boolean {\r\n            return size.width === 0\r\n                || size.height === 0;\r\n        }\r\n\r\n        static min (dest: ISize, size2: ISize) {\r\n            dest.width = Math.min(dest.width, size2.width);\r\n            dest.height = Math.min(dest.height, size2.height);\r\n        }\r\n\r\n        static isUndef (size: ISize): boolean {\r\n            return isNaN(size.width) && isNaN(size.height);\r\n        }\r\n\r\n        static undef (size: ISize) {\r\n            size.width = NaN;\r\n            size.height = NaN;\r\n        }\r\n    }\r\n}","module minerva {\r\n    export class Thickness {\r\n        left: number;\r\n        top: number;\r\n        right: number;\r\n        bottom: number;\r\n\r\n        constructor (left?: number, top?: number, right?: number, bottom?: number) {\r\n            this.left = left == null ? 0 : left;\r\n            this.top = top == null ? 0 : top;\r\n            this.right = right == null ? 0 : right;\r\n            this.bottom = bottom == null ? 0 : bottom;\r\n        }\r\n\r\n        static add (dest: Thickness, t2: Thickness) {\r\n            dest.left += t2.left;\r\n            dest.top += t2.top;\r\n            dest.right += t2.right;\r\n            dest.bottom += t2.bottom;\r\n        }\r\n\r\n        static copyTo (thickness: Thickness, dest: Thickness) {\r\n            dest.left = thickness.left;\r\n            dest.top = thickness.top;\r\n            dest.right = thickness.right;\r\n            dest.bottom = thickness.bottom;\r\n        }\r\n\r\n        static isEmpty (thickness: Thickness): boolean {\r\n            return thickness.left === 0 && thickness.top === 0 && thickness.right === 0 && thickness.bottom === 0;\r\n        }\r\n\r\n        static isBalanced (thickness: Thickness): boolean {\r\n            return thickness.left === thickness.top\r\n                && thickness.left === thickness.right\r\n                && thickness.left === thickness.bottom;\r\n        }\r\n\r\n        static shrinkSize (thickness: Thickness, dest: Size) {\r\n            var w = dest.width;\r\n            var h = dest.height;\r\n            if (w != Number.POSITIVE_INFINITY)\r\n                w -= thickness.left + thickness.right;\r\n            if (h != Number.POSITIVE_INFINITY)\r\n                h -= thickness.top + thickness.bottom;\r\n            dest.width = w > 0 ? w : 0;\r\n            dest.height = h > 0 ? h : 0;\r\n            return dest;\r\n        }\r\n\r\n        static shrinkRect (thickness: Thickness, dest: Rect) {\r\n            dest.x += thickness.left;\r\n            dest.y += thickness.top;\r\n            dest.width -= thickness.left + thickness.right;\r\n            dest.height -= thickness.top + thickness.bottom;\r\n            if (dest.width < 0)\r\n                dest.width = 0;\r\n            if (dest.height < 0)\r\n                dest.height = 0;\r\n        }\r\n\r\n        static shrinkCornerRadius (thickness: Thickness, dest: ICornerRadius) {\r\n            dest.topLeft = Math.max(dest.topLeft - Math.max(thickness.left, thickness.top) * 0.5, 0);\r\n            dest.topRight = Math.max(dest.topRight - Math.max(thickness.right, thickness.top) * 0.5, 0);\r\n            dest.bottomRight = Math.max(dest.bottomRight - Math.max(thickness.right, thickness.bottom) * 0.5, 0);\r\n            dest.bottomLeft = Math.max(dest.bottomLeft - Math.max(thickness.left, thickness.bottom) * 0.5, 0);\r\n        }\r\n\r\n        static growSize (thickness: Thickness, dest: Size) {\r\n            var w = dest.width;\r\n            var h = dest.height;\r\n            if (w != Number.POSITIVE_INFINITY)\r\n                w += thickness.left + thickness.right;\r\n            if (h != Number.POSITIVE_INFINITY)\r\n                h += thickness.top + thickness.bottom;\r\n            dest.width = w > 0 ? w : 0;\r\n            dest.height = h > 0 ? h : 0;\r\n            return dest;\r\n        }\r\n\r\n        static growRect (thickness: Thickness, dest: Rect) {\r\n            dest.x -= thickness.left;\r\n            dest.y -= thickness.top;\r\n            dest.width += thickness.left + thickness.right;\r\n            dest.height += thickness.top + thickness.bottom;\r\n            if (dest.width < 0)\r\n                dest.width = 0;\r\n            if (dest.height < 0)\r\n                dest.height = 0;\r\n        }\r\n\r\n        static growCornerRadius (thickness: Thickness, dest: ICornerRadius) {\r\n            dest.topLeft = dest.topLeft ? Math.max(dest.topLeft + Math.max(thickness.left, thickness.top) * 0.5, 0) : 0;\r\n            dest.topRight = dest.topRight ? Math.max(dest.topRight + Math.max(thickness.right, thickness.top) * 0.5, 0) : 0;\r\n            dest.bottomRight = dest.bottomRight ? Math.max(dest.bottomRight + Math.max(thickness.right, thickness.bottom) * 0.5, 0) : 0;\r\n            dest.bottomLeft = dest.bottomLeft ? Math.max(dest.bottomLeft + Math.max(thickness.left, thickness.bottom) * 0.5, 0) : 0;\r\n        }\r\n    }\r\n}","module minerva.Vector {\r\n    var EPSILON = 1e-10;\r\n\r\n    export function create(x: number, y: number): number[] {\r\n        return [x, y];\r\n    }\r\n\r\n    export function reverse(v: number[]) {\r\n        v[0] = -v[0];\r\n        v[1] = -v[1];\r\n        return v;\r\n    }\r\n\r\n    /// Equivalent of rotating 90 degrees clockwise (screen space)\r\n    export function orthogonal(v: number[]) {\r\n        var x = v[0],\r\n            y = v[1];\r\n        v[0] = -y;\r\n        v[1] = x;\r\n        return v;\r\n    }\r\n\r\n    export function normalize(v: number[]) {\r\n        var x = v[0],\r\n            y = v[1];\r\n        var len = Math.sqrt(x * x + y * y);\r\n        v[0] = x / len;\r\n        v[1] = y / len;\r\n        return v;\r\n    }\r\n\r\n    /// Rotates a vector(v) by angle(theta) clockwise(screen space) ...which is counter-clockwise in coordinate space\r\n    export function rotate(v: number[], theta: number) {\r\n        var c = Math.cos(theta);\r\n        var s = Math.sin(theta);\r\n        var x = v[0];\r\n        var y = v[1];\r\n        v[0] = x * c - y * s;\r\n        v[1] = x * s + y * c;\r\n        return v;\r\n    }\r\n\r\n\r\n\r\n    /// Returns smallest angle (in radians) between 2 vectors\r\n    export function angleBetween(u: number[], v: number[]): number {\r\n        var ux = u[0],\r\n            uy = u[1],\r\n            vx = v[0],\r\n            vy = v[1];\r\n        var num = ux * vx + uy * vy;\r\n        var den = Math.sqrt(ux * ux + uy * uy) * Math.sqrt(vx * vx + vy * vy);\r\n        return Math.acos(num / den);\r\n    }\r\n\r\n    /// By rotating from vector(v1) to vector(v2), tests whether that angle is clockwise (screen space)\r\n    export function isClockwiseTo(v1: number[], v2: number[]) {\r\n        var theta = angleBetween(v1, v2);\r\n        var nv1 = normalize(v1.slice(0));\r\n        var nv2 = normalize(v2.slice(0));\r\n        rotate(nv1, theta);\r\n        var nx = Math.abs(nv1[0] - nv2[0]);\r\n        var ny = Math.abs(nv1[1] - nv2[1]);\r\n        return nx < EPSILON\r\n            && ny < EPSILON;\r\n    }\r\n\r\n    /// Finds intersection of v1(s1 + t(d1)) and v2(s2 + t(d2))\r\n    export function intersection(s1: number[], d1: number[], s2: number[], d2: number[]): number[] {\r\n        var x1 = s1[0];\r\n        var y1 = s1[1];\r\n        var x2 = x1 + d1[0];\r\n        var y2 = y1 + d1[1];\r\n\r\n        var x3 = s2[0];\r\n        var y3 = s2[1];\r\n        var x4 = x3 + d2[0];\r\n        var y4 = y3 + d2[1];\r\n\r\n\r\n        var det = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\r\n        if (det === 0)\r\n            return null;\r\n\r\n        var xn = ((x1 * y2 - y1 * x2) * (x3 - x4)) - ((x1 - x2) * (x3 * y4 - y3 * x4));\r\n        var yn = ((x1 * y2 - y1 * x2) * (y3 - y4)) - ((y1 - y2) * (x3 * y4 - y3 * x4));\r\n        return [xn / det, yn / det];\r\n    }\r\n}","module minerva {\r\n    export enum Visibility {\r\n        Visible = 0,\r\n        Collapsed = 1\r\n    }\r\n}","module minerva {\r\n    var hitTestCtx: minerva.core.render.RenderContext = null;\r\n\r\n    export function findElementsInHostSpace (pos: Point, host: core.Updater) {\r\n        hitTestCtx = hitTestCtx || new core.render.RenderContext(<CanvasRenderingContext2D>document.createElement('canvas').getContext('2d'));\r\n        var inv = mat3.inverse(host.assets.renderXform, mat3.create());\r\n\r\n        hitTestCtx.save();\r\n        hitTestCtx.preapply(inv);\r\n        var list: minerva.core.Updater[] = [];\r\n        host.hitTest(pos, list, hitTestCtx, true);\r\n        hitTestCtx.restore();\r\n        return list;\r\n    }\r\n}\r\n","module minerva {\r\n    export var errors = [];\r\n\r\n    export function layoutError (tree: core.IUpdaterTree, pipedef: any, message: string) {\r\n        errors.push({\r\n            tree: tree,\r\n            pipedef: pipedef,\r\n            message: message\r\n        });\r\n    }\r\n}","module minerva {\n    export function getNaturalCanvasSize(canvas: HTMLCanvasElement): Size {\n        var zoomFactor = minerva.zoom.calc();\n        return new Size(canvas.offsetWidth * zoomFactor, canvas.offsetHeight * zoomFactor);\n    }\n}","module minerva {\r\n    export function singleton (type: Function): any {\r\n        var x = <any>type;\r\n        if (!x.$$instance)\r\n            Object.defineProperty(x, '$$instance', {value: new x(), enumerable: false});\r\n        return x.$$instance;\r\n    }\r\n}","module minerva.zoom {\n    export var calc: () => number = (() => {\n        if ((<any>document).frames) //IE 7-9\n            return ie();\n        return chrome();\n    })();\n\n    function ie() {\n        return () => {\n            var screen = (<any>document).frames.screen;\n            var zoom = screen.deviceXDPI / screen.systemXDPI;\n            return Math.round(zoom * 100) / 100;\n        };\n    }\n\n    function chrome() {\n        var svg: SVGSVGElement;\n\n        function memoizeSvg() {\n            if (!!svg || !document.body)\n                return;\n            svg = <SVGSVGElement>document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n            svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n            svg.setAttribute('version', '1.1');\n            document.body.appendChild(svg);\n            ((style: CSSStyleDeclaration) => {\n                style.opacity = \"0.0\";\n                style.position = \"absolute\";\n                style.left = \"-300px\";\n                //style.top = \"-150px\";\n            })(<any>svg.style);\n        }\n\n        return () => {\n            memoizeSvg();\n            return !svg ? 1 : svg.currentScale;\n        };\n    }\n}\n",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"module minerva.controls.border.arrange {\r\n    export interface IInput extends core.arrange.IInput {\r\n        padding: Thickness;\r\n        borderThickness: Thickness;\r\n    }\r\n    export interface IState extends core.arrange.IState {\r\n        totalBorder: Thickness;\r\n    }\r\n    export interface IOutput extends core.arrange.IOutput {\r\n    }\r\n\r\n    export class BorderArrangePipeDef extends core.arrange.ArrangePipeDef {\r\n        constructor () {\r\n            super();\r\n            this.addTapinBefore('doOverride', 'preOverride', preOverride)\r\n                .replaceTapin('doOverride', doOverride);\r\n        }\r\n\r\n        createState (): IState {\r\n            var state = <IState>super.createState();\r\n            state.totalBorder = new Thickness();\r\n            return state;\r\n        }\r\n    }\r\n\r\n    export function preOverride (input: IInput, state: IState, output: IOutput, tree: BorderUpdaterTree, finalRect: Rect): boolean {\r\n        if (!tree.subtree)\r\n            return true;\r\n        var tb = state.totalBorder;\r\n        Thickness.copyTo(input.padding, tb);\r\n        Thickness.add(tb, input.borderThickness);\r\n\r\n        var cr = state.childRect;\r\n        cr.x = cr.y = 0;\r\n        Size.copyTo(state.finalSize, cr);\r\n        Thickness.shrinkRect(tb, cr);\r\n        return true;\r\n    }\r\n\r\n    export function doOverride (input: IInput, state: IState, output: IOutput, tree: BorderUpdaterTree, finalRect: Rect): boolean {\r\n        if (tree.subtree)\r\n            tree.subtree.arrange(state.childRect);\r\n        Size.copyTo(state.finalSize, state.arrangedSize);\r\n        return true;\r\n    }\r\n}\r\n","module minerva.controls.border.hittest {\r\n    export interface IHitTestData extends core.hittest.IHitTestData {\r\n        assets: IBorderUpdaterAssets;\r\n    }\r\n\r\n    export class BorderHitTestPipeDef extends core.hittest.HitTestPipeDef {\r\n        constructor () {\r\n            super();\r\n            this.replaceTapin('canHitInside', tapins.canHitInside);\r\n        }\r\n    }\r\n\r\n    export module tapins {\r\n        export function canHitInside (data: IHitTestData, pos: Point, hitList: core.Updater[], ctx: core.render.RenderContext): boolean {\r\n            if (data.hitChildren)\r\n                return true;\r\n\r\n            if (!data.assets.background && !data.assets.borderBrush) {\r\n                hitList.shift();\r\n                ctx.restore();\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n}","/// <reference path=\"../../../core/measure/MeasurePipeDef\" />\r\n\r\nmodule minerva.controls.border.measure {\r\n    export interface IInput extends core.measure.IInput {\r\n        padding: Thickness;\r\n        borderThickness: Thickness;\r\n    }\r\n    export interface IState extends core.measure.IState {\r\n        totalBorder: Thickness;\r\n    }\r\n    export interface IOutput extends core.measure.IOutput {\r\n    }\r\n\r\n    export class BorderMeasurePipeDef extends core.measure.MeasurePipeDef {\r\n        constructor () {\r\n            super();\r\n            this.addTapinBefore('doOverride', 'preOverride', preOverride)\r\n                .replaceTapin('doOverride', doOverride)\r\n                .addTapinAfter('doOverride', 'postOverride', postOverride);\r\n        }\r\n\r\n        createState (): IState {\r\n            var state = <IState>super.createState();\r\n            state.totalBorder = new Thickness();\r\n            return state;\r\n        }\r\n    }\r\n\r\n    export function preOverride (input: IInput, state: IState, output: IOutput, tree: BorderUpdaterTree, availableSize: Size): boolean {\r\n        var tb = state.totalBorder;\r\n        Thickness.copyTo(input.padding, tb);\r\n        Thickness.add(tb, input.borderThickness);\r\n        Thickness.shrinkSize(tb, state.availableSize);\r\n        return true;\r\n    }\r\n\r\n    export function doOverride (input: IInput, state: IState, output: IOutput, tree: BorderUpdaterTree, availableSize: Size): boolean {\r\n        var ds = output.desiredSize;\r\n        if (tree.subtree) {\r\n            tree.subtree.measure(state.availableSize);\r\n            Size.copyTo(tree.subtree.assets.desiredSize, ds);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    export function postOverride (input: IInput, state: IState, output: IOutput, tree: BorderUpdaterTree, availableSize: Size): boolean {\r\n        Thickness.growSize(state.totalBorder, output.desiredSize);\r\n        Size.min(output.desiredSize, state.availableSize);\r\n        return true;\r\n    }\r\n}","module minerva.controls.border.render {\r\n    export interface IInput extends core.render.IInput {\r\n        extents: Rect;\r\n        background: IBrush;\r\n        borderBrush: IBrush;\r\n        borderThickness: Thickness;\r\n        cornerRadius: CornerRadius;\r\n    }\r\n    export interface IState extends core.render.IState {\r\n        shouldRender: boolean;\r\n        fillExtents: Rect;\r\n        innerCornerRadius: CornerRadius;\r\n        outerCornerRadius: CornerRadius;\r\n    }\r\n    export interface IOutput extends core.render.IOutput {\r\n    }\r\n\r\n    export class BorderRenderPipeDef extends core.render.RenderPipeDef {\r\n        constructor () {\r\n            super();\r\n            this.addTapinBefore('doRender', 'calcShouldRender', tapins.calcShouldRender)\r\n                .addTapinBefore('doRender', 'calcInnerOuter', tapins.calcInnerOuter)\r\n                .replaceTapin('doRender', tapins.doRender);\r\n        }\r\n\r\n        createState (): IState {\r\n            var state = <IState>super.createState();\r\n            state.fillExtents = new Rect();\r\n            state.innerCornerRadius = new CornerRadius();\r\n            state.outerCornerRadius = new CornerRadius();\r\n            return state;\r\n        }\r\n    }\r\n}","module minerva.controls.border.render {\r\n    export interface IShimState extends IState {\r\n        middleCornerRadius: CornerRadius;\r\n        strokeExtents: Rect;\r\n        pattern: CanvasPattern;\r\n        oldMetrics: any;\r\n    }\r\n\r\n    export class ShimBorderRenderPipeDef extends BorderRenderPipeDef {\r\n        constructor () {\r\n            super();\r\n            this.addTapinBefore('doRender', 'calcBalanced', tapins.shim.calcBalanced)\r\n                .addTapinBefore('doRender', 'invalidatePattern', tapins.shim.invalidatePattern)\r\n                .addTapinBefore('doRender', 'createPattern', tapins.shim.createPattern)\r\n                .replaceTapin('doRender', tapins.shim.doRender);\r\n        }\r\n\r\n        createState (): IShimState {\r\n            var state = <IShimState>super.createState();\r\n            state.middleCornerRadius = new CornerRadius();\r\n            state.strokeExtents = new Rect();\r\n            state.pattern = null;\r\n            state.oldMetrics = null;\r\n            return state;\r\n        }\r\n    }\r\n}","module minerva.controls.panel.arrange {\r\n    export interface IInput extends core.arrange.IInput {\r\n    }\r\n    export interface IState extends core.arrange.IState {\r\n    }\r\n    export interface IOutput extends core.arrange.IOutput {\r\n    }\r\n\r\n    export class PanelArrangePipeDef extends core.arrange.ArrangePipeDef {\r\n        constructor () {\r\n            super();\r\n            this.replaceTapin('doOverride', tapins.doOverride);\r\n        }\r\n    }\r\n}","/// <reference path=\"../../panel/arrange/PanelArrangePipeDef\" />\r\n\r\nmodule minerva.controls.canvas.arrange {\r\n    export interface IInput extends panel.arrange.IInput {\r\n    }\r\n    export interface IState extends panel.arrange.IState {\r\n    }\r\n    export interface IOutput extends panel.arrange.IOutput {\r\n    }\r\n\r\n    export class CanvasArrangePipeDef extends panel.arrange.PanelArrangePipeDef {\r\n        constructor () {\r\n            super();\r\n            this.replaceTapin('doOverride', tapins.doOverride)\r\n                .replaceTapin('buildLayoutClip', tapins.buildLayoutClip);\r\n        }\r\n    }\r\n}","module minerva.controls.panel.measure {\r\n    export interface IInput extends core.measure.IInput {\r\n    }\r\n    export interface IState extends core.measure.IState {\r\n    }\r\n    export interface IOutput extends core.measure.IOutput {\r\n    }\r\n\r\n    export class PanelMeasurePipeDef extends core.measure.MeasurePipeDef {\r\n        constructor () {\r\n            super();\r\n            this.replaceTapin('doOverride', doOverride);\r\n        }\r\n    }\r\n\r\n    function doOverride (input: IInput, state: IState, output: IOutput, tree: core.IUpdaterTree, availableSize: Size): boolean {\r\n        var desired = output.desiredSize;\r\n        desired.width = desired.height = 0;\r\n        for (var walker = tree.walk(); walker.step();) {\r\n            walker.current.measure(state.availableSize);\r\n            var childds = walker.current.assets.desiredSize;\r\n            desired.width = Math.max(desired.width, childds.width);\r\n            desired.height = Math.max(desired.height, childds.height);\r\n        }\r\n        return true;\r\n    }\r\n}","/// <reference path=\"../../panel/measure/PanelMeasurePipeDef\" />\r\n\r\nmodule minerva.controls.canvas.measure {\r\n    export interface IInput extends panel.measure.IInput {\r\n    }\r\n    export interface IState extends panel.measure.IState {\r\n    }\r\n    export interface IOutput extends panel.measure.IOutput {\r\n    }\r\n\r\n    export class CanvasMeasurePipeDef extends panel.measure.PanelMeasurePipeDef {\r\n        constructor () {\r\n            super();\r\n            this.replaceTapin('doOverride', tapins.doOverride);\r\n        }\r\n    }\r\n}","module minerva.controls.canvas.processdown {\r\n    export class CanvasProcessDownPipeDef extends core.processdown.ProcessDownPipeDef {\r\n        constructor () {\r\n            super();\r\n            this.replaceTapin('processLayoutClip', tapins.processLayoutClip);\r\n        }\r\n    }\r\n\r\n    export module tapins {\r\n        export function processLayoutClip (input: core.processdown.IInput, state: core.processdown.IState, output: core.processdown.IOutput, vpinput: core.processdown.IInput, tree: core.IUpdaterTree): boolean {\r\n            if ((input.dirtyFlags & DirtyFlags.LayoutClip) === 0)\r\n                return true;\r\n\r\n            var clc = input.compositeLayoutClip;\r\n            clc.x = clc.y = clc.width = clc.height;\r\n            return true;\r\n        }\r\n    }\r\n}","module minerva.controls.canvas.processup {\r\n    export interface IInput extends core.processup.IInput {\r\n    }\r\n    export interface IState extends core.processup.IState {\r\n    }\r\n    export interface IOutput extends core.processup.IOutput {\r\n    }\r\n    export class CanvasProcessUpPipeDef extends core.processup.ProcessUpPipeDef {\r\n        constructor () {\r\n            super();\r\n            this.replaceTapin('calcPaintBounds', tapins.calcPaintBounds);\r\n        }\r\n    }\r\n}","module minerva.controls.control.hittest {\r\n    export interface IHitTestData extends core.hittest.IHitTestData {\r\n        assets: IControlUpdaterAssets;\r\n    }\r\n\r\n    export class ControlHitTestPipeDef extends core.hittest.HitTestPipeDef {\r\n        constructor () {\r\n            super();\r\n            this.addTapinBefore('canHit', 'shouldSkip', tapins.shouldSkip)\r\n                .replaceTapin('canHitInside', tapins.canHitInside);\r\n        }\r\n    }\r\n\r\n    export module tapins {\r\n        export function shouldSkip (data: IHitTestData, pos: Point, hitList: core.Updater[], ctx: core.render.RenderContext): boolean {\r\n            return !!data.assets.isEnabled;\r\n        }\r\n\r\n        export function canHitInside (data: IHitTestData, pos: Point, hitList: core.Updater[], ctx: core.render.RenderContext): boolean {\r\n            if (data.hitChildren)\r\n                return true;\r\n\r\n            hitList.shift();\r\n            ctx.restore();\r\n            return false;\r\n        }\r\n    }\r\n}","module minerva.controls.grid.arrange {\r\n    export interface IInput extends panel.arrange.IInput {\r\n        gridState: IGridState;\r\n        columnDefinitions: IColumnDefinition[];\r\n        rowDefinitions: IRowDefinition[];\r\n    }\r\n    export interface IState extends panel.arrange.IState {\r\n        consumed: Size;\r\n    }\r\n    export interface IOutput extends panel.arrange.IOutput {\r\n    }\r\n\r\n    export class GridArrangePipeDef extends panel.arrange.PanelArrangePipeDef {\r\n        constructor () {\r\n            super();\r\n            this.addTapinBefore('doOverride', 'restoreMeasureResults', tapins.restoreMeasureResults)\r\n                .addTapinBefore('doOverride', 'calcConsumed', tapins.calcConsumed)\r\n                .addTapinBefore('doOverride', 'setActuals', tapins.setActuals)\r\n                .replaceTapin('doOverride', tapins.doOverride);\r\n        }\r\n\r\n        createState () {\r\n            var state = <IState>super.createState();\r\n            state.consumed = new Size();\r\n            return state;\r\n        }\r\n    }\r\n}","module minerva.controls.grid.measure {\r\n    export class GridChildPlacement {\r\n        constructor (public matrix: Segment[][], public row: number, public col: number, public size: number) {\r\n        }\r\n\r\n        static row (matrix: Segment[][], childShape: GridChildShape, child: core.Updater): GridChildPlacement {\r\n            return new GridChildPlacement(matrix, childShape.row + childShape.rowspan - 1, childShape.row, child.assets.desiredSize.height);\r\n        }\r\n\r\n        static col (matrix: Segment[][], childShape: GridChildShape, child: core.Updater): GridChildPlacement {\r\n            return new GridChildPlacement(matrix, childShape.col + childShape.colspan - 1, childShape.col, child.assets.desiredSize.width);\r\n        }\r\n    }\r\n}","module minerva.controls.grid.measure {\r\n    export enum OverridePass {\r\n        AutoAuto, //Child in auto row, auto col\r\n        StarAuto, //Child in star row, auto col\r\n        AutoStar, //Child in auto row, star col\r\n        StarAutoAgain, //star row, auto col repeated\r\n        NonStar, //Child in auto/pixel row, auto/pixel col\r\n        RemainingStar //Child in ?\r\n    }\r\n\r\n    export class GridChildShape {\r\n        starRow: boolean;\r\n        autoRow: boolean;\r\n        starCol: boolean;\r\n        autoCol: boolean;\r\n\r\n        col: number;\r\n        row: number;\r\n        colspan: number;\r\n        rowspan: number;\r\n\r\n        init (child: core.Updater, rm: Segment[][], cm: Segment[][]): GridChildShape {\r\n            var col = this.col = Math.min(child.getAttachedValue(\"Grid.Column\"), cm.length - 1);\r\n            if (isNaN(col))\r\n                this.col = col = 0;\r\n            var row = this.row = Math.min(child.getAttachedValue(\"Grid.Row\"), rm.length - 1);\r\n            if (isNaN(row))\r\n                this.row = row = 0;\r\n            var colspan = this.colspan = Math.min(child.getAttachedValue(\"Grid.ColumnSpan\"), cm.length - col);\r\n            if (isNaN(colspan))\r\n                this.colspan = colspan = 1;\r\n            var rowspan = this.rowspan = Math.min(child.getAttachedValue(\"Grid.RowSpan\"), rm.length - row);\r\n            if (isNaN(rowspan))\r\n                this.rowspan = rowspan = 1;\r\n\r\n            this.starRow = this.autoRow = this.starCol = this.autoCol = false;\r\n\r\n            for (var i = row; i < row + rowspan; i++) {\r\n                this.starRow = this.starRow || (rm[i][i].type === GridUnitType.Star);\r\n                this.autoRow = this.autoRow || (rm[i][i].type === GridUnitType.Auto);\r\n            }\r\n            for (var i = col; i < col + colspan; i++) {\r\n                this.starCol = this.starCol || (cm[i][i].type === GridUnitType.Star);\r\n                this.autoCol = this.autoCol || (cm[i][i].type === GridUnitType.Auto);\r\n            }\r\n\r\n            return this;\r\n        }\r\n\r\n        shouldMeasurePass (gridShape: GridShape, childSize: Size, pass: OverridePass): boolean {\r\n            childSize.width = childSize.height = 0;\r\n\r\n            if (this.autoRow && this.autoCol && !this.starRow && !this.starCol) {\r\n                if (pass !== OverridePass.AutoAuto)\r\n                    return false;\r\n                childSize.width = Number.POSITIVE_INFINITY;\r\n                childSize.height = Number.POSITIVE_INFINITY;\r\n                return true;\r\n            }\r\n\r\n            if (this.starRow && this.autoCol && !this.starCol) {\r\n                if (pass !== OverridePass.StarAuto && pass !== OverridePass.StarAutoAgain)\r\n                    return false;\r\n                if (pass === OverridePass.AutoAuto && gridShape.hasAutoStar)\r\n                    childSize.height = Number.POSITIVE_INFINITY;\r\n                childSize.width = Number.POSITIVE_INFINITY;\r\n                return true;\r\n            }\r\n\r\n            if (this.autoRow && this.starCol && !this.starRow) {\r\n                if (pass !== OverridePass.AutoStar)\r\n                    return false;\r\n                childSize.height = Number.POSITIVE_INFINITY;\r\n                return true;\r\n            }\r\n\r\n            if ((this.autoRow || this.autoCol) && !(this.starRow || this.starCol)) {\r\n                if (pass !== OverridePass.NonStar)\r\n                    return false;\r\n                if (this.autoRow)\r\n                    childSize.height = Number.POSITIVE_INFINITY;\r\n                if (this.autoCol)\r\n                    childSize.width = Number.POSITIVE_INFINITY;\r\n                return true;\r\n            }\r\n\r\n            if (!(this.starRow || this.starCol))\r\n                return pass === OverridePass.NonStar;\r\n\r\n            return pass === OverridePass.RemainingStar;\r\n        }\r\n\r\n        size (childSize: Size, rm: Segment[][], cm: Segment[][]) {\r\n            for (var i = this.row; i < this.row + this.rowspan; i++) {\r\n                childSize.height += rm[i][i].offered;\r\n            }\r\n            for (var i = this.col; i < this.col + this.colspan; i++) {\r\n                childSize.width += cm[i][i].offered;\r\n            }\r\n        }\r\n    }\r\n}","module minerva.controls.grid.measure {\r\n    export interface IInput extends panel.measure.IInput {\r\n        gridState: IGridState;\r\n        columnDefinitions: IColumnDefinition[];\r\n        rowDefinitions: IRowDefinition[];\r\n    }\r\n    export interface IState extends panel.measure.IState {\r\n        totalStars: Size;\r\n        gridShape: GridShape;\r\n        childShapes: GridChildShape[];\r\n        childSize: Size;\r\n        placements: GridChildPlacement[];\r\n        placementIndex: number;\r\n    }\r\n\r\n    export class GridMeasurePipeDef extends panel.measure.PanelMeasurePipeDef {\r\n        constructor () {\r\n            super();\r\n            this.addTapinBefore('doOverride', 'ensureRowMatrix', tapins.ensureRowMatrix)\r\n                .addTapinBefore('doOverride', 'prepareRowMatrix', tapins.prepareRowMatrix)\r\n                .addTapinBefore('doOverride', 'ensureColMatrix', tapins.ensureColMatrix)\r\n                .addTapinBefore('doOverride', 'prepareColMatrix', tapins.prepareColMatrix)\r\n                .addTapinBefore('doOverride', 'buildShape', tapins.buildShape)\r\n                .addTapinBefore('doOverride', 'doOverrideAutoAuto', tapins.createDoOverridePass(OverridePass.AutoAuto))\r\n                .addTapinBefore('doOverride', 'doOverrideStarAuto', tapins.createDoOverridePass(OverridePass.StarAuto))\r\n                .addTapinBefore('doOverride', 'doOverrideAutoStar', tapins.createDoOverridePass(OverridePass.AutoStar))\r\n                .addTapinBefore('doOverride', 'doOverrideStarAutoAgain', tapins.createDoOverridePass(OverridePass.StarAutoAgain))\r\n                .addTapinBefore('doOverride', 'doOverrideNonStar', tapins.createDoOverridePass(OverridePass.NonStar))\r\n                .addTapinBefore('doOverride', 'doOverrideRemainingStar', tapins.createDoOverridePass(OverridePass.RemainingStar))\r\n                .replaceTapin('doOverride', tapins.doOverride)\r\n                .addTapinAfter('doOverride', 'saveMeasureResults', tapins.saveMeasureResults);\r\n        }\r\n\r\n        createState () {\r\n            var state = <IState>super.createState();\r\n            state.totalStars = new Size();\r\n            state.gridShape = new GridShape();\r\n            state.childShapes = [];\r\n            state.childSize = new Size();\r\n            state.placements = [];\r\n            state.placementIndex = 0;\r\n            return state;\r\n        }\r\n    }\r\n}","module minerva.controls.grid.measure {\r\n    export class GridShape {\r\n        hasAutoAuto: boolean = false;\r\n        hasStarAuto: boolean = false;\r\n        hasAutoStar: boolean = false;\r\n\r\n        init (childShapes: GridChildShape[]) {\r\n            this.hasAutoAuto = this.hasStarAuto = this.hasAutoStar = false;\r\n            for (var i = 0; i < childShapes.length; i++) {\r\n                var cs = childShapes[i];\r\n                this.hasAutoAuto = this.hasAutoAuto || (cs.autoRow && cs.autoCol && !cs.starRow && !cs.starCol);\r\n                this.hasStarAuto = this.hasStarAuto || (cs.starRow && cs.autoCol);\r\n                this.hasAutoStar = this.hasAutoStar || (cs.autoRow && cs.starCol);\r\n            }\r\n        }\r\n    }\r\n}","module minerva.controls.grid.helpers {\r\n    export function allocateDesiredSize (rowMat: Segment[][], colMat: Segment[][]) {\r\n        for (var i = 0; i < 2; i++) {\r\n            var matrix = i === 0 ? rowMat : colMat;\r\n            var count = matrix.length;\r\n\r\n            for (var row = count - 1; row >= 0; row--) {\r\n                for (var col = row; col >= 0; col--) {\r\n                    var spansStar = false;\r\n                    for (var j = row; j >= col; j--) {\r\n                        spansStar = spansStar || (matrix[j][j].type === GridUnitType.Star);\r\n                    }\r\n                    var current = matrix[row][col].desired;\r\n                    var totalAllocated = 0;\r\n                    for (var a = row; a >= col; a--) {\r\n                        totalAllocated += matrix[a][a].desired;\r\n                    }\r\n                    if (totalAllocated < current) {\r\n                        var additional = current - totalAllocated;\r\n                        if (spansStar) {\r\n                            additional = assignSize(matrix, col, row, additional, GridUnitType.Star, true);\r\n                        } else {\r\n                            additional = assignSize(matrix, col, row, additional, GridUnitType.Pixel, true);\r\n                            additional = assignSize(matrix, col, row, additional, GridUnitType.Auto, true);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        for (var i = 0; i < rowMat.length; i++) {\r\n            rowMat[i][i].offered = rowMat[i][i].desired;\r\n        }\r\n        for (var i = 0; i < matrix.length; i++) {\r\n            colMat[i][i].offered = colMat[i][i].desired;\r\n        }\r\n    }\r\n}","module minerva.controls.grid.helpers {\r\n    export function assignSize (mat: Segment[][], start: number, end: number, size: number, unitType: GridUnitType, desiredSize: boolean): number {\r\n        var count = 0;\r\n        var assigned = false;\r\n        var segmentSize = 0;\r\n        for (var i = start; i <= end; i++) {\r\n            var cur = mat[i][i];\r\n            segmentSize = desiredSize ? cur.desired : cur.offered;\r\n            if (segmentSize < cur.max)\r\n                count += (unitType === GridUnitType.Star) ? cur.stars : 1;\r\n        }\r\n\r\n        do {\r\n            assigned = false;\r\n            var contribution = size / count;\r\n            for (i = start; i <= end; i++) {\r\n                cur = mat[i][i];\r\n                segmentSize = desiredSize ? cur.desired : cur.offered;\r\n                if (!(cur.type === unitType && segmentSize < cur.max))\r\n                    continue;\r\n                var newSize = segmentSize;\r\n                newSize += contribution * (unitType === GridUnitType.Star ? cur.stars : 1);\r\n                newSize = Math.min(newSize, cur.max);\r\n                assigned = assigned || (newSize > segmentSize);\r\n                size -= newSize - segmentSize;\r\n                if (desiredSize)\r\n                    cur.desired = newSize;\r\n                else\r\n                    cur.offered = newSize;\r\n            }\r\n        } while (assigned);\r\n        return size;\r\n    }\r\n}","module minerva.controls.grid.helpers {\r\n    export function expandStarCols (mat: Segment[][], coldefs: IColumnDefinition[], availableSize: Size) {\r\n        var aw = availableSize.width;\r\n\r\n        for (var i = 0; i < mat.length; i++) {\r\n            var cur = mat[i][i];\r\n            if (cur.type === GridUnitType.Star)\r\n                cur.offered = 0;\r\n            else\r\n                aw = Math.max(aw - cur.offered, 0);\r\n        }\r\n        aw = assignSize(mat, 0, mat.length - 1, aw, GridUnitType.Star, false);\r\n\r\n        for (var i = 0; i < coldefs.length; i++) {\r\n            var cur = mat[i][i];\r\n            if (cur.type === GridUnitType.Star)\r\n                coldefs[i].setActualWidth(cur.offered);\r\n        }\r\n    }\r\n}\r\n","module minerva.controls.grid.helpers {\r\n    export function expandStarRows (mat: Segment[][], rowdefs: IRowDefinition[], availableSize: Size) {\r\n        var ah = availableSize.height;\r\n\r\n        for (var i = 0; i < mat.length; i++) {\r\n            var cur = mat[i][i];\r\n            if (cur.type === GridUnitType.Star)\r\n                cur.offered = 0;\r\n            else\r\n                ah = Math.max(ah - cur.offered, 0);\r\n        }\r\n        ah = assignSize(mat, 0, mat.length - 1, ah, GridUnitType.Star, false);\r\n\r\n        for (var i = 0; i < rowdefs.length; i++) {\r\n            var cur = mat[i][i];\r\n            if (cur.type === GridUnitType.Star)\r\n                rowdefs[i].setActualHeight(cur.offered);\r\n        }\r\n    }\r\n}","module minerva.controls.panel.processup {\r\n    export interface IInput extends core.processup.IInput {\r\n        background: IBrush;\r\n    }\r\n    export interface IState extends core.processup.IState {\r\n    }\r\n    export interface IOutput extends core.processup.IOutput {\r\n    }\r\n\r\n    export class PanelProcessUpPipeDef extends core.processup.ProcessUpPipeDef {\r\n        constructor () {\r\n            super();\r\n            this.addTapinBefore('calcExtents', 'preCalcExtents', tapins.preCalcExtents);\r\n        }\r\n    }\r\n}","/// <reference path=\"../../panel/processup/PanelProcessUpPipeDef\" />\r\n\r\nmodule minerva.controls.grid.processup {\r\n    export interface IInput extends panel.processup.IInput {\r\n        showGridLines: boolean;\r\n    }\r\n    export interface IState extends panel.processup.IState {\r\n    }\r\n    export interface IOutput extends panel.processup.IOutput {\r\n    }\r\n\r\n    export class GridProcessUpPipeDef extends panel.processup.PanelProcessUpPipeDef {\r\n        constructor () {\r\n            super();\r\n            this.replaceTapin('preCalcExtents', tapins.preCalcExtents)\r\n                .replaceTapin('calcExtents', tapins.calcExtents);\r\n        }\r\n    }\r\n}","module minerva.controls.panel.render {\r\n    export interface IInput extends core.render.IInput, core.helpers.ISized {\r\n        background: IBrush;\r\n        extents: Rect;\r\n    }\r\n\r\n    export class PanelRenderPipeDef extends core.render.RenderPipeDef {\r\n        constructor () {\r\n            super();\r\n            this.replaceTapin('doRender', doRender);\r\n        }\r\n    }\r\n\r\n    function doRender (input: IInput, state: core.render.IState, output: core.render.IOutput, ctx: core.render.RenderContext, region: Rect, tree: core.IUpdaterTree): boolean {\r\n        var background = input.background;\r\n        if (!background || background.isTransparent())\r\n            return true;\r\n        var extents = input.extents;\r\n        if (Rect.isEmpty(extents))\r\n            return true;\r\n\r\n        ctx.save();\r\n        core.helpers.renderLayoutClip(ctx, input, tree);\r\n\r\n        var raw = ctx.raw;\r\n        raw.beginPath();\r\n        raw.rect(extents.x, extents.y, extents.width, extents.height);\r\n        ctx.fillEx(background, extents);\r\n\r\n        ctx.restore();\r\n        return true;\r\n    }\r\n}","/// <reference path=\"../../panel/render/PanelRenderPipeDef\" />\r\n\r\nmodule minerva.controls.grid.render {\r\n    export interface IInput extends panel.render.IInput {\r\n        actualWidth: number;\r\n        actualHeight: number;\r\n        showGridLines: boolean;\r\n        columnDefinitions: IColumnDefinition[];\r\n        rowDefinitions: IRowDefinition[];\r\n    }\r\n    export interface IState extends core.render.IState {\r\n        framework: Size;\r\n    }\r\n\r\n    export class GridRenderPipeDef extends panel.render.PanelRenderPipeDef {\r\n        constructor () {\r\n            super();\r\n            this.addTapinAfter('doRender', 'renderGridLines', tapins.renderGridLines);\r\n        }\r\n\r\n        createState() {\r\n            var state = <IState>super.createState();\r\n            state.framework = new Size();\r\n            return state;\r\n        }\r\n    }\r\n\r\n    export module tapins {\r\n        export function renderGridLines (input: IInput, state: IState, output: core.render.IOutput, ctx: core.render.RenderContext, region: Rect, tree: core.IUpdaterTree): boolean {\r\n            if (!input.showGridLines)\r\n                return true;\r\n\r\n            var framework = state.framework;\r\n            framework.width = input.actualWidth;\r\n            framework.height = input.actualHeight;\r\n            core.helpers.coerceSize(framework, input);\r\n\r\n            var raw = ctx.raw;\r\n            raw.save();\r\n\r\n            for (var cols = input.columnDefinitions, i = 0, x = 0; i < cols.length; i++) {\r\n                x += cols[i].ActualWidth;\r\n                raw.beginPath();\r\n                raw.setLineDash([5]);\r\n                raw.moveTo(x, 0);\r\n                raw.lineTo(x, framework.height);\r\n                raw.stroke();\r\n            }\r\n\r\n            for (var rows = input.rowDefinitions, i = 0, y = 0; i < rows.length; i++) {\r\n                y += rows[i].ActualHeight;\r\n                raw.beginPath();\r\n                raw.setLineDash([5]);\r\n                raw.moveTo(0, y);\r\n                raw.lineTo(framework.width, y);\r\n                raw.stroke();\r\n            }\r\n\r\n            raw.restore();\r\n\r\n            return true;\r\n        }\r\n    }\r\n}","module minerva.controls.image.hittest {\r\n    export interface IHitTestData extends core.hittest.IHitTestData {\r\n        assets: IImageUpdaterAssets;\r\n        imgRect: Rect;\r\n    }\r\n\r\n    export class ImageHitTestPipeDef extends core.hittest.HitTestPipeDef {\r\n        constructor () {\r\n            super();\r\n            this.replaceTapin('insideChildren', tapins.insideChildren)\r\n                .replaceTapin('canHitInside', tapins.canHitInside)\r\n                .addTapinAfter('insideObject', 'insideStretch', tapins.insideStretch);\r\n        }\r\n\r\n        prepare (data: IHitTestData) {\r\n            data.imgRect = data.imgRect || new Rect();\r\n        }\r\n    }\r\n}","module minerva.controls.image.arrange {\r\n    export interface IInput extends core.arrange.IInput {\r\n        source: IImageSource;\r\n        stretch: Stretch;\r\n    }\r\n    export interface IState extends core.arrange.IState {\r\n        imageBounds: Rect;\r\n        stretchX: number;\r\n        stretchY: number;\r\n    }\r\n\r\n    export class ImageArrangePipeDef extends core.arrange.ArrangePipeDef {\r\n        constructor () {\r\n            super();\r\n            this.addTapinAfter('invalidateFuture', 'invalidateMetrics', tapins.invalidateMetrics)\r\n                .addTapinBefore('doOverride', 'calcImageBounds', tapins.calcImageBounds)\r\n                .addTapinBefore('doOverride', 'calcStretch', tapins.calcStretch)\r\n                .replaceTapin('doOverride', tapins.doOverride);\r\n        }\r\n\r\n        createState () {\r\n            var state = <IState>super.createState();\r\n            state.imageBounds = new Rect();\r\n            state.stretchX = 0;\r\n            state.stretchY = 0;\r\n            return state;\r\n        }\r\n    }\r\n}\r\n","module minerva.controls.image.measure {\r\n    export interface IInput extends core.measure.IInput {\r\n        source: IImageSource;\r\n        stretch: Stretch;\r\n    }\r\n    export interface IState extends core.measure.IState {\r\n        imageBounds: Rect;\r\n        stretchX: number;\r\n        stretchY: number;\r\n    }\r\n\r\n    export class ImageMeasurePipeDef extends core.measure.MeasurePipeDef {\r\n        constructor () {\r\n            super();\r\n            this.addTapinBefore('doOverride', 'calcImageBounds', tapins.calcImageBounds)\r\n                .addTapinBefore('doOverride', 'calcStretch', tapins.calcStretch)\r\n                .replaceTapin('doOverride', tapins.doOverride);\r\n        }\r\n\r\n        createState () {\r\n            var state = <IState>super.createState();\r\n            state.imageBounds = new Rect();\r\n            state.stretchX = 0;\r\n            state.stretchY = 0;\r\n            return state;\r\n        }\r\n    }\r\n}\r\n","module minerva.controls.image.processdown {\r\n    export interface IInput extends core.processdown.IInput, core.helpers.ISized {\r\n        source: IImageSource;\r\n        stretch: Stretch;\r\n        imgXform: number[];\r\n        overlap: RectOverlap;\r\n        renderSize: Size;\r\n    }\r\n    export interface IState extends core.processdown.IState {\r\n        imgRect: Rect;\r\n        paintRect: Rect;\r\n        calcImageMetrics: boolean;\r\n        imgAdjust: boolean; //TODO: This may be overkill, requires more investigation\r\n    }\r\n    export interface IOutput extends core.processdown.IOutput {\r\n        imgXform: number[];\r\n        overlap: RectOverlap;\r\n    }\r\n\r\n    export class ImageProcessDownPipeDef extends core.processdown.ProcessDownPipeDef {\r\n        constructor () {\r\n            super();\r\n            //TODO: Should we merge the overlap into the layout clip for render?\r\n            this.addTapinBefore('processLayoutClip', 'checkNeedImageMetrics', tapins.checkNeedImageMetrics)\r\n                .addTapinAfter('checkNeedImageMetrics', 'prepareImageMetrics', tapins.prepareImageMetrics)\r\n                .addTapinAfter('prepareImageMetrics', 'calcImageTransform', tapins.calcImageTransform)\r\n                .addTapinAfter('calcImageTransform', 'calcOverlap', tapins.calcOverlap);\r\n        }\r\n\r\n        createState () {\r\n            var state = <IState>super.createState();\r\n            state.imgRect = new Rect();\r\n            state.paintRect = new Rect();\r\n            state.calcImageMetrics = false;\r\n            state.imgAdjust = false;\r\n            return state;\r\n        }\r\n\r\n        createOutput () {\r\n            var output = <IOutput>super.createOutput();\r\n            output.imgXform = mat3.identity();\r\n            output.overlap = RectOverlap.In;\r\n            return output;\r\n        }\r\n\r\n        prepare (input: IInput, state: IState, output: IOutput, vpinput: IInput, tree: core.IUpdaterTree) {\r\n            super.prepare(input, state, output, vpinput, tree);\r\n            output.overlap = input.overlap;\r\n            mat3.copyTo(input.imgXform, output.imgXform);\r\n        }\r\n\r\n        flush (input: IInput, state: IState, output: IOutput, vpinput: IInput, tree: core.IUpdaterTree) {\r\n            super.flush(input, state, output, vpinput, tree);\r\n            input.overlap = output.overlap;\r\n            mat3.copyTo(output.imgXform, input.imgXform);\r\n        }\r\n    }\r\n}","module minerva.controls.image.render {\r\n    export interface IInput extends core.render.IInput {\r\n        source: IImageSource;\r\n        imgXform: number[];\r\n        overlap: RectOverlap;\r\n    }\r\n    export interface IState extends core.render.IState {\r\n    }\r\n\r\n    export class ImageRenderPipeDef extends core.render.RenderPipeDef {\r\n        constructor() {\r\n            super();\r\n            this.replaceTapin('doRender', tapins.doRender);\r\n        }\r\n    }\r\n}","module minerva.controls.overlay.hittest {\r\n    export interface IHitTestData extends core.hittest.IHitTestData {\r\n        assets: IOverlayUpdaterAssets;\r\n    }\r\n\r\n    export class OverlayHitTestPipeDef extends core.hittest.HitTestPipeDef {\r\n        constructor () {\r\n            super();\r\n            this.addTapinBefore('canHit', 'shouldSkip', tapins.shouldSkip);\r\n        }\r\n    }\r\n\r\n    export module tapins {\r\n        export function shouldSkip (data: IHitTestData, pos: Point, hitList: core.Updater[], ctx: core.render.RenderContext): boolean {\r\n            return !!data.assets.isVisible;\r\n        }\r\n    }\r\n}","module minerva.controls.overlay.processup {\r\n    export class OverlayProcessUpPipeDef extends core.processup.ProcessUpPipeDef {\r\n        constructor () {\r\n            super();\r\n            this.removeTapin('calcActualSize')\r\n                .removeTapin('calcExtents')\r\n                .removeTapin('calcPaintBounds');\r\n        }\r\n    }\r\n}","module minerva.controls.panel.hittest {\r\n    export interface IHitTestData extends core.hittest.IHitTestData {\r\n        assets: IPanelUpdaterAssets;\r\n    }\r\n\r\n    export class PanelHitTestPipeDef extends core.hittest.HitTestPipeDef {\r\n        constructor () {\r\n            super();\r\n            this.replaceTapin('canHitInside', tapins.canHitInside);\r\n        }\r\n    }\r\n\r\n    export module tapins {\r\n        export function canHitInside (data: IHitTestData, pos: Point, hitList: core.Updater[], ctx: core.render.RenderContext): boolean {\r\n            if (data.hitChildren)\r\n                return true;\r\n\r\n            if (!data.assets.background) {\r\n                hitList.shift();\r\n                ctx.restore();\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n}","module minerva.controls.popup.hittest {\r\n    export interface IHitTestData extends core.hittest.IHitTestData {\r\n        assets: IPopupUpdaterAssets;\r\n    }\r\n\r\n    export class PopupHitTestPipeDef extends core.hittest.HitTestPipeDef {\r\n        constructor () {\r\n            super();\r\n            this.addTapinBefore('canHit', 'shouldSkip', tapins.shouldSkip);\r\n        }\r\n    }\r\n\r\n    export module tapins {\r\n        export function shouldSkip (data: IHitTestData, pos: Point, hitList: core.Updater[], ctx: core.render.RenderContext): boolean {\r\n            return !!data.assets.isVisible;\r\n        }\r\n    }\r\n}","module minerva.controls.popup.processdown {\r\n    export interface IInput extends core.processdown.IInput {\r\n        horizontalOffset: number;\r\n        verticalOffset: number;\r\n    }\r\n\r\n    export class PopupProcessDownPipeDef extends core.processdown.ProcessDownPipeDef {\r\n        constructor () {\r\n            super();\r\n            this.addTapinBefore('processXform', 'preProcessXform', tapins.preProcessXform)\r\n                .addTapinAfter('processXform', 'postProcessXform', tapins.postProcessXform);\r\n        }\r\n    }\r\n}","module minerva.controls.popup.processup {\r\n    export class PopupProcessUpPipeDef extends core.processup.ProcessUpPipeDef {\r\n        constructor() {\r\n            super();\r\n            this.removeTapin('calcActualSize')\r\n                .removeTapin('calcExtents')\r\n                .removeTapin('calcPaintBounds');\r\n        }\r\n    }\r\n}","module minerva.controls.scrollcontentpresenter.arrange {\r\n    export interface IInput extends core.arrange.IInput {\r\n        scrollData: IScrollData;\r\n        desiredSize: Size;\r\n        internalClip: Rect;\r\n    }\r\n    export interface IState extends core.arrange.IState {\r\n    }\r\n    export interface IOutput extends core.arrange.IOutput {\r\n        internalClip: Rect;\r\n    }\r\n\r\n    export class ScrollContentPresenterArrangePipeDef extends core.arrange.ArrangePipeDef {\r\n        constructor () {\r\n            super();\r\n            this.replaceTapin('doOverride', tapins.doOverride)\r\n                .addTapinAfter('completeOverride', 'updateClip', tapins.updateClip)\r\n                .addTapinAfter('updateClip', 'updateExtents', tapins.updateExtents);\r\n        }\r\n\r\n        createOutput (): IOutput {\r\n            var output = <IOutput>super.createOutput();\r\n            output.internalClip = new Rect();\r\n            return output;\r\n        }\r\n\r\n        prepare (input: IInput, state: IState, output: IOutput) {\r\n            Rect.copyTo(input.internalClip, output.internalClip);\r\n            super.prepare(input, state, output);\r\n        }\r\n\r\n        flush (input: IInput, state: IState, output: IOutput) {\r\n            super.flush(input, state, output);\r\n            Rect.copyTo(output.internalClip, input.internalClip);\r\n        }\r\n    }\r\n}","module minerva.controls.scrollcontentpresenter.measure {\r\n    export interface IInput extends core.measure.IInput {\r\n        scrollData: IScrollData;\r\n    }\r\n    export interface IState extends core.measure.IState {\r\n        idealSize: Size;\r\n    }\r\n\r\n    export class ScrollContentPresenterMeasurePipeDef extends core.measure.MeasurePipeDef {\r\n        constructor () {\r\n            super();\r\n            this.replaceTapin('doOverride', tapins.doOverride)\r\n                .addTapinAfter('doOverride', 'updateExtents', tapins.updateExtents)\r\n                .addTapinAfter('updateExtents', 'finishDoOverride', tapins.finishDoOverride);\r\n        }\r\n\r\n        createState (): IState {\r\n            var state = <IState>super.createState();\r\n            state.idealSize = new Size();\r\n            return state;\r\n        }\r\n    }\r\n}","module minerva.controls.scrollcontentpresenter.render {\r\n    export interface IInput extends core.render.IInput {\r\n        internalClip: Rect;\r\n    }\r\n\r\n    export class ScrollContentPresenterRenderPipeDef extends core.render.RenderPipeDef {\r\n        constructor () {\r\n            super();\r\n            this.addTapinAfter('applyClip', 'applyInternalClip', tapins.applyInternalClip);\r\n        }\r\n    }\r\n\r\n    export module tapins {\r\n        export function applyInternalClip (input: IInput, state: core.render.IState, output: core.render.IOutput, ctx: core.render.RenderContext, region: Rect, tree: core.IUpdaterTree): boolean {\r\n            if (Rect.isEmpty(input.internalClip))\r\n                return true;\r\n            ctx.clipRect(input.internalClip);\r\n            return true;\r\n        }\r\n    }\r\n}","module minerva.controls.stackpanel.arrange {\r\n    export interface IInput extends panel.arrange.IInput {\r\n        orientation: Orientation;\r\n    }\r\n    export interface IState extends panel.arrange.IState {\r\n    }\r\n    export interface IOutput extends panel.arrange.IOutput {\r\n    }\r\n\r\n    export class StackPanelArrangePipeDef extends panel.arrange.PanelArrangePipeDef {\r\n        constructor () {\r\n            super();\r\n            this.replaceTapin('doOverride', tapins.doOverride)\r\n                .addTapinAfter('doOverride', 'doHorizontal', tapins.doHorizontal)\r\n                .addTapinAfter('doOverride', 'doVertical', tapins.doVertical);\r\n        }\r\n    }\r\n}","module minerva.controls.stackpanel.measure {\r\n    export interface IInput extends panel.measure.IInput {\r\n        orientation: Orientation;\r\n    }\r\n    export interface IState extends panel.measure.IState {\r\n        childAvailable: Size;\r\n    }\r\n    export interface IOutput extends panel.measure.IOutput {\r\n    }\r\n\r\n    export class StackPanelMeasurePipeDef extends panel.measure.PanelMeasurePipeDef {\r\n        constructor () {\r\n            super();\r\n            this.replaceTapin('doOverride', tapins.doOverride)\r\n                .addTapinAfter('doOverride', 'doHorizontal', tapins.doHorizontal)\r\n                .addTapinAfter('doOverride', 'doVertical', tapins.doVertical);\r\n        }\r\n\r\n        createState (): IState {\r\n            var state = <IState>super.createState();\r\n            state.childAvailable = new Size();\r\n            return state;\r\n        }\r\n    }\r\n}","module minerva.controls.textblock.arrange {\r\n    export interface IInput extends core.arrange.IInput, text.IDocumentContext {\r\n        padding: Thickness;\r\n    }\r\n\r\n    export class TextBlockArrangePipeDef extends core.arrange.ArrangePipeDef {\r\n        constructor() {\r\n            super();\r\n            this.replaceTapin('doOverride', tapins.doOverride);\r\n        }\r\n    }\r\n\r\n    export module tapins {\r\n        export function doOverride(input: IInput, state: core.arrange.IState, output: core.arrange.IOutput, tree: TextBlockUpdaterTree, finalRect: Rect): boolean {\r\n            var fs = state.finalSize;\r\n            var as = state.arrangedSize;\r\n\r\n            Thickness.shrinkSize(input.padding, fs);\r\n            Size.copyTo(tree.layout(fs, input), as);\r\n            as.width = Math.max(as.width, fs.width);\r\n            as.height = Math.max(as.height, fs.height);\r\n            tree.setAvailableWidth(fs.width);\r\n            Thickness.growSize(input.padding, as);\r\n\r\n            return true;\r\n        }\r\n    }\r\n}","module minerva.controls.textblock.hittest {\r\n    export interface IHitTestData extends core.hittest.IHitTestData {\r\n        assets: ITextBlockUpdaterAssets;\r\n    }\r\n\r\n    export class TextBlockHitTestPipeDef extends core.hittest.HitTestPipeDef {\r\n        constructor () {\r\n            super();\r\n            this.replaceTapin('canHitInside', tapins.canHitInside);\r\n        }\r\n    }\r\n\r\n    export module tapins {\r\n        export function canHitInside (data: IHitTestData, pos: Point, hitList: core.Updater[], ctx: core.render.RenderContext): boolean {\r\n            return true;\r\n        }\r\n    }\r\n}","module minerva.controls.textblock.measure {\r\n    export interface IInput extends core.measure.IInput, text.IDocumentContext {\r\n        padding: Thickness;\r\n    }\r\n\r\n    export class TextBlockMeasurePipeDef extends core.measure.MeasurePipeDef {\r\n        constructor() {\r\n            super();\r\n            this.replaceTapin('doOverride', tapins.doOverride);\r\n        }\r\n    }\r\n\r\n    export module tapins {\r\n        export function doOverride(input: IInput, state: core.measure.IState, output: core.measure.IOutput, tree: TextBlockUpdaterTree, availableSize: Size): boolean {\r\n            var ds = output.desiredSize;\r\n\r\n            Thickness.shrinkSize(input.padding, state.availableSize);\r\n            tree.setMaxWidth(state.availableSize.width, input);\r\n            Size.copyTo(tree.layout(state.availableSize, input), ds);\r\n            Thickness.growSize(input.padding, ds);\r\n\r\n            return true;\r\n        }\r\n    }\r\n}","module minerva.controls.textblock.processup {\r\n    export interface IInput extends core.processup.IInput, text.IDocumentContext {\r\n        padding: Thickness;\r\n    }\r\n\r\n    export class TextBlockProcessUpPipeDef extends core.processup.ProcessUpPipeDef {\r\n        constructor () {\r\n            super();\r\n            this.replaceTapin('calcActualSize', tapins.calcActualSize)\r\n                .replaceTapin('calcExtents', tapins.calcExtents);\r\n        }\r\n    }\r\n\r\n    export module tapins {\r\n        export function calcActualSize (input: IInput, state: core.processup.IState, output: core.processup.IOutput, tree: TextBlockUpdaterTree): boolean {\r\n            if ((input.dirtyFlags & DirtyFlags.Bounds) === 0)\r\n                return true;\r\n\r\n            var actual = state.actualSize;\r\n            actual.width = Number.POSITIVE_INFINITY;\r\n            actual.height = Number.POSITIVE_INFINITY;\r\n            core.helpers.coerceSize(actual, input);\r\n\r\n            Thickness.shrinkSize(input.padding, actual);\r\n            Size.copyTo(tree.layout(actual, input), actual);\r\n            Thickness.growSize(input.padding, actual);\r\n\r\n            return true;\r\n        }\r\n\r\n        export function calcExtents (input: IInput, state: core.processup.IState, output: core.processup.IOutput, tree: TextBlockUpdaterTree): boolean {\r\n            if ((input.dirtyFlags & DirtyFlags.Bounds) === 0)\r\n                return true;\r\n\r\n            var e = output.extents;\r\n            e.x = tree.getHorizontalOffset(input);\r\n            e.y = 0;\r\n            Size.copyTo(state.actualSize, e);\r\n\r\n            var padding = input.padding;\r\n            e.x += padding.left;\r\n            e.y += padding.top;\r\n            Rect.copyTo(e, output.extentsWithChildren);\r\n\r\n            return true;\r\n        }\r\n    }\r\n}","module minerva.controls.textblock.render {\r\n    export interface IInput extends core.render.IInput, text.IDocumentContext {\r\n        padding: Thickness;\r\n    }\r\n\r\n    export class TextBlockRenderPipeDef extends core.render.RenderPipeDef {\r\n        constructor () {\r\n            super();\r\n            this.replaceTapin('doRender', tapins.doRender);\r\n        }\r\n    }\r\n\r\n    export module tapins {\r\n        export function doRender (input: IInput, state: core.render.IState, output: core.render.IOutput, ctx: core.render.RenderContext, region: Rect, tree: TextBlockUpdaterTree): boolean {\r\n            ctx.save();\r\n            core.helpers.renderLayoutClip(ctx, input, tree);\r\n            var padding = input.padding;\r\n            if (padding)\r\n                ctx.translate(padding.left, padding.top);\r\n            tree.render(ctx, input);\r\n            ctx.restore();\r\n            return true;\r\n        }\r\n    }\r\n}","module minerva.controls.textboxview.arrange {\r\n    export interface IInput extends core.arrange.IInput, text.IDocumentContext {\r\n    }\r\n\r\n    export class TextBoxViewArrangePipeDef extends core.arrange.ArrangePipeDef {\r\n        constructor () {\r\n            super();\r\n            this.replaceTapin('doOverride', tapins.doOverride);\r\n        }\r\n    }\r\n\r\n    export module tapins {\r\n        export function doOverride (input: IInput, state: core.arrange.IState, output: core.arrange.IOutput, tree: TextBoxViewUpdaterTree, finalRect: Rect): boolean {\r\n            var fs = state.finalSize;\r\n            var as = state.arrangedSize;\r\n\r\n            Size.copyTo(tree.layout(fs, input), as);\r\n            as.width = Math.max(as.width, fs.width);\r\n            as.height = Math.max(as.height, fs.height);\r\n            tree.setAvailableWidth(fs.width);\r\n\r\n            return true;\r\n        }\r\n    }\r\n}","module minerva.controls.textboxview.hittest {\r\n    export interface IHitTestData extends core.hittest.IHitTestData {\r\n        assets: ITextBoxViewUpdaterAssets;\r\n    }\r\n\r\n    export class TextBoxViewHitTestPipeDef extends core.hittest.HitTestPipeDef {\r\n        constructor () {\r\n            super();\r\n            this.replaceTapin('canHitInside', tapins.canHitInside);\r\n        }\r\n    }\r\n\r\n    export module tapins {\r\n        export function canHitInside (data: IHitTestData, pos: Point, hitList: core.Updater[], ctx: core.render.RenderContext): boolean {\r\n            return true;\r\n        }\r\n    }\r\n}","module minerva.controls.textboxview.measure {\r\n    export interface IInput extends core.measure.IInput, text.IDocumentContext {\r\n    }\r\n\r\n    export class TextBoxViewMeasurePipeDef extends core.measure.MeasurePipeDef {\r\n        constructor () {\r\n            super();\r\n            this.replaceTapin('doOverride', tapins.doOverride);\r\n        }\r\n    }\r\n\r\n    export module tapins {\r\n        export function doOverride (input: IInput, state: core.measure.IState, output: core.measure.IOutput, tree: TextBoxViewUpdaterTree, availableSize: Size): boolean {\r\n            var ds = output.desiredSize;\r\n            var available = state.availableSize;\r\n            tree.setMaxWidth(available.width, input);\r\n            Size.copyTo(tree.layout(available, input), ds);\r\n            if (!isFinite(available.width))\r\n                ds.width = Math.max(ds.width, 11);\r\n            ds.width = Math.min(ds.width, available.width);\r\n            ds.height = Math.min(ds.height, available.height);\r\n            return true;\r\n        }\r\n    }\r\n}","module minerva.controls.textboxview.processup {\r\n    export interface IInput extends core.processup.IInput, text.IDocumentContext {\r\n    }\r\n\r\n    export class TextBoxViewProcessUpPipeDef extends core.processup.ProcessUpPipeDef {\r\n        constructor () {\r\n            super();\r\n            this.replaceTapin('calcActualSize', tapins.calcActualSize)\r\n                .replaceTapin('calcExtents', tapins.calcExtents);\r\n        }\r\n    }\r\n\r\n    export module tapins {\r\n        export function calcActualSize (input: IInput, state: core.processup.IState, output: core.processup.IOutput, tree: TextBoxViewUpdaterTree): boolean {\r\n            if ((input.dirtyFlags & DirtyFlags.Bounds) === 0)\r\n                return true;\r\n\r\n            var as = state.actualSize;\r\n            as.width = Number.POSITIVE_INFINITY;\r\n            as.height = Number.POSITIVE_INFINITY;\r\n            core.helpers.coerceSize(as, input);\r\n\r\n            Size.copyTo(tree.layout(as, input), as);\r\n\r\n            return true;\r\n        }\r\n\r\n        export function calcExtents (input: IInput, state: core.processup.IState, output: core.processup.IOutput, tree: TextBoxViewUpdaterTree): boolean {\r\n            if ((input.dirtyFlags & DirtyFlags.Bounds) === 0)\r\n                return true;\r\n\r\n            var e = output.extents;\r\n            e.x = e.y = 0;\r\n            Size.copyTo(state.actualSize, e);\r\n            Rect.copyTo(e, output.extentsWithChildren);\r\n            output.extentsWithChildren.width++; //include caret\r\n\r\n            return true;\r\n        }\r\n    }\r\n}","module minerva.controls.textboxview.render {\r\n    export interface IInput extends core.render.IInput, text.IDocumentContext {\r\n        isCaretVisible: boolean;\r\n        caretRegion: Rect;\r\n        caretBrush: IBrush;\r\n    }\r\n    export interface IOutput extends core.render.IOutput {\r\n        caretRegion: Rect;\r\n    }\r\n\r\n    export class TextBoxViewRenderPipeDef extends core.render.RenderPipeDef {\r\n        constructor () {\r\n            super();\r\n            this.replaceTapin('doRender', tapins.doRender)\r\n                .addTapinAfter('doRender', 'calcCaretRegion', tapins.calcCaretRegion)\r\n                .addTapinAfter('calcCaretRegion', 'renderCaret', tapins.renderCaret);\r\n        }\r\n\r\n        createOutput () {\r\n            var output = <IOutput>super.createOutput();\r\n            output.caretRegion = new Rect();\r\n            return output;\r\n        }\r\n\r\n        prepare (input: IInput, state: core.render.IState, output: IOutput) {\r\n            Rect.copyTo(input.caretRegion, output.caretRegion);\r\n            super.prepare(input, state, output);\r\n        }\r\n\r\n        flush (input: IInput, state: core.render.IState, output: IOutput) {\r\n            super.flush(input, state, output);\r\n            Rect.copyTo(output.caretRegion, input.caretRegion);\r\n        }\r\n    }\r\n\r\n    export module tapins {\r\n        export function doRender (input: IInput, state: core.render.IState, output: IOutput, ctx: core.render.RenderContext, region: Rect, tree: TextBoxViewUpdaterTree): boolean {\r\n            ctx.save();\r\n            core.helpers.renderLayoutClip(ctx, input, tree);\r\n            tree.render(ctx, input);\r\n            ctx.restore();\r\n            return true;\r\n        }\r\n\r\n        export function calcCaretRegion (input: IInput, state: core.render.IState, output: IOutput, ctx: core.render.RenderContext, region: Rect, tree: TextBoxViewUpdaterTree): boolean {\r\n            if (!Rect.isEmpty(output.caretRegion) || input.selectionLength > 0)\r\n                return true;\r\n            Rect.copyTo(tree.getCaretRegion(input), output.caretRegion);\r\n            return true;\r\n        }\r\n\r\n        export function renderCaret (input: IInput, state: core.render.IState, output: IOutput, ctx: core.render.RenderContext, region: Rect, tree: TextBoxViewUpdaterTree): boolean {\r\n            if (!input.isCaretVisible || input.selectionLength > 0)\r\n                return true;\r\n\r\n            var region = output.caretRegion;\r\n            var brush = input.caretBrush;\r\n            var raw = ctx.raw;\r\n\r\n            raw.beginPath();\r\n            raw.moveTo(region.x + 0.5, region.y);\r\n            raw.lineTo(region.x + 0.5, region.y + region.height);\r\n            raw.lineWidth = 1.0;\r\n            if (brush) {\r\n                brush.setupBrush(raw, region);\r\n                raw.strokeStyle = brush.toHtml5Object();\r\n            } else {\r\n                raw.strokeStyle = \"#000000\";\r\n            }\r\n            raw.stroke();\r\n\r\n            return true;\r\n        }\r\n    }\r\n}","module minerva.controls.usercontrol.arrange {\r\n    export interface IInput extends core.arrange.IInput {\r\n        padding: Thickness;\r\n        borderThickness: Thickness;\r\n    }\r\n    export interface IState extends core.arrange.IState {\r\n        totalBorder: Thickness;\r\n    }\r\n\r\n    export class UserControlArrangePipeDef extends core.arrange.ArrangePipeDef {\r\n        constructor () {\r\n            super();\r\n            this.addTapinBefore('doOverride', 'preOverride', tapins.preOverride)\r\n                .replaceTapin('doOverride', tapins.doOverride);\r\n        }\r\n\r\n        createState (): IState {\r\n            var state = <IState>super.createState();\r\n            state.totalBorder = new Thickness();\r\n            return state;\r\n        }\r\n    }\r\n}\r\n","module minerva.controls.usercontrol.measure {\r\n    export interface IInput extends core.measure.IInput {\r\n        padding: Thickness;\r\n        borderThickness: Thickness;\r\n    }\r\n    export interface IState extends core.measure.IState {\r\n        totalBorder: Thickness;\r\n    }\r\n\r\n    export class UserControlMeasurePipeDef extends core.measure.MeasurePipeDef {\r\n        constructor () {\r\n            super();\r\n            this.addTapinBefore('doOverride', 'preOverride', tapins.preOverride)\r\n                .replaceTapin('doOverride', tapins.doOverride)\r\n                .addTapinAfter('doOverride', 'postOverride', tapins.postOverride);\r\n        }\r\n\r\n        createState (): IState {\r\n            var state = <IState>super.createState();\r\n            state.totalBorder = new Thickness();\r\n            return state;\r\n        }\r\n    }\r\n}\r\n","module minerva.controls.usercontrol.processdown {\r\n    export class UserControlProcessDownPipeDef extends core.processdown.ProcessDownPipeDef {\r\n        constructor () {\r\n            super();\r\n            this.replaceTapin('processLayoutClip', tapins.processLayoutClip);\r\n        }\r\n    }\r\n\r\n    export module tapins {\r\n        export function processLayoutClip (input: core.processdown.IInput, state: core.processdown.IState, output: core.processdown.IOutput, vpinput: core.processdown.IInput, tree: core.IUpdaterTree): boolean {\r\n            if ((input.dirtyFlags & DirtyFlags.LayoutClip) === 0)\r\n                return true;\r\n\r\n            var clc = input.compositeLayoutClip;\r\n            clc.x = clc.y = clc.width = clc.height;\r\n            return true;\r\n        }\r\n    }\r\n}","module minerva.controls.virtualizingstackpanel.arrange {\r\n    export interface IInput extends panel.arrange.IInput {\r\n        orientation: Orientation;\r\n        scrollData: IScrollData;\r\n    }\r\n    export interface IState extends panel.arrange.IState {\r\n    }\r\n    export interface IOutput extends panel.arrange.IOutput {\r\n    }\r\n\r\n    export class VirtualizingStackPanelArrangePipeDef extends panel.arrange.PanelArrangePipeDef {\r\n        constructor () {\r\n            super();\r\n            this.replaceTapin('doOverride', tapins.doOverride)\r\n                .addTapinAfter('doOverride', 'doHorizontal', tapins.doHorizontal)\r\n                .addTapinAfter('doOverride', 'doVertical', tapins.doVertical);\r\n        }\r\n    }\r\n}","module minerva.controls.virtualizingstackpanel.measure {\r\n    export interface IInput extends panel.measure.IInput {\r\n        orientation: Orientation;\r\n        scrollData: IScrollData;\r\n    }\r\n    export interface IState extends panel.measure.IState {\r\n        childAvailable: Size;\r\n    }\r\n    export interface IOutput extends panel.measure.IOutput {\r\n    }\r\n\r\n    export class VirtualizingStackPanelMeasurePipeDef extends panel.measure.PanelMeasurePipeDef {\r\n        constructor () {\r\n            super();\r\n            this.replaceTapin('doOverride', tapins.doOverride)\r\n                .addTapinAfter('doOverride', 'doHorizontal', tapins.doHorizontal)\r\n                .addTapinAfter('doOverride', 'doVertical', tapins.doVertical);\r\n        }\r\n\r\n        createState () {\r\n            var state = <IState>super.createState();\r\n            state.childAvailable = new Size();\r\n            return state;\r\n        }\r\n    }\r\n}","module minerva.shapes.ellipse.helpers {\r\n    export function draw (ctx: CanvasRenderingContext2D, x: number, y: number, width: number, height: number) {\r\n        var radiusX = width / 2;\r\n        var radiusY = height / 2;\r\n        var right = x + width;\r\n        var bottom = y + height;\r\n        var centerX = x + radiusX;\r\n        var centerY = y + radiusY;\r\n\r\n        ctx.beginPath();\r\n        if (width === height) { //circle\r\n            ctx.arc(centerX, centerY, radiusX, 0, Math.PI * 2, false);\r\n            return;\r\n        }\r\n\r\n        var kappa = .5522848; // 4 * ((sqrt(2) - 1) / 3)\r\n        var ox = radiusX * kappa;\r\n        var oy = radiusY * kappa;\r\n\r\n        //move to left edge, halfway down\r\n        ctx.moveTo(x, centerY);\r\n        //top left bezier curve\r\n        ctx.bezierCurveTo(x, centerY - oy, centerX - ox, y, centerX, y);\r\n        //top right bezier curve\r\n        ctx.bezierCurveTo(centerX + ox, y, right, centerY - oy, right, centerY);\r\n        //bottom right bezier curve\r\n        ctx.bezierCurveTo(right, centerY + oy, centerX + ox, bottom, centerX, bottom);\r\n        //bottom left bezier curve\r\n        ctx.bezierCurveTo(centerX - ox, bottom, x, centerY + oy, x, centerY);\r\n        ctx.closePath();\r\n    }\r\n}","module minerva.shapes.shape.hittest {\r\n    export interface IHitTestData extends core.hittest.IHitTestData {\r\n        assets: IShapeUpdaterAssets;\r\n    }\r\n\r\n    export class ShapeHitTestPipeDef extends core.hittest.HitTestPipeDef {\r\n        constructor () {\r\n            super();\r\n            this.replaceTapin('canHitInside', tapins.canHitInside)\r\n                .replaceTapin('insideChildren', tapins.insideChildren)\r\n                .addTapinAfter('insideObject', 'canHitShape', tapins.canHitShape)\r\n                .addTapinAfter('canHitShape', 'prepareShape', tapins.prepareShape)\r\n                .addTapinAfter('prepareShape', 'drawShape', tapins.drawShape)\r\n                .addTapinAfter('drawShape', 'finishShape', tapins.finishShape);\r\n        }\r\n    }\r\n}","/// <reference path=\"../../shape/hittest/ShapeHitTestPipeDef\" />\r\n\r\nmodule minerva.shapes.ellipse.hittest {\r\n    export interface IHitTestData extends shape.hittest.IHitTestData {\r\n        assets: IEllipseUpdaterAssets;\r\n    }\r\n\r\n    export class EllipseHitTestPipeDef extends shape.hittest.ShapeHitTestPipeDef {\r\n        constructor () {\r\n            super();\r\n            this.replaceTapin('drawShape', tapins.drawShape);\r\n        }\r\n    }\r\n\r\n    export module tapins {\r\n        export function drawShape (data: IHitTestData, pos: Point, hitList: core.Updater[], ctx: core.render.RenderContext): boolean {\r\n            var sr = data.assets.shapeRect;\r\n            helpers.draw(ctx.raw, sr.x, sr.y, sr.width, sr.height);\r\n            return true;\r\n        }\r\n    }\r\n}","module minerva.shapes.shape.measure {\r\n    export interface IInput extends core.measure.IInput, IShapeProperties {\r\n        naturalBounds: Rect;\r\n    }\r\n    export interface IState extends core.measure.IState {\r\n    }\r\n    export interface IOutput extends core.measure.IOutput {\r\n        naturalBounds: Rect;\r\n    }\r\n\r\n    export class ShapeMeasurePipeDef extends core.measure.MeasurePipeDef {\r\n        constructor () {\r\n            super();\r\n            this.addTapinBefore('doOverride', 'calcNaturalBounds', tapins.calcNaturalBounds)\r\n                .replaceTapin('doOverride', tapins.doOverride);\r\n        }\r\n\r\n        createOutput () {\r\n            var output = <IOutput>super.createOutput();\r\n            output.naturalBounds = new Rect();\r\n            return output;\r\n        }\r\n\r\n        prepare (input: IInput, state: IState, output: IOutput) {\r\n            Rect.copyTo(input.naturalBounds, output.naturalBounds);\r\n            super.prepare(input, state, output);\r\n        }\r\n\r\n        flush (input: IInput, state: IState, output: IOutput) {\r\n            super.flush(input, state, output);\r\n            Rect.copyTo(output.naturalBounds, input.naturalBounds);\r\n        }\r\n    }\r\n}","/// <reference path=\"../../shape/measure/ShapeMeasurePipeDef\" />\r\n\r\nmodule minerva.shapes.ellipse.measure {\r\n    export class EllipseMeasurePipeDef extends shape.measure.ShapeMeasurePipeDef {\r\n        constructor () {\r\n            super();\r\n            this.addTapinBefore('doOverride', 'shrinkAvailable', tapins.shrinkAvailable);\r\n        }\r\n    }\r\n\r\n    export module tapins {\r\n        export function shrinkAvailable (input: shape.measure.IInput, state: shape.measure.IState, output: shape.measure.IOutput, tree: core.IUpdaterTree) {\r\n            var available = state.availableSize;\r\n            available.width = available.height = 0;\r\n            return true;\r\n        }\r\n    }\r\n}","module minerva.shapes.shape.render {\r\n    export interface IInput extends core.render.IInput {\r\n        fill: IBrush;\r\n        fillRule: FillRule;\r\n        stroke: IBrush;\r\n        strokeThickness: number;\r\n        strokeStartLineCap: PenLineCap;\r\n        strokeEndLineCap: PenLineCap;\r\n        strokeLineJoin: PenLineJoin;\r\n        strokeMiterLimit: number;\r\n\r\n        shapeFlags: ShapeFlags;\r\n        shapeRect: Rect;\r\n        naturalBounds: Rect;\r\n    }\r\n    export interface IState extends core.render.IState {\r\n        shouldDraw: boolean;\r\n    }\r\n    export interface IOutput extends core.render.IOutput {\r\n    }\r\n\r\n    export class ShapeRenderPipeDef extends core.render.RenderPipeDef {\r\n        constructor () {\r\n            super();\r\n            this.addTapinBefore('doRender', 'calcShouldDraw', tapins.calcShouldDraw)\r\n                .addTapinBefore('doRender', 'prepareDraw', tapins.prepareDraw)\r\n                .replaceTapin('doRender', tapins.doRender)\r\n                .addTapinAfter('doRender', 'fill', tapins.fill)\r\n                .addTapinAfter('fill', 'finishDraw', tapins.finishDraw)\r\n                .addTapinAfter('finishDraw', 'stroke', tapins.stroke);\r\n        }\r\n\r\n        createState (): IState {\r\n            var state = <IState>super.createState();\r\n            state.shouldDraw = false;\r\n            return state;\r\n        }\r\n    }\r\n}","/// <reference path=\"../../shape/render/ShapeRenderPipeDef\" />\r\n\r\nmodule minerva.shapes.ellipse.render {\r\n    export interface IInput extends shape.render.IInput {\r\n        shapeRect: Rect;\r\n    }\r\n    export interface IState extends shape.render.IState {\r\n    }\r\n    export interface IOutput extends shape.render.IOutput {\r\n    }\r\n\r\n    export class EllipseRenderPipeDef extends shape.render.ShapeRenderPipeDef {\r\n        constructor () {\r\n            super();\r\n            this.replaceTapin('doRender', tapins.doRender);\r\n        }\r\n    }\r\n\r\n    export module tapins {\r\n        export function doRender (input: IInput, state: IState, output: IOutput, ctx: core.render.RenderContext, region: Rect): boolean {\r\n            if (!state.shouldDraw)\r\n                return true;\r\n\r\n            var sr = input.shapeRect;\r\n            helpers.draw(ctx.raw, sr.x, sr.y, sr.width, sr.height);\r\n\r\n            return true;\r\n        }\r\n    }\r\n}","/// <reference path=\"../../shape/measure/ShapeMeasurePipeDef\" />\r\n\r\nmodule minerva.shapes.path.measure {\r\n    export interface IInput extends shape.measure.IInput {\r\n        data: AnonPathGeometry;\r\n    }\r\n    export interface IState extends shape.measure.IState {\r\n    }\r\n    export interface IOutput extends shape.measure.IOutput {\r\n    }\r\n\r\n    export class PathMeasurePipeDef extends shape.measure.ShapeMeasurePipeDef {\r\n        constructor () {\r\n            super();\r\n            this.addTapinBefore('calcNaturalBounds', 'buildPath', tapins.buildPath)\r\n                .replaceTapin('calcNaturalBounds', tapins.calcNaturalBounds);\r\n        }\r\n    }\r\n\r\n    export module tapins {\r\n        export function buildPath (input: IInput, state: IState, output: IOutput, tree: core.IUpdaterTree) {\r\n            return true;\r\n        }\r\n\r\n        export function calcNaturalBounds (input: IInput, state: IState, output: IOutput, tree: core.IUpdaterTree) {\r\n            var nb = output.naturalBounds;\r\n            nb.x = nb.y = nb.width = nb.height = 0;\r\n            if (input.data) {\r\n                var bounds = input.data.GetBounds(input);\r\n                Rect.copyTo(bounds, nb);\r\n            }\r\n\r\n            return true;\r\n        }\r\n    }\r\n}","/// <reference path=\"../../path/measure/PathMeasurePipeDef\" />\r\n\r\nmodule minerva.shapes.line.measure {\r\n    export interface IInput extends path.measure.IInput {\r\n        x1: number;\r\n        y1: number;\r\n        x2: number;\r\n        y2: number;\r\n    }\r\n    export interface IState extends path.measure.IState {\r\n    }\r\n    export interface IOutput extends path.measure.IOutput {\r\n    }\r\n\r\n    export class LineMeasurePipeDef extends path.measure.PathMeasurePipeDef {\r\n        constructor () {\r\n            super();\r\n            this.replaceTapin('buildPath', tapins.buildPath);\r\n        }\r\n    }\r\n\r\n    export module tapins {\r\n        export function buildPath (input: IInput, state: IState, output: IOutput, tree: core.IUpdaterTree) {\r\n            if (!input.data.old)\r\n                return true;\r\n            var path = input.data.path;\r\n            path.reset();\r\n            path.move(input.x1, input.y1);\r\n            path.line(input.x2, input.y2);\r\n            input.data.old = false;\r\n            return true;\r\n        }\r\n    }\r\n}","module minerva.shapes.path.hittest {\r\n    export interface IHitTestData extends shape.hittest.IHitTestData {\r\n        assets: IPathUpdaterAssets;\r\n    }\r\n\r\n    export class PathHitTestPipeDef extends shape.hittest.ShapeHitTestPipeDef {\r\n        constructor () {\r\n            super();\r\n            this.replaceTapin('drawShape', tapins.drawShape);\r\n        }\r\n    }\r\n\r\n    export module tapins {\r\n        export function drawShape (data: IHitTestData, pos: Point, hitList: core.Updater[], ctx: core.render.RenderContext): boolean {\r\n            var assets = data.assets;\r\n            ctx.preapply(assets.stretchXform);\r\n            assets.data.Draw(ctx);\r\n            return true;\r\n        }\r\n    }\r\n}","module minerva.shapes.shape.processup {\r\n    export interface IInput extends core.processup.IInput {\r\n        stroke: IBrush;\r\n        strokeThickness: number;\r\n\r\n        shapeFlags: ShapeFlags;\r\n        shapeRect: Rect;\r\n    }\r\n    export interface IState extends core.processup.IState {\r\n    }\r\n    export interface IOutput extends core.processup.IOutput {\r\n        shapeFlags: ShapeFlags;\r\n        shapeRect: Rect;\r\n    }\r\n\r\n    export class ShapeProcessUpPipeDef extends core.processup.ProcessUpPipeDef {\r\n        constructor () {\r\n            super();\r\n            this.addTapinBefore('calcExtents', 'calcShapeRect', tapins.calcShapeRect)\r\n                .replaceTapin('calcExtents', tapins.calcExtents);\r\n        }\r\n\r\n        createOutput () {\r\n            var output = <IOutput>super.createOutput();\r\n            output.shapeFlags = ShapeFlags.None;\r\n            output.shapeRect = new Rect();\r\n            return output;\r\n        }\r\n\r\n        prepare (input: IInput, state: IState, output: IOutput) {\r\n            output.shapeFlags = input.shapeFlags;\r\n            Rect.copyTo(input.shapeRect, output.shapeRect);\r\n            super.prepare(input, state, output);\r\n        }\r\n\r\n        flush (input: IInput, state: IState, output: IOutput) {\r\n            super.flush(input, state, output);\r\n            Rect.copyTo(output.shapeRect, input.shapeRect);\r\n            input.shapeFlags = output.shapeFlags;\r\n        }\r\n    }\r\n}","/// <reference path=\"../../shape/processup/ShapeProcessUpPipeDef\" />\r\n\r\nmodule minerva.shapes.path.processup {\r\n    export interface IInput extends shape.processup.IInput {\r\n        naturalBounds: Rect;\r\n        data: AnonPathGeometry;\r\n        stretch: Stretch;\r\n        stretchXform: number[];\r\n    }\r\n    export interface IState extends shape.processup.IState {\r\n    }\r\n    export interface IOutput extends shape.processup.IOutput {\r\n        stretchXform: number[];\r\n    }\r\n\r\n    export class PathProcessUpPipeDef extends shape.processup.ShapeProcessUpPipeDef {\r\n        constructor () {\r\n            super();\r\n            this.replaceTapin('calcActualSize', tapins.calcActualSize)\r\n                .replaceTapin('calcShapeRect', tapins.calcShapeRect)\r\n                .addTapinBefore('calcExtents', 'calcStretch', tapins.calcStretch)\r\n                .replaceTapin('calcExtents', tapins.calcExtents);\r\n        }\r\n\r\n        createOutput () {\r\n            var output = <IOutput>super.createOutput();\r\n            output.stretchXform = mat3.identity();\r\n            return output;\r\n        }\r\n\r\n        prepare (input: IInput, state: IState, output: IOutput) {\r\n            mat3.copyTo(input.stretchXform, output.stretchXform);\r\n            super.prepare(input, state, output);\r\n        }\r\n\r\n        flush (input: IInput, state: IState, output: IOutput) {\r\n            super.flush(input, state, output);\r\n            mat3.copyTo(output.stretchXform, input.stretchXform);\r\n        }\r\n    }\r\n}","/// <reference path=\"../../shape/render/ShapeRenderPipeDef\" />\r\n\r\nmodule minerva.shapes.path.render {\r\n    export interface IInput extends shape.render.IInput {\r\n        data: AnonPathGeometry;\r\n        stretchXform: number[];\r\n    }\r\n    export interface IState extends shape.render.IState {\r\n    }\r\n    export interface IOutput extends shape.render.IOutput {\r\n    }\r\n\r\n    export class PathRenderPipeDef extends shape.render.ShapeRenderPipeDef {\r\n        constructor () {\r\n            super();\r\n            this.replaceTapin('doRender', tapins.doRender)\r\n                .replaceTapin('fill', tapins.fill);\r\n        }\r\n    }\r\n}","/// <reference path=\"../../path/measure/PathMeasurePipeDef\" />\r\n\r\nmodule minerva.shapes.polyline.measure {\r\n    export interface IInput extends path.measure.IInput {\r\n        isClosed: boolean;\r\n        points: IPoint[];\r\n    }\r\n    export interface IState extends path.measure.IState {\r\n    }\r\n    export interface IOutput extends path.measure.IOutput {\r\n    }\r\n\r\n    export class PolylineMeasurePipeDef extends path.measure.PathMeasurePipeDef {\r\n        constructor () {\r\n            super();\r\n            this.replaceTapin('buildPath', tapins.buildPath);\r\n        }\r\n    }\r\n\r\n    export module tapins {\r\n        export function buildPath (input: IInput, state: IState, output: IOutput, tree: core.IUpdaterTree) {\r\n            if (!input.data.old)\r\n                return true;\r\n\r\n            var path = input.data.path;\r\n            path.reset();\r\n\r\n            var points = input.points;\r\n            if (points.length < 2)\r\n                return true;\r\n\r\n            var p0 = points[0];\r\n            var p = points[1];\r\n            if (points.length === 2) {\r\n                extendLine(p0, p, input.strokeThickness);\r\n                path.move(p0.x, p0.y);\r\n                path.line(p.x, p.y);\r\n            } else {\r\n                path.move(p0.x, p0.y);\r\n                for (var i = 1; i < points.length; i++) {\r\n                    var p = points[i];\r\n                    path.line(p.x, p.y);\r\n                }\r\n            }\r\n            if (input.isClosed)\r\n                path.close();\r\n\r\n            input.data.old = false;\r\n            return true;\r\n        }\r\n\r\n        function extendLine (p1: IPoint, p2: IPoint, thickness: number) {\r\n            var t5 = thickness * 5.0;\r\n            var dx = p1.x - p2.x;\r\n            var dy = p1.y - p2.y;\r\n\r\n            if (dy === 0.0) {\r\n                t5 -= thickness / 2.0;\r\n                if (dx > 0.0) {\r\n                    p1.x += t5;\r\n                    p2.x -= t5;\r\n                } else {\r\n                    p1.x -= t5;\r\n                    p2.x += t5;\r\n                }\r\n            } else if (dx === 0.0) {\r\n                t5 -= thickness / 2.0;\r\n                if (dy > 0.0) {\r\n                    p1.y += t5;\r\n                    p2.y -= t5;\r\n                } else {\r\n                    p1.y -= t5;\r\n                    p2.y += t5;\r\n                }\r\n            } else {\r\n                var angle = Math.atan2(dy, dx);\r\n                var ax = Math.abs(Math.sin(angle) * t5);\r\n                if (dx > 0.0) {\r\n                    p1.x += ax;\r\n                    p2.x -= ax;\r\n                } else {\r\n                    p1.x -= ax;\r\n                    p2.x += ax;\r\n                }\r\n                var ay = Math.abs(Math.sin(Math.PI / 2 - angle)) * t5;\r\n                if (dy > 0.0) {\r\n                    p1.y += ay;\r\n                    p2.y -= ay;\r\n                } else {\r\n                    p1.y -= ay;\r\n                    p2.y += ay;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","module minerva.shapes.rectangle.helpers {\r\n    export function draw (ctx: CanvasRenderingContext2D, left: number, top: number, width: number, height: number, radiusX: number, radiusY: number) {\r\n        var right = left + width;\r\n        var bottom = top + height;\r\n        if (!radiusX && !radiusY) {\r\n            ctx.beginPath();\r\n            ctx.rect(left, top, right - left, bottom - top);\r\n        }\r\n\r\n        ctx.beginPath();\r\n        ctx.moveTo(left + radiusX, top);\r\n        //top edge\r\n        ctx.lineTo(right - radiusX, top);\r\n        //top right arc\r\n        ctx.ellipse(right - radiusX, top + radiusY, radiusX, radiusY, 0, 3 * Math.PI / 2, 2 * Math.PI);\r\n        //right edge\r\n        ctx.lineTo(right, bottom - radiusY);\r\n        //bottom right arc\r\n        ctx.ellipse(right - radiusX, bottom - radiusY, radiusX, radiusY, 0, 0, Math.PI / 2);\r\n        //bottom edge\r\n        ctx.lineTo(left + radiusX, bottom);\r\n        //bottom left arc\r\n        ctx.ellipse(left + radiusX, bottom - radiusY, radiusX, radiusY, 0, Math.PI / 2, Math.PI);\r\n        //left edge\r\n        ctx.lineTo(left, top + radiusY);\r\n        //top left arc\r\n        ctx.ellipse(left + radiusX, top + radiusY, radiusX, radiusY, 0, Math.PI, 3 * Math.PI / 2);\r\n        ctx.closePath();\r\n    }\r\n}","/// <reference path=\"../../shape/hittest/ShapeHitTestPipeDef\" />\r\n\r\nmodule minerva.shapes.rectangle.hittest {\r\n    export interface IHitTestData extends shape.hittest.IHitTestData {\r\n        assets: IRectangleUpdaterAssets;\r\n    }\r\n\r\n    export class RectangleHitTestPipeDef extends shape.hittest.ShapeHitTestPipeDef {\r\n        constructor () {\r\n            super();\r\n            this.replaceTapin('drawShape', tapins.drawShape);\r\n        }\r\n    }\r\n\r\n    export module tapins {\r\n        export function drawShape (data: IHitTestData, pos: Point, hitList: core.Updater[], ctx: core.render.RenderContext): boolean {\r\n            var assets = data.assets;\r\n            var sr = assets.shapeRect;\r\n            var rx = Math.min(Math.abs(assets.radiusX), sr.width / 2.0);\r\n            if (isNaN(rx))\r\n                rx = 0;\r\n            var ry = Math.min(Math.abs(assets.radiusY), sr.height / 2.0);\r\n            if (isNaN(ry))\r\n                ry = 0;\r\n\r\n            helpers.draw(ctx.raw, sr.x, sr.y, sr.width, sr.height, rx, ry);\r\n\r\n            return true;\r\n        }\r\n    }\r\n}","/// <reference path=\"../../shape/measure/ShapeMeasurePipeDef\" />\r\n\r\nmodule minerva.shapes.rectangle.measure {\r\n    export class RectangleMeasurePipeDef extends shape.measure.ShapeMeasurePipeDef {\r\n        constructor () {\r\n            super();\r\n            this.addTapinBefore('doOverride', 'shrinkAvailable', tapins.shrinkAvailable);\r\n        }\r\n    }\r\n\r\n    export module tapins {\r\n        export function shrinkAvailable (input: shape.measure.IInput, state: shape.measure.IState, output: shape.measure.IOutput, tree: core.IUpdaterTree) {\r\n            var available = state.availableSize;\r\n            available.width = available.height = 0;\r\n            return true;\r\n        }\r\n    }\r\n}","/// <reference path=\"../../shape/render/ShapeRenderPipeDef\" />\r\n\r\nmodule minerva.shapes.rectangle.render {\r\n    export interface IInput extends shape.render.IInput {\r\n        radiusX: number;\r\n        radiusY: number;\r\n        shapeRect: Rect;\r\n    }\r\n    export interface IState extends shape.render.IState {\r\n    }\r\n    export interface IOutput extends shape.render.IOutput {\r\n    }\r\n\r\n    export class RectangleRenderPipeDef extends shape.render.ShapeRenderPipeDef {\r\n        constructor () {\r\n            super();\r\n            this.replaceTapin('doRender', tapins.doRender);\r\n        }\r\n    }\r\n\r\n    export module tapins {\r\n        export function doRender (input: IInput, state: IState, output: IOutput, ctx: core.render.RenderContext, region: Rect): boolean {\r\n            if (!state.shouldDraw)\r\n                return true;\r\n\r\n            var sr = input.shapeRect;\r\n            var rx = Math.min(Math.max(0, input.radiusX), sr.width / 2.0);\r\n            if (isNaN(rx))\r\n                rx = 0;\r\n            var ry = Math.min(Math.max(0, input.radiusY), sr.height / 2.0);\r\n            if (isNaN(ry))\r\n                ry = 0;\r\n\r\n            helpers.draw(ctx.raw, sr.x, sr.y, sr.width, sr.height, rx, ry);\r\n\r\n            return true;\r\n        }\r\n    }\r\n}","module minerva.shapes.shape.arrange {\r\n    export interface IInput extends core.arrange.IInput {\r\n        stretch: Stretch;\r\n        fill: IBrush;\r\n        fillRule: FillRule;\r\n        stroke: IBrush;\r\n        strokeThickness: number;\r\n        strokeStartLineCap: PenLineCap;\r\n        strokeEndLineCap: PenLineCap;\r\n        strokeLineJoin: PenLineJoin;\r\n        strokeMiterLimit: number;\r\n\r\n        naturalBounds: Rect;\r\n    }\r\n    export interface IState extends core.arrange.IState {\r\n    }\r\n    export interface IOutput extends core.arrange.IOutput {\r\n    }\r\n\r\n    export class ShapeArrangePipeDef extends core.arrange.ArrangePipeDef {\r\n        constructor () {\r\n            super();\r\n            this.replaceTapin('doOverride', tapins.doOverride);\r\n        }\r\n    }\r\n}","module minerva.controls.border.render.helpers {\r\n    var ARC_TO_BEZIER = 0.55228475;\r\n\r\n    export function drawBorderRect (ctx: CanvasRenderingContext2D, extents: Rect, cr?: ICornerRadius) {\r\n        if (!cr || CornerRadius.isEmpty(cr)) {\r\n            ctx.rect(extents.x, extents.y, extents.width, extents.height);\r\n            return;\r\n        }\r\n\r\n        var top_adj = Math.max(cr.topLeft + cr.topRight - extents.width, 0) / 2;\r\n        var bottom_adj = Math.max(cr.bottomLeft + cr.bottomRight - extents.width, 0) / 2;\r\n        var left_adj = Math.max(cr.topLeft + cr.bottomLeft - extents.height, 0) / 2;\r\n        var right_adj = Math.max(cr.topRight + cr.bottomRight - extents.height, 0) / 2;\r\n\r\n        var tlt = cr.topLeft - top_adj;\r\n        ctx.moveTo(extents.x + tlt, extents.y);\r\n\r\n        var trt = cr.topRight - top_adj;\r\n        var trr = cr.topRight - right_adj;\r\n        ctx.lineTo(extents.x + extents.width - trt, extents.y);\r\n        ctx.bezierCurveTo(\r\n            extents.x + extents.width - trt + trt * ARC_TO_BEZIER, extents.y,\r\n            extents.x + extents.width, extents.y + trr - trr * ARC_TO_BEZIER,\r\n            extents.x + extents.width, extents.y + trr);\r\n\r\n        var brr = cr.bottomRight - right_adj;\r\n        var brb = cr.bottomRight - bottom_adj;\r\n        ctx.lineTo(extents.x + extents.width, extents.y + extents.height - brr);\r\n        ctx.bezierCurveTo(\r\n            extents.x + extents.width, extents.y + extents.height - brr + brr * ARC_TO_BEZIER,\r\n            extents.x + extents.width + brb * ARC_TO_BEZIER - brb, extents.y + extents.height,\r\n            extents.x + extents.width - brb, extents.y + extents.height);\r\n\r\n        var blb = cr.bottomLeft - bottom_adj;\r\n        var bll = cr.bottomLeft - left_adj;\r\n        ctx.lineTo(extents.x + blb, extents.y + extents.height);\r\n        ctx.bezierCurveTo(\r\n            extents.x + blb - blb * ARC_TO_BEZIER, extents.y + extents.height,\r\n            extents.x, extents.y + extents.height - bll + bll * ARC_TO_BEZIER,\r\n            extents.x, extents.y + extents.height - bll);\r\n\r\n        var tll = cr.topLeft - left_adj;\r\n        ctx.lineTo(extents.x, extents.y + tll);\r\n        ctx.bezierCurveTo(\r\n            extents.x, extents.y + tll - tll * ARC_TO_BEZIER,\r\n            extents.x + tlt - tlt * ARC_TO_BEZIER, extents.y,\r\n            extents.x + tlt, extents.y);\r\n    }\r\n}","module minerva.controls.border.render.tapins {\r\n    export function calcInnerOuter (input: IInput, state: IState, output: IOutput, ctx: core.render.RenderContext, region: Rect, tree: core.IUpdaterTree): boolean {\r\n        if (!state.shouldRender)\r\n            return true;\r\n\r\n        Rect.copyTo(input.extents, state.fillExtents);\r\n\r\n        var bt = input.borderThickness;\r\n        Thickness.shrinkRect(bt, state.fillExtents);\r\n\r\n        var ia = state.innerCornerRadius;\r\n        CornerRadius.copyTo(input.cornerRadius, ia);\r\n        Thickness.shrinkCornerRadius(bt, ia);\r\n\r\n        var oa = state.outerCornerRadius;\r\n        CornerRadius.copyTo(input.cornerRadius, oa);\r\n        Thickness.growCornerRadius(bt, oa);\r\n\r\n        return true;\r\n    }\r\n}","module minerva.controls.border.render.tapins {\r\n    export function calcShouldRender (input: IInput, state: IState, output: IOutput, ctx: core.render.RenderContext, region: Rect, tree: core.IUpdaterTree): boolean {\r\n        state.shouldRender = false;\r\n        if (!input.background && !input.borderBrush)\r\n            return true;\r\n        if (Rect.isEmpty(input.extents))\r\n            return true;\r\n        var fillOnly = !input.borderBrush || !input.borderThickness || Thickness.isEmpty(input.borderThickness);\r\n        if (fillOnly && !input.background)\r\n            return true;\r\n        state.shouldRender = true;\r\n        return true;\r\n    }\r\n}","module minerva.controls.border.render.tapins {\r\n    export function doRender (input: IInput, state: IState, output: IOutput, ctx: core.render.RenderContext, region: Rect, tree: core.IUpdaterTree): boolean {\r\n        if (!state.shouldRender)\r\n            return true;\r\n        ctx.save();\r\n        core.helpers.renderLayoutClip(ctx, input, tree);\r\n\r\n        var borderBrush = input.borderBrush;\r\n        var extents = input.extents;\r\n        var fillExtents = state.fillExtents;\r\n        var raw = ctx.raw;\r\n        if (borderBrush && !Rect.isEmpty(extents)) {\r\n            raw.beginPath();\r\n            helpers.drawBorderRect(raw, extents, state.outerCornerRadius);\r\n            helpers.drawBorderRect(raw, fillExtents, state.innerCornerRadius);\r\n            ctx.fillEx(borderBrush, extents, FillRule.EvenOdd);\r\n        }\r\n        var background = input.background;\r\n        if (background && !Rect.isEmpty(fillExtents)) {\r\n            raw.beginPath();\r\n            helpers.drawBorderRect(raw, fillExtents, state.innerCornerRadius);\r\n            ctx.fillEx(background, fillExtents);\r\n        }\r\n\r\n        ctx.restore();\r\n        return true;\r\n    }\r\n}","module minerva.controls.canvas.arrange.tapins {\r\n    export function buildLayoutClip (input: IInput, state: IState, output: IOutput, tree: core.IUpdaterTree, finalRect: Rect): boolean {\r\n        var lc = output.layoutClip;\r\n        lc.x = lc.y = lc.width = lc.height = 0;\r\n        return true;\r\n    }\r\n}","module minerva.controls.canvas.arrange.tapins {\r\n    export function doOverride (input: IInput, state: IState, output: IOutput, tree: core.IUpdaterTree, finalRect: Rect): boolean {\r\n        var cr = state.childRect;\r\n        var child: core.Updater;\r\n        for (var walker = tree.walk(); walker.step();) {\r\n            child = walker.current;\r\n            Size.copyTo(child.assets.desiredSize, cr);\r\n            //NOTE: Coercing undefined, null, NaN, and 0 to 0\r\n            cr.x = child.getAttachedValue(\"Canvas.Left\") || 0;\r\n            cr.y = child.getAttachedValue(\"Canvas.Top\") || 0;\r\n            child.arrange(cr);\r\n        }\r\n        Size.copyTo(state.finalSize, state.arrangedSize);\r\n        return true;\r\n    }\r\n}","module minerva.controls.canvas.measure.tapins {\r\n    export function doOverride (input: IInput, state: IState, output: IOutput, tree: core.IUpdaterTree, availableSize: Size): boolean {\r\n        var available = state.availableSize;\r\n        available.width = available.height = Number.POSITIVE_INFINITY;\r\n        for (var walker = tree.walk(); walker.step();) {\r\n            walker.current.measure(available);\r\n        }\r\n        var desired = output.desiredSize;\r\n        desired.width = desired.height = 0;\r\n        return true;\r\n    }\r\n}","module minerva.controls.canvas.processup.tapins {\r\n    export var calcPaintBounds = function (input: IInput, state: IState, output: IOutput, tree: core.IUpdaterTree): boolean {\r\n        if ((input.dirtyFlags & DirtyFlags.Bounds) === 0)\r\n            return true;\r\n\r\n        core.helpers.intersectBoundsWithClipPath(output.globalBoundsWithChildren, output.extentsWithChildren, input.effectPadding, input.renderXform, input.clip, input.layoutClip);\r\n        var sbwc = output.surfaceBoundsWithChildren;\r\n        var surface = tree.surface;\r\n        if (surface && tree.isTop) {\r\n            sbwc.x = sbwc.y = 0;\r\n            sbwc.width = surface.width;\r\n            sbwc.height = surface.height;\r\n        } else {\r\n            core.helpers.intersectBoundsWithClipPath(sbwc, output.extentsWithChildren, input.effectPadding, input.absoluteXform, input.clip, input.layoutClip);\r\n        }\r\n\r\n        return true;\r\n    };\r\n}","module minerva.controls.grid.arrange.tapins {\r\n    export function calcConsumed (input: IInput, state: IState, output: IOutput, tree: core.IUpdaterTree, finalRect: Rect): boolean {\r\n        var con = state.consumed;\r\n        con.width = con.height = 0;\r\n        var fs = state.finalSize;\r\n\r\n        var cm = input.gridState.colMatrix;\r\n        for (var i = 0; i < cm.length; i++) {\r\n            con.width += (cm[i][i].offered = cm[i][i].desired);\r\n        }\r\n        var rm = input.gridState.rowMatrix;\r\n        for (var i = 0; i < rm.length; i++) {\r\n            con.height += (rm[i][i].offered = rm[i][i].desired);\r\n        }\r\n\r\n        if (con.width !== fs.width)\r\n            helpers.expandStarCols(cm, input.columnDefinitions, fs);\r\n        if (con.height !== fs.height)\r\n            helpers.expandStarRows(rm, input.rowDefinitions, fs);\r\n\r\n        return true;\r\n    }\r\n}","module minerva.controls.grid.arrange.tapins {\r\n    export function doOverride (input: IInput, state: IState, output: IOutput, tree: core.IUpdaterTree, finalRect: Rect): boolean {\r\n        var cr = state.childRect;\r\n\r\n        var rm = input.gridState.rowMatrix;\r\n        var cm = input.gridState.colMatrix;\r\n\r\n        for (var walker = tree.walk(); walker.step();) {\r\n            var child = walker.current;\r\n\r\n            var col = Math.min(child.getAttachedValue(\"Grid.Column\"), cm.length - 1);\r\n            if (isNaN(col))\r\n                col = 0;\r\n            var row = Math.min(child.getAttachedValue(\"Grid.Row\"), rm.length - 1);\r\n            if (isNaN(row))\r\n                row = 0;\r\n            var colspan = Math.min(child.getAttachedValue(\"Grid.ColumnSpan\"), cm.length - col);\r\n            if (isNaN(colspan))\r\n                colspan = 1;\r\n            var rowspan = Math.min(child.getAttachedValue(\"Grid.RowSpan\"), rm.length - row);\r\n            if (isNaN(rowspan))\r\n                rowspan = 1;\r\n\r\n            cr.x = cr.y = cr.width = cr.height = 0;\r\n            for (var i = 0; i < col; i++) {\r\n                cr.x += cm[i][i].offered;\r\n            }\r\n            for (var i = col; i < col + colspan; i++) {\r\n                cr.width += cm[i][i].offered;\r\n            }\r\n            for (var i = 0; i < row; i++) {\r\n                cr.y += rm[i][i].offered;\r\n            }\r\n            for (var i = row; i < row + rowspan; i++) {\r\n                cr.height += rm[i][i].offered;\r\n            }\r\n\r\n            child.arrange(cr);\r\n        }\r\n\r\n        Size.copyTo(state.finalSize, state.arrangedSize);\r\n        return true;\r\n    }\r\n}","module minerva.controls.grid.arrange.tapins {\r\n    export function restoreMeasureResults (input: IInput, state: IState, output: IOutput, tree: core.IUpdaterTree, finalRect: Rect): boolean {\r\n        for (var rm = input.gridState.rowMatrix, i = 0; i < rm.length; i++) {\r\n            for (var j = 0; j <= i; j++) {\r\n                rm[i][j].offered = rm[i][j].original;\r\n            }\r\n        }\r\n\r\n        for (var cm = input.gridState.colMatrix, i = 0; i < cm.length; i++) {\r\n            for (var j = 0; j <= i; j++) {\r\n                cm[i][j].offered = cm[i][j].original;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n}","module minerva.controls.grid.arrange.tapins {\r\n    export function setActuals (input: IInput, state: IState, output: IOutput, tree: core.IUpdaterTree, finalRect: Rect): boolean {\r\n        for (var coldefs = input.columnDefinitions, cm = input.gridState.colMatrix, i = 0; i < coldefs.length; i++) {\r\n            coldefs[i].setActualWidth(cm[i][i].offered);\r\n        }\r\n\r\n        for (var rowdefs = input.rowDefinitions, rm = input.gridState.rowMatrix, i = 0; i < rowdefs.length; i++) {\r\n            rowdefs[i].setActualHeight(rm[i][i].offered);\r\n        }\r\n\r\n        return true;\r\n    }\r\n}","module minerva.controls.grid.measure.tapins {\r\n    export function buildShape (input: IInput, state: IState, output: panel.measure.IOutput, tree: panel.PanelUpdaterTree, finalRect: Rect): boolean {\r\n        var shapes = state.childShapes;\r\n        var cm = input.gridState.colMatrix;\r\n        var rm = input.gridState.rowMatrix;\r\n        for (var walker = tree.walk(), i = 0; walker.step(); i++) {\r\n            if (i > shapes.length)\r\n                shapes.push(new GridChildShape().init(walker.current, rm, cm));\r\n            else\r\n                (shapes[i] = shapes[i] || new GridChildShape()).init(walker.current, rm, cm);\r\n        }\r\n        if (i < shapes.length)\r\n            shapes.slice(i, shapes.length - i);\r\n\r\n        state.gridShape.init(state.childShapes);\r\n\r\n        state.placements.length = 0;\r\n        state.placements.push(new GridChildPlacement(null, 0, 0, 0));\r\n        state.placementIndex = 0;\r\n\r\n        return true;\r\n    }\r\n}","module minerva.controls.grid.measure.tapins {\r\n    export function createDoOverridePass (pass: OverridePass) {\r\n        return function doOverridePass (input: IInput, state: IState, output: panel.measure.IOutput, tree: panel.PanelUpdaterTree, finalRect: Rect): boolean {\r\n            var rm = input.gridState.rowMatrix;\r\n            var cm = input.gridState.colMatrix;\r\n\r\n            if (tree.children.length > 0) {\r\n                helpers.expandStarCols(cm, input.columnDefinitions, state.availableSize);\r\n                helpers.expandStarRows(rm, input.rowDefinitions, state.availableSize);\r\n            }\r\n\r\n            var placements = state.placements;\r\n            var placement: GridChildPlacement;\r\n            var separator = placements[0];\r\n\r\n            var shapes = state.childShapes;\r\n            var childSize = state.childSize;\r\n            for (var walker = tree.walk(), i = 0; walker.step(); i++) {\r\n                var child = walker.current;\r\n                var childShape = shapes[i];\r\n                if (!childShape.shouldMeasurePass(state.gridShape, childSize, pass))\r\n                    continue;\r\n                childShape.size(childSize, rm, cm);\r\n                child.measure(childSize);\r\n\r\n                if (pass !== OverridePass.StarAuto) {\r\n                    placement = GridChildPlacement.row(rm, childShape, child);\r\n                    if (placement.row === placement.col) {\r\n                        placements.splice(state.placementIndex + 1, 0, placement);\r\n                    } else {\r\n                        placements.splice(state.placementIndex, 0, placement);\r\n                        state.placementIndex++;\r\n                    }\r\n                }\r\n\r\n                placement = GridChildPlacement.col(cm, childShape, child);\r\n                if (placement.row === placement.col) {\r\n                    placements.splice(state.placementIndex + 1, 0, placement);\r\n                } else {\r\n                    placements.splice(state.placementIndex, 0, placement);\r\n                    state.placementIndex++;\r\n                }\r\n            }\r\n\r\n            placements.splice(state.placementIndex, 1);\r\n            state.placementIndex = -1;\r\n\r\n            while (placement = placements.pop()) {\r\n                var cell = placement.matrix[placement.row][placement.col];\r\n                cell.desired = Math.max(cell.desired, placement.size);\r\n                helpers.allocateDesiredSize(rm, cm);\r\n            }\r\n            state.placementIndex = placements.push(separator) - 1;\r\n\r\n            return true;\r\n        };\r\n    }\r\n}","module minerva.controls.grid.measure.tapins {\r\n    export function doOverride (input: IInput, state: IState, output: panel.measure.IOutput, tree: core.IUpdaterTree, finalRect: Rect): boolean {\r\n        var desired = output.desiredSize;\r\n        desired.width = desired.height = 0;\r\n        for (var cm = input.gridState.colMatrix, i = 0; i < cm.length; i++) {\r\n            desired.width += cm[i][i].desired;\r\n        }\r\n        for (var rm = input.gridState.rowMatrix, i = 0; i < rm.length; i++) {\r\n            desired.height += rm[i][i].desired;\r\n        }\r\n        return true;\r\n    }\r\n}","module minerva.controls.grid.measure.tapins {\r\n    export function ensureColMatrix (input: IInput, state: IState, output: panel.measure.IOutput, tree: core.IUpdaterTree, finalRect: Rect): boolean {\r\n        var colCount = input.columnDefinitions.length || 1;\r\n        var cm = input.gridState.colMatrix;\r\n        if (cm.length > colCount)\r\n            cm.splice(colCount, cm.length - colCount);\r\n        for (var c = 0; c < colCount; c++) {\r\n            if (cm.length <= c)\r\n                cm.push([]);\r\n            var mrow = cm[c];\r\n            if (mrow.length > c)\r\n                mrow.splice(c, mrow.length - c);\r\n            for (var cc = 0; cc <= c; cc++) {\r\n                if (mrow.length <= cc)\r\n                    mrow.push(new Segment());\r\n                else\r\n                    Segment.init(mrow[cc]);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n}","module minerva.controls.grid.measure.tapins {\r\n    export function ensureRowMatrix (input: IInput, state: IState, output: panel.measure.IOutput, tree: core.IUpdaterTree, finalRect: Rect): boolean {\r\n        var rowCount = input.rowDefinitions.length || 1;\r\n        var rm = input.gridState.rowMatrix;\r\n        if (rm.length > rowCount)\r\n            rm.splice(rowCount, rm.length - rowCount);\r\n        for (var r = 0; r < rowCount; r++) {\r\n            if (rm.length <= r)\r\n                rm.push([]);\r\n            var mrow = rm[r];\r\n            if (mrow.length > (r + 1))\r\n                mrow.splice(r, mrow.length - r - 1);\r\n            for (var rr = 0; rr <= r; rr++) {\r\n                if (mrow.length <= rr)\r\n                    mrow.push(new Segment());\r\n                else\r\n                    Segment.init(mrow[rr]);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n}","module minerva.controls.grid {\r\n    export enum GridUnitType {\r\n        Auto = 0,\r\n        Pixel = 1,\r\n        Star = 2,\r\n    }\r\n}","/// <reference path=\"../../GridUnitType.ts\" />\r\n\r\nmodule minerva.controls.grid.measure.tapins {\r\n    var DEFAULT_GRID_LEN: IGridLength = {\r\n        Value: 1.0,\r\n        Type: GridUnitType.Star\r\n    };\r\n\r\n    export function prepareColMatrix (input: IInput, state: IState, output: panel.measure.IOutput, tree: core.IUpdaterTree, finalRect: Rect): boolean {\r\n        var coldefs = input.columnDefinitions;\r\n        var cm = input.gridState.colMatrix;\r\n\r\n        var ts = state.totalStars;\r\n        ts.width = 0.0;\r\n\r\n        if (coldefs.length === 0) {\r\n            var mcell = cm[0][0];\r\n            mcell.type = GridUnitType.Star;\r\n            mcell.stars = 1.0;\r\n            ts.width += 1.0;\r\n            return true;\r\n        }\r\n\r\n        for (var i = 0; i < coldefs.length; i++) {\r\n            var coldef = coldefs[i];\r\n            var width = coldef.Width || DEFAULT_GRID_LEN;\r\n            coldef.setActualWidth(Number.POSITIVE_INFINITY);\r\n\r\n            var cell = Segment.init(cm[i][i], 0.0, coldef.MinWidth, coldef.MaxWidth, width.Type);\r\n            if (width.Type === GridUnitType.Pixel) {\r\n                cell.desired = cell.offered = cell.clamp(width.Value);\r\n                coldef.setActualWidth(cell.desired);\r\n            } else if (width.Type === GridUnitType.Star) {\r\n                cell.stars = width.Value;\r\n                ts.width += width.Value;\r\n            } else if (width.Type === GridUnitType.Auto) {\r\n                cell.desired = cell.offered = cell.clamp(0);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n}","module minerva.controls.grid.measure.tapins {\r\n    var DEFAULT_GRID_LEN: IGridLength = {\r\n        Value: 1.0,\r\n        Type: GridUnitType.Star\r\n    };\r\n\r\n    export function prepareRowMatrix (input: IInput, state: IState, output: panel.measure.IOutput, tree: core.IUpdaterTree, finalRect: Rect): boolean {\r\n        var rowdefs = input.rowDefinitions;\r\n        var rm = input.gridState.rowMatrix;\r\n\r\n        var ts = state.totalStars;\r\n        ts.height = 0.0;\r\n\r\n        if (rowdefs.length === 0) {\r\n            var mcell = rm[0][0];\r\n            mcell.type = GridUnitType.Star;\r\n            mcell.stars = 1.0;\r\n            ts.height += 1.0;\r\n            return true;\r\n        }\r\n\r\n        for (var i = 0; i < rowdefs.length; i++) {\r\n            var rowdef = rowdefs[i];\r\n            var height = rowdef.Height || DEFAULT_GRID_LEN;\r\n            rowdef.setActualHeight(Number.POSITIVE_INFINITY);\r\n\r\n            var cell = Segment.init(rm[i][i], 0.0, rowdef.MinHeight, rowdef.MaxHeight, height.Type);\r\n            if (height.Type === GridUnitType.Pixel) {\r\n                cell.desired = cell.offered = cell.clamp(height.Value);\r\n                rowdef.setActualHeight(cell.desired);\r\n            } else if (height.Type === GridUnitType.Star) {\r\n                cell.stars = height.Value;\r\n                ts.height += height.Value;\r\n            } else if (height.Type === GridUnitType.Auto) {\r\n                cell.desired = cell.offered = cell.clamp(0);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n}","module minerva.controls.grid.measure.tapins {\r\n    export function saveMeasureResults (input: IInput, state: IState, output: panel.measure.IOutput, tree: core.IUpdaterTree, finalRect: Rect): boolean {\r\n        for (var rm = input.gridState.rowMatrix, i = 0; i < rm.length; i++) {\r\n            for (var j = 0; j <= i; j++) {\r\n                rm[i][j].original = rm[i][j].offered;\r\n            }\r\n        }\r\n\r\n        for (var cm = input.gridState.colMatrix, i = 0; i < cm.length; i++) {\r\n            for (j = 0; j <= i; j++) {\r\n                cm[i][j].original = cm[i][j].offered;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n}","module minerva.controls.grid.processup.tapins {\r\n    export function calcExtents (input: IInput, state: IState, output: IOutput, tree: core.IUpdaterTree): boolean {\r\n        if ((input.dirtyFlags & DirtyFlags.Bounds) === 0)\r\n            return true;\r\n\r\n        var e = output.extents;\r\n        var ewc = output.extentsWithChildren;\r\n        e.x = ewc.x = 0;\r\n        e.y = ewc.y = 0;\r\n        var as = state.actualSize;\r\n        e.width = ewc.width = as.width;\r\n        e.height = ewc.height = as.height;\r\n\r\n        if (input.showGridLines)\r\n            return true;\r\n\r\n        var assets: core.IUpdaterAssets;\r\n        for (var walker = tree.walk(); walker.step();) {\r\n            assets = walker.current.assets;\r\n            if (assets.totalIsRenderVisible)\r\n                Rect.union(ewc, assets.globalBoundsWithChildren);\r\n        }\r\n\r\n        return true;\r\n    }\r\n}","module minerva.controls.grid.processup.tapins {\r\n    export function preCalcExtents (input: IInput, state: IState, output: IOutput, tree: core.IUpdaterTree): boolean {\r\n        if ((input.dirtyFlags & DirtyFlags.Bounds) === 0)\r\n            return true;\r\n        if (!input.background && !input.showGridLines) {\r\n            var as = state.actualSize;\r\n            as.width = as.height = 0;\r\n        }\r\n        return true;\r\n    }\r\n}","module minerva.controls.image.hittest.tapins {\r\n    export function canHitInside (data: IHitTestData, pos: Point, hitList: core.Updater[], ctx: core.render.RenderContext): boolean {\r\n        return true;\r\n    }\r\n}","module minerva.controls.image.hittest.tapins {\r\n    export function insideChildren (data: IHitTestData, pos: Point, hitList: core.Updater[], ctx: core.render.RenderContext): boolean {\r\n        hitList.unshift(data.updater);\r\n        data.hitChildren = false;\r\n        return true;\r\n    }\r\n}","module minerva.controls.image.hittest.tapins {\r\n    export function insideStretch (data: IHitTestData, pos: Point, hitList: core.Updater[], ctx: core.render.RenderContext): boolean {\r\n        var source = data.assets.source;\r\n        if (!source || source.pixelWidth === 0 || source.pixelHeight === 0) {\r\n            hitList.shift();\r\n            ctx.restore();\r\n            return false;\r\n        }\r\n\r\n        var stretch = data.assets.stretch;\r\n        if (stretch === Stretch.Fill || stretch === Stretch.UniformToFill)\r\n            return true;\r\n\r\n        var ir = data.imgRect;\r\n        ir.x = ir.y = 0;\r\n        ir.width = source.pixelWidth;\r\n        ir.height = source.pixelHeight;\r\n        Rect.transform(ir, data.assets.imgXform);\r\n        Rect.transform(ir, ctx.currentTransform);\r\n\r\n        if (!Rect.containsPoint(ir, pos)) {\r\n            hitList.shift();\r\n            ctx.restore();\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}","module minerva.controls.image.arrange.tapins {\r\n    export function calcImageBounds (input: IInput, state: IState, output: core.arrange.IOutput, tree: core.IUpdaterTree, finalRect: Rect): boolean {\r\n        var ib = state.imageBounds;\r\n        ib.x = ib.y = ib.width = ib.height = 0;\r\n\r\n        if (input.source) {\r\n            ib.width = input.source.pixelWidth;\r\n            ib.height = input.source.pixelHeight;\r\n        }\r\n\r\n        var fs = state.finalSize;\r\n        if (ib.width === 0)\r\n            ib.width = fs.width;\r\n        if (ib.height === 0)\r\n            ib.height = fs.height;\r\n\r\n        return true;\r\n    }\r\n}","module minerva.controls.image.arrange.tapins {\r\n    export function calcStretch (input: IInput, state: IState, output: core.arrange.IOutput, tree: core.IUpdaterTree, finalRect: Rect): boolean {\r\n        var ib = state.imageBounds;\r\n\r\n        var sx = 1.0;\r\n        var sy = 1.0;\r\n\r\n        var fs = state.finalSize;\r\n        if (ib.width !== fs.width)\r\n            sx = fs.width / ib.width;\r\n        if (ib.height !== fs.height)\r\n            sy = fs.height / ib.height;\r\n\r\n        switch (input.stretch) {\r\n            case Stretch.Uniform:\r\n                sx = sy = Math.min(sx, sy);\r\n                break;\r\n            case Stretch.UniformToFill:\r\n                sx = sy = Math.max(sx, sy);\r\n                break;\r\n            case Stretch.None:\r\n                sx = sy = 1.0;\r\n                break;\r\n            case Stretch.Fill:\r\n            default:\r\n                break;\r\n        }\r\n\r\n        state.stretchX = sx;\r\n        state.stretchY = sy;\r\n\r\n        return true;\r\n    }\r\n}","module minerva.controls.image.arrange.tapins {\r\n    export function doOverride (input: IInput, state: IState, output: core.arrange.IOutput, tree: core.IUpdaterTree, finalRect: Rect): boolean {\r\n        var as = state.arrangedSize;\r\n        as.width = state.imageBounds.width * state.stretchX;\r\n        as.height = state.imageBounds.height * state.stretchY;\r\n        return true;\r\n    }\r\n}","module minerva.controls.image.arrange.tapins {\r\n    export function invalidateMetrics (input: IInput, state: IState, output: core.arrange.IOutput, tree: core.IUpdaterTree, finalRect: Rect): boolean {\r\n        output.dirtyFlags |= DirtyFlags.ImageMetrics;\r\n        return true;\r\n    }\r\n}","module minerva.controls.image.measure.tapins {\r\n    export function calcImageBounds (input: IInput, state: IState, output: core.measure.IOutput, tree: core.IUpdaterTree, availableSize: Size): boolean {\r\n        var ib = state.imageBounds;\r\n        ib.x = ib.y = ib.width = ib.height = 0;\r\n        if (!input.source)\r\n            return true;\r\n        ib.width = input.source.pixelWidth;\r\n        ib.height = input.source.pixelHeight;\r\n        return true;\r\n    }\r\n}","module minerva.controls.image.measure.tapins {\r\n    export function calcStretch (input: IInput, state: IState, output: core.measure.IOutput, tree: core.IUpdaterTree, availableSize: Size): boolean {\r\n        var as = state.availableSize;\r\n        var dw = as.width;\r\n        var dh = as.height;\r\n        var ib = state.imageBounds;\r\n\r\n        if (!isFinite(dw))\r\n            dw = ib.width;\r\n        if (!isFinite(dh))\r\n            dh = ib.height;\r\n\r\n        var sx = 0.0;\r\n        var sy = 0.0;\r\n        if (ib.width > 0)\r\n            sx = dw / ib.width;\r\n        if (ib.height > 0)\r\n            sy = dh / ib.height;\r\n\r\n        if (!isFinite(as.width))\r\n            sx = sy;\r\n        if (!isFinite(as.height))\r\n            sy = sx;\r\n\r\n        switch (input.stretch) {\r\n            default:\r\n            case Stretch.Uniform:\r\n                sx = sy = Math.min(sx, sy);\r\n                break;\r\n            case Stretch.UniformToFill:\r\n                sx = sy = Math.max(sx, sy);\r\n                break;\r\n            case Stretch.Fill:\r\n                if (!isFinite(as.width))\r\n                    sx = sy;\r\n                if (!isFinite(as.height))\r\n                    sy = sx;\r\n                break;\r\n            case Stretch.None:\r\n                sx = sy = 1.0;\r\n                break;\r\n        }\r\n\r\n        state.stretchX = sx;\r\n        state.stretchY = sy;\r\n        return true;\r\n    }\r\n}","module minerva.controls.image.measure.tapins {\r\n    export function doOverride (input: IInput, state: IState, output: core.measure.IOutput, tree: core.IUpdaterTree, availableSize: Size): boolean {\r\n        var ds = output.desiredSize;\r\n        ds.width = state.imageBounds.width * state.stretchX;\r\n        ds.height = state.imageBounds.height * state.stretchY;\r\n        return true;\r\n    }\r\n}","module minerva.controls.image.processdown.tapins {\r\n    export function calcImageTransform (input: IInput, state: IState, output: IOutput, vpinput: IInput, tree: core.IUpdaterTree): boolean {\r\n        if (!state.calcImageMetrics)\r\n            return true;\r\n\r\n        var w = state.paintRect.width;\r\n        var h = state.paintRect.height;\r\n        var sw = state.imgRect.width;\r\n        var sh = state.imgRect.height;\r\n\r\n        var sx = w / sw;\r\n        var sy = h / sh;\r\n        if (w === 0)\r\n            sx = 1.0;\r\n        if (h === 0)\r\n            sy = 1.0;\r\n\r\n        var xform = output.imgXform;\r\n        if (input.stretch === Stretch.Fill) {\r\n            mat3.createScale(sx, sy, xform);\r\n            return true;\r\n        }\r\n\r\n        var scale = 1.0;\r\n        switch (input.stretch) {\r\n            case Stretch.Uniform:\r\n                scale = sx < sy ? sx : sy;\r\n                break;\r\n            case Stretch.UniformToFill:\r\n                scale = sx < sy ? sy : sx;\r\n                break;\r\n            case Stretch.None:\r\n                break;\r\n        }\r\n\r\n        //AlignmentX.Center\r\n        var dx = (w - (scale * sw)) / 2;\r\n        //AlignmentY.Center\r\n        var dy = (h - (scale * sh)) / 2;\r\n\r\n        mat3.createScale(scale, scale, xform);\r\n        mat3.translate(xform, dx, dy);\r\n\r\n        return true;\r\n    }\r\n}","module minerva.controls.image.processdown.tapins {\r\n    export function calcOverlap (input: IInput, state: IState, output: IOutput, vpinput: IInput, tree: core.IUpdaterTree): boolean {\r\n        if (!state.calcImageMetrics)\r\n            return true;\r\n\r\n        if (input.stretch === Stretch.UniformToFill || state.imgAdjust) {\r\n            var paint = state.paintRect;\r\n            Rect.roundOut(paint);\r\n\r\n            var imgRect = state.imgRect;\r\n            Rect.transform(imgRect, output.imgXform);\r\n            Rect.roundIn(imgRect);\r\n\r\n            output.overlap = Rect.rectIn(paint, imgRect);\r\n        }\r\n\r\n        return true;\r\n    }\r\n}","module minerva.controls.image.processdown.tapins {\r\n    export function checkNeedImageMetrics (input: IInput, state: IState, output: IOutput, vpinput: IInput, tree: core.IUpdaterTree): boolean {\r\n        state.calcImageMetrics = false;\r\n        if ((input.dirtyFlags & DirtyFlags.ImageMetrics) === 0)\r\n            return true;\r\n\r\n        mat3.identity(output.imgXform);\r\n        output.overlap = RectOverlap.In;\r\n\r\n        var imgRect = state.imgRect;\r\n        imgRect.x = imgRect.y = imgRect.width = imgRect.height = 0;\r\n\r\n        state.calcImageMetrics = !!input.source;\r\n        return true;\r\n    }\r\n}","module minerva.controls.image.processdown.tapins {\r\n    export function prepareImageMetrics (input: IInput, state: IState, output: IOutput, vpinput: IInput, tree: core.IUpdaterTree): boolean {\r\n        if (!state.calcImageMetrics)\r\n            return true;\r\n\r\n        var imgRect = state.imgRect;\r\n        imgRect.x = imgRect.y = 0;\r\n\r\n        var source = input.source;\r\n        imgRect.width = source.pixelWidth;\r\n        imgRect.height = source.pixelHeight;\r\n\r\n        var paintRect = state.paintRect;\r\n        paintRect.x = paintRect.y = 0;\r\n        paintRect.width = input.actualWidth;\r\n        paintRect.height = input.actualHeight;\r\n\r\n        /*\r\n        See note below\r\n        var stretched = state.stretched;\r\n        Size.copyTo(paintRect, stretched);\r\n        */\r\n\r\n        state.imgAdjust = !Size.isEqual(paintRect, input.renderSize);\r\n\r\n        /*\r\n         Removing `stretched` since actualWidth, actualHeight should already be coerced\r\n        core.helpers.coerceSize(stretched, input);\r\n        if (input.stretch !== Stretch.UniformToFill) {\r\n            paintRect.width = Math.min(paintRect.width, stretched.width);\r\n            paintRect.height = Math.min(paintRect.height, stretched.height);\r\n        }\r\n        */\r\n\r\n        if (input.stretch === Stretch.None)\r\n            Rect.union(paintRect, imgRect);\r\n\r\n        return true;\r\n    }\r\n}","module minerva.controls.image.render.tapins {\r\n    export function doRender (input: IInput, state: IState, output: core.render.IOutput, ctx: core.render.RenderContext, region: Rect, tree: core.IUpdaterTree): boolean {\r\n        var source = input.source;\r\n        if (!source || source.pixelWidth === 0 || source.pixelHeight === 0)\r\n            return true;\r\n\r\n        ctx.save();\r\n        core.helpers.renderLayoutClip(ctx, input, tree);\r\n        ctx.preapply(input.imgXform);\r\n        source.draw(ctx.raw);\r\n        ctx.restore();\r\n\r\n        return true;\r\n    }\r\n}","module minerva.controls.panel.arrange.tapins {\r\n    export function doOverride (input: IInput, state: IState, output: IOutput, tree: core.IUpdaterTree, finalRect: Rect): boolean {\r\n        var cr = state.childRect;\r\n        cr.x = cr.y = 0;\r\n        Size.copyTo(state.finalSize, cr);\r\n\r\n        for (var walker = tree.walk(); walker.step();) {\r\n            walker.current.arrange(cr);\r\n        }\r\n\r\n        Size.copyTo(state.finalSize, state.arrangedSize);\r\n        return true;\r\n    }\r\n}","module minerva.controls.panel.processup.tapins {\r\n    export function preCalcExtents (input: IInput, state: IState, output: IOutput, tree: core.IUpdaterTree): boolean {\r\n        if ((input.dirtyFlags & DirtyFlags.Bounds) === 0)\r\n            return true;\r\n        if (!input.background) {\r\n            var as = state.actualSize;\r\n            as.width = as.height = 0;\r\n        }\r\n        return true;\r\n    }\r\n}","module minerva.controls.popup.processdown.tapins {\r\n    export var postProcessXform = function (input: IInput, state: core.processdown.IState, output: core.processdown.IOutput, vpinput: core.processdown.IInput, tree: PopupUpdaterTree): boolean {\r\n        if ((input.dirtyFlags & DirtyFlags.Transform) === 0)\r\n            return true;\r\n\r\n        var child = tree.popupChild;\r\n        if (!child)\r\n            return true;\r\n\r\n        child.assets.dirtyFlags |= DirtyFlags.LocalTransform;\r\n\r\n        var carrier = child.assets.carrierXform;\r\n        if (!carrier)\r\n            carrier = child.assets.carrierXform || mat3.create();\r\n        mat3.copyTo(output.absoluteXform, carrier);\r\n        mat3.translate(carrier, input.horizontalOffset, input.verticalOffset);\r\n\r\n        core.Updater.$$addDownDirty(child);\r\n\r\n        return true;\r\n    };\r\n}","module minerva.controls.popup.processdown.tapins {\r\n    export var preProcessXform = function (input: IInput, state: core.processdown.IState, output: core.processdown.IOutput, vpinput: core.processdown.IInput, tree: PopupUpdaterTree): boolean {\r\n        if ((input.dirtyFlags & DirtyFlags.Transform) === 0)\r\n            return true;\r\n\r\n        var child = tree.popupChild;\r\n        if (child) {\r\n            child.assets.dirtyFlags |= DirtyFlags.LocalTransform;\r\n            core.Updater.$$addDownDirty(child);\r\n        }\r\n        return true;\r\n    };\r\n}","module minerva.controls.scrollcontentpresenter.arrange.tapins {\r\n    export function doOverride (input: IInput, state: IState, output: IOutput, tree: core.UpdaterTree, finalRect: Rect): boolean {\r\n        var as = state.arrangedSize;\r\n        if (!tree.subtree) {\r\n            as.width = as.height = 0;\r\n            return true;\r\n        }\r\n\r\n        var sd = input.scrollData;\r\n        if (helpers.clampOffsets(sd)) {\r\n            sd.invalidate();\r\n        }\r\n\r\n        var desired = tree.subtree.assets.desiredSize;\r\n\r\n        var cr = state.childRect;\r\n        cr.x = -sd.offsetX;\r\n        cr.y = -sd.offsetY;\r\n        cr.width = Math.max(state.finalSize.width, desired.width);\r\n        cr.height = Math.max(state.finalSize.height, desired.height);\r\n\r\n        tree.subtree.arrange(cr);\r\n\r\n        return true;\r\n    }\r\n}","module minerva.controls.scrollcontentpresenter.arrange.tapins {\r\n    export function updateClip (input: IInput, state: IState, output: IOutput, tree: core.UpdaterTree, availableSize: Size): boolean {\r\n        var ic = output.internalClip;\r\n        ic.x = ic.y = 0;\r\n        Size.copyTo(state.arrangedSize, ic);\r\n\r\n        //TODO: Clip for TextBox/RichTextBox\r\n\r\n        return true;\r\n    }\r\n\r\n    /*\r\n    function _CalculateTextBoxClipRect (arrangeSize: minerva.Size): minerva.Rect {\r\n        var left = 0;\r\n        var right = 0;\r\n        var sd = this._ScrollData;\r\n        var width = sd.ExtentWidth;\r\n        var num = sd.ViewportWidth;\r\n        var x = sd.OffsetX;\r\n        var templatedParent: ScrollViewer;\r\n        if (this.TemplateOwner instanceof ScrollViewer)\r\n            templatedParent = <ScrollViewer>this.TemplateOwner;\r\n\r\n        var to = templatedParent.TemplateOwner;\r\n        var textWrapping = TextWrapping.NoWrap;\r\n        var horizontalScrollBarVisibility = ScrollBarVisibility.Disabled;\r\n        if (to instanceof TextBox) {\r\n            var textbox = <TextBox>to;\r\n            textWrapping = textbox.TextWrapping;\r\n            horizontalScrollBarVisibility = textbox.HorizontalScrollBarVisibility;\r\n        } else if (to instanceof RichTextBox) {\r\n            var richtextbox = <RichTextBox>to;\r\n            textWrapping = richtextbox.TextWrapping;\r\n            horizontalScrollBarVisibility = richtextbox.HorizontalScrollBarVisibility;\r\n        }\r\n\r\n        var padding = templatedParent.Padding;\r\n        if (textWrapping !== TextWrapping.Wrap) {\r\n            if (num > width || x === 0)\r\n                left = padding.left + 1;\r\n            if (num > width || horizontalScrollBarVisibility !== ScrollBarVisibility.Disabled && Math.abs(width - x + num) <= 1)\r\n                right = padding.right + 1;\r\n        } else {\r\n            left = padding.left + 1;\r\n            right = padding.right + 1;\r\n        }\r\n        left = Math.max(0, left);\r\n        right = Math.max(0, right);\r\n        return new minerva.Rect(-left, 0, arrangeSize.width + left + right, arrangeSize.height);\r\n    }\r\n    */\r\n}","module minerva.controls.scrollcontentpresenter.arrange.tapins {\r\n    export function updateExtents (input: IInput, state: IState, output: IOutput, tree: core.UpdaterTree, availableSize: Size): boolean {\r\n        var sd = input.scrollData;\r\n        var viewport = state.finalSize;\r\n\r\n        var changed = sd.viewportWidth !== viewport.width\r\n            || sd.viewportHeight !== viewport.height;\r\n        sd.viewportWidth = viewport.width;\r\n        sd.viewportHeight = viewport.height;\r\n\r\n        if (helpers.clampOffsets(sd) || changed) {\r\n            sd.invalidate();\r\n        }\r\n\r\n        return true;\r\n    }\r\n}","module minerva.controls.scrollcontentpresenter.measure.tapins {\r\n    export var doOverride = function (input: IInput, state: IState, output: core.measure.IOutput, tree: core.UpdaterTree, availableSize: Size): boolean {\r\n        var ds = output.desiredSize;\r\n        ds.width = ds.height = 0;\r\n\r\n        if (!tree.subtree)\r\n            return true;\r\n\r\n        var sd = input.scrollData;\r\n        var ideal = state.idealSize;\r\n        ideal.width = !sd.canHorizontallyScroll ? state.availableSize.width : Number.POSITIVE_INFINITY;\r\n        ideal.height = !sd.canVerticallyScroll ? state.availableSize.height : Number.POSITIVE_INFINITY;\r\n\r\n        tree.subtree.measure(ideal);\r\n\r\n        return true;\r\n    };\r\n}","module minerva.controls.scrollcontentpresenter.measure.tapins {\r\n    export function finishDoOverride (input: IInput, state: IState, output: core.measure.IOutput, tree: core.UpdaterTree, availableSize: Size): boolean {\r\n        var ds = output.desiredSize;\r\n        var sd = input.scrollData;\r\n\r\n        Size.copyTo(state.availableSize, ds);\r\n        ds.width = Math.min(ds.width, sd.extentWidth);\r\n        ds.height = Math.min(ds.height, sd.extentHeight);\r\n\r\n        return true;\r\n    }\r\n}","module minerva.controls.scrollcontentpresenter.measure.tapins {\r\n    export function updateExtents (input: IInput, state: IState, output: core.measure.IOutput, tree: core.UpdaterTree, availableSize: Size): boolean {\r\n        var sd = input.scrollData;\r\n        var viewport = state.availableSize;\r\n        var extent = tree.subtree.assets.desiredSize;\r\n\r\n        var changed = sd.viewportWidth !== viewport.width\r\n            || sd.viewportHeight !== viewport.height\r\n            || sd.extentWidth !== extent.width\r\n            || sd.extentHeight !== extent.height;\r\n        sd.viewportWidth = viewport.width;\r\n        sd.viewportHeight = viewport.height;\r\n        sd.extentWidth = extent.width;\r\n        sd.extentHeight = extent.height;\r\n\r\n        if (helpers.clampOffsets(sd) || changed) {\r\n            sd.invalidate();\r\n        }\r\n\r\n        return true;\r\n    }\r\n}","module minerva.controls.stackpanel.arrange.tapins {\r\n    export function doHorizontal (input: IInput, state: IState, output: IOutput, tree: core.IUpdaterTree, finalRect: Rect): boolean {\r\n        if (input.orientation !== Orientation.Horizontal)\r\n            return true;\r\n\r\n        var fs = state.finalSize;\r\n        var arranged = state.arrangedSize;\r\n        arranged.width = 0;\r\n        var childRect = state.childRect;\r\n\r\n        var child: core.Updater;\r\n        var childDesired: Size;\r\n        for (var walker = tree.walk(); walker.step();) {\r\n            child = walker.current;\r\n            childDesired = child.assets.desiredSize;\r\n            childDesired.height = fs.height;\r\n            Size.copyTo(childDesired, childRect);\r\n            childRect.x = arranged.width;\r\n\r\n            if (Rect.isEmpty(childRect))\r\n                childRect.x = childRect.y = childRect.width = childRect.height = 0;\r\n            child.arrange(childRect);\r\n\r\n            arranged.width += childDesired.width;\r\n            arranged.height = Math.max(arranged.height, childDesired.height);\r\n        }\r\n\r\n        arranged.width = Math.max(arranged.width, state.finalSize.width);\r\n\r\n        return true;\r\n    }\r\n}","module minerva.controls.stackpanel.arrange.tapins {\r\n    export function doOverride (input: IInput, state: IState, output: IOutput, tree: core.IUpdaterTree, finalRect: Rect): boolean {\r\n        var cr = state.childRect;\r\n        cr.x = cr.y = 0;\r\n        Size.copyTo(state.finalSize, cr);\r\n        Size.copyTo(state.finalSize, state.arrangedSize);\r\n        return true;\r\n    }\r\n}","module minerva.controls.stackpanel.arrange.tapins {\r\n    export function doVertical (input: IInput, state: IState, output: IOutput, tree: core.IUpdaterTree, finalRect: Rect): boolean {\r\n        if (input.orientation !== Orientation.Vertical)\r\n            return true;\r\n\r\n        var fs = state.finalSize;\r\n        var arranged = state.arrangedSize;\r\n        arranged.height = 0;\r\n        var childRect = state.childRect;\r\n\r\n        var child: core.Updater;\r\n        var childDesired: Size;\r\n        for (var walker = tree.walk(); walker.step();) {\r\n            child = walker.current;\r\n            childDesired = child.assets.desiredSize;\r\n            childDesired.width = fs.width;\r\n            Size.copyTo(childDesired, childRect);\r\n            childRect.y = arranged.height;\r\n\r\n            if (Rect.isEmpty(childRect))\r\n                childRect.x = childRect.y = childRect.width = childRect.height = 0;\r\n            child.arrange(childRect);\r\n\r\n            arranged.width = Math.max(arranged.width, childDesired.width);\r\n            arranged.height += childDesired.height;\r\n        }\r\n\r\n        arranged.height = Math.max(arranged.height, state.finalSize.height);\r\n\r\n        return true;\r\n    }\r\n}","module minerva.controls.stackpanel.measure.tapins {\r\n    export function doHorizontal (input: IInput, state: IState, output: IOutput, tree: core.IUpdaterTree, availableSize: Size): boolean {\r\n        if (input.orientation !== Orientation.Horizontal)\r\n            return true;\r\n\r\n        var ca = state.childAvailable;\r\n        ca.height = state.availableSize.height;\r\n        var height = input.height;\r\n        if (!isNaN(height))\r\n            ca.height = height;\r\n        ca.height = Math.max(Math.min(ca.height, input.maxHeight), input.minHeight);\r\n\r\n        var desired = output.desiredSize;\r\n        for (var walker = tree.walk(), child: core.Updater, childDesired: Size; walker.step();) {\r\n            child = walker.current;\r\n            child.measure(ca);\r\n            childDesired = child.assets.desiredSize;\r\n\r\n            desired.width += childDesired.width;\r\n            desired.height = Math.max(desired.height, childDesired.height);\r\n        }\r\n\r\n        return true;\r\n    }\r\n}","module minerva.controls.stackpanel.measure.tapins {\r\n    export function doOverride (input: IInput, state: IState, output: IOutput, tree: core.IUpdaterTree, availableSize: Size): boolean {\r\n        var ca = state.childAvailable;\r\n        ca.width = ca.height = Number.POSITIVE_INFINITY;\r\n        var desired = output.desiredSize;\r\n        desired.width = desired.height = 0;\r\n        return true;\r\n    }\r\n}","module minerva.controls.stackpanel.measure.tapins {\r\n    export function doVertical (input: IInput, state: IState, output: IOutput, tree: core.IUpdaterTree, availableSize: Size): boolean {\r\n        if (input.orientation !== Orientation.Vertical)\r\n            return true;\r\n\r\n        var ca = state.childAvailable;\r\n        ca.width = state.availableSize.width;\r\n        var width = input.width;\r\n        if (!isNaN(width))\r\n            ca.width = width;\r\n        ca.width = Math.max(Math.min(ca.width, input.maxWidth), input.minWidth);\r\n\r\n        var desired = output.desiredSize;\r\n        for (var walker = tree.walk(), child: core.Updater, childDesired: Size; walker.step();) {\r\n            child = walker.current;\r\n            child.measure(ca);\r\n            childDesired = child.assets.desiredSize;\r\n\r\n            desired.height += childDesired.height;\r\n            desired.width = Math.max(desired.width, childDesired.width);\r\n        }\r\n\r\n        return true;\r\n    }\r\n}","module minerva.controls.usercontrol.arrange.tapins {\r\n    export function doOverride (input: IInput, state: IState, output: core.arrange.IOutput, tree: control.ControlUpdaterTree, finalRect: Rect): boolean {\r\n        if (tree.subtree)\r\n            tree.subtree.arrange(state.childRect);\r\n\r\n        Size.copyTo(state.finalSize, state.arrangedSize);\r\n        return true;\r\n    }\r\n}","module minerva.controls.usercontrol.arrange.tapins {\r\n    export function preOverride (input: IInput, state: IState, output: core.arrange.IOutput, tree: control.ControlUpdaterTree, availableSize: Size): boolean {\r\n        if (!tree.subtree)\r\n            return true;\r\n        var tb = state.totalBorder;\r\n        Thickness.copyTo(input.padding, tb);\r\n        Thickness.add(tb, input.borderThickness);\r\n\r\n        var cr = state.childRect;\r\n        cr.x = cr.y = 0;\r\n        Size.copyTo(state.finalSize, cr);\r\n        Thickness.shrinkSize(tb, cr);\r\n        return true;\r\n    }\r\n}","module minerva.controls.usercontrol.measure.tapins {\r\n    export function doOverride (input: core.measure.IInput, state: core.measure.IState, output: core.measure.IOutput, tree: control.ControlUpdaterTree, availableSize: Size): boolean {\r\n        var ds = output.desiredSize;\r\n        var subtree = tree.subtree;\r\n        if (subtree) {\r\n            subtree.measure(state.availableSize);\r\n            Size.copyTo(subtree.assets.desiredSize, ds);\r\n        }\r\n        return true;\r\n    }\r\n}","module minerva.controls.usercontrol.measure.tapins {\r\n    export function postOverride (input: IInput, state: IState, output: core.measure.IOutput, tree: control.ControlUpdaterTree, availableSize: Size): boolean {\r\n        Thickness.growSize(state.totalBorder, output.desiredSize);\r\n        Size.min(output.desiredSize, state.availableSize);\r\n        return true;\r\n    }\r\n}","module minerva.controls.usercontrol.measure.tapins {\r\n    export function preOverride (input: IInput, state: IState, output: core.measure.IOutput, tree: control.ControlUpdaterTree, availableSize: Size): boolean {\r\n        var tb = state.totalBorder;\r\n        Thickness.copyTo(input.padding, tb);\r\n        Thickness.add(tb, input.borderThickness);\r\n        Thickness.shrinkSize(tb, state.availableSize);\r\n        return true;\r\n    }\r\n}","module minerva.controls.virtualizingstackpanel.arrange.tapins {\r\n    export function doHorizontal (input: IInput, state: IState, output: IOutput, tree: core.IUpdaterTree, finalRect: Rect): boolean {\r\n        if (input.orientation !== Orientation.Horizontal)\r\n            return true;\r\n\r\n        var fs = state.finalSize;\r\n        var arranged = state.arrangedSize;\r\n        arranged.width = 0;\r\n        var childRect = state.childRect;\r\n        var sd = input.scrollData;\r\n\r\n        var child: core.Updater;\r\n        var childDesired: Size;\r\n        for (var walker = tree.walk(); walker.step();) {\r\n            child = walker.current;\r\n            childDesired = child.assets.desiredSize;\r\n            childDesired.height = fs.height;\r\n            Size.copyTo(childDesired, childRect);\r\n            childRect.x = arranged.width;\r\n            childRect.y = -sd.offsetY;\r\n\r\n            if (Rect.isEmpty(childRect))\r\n                childRect.x = childRect.y = childRect.width = childRect.height = 0;\r\n            child.arrange(childRect);\r\n\r\n            arranged.width += childDesired.width;\r\n            arranged.height = Math.max(arranged.height, childDesired.height);\r\n        }\r\n\r\n        arranged.width = Math.max(arranged.width, fs.width);\r\n\r\n        return true;\r\n    }\r\n}","module minerva.controls.virtualizingstackpanel.arrange.tapins {\r\n    export function doOverride (input: IInput, state: IState, output: IOutput, tree: core.IUpdaterTree, finalRect: Rect): boolean {\r\n        var cr = state.childRect;\r\n        cr.x = cr.y = 0;\r\n        Size.copyTo(state.finalSize, cr);\r\n        Size.copyTo(state.finalSize, state.arrangedSize);\r\n        return true;\r\n    }\r\n}","module minerva.controls.virtualizingstackpanel.arrange.tapins {\r\n    export function doVertical (input: IInput, state: IState, output: IOutput, tree: core.IUpdaterTree, finalRect: Rect): boolean {\r\n        if (input.orientation !== Orientation.Vertical)\r\n            return true;\r\n\r\n        var fs = state.finalSize;\r\n        var arranged = state.arrangedSize;\r\n        arranged.height = 0;\r\n        var childRect = state.childRect;\r\n        var sd = input.scrollData;\r\n\r\n        var child: core.Updater;\r\n        var childDesired: Size;\r\n        for (var walker = tree.walk(); walker.step();) {\r\n            child = walker.current;\r\n            childDesired = child.assets.desiredSize;\r\n            childDesired.width = fs.width;\r\n            Size.copyTo(childDesired, childRect);\r\n            childRect.x = -sd.offsetX;\r\n            childRect.y = arranged.height;\r\n\r\n            if (Rect.isEmpty(childRect))\r\n                childRect.x = childRect.y = childRect.width = childRect.height = 0;\r\n            child.arrange(childRect);\r\n\r\n            arranged.width = Math.max(arranged.width, childDesired.width);\r\n            arranged.height += childDesired.height;\r\n        }\r\n\r\n        arranged.height = Math.max(arranged.height, fs.height);\r\n\r\n        return true;\r\n    }\r\n}","module minerva.controls.virtualizingstackpanel.measure.tapins {\r\n    export function doHorizontal (input: IInput, state: IState, output: IOutput, tree: virtualizingpanel.VirtualizingPanelUpdaterTree, availableSize: Size): boolean {\r\n        if (input.orientation !== Orientation.Horizontal)\r\n            return true;\r\n\r\n        var ca = state.childAvailable;\r\n        var sd = input.scrollData;\r\n        if (sd.canVerticallyScroll)\r\n            ca.height = Number.POSITIVE_INFINITY;\r\n\r\n        //Dispose and remove containers that are before offset\r\n        var index = Math.floor(sd.offsetX);\r\n        var count = tree.containerOwner.itemCount;\r\n        tree.containerOwner.remove(0, index);\r\n\r\n        var viscount = 0;\r\n        var ds = output.desiredSize;\r\n        for (var generator = tree.containerOwner.createGenerator(index, count); generator.generate();) {\r\n            viscount++;\r\n            var child = generator.current;\r\n            child.measure(ca);\r\n            var childDesired = child.assets.desiredSize;\r\n            ds.height = Math.max(ds.height, childDesired.height);\r\n            ds.width += childDesired.width;\r\n            if (ds.width > ca.width)\r\n                break;\r\n        }\r\n\r\n        //Dispose and remove containers that are after visible\r\n        tree.containerOwner.remove(index + viscount, count - (index + viscount));\r\n\r\n        var changed = sd.extentHeight !== ds.height\r\n            || sd.extentWidth !== count\r\n            || sd.viewportHeight !== ca.height\r\n            || sd.viewportWidth !== viscount;\r\n        sd.extentHeight = ds.height;\r\n        sd.extentWidth = count;\r\n        sd.viewportHeight = ca.height;\r\n        sd.viewportWidth = viscount;\r\n\r\n        if (changed)\r\n            sd.invalidate();\r\n\r\n        return true;\r\n    }\r\n}","module minerva.controls.virtualizingstackpanel.measure.tapins {\r\n    export function doOverride (input: IInput, state: IState, output: IOutput, tree: core.IUpdaterTree, availableSize: Size): boolean {\r\n        var ca = state.childAvailable;\r\n        Size.copyTo(state.availableSize, ca);\r\n        var desired = output.desiredSize;\r\n        desired.width = desired.height = 0;\r\n        return true;\r\n    }\r\n}","module minerva.controls.virtualizingstackpanel.measure.tapins {\r\n    export function doVertical (input: IInput, state: IState, output: IOutput, tree: virtualizingpanel.VirtualizingPanelUpdaterTree, availableSize: Size): boolean {\r\n        if (input.orientation !== Orientation.Vertical)\r\n            return true;\r\n\r\n        var ca = state.childAvailable;\r\n        var sd = input.scrollData;\r\n        if (sd.canHorizontallyScroll)\r\n            ca.width = Number.POSITIVE_INFINITY;\r\n\r\n        //Dispose and remove containers that are before offset\r\n        var index = Math.floor(sd.offsetY);\r\n        var count = tree.containerOwner.itemCount;\r\n        tree.containerOwner.remove(0, index);\r\n\r\n        var viscount = 0;\r\n        var ds = output.desiredSize;\r\n        for (var generator = tree.containerOwner.createGenerator(index, count); generator.generate();) {\r\n            viscount++;\r\n            var child = generator.current;\r\n            child.measure(ca);\r\n            var childDesired = child.assets.desiredSize;\r\n            ds.width = Math.max(ds.width, childDesired.width);\r\n            ds.height += childDesired.height;\r\n            if (ds.height > ca.height)\r\n                break;\r\n        }\r\n\r\n        //Dispose and remove containers that are after visible\r\n        tree.containerOwner.remove(index + viscount, count - (index + viscount));\r\n\r\n        var changed = sd.extentHeight !== count\r\n            || sd.extentWidth !== ds.width\r\n            || sd.viewportHeight !== viscount\r\n            || sd.viewportWidth !== ca.width;\r\n        sd.extentHeight = count;\r\n        sd.extentWidth = ds.width;\r\n        sd.viewportHeight = viscount;\r\n        sd.viewportWidth = ca.width;\r\n\r\n        if (changed)\r\n            sd.invalidate();\r\n\r\n        return true;\r\n    }\r\n}","module minerva.shapes.path.processup.tapins {\r\n    export function calcActualSize (input: IInput, state: IState, output: IOutput, tree: core.IUpdaterTree): boolean {\r\n        if ((input.dirtyFlags & DirtyFlags.Bounds) === 0)\r\n            return true;\r\n\r\n        var actual = state.actualSize;\r\n        actual.width = input.actualWidth;\r\n        actual.height = input.actualHeight;\r\n\r\n        var natural = input.naturalBounds;\r\n        if ((natural.width <= 0.0 || natural.height <= 0) || (input.width <= 0.0 || input.height <= 0.0)) {\r\n            actual.width = 0.0;\r\n            actual.height = 0.0;\r\n            return true;\r\n        }\r\n\r\n        if (tree.visualParent instanceof controls.canvas.CanvasUpdater) {\r\n            actual.width = actual.width === 0.0 ? natural.width : actual.width;\r\n            actual.height = actual.height === 0.0 ? natural.height : actual.height;\r\n            if (!isNaN(input.width))\r\n                actual.width = input.width;\r\n            if (!isNaN(input.height))\r\n                actual.height = input.height;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}","module minerva.shapes.path.processup.tapins {\r\n    export function calcExtents (input: IInput, state: IState, output: IOutput, tree: core.IUpdaterTree): boolean {\r\n        if ((input.dirtyFlags & DirtyFlags.Bounds) === 0)\r\n            return true;\r\n\r\n        if (Size.isEmpty(state.actualSize)) {\r\n            Rect.clear(output.extents);\r\n        } else {\r\n            Rect.copyTo(output.shapeRect, output.extents);\r\n            Rect.transform(output.extents, output.stretchXform);\r\n        }\r\n        Rect.copyTo(output.extents, output.extentsWithChildren);\r\n        return true;\r\n    }\r\n}","module minerva.shapes.path.processup.tapins {\r\n    export function calcShapeRect (input: IInput, state: IState, output: IOutput, tree: core.IUpdaterTree): boolean {\r\n        if ((input.dirtyFlags & DirtyFlags.Bounds) === 0)\r\n            return true;\r\n        //TODO: Should we calculate this without stroking?\r\n        Rect.copyTo(input.naturalBounds, output.shapeRect);\r\n        return true;\r\n    }\r\n}","module minerva.shapes.path.processup.tapins {\r\n    export function calcStretch (input: IInput, state: IState, output: IOutput, tree: core.IUpdaterTree): boolean {\r\n        if ((input.dirtyFlags & DirtyFlags.Bounds) === 0)\r\n            return true;\r\n\r\n        var xform = mat3.identity(output.stretchXform);\r\n        var actual = state.actualSize;\r\n        if (Size.isEmpty(actual) || input.stretch === Stretch.None)\r\n            return true;\r\n\r\n        var shapeRect = output.shapeRect;\r\n        var sx = actual.width / shapeRect.width;\r\n        var sy = actual.height / shapeRect.height;\r\n        var xp = 0;\r\n        var yp = 0;\r\n        switch (input.stretch) {\r\n            case Stretch.Uniform:\r\n                sx = sy = Math.min(sx, sy);\r\n                xp = (actual.width - (shapeRect.width * sx)) / 2.0;\r\n                yp = (actual.height - (shapeRect.height * sy)) / 2.0;\r\n                break;\r\n            case Stretch.UniformToFill:\r\n                sx = sy = Math.max(sx, sy);\r\n                break;\r\n        }\r\n\r\n        mat3.translate(xform, -shapeRect.x, -shapeRect.y);\r\n        mat3.scale(xform, sx, sy);\r\n        mat3.translate(xform, xp, yp);\r\n\r\n        return true;\r\n    }\r\n}","module minerva.shapes.path.render.tapins {\r\n    export function doRender (input: IInput, state: IState, output: IOutput, ctx: core.render.RenderContext, region: Rect): boolean {\r\n        if (!state.shouldDraw)\r\n            return true;\r\n        ctx.preapply(input.stretchXform);\r\n        input.data.Draw(ctx);\r\n        return true;\r\n    }\r\n}","module minerva.shapes.path.render.tapins {\r\n    export function fill (input: IInput, state: IState, output: IOutput, ctx: core.render.RenderContext, region: Rect): boolean {\r\n        if (!state.shouldDraw)\r\n            return true;\r\n        if (input.fill)\r\n            ctx.fillEx(input.fill, input.shapeRect, input.data ? input.data.fillRule : FillRule.EvenOdd);\r\n        return true;\r\n    }\r\n}","module minerva.shapes.shape.arrange.tapins {\r\n    export function doOverride (input: IInput, state: IState, output: IOutput, tree: core.IUpdaterTree) {\r\n        var arranged = state.arrangedSize;\r\n        Size.copyTo(state.finalSize, arranged);\r\n        var nb = input.naturalBounds;\r\n        if (input.stretch === Stretch.None) {\r\n            arranged.width = Math.max(arranged.width, nb.x + nb.width);\r\n            arranged.height = Math.max(arranged.height, nb.y + nb.height);\r\n            return true;\r\n        }\r\n\r\n        if (nb.width === 0)\r\n            nb.width = arranged.width;\r\n        if (nb.height === 0)\r\n            nb.height = arranged.height;\r\n\r\n        var sx = 1.0,\r\n            sy = 1.0;\r\n        if (nb.width !== arranged.width)\r\n            sx = arranged.width / nb.width;\r\n        if (nb.height !== arranged.height)\r\n            sy = arranged.height / nb.height;\r\n\r\n\r\n        switch (input.stretch) {\r\n            case Stretch.Uniform:\r\n                sx = sy = Math.min(sx, sy);\r\n                break;\r\n            case Stretch.UniformToFill:\r\n                sx = sy = Math.max(sx, sy);\r\n                break;\r\n        }\r\n\r\n        arranged.width = (nb.width * sx) || 0;\r\n        arranged.height = (nb.height * sy) || 0;\r\n\r\n        return true;\r\n    }\r\n}","module minerva.shapes.shape.hittest.tapins {\r\n    export function canHitInside (data: IHitTestData, pos: Point, hitList: core.Updater[], ctx: core.render.RenderContext): boolean {\r\n        if (!data.assets.fill && !data.assets.stroke) {\r\n            hitList.shift();\r\n            ctx.restore();\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}","module minerva.shapes.shape.hittest.tapins {\r\n    export function canHitShape (data: IHitTestData, pos: Point, hitList: core.Updater[], ctx: core.render.RenderContext): boolean {\r\n        if ((data.assets.shapeFlags & ShapeFlags.Empty) === ShapeFlags.Empty) {\r\n            hitList.shift();\r\n            ctx.restore();\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}","module minerva.shapes.shape.hittest.tapins {\r\n    export function drawShape (data: IHitTestData, pos: Point, hitList: core.Updater[], ctx: core.render.RenderContext): boolean {\r\n        //No-op\r\n        return true;\r\n    }\r\n}","module minerva.shapes.shape.hittest.tapins {\r\n    export function finishShape (data: IHitTestData, pos: Point, hitList: core.Updater[], ctx: core.render.RenderContext): boolean {\r\n        var assets = data.assets;\r\n        var inside = (!!assets.fill && ctx.raw.isPointInPath(pos.x, pos.y))\r\n            || (!!assets.stroke && ctx.isPointInStrokeEx(assets, pos.x, pos.y));\r\n        ctx.restore();\r\n\r\n        if (!inside) {\r\n            hitList.shift();\r\n            ctx.restore();\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}","module minerva.shapes.shape.hittest.tapins {\r\n    export function insideChildren (data: IHitTestData, pos: Point, hitList: core.Updater[], ctx: core.render.RenderContext): boolean {\r\n        hitList.unshift(data.updater);\r\n        data.hitChildren = false;\r\n        return true;\r\n    }\r\n}","module minerva.shapes.shape.hittest.tapins {\r\n    export function prepareShape (data: IHitTestData, pos: Point, hitList: core.Updater[], ctx: core.render.RenderContext): boolean {\r\n        ctx.save();\r\n        return true;\r\n    }\r\n}","module minerva.shapes.shape.measure.tapins {\r\n    export function calcNaturalBounds (input: IInput, state: IState, output: IOutput, tree: core.IUpdaterTree) {\r\n        var nb = output.naturalBounds;\r\n        nb.x = nb.y = 0;\r\n        nb.width = nb.height = 1;\r\n        return true;\r\n    }\r\n}","module minerva.shapes.shape.measure.tapins {\r\n    export function doOverride (input: IInput, state: IState, output: IOutput, tree: core.IUpdaterTree) {\r\n        var ds = output.desiredSize;\r\n        var nb = output.naturalBounds;\r\n        if (input.stretch === Stretch.None) {\r\n            ds.width = nb.x + nb.width;\r\n            ds.height = nb.y + nb.height;\r\n            return true;\r\n        }\r\n\r\n        var available = state.availableSize;\r\n        Size.copyTo(available, ds);\r\n        if (!isFinite(available.width))\r\n            ds.width = nb.width;\r\n        if (!isFinite(available.height))\r\n            ds.height = nb.height;\r\n\r\n        var sx = 0,\r\n            sy = 0;\r\n        if (nb.width > 0)\r\n            sx = ds.width / nb.width;\r\n        if (nb.height > 0)\r\n            sy = ds.height / nb.height;\r\n\r\n        if (!isFinite(available.width))\r\n            sx = sy;\r\n        if (!isFinite(available.height))\r\n            sy = sx;\r\n\r\n        switch (input.stretch) {\r\n            case Stretch.Uniform:\r\n                sx = sy = Math.min(sx, sy);\r\n                break;\r\n            case Stretch.UniformToFill:\r\n                sx = sy = Math.max(sx, sy);\r\n                break;\r\n            case Stretch.Fill:\r\n                if (!isFinite(available.width))\r\n                    sx = 1.0;\r\n                if (!isFinite(available.height))\r\n                    sy = 1.0;\r\n                break;\r\n        }\r\n\r\n        ds.width = nb.width * sx;\r\n        ds.height = nb.height * sy;\r\n\r\n        return true;\r\n    }\r\n}","module minerva.shapes.shape.processup.tapins {\r\n    export function calcExtents (input: IInput, state: IState, output: IOutput, tree: core.IUpdaterTree): boolean {\r\n        if ((input.dirtyFlags & DirtyFlags.Bounds) === 0)\r\n            return true;\r\n\r\n        output.extents.x = output.extents.y = 0;\r\n        Size.copyTo(state.actualSize, output.extents);\r\n        Rect.copyTo(output.extents, output.extentsWithChildren);\r\n        return true;\r\n    }\r\n}","module minerva.shapes.shape.processup.tapins {\r\n    export function calcShapeRect (input: IInput, state: IState, output: IOutput, tree: core.IUpdaterTree): boolean {\r\n        if ((input.dirtyFlags & DirtyFlags.Bounds) === 0)\r\n            return true;\r\n\r\n        var sr = output.shapeRect;\r\n        sr.x = sr.y = 0;\r\n        Size.copyTo(state.actualSize, sr);\r\n\r\n        output.shapeFlags = ShapeFlags.Empty;\r\n        if (Rect.isEmpty(sr))\r\n            return true;\r\n\r\n        var t = !!input.stroke ? input.strokeThickness : 0.0;\r\n        if (t >= sr.width || t >= sr.height) {\r\n            sr.width = Math.max(sr.width, t + t * 0.001);\r\n            sr.height = Math.max(sr.height, t + t * 0.001);\r\n            output.shapeFlags = ShapeFlags.Degenerate;\r\n        } else {\r\n            output.shapeFlags = ShapeFlags.Normal;\r\n        }\r\n\r\n        var ht = t / 2;\r\n        Rect.shrink(sr, ht, ht, ht, ht);\r\n\r\n        return true;\r\n    }\r\n}","module minerva.shapes.shape.render.tapins {\r\n    export function calcShouldDraw (input: IInput, state: IState, output: IOutput, ctx: core.render.RenderContext, region: Rect): boolean {\r\n        state.shouldDraw = false;\r\n        if (input.shapeFlags === ShapeFlags.Empty)\r\n            return true;\r\n        if (!input.fill && !input.stroke)\r\n            return true;\r\n        state.shouldDraw = true;\r\n        return true;\r\n    }\r\n}","module minerva.shapes.shape.render.tapins {\r\n    export function doRender (input: IInput, state: IState, output: IOutput, ctx: core.render.RenderContext, region: Rect): boolean {\r\n        if (!state.shouldDraw)\r\n            return true;\r\n        //No-op\r\n        return true;\r\n    }\r\n}","module minerva.shapes.shape.render.tapins {\r\n    export function fill (input: IInput, state: IState, output: IOutput, ctx: core.render.RenderContext, region: Rect): boolean {\r\n        if (!state.shouldDraw)\r\n            return true;\r\n        if (input.fill)\r\n            ctx.fillEx(input.fill, input.shapeRect, input.fillRule);\r\n        return true;\r\n    }\r\n}","module minerva.shapes.shape.render.tapins {\r\n    export function finishDraw (input: IInput, state: IState, output: IOutput, ctx: core.render.RenderContext, region: Rect): boolean {\r\n        if (!state.shouldDraw)\r\n            return true;\r\n        ctx.restore();\r\n        return true;\r\n    }\r\n}","module minerva.shapes.shape.render.tapins {\r\n    export function prepareDraw (input: IInput, state: IState, output: IOutput, ctx: core.render.RenderContext, region: Rect, tree: core.IUpdaterTree): boolean {\r\n        if (!state.shouldDraw)\r\n            return true;\r\n        ctx.save();\r\n        core.helpers.renderLayoutClip(ctx, input, tree);\r\n        return true;\r\n    }\r\n}","module minerva.shapes.shape.render.tapins {\r\n    var caps: string[] = [\r\n        \"butt\", //flat\r\n        \"square\", //square\r\n        \"round\", //round\r\n        \"butt\" //triangle\r\n    ];\r\n    var joins: string[] = [\r\n        \"miter\",\r\n        \"bevel\",\r\n        \"round\"\r\n    ];\r\n\r\n    export function stroke (input: IInput, state: IState, output: IOutput, ctx: core.render.RenderContext, region: Rect): boolean {\r\n        if (!state.shouldDraw)\r\n            return true;\r\n\r\n        var stroke = input.stroke;\r\n        if (!stroke || !(input.strokeThickness > 0))\r\n            return true;\r\n\r\n        var raw = ctx.raw;\r\n        raw.lineWidth = input.strokeThickness;\r\n        raw.lineCap = caps[input.strokeStartLineCap || input.strokeEndLineCap || 0] || caps[0];\r\n        raw.lineJoin = joins[input.strokeLineJoin || 0] || joins[0];\r\n        raw.miterLimit = input.strokeMiterLimit;\r\n\r\n        stroke.setupBrush(raw, input.shapeRect);\r\n        raw.strokeStyle = stroke.toHtml5Object();\r\n        raw.stroke();\r\n\r\n        return true;\r\n    }\r\n}","module minerva.controls.border.render.tapins.shim {\r\n    export function calcBalanced (input: IInput, state: IShimState, output: IOutput, ctx: core.render.RenderContext, region: Rect, tree: core.IUpdaterTree): boolean {\r\n        if (!state.shouldRender || Thickness.isEmpty(input.borderThickness))\r\n            return true;\r\n\r\n        if (Thickness.isBalanced(input.borderThickness)) {\r\n            var icr = state.innerCornerRadius;\r\n            var ocr = state.outerCornerRadius;\r\n            var mcr = state.middleCornerRadius;\r\n            mcr.topLeft = (icr.topLeft + ocr.topLeft) / 2.0;\r\n            mcr.topRight = (icr.topRight + ocr.topRight) / 2.0;\r\n            mcr.bottomRight = (icr.bottomRight + ocr.bottomRight) / 2.0;\r\n            mcr.bottomLeft = (icr.bottomLeft + ocr.bottomLeft) / 2.0;\r\n            Rect.copyTo(input.extents, state.strokeExtents);\r\n            var bt = input.borderThickness;\r\n            Rect.shrink(state.strokeExtents, bt.left / 2.0, bt.top / 2.0, bt.right / 2.0, bt.bottom / 2.0);\r\n        }\r\n\r\n        return true;\r\n    }\r\n}","module minerva.controls.border.render.tapins.shim {\r\n    export function createPattern (input: IInput, state: IShimState, output: IOutput, ctx: core.render.RenderContext, region: Rect, tree: core.IUpdaterTree): boolean {\r\n        if (!state.shouldRender || Thickness.isBalanced(input.borderThickness))\r\n            return true;\r\n\r\n        if (!state.pattern) {\r\n            state.pattern = createBorderPattern(input.borderBrush, input.extents, state.fillExtents, state.outerCornerRadius, state.innerCornerRadius);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    var tempCtx: core.render.RenderContext;\r\n\r\n    function createBorderPattern (borderBrush: IBrush, extents: Rect, fillExtents: Rect, oa: ICornerRadius, ia: ICornerRadius): CanvasPattern {\r\n        tempCtx = tempCtx || new core.render.RenderContext(<CanvasRenderingContext2D>document.createElement('canvas').getContext('2d'));\r\n        var raw = tempCtx.raw;\r\n        Size.copyTo(extents, raw.canvas);\r\n        raw.beginPath();\r\n        helpers.drawBorderRect(raw, extents, oa);\r\n        tempCtx.fillEx(borderBrush, extents);\r\n        raw.globalCompositeOperation = \"xor\";\r\n        raw.beginPath();\r\n        helpers.drawBorderRect(raw, fillExtents, ia);\r\n        raw.fill();\r\n        return raw.createPattern(raw.canvas, \"no-repeat\");\r\n    }\r\n}\r\n","module minerva.controls.border.render.tapins.shim {\r\n    export function doRender (input: IInput, state: IShimState, output: IOutput, ctx: core.render.RenderContext, region: Rect, tree: core.IUpdaterTree): boolean {\r\n        if (!state.shouldRender)\r\n            return true;\r\n        ctx.save();\r\n        core.helpers.renderLayoutClip(ctx, input, tree);\r\n\r\n        if (input.background)\r\n            renderBackground(ctx, input, state);\r\n\r\n        if (state.pattern) {\r\n            renderPattern(ctx, input, state);\r\n        } else if (input.borderBrush) {\r\n            renderBorder(ctx, input, state);\r\n        }\r\n\r\n        ctx.restore();\r\n        return true;\r\n    }\r\n\r\n    function renderPattern (ctx: core.render.RenderContext, input: IInput, state: IShimState) {\r\n        var raw = ctx.raw;\r\n        raw.beginPath();\r\n        raw.fillStyle = state.pattern;\r\n        helpers.drawBorderRect(raw, input.extents, state.outerCornerRadius);\r\n        raw.fill();\r\n    }\r\n\r\n    function renderBackground (ctx: core.render.RenderContext, input: IInput, state: IShimState) {\r\n        ctx.raw.beginPath();\r\n        helpers.drawBorderRect(ctx.raw, state.fillExtents, state.innerCornerRadius);\r\n        ctx.fillEx(input.background, state.fillExtents);\r\n    }\r\n\r\n    function renderBorder (ctx: core.render.RenderContext, input: IInput, state: IShimState) {\r\n        var raw = ctx.raw;\r\n        raw.beginPath();\r\n        helpers.drawBorderRect(raw, state.strokeExtents, state.middleCornerRadius);\r\n        raw.lineWidth = input.borderThickness.left;\r\n        raw.lineCap = \"butt\";\r\n        raw.lineJoin = \"miter\";\r\n        raw.miterLimit = 0;\r\n        input.borderBrush.setupBrush(raw, state.strokeExtents);\r\n        raw.strokeStyle = input.borderBrush.toHtml5Object();\r\n        raw.stroke();\r\n    }\r\n}","module minerva.controls.border.render.tapins.shim {\r\n    export function invalidatePattern (input: IInput, state: IShimState, output: IOutput, ctx: core.render.RenderContext, region: Rect, tree: core.IUpdaterTree): boolean {\r\n        if (!state.shouldRender)\r\n            return true;\r\n\r\n        if (Thickness.isEmpty(input.borderThickness)) {\r\n            state.pattern = null;\r\n            return true;\r\n        }\r\n\r\n        if (!state.oldMetrics) {\r\n            state.oldMetrics = {};\r\n            setOldMetrics(input, state, state.oldMetrics);\r\n            state.pattern = null;\r\n            return true;\r\n        }\r\n\r\n        if (didMetricsChange(input, state, state.oldMetrics))\r\n            state.pattern = null;\r\n\r\n        setOldMetrics(input, state, state.oldMetrics);\r\n        return true;\r\n    }\r\n\r\n    function setOldMetrics (input: IInput, state: IState, metrics: any) {\r\n        metrics.borderBrush = input.borderBrush;\r\n        metrics.borderThickness = input.borderThickness;\r\n        metrics.extents = input.extents;\r\n        metrics.fillExtents = state.fillExtents;\r\n        metrics.outerCornerRadius = state.outerCornerRadius;\r\n        metrics.innerCornerRadius = state.innerCornerRadius;\r\n    }\r\n\r\n    function didMetricsChange (input: IInput, state: IState, metrics: any): boolean {\r\n        return metrics.borderBrush !== input.borderBrush\r\n            || !Rect.isEqual(metrics.extents, input.extents)\r\n            || !Rect.isEqual(metrics.fillExtents, state.fillExtents)\r\n            || !CornerRadius.isEqual(metrics.outerCornerRadius, state.outerCornerRadius)\r\n            || !CornerRadius.isEqual(metrics.innerCornerRadius, state.innerCornerRadius);\r\n    }\r\n}","/// <reference path=\"../core/Updater\" />\r\n\r\nmodule minerva.anon {\r\n    export class AnonymousUpdater extends core.Updater {\r\n        init () {\r\n            this.setMeasurePipe(new measure.AnonymousMeasurePipeDef(this))\r\n                .setArrangePipe(new arrange.AnonymousArrangePipeDef(this));\r\n\r\n            super.init();\r\n        }\r\n\r\n        measureOverride (availableSize: Size): Size {\r\n            return availableSize;\r\n        }\r\n\r\n        arrangeOverride (arrangeSize: Size): Size {\r\n            return arrangeSize;\r\n        }\r\n    }\r\n}","module minerva.engine {\r\n    export interface IPass extends core.draft.IDraftPipeData {\r\n        count: number;\r\n        maxCount: number;\r\n    }\r\n\r\n    var fontCtx: CanvasRenderingContext2D = null;\r\n    var hitTestCtx: core.render.RenderContext = null;\r\n    export class Surface implements core.ISurface {\r\n        private $$layout = new core.draft.DraftPipeDef();\r\n\r\n        private $$canvas: HTMLCanvasElement = null;\r\n        private $$ctx: core.render.RenderContext = null;\r\n\r\n        private $$layers: core.Updater[] = [];\r\n        private $$prerenderhooks: core.Updater[] = [];\r\n\r\n        private $$downDirty: core.Updater[] = [];\r\n        private $$upDirty: core.Updater[] = [];\r\n        private $$dirtyRegion: Rect = null;\r\n\r\n        private $$width: number = 0;\r\n        private $$height: number = 0;\r\n\r\n        get width(): number {\r\n            return this.$$width;\r\n        }\r\n\r\n        get height(): number {\r\n            return this.$$height;\r\n        }\r\n\r\n        init(canvas: HTMLCanvasElement) {\r\n            this.$$canvas = canvas;\r\n            this.$$ctx = new core.render.RenderContext(<CanvasRenderingContext2D>canvas.getContext('2d', {alpha: false}));\r\n        }\r\n\r\n        attachLayer(layer: core.Updater, root?: boolean) {\r\n            if (root === true)\r\n                this.$$layers.unshift(layer);\r\n            else\r\n                this.$$layers.push(layer);\r\n            layer.tree.isTop = true;\r\n            layer.invalidateMeasure();\r\n            layer.fullInvalidate();\r\n            layer.setSurface(this);\r\n        }\r\n\r\n        detachLayer(layer: core.Updater) {\r\n            layer.tree.isTop = false;\r\n            layer.setSurface(null);\r\n            var index = this.$$layers.indexOf(layer);\r\n            if (index > -1)\r\n                this.$$layers.splice(index, 1);\r\n            this.invalidate(layer.assets.surfaceBoundsWithChildren);\r\n        }\r\n\r\n        walkLayers(reverse?: boolean): IWalker<core.Updater> {\r\n            var layers = this.$$layers;\r\n            var i = -1;\r\n            if (reverse === true) {\r\n                i = layers.length;\r\n                return {\r\n                    current: undefined,\r\n                    step: function (): boolean {\r\n                        i--;\r\n                        this.current = layers[i];\r\n                        return this.current !== undefined;\r\n                    }\r\n                };\r\n            } else {\r\n                return {\r\n                    current: undefined,\r\n                    step: function (): boolean {\r\n                        i++;\r\n                        this.current = layers[i];\r\n                        return this.current !== undefined;\r\n                    }\r\n                };\r\n            }\r\n        }\r\n\r\n        updateBounds() {\r\n\r\n        }\r\n\r\n        invalidate(region?: Rect) {\r\n            region = region || new Rect(0, 0, this.width, this.height);\r\n            if (!this.$$dirtyRegion)\r\n                this.$$dirtyRegion = new Rect(region.x, region.y, region.width, region.height);\r\n            else\r\n                Rect.union(this.$$dirtyRegion, region);\r\n        }\r\n\r\n        render() {\r\n            for (var i = 0, hooks = this.$$prerenderhooks; i < hooks.length; i++) {\r\n                hooks[i].preRender();\r\n            }\r\n\r\n            var region = this.$$dirtyRegion;\r\n            if (!region || Rect.isEmpty(region))\r\n                return;\r\n            this.$$dirtyRegion = null;\r\n            Rect.roundOut(region);\r\n\r\n            var ctx = this.$$ctx;\r\n            ctx.size.commitResize();\r\n\r\n            ctx.save();\r\n            ctx.applyDpiRatio();\r\n            ctx.raw.fillStyle = \"#ffffff\";\r\n            ctx.raw.fillRect(region.x, region.y, region.width, region.height);\r\n            ctx.clipRect(region);\r\n            for (var layers = this.$$layers, i = 0, len = layers.length; i < len; i++) {\r\n                layers[i].render(ctx, region);\r\n            }\r\n            ctx.restore();\r\n        }\r\n\r\n        hookPrerender(updater: core.Updater) {\r\n            this.$$prerenderhooks.push(updater);\r\n        }\r\n\r\n        unhookPrerender(updater: core.Updater) {\r\n            var index = this.$$prerenderhooks.indexOf(updater);\r\n            if (index > -1) {\r\n                this.$$prerenderhooks.splice(index, 1);\r\n            }\r\n        }\r\n\r\n        addUpDirty(updater: core.Updater) {\r\n            this.$$upDirty.push(updater);\r\n        }\r\n\r\n        addDownDirty(updater: core.Updater) {\r\n            this.$$downDirty.push(updater);\r\n        }\r\n\r\n        updateLayout(): boolean {\r\n            var pass: IPass = {\r\n                count: 0,\r\n                maxCount: 250,\r\n                updater: null,\r\n                assets: null,\r\n                tree: null,\r\n                flag: UIFlags.None,\r\n                measureList: [],\r\n                arrangeList: [],\r\n                sizingList: [],\r\n                surfaceSize: new Size(this.width, this.height),\r\n                sizingUpdates: []\r\n            };\r\n            var updated = false;\r\n            var layersUpdated = true;\r\n            while (pass.count < pass.maxCount && layersUpdated) {\r\n                layersUpdated = draft(this.$$layers, this.$$layout, pass);\r\n                updated = process(this.$$downDirty, this.$$upDirty) || layersUpdated || updated;\r\n            }\r\n\r\n            if (pass.count >= pass.maxCount) {\r\n                console.error(\"[MINERVA] Aborting infinite update loop\");\r\n            }\r\n\r\n            return updated;\r\n        }\r\n\r\n        resize(width: number, height: number) {\r\n            if (this.$$width === width && this.$$height === height)\r\n                return;\r\n            var region = new Rect(0, 0, this.$$width, this.$$height);\r\n            Rect.union(region, new Rect(0, 0, width, height));\r\n            Rect.roundOut(region);\r\n            this.$$width = width;\r\n            this.$$height = height;\r\n            this.$$ctx.size.queueResize(width, height);\r\n            this.invalidate(region);\r\n            for (var layers = this.$$layers, i = 0; i < layers.length; i++) {\r\n                layers[i].invalidateMeasure();\r\n            }\r\n        }\r\n\r\n        hitTest(pos: Point): core.Updater[] {\r\n            if (this.$$layers.length < 1)\r\n                return null;\r\n            hitTestCtx = hitTestCtx || new core.render.RenderContext(<CanvasRenderingContext2D>document.createElement('canvas').getContext('2d'));\r\n            hitTestCtx.size\r\n                .queueResize(this.width, this.height)\r\n                .commitResize();\r\n\r\n            var list: core.Updater[] = [];\r\n            for (var layers = this.$$layers, i = layers.length - 1; i >= 0 && list.length === 0; i--) {\r\n                layers[i].hitTest(pos, list, hitTestCtx, false);\r\n            }\r\n            return list;\r\n        }\r\n\r\n        updateDpiRatio() {\r\n            if (this.$$ctx.size.updateDpiRatio())\r\n                this.invalidate();\r\n        }\r\n\r\n        static measureWidth(text: string, font: Font): number {\r\n            fontCtx = fontCtx || <CanvasRenderingContext2D>document.createElement('canvas').getContext('2d');\r\n            fontCtx.font = font.toHtml5Object();\r\n            return fontCtx.measureText(text).width;\r\n        }\r\n    }\r\n}\r\n","module minerva.engine {\r\n    export function draft (layers: core.Updater[], draftPipe: core.draft.DraftPipeDef, pass: IPass): boolean {\r\n        var updated = false;\r\n        for (var i = 0, len = layers.length; i < len; i++) {\r\n            pass.updater = layers[i];\r\n            if ((pass.updater.assets.uiFlags & UIFlags.Hints) === 0)\r\n                continue;\r\n            pass.tree = pass.updater.tree;\r\n            pass.assets = pass.updater.assets;\r\n            while (pass.count < pass.maxCount) {\r\n                if (!draftPipe.run(pass))\r\n                    break;\r\n                updated = true;\r\n                pass.count++;\r\n            }\r\n        }\r\n        return updated;\r\n    }\r\n}","module minerva.engine {\r\n    export function process (down: core.Updater[], up: core.Updater[]): boolean {\r\n        var updated = down.length > 0 || up.length > 0;\r\n        processDown(down);\r\n        processUp(up);\r\n        return updated;\r\n    }\r\n\r\n    //Down --> RenderVisibility, HitTestVisibility, Transformation, Clip\r\n    function processDown (list: core.Updater[]) {\r\n        for (var updater: core.Updater; (updater = list[0]) != null;) {\r\n            if (updater.processDown()) {\r\n                list.shift();\r\n            } else {\r\n                list.push(list.shift());\r\n            }\r\n        }\r\n        if (list.length > 0) {\r\n            console.warn(\"[MINERVA] Finished DownDirty pass, not empty.\");\r\n        }\r\n    }\r\n\r\n    //Up --> Bounds, Invalidation\r\n    function processUp (list: core.Updater[]) {\r\n        for (var updater: core.Updater; (updater = list[0]) != null;) {\r\n            var childIndex = updater.findChildInList(list);\r\n            if (childIndex > -1) {\r\n                // OPTIMIZATION: Parent is overzealous, children will invalidate him\r\n                list.splice(childIndex + 1, 0, list.shift());\r\n            } else if (updater.processUp()) {\r\n                list.shift();\r\n            }\r\n        }\r\n        if (list.length > 0) {\r\n            console.warn(\"[MINERVA] Finished UpDirty pass, not empty.\");\r\n        }\r\n    }\r\n}","interface IMatrix3Static {\r\n    create (src?: number[]): number[];\r\n    copyTo (src: number[], dest: number[]): number[];\r\n    init (dest: number[], m11: number, m12: number, m21: number, m22: number, x0: number, y0: number): number[];\r\n    identity (dest?: number[]): number[];\r\n    equal (a: number[], b: number[]): boolean;\r\n    // dest = a * b\r\n    multiply (a: number[], b: number[], dest?: number[]): number[];\r\n    inverse(mat: number[], dest?: number[]): number[];\r\n    transformVec2(mat: number[], vec: number[], dest?: number[]): number[];\r\n\r\n    createTranslate(x: number, y: number, dest?: number[]): number[];\r\n    translate(mat: number[], x: number, y: number): number[];\r\n    createScale (sx: number, sy: number, dest?: number[]): number[];\r\n    scale (mat: number[], sx: number, sy: number): number[];\r\n    createRotate (angleRad: number, dest?: number[]): number[];\r\n    createSkew (angleRadX: number, angleRadY: number, dest?: number[]): number[];\r\n\r\n    preapply(dest: number[], mat: number[]): number[];\r\n    apply(dest: number[], mat: number[]): number[];\r\n}\r\nmodule minerva {\r\n    /// NOTE:\r\n    ///     Row-major order\r\n    ///     [m11, m12, m21, m22, x0, y0]\r\n    var FLOAT_EPSILON = 0.000001;\r\n    var createTypedArray: (length: number) => number[];\r\n\r\n    if (typeof Float32Array !== \"undefined\") {\r\n        createTypedArray = function (length: number): number[] {\r\n            return <number[]><any>new Float32Array(length);\r\n        };\r\n    } else {\r\n        createTypedArray = function (length: number): number[] {\r\n            return <number[]>new Array(length);\r\n        };\r\n    }\r\n\r\n    export var mat3: IMatrix3Static = {\r\n        create (src?: number[]): number[] {\r\n            var dest = createTypedArray(6);\r\n\r\n            if (src) {\r\n                dest[0] = src[0];\r\n                dest[1] = src[1];\r\n                dest[2] = src[2];\r\n                dest[3] = src[3];\r\n                dest[4] = src[4];\r\n                dest[5] = src[5];\r\n            } else {\r\n                dest[0] = dest[1] = dest[2] = dest[3] = dest[4] = dest[5] = 0;\r\n            }\r\n\r\n            return dest;\r\n        },\r\n        copyTo (src: number[], dest: number[]): number[] {\r\n            dest[0] = src[0];\r\n            dest[1] = src[1];\r\n            dest[2] = src[2];\r\n            dest[3] = src[3];\r\n            dest[4] = src[4];\r\n            dest[5] = src[5];\r\n            return dest;\r\n        },\r\n        init (dest: number[], m11: number, m12: number, m21: number, m22: number, x0: number, y0: number): number[] {\r\n            dest[0] = m11;\r\n            dest[1] = m12;\r\n            dest[2] = m21;\r\n            dest[3] = m22;\r\n            dest[4] = x0;\r\n            dest[5] = y0;\r\n            return dest;\r\n        },\r\n        identity (dest?: number[]): number[] {\r\n            if (!dest) dest = mat3.create();\r\n            dest[0] = 1;\r\n            dest[1] = 0;\r\n            dest[2] = 0;\r\n            dest[3] = 1;\r\n            dest[4] = 0;\r\n            dest[5] = 0;\r\n            return dest;\r\n        },\r\n        equal (a: number[], b: number[]): boolean {\r\n            return a === b || (\r\n                    Math.abs(a[0] - b[0]) < FLOAT_EPSILON &&\r\n                    Math.abs(a[1] - b[1]) < FLOAT_EPSILON &&\r\n                    Math.abs(a[2] - b[2]) < FLOAT_EPSILON &&\r\n                    Math.abs(a[3] - b[3]) < FLOAT_EPSILON &&\r\n                    Math.abs(a[4] - b[4]) < FLOAT_EPSILON &&\r\n                    Math.abs(a[5] - b[5]) < FLOAT_EPSILON\r\n                );\r\n        },\r\n        multiply (a: number[], b: number[], dest?: number[]): number[] {\r\n            if (!dest) dest = a;\r\n            var a11 = a[0], a12 = a[1],\r\n                a21 = a[2], a22 = a[3],\r\n                ax0 = a[4], ay0 = a[5],\r\n                b11 = b[0], b12 = b[1],\r\n                b21 = b[2], b22 = b[3],\r\n                bx0 = b[4], by0 = b[5];\r\n\r\n            dest[0] = a11 * b11 + a12 * b21;\r\n            dest[1] = a11 * b12 + a12 * b22;\r\n\r\n            dest[2] = a21 * b11 + a22 * b21;\r\n            dest[3] = a21 * b12 + a22 * b22;\r\n\r\n            dest[4] = ax0 * b11 + ay0 * b21 + bx0;\r\n            dest[5] = ax0 * b12 + ay0 * b22 + by0;\r\n\r\n            return dest;\r\n        },\r\n        inverse (mat: number[], dest?: number[]): number[] {\r\n            if (Math.abs(mat[1]) < FLOAT_EPSILON && Math.abs(mat[2]) < FLOAT_EPSILON) //Simple scaling/translation matrix\r\n                return simple_inverse(mat, dest);\r\n            else\r\n                return complex_inverse(mat, dest);\r\n        },\r\n        transformVec2 (mat: number[], vec: number[], dest?: number[]): number[] {\r\n            if (!dest) dest = vec;\r\n            var x = vec[0],\r\n                y = vec[1];\r\n            dest[0] = (mat[0] * x) + (mat[2] * y) + mat[4];\r\n            dest[1] = (mat[1] * x) + (mat[3] * y) + mat[5];\r\n            return dest;\r\n        },\r\n\r\n        createTranslate (x: number, y: number, dest?: number[]): number[] {\r\n            if (!dest) dest = mat3.create();\r\n            dest[0] = 1;\r\n            dest[1] = 0;\r\n            dest[2] = 0;\r\n            dest[3] = 1;\r\n            dest[4] = x;\r\n            dest[5] = y;\r\n            return dest;\r\n        },\r\n        translate (mat: number[], x: number, y: number): number[] {\r\n            mat[4] += x;\r\n            mat[5] += y;\r\n            return mat;\r\n        },\r\n        createScale (sx: number, sy: number, dest?: number[]): number[] {\r\n            if (!dest) dest = mat3.create();\r\n            dest[0] = sx;\r\n            dest[1] = 0;\r\n            dest[2] = 0;\r\n            dest[3] = sy;\r\n            dest[4] = 0;\r\n            dest[5] = 0;\r\n            return dest;\r\n        },\r\n        scale (mat: number[], sx: number, sy: number): number[] {\r\n            mat[0] *= sx;\r\n            mat[2] *= sx;\r\n            mat[4] *= sx;\r\n\r\n            mat[1] *= sy;\r\n            mat[3] *= sy;\r\n            mat[5] *= sy;\r\n            return mat;\r\n        },\r\n        createRotate (angleRad: number, dest?: number[]): number[] {\r\n            if (!dest) dest = mat3.create();\r\n            var c = Math.cos(angleRad);\r\n            var s = Math.sin(angleRad);\r\n            dest[0] = c;\r\n            dest[1] = s;\r\n            dest[2] = -s;\r\n            dest[3] = c;\r\n            dest[4] = 0;\r\n            dest[5] = 0;\r\n            return dest;\r\n        },\r\n        createSkew (angleRadX: number, angleRadY: number, dest?: number[]): number[] {\r\n            if (!dest) dest = mat3.create();\r\n            dest[0] = 1;\r\n            dest[1] = Math.tan(angleRadY);\r\n            dest[2] = Math.tan(angleRadX);\r\n            dest[3] = 1;\r\n            dest[4] = 0;\r\n            dest[5] = 0;\r\n            return dest;\r\n        },\r\n\r\n        preapply (dest: number[], mat: number[]): number[] {\r\n            return mat3.multiply(mat, dest, dest);\r\n        },\r\n        apply (dest: number[], mat: number[]): number[] {\r\n            return mat3.multiply(dest, mat, dest);\r\n        }\r\n    };\r\n\r\n    function simple_inverse (mat: number[], dest?: number[]): number[] {\r\n        var m11 = mat[0];\r\n        if (Math.abs(m11) < FLOAT_EPSILON)\r\n            return null;\r\n\r\n        var m22 = mat[3];\r\n        if (Math.abs(m22) < FLOAT_EPSILON)\r\n            return null;\r\n\r\n        if (!dest) {\r\n            dest = mat;\r\n        } else {\r\n            dest[1] = mat[1];\r\n            dest[2] = mat[2];\r\n        }\r\n\r\n        var x0 = -mat[4];\r\n        var y0 = -mat[5];\r\n        if (Math.abs(m11 - 1) > FLOAT_EPSILON) {\r\n            m11 = 1 / m11;\r\n            x0 *= m11;\r\n        }\r\n        if (Math.abs(m22 - 1) > FLOAT_EPSILON) {\r\n            m22 = 1 / m22;\r\n            y0 *= m22;\r\n        }\r\n\r\n        dest[0] = m11;\r\n        dest[3] = m22;\r\n        dest[4] = x0;\r\n        dest[5] = y0;\r\n        return dest;\r\n    }\r\n\r\n    function complex_inverse (mat: number[], dest?: number[]): number[] {\r\n        if (!dest) dest = mat;\r\n\r\n        var m11 = mat[0], m12 = mat[1],\r\n            m21 = mat[2], m22 = mat[3];\r\n\r\n        //inv(A) = 1/det(A) * adj(A)\r\n        var det = m11 * m22 - m12 * m21;\r\n        if (det === 0 || !isFinite(det))\r\n            return null;\r\n        var id = 1 / det;\r\n\r\n        var x0 = mat[4], y0 = mat[5];\r\n\r\n        dest[0] = m22 * id;\r\n        dest[1] = -m12 * id;\r\n        dest[2] = -m21 * id;\r\n        dest[3] = m11 * id;\r\n        dest[4] = (m21 * y0 - m22 * x0) * id;\r\n        dest[5] = (m12 * x0 - m11 * y0) * id;\r\n        return dest;\r\n    }\r\n}\r\nvar mat3 = minerva.mat3;","interface IMatrix4Static {\r\n    create (src?: number[]): number[];\r\n    copyTo (src: number[], dest: number[]): number[];\r\n    identity(dest?: number[]): number[];\r\n    equal(a: number[], b: number[]): boolean;\r\n    // dest = a * b\r\n    multiply (a: number[], b: number[], dest?: number[]): number[];\r\n    inverse (mat: number[], dest?: number[]): number[];\r\n    transpose (mat: number[], dest?: number[]): number[];\r\n    transformVec4 (mat: number[], vec: number[], dest?: number[]): number[];\r\n    createTranslate (x: number, y: number, z: number, dest?: number[]): number[];\r\n    createScale (x: number, y: number, z: number, dest?: number[]): number[];\r\n    createRotateX (theta: number, dest?: number[]): number[];\r\n    createRotateY (theta: number, dest?: number[]): number[];\r\n    createRotateZ (theta: number, dest?: number[]): number[];\r\n    createPerspective (fieldOfViewY: number, aspectRatio: number, zNearPlane: number, zFarPlane: number, dest?: number[]): number[];\r\n    createViewport (width: number, height: number, dest?: number[]): number[];\r\n}\r\n\r\nmodule minerva {\r\n    enum Indexes {\r\n        M11 = 0,\r\n        M12 = 1,\r\n        M13 = 2,\r\n        M14 = 3,\r\n        M21 = 4,\r\n        M22 = 5,\r\n        M23 = 6,\r\n        M24 = 7,\r\n        M31 = 8,\r\n        M32 = 9,\r\n        M33 = 10,\r\n        M34 = 11,\r\n        OffsetX = 12,\r\n        OffsetY = 13,\r\n        OffsetZ = 14,\r\n        M44 = 15\r\n    }\r\n\r\n    var FLOAT_EPSILON = 0.000001;\r\n    var createTypedArray: (length: number) => number[];\r\n\r\n    if (typeof Float32Array !== \"undefined\") {\r\n        createTypedArray = function (length: number): number[] {\r\n            return <number[]><any>new Float32Array(length);\r\n        };\r\n    } else {\r\n        createTypedArray = function (length: number): number[] {\r\n            return <number[]>new Array(length);\r\n        };\r\n    }\r\n\r\n    export var mat4: IMatrix4Static = {\r\n        create (src?: number[]): number[] {\r\n            var dest = createTypedArray(16);\r\n\r\n            if (src) {\r\n                dest[Indexes.M11] = src[Indexes.M11];\r\n                dest[Indexes.M12] = src[Indexes.M12];\r\n                dest[Indexes.M13] = src[Indexes.M13];\r\n                dest[Indexes.M14] = src[Indexes.M14];\r\n                dest[Indexes.M21] = src[Indexes.M21];\r\n                dest[Indexes.M22] = src[Indexes.M22];\r\n                dest[Indexes.M23] = src[Indexes.M23];\r\n                dest[Indexes.M24] = src[Indexes.M24];\r\n                dest[Indexes.M31] = src[Indexes.M31];\r\n                dest[Indexes.M32] = src[Indexes.M32];\r\n                dest[Indexes.M33] = src[Indexes.M33];\r\n                dest[Indexes.M34] = src[Indexes.M34];\r\n                dest[Indexes.OffsetX] = src[Indexes.OffsetX];\r\n                dest[Indexes.OffsetY] = src[Indexes.OffsetY];\r\n                dest[Indexes.OffsetZ] = src[Indexes.OffsetZ];\r\n                dest[Indexes.M44] = src[Indexes.M44];\r\n            }\r\n\r\n            return dest;\r\n        },\r\n        copyTo (src: number[], dest: number[]): number[] {\r\n            dest[Indexes.M11] = src[Indexes.M11];\r\n            dest[Indexes.M12] = src[Indexes.M12];\r\n            dest[Indexes.M13] = src[Indexes.M13];\r\n            dest[Indexes.M14] = src[Indexes.M14];\r\n            dest[Indexes.M21] = src[Indexes.M21];\r\n            dest[Indexes.M22] = src[Indexes.M22];\r\n            dest[Indexes.M23] = src[Indexes.M23];\r\n            dest[Indexes.M24] = src[Indexes.M24];\r\n            dest[Indexes.M31] = src[Indexes.M31];\r\n            dest[Indexes.M32] = src[Indexes.M32];\r\n            dest[Indexes.M33] = src[Indexes.M33];\r\n            dest[Indexes.M34] = src[Indexes.M34];\r\n            dest[Indexes.OffsetX] = src[Indexes.OffsetX];\r\n            dest[Indexes.OffsetY] = src[Indexes.OffsetY];\r\n            dest[Indexes.OffsetZ] = src[Indexes.OffsetZ];\r\n            dest[Indexes.M44] = src[Indexes.M44];\r\n            return dest;\r\n        },\r\n        identity (dest?: number[]): number[] {\r\n            if (!dest) dest = mat4.create();\r\n            dest[Indexes.M11] = 1;\r\n            dest[Indexes.M12] = 0;\r\n            dest[Indexes.M13] = 0;\r\n            dest[Indexes.M14] = 0;\r\n            dest[Indexes.M21] = 0;\r\n            dest[Indexes.M22] = 1;\r\n            dest[Indexes.M23] = 0;\r\n            dest[Indexes.M24] = 0;\r\n            dest[Indexes.M31] = 0;\r\n            dest[Indexes.M32] = 0;\r\n            dest[Indexes.M33] = 1;\r\n            dest[Indexes.M34] = 0;\r\n            dest[Indexes.OffsetX] = 0;\r\n            dest[Indexes.OffsetY] = 0;\r\n            dest[Indexes.OffsetZ] = 0;\r\n            dest[Indexes.M44] = 1;\r\n            return dest;\r\n        },\r\n        equal (a: number[], b: number[]): boolean {\r\n            return a === b || (\r\n                Math.abs(a[Indexes.M11] - b[Indexes.M11]) < FLOAT_EPSILON &&\r\n                Math.abs(a[Indexes.M12] - b[Indexes.M12]) < FLOAT_EPSILON &&\r\n                Math.abs(a[Indexes.M13] - b[Indexes.M13]) < FLOAT_EPSILON &&\r\n                Math.abs(a[Indexes.M14] - b[Indexes.M14]) < FLOAT_EPSILON &&\r\n                Math.abs(a[Indexes.M21] - b[Indexes.M21]) < FLOAT_EPSILON &&\r\n                Math.abs(a[Indexes.M22] - b[Indexes.M22]) < FLOAT_EPSILON &&\r\n                Math.abs(a[Indexes.M23] - b[Indexes.M23]) < FLOAT_EPSILON &&\r\n                Math.abs(a[Indexes.M24] - b[Indexes.M24]) < FLOAT_EPSILON &&\r\n                Math.abs(a[Indexes.M31] - b[Indexes.M31]) < FLOAT_EPSILON &&\r\n                Math.abs(a[Indexes.M32] - b[Indexes.M32]) < FLOAT_EPSILON &&\r\n                Math.abs(a[Indexes.M33] - b[Indexes.M33]) < FLOAT_EPSILON &&\r\n                Math.abs(a[Indexes.M34] - b[Indexes.M34]) < FLOAT_EPSILON &&\r\n                Math.abs(a[Indexes.OffsetX] - b[Indexes.OffsetX]) < FLOAT_EPSILON &&\r\n                Math.abs(a[Indexes.OffsetY] - b[Indexes.OffsetY]) < FLOAT_EPSILON &&\r\n                Math.abs(a[Indexes.OffsetZ] - b[Indexes.OffsetZ]) < FLOAT_EPSILON &&\r\n                Math.abs(a[Indexes.M44] - b[Indexes.M44]) < FLOAT_EPSILON\r\n                );\r\n        },\r\n        multiply (a: number[], b: number[], dest?: number[]): number[] {\r\n            if (!dest) dest = a;\r\n            var m11 = a[Indexes.M11], m12 = a[Indexes.M12], m13 = a[Indexes.M13], m14 = a[Indexes.M14],\r\n                m21 = a[Indexes.M21], m22 = a[Indexes.M22], m23 = a[Indexes.M23], m24 = a[Indexes.M24],\r\n                m31 = a[Indexes.M31], m32 = a[Indexes.M32], m33 = a[Indexes.M33], m34 = a[Indexes.M34],\r\n                mx0 = a[Indexes.OffsetX], my0 = a[Indexes.OffsetY], mz0 = a[Indexes.OffsetZ], m44 = a[Indexes.M44];\r\n\r\n            var n11 = b[Indexes.M11], n12 = b[Indexes.M12], n13 = b[Indexes.M13], n14 = b[Indexes.M14],\r\n                n21 = b[Indexes.M21], n22 = b[Indexes.M22], n23 = b[Indexes.M23], n24 = b[Indexes.M24],\r\n                n31 = b[Indexes.M31], n32 = b[Indexes.M32], n33 = b[Indexes.M33], n34 = b[Indexes.M34],\r\n                nx0 = b[Indexes.OffsetX], ny0 = b[Indexes.OffsetY], nz0 = b[Indexes.OffsetZ], n44 = b[Indexes.M44];\r\n\r\n            dest[Indexes.M11] = m11 * n11 + m12 * n21 + m13 * n31 + m14 * nx0;\r\n            dest[Indexes.M12] = m11 * n12 + m12 * n22 + m13 * n32 + m14 * ny0;\r\n            dest[Indexes.M13] = m11 * n13 + m12 * n23 + m13 * n33 + m14 * nz0;\r\n            dest[Indexes.M14] = m11 * n14 + m12 * n24 + m13 * n34 + m14 * n44;\r\n            dest[Indexes.M21] = m21 * n11 + m22 * n21 + m23 * n31 + m24 * nx0;\r\n            dest[Indexes.M22] = m21 * n12 + m22 * n22 + m23 * n32 + m24 * ny0;\r\n            dest[Indexes.M23] = m21 * n13 + m22 * n23 + m23 * n33 + m24 * nz0;\r\n            dest[Indexes.M24] = m21 * n14 + m22 * n24 + m23 * n34 + m24 * n44;\r\n            dest[Indexes.M31] = m31 * n11 + m32 * n21 + m33 * n31 + m34 * nx0;\r\n            dest[Indexes.M32] = m31 * n12 + m32 * n22 + m33 * n32 + m34 * ny0;\r\n            dest[Indexes.M33] = m31 * n13 + m32 * n23 + m33 * n33 + m34 * nz0;\r\n            dest[Indexes.M34] = m31 * n14 + m32 * n24 + m33 * n34 + m34 * n44;\r\n            dest[Indexes.OffsetX] = mx0 * n11 + my0 * n21 + mz0 * n31 + m44 * nx0;\r\n            dest[Indexes.OffsetY] = mx0 * n12 + my0 * n22 + mz0 * n32 + m44 * ny0;\r\n            dest[Indexes.OffsetZ] = mx0 * n13 + my0 * n23 + mz0 * n33 + m44 * nz0;\r\n            dest[Indexes.M44] = mx0 * n14 + my0 * n24 + mz0 * n34 + m44 * n44;\r\n            return dest;\r\n        },\r\n        inverse (mat: number[], dest?: number[]): number[] {\r\n            if (!dest) dest = mat;\r\n\r\n            // Cache the matrix values (makes for huge speed increases!)\r\n            var a00 = mat[Indexes.M11], a01 = mat[Indexes.M12], a02 = mat[Indexes.M13], a03 = mat[Indexes.M14],\r\n                a10 = mat[Indexes.M21], a11 = mat[Indexes.M22], a12 = mat[Indexes.M23], a13 = mat[Indexes.M24],\r\n                a20 = mat[Indexes.M31], a21 = mat[Indexes.M32], a22 = mat[Indexes.M33], a23 = mat[Indexes.M34],\r\n                a30 = mat[Indexes.OffsetX], a31 = mat[Indexes.OffsetY], a32 = mat[Indexes.OffsetZ], a33 = mat[Indexes.M44],\r\n\r\n                b00 = a00 * a11 - a01 * a10,\r\n                b01 = a00 * a12 - a02 * a10,\r\n                b02 = a00 * a13 - a03 * a10,\r\n                b03 = a01 * a12 - a02 * a11,\r\n                b04 = a01 * a13 - a03 * a11,\r\n                b05 = a02 * a13 - a03 * a12,\r\n                b06 = a20 * a31 - a21 * a30,\r\n                b07 = a20 * a32 - a22 * a30,\r\n                b08 = a20 * a33 - a23 * a30,\r\n                b09 = a21 * a32 - a22 * a31,\r\n                b10 = a21 * a33 - a23 * a31,\r\n                b11 = a22 * a33 - a23 * a32;\r\n\r\n            var d = (b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06);\r\n            if (!isFinite(d) || !d)\r\n                return null;\r\n            var id = 1 / d;\r\n\r\n            dest[Indexes.M11] = (a11 * b11 - a12 * b10 + a13 * b09) * id;\r\n            dest[Indexes.M12] = (-a01 * b11 + a02 * b10 - a03 * b09) * id;\r\n            dest[Indexes.M13] = (a31 * b05 - a32 * b04 + a33 * b03) * id;\r\n            dest[Indexes.M14] = (-a21 * b05 + a22 * b04 - a23 * b03) * id;\r\n            dest[Indexes.M21] = (-a10 * b11 + a12 * b08 - a13 * b07) * id;\r\n            dest[Indexes.M22] = (a00 * b11 - a02 * b08 + a03 * b07) * id;\r\n            dest[Indexes.M23] = (-a30 * b05 + a32 * b02 - a33 * b01) * id;\r\n            dest[Indexes.M24] = (a20 * b05 - a22 * b02 + a23 * b01) * id;\r\n            dest[Indexes.M31] = (a10 * b10 - a11 * b08 + a13 * b06) * id;\r\n            dest[Indexes.M32] = (-a00 * b10 + a01 * b08 - a03 * b06) * id;\r\n            dest[Indexes.M33] = (a30 * b04 - a31 * b02 + a33 * b00) * id;\r\n            dest[Indexes.M34] = (-a20 * b04 + a21 * b02 - a23 * b00) * id;\r\n            dest[Indexes.OffsetX] = (-a10 * b09 + a11 * b07 - a12 * b06) * id;\r\n            dest[Indexes.OffsetY] = (a00 * b09 - a01 * b07 + a02 * b06) * id;\r\n            dest[Indexes.OffsetZ] = (-a30 * b03 + a31 * b01 - a32 * b00) * id;\r\n            dest[Indexes.M44] = (a20 * b03 - a21 * b01 + a22 * b00) * id;\r\n\r\n            return dest;\r\n        },\r\n        transpose (mat: number[], dest?: number[]): number[] {\r\n            if (!dest) dest = mat;\r\n\r\n            var a00 = mat[Indexes.M11], a01 = mat[Indexes.M12], a02 = mat[Indexes.M13], a03 = mat[Indexes.M14],\r\n                a10 = mat[Indexes.M21], a11 = mat[Indexes.M22], a12 = mat[Indexes.M23], a13 = mat[Indexes.M24],\r\n                a20 = mat[Indexes.M31], a21 = mat[Indexes.M32], a22 = mat[Indexes.M33], a23 = mat[Indexes.M34],\r\n                a30 = mat[Indexes.OffsetX], a31 = mat[Indexes.OffsetY], a32 = mat[Indexes.OffsetZ], a33 = mat[Indexes.M44];\r\n\r\n            dest[Indexes.M11] = a00; dest[Indexes.M21] = a01; dest[Indexes.M31] = a02; dest[Indexes.OffsetX] = a03;\r\n            dest[Indexes.M12] = a10; dest[Indexes.M22] = a11; dest[Indexes.M32] = a12; dest[Indexes.OffsetY] = a13;\r\n            dest[Indexes.M13] = a20; dest[Indexes.M23] = a21; dest[Indexes.M33] = a22; dest[Indexes.OffsetZ] = a23;\r\n            dest[Indexes.M14] = a30; dest[Indexes.M24] = a31; dest[Indexes.M34] = a32; dest[Indexes.M44] = a33;\r\n\r\n            return dest;\r\n        },\r\n        transformVec4 (mat: number[], vec: number[], dest?: number[]): number[] {\r\n            if (!dest) dest = vec;\r\n\r\n            var x = vec[0], y = vec[1], z = vec[2], w = vec[3];\r\n\r\n            var m11 = mat[Indexes.M11], m12 = mat[Indexes.M12], m13 = mat[Indexes.M13], m14 = mat[Indexes.M14],\r\n                m21 = mat[Indexes.M21], m22 = mat[Indexes.M22], m23 = mat[Indexes.M23], m24 = mat[Indexes.M24],\r\n                m31 = mat[Indexes.M31], m32 = mat[Indexes.M32], m33 = mat[Indexes.M33], m34 = mat[Indexes.M34],\r\n                mx0 = mat[Indexes.OffsetX], my0 = mat[Indexes.OffsetY], mz0 = mat[Indexes.OffsetZ], m44 = mat[Indexes.M44];\r\n\r\n            dest[0] = m11 * x + m12 * y + m13 * z + m14 * w;\r\n            dest[1] = m21 * x + m22 * y + m23 * z + m24 * w;\r\n            dest[2] = m31 * x + m32 * y + m33 * z + m34 * w;\r\n            dest[3] = mx0 * x + my0 * y + mz0 * z + m44 * w;\r\n\r\n            return dest;\r\n        },\r\n\r\n        createTranslate (x: number, y: number, z: number, dest?: number[]): number[] {\r\n            if (!dest) dest = mat4.create();\r\n\r\n            dest[Indexes.M11] = 1;\r\n            dest[Indexes.M12] = 0;\r\n            dest[Indexes.M13] = 0;\r\n            dest[Indexes.M14] = 0;\r\n\r\n            dest[Indexes.M21] = 0;\r\n            dest[Indexes.M22] = 1;\r\n            dest[Indexes.M23] = 0;\r\n            dest[Indexes.M24] = 0;\r\n\r\n            dest[Indexes.M31] = 0;\r\n            dest[Indexes.M32] = 0;\r\n            dest[Indexes.M33] = 1;\r\n            dest[Indexes.M34] = 0;\r\n\r\n            dest[Indexes.OffsetX] = x;\r\n            dest[Indexes.OffsetY] = y;\r\n            dest[Indexes.OffsetZ] = z;\r\n            dest[Indexes.M44] = 1;\r\n\r\n            return dest;\r\n        },\r\n        createScale (x: number, y: number, z: number, dest?: number[]): number[] {\r\n            if (!dest) dest = mat4.create();\r\n\r\n            dest[Indexes.M11] = x;\r\n            dest[Indexes.M12] = 0;\r\n            dest[Indexes.M13] = 0;\r\n            dest[Indexes.M14] = 0;\r\n\r\n            dest[Indexes.M11] = 0;\r\n            dest[Indexes.M12] = y;\r\n            dest[Indexes.M13] = 0;\r\n            dest[Indexes.M14] = 0;\r\n\r\n            dest[Indexes.M31] = 0;\r\n            dest[Indexes.M32] = 0;\r\n            dest[Indexes.M33] = z;\r\n            dest[Indexes.M34] = 0;\r\n\r\n            dest[Indexes.OffsetX] = 0;\r\n            dest[Indexes.OffsetY] = 0;\r\n            dest[Indexes.OffsetZ] = 0;\r\n            dest[Indexes.M44] = 1;\r\n\r\n            return dest;\r\n        },\r\n        createRotateX (theta: number, dest?: number[]): number[] {\r\n            if (!dest) dest = mat4.create();\r\n\r\n            var s = Math.sin(theta);\r\n            var c = Math.cos(theta);\r\n\r\n            dest[Indexes.M11] = 1;\r\n            dest[Indexes.M12] = 0;\r\n            dest[Indexes.M13] = 0;\r\n            dest[Indexes.M14] = 0;\r\n\r\n            dest[Indexes.M21] = 0;\r\n            dest[Indexes.M22] = c;\r\n            dest[Indexes.M23] = s;\r\n            dest[Indexes.M24] = 0;\r\n\r\n            dest[Indexes.M31] = 0;\r\n            dest[Indexes.M32] = -s;\r\n            dest[Indexes.M33] = c;\r\n            dest[Indexes.M34] = 0;\r\n\r\n            dest[Indexes.OffsetX] = 0;\r\n            dest[Indexes.OffsetY] = 0;\r\n            dest[Indexes.OffsetZ] = 0;\r\n            dest[Indexes.M44] = 1;\r\n\r\n            return dest;\r\n        },\r\n        createRotateY (theta: number, dest?: number[]): number[] {\r\n            if (!dest) dest = mat4.create();\r\n\r\n            var s = Math.sin(theta);\r\n            var c = Math.cos(theta);\r\n\r\n            dest[Indexes.M11] = c;\r\n            dest[Indexes.M12] = 0;\r\n            dest[Indexes.M13] = -s;\r\n            dest[Indexes.M14] = 0;\r\n\r\n            dest[Indexes.M21] = 0;\r\n            dest[Indexes.M22] = 1;\r\n            dest[Indexes.M23] = 0;\r\n            dest[Indexes.M24] = 0;\r\n\r\n            dest[Indexes.M31] = s;\r\n            dest[Indexes.M32] = 0;\r\n            dest[Indexes.M33] = c;\r\n            dest[Indexes.M34] = 0;\r\n\r\n            dest[Indexes.OffsetX] = 0;\r\n            dest[Indexes.OffsetY] = 0;\r\n            dest[Indexes.OffsetZ] = 0;\r\n            dest[Indexes.M44] = 1;\r\n\r\n            return dest;\r\n        },\r\n        createRotateZ (theta: number, dest?: number[]): number[] {\r\n            if (!dest) dest = mat4.create();\r\n\r\n            var s = Math.sin(theta);\r\n            var c = Math.cos(theta);\r\n\r\n            dest[Indexes.M11] = c;\r\n            dest[Indexes.M12] = s;\r\n            dest[Indexes.M13] = 0;\r\n            dest[Indexes.M14] = 0;\r\n\r\n            dest[Indexes.M21] = -s;\r\n            dest[Indexes.M22] = c;\r\n            dest[Indexes.M23] = 0;\r\n            dest[Indexes.M24] = 0;\r\n\r\n            dest[Indexes.M31] = 0;\r\n            dest[Indexes.M32] = 0;\r\n            dest[Indexes.M33] = 1;\r\n            dest[Indexes.M34] = 0;\r\n\r\n            dest[Indexes.OffsetX] = 0;\r\n            dest[Indexes.OffsetY] = 0;\r\n            dest[Indexes.OffsetZ] = 0;\r\n            dest[Indexes.M44] = 1;\r\n\r\n            return dest;\r\n        },\r\n\r\n        createPerspective (fieldOfViewY: number, aspectRatio: number, zNearPlane: number, zFarPlane: number, dest?: number[]): number[] {\r\n            if (!dest) dest = mat4.create();\r\n\r\n            var height = 1.0 / Math.tan(fieldOfViewY / 2.0);\r\n            var width = height / aspectRatio;\r\n            var d = zNearPlane - zFarPlane;\r\n\r\n            dest[Indexes.M11] = width;\r\n            dest[Indexes.M12] = 0;\r\n            dest[Indexes.M13] = 0;\r\n            dest[Indexes.M14] = 0;\r\n\r\n            dest[Indexes.M21] = 0;\r\n            dest[Indexes.M22] = height;\r\n            dest[Indexes.M23] = 0;\r\n            dest[Indexes.M24] = 0;\r\n\r\n            dest[Indexes.M31] = 0;\r\n            dest[Indexes.M32] = 0;\r\n            dest[Indexes.M33] = zFarPlane / d;\r\n            dest[Indexes.M34] = -1.0;\r\n\r\n            dest[Indexes.OffsetX] = 0;\r\n            dest[Indexes.OffsetY] = 0;\r\n            dest[Indexes.OffsetZ] = zNearPlane * zFarPlane / d;\r\n            dest[Indexes.M44] = 0.0;\r\n\r\n            return dest;\r\n        },\r\n        createViewport (width: number, height: number, dest?: number[]): number[] {\r\n            if (!dest) dest = mat4.create();\r\n\r\n            dest[Indexes.M11] = width / 2.0;\r\n            dest[Indexes.M12] = 0;\r\n            dest[Indexes.M13] = 0;\r\n            dest[Indexes.M14] = 0;\r\n\r\n            dest[Indexes.M21] = 0;\r\n            dest[Indexes.M22] = -height / 2.0;\r\n            dest[Indexes.M23] = 0;\r\n            dest[Indexes.M24] = 0;\r\n\r\n            dest[Indexes.M31] = 0;\r\n            dest[Indexes.M32] = 0;\r\n            dest[Indexes.M33] = 1;\r\n            dest[Indexes.M34] = 0;\r\n\r\n            dest[Indexes.OffsetX] = width / 2.0;\r\n            dest[Indexes.OffsetY] = height / 2.0;\r\n            dest[Indexes.OffsetZ] = 0;\r\n            dest[Indexes.M44] = 1;\r\n\r\n            return dest;\r\n        }\r\n    };\r\n}\r\n\r\nvar mat4 = minerva.mat4;","/// <reference path=\"../Rect\" />\r\n\r\nmodule minerva {\r\n    Rect.transform4 = function (dest: Rect, projection: number[]) {\r\n        console.warn(\"[Rect.transform4] Not implemented\");\r\n        /*\r\n        if (!projection)\r\n            return;\r\n\r\n        var x = dest.x;\r\n        var y = dest.y;\r\n        var width = dest.width;\r\n        var height = dest.height;\r\n\r\n        var p1 = vec4.create(x, y, 0.0, 1.0);\r\n        var p2 = vec4.create(x + width, y, 0.0, 1.0);\r\n        var p3 = vec4.create(x + width, y + height, 0.0, 1.0);\r\n        var p4 = vec4.create(x, y + height, 0.0, 1.0);\r\n\r\n        mat4.transformVec4(projection, p1);\r\n        mat4.transformVec4(projection, p2);\r\n        mat4.transformVec4(projection, p3);\r\n        mat4.transformVec4(projection, p4);\r\n\r\n        var vs = 65536.0;\r\n        var vsr = 1.0 / vs;\r\n        p1[0] *= vsr;\r\n        p1[1] *= vsr;\r\n        p2[0] *= vsr;\r\n        p2[1] *= vsr;\r\n        p3[0] *= vsr;\r\n        p3[1] *= vsr;\r\n        p4[0] *= vsr;\r\n        p4[1] *= vsr;\r\n\r\n        var cm1 = clipmask(p1);\r\n        var cm2 = clipmask(p2);\r\n        var cm3 = clipmask(p3);\r\n        var cm4 = clipmask(p4);\r\n\r\n        if ((cm1 | cm2 | cm3 | cm4) !== 0) {\r\n            if ((cm1 & cm2 & cm3 & cm4) === 0) {\r\n                dest.x = dest.y = dest.width = dest.height = 0;\r\n                //TODO: Implement\r\n                //var r1 = Matrix3D._ClipToBounds(p1, p2, p3, cm1 | cm2 | cm3);\r\n                //var r2 = Matrix3D._ClipToBounds(p1, p3, p4, cm1 | cm3 | cm4);\r\n                //if (!r1.IsEmpty()) rect.union(dest, r1);\r\n                //if (!r2.IsEmpty()) rect.union(dest, r2);\r\n            }\r\n        } else {\r\n            var p1w = 1.0 / p1[3];\r\n            var p2w = 1.0 / p2[3];\r\n            var p3w = 1.0 / p3[3];\r\n            var p4w = 1.0 / p4[3];\r\n            p1[0] *= p1w * vs;\r\n            p1[1] *= p1w * vs;\r\n            p2[0] *= p2w * vs;\r\n            p2[1] *= p2w * vs;\r\n            p3[0] *= p3w * vs;\r\n            p3[1] *= p3w * vs;\r\n            p4[0] *= p4w * vs;\r\n            p4[1] *= p4w * vs;\r\n\r\n            dest.x = p1[0];\r\n            dest.y = p1[1];\r\n            dest.width = 0;\r\n            dest.height = 0;\r\n            Rect.extendTo(dest, p2[0], p2[1]);\r\n            Rect.extendTo(dest, p3[0], p3[1]);\r\n            Rect.extendTo(dest, p4[0], p4[1]);\r\n        }\r\n        */\r\n    };\r\n\r\n    function clipmask (clip: number[]): number {\r\n        var mask = 0;\r\n\r\n        if (-clip[0] + clip[3] < 0) mask |= (1 << 0);\r\n        if (clip[0] + clip[3] < 0) mask |= (1 << 1);\r\n        if (-clip[1] + clip[3] < 0) mask |= (1 << 2);\r\n        if (clip[1] + clip[3] < 0) mask |= (1 << 3);\r\n        if (clip[2] + clip[3] < 0) mask |= (1 << 4);\r\n        if (-clip[2] + clip[3] < 0) mask |= (1 << 5);\r\n\r\n        return mask;\r\n    }\r\n}","interface IVector4Static {\r\n    create(x: number, y: number, z: number, w: number): number[];\r\n    init(x: number, y: number, z: number, w: number, dest?: number[]): number[];\r\n}\r\nmodule minerva {\r\n    var createTypedArray: (length: number) => number[];\r\n\r\n    if (typeof Float32Array !== \"undefined\") {\r\n        createTypedArray = function (length: number): number[] {\r\n            return <number[]><any>new Float32Array(length);\r\n        };\r\n    } else {\r\n        createTypedArray = function (length: number): number[] {\r\n            return <number[]>new Array(length);\r\n        };\r\n    }\r\n\r\n    export var vec4: IVector4Static = {\r\n        create (x: number, y: number, z: number, w: number): number[] {\r\n            var dest = createTypedArray(4);\r\n            dest[0] = x;\r\n            dest[1] = y;\r\n            dest[2] = z;\r\n            dest[3] = w;\r\n            return dest;\r\n        },\r\n        init (x: number, y: number, z: number, w: number, dest?: number[]): number[] {\r\n            if (!dest) dest = createTypedArray(4);\r\n            dest[0] = x;\r\n            dest[1] = y;\r\n            dest[2] = z;\r\n            dest[3] = w;\r\n            return dest;\r\n        }\r\n    };\r\n}\r\n\r\nvar vec4 = minerva.vec4;","module minerva.path {\r\n    //TODO: Optimize to work similar to Rect, Size\r\n    export class Path {\r\n        private $$entries: IPathSegment[] = [];\r\n        private $$endX = 0.0;\r\n        private $$endY = 0.0;\r\n\r\n        get endX (): number {\r\n            return this.$$endX;\r\n        }\r\n\r\n        get endY (): number {\r\n            return this.$$endY;\r\n        }\r\n\r\n        reset () {\r\n            this.$$entries.length = 0;\r\n            this.$$endX = 0;\r\n            this.$$endY = 0;\r\n        }\r\n\r\n        move (x: number, y: number) {\r\n            this.$$entries.push(segments.move(x, y));\r\n            this.$$endX = x;\r\n            this.$$endY = y;\r\n        }\r\n\r\n        line (x: number, y: number) {\r\n            this.$$entries.push(segments.line(x, y));\r\n            this.$$endX = x;\r\n            this.$$endY = y;\r\n        }\r\n\r\n        quadraticBezier (cpx: number, cpy: number, x: number, y: number) {\r\n            this.$$entries.push(segments.quadraticBezier(cpx, cpy, x, y));\r\n            this.$$endX = x;\r\n            this.$$endY = y;\r\n        }\r\n\r\n        cubicBezier (cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number) {\r\n            this.$$entries.push(segments.cubicBezier(cp1x, cp1y, cp2x, cp2y, x, y));\r\n            this.$$endX = x;\r\n            this.$$endY = y;\r\n        }\r\n\r\n        ellipse (x: number, y: number, width: number, height: number) {\r\n            this.$$entries.push(segments.ellipse(x, y, width, height));\r\n            this.$$endX = x;\r\n            this.$$endY = y;\r\n        }\r\n\r\n        ellipticalArc (rx: number, ry: number, rotationAngle: number, isLargeArcFlag: boolean, sweepDirectionFlag: SweepDirection, ex: number, ey: number) {\r\n            this.$$entries.push(segments.ellipticalArc(rx, ry, rotationAngle, isLargeArcFlag, sweepDirectionFlag, ex, ey));\r\n            this.$$endX = ex;\r\n            this.$$endY = ey;\r\n        }\r\n\r\n        arc (x: number, y: number, r: number, sAngle: number, eAngle: number, aClockwise: boolean) {\r\n            this.$$entries.push(segments.arc(x, y, r, sAngle, eAngle, aClockwise));\r\n        }\r\n\r\n        arcTo (cpx: number, cpy: number, x: number, y: number, radius: number) {\r\n            var arcto = segments.arcTo(cpx, cpy, x, y, radius);\r\n            this.$$entries.push(arcto);\r\n            this.$$endX = arcto.ex;\r\n            this.$$endY = arcto.ey;\r\n        }\r\n\r\n        rect (x: number, y: number, width: number, height: number) {\r\n            this.$$entries.push(segments.rect(x, y, width, height));\r\n        }\r\n\r\n        roundedRect (x: number, y: number, width: number, height: number, radiusX: number, radiusY: number) {\r\n            this.$$entries.push(segments.roundedRect(x, y, width, height, radiusX, radiusY));\r\n            this.$$endX = x;\r\n            this.$$endY = y;\r\n        }\r\n\r\n        close () {\r\n            this.$$entries.push(segments.close());\r\n        }\r\n\r\n        draw (ctx: CanvasRenderingContext2D) {\r\n            ctx.beginPath();\r\n            var path = this.$$entries;\r\n            var len = path.length;\r\n            for (var i = 0; i < len; i++) {\r\n                path[i].draw(ctx);\r\n            }\r\n        }\r\n\r\n        calcBounds (pars?: IStrokeParameters): Rect {\r\n            if (this.$$entries.length <= 0)\r\n                return new Rect();\r\n            var box = pars && pars.strokeThickness > 1 ? this.$$calcStrokeBox(pars) : this.$$calcFillBox();\r\n            return new Rect(box.l, box.t, Math.max(0, box.r - box.l), Math.max(0, box.b - box.t));\r\n        }\r\n\r\n        private $$calcFillBox (): IBoundingBox {\r\n            var path = this.$$entries;\r\n            var len = path.length;\r\n            var box: IBoundingBox = {\r\n                l: Number.POSITIVE_INFINITY,\r\n                r: Number.NEGATIVE_INFINITY,\r\n                t: Number.POSITIVE_INFINITY,\r\n                b: Number.NEGATIVE_INFINITY\r\n            };\r\n            var curx = null;\r\n            var cury = null;\r\n            var entry: IPathSegment;\r\n            for (var i = 0; i < len; i++) {\r\n                entry = path[i];\r\n                entry.sx = curx;\r\n                entry.sy = cury;\r\n\r\n                entry.extendFillBox(box);\r\n\r\n                curx = entry.ex || 0;\r\n                cury = entry.ey || 0;\r\n            }\r\n            return box;\r\n        }\r\n\r\n        private $$calcStrokeBox (pars: IStrokeParameters): IBoundingBox {\r\n            var box: IBoundingBox = {\r\n                l: Number.POSITIVE_INFINITY,\r\n                r: Number.NEGATIVE_INFINITY,\r\n                t: Number.POSITIVE_INFINITY,\r\n                b: Number.NEGATIVE_INFINITY\r\n            };\r\n            processStrokedBounds(box, this.$$entries, pars);\r\n            return box;\r\n        }\r\n\r\n        static Merge (path1: Path, path2: Path) {\r\n            path1.$$entries.push.apply(path1.$$entries, path2.$$entries);\r\n            path1.$$endX += path2.$$endX;\r\n            path1.$$endY += path2.$$endY;\r\n        }\r\n\r\n        Serialize (): string {\r\n            var path = this.$$entries;\r\n            var len = path.length;\r\n            var s = \"\";\r\n            for (var i = 0; i < len; i++) {\r\n                if (i > 0) s += \" \";\r\n                s += path[i].toString();\r\n            }\r\n            return s;\r\n        }\r\n    }\r\n    function expandStartCap (box: IBoundingBox, entry: IPathSegment, pars: IStrokeParameters) {\r\n        var v: number[];\r\n        var hs = pars.strokeThickness / 2.0;\r\n        var cap = pars.strokeStartLineCap || pars.strokeEndLineCap || 0; //HTML5 doesn't support start and end cap\r\n        switch (cap) {\r\n            case PenLineCap.Round:\r\n                box.l = Math.min(box.l, entry.sx - hs);\r\n                box.r = Math.max(box.r, entry.sx + hs);\r\n                box.t = Math.min(box.t, entry.sy - hs);\r\n                box.b = Math.max(box.b, entry.sy + hs);\r\n                break;\r\n            case PenLineCap.Square:\r\n                if (!(v = entry.getStartVector())) return;\r\n                if (!v[0] || !v[1]) return;\r\n                var sd = Vector.reverse(Vector.normalize(v.slice(0)));\r\n                var sdo = Vector.orthogonal(sd.slice(0));\r\n\r\n                var x1 = entry.sx + hs * (sd[0] + sdo[0]);\r\n                var x2 = entry.sx + hs * (sd[0] - sdo[0]);\r\n                var y1 = entry.sy + hs * (sd[1] + sdo[1]);\r\n                var y2 = entry.sy + hs * (sd[1] - sdo[1]);\r\n\r\n                box.l = Math.min(box.l, x1, x2);\r\n                box.r = Math.max(box.r, x1, x2);\r\n                box.t = Math.min(box.t, y1, y2);\r\n                box.b = Math.max(box.b, y1, y2);\r\n                break;\r\n            case PenLineCap.Flat:\r\n            default:\r\n                if (!(v = entry.getStartVector())) return;\r\n                if (!v[0] || !v[1]) return;\r\n                var sdo = Vector.orthogonal(Vector.normalize(v.slice(0)));\r\n\r\n                var x1 = entry.sx + hs * sdo[0];\r\n                var x2 = entry.sx + hs * -sdo[0];\r\n                var y1 = entry.sy + hs * sdo[1];\r\n                var y2 = entry.sy + hs * -sdo[1];\r\n\r\n                box.l = Math.min(box.l, x1, x2);\r\n                box.r = Math.max(box.r, x1, x2);\r\n                box.t = Math.min(box.t, y1, y2);\r\n                box.b = Math.max(box.b, y1, y2);\r\n                break;\r\n        }\r\n    }\r\n\r\n    function expandEndCap (box: IBoundingBox, entry: IPathSegment, pars: IStrokeParameters) {\r\n        var ex = entry.ex;\r\n        var ey = entry.ey;\r\n\r\n        var v: number[];\r\n        var hs = pars.strokeThickness / 2.0;\r\n        var cap = pars.strokeStartLineCap || pars.strokeEndLineCap || 0; //HTML5 doesn't support start and end cap\r\n        switch (cap) {\r\n            case PenLineCap.Round:\r\n                box.l = Math.min(box.l, ex - hs);\r\n                box.r = Math.max(box.r, ex + hs);\r\n                box.t = Math.min(box.t, ey - hs);\r\n                box.b = Math.max(box.b, ey + hs);\r\n                break;\r\n            case PenLineCap.Square:\r\n                if (!(v = entry.getEndVector())) return;\r\n                if (!v[0] || !v[1]) return;\r\n                var ed = Vector.normalize(v.slice(0));\r\n                var edo = Vector.orthogonal(ed.slice(0));\r\n\r\n                var x1 = ex + hs * (ed[0] + edo[0]);\r\n                var x2 = ex + hs * (ed[0] - edo[0]);\r\n                var y1 = ey + hs * (ed[1] + edo[1]);\r\n                var y2 = ey + hs * (ed[1] - edo[1]);\r\n\r\n                box.l = Math.min(box.l, x1, x2);\r\n                box.r = Math.max(box.r, x1, x2);\r\n                box.t = Math.min(box.t, y1, y2);\r\n                box.b = Math.max(box.b, y1, y2);\r\n                break;\r\n            case PenLineCap.Flat:\r\n            default:\r\n                if (!(v = entry.getEndVector())) return;\r\n                if (!v[0] || !v[1]) return;\r\n                var edo = Vector.orthogonal(Vector.normalize(v.slice(0)));\r\n\r\n                var x1 = ex + hs * edo[0];\r\n                var x2 = ex + hs * -edo[0];\r\n                var y1 = ey + hs * edo[1];\r\n                var y2 = ey + hs * -edo[1];\r\n\r\n                box.l = Math.min(box.l, x1, x2);\r\n                box.r = Math.max(box.r, x1, x2);\r\n                box.t = Math.min(box.t, y1, y2);\r\n                box.b = Math.max(box.b, y1, y2);\r\n                break;\r\n        }\r\n    }\r\n\r\n    function expandLineJoin (box: IBoundingBox, previous: IPathSegment, entry: IPathSegment, pars: IStrokeParameters) {\r\n        var hs = pars.strokeThickness / 2.0;\r\n        if (pars.strokeLineJoin === PenLineJoin.Round) {\r\n            box.l = Math.min(box.l, entry.sx - hs);\r\n            box.r = Math.max(box.r, entry.sx + hs);\r\n            box.t = Math.min(box.t, entry.sy - hs);\r\n            box.b = Math.max(box.b, entry.sy + hs);\r\n        }\r\n        var tips = (pars.strokeLineJoin === PenLineJoin.Miter) ? findMiterTips(previous, entry, hs, pars.strokeMiterLimit) : findBevelTips(previous, entry, hs);\r\n        if (!tips)\r\n            return;\r\n        var x1 = tips[0].x;\r\n        var x2 = tips[1].x;\r\n        var y1 = tips[0].y;\r\n        var y2 = tips[1].y;\r\n        box.l = Math.min(box.l, x1, x2);\r\n        box.r = Math.max(box.r, x1, x2);\r\n        box.t = Math.min(box.t, y1, y2);\r\n        box.b = Math.max(box.b, y1, y2);\r\n    }\r\n\r\n    function processStrokedBounds (box: IBoundingBox, segs: IPathSegment[], pars: IStrokeParameters) {\r\n        var len = segs.length;\r\n        var last: IPathSegment = null;\r\n        var curx: number = null;\r\n        var cury: number = null;\r\n        var sx: number = null;\r\n        var sy: number = null;\r\n\r\n        var isLastEntryMove = false;\r\n\r\n        function processEntry (entry: IPathSegment, i: number) {\r\n            entry.sx = curx;\r\n            entry.sy = cury;\r\n\r\n            if (!entry.isSingle) {\r\n                if (!(<segments.IMove>entry).isMove && isLastEntryMove) {\r\n                    sx = entry.sx;\r\n                    sy = entry.sy;\r\n                    expandStartCap(box, entry, pars);\r\n                }\r\n                if (!isLastEntryMove && i > 0)\r\n                    expandLineJoin(box, last, entry, pars);\r\n            }\r\n\r\n            entry.extendStrokeBox(box, pars);\r\n\r\n            curx = entry.ex || 0;\r\n            cury = entry.ey || 0;\r\n            isLastEntryMove = !!(<segments.IMove>entry).isMove;\r\n            last = entry;\r\n        }\r\n\r\n        for (var i = 0; i < len; i++) {\r\n            processEntry(segs[i], i);\r\n        }\r\n        var end = segs[len - 1];\r\n        if (end && !end.isSingle)\r\n            expandEndCap(box, end, pars);\r\n    }\r\n\r\n    export function findMiterTips (previous: IPathSegment, entry: IPathSegment, hs: number, miterLimit: number) {\r\n        var x = entry.sx;\r\n        var y = entry.sy;\r\n\r\n        var av = previous.getEndVector();\r\n        var bv = entry.getStartVector();\r\n        if (!av || !bv)\r\n            return null;\r\n        Vector.reverse(av);\r\n        var tau = Vector.angleBetween(av, bv) / 2;\r\n        if (isNaN(tau))\r\n            return null;\r\n\r\n        var miterRatio = 1 / Math.sin(tau);\r\n        if (miterRatio > miterLimit)\r\n            return findBevelTips(previous, entry, hs);\r\n\r\n        //vector in direction of join point to miter tip\r\n        var cv = Vector.isClockwiseTo(av, bv) ? av.slice(0) : bv.slice(0);\r\n        Vector.normalize(Vector.reverse(Vector.rotate(cv, tau)));\r\n\r\n        //distance from join point and miter tip\r\n        var miterLen = hs * miterRatio;\r\n\r\n        var tip = {x: x + miterLen * cv[0], y: y + miterLen * cv[1]}\r\n        return [\r\n            tip,\r\n            tip\r\n        ];\r\n    }\r\n\r\n    export function findBevelTips (previous: IPathSegment, entry: IPathSegment, hs: number) {\r\n        var x = entry.sx;\r\n        var y = entry.sy;\r\n\r\n        var av = previous.getEndVector();\r\n        var bv = entry.getStartVector();\r\n        if (!av || !bv)\r\n            return;\r\n        Vector.normalize(Vector.reverse(av));\r\n        Vector.normalize(bv);\r\n        var avo: number[],\r\n            bvo: number[];\r\n        if (Vector.isClockwiseTo(av, bv)) {\r\n            avo = Vector.orthogonal(av.slice(0));\r\n            bvo = Vector.reverse(Vector.orthogonal(bv.slice(0)));\r\n        } else {\r\n            avo = Vector.reverse(Vector.orthogonal(av.slice(0)));\r\n            bvo = Vector.orthogonal(bv.slice(0));\r\n        }\r\n\r\n        return [\r\n            {x: x - hs * avo[0], y: y - hs * avo[1]},\r\n            {x: x - hs * bvo[0], y: y - hs * bvo[1]}\r\n        ];\r\n    }\r\n}","(function (context) {\r\n    if (!context.perfex) {\r\n        context.perfex = {};\r\n    }\r\n    if (!context.perfex.timer) {\r\n        context.perfex.timer = <any>{\r\n            all: [],\r\n            reset () {\r\n            },\r\n            start (tag: string) {\r\n            },\r\n            stop () {\r\n            }\r\n        };\r\n    }\r\n    if (!context.perfex.phases) {\r\n        context.perfex.phases = <any>{\r\n            current: null,\r\n            all: [],\r\n            start (tag: string) {\r\n            }\r\n        };\r\n    }\r\n})(window);","module minerva.text {\r\n    export interface IDocumentContext {\r\n        selectionStart: number;\r\n        selectionLength: number;\r\n        textWrapping: TextWrapping;\r\n        textAlignment: TextAlignment;\r\n        textTrimming: TextTrimming;\r\n        lineStackingStrategy: LineStackingStrategy;\r\n        lineHeight: number;\r\n    }\r\n    export interface IDocumentAssets {\r\n        availableWidth: number;\r\n        actualWidth: number;\r\n        actualHeight: number;\r\n        maxWidth: number;\r\n        maxHeight: number;\r\n        lines: layout.Line[];\r\n        selCached: boolean;\r\n    }\r\n\r\n    export interface IDocumentLayoutDef {\r\n        createAssets (): IDocumentAssets;\r\n        setMaxWidth (docctx: IDocumentContext, docassets: IDocumentAssets, width: number): boolean;\r\n        layout (docctx: IDocumentContext, docassets: IDocumentAssets, constraint: Size, walker: IWalker<text.TextUpdater>): boolean;\r\n        render (ctx: core.render.RenderContext, docctx: IDocumentContext, docassets: IDocumentAssets);\r\n        getCursorFromPoint (point: IPoint, docctx: IDocumentContext, docassets: IDocumentAssets): number;\r\n        getCaretFromCursor(docctx: IDocumentContext, docassets: IDocumentAssets): Rect;\r\n        getHorizontalAlignmentX (docctx: IDocumentContext, assets: IDocumentAssets, lineWidth: number): number;\r\n    }\r\n\r\n    export class DocumentLayoutDef implements IDocumentLayoutDef {\r\n        createAssets (): IDocumentAssets {\r\n            return {\r\n                availableWidth: Number.POSITIVE_INFINITY,\r\n                actualWidth: NaN,\r\n                actualHeight: NaN,\r\n                maxWidth: Number.POSITIVE_INFINITY,\r\n                maxHeight: Number.POSITIVE_INFINITY,\r\n                lines: [],\r\n                selCached: false\r\n            };\r\n        }\r\n\r\n        setMaxWidth (docctx: IDocumentContext, docassets: IDocumentAssets, width: number): boolean {\r\n            if (docassets.maxWidth === width)\r\n                return false;\r\n            docassets.maxWidth = width;\r\n            docassets.actualWidth = NaN;\r\n            docassets.actualHeight = NaN;\r\n            return true;\r\n        }\r\n\r\n        layout (docctx: IDocumentContext, docassets: IDocumentAssets, constraint: Size, walker: IWalker<text.TextUpdater>): boolean {\r\n            if (!isNaN(docassets.actualWidth))\r\n                return false;\r\n            docassets.maxWidth = constraint.width;\r\n\r\n            docassets.actualWidth = 0.0;\r\n            docassets.actualHeight = 0.0;\r\n            docassets.lines = [];\r\n            for (var offset = 0; walker.step();) {\r\n                offset += walker.current.layout(docctx, docassets);\r\n            }\r\n            return true;\r\n        }\r\n\r\n        render (ctx: core.render.RenderContext, docctx: IDocumentContext, docassets: IDocumentAssets) {\r\n            this.splitSelection(docctx, docassets);\r\n\r\n            ctx.save();\r\n            docassets.lines.forEach(line => {\r\n                var halign = this.getHorizontalAlignmentX(docctx, docassets, line.width);\r\n                ctx.translate(halign, 0);\r\n                line.runs.forEach(run => {\r\n                    if (run.pre) {\r\n                        layout.Cluster.render(run.pre, run.attrs, ctx);\r\n                        ctx.translate(run.pre.width, 0);\r\n                    }\r\n                    if (run.sel) {\r\n                        layout.Cluster.render(run.sel, run.attrs, ctx);\r\n                        ctx.translate(run.sel.width, 0);\r\n                    }\r\n                    if (run.post) {\r\n                        layout.Cluster.render(run.post, run.attrs, ctx);\r\n                        ctx.translate(run.post.width, 0);\r\n                    }\r\n                });\r\n                ctx.translate(-line.width - halign, line.height);\r\n            });\r\n            ctx.restore();\r\n        }\r\n\r\n        getCursorFromPoint (point: IPoint, docctx: IDocumentContext, docassets: IDocumentAssets): number {\r\n            var line = docassets.lines[0];\r\n            if (!line)\r\n                return 0;\r\n\r\n            //NOTE: Find line that contains point\r\n            var advance = 0;\r\n            if (point.y > 0) {\r\n                for (var cury = 0, lines = docassets.lines, i = 0, len = lines.length; i < len; i++) {\r\n                    line = lines[i];\r\n                    if (point.y <= (cury + line.height))\r\n                        break;\r\n                    advance += line.runs.reduce<number>((agg, r) => agg + r.length, 0);\r\n                    cury += line.height;\r\n                }\r\n            }\r\n\r\n            var px = point.x - this.getHorizontalAlignmentX(docctx, docassets, line.width);\r\n            if (px < 0)\r\n                return advance;\r\n\r\n            //NOTE: Find run that contains point\r\n            var curx = 0;\r\n            var i = 0;\r\n            for (var runs = line.runs, len = runs.length; i < len; i++) {\r\n                var run = runs[i];\r\n                if (px <= (curx + run.width))\r\n                    break;\r\n                advance += run.length;\r\n                curx += run.width;\r\n            }\r\n            var run = runs[i];\r\n            if (!run)\r\n                return advance;\r\n\r\n            //NOTE: Guess at cursor\r\n            var end = Math.max(0, Math.min(run.text.length, Math.ceil((px - curx) / run.width * run.text.length)));\r\n            var usedText = run.text.substr(0, end);\r\n            //NOTE: Move backward if width is right of point\r\n            var width: number;\r\n            while (end > 0 && (width = this.measureTextWidth(usedText, run.attrs.font)) > px) {\r\n                end--;\r\n                usedText = run.text.substr(0, end);\r\n            }\r\n            //NOTE: Move forward if width is left of point\r\n            var lastEnd = end;\r\n            while (end < run.text.length && (width = this.measureTextWidth(usedText, run.attrs.font)) < px) {\r\n                lastEnd = end;\r\n                end++;\r\n                usedText = run.text.substr(0, end);\r\n            }\r\n\r\n            return advance + lastEnd;\r\n        }\r\n\r\n        getCaretFromCursor (docctx: IDocumentContext, docassets: IDocumentAssets): Rect {\r\n            var cursor = docctx.selectionStart;\r\n            var advance = 0;\r\n            var cr = new Rect(0, 0, 1, 0);\r\n            var lastLineHeight = 0;\r\n            for (var lines = docassets.lines, i = 0, len = lines.length; i < len; i++) {\r\n                var line = lines[i];\r\n                cr.x = this.getHorizontalAlignmentX(docctx, docassets, line.width);\r\n                cr.height = line.height;\r\n                for (var runs = line.runs, j = 0, len2 = runs.length; j < len2; j++) {\r\n                    var run = runs[j];\r\n                    if ((advance + run.length) > cursor) {\r\n                        cr.x += this.measureTextWidth(run.text.substr(0, cursor - advance), run.attrs.font);\r\n                        return cr;\r\n                    }\r\n                    advance += run.length;\r\n                    cr.x += line.width;\r\n                }\r\n                cr.y += line.height;\r\n                lastLineHeight = line.height;\r\n            }\r\n            cr.y -= lastLineHeight;\r\n            return cr;\r\n        }\r\n\r\n        splitSelection (docctx: IDocumentContext, assets: IDocumentAssets) {\r\n            if (assets.selCached)\r\n                return;\r\n            var start = docctx.selectionStart;\r\n            assets.lines.forEach(line =>\r\n                line.runs.forEach(run => {\r\n                    layout.Run.splitSelection(run, start, start + docctx.selectionLength, (text, attrs) => this.measureTextWidth(text, attrs.font));\r\n                    start -= run.length;\r\n                }));\r\n            assets.selCached = true;\r\n        }\r\n\r\n        getHorizontalAlignmentX (docctx: IDocumentContext, assets: IDocumentAssets, lineWidth: number): number {\r\n            if (docctx.textAlignment === TextAlignment.Left || docctx.textAlignment === TextAlignment.Justify\r\n                || (docctx.textWrapping === TextWrapping.NoWrap && docctx.textTrimming !== TextTrimming.None))\r\n                return 0;\r\n            var width = getWidthConstraint(assets);\r\n            if (lineWidth >= width)\r\n                return 0;\r\n            if (docctx.textAlignment === TextAlignment.Center)\r\n                return (width - lineWidth) / 2.0;\r\n            return width - lineWidth;\r\n        }\r\n\r\n        measureTextWidth (text: string, font: Font): number {\r\n            return engine.Surface.measureWidth(text, font);\r\n        }\r\n    }\r\n\r\n    function getWidthConstraint (assets: IDocumentAssets): number {\r\n        if (isFinite(assets.availableWidth))\r\n            return assets.availableWidth;\r\n        if (!isFinite(assets.maxWidth))\r\n            return assets.actualWidth;\r\n        return Math.min(assets.actualWidth, assets.maxWidth);\r\n    }\r\n}","module minerva.text {\r\n    export interface IDocumentLayout<T extends IDocumentLayoutDef, TAssets extends IDocumentAssets> {\r\n        def: T;\r\n        assets: TAssets;\r\n    }\r\n\r\n    export function createDocumentLayout<T extends IDocumentLayoutDef, TAssets extends IDocumentAssets> (def: T): IDocumentLayout<T, TAssets> {\r\n        return {\r\n            def: def,\r\n            assets: <TAssets>def.createAssets()\r\n        };\r\n    }\r\n}","module minerva.text {\r\n    export interface ITextUpdaterAssets extends ITextAssets {\r\n        fontFamily: string;\r\n        fontSize: number;\r\n        fontStretch: string;\r\n        fontStyle: string;\r\n        fontWeight: FontWeight;\r\n        textDecorations: TextDecorations;\r\n        language: string;\r\n    }\r\n\r\n    export class TextUpdater {\r\n        assets: ITextUpdaterAssets = {\r\n            fontFamily: Font.DEFAULT_FAMILY,\r\n            fontSize: Font.DEFAULT_SIZE,\r\n            fontStretch: Font.DEFAULT_STRETCH,\r\n            fontStyle: Font.DEFAULT_STYLE,\r\n            fontWeight: Font.DEFAULT_WEIGHT,\r\n            textDecorations: TextDecorations.None,\r\n            language: \"\",\r\n            background: null,\r\n            selectionBackground: null,\r\n            foreground: null,\r\n            selectionForeground: null,\r\n            isUnderlined: false,\r\n            font: new Font(),\r\n            text: \"\"\r\n        };\r\n\r\n        private $$textlayout: ITextLayoutDef;\r\n\r\n        constructor () {\r\n            this.init();\r\n        }\r\n\r\n        init () {\r\n            this.setTextLayout();\r\n        }\r\n\r\n        /////// PREPARE TEXT LAYOUT\r\n\r\n        setTextLayout (tldef?: ITextLayoutDef): TextUpdater {\r\n            if (this.$$textlayout)\r\n                return this;\r\n            this.$$textlayout = tldef || new run.RunLayoutDef();\r\n            return this;\r\n        }\r\n\r\n        /////// TEXT LAYOUT\r\n\r\n        layout (docctx: IDocumentContext, docassets: IDocumentAssets): number {\r\n            this.$$textlayout.layout(docctx, docassets, this.assets);\r\n            return this.assets.text.length;\r\n        }\r\n\r\n        invalidateFont (): boolean {\r\n            var assets = this.assets;\r\n            return Font.mergeInto(assets.font, assets.fontFamily, assets.fontSize, assets.fontStretch, assets.fontStyle, assets.fontWeight);\r\n        }\r\n    }\r\n}","/// <reference path=\"../../core/measure/MeasurePipeDef\" />\r\n\r\nmodule minerva.anon.arrange {\r\n    export class AnonymousArrangePipeDef extends core.arrange.ArrangePipeDef {\r\n        constructor (upd: AnonymousUpdater) {\r\n            super();\r\n            this.replaceTapin('doOverride', (input: core.arrange.IInput, state: core.arrange.IState, output: core.arrange.IOutput, tree: core.IUpdaterTree, finalRect: Rect): boolean => {\r\n                var finalSize = new Size();\r\n                Size.copyTo(state.finalSize, finalSize);\r\n                var val = upd.arrangeOverride(finalSize);\r\n                Size.copyTo(val, state.arrangedSize);\r\n                return true;\r\n            });\r\n        }\r\n    }\r\n}","/// <reference path=\"../../core/measure/MeasurePipeDef\" />\r\n\r\nmodule minerva.anon.measure {\r\n    export class AnonymousMeasurePipeDef extends core.measure.MeasurePipeDef {\r\n        constructor (upd: AnonymousUpdater) {\r\n            super();\r\n            this.replaceTapin('doOverride', (input: core.measure.IInput, state: core.measure.IState, output: core.measure.IOutput, tree: core.IUpdaterTree, availableSize: Size): boolean => {\r\n                var availableSize = new Size();\r\n                Size.copyTo(state.availableSize, availableSize);\r\n                var val = upd.measureOverride(availableSize);\r\n                Size.copyTo(val, output.desiredSize);\r\n                return true;\r\n            });\r\n        }\r\n    }\r\n}","/// <reference path=\"../../core/Updater\" />\r\n\r\nmodule minerva.controls.border {\r\n    export interface IBorderUpdaterAssets extends core.IUpdaterAssets, measure.IInput, arrange.IInput, render.IInput {\r\n    }\r\n\r\n    export class BorderUpdater extends core.Updater {\r\n        tree: BorderUpdaterTree;\r\n        assets: IBorderUpdaterAssets;\r\n\r\n        init () {\r\n            this.setTree(new BorderUpdaterTree())\r\n                .setMeasurePipe(singleton(measure.BorderMeasurePipeDef))\r\n                .setArrangePipe(singleton(arrange.BorderArrangePipeDef))\r\n                .setRenderPipe(singleton(core.render.RenderContext.hasFillRule ? render.BorderRenderPipeDef : render.ShimBorderRenderPipeDef))\r\n                .setHitTestPipe(singleton(hittest.BorderHitTestPipeDef));\r\n\r\n            var assets = this.assets;\r\n            assets.padding = new Thickness();\r\n            assets.borderThickness = new Thickness();\r\n            assets.cornerRadius = new CornerRadius();\r\n\r\n            super.init();\r\n        }\r\n    }\r\n}","/// <reference path=\"../../core/UpdaterTree\" />\r\n\r\nmodule minerva.controls.border {\r\n    export class BorderUpdaterTree extends core.UpdaterTree {\r\n        isLayoutContainer = true;\r\n        isContainer = true;\r\n\r\n        walk (direction?: WalkDirection): IWalker<core.Updater> {\r\n            var visited = false;\r\n            var _this = this;\r\n            return {\r\n                current: undefined,\r\n                step: function (): boolean {\r\n                    this.current = !visited ? _this.subtree : undefined;\r\n                    visited = true;\r\n                    return this.current != null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","module minerva.controls.panel {\r\n    export interface IPanelUpdaterAssets extends core.IUpdaterAssets, measure.IInput, arrange.IInput, processup.IInput, render.IInput {\r\n    }\r\n\r\n    export class PanelUpdater extends core.Updater {\r\n        assets: IPanelUpdaterAssets;\r\n        tree: PanelUpdaterTree;\r\n\r\n        init () {\r\n            var assets = this.assets;\r\n            assets.background = null;\r\n\r\n            this.setTree(new PanelUpdaterTree())\r\n                .setMeasurePipe(singleton(measure.PanelMeasurePipeDef))\r\n                .setArrangePipe(singleton(arrange.PanelArrangePipeDef))\r\n                .setProcessUpPipe(singleton(processup.PanelProcessUpPipeDef))\r\n                .setRenderPipe(singleton(render.PanelRenderPipeDef))\r\n                .setHitTestPipe(singleton(hittest.PanelHitTestPipeDef));\r\n            super.init();\r\n        }\r\n\r\n        setChildren (children: core.Updater[]): PanelUpdater {\r\n            this.tree.children = children;\r\n            return this;\r\n        }\r\n    }\r\n\r\n    export module reactTo {\r\n        export function zIndex (updater: core.Updater, oldValue: number, newValue: number) {\r\n            var vp = <PanelUpdater>updater.tree.visualParent;\r\n            if (vp)\r\n                vp.tree.zSorted = null;\r\n        }\r\n    }\r\n}","/// <reference path=\"../panel/PanelUpdater\" />\r\n\r\nmodule minerva.controls.canvas {\r\n    export interface ICanvasUpdaterAssets extends panel.IPanelUpdaterAssets, measure.IInput {\r\n    }\r\n\r\n    export class CanvasUpdater extends panel.PanelUpdater {\r\n        assets: ICanvasUpdaterAssets;\r\n\r\n        init() {\r\n            this.setMeasurePipe(singleton(measure.CanvasMeasurePipeDef))\r\n                .setArrangePipe(singleton(arrange.CanvasArrangePipeDef))\r\n                .setProcessDownPipe(singleton(processdown.CanvasProcessDownPipeDef))\r\n                .setProcessUpPipe(singleton(processup.CanvasProcessUpPipeDef));\r\n\r\n            var assets = this.assets;\r\n            assets.breakLayoutClip = true;\r\n\r\n            super.init();\r\n        }\r\n    }\r\n    export module reactTo {\r\n        export function left(updater: core.Updater, oldValue: number, newValue: number) {\r\n            invalidateTopLeft(updater);\r\n        }\r\n\r\n        export function top(updater: core.Updater, oldValue: number, newValue: number) {\r\n            invalidateTopLeft(updater);\r\n        }\r\n\r\n        function invalidateTopLeft(updater: core.Updater) {\r\n            var vp = updater.tree.visualParent;\r\n            if (updater instanceof CanvasUpdater && !vp) {\r\n                updater.assets.dirtyFlags |= DirtyFlags.LocalTransform;\r\n                minerva.core.Updater.$$addDownDirty(updater);\r\n                updater.invalidateArrange();\r\n            }\r\n\r\n            if (!(vp instanceof CanvasUpdater))\r\n                return;\r\n\r\n            var ls = updater.assets.layoutSlot;\r\n            minerva.Size.copyTo(updater.assets.desiredSize, ls);\r\n            //Coerce NaN, null, undefined to 0\r\n            ls.x = updater.getAttachedValue(\"Canvas.Left\") || 0;\r\n            ls.y = updater.getAttachedValue(\"Canvas.Top\") || 0;\r\n            if (updater.assets.useLayoutRounding) {\r\n                ls.x = Math.round(ls.x);\r\n                ls.y = Math.round(ls.y);\r\n                ls.width = Math.round(ls.width);\r\n                ls.height = Math.round(ls.height);\r\n            }\r\n            updater.invalidateArrange();\r\n        }\r\n    }\r\n}","module minerva.controls.control {\r\n    export interface IControlUpdaterAssets extends core.IUpdaterAssets {\r\n        isEnabled: boolean;\r\n    }\r\n\r\n    export class ControlUpdater extends core.Updater {\r\n        assets: IControlUpdaterAssets;\r\n\r\n        init () {\r\n            this.setTree(new ControlUpdaterTree())\r\n                .setHitTestPipe(singleton(hittest.ControlHitTestPipeDef));\r\n\r\n            this.assets.isEnabled = true;\r\n\r\n            super.init();\r\n        }\r\n    }\r\n}","module minerva.controls.control {\r\n    export class ControlUpdaterTree extends core.UpdaterTree {\r\n        constructor() {\r\n            super();\r\n            this.isContainer = true;\r\n            this.isLayoutContainer = true;\r\n        }\r\n    }\r\n}","module minerva.controls.grid {\r\n    export interface IGridUpdaterAssets extends panel.IPanelUpdaterAssets, measure.IInput, arrange.IInput, render.IInput {\r\n        gridState: IGridState;\r\n    }\r\n\r\n    export class GridUpdater extends panel.PanelUpdater {\r\n        assets: IGridUpdaterAssets;\r\n\r\n        init () {\r\n            this.setMeasurePipe(singleton(measure.GridMeasurePipeDef))\r\n                .setArrangePipe(singleton(arrange.GridArrangePipeDef))\r\n                .setProcessUpPipe(singleton(processup.GridProcessUpPipeDef))\r\n                .setRenderPipe(singleton(render.GridRenderPipeDef));\r\n\r\n            var assets = this.assets;\r\n            assets.showGridLines = false;\r\n            assets.columnDefinitions = [];\r\n            assets.rowDefinitions = [];\r\n            assets.gridState = createGridState();\r\n\r\n            super.init();\r\n        }\r\n    }\r\n\r\n    export module reactTo {\r\n        function invalidateCell (updater: core.Updater) {\r\n            var vp = updater.tree.visualParent;\r\n            if (vp instanceof GridUpdater)\r\n                vp.invalidateMeasure();\r\n            updater.invalidateMeasure();\r\n        }\r\n\r\n        export function showGridLines (updater: GridUpdater, ov: boolean, nv: boolean) {\r\n            updater.invalidateMeasure();\r\n            updater.invalidate();\r\n        }\r\n\r\n        export function column (updater: core.Updater, ov: number, nv: number) {\r\n            invalidateCell(updater);\r\n        }\r\n\r\n        export function columnSpan (updater: core.Updater, ov: number, nv: number) {\r\n            invalidateCell(updater);\r\n        }\r\n\r\n        export function row (updater: core.Updater, ov: number, nv: number) {\r\n            invalidateCell(updater);\r\n        }\r\n\r\n        export function rowSpan (updater: core.Updater, ov: number, nv: number) {\r\n            invalidateCell(updater);\r\n        }\r\n    }\r\n}","module minerva.controls.grid {\r\n    export interface IGridState {\r\n        rowMatrix: Segment[][];\r\n        colMatrix: Segment[][];\r\n    }\r\n\r\n    export function createGridState (): IGridState {\r\n        return {\r\n            rowMatrix: [],\r\n            colMatrix: []\r\n        };\r\n    }\r\n}","module minerva.controls.grid {\r\n    export class Segment {\r\n        desired: number = 0.0;\r\n        offered: number = 0.0;\r\n        original: number = 0.0;\r\n        min: number = 0.0;\r\n        max: number = Number.POSITIVE_INFINITY;\r\n        stars: number = 0;\r\n        type =  GridUnitType.Pixel;\r\n\r\n        clamp (value: number): number {\r\n            if (value < this.min)\r\n                return this.min;\r\n            if (value > this.max)\r\n                return this.max;\r\n            return value;\r\n        }\r\n\r\n        static init (segment: Segment, offered?: number, min?: number, max?: number, unitType?: GridUnitType): Segment {\r\n            segment.desired = 0.0;\r\n            segment.stars = 0;\r\n            segment.offered = offered || 0.0;\r\n            segment.min = min || 0.0;\r\n            segment.max = max != null ? max : Number.POSITIVE_INFINITY;\r\n            segment.type = unitType != null ? unitType : GridUnitType.Pixel;\r\n\r\n            if (segment.offered < min)\r\n                segment.offered = min;\r\n            else if (segment.offered > max)\r\n                segment.offered = max;\r\n\r\n            return segment;\r\n        }\r\n    }\r\n}","module minerva.controls.image {\r\n    export interface IImageUpdaterAssets extends core.IUpdaterAssets, measure.IInput, arrange.IInput, processdown.IInput, render.IInput {\r\n    }\r\n\r\n    export class ImageUpdater extends core.Updater {\r\n        assets: IImageUpdaterAssets;\r\n\r\n        init () {\r\n            this.setMeasurePipe(singleton(measure.ImageMeasurePipeDef))\r\n                .setArrangePipe(singleton(arrange.ImageArrangePipeDef))\r\n                .setProcessDownPipe(singleton(processdown.ImageProcessDownPipeDef))\r\n                .setRenderPipe(singleton(render.ImageRenderPipeDef))\r\n                .setHitTestPipe(singleton(hittest.ImageHitTestPipeDef));\r\n\r\n            var assets = this.assets;\r\n            assets.source = null;\r\n            assets.stretch = Stretch.Uniform;\r\n            assets.overlap = RectOverlap.In;\r\n            assets.imgXform = mat3.identity();\r\n\r\n            super.init();\r\n        }\r\n\r\n        invalidateMetrics (): ImageUpdater {\r\n            this.assets.dirtyFlags |= DirtyFlags.ImageMetrics;\r\n            core.Updater.$$addDownDirty(this);\r\n            return this;\r\n        }\r\n    }\r\n}","module minerva.controls.overlay {\r\n    export interface IOverlayUpdaterAssets extends core.IUpdaterAssets {\r\n        isVisible: boolean;\r\n        isOpen: boolean;\r\n    }\r\n\r\n    export class OverlayUpdater extends core.Updater {\r\n        assets: IOverlayUpdaterAssets;\r\n        tree: OverlayUpdaterTree;\r\n\r\n        init () {\r\n            this.setTree(new OverlayUpdaterTree())\r\n                .setProcessUpPipe(singleton(processup.OverlayProcessUpPipeDef))\r\n                .setHitTestPipe(singleton(hittest.OverlayHitTestPipeDef));\r\n\r\n            var assets = this.assets;\r\n            assets.isVisible = false;\r\n            assets.isOpen = false;\r\n\r\n            super.init();\r\n        }\r\n\r\n        setInitiator (initiator: core.Updater) {\r\n            this.tree.initiatorSurface = initiator.tree.surface;\r\n        }\r\n\r\n        setLayer (layer: core.Updater) {\r\n            this.hide();\r\n            this.tree.layer = layer;\r\n            if (this.assets.isOpen)\r\n                this.show();\r\n        }\r\n\r\n        hide (): boolean {\r\n            var layer = this.tree.layer;\r\n            if (!this.assets.isVisible || !layer)\r\n                return false;\r\n            this.assets.isVisible = false;\r\n            var surface = this.tree.initiatorSurface;\r\n            if (!surface)\r\n                return false;\r\n            surface.detachLayer(layer);\r\n            return true;\r\n        }\r\n\r\n        show (): boolean {\r\n            var layer = this.tree.layer;\r\n            if (this.assets.isVisible || !layer)\r\n                return false;\r\n            this.assets.isVisible = true;\r\n            var surface = this.tree.initiatorSurface;\r\n            if (!surface)\r\n                return false;\r\n            surface.attachLayer(layer);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    export module reactTo {\r\n        export function isOpen (updater: OverlayUpdater, oldValue: boolean, newValue: boolean) {\r\n            (newValue === true) ? updater.show() : updater.hide();\r\n        }\r\n    }\r\n}","/// <reference path=\"../../core/UpdaterTree\" />\r\n\r\nmodule minerva.controls.overlay {\r\n    export class OverlayUpdaterTree extends core.UpdaterTree {\r\n        layer: core.Updater = undefined; //Root layer that will be attached to the surface\r\n        initiatorSurface: core.ISurface = undefined;\r\n    }\r\n}","module minerva.controls.panel {\r\n    export class PanelUpdaterTree extends core.UpdaterTree {\r\n        children: core.Updater[] = null;\r\n        zSorted: core.Updater[] = null;\r\n\r\n        constructor () {\r\n            super();\r\n            this.isContainer = true;\r\n            this.isLayoutContainer = true;\r\n        }\r\n\r\n        walk (direction?: WalkDirection): IWalker<core.Updater> {\r\n            if (direction === WalkDirection.ZForward || direction === WalkDirection.ZReverse) {\r\n                this.zSort();\r\n                return walkArray(this.zSorted, direction === WalkDirection.ZReverse);\r\n            }\r\n            return walkArray(this.children, direction === WalkDirection.Reverse);\r\n        }\r\n\r\n        zSort () {\r\n            var zs = this.zSorted;\r\n            if (zs) //NOTE: zSorted = null when invalidated\r\n                return;\r\n            zs = this.zSorted = [];\r\n            for (var i = 0, walker = this.walk(); walker.step(); i++) {\r\n                var cur = walker.current;\r\n                cur.setAttachedValue(\"Panel.Index\", i);\r\n                zs.push(cur);\r\n            }\r\n            zs.sort(zIndexComparer);\r\n        }\r\n\r\n        onChildAttached (child: core.Updater) {\r\n            this.zSorted = null;\r\n        }\r\n\r\n        onChildDetached (child: core.Updater) {\r\n            this.zSorted = null;\r\n        }\r\n    }\r\n\r\n    function walkArray<T extends core.Updater>(arr: T[], reverse: boolean): IWalker<core.Updater> {\r\n        var len = arr.length;\r\n        var e = <IWalker<T>>{step: undefined, current: undefined};\r\n        var index;\r\n        if (reverse) {\r\n            index = len;\r\n            e.step = function () {\r\n                index--;\r\n                if (index < 0) {\r\n                    e.current = undefined;\r\n                    return false;\r\n                }\r\n                e.current = arr[index];\r\n                return true;\r\n            };\r\n        } else {\r\n            index = -1;\r\n            e.step = function () {\r\n                index++;\r\n                if (index >= len) {\r\n                    e.current = undefined;\r\n                    return false;\r\n                }\r\n                e.current = arr[index];\r\n                return true;\r\n            };\r\n        }\r\n        return e;\r\n    }\r\n\r\n    function zIndexComparer (upd1: core.Updater, upd2: core.Updater): number {\r\n        var zi1 = upd1.getAttachedValue(\"Panel.ZIndex\");\r\n        var zi2 = upd2.getAttachedValue(\"Panel.ZIndex\");\r\n        if (zi1 == null && zi2 == null) {\r\n            zi1 = upd1.getAttachedValue(\"Panel.Index\");\r\n            zi2 = upd2.getAttachedValue(\"Panel.Index\");\r\n        } else if (zi1 == null) {\r\n            return zi2 > 0 ? -1 : 1;\r\n        } else if (zi2 == null) {\r\n            return zi1 > 0 ? 1 : -1;\r\n        }\r\n        return zi1 === zi2 ? 0 : ((zi1 < zi2) ? -1 : 1);\r\n    }\r\n}","module minerva.controls.popup {\r\n    export interface IPopupUpdaterAssets extends core.IUpdaterAssets, processdown.IInput {\r\n        isVisible: boolean;\r\n        isOpen: boolean;\r\n    }\r\n\r\n    export class PopupUpdater extends core.Updater {\r\n        assets: IPopupUpdaterAssets;\r\n        tree: PopupUpdaterTree;\r\n\r\n        init () {\r\n            this.setTree(new PopupUpdaterTree())\r\n                .setProcessDownPipe(singleton(processdown.PopupProcessDownPipeDef))\r\n                .setProcessUpPipe(singleton(processup.PopupProcessUpPipeDef))\r\n                .setHitTestPipe(singleton(hittest.PopupHitTestPipeDef));\r\n\r\n            var assets = this.assets;\r\n            assets.horizontalOffset = 0;\r\n            assets.verticalOffset = 0;\r\n            assets.isVisible = false;\r\n            assets.isOpen = false;\r\n\r\n            super.init();\r\n        }\r\n\r\n        setInitiator (initiator: core.Updater) {\r\n            this.tree.initiatorSurface = initiator.tree.surface;\r\n        }\r\n\r\n        setChild (child: core.Updater) {\r\n            var old = this.tree.popupChild;\r\n            if (old) {\r\n                old.assets.carrierXform = null;\r\n            }\r\n            this.tree.popupChild = child;\r\n            if (child) {\r\n                child.assets.carrierXform = mat3.identity();\r\n            }\r\n        }\r\n\r\n        setLayer (layer: core.Updater) {\r\n            this.hide();\r\n            this.tree.layer = layer;\r\n            if (this.assets.isOpen)\r\n                this.show();\r\n        }\r\n\r\n        hide (): boolean {\r\n            var layer = this.tree.layer;\r\n            if (!this.assets.isVisible || !layer)\r\n                return false;\r\n            this.assets.isVisible = false;\r\n            var surface = this.tree.initiatorSurface;\r\n            if (!surface)\r\n                return false;\r\n            surface.detachLayer(layer);\r\n            return true;\r\n        }\r\n\r\n        show (): boolean {\r\n            var layer = this.tree.layer;\r\n            if (this.assets.isVisible || !layer)\r\n                return false;\r\n            this.assets.isVisible = true;\r\n            var surface = this.tree.initiatorSurface;\r\n            if (!surface)\r\n                return false;\r\n            surface.attachLayer(layer);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    export module reactTo {\r\n        export function isOpen (updater: PopupUpdater, oldValue: boolean, newValue: boolean) {\r\n            (newValue === true) ? updater.show() : updater.hide();\r\n        }\r\n\r\n        export function horizontalOffset (updater: PopupUpdater, oldValue: number, newValue: number) {\r\n            var tree = updater.tree;\r\n            var child = tree.popupChild;\r\n            if (!child)\r\n                return;\r\n            var tweenX = newValue - oldValue;\r\n            if (tweenX === 0)\r\n                return;\r\n            tweenOffset(child, tweenX, 0);\r\n            if (tree.layer)\r\n                tree.layer.invalidateMeasure();\r\n        }\r\n\r\n        export function verticalOffset (updater: PopupUpdater, oldValue: number, newValue: number) {\r\n            var tree = updater.tree;\r\n            var child = tree.popupChild;\r\n            if (!child)\r\n                return;\r\n            var tweenY = newValue - oldValue;\r\n            if (tweenY === 0)\r\n                return;\r\n            tweenOffset(child, 0, tweenY);\r\n            if (tree.layer)\r\n                tree.layer.invalidateMeasure();\r\n        }\r\n\r\n        function tweenOffset (child: core.Updater, tweenX: number, tweenY: number) {\r\n            if (child.assets.carrierXform) {\r\n                mat3.translate(child.assets.carrierXform, tweenX, tweenY);\r\n            }\r\n        }\r\n    }\r\n}","/// <reference path=\"../../core/UpdaterTree\" />\r\n\r\nmodule minerva.controls.popup {\r\n    export class PopupUpdaterTree extends core.UpdaterTree {\r\n        popupChild: core.Updater = undefined; //`Popup`.`Child` that will be a child of `layer`\r\n        layer: core.Updater = undefined; //Root layer that will be attached to the surface\r\n        initiatorSurface: core.ISurface = undefined;\r\n    }\r\n}","module minerva.controls.scrollcontentpresenter {\r\n    export interface IScrollContentPresenterUpdaterAssets extends core.IUpdaterAssets, measure.IInput, arrange.IInput, render.IInput {\r\n    }\r\n\r\n    export class ScrollContentPresenterUpdater extends core.Updater {\r\n        assets: IScrollContentPresenterUpdaterAssets;\r\n\r\n        init () {\r\n            this.setMeasurePipe(singleton(measure.ScrollContentPresenterMeasurePipeDef))\r\n                .setArrangePipe(singleton(arrange.ScrollContentPresenterArrangePipeDef))\r\n                .setRenderPipe(singleton(render.ScrollContentPresenterRenderPipeDef));\r\n\r\n            var assets = this.assets;\r\n            assets.internalClip = new Rect();\r\n            assets.scrollData = {\r\n                canHorizontallyScroll: false,\r\n                canVerticallyScroll: false,\r\n                offsetX: 0,\r\n                offsetY: 0,\r\n                cachedOffsetX: 0,\r\n                cachedOffsetY: 0,\r\n                viewportWidth: 0,\r\n                viewportHeight: 0,\r\n                extentWidth: 0,\r\n                extentHeight: 0,\r\n                maxDesiredWidth: 0,\r\n                maxDesiredHeight: 0,\r\n                invalidate: function () {\r\n                }\r\n            };\r\n\r\n            super.init();\r\n        }\r\n    }\r\n}","module minerva.controls.scrollcontentpresenter {\r\n    export module helpers {\r\n        export function clampOffsets (sd: IScrollData): boolean {\r\n            var changed = false;\r\n\r\n            var clampX = clampHorizontal(sd, sd.cachedOffsetX);\r\n            if (!areClose(clampX, sd.offsetX)) {\r\n                sd.offsetX = clampX;\r\n                changed = true;\r\n            }\r\n\r\n            var clampY = clampVertical(sd, sd.cachedOffsetY);\r\n            if (!areClose(clampY, sd.offsetY)) {\r\n                sd.offsetY = clampY;\r\n                changed = true;\r\n            }\r\n\r\n            return changed;\r\n        }\r\n\r\n\r\n        function clampHorizontal (sd: IScrollData, x: number): number {\r\n            if (!sd.canHorizontallyScroll)\r\n                return 0;\r\n            return Math.max(0, Math.min(x, sd.extentWidth - sd.viewportWidth));\r\n        }\r\n\r\n        function clampVertical (sd: IScrollData, y: number): number {\r\n            if (!sd.canVerticallyScroll)\r\n                return 0;\r\n            return Math.max(0, Math.min(y, sd.extentHeight - sd.viewportHeight));\r\n        }\r\n\r\n        var epsilon: number = 1.192093E-07;\r\n        var adjustment: number = 10;\r\n\r\n        function areClose (val1: number, val2: number): boolean {\r\n            if (val1 === val2)\r\n                return true;\r\n            var softdiff = (Math.abs(val1) + Math.abs(val2) + adjustment) * epsilon;\r\n            var diff = val1 - val2;\r\n            return -softdiff < diff && diff < softdiff;\r\n        }\r\n    }\r\n}","module minerva.controls.stackpanel {\r\n    export interface IStackPanelUpdaterAssets extends panel.IPanelUpdaterAssets, measure.IInput, arrange.IInput {\r\n    }\r\n    export class StackPanelUpdater extends panel.PanelUpdater {\r\n        assets: IStackPanelUpdaterAssets;\r\n\r\n        init () {\r\n            this.setMeasurePipe(singleton(stackpanel.measure.StackPanelMeasurePipeDef))\r\n                .setArrangePipe(singleton(stackpanel.arrange.StackPanelArrangePipeDef));\r\n\r\n            this.assets.orientation = Orientation.Vertical;\r\n\r\n            super.init();\r\n        }\r\n    }\r\n}","module minerva.controls.textblock {\r\n    export interface ITextBlockUpdaterAssets extends core.IUpdaterAssets, measure.IInput, arrange.IInput, render.IInput, text.IDocumentContext {\r\n    }\r\n\r\n    export class TextBlockUpdater extends core.Updater {\r\n        assets: ITextBlockUpdaterAssets;\r\n        tree: TextBlockUpdaterTree;\r\n\r\n        init () {\r\n            this.setTree(new TextBlockUpdaterTree())\r\n                .setMeasurePipe(singleton(measure.TextBlockMeasurePipeDef))\r\n                .setArrangePipe(singleton(arrange.TextBlockArrangePipeDef))\r\n                .setProcessUpPipe(singleton(processup.TextBlockProcessUpPipeDef))\r\n                .setRenderPipe(singleton(render.TextBlockRenderPipeDef))\r\n                .setHitTestPipe(singleton(hittest.TextBlockHitTestPipeDef));\r\n\r\n            this.setDocument();\r\n\r\n            var assets = this.assets;\r\n            assets.padding = new Thickness();\r\n            assets.selectionStart = 0;\r\n            assets.selectionLength = 0;\r\n            assets.textWrapping = TextWrapping.NoWrap;\r\n            assets.textAlignment = TextAlignment.Left;\r\n            assets.textTrimming = TextTrimming.None;\r\n            assets.lineStackingStrategy = LineStackingStrategy.MaxHeight;\r\n            assets.lineHeight = NaN;\r\n\r\n            super.init();\r\n        }\r\n\r\n        setDocument (docdef?: text.IDocumentLayoutDef): TextBlockUpdater {\r\n            if (this.tree.doc)\r\n                return this;\r\n            this.tree.doc = text.createDocumentLayout(docdef || new text.DocumentLayoutDef());\r\n            return this;\r\n        }\r\n\r\n        invalidateFont (full?: boolean) {\r\n            if (full === true) {\r\n                this.invalidateMeasure();\r\n                this.invalidateArrange();\r\n                this.updateBounds(true);\r\n            }\r\n            this.invalidate();\r\n        }\r\n\r\n        invalidateTextMetrics () {\r\n            this.invalidateMeasure();\r\n            this.invalidateArrange();\r\n            this.updateBounds(true);\r\n            this.invalidate();\r\n            var docassets = this.tree.doc.assets;\r\n            docassets.actualWidth = NaN;\r\n            docassets.actualHeight = NaN;\r\n        }\r\n    }\r\n}","module minerva.controls.textblock {\r\n    export interface ITextBlockUpdaterTree {\r\n        doc: text.IDocumentLayout<text.IDocumentLayoutDef, text.IDocumentAssets>;\r\n        layout(constraint: Size, docctx: text.IDocumentContext): Size;\r\n        render(ctx: core.render.RenderContext, docctx: text.IDocumentContext);\r\n        setMaxWidth (width: number, docctx: text.IDocumentContext);\r\n        setAvailableWidth(width: number);\r\n        getHorizontalOffset(docctx: text.IDocumentContext): number;\r\n        walkText(): IWalker<text.TextUpdater>;\r\n        onTextAttached(child: text.TextUpdater);\r\n        onTextDetached(child: text.TextUpdater);\r\n    }\r\n    export class TextBlockUpdaterTree extends core.UpdaterTree implements ITextBlockUpdaterTree {\r\n        doc: text.IDocumentLayout<text.IDocumentLayoutDef, text.IDocumentAssets>;\r\n        children: text.TextUpdater[] = [];\r\n\r\n        setMaxWidth (width: number, docctx: text.IDocumentContext) {\r\n            return this.doc.def.setMaxWidth(docctx, this.doc.assets, width);\r\n        }\r\n\r\n        layout (constraint: Size, docctx: text.IDocumentContext): Size {\r\n            var doc = this.doc;\r\n            doc.def.layout(docctx, doc.assets, constraint, this.walkText());\r\n            return new Size(doc.assets.actualWidth, doc.assets.actualHeight);\r\n        }\r\n\r\n        render (ctx: core.render.RenderContext, docctx: text.IDocumentContext) {\r\n            var doc = this.doc;\r\n            doc.def.render(ctx, docctx, doc.assets);\r\n        }\r\n\r\n        setAvailableWidth (width: number) {\r\n            this.doc.assets.availableWidth = width;\r\n        }\r\n\r\n        getHorizontalOffset (docctx: text.IDocumentContext): number {\r\n            var doc = this.doc;\r\n            return doc.def.getHorizontalAlignmentX(docctx, doc.assets, doc.assets.actualWidth);\r\n        }\r\n\r\n        clearText () {\r\n            this.children.length = 0;\r\n        }\r\n\r\n        walkText (): IWalker<text.TextUpdater> {\r\n            var i = -1;\r\n            var children = this.children;\r\n            return {\r\n                current: undefined,\r\n                step: function (): boolean {\r\n                    i++;\r\n                    this.current = children[i];\r\n                    return this.current !== undefined;\r\n                }\r\n            };\r\n        }\r\n\r\n        onTextAttached (child: text.TextUpdater, index?: number) {\r\n            if (index == null || index < 0 || index >= this.children.length)\r\n                this.children.push(child);\r\n            else\r\n                this.children.splice(index, 0, child);\r\n        }\r\n\r\n        onTextDetached (child: text.TextUpdater) {\r\n            var index = this.children.indexOf(child);\r\n            if (index > -1)\r\n                this.children.splice(index, 1);\r\n        }\r\n    }\r\n}","module minerva.controls.textboxview {\r\n    var CURSOR_BLINK_DIVIDER = 3;\r\n    var CURSOR_BLINK_OFF_MULTIPLIER = 2;\r\n    var CURSOR_BLINK_DELAY_MULTIPLIER = 3;\r\n    var CURSOR_BLINK_ON_MULTIPLIER = 4;\r\n    var CURSOR_BLINK_TIMEOUT_DEFAULT = 900;\r\n\r\n    export class Blinker {\r\n        isEnabled: boolean = true;\r\n        isVisible: boolean = false;\r\n\r\n        private $$blink_delay = CURSOR_BLINK_TIMEOUT_DEFAULT;\r\n        private $$timeout = 0;\r\n        private $$onChange: (isVisible: boolean) => void;\r\n\r\n        constructor (onChange: (isVisible: boolean) => void) {\r\n            this.$$onChange = onChange;\r\n        }\r\n\r\n        delay () {\r\n            this.$disconnect();\r\n            this.$connect(CURSOR_BLINK_DELAY_MULTIPLIER);\r\n            this.$show();\r\n        }\r\n\r\n        begin () {\r\n            if (this.$$timeout === 0) {\r\n                this.$connect(CURSOR_BLINK_ON_MULTIPLIER);\r\n                this.$show();\r\n            }\r\n        }\r\n\r\n        end () {\r\n            this.$disconnect();\r\n            this.$hide();\r\n        }\r\n\r\n        private $connect (multiplier: number) {\r\n            var delay = this.$$blink_delay * multiplier / CURSOR_BLINK_DIVIDER;\r\n            this.$$timeout = window.setTimeout(() => this.$blink(), delay);\r\n        }\r\n\r\n        private $disconnect () {\r\n            if (this.$$timeout !== 0) {\r\n                window.clearTimeout(this.$$timeout);\r\n                this.$$timeout = 0;\r\n            }\r\n        }\r\n\r\n        private $blink () {\r\n            if (this.isVisible) {\r\n                this.$hide();\r\n                this.$connect(CURSOR_BLINK_OFF_MULTIPLIER);\r\n            } else {\r\n                this.$show();\r\n                this.$connect(CURSOR_BLINK_ON_MULTIPLIER);\r\n            }\r\n        }\r\n\r\n        private $show () {\r\n            if (this.isVisible)\r\n                return;\r\n            this.isVisible = true;\r\n            this.$$onChange && this.$$onChange(true);\r\n        }\r\n\r\n        private $hide () {\r\n            if (!this.isVisible)\r\n                return;\r\n            this.isVisible = false;\r\n            this.$$onChange && this.$$onChange(false);\r\n        }\r\n    }\r\n}","module minerva.controls.textboxview {\r\n    export interface ITextBoxViewUpdaterAssets extends core.IUpdaterAssets, measure.IInput, arrange.IInput, render.IInput, text.IDocumentContext {\r\n        isReadOnly: boolean;\r\n        isFocused: boolean;\r\n    }\r\n\r\n    export class TextBoxViewUpdater extends core.Updater {\r\n        assets: ITextBoxViewUpdaterAssets;\r\n        tree: TextBoxViewUpdaterTree;\r\n        blinker: Blinker;\r\n\r\n        init () {\r\n            this.setTree(new TextBoxViewUpdaterTree())\r\n                .setMeasurePipe(singleton(measure.TextBoxViewMeasurePipeDef))\r\n                .setArrangePipe(singleton(arrange.TextBoxViewArrangePipeDef))\r\n                .setProcessUpPipe(singleton(processup.TextBoxViewProcessUpPipeDef))\r\n                .setRenderPipe(singleton(render.TextBoxViewRenderPipeDef))\r\n                .setHitTestPipe(singleton(hittest.TextBoxViewHitTestPipeDef));\r\n\r\n            this.setDocument();\r\n\r\n            var assets = this.assets;\r\n            assets.selectionStart = 0;\r\n            assets.selectionLength = 0;\r\n            assets.textWrapping = TextWrapping.NoWrap;\r\n            assets.textAlignment = TextAlignment.Left;\r\n            assets.lineStackingStrategy = LineStackingStrategy.MaxHeight;\r\n            assets.lineHeight = NaN;\r\n\r\n            assets.isCaretVisible = false;\r\n            assets.caretBrush = null;\r\n            assets.caretRegion = new Rect();\r\n            assets.isReadOnly = false;\r\n\r\n            this.blinker = new Blinker((isVisible) => {\r\n                this.assets.isCaretVisible = isVisible;\r\n                this.invalidateCaret();\r\n            });\r\n\r\n            super.init();\r\n        }\r\n\r\n        setDocument (docdef?: text.IDocumentLayoutDef): TextBoxViewUpdater {\r\n            if (this.tree.doc)\r\n                return this;\r\n            this.tree.doc = text.createDocumentLayout(docdef || new text.DocumentLayoutDef());\r\n            return this;\r\n        }\r\n\r\n        getCursorFromPoint (point: IPoint): number {\r\n            var doc = this.tree.doc;\r\n            return doc.def.getCursorFromPoint(point, this.assets, doc.assets);\r\n        }\r\n\r\n        invalidateFont (full?: boolean) {\r\n            if (full === true) {\r\n                this.invalidateMeasure();\r\n                this.invalidateArrange();\r\n                this.updateBounds(true);\r\n            }\r\n            this.invalidate();\r\n        }\r\n\r\n        invalidateTextMetrics (): TextBoxViewUpdater {\r\n            this.invalidateMeasure()\r\n                .invalidateArrange()\r\n                .updateBounds(true)\r\n                .invalidate();\r\n            return this;\r\n        }\r\n\r\n        invalidateMeasure (): TextBoxViewUpdater {\r\n            super.invalidateMeasure();\r\n            var docassets = this.tree.doc.assets;\r\n            docassets.actualWidth = NaN;\r\n            docassets.actualHeight = NaN;\r\n            return this;\r\n        }\r\n\r\n        invalidateCaret () {\r\n            var assets = this.assets;\r\n            var region = new Rect();\r\n            Rect.copyTo(assets.caretRegion, region);\r\n            Rect.transform(region, assets.absoluteXform);\r\n            this.invalidate(region)\r\n        }\r\n\r\n        invalidateSelectionStart () {\r\n            this.tree.doc.assets.selCached = false;\r\n            this.invalidateCaretRegion();\r\n            this.resetCaretBlinker(true);\r\n        }\r\n\r\n        invalidateSelectionLength (switching: boolean) {\r\n            this.tree.doc.assets.selCached = false;\r\n            this.invalidate();\r\n            this.resetCaretBlinker(switching);\r\n            if (switching)\r\n                this.invalidateCaretRegion();\r\n        }\r\n\r\n        invalidateCaretRegion () {\r\n            this.invalidateCaret();\r\n            var cr = this.assets.caretRegion;\r\n            cr.x = cr.y = cr.width = cr.height = 0;\r\n        }\r\n\r\n        resetCaretBlinker (shouldDelay: boolean) {\r\n            var assets = this.assets;\r\n            var blinker = this.blinker;\r\n\r\n            if (assets.selectionLength > 0 || assets.isReadOnly || !assets.isFocused)\r\n                return blinker.end();\r\n            if (shouldDelay)\r\n                return blinker.delay();\r\n            return blinker.begin();\r\n        }\r\n    }\r\n}","module minerva.controls.textboxview {\r\n    export interface ITextBoxViewUpdaterTree {\r\n        doc: text.IDocumentLayout<text.IDocumentLayoutDef, text.IDocumentAssets>;\r\n        layout(constraint: Size, docctx: text.IDocumentContext): Size;\r\n        render(ctx: core.render.RenderContext, docctx: text.IDocumentContext);\r\n        getCaretRegion (docctx: text.IDocumentContext): Rect;\r\n        setAvailableWidth(width: number);\r\n        getHorizontalOffset(docctx: text.IDocumentContext): number;\r\n        walkText(): IWalker<text.TextUpdater>;\r\n        onTextAttached(child: text.TextUpdater);\r\n        onTextDetached(child: text.TextUpdater);\r\n    }\r\n    export class TextBoxViewUpdaterTree extends core.UpdaterTree implements ITextBoxViewUpdaterTree {\r\n        doc: text.IDocumentLayout<text.IDocumentLayoutDef, text.IDocumentAssets>;\r\n        children: text.TextUpdater[] = [];\r\n\r\n        setMaxWidth (width: number, docctx: text.IDocumentContext) {\r\n            return this.doc.def.setMaxWidth(docctx, this.doc.assets, width);\r\n        }\r\n\r\n        layout (constraint: Size, docctx: text.IDocumentContext): Size {\r\n            var doc = this.doc;\r\n            doc.def.layout(docctx, doc.assets, constraint, this.walkText());\r\n            return new Size(doc.assets.actualWidth, doc.assets.actualHeight);\r\n        }\r\n\r\n        render (ctx: core.render.RenderContext, docctx: text.IDocumentContext) {\r\n            var doc = this.doc;\r\n            doc.def.render(ctx, docctx, doc.assets);\r\n        }\r\n\r\n        setAvailableWidth (width: number) {\r\n            this.doc.assets.availableWidth = width;\r\n        }\r\n\r\n        getHorizontalOffset (docctx: text.IDocumentContext): number {\r\n            var doc = this.doc;\r\n            return doc.def.getHorizontalAlignmentX(docctx, doc.assets, doc.assets.actualWidth);\r\n        }\r\n\r\n        getCaretRegion (docctx: text.IDocumentContext): Rect {\r\n            var doc = this.doc;\r\n            return doc.def.getCaretFromCursor(docctx, doc.assets);\r\n        }\r\n\r\n        clearText () {\r\n            this.children.length = 0;\r\n        }\r\n\r\n        walkText (): IWalker<text.TextUpdater> {\r\n            var i = -1;\r\n            var children = this.children;\r\n            return {\r\n                current: undefined,\r\n                step: function (): boolean {\r\n                    i++;\r\n                    this.current = children[i];\r\n                    return this.current !== undefined;\r\n                }\r\n            };\r\n        }\r\n\r\n        onTextAttached (child: text.TextUpdater, index?: number) {\r\n            if (index == null || index < 0 || index >= this.children.length)\r\n                this.children.push(child);\r\n            else\r\n                this.children.splice(index, 0, child);\r\n        }\r\n\r\n        onTextDetached (child: text.TextUpdater) {\r\n            var index = this.children.indexOf(child);\r\n            if (index > -1)\r\n                this.children.splice(index, 1);\r\n        }\r\n    }\r\n}","module minerva.controls.usercontrol {\r\n    export interface IUserControlUpdaterAssets extends control.IControlUpdaterAssets, measure.IInput, arrange.IInput {\r\n    }\r\n\r\n    export class UserControlUpdater extends controls.control.ControlUpdater {\r\n        assets: IUserControlUpdaterAssets;\r\n\r\n        init () {\r\n            this.setMeasurePipe(singleton(measure.UserControlMeasurePipeDef))\r\n                .setArrangePipe(singleton(arrange.UserControlArrangePipeDef))\r\n                .setProcessDownPipe(singleton(processdown.UserControlProcessDownPipeDef));\r\n\r\n            var assets = this.assets;\r\n            assets.breakLayoutClip = true;\r\n            assets.padding = new Thickness();\r\n            assets.borderThickness = new Thickness();\r\n\r\n            super.init();\r\n        }\r\n    }\r\n}","module minerva.controls.video {\n    export interface IVideoUpdaterAssets extends image.IImageUpdaterAssets {\n        source: IVideoSource;\n    }\n\n    export class VideoUpdater extends image.ImageUpdater {\n        assets: IVideoUpdaterAssets;\n\n        onSurfaceChanged(oldSurface: core.ISurface, newSurface: core.ISurface) {\n            if (oldSurface)\n                oldSurface.unhookPrerender(this);\n            if (newSurface)\n                newSurface.hookPrerender(this);\n        }\n\n        preRender() {\n            var assets = this.assets;\n            if (assets.source && assets.source.getIsPlaying())\n                this.invalidate();\n        }\n    }\n}","module minerva.controls.virtualizingpanel {\r\n    export class VirtualizingPanelUpdater extends panel.PanelUpdater {\r\n        tree: VirtualizingPanelUpdaterTree;\r\n\r\n        init() {\r\n            this.setTree(new VirtualizingPanelUpdaterTree());\r\n\r\n            super.init();\r\n        }\r\n    }\r\n}","module minerva.controls.virtualizingpanel {\r\n    export var NO_CONTAINER_OWNER: IVirtualizingContainerOwner = {\r\n        itemCount: 0,\r\n        createGenerator: function (): IVirtualizingGenerator {\r\n            return {\r\n                current: undefined,\r\n                generate: function () {\r\n                    return false;\r\n                }\r\n            };\r\n        },\r\n        remove: function (index: number, count: number) {\r\n        }\r\n    };\r\n\r\n    export class VirtualizingPanelUpdaterTree extends panel.PanelUpdaterTree {\r\n        containerOwner: IVirtualizingContainerOwner = NO_CONTAINER_OWNER;\r\n    }\r\n}","/// <reference path=\"../virtualizingpanel/VirtualizingPanelUpdater\" />\r\n\r\nmodule minerva.controls.virtualizingstackpanel {\r\n    export interface IVirtualizingStackPanelUpdaterAssets extends panel.IPanelUpdaterAssets, measure.IInput, arrange.IInput {\r\n    }\r\n\r\n    export class VirtualizingStackPanelUpdater extends virtualizingpanel.VirtualizingPanelUpdater {\r\n        assets: IVirtualizingStackPanelUpdaterAssets;\r\n\r\n        init () {\r\n            this.setMeasurePipe(singleton(measure.VirtualizingStackPanelMeasurePipeDef))\r\n                .setArrangePipe(singleton(arrange.VirtualizingStackPanelArrangePipeDef));\r\n\r\n            var assets = this.assets;\r\n            assets.orientation = Orientation.Vertical;\r\n            assets.scrollData = {\r\n                canHorizontallyScroll: false,\r\n                canVerticallyScroll: false,\r\n                offsetX: 0,\r\n                offsetY: 0,\r\n                cachedOffsetX: 0,\r\n                cachedOffsetY: 0,\r\n                viewportWidth: 0,\r\n                viewportHeight: 0,\r\n                extentWidth: 0,\r\n                extentHeight: 0,\r\n                maxDesiredWidth: 0,\r\n                maxDesiredHeight: 0,\r\n                invalidate: function () {\r\n                }\r\n            };\r\n\r\n            super.init();\r\n        }\r\n    }\r\n}","module minerva.path.segments {\r\n    export interface IArc extends IPathSegment {\r\n        x: number;\r\n        y: number;\r\n        radius: number;\r\n        sAngle: number;\r\n        eAngle: number;\r\n        aClockwise: boolean;\r\n    }\r\n    export function arc(x: number, y: number, radius: number, sa: number, ea: number, cc: boolean): IArc {\r\n        var inited = false;\r\n        //start point\r\n        var sx: number;\r\n        var sy: number;\r\n        //end point\r\n        var ex: number;\r\n        var ey: number;\r\n        //cardinal corners\r\n        var l: number;\r\n        var r: number;\r\n        var t: number;\r\n        var b: number;\r\n        //contains cardinal corners\r\n        var cl: boolean;\r\n        var cr: boolean;\r\n        var ct: boolean;\r\n        var cb: boolean;\r\n\r\n        function init() {\r\n            if (inited) return;\r\n            sx = x + (radius * Math.cos(sa));\r\n            sy = y + (radius * Math.sin(sa));\r\n            ex = x + (radius * Math.cos(ea));\r\n            ey = y + (radius * Math.sin(ea));\r\n\r\n            l = x - radius;\r\n            cl = arcContainsPoint(sx, sy, ex, ey, l, y, cc);\r\n\r\n            r = x + radius;\r\n            cr = arcContainsPoint(sx, sy, ex, ey, r, y, cc);\r\n\r\n            t = y - radius;\r\n            ct = arcContainsPoint(sx, sy, ex, ey, x, t, cc);\r\n\r\n            b = y + radius;\r\n            cb = arcContainsPoint(sx, sy, ex, ey, x, b, cc);\r\n\r\n            inited = true;\r\n        }\r\n\r\n        return {\r\n            sx: null,\r\n            sy: null,\r\n            isSingle: true,\r\n            x: x,\r\n            y: y,\r\n            ex: x,\r\n            ey: y,\r\n            radius: radius,\r\n            sAngle: sa,\r\n            eAngle: ea,\r\n            aClockwise: cc,\r\n            draw: function (ctx: CanvasRenderingContext2D) {\r\n                ctx.arc(x, y, radius, sa, ea, cc);\r\n            },\r\n            extendFillBox: function (box: IBoundingBox) {\r\n                if (ea === sa)\r\n                    return;\r\n                init();\r\n                this.ex = ex;\r\n                this.ey = ey;\r\n\r\n                box.l = Math.min(box.l, sx, ex);\r\n                box.r = Math.max(box.r, sx, ex);\r\n                box.t = Math.min(box.t, sy, ey);\r\n                box.b = Math.max(box.b, sy, ey);\r\n\r\n                if (cl)\r\n                    box.l = Math.min(box.l, l);\r\n                if (cr)\r\n                    box.r = Math.max(box.r, r);\r\n                if (ct)\r\n                    box.t = Math.min(box.t, t);\r\n                if (cb)\r\n                    box.b = Math.max(box.b, b);\r\n            },\r\n            extendStrokeBox: function (box: IBoundingBox, pars: IStrokeParameters) {\r\n                if (ea === sa)\r\n                    return;\r\n                init();\r\n                this.ex = ex;\r\n                this.ey = ey;\r\n\r\n                box.l = Math.min(box.l, sx, ex);\r\n                box.r = Math.max(box.r, sx, ex);\r\n                box.t = Math.min(box.t, sy, ey);\r\n                box.b = Math.max(box.b, sy, ey);\r\n\r\n                var hs = pars.strokeThickness / 2.0;\r\n                if (cl)\r\n                    box.l = Math.min(box.l, l - hs);\r\n                if (cr)\r\n                    box.r = Math.max(box.r, r + hs);\r\n                if (ct)\r\n                    box.t = Math.min(box.t, t - hs);\r\n                if (cb)\r\n                    box.b = Math.max(box.b, b + hs);\r\n\r\n                var cap = pars.strokeStartLineCap || pars.strokeEndLineCap || 0; //HTML5 doesn't support start and end cap\r\n                var sv = this.getStartVector();\r\n                sv[0] = -sv[0];\r\n                sv[1] = -sv[1];\r\n                var ss = getCapSpread(sx, sy, pars.strokeThickness, cap, sv);\r\n                var ev = this.getEndVector();\r\n                var es = getCapSpread(ex, ey, pars.strokeThickness, cap, ev);\r\n\r\n                box.l = Math.min(box.l, ss.x1, ss.x2, es.x1, es.x2);\r\n                box.r = Math.max(box.r, ss.x1, ss.x2, es.x1, es.x2);\r\n                box.t = Math.min(box.t, ss.y1, ss.y2, es.y1, es.y2);\r\n                box.b = Math.max(box.b, ss.y1, ss.y2, es.y1, es.y2);\r\n            },\r\n            toString: function (): string {\r\n                return \"\";\r\n            },\r\n            getStartVector: function (): number[] {\r\n                var rv = [\r\n                        sx - x,\r\n                        sy - y\r\n                ];\r\n                if (cc)\r\n                    return [rv[1], -rv[0]];\r\n                return [-rv[1], rv[0]];\r\n            },\r\n            getEndVector: function (): number[] {\r\n                var rv = [\r\n                        ex - x,\r\n                        ey - y\r\n                ];\r\n                if (cc)\r\n                    return [rv[1], -rv[0]];\r\n                return [-rv[1], rv[0]];\r\n            },\r\n        };\r\n    }\r\n\r\n    function arcContainsPoint(sx: number, sy: number, ex: number, ey: number, cpx: number, cpy: number, cc: boolean): boolean {\r\n        // var a = ex - sx;\r\n        // var b = cpx - sx;\r\n        // var c = ey - sy;\r\n        // var d = cpy - sy;\r\n        // det = ad - bc;\r\n        var n = (ex - sx) * (cpy - sy) - (cpx - sx) * (ey - sy);\r\n        if (n === 0)\r\n            return true;\r\n        if (n > 0 && cc)\r\n            return true;\r\n        if (n < 0 && !cc)\r\n            return true;\r\n        return false;\r\n    }\r\n\r\n    function getCapSpread(x: number, y: number, thickness: number, cap: PenLineCap, vector: number[]) {\r\n        var hs = thickness / 2.0;\r\n        switch (cap) {\r\n            case PenLineCap.Round:\r\n                return {\r\n                    x1: x - hs,\r\n                    x2: x + hs,\r\n                    y1: y - hs,\r\n                    y2: y + hs\r\n                };\r\n                break;\r\n            case PenLineCap.Square:\r\n                var ed = normalizeVector(vector);\r\n                var edo = perpendicularVector(ed);\r\n                return {\r\n                    x1: x + hs * (ed[0] + edo[0]),\r\n                    x2: x + hs * (ed[0] - edo[0]),\r\n                    y1: y + hs * (ed[1] + edo[1]),\r\n                    y2: y + hs * (ed[1] - edo[1])\r\n                };\r\n                break;\r\n            case PenLineCap.Flat:\r\n            default:\r\n                var ed = normalizeVector(vector);\r\n                var edo = perpendicularVector(ed);\r\n                return {\r\n                    x1: x + hs * edo[0],\r\n                    x2: x + hs * -edo[0],\r\n                    y1: y + hs * edo[1],\r\n                    y2: y + hs * -edo[1]\r\n                };\r\n                break;\r\n        }\r\n    }\r\n\r\n    function normalizeVector(v: number[]): number[] {\r\n        var len = Math.sqrt(v[0] * v[0] + v[1] * v[1]);\r\n        return [\r\n                v[0] / len,\r\n                v[1] / len\r\n        ];\r\n    }\r\n\r\n    function perpendicularVector(v: number[]): number[] {\r\n        return [\r\n            -v[1],\r\n            v[0]\r\n        ];\r\n    }\r\n}","module minerva.path.segments {\r\n    export interface IClose extends IPathSegment {\r\n        isClose: boolean;\r\n    }\r\n    export function close(): IClose {\r\n        return {\r\n            sx: null,\r\n            sy: null,\r\n            ex: null,\r\n            ey: null,\r\n            isSingle: false,\r\n            isClose: true,\r\n            draw: function (ctx: CanvasRenderingContext2D) {\r\n                ctx.closePath();\r\n            },\r\n            extendFillBox: function (box: IBoundingBox) {\r\n            },\r\n            extendStrokeBox: function (box: IBoundingBox, pars: IStrokeParameters) {\r\n            },\r\n            toString: function (): string {\r\n                return \"Z\";\r\n            },\r\n            getStartVector: function (): number[] {\r\n                return null;\r\n            },\r\n            getEndVector: function (): number[] {\r\n                return null;\r\n            }\r\n        };\r\n    }\r\n}","module minerva.path.segments {\r\n    export interface ICubicBezier extends IPathSegment {\r\n        cp1x: number;\r\n        cp1y: number;\r\n        cp2x: number;\r\n        cp2y: number;\r\n        x: number;\r\n        y: number;\r\n    }\r\n    export function cubicBezier(cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number): ICubicBezier {\r\n        return {\r\n            sx: null,\r\n            sy: null,\r\n            ex: x,\r\n            ey: y,\r\n            isSingle: false,\r\n            cp1x: cp1x,\r\n            cp1y: cp1y,\r\n            cp2x: cp2x,\r\n            cp2y: cp2y,\r\n            x: x,\r\n            y: y,\r\n            draw: function (ctx: CanvasRenderingContext2D) {\r\n                ctx.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);\r\n            },\r\n            extendFillBox: function (box: IBoundingBox) {\r\n                var m = getMaxima(this.sx, cp1x, cp2x, x, this.sy, cp1y, cp2y, y);\r\n                if (m.x[0] != null) {\r\n                    box.l = Math.min(box.l, m.x[0]);\r\n                    box.r = Math.max(box.r, m.x[0]);\r\n                }\r\n                if (m.x[1] != null) {\r\n                    box.l = Math.min(box.l, m.x[1]);\r\n                    box.r = Math.max(box.r, m.x[1]);\r\n                }\r\n                if (m.y[0] != null) {\r\n                    box.t = Math.min(box.t, m.y[0]);\r\n                    box.b = Math.max(box.b, m.y[0]);\r\n                }\r\n                if (m.y[1] != null) {\r\n                    box.t = Math.min(box.t, m.y[1]);\r\n                    box.b = Math.max(box.b, m.y[1]);\r\n                }\r\n\r\n                box.l = Math.min(box.l, x);\r\n                box.r = Math.max(box.r, x);\r\n                box.t = Math.min(box.t, y);\r\n                box.b = Math.max(box.b, y);\r\n            },\r\n            extendStrokeBox: function (box: IBoundingBox, pars: IStrokeParameters) {\r\n                var hs = pars.strokeThickness / 2.0;\r\n\r\n                var m = getMaxima(this.sx, cp1x, cp2x, x, this.sy, cp1y, cp2y, y);\r\n                if (m.x[0] != null) {\r\n                    box.l = Math.min(box.l, m.x[0] - hs);\r\n                    box.r = Math.max(box.r, m.x[0] + hs);\r\n                }\r\n                if (m.x[1] != null) {\r\n                    box.l = Math.min(box.l, m.x[1] - hs);\r\n                    box.r = Math.max(box.r, m.x[1] + hs);\r\n                }\r\n                if (m.y[0] != null) {\r\n                    box.t = Math.min(box.t, m.y[0] - hs);\r\n                    box.b = Math.max(box.b, m.y[0] + hs);\r\n                }\r\n                if (m.y[1] != null) {\r\n                    box.t = Math.min(box.t, m.y[1] - hs);\r\n                    box.b = Math.max(box.b, m.y[1] + hs);\r\n                }\r\n\r\n                box.l = Math.min(box.l, x);\r\n                box.r = Math.max(box.r, x);\r\n                box.t = Math.min(box.t, y);\r\n                box.b = Math.max(box.b, y);\r\n            },\r\n            toString: function (): string {\r\n                return \"C\" + cp1x.toString() + \",\" + cp1y.toString() + \" \" + cp2x.toString() + \",\" + cp2y.toString() + \" \" + x.toString() + \",\" + y.toString();\r\n            },\r\n            getStartVector: function (): number[] {\r\n                //[F(0)'x, F(0)'y]\r\n                return [\r\n                        3 * (cp1x - this.sx),\r\n                        3 * (cp1y - this.sy)\r\n                ];\r\n            },\r\n            getEndVector: function (): number[] {\r\n                //[F(1)'x, F(1)'y]\r\n                return [\r\n                        3 * (x - cp2x),\r\n                        3 * (y - cp2y)\r\n                ];\r\n            }\r\n        };\r\n    }\r\n\r\n    //http://pomax.nihongoresources.com/pages/bezier/\r\n    /* Cubic Bezier curve is defined by parameteric curve:\r\n     * F(t)x =\r\n     * F(t)y =\r\n     * where\r\n     *  s = start point\r\n     *  cp1 = control point 1\r\n     *  cp2 = control point 2\r\n     *  e = end point\r\n     *\r\n     * We find the coordinates (4) where F(t)x/dt = 0, F(t)y/dt = 0\r\n     * (within the constraints of the curve (0 <= t <= 1)\r\n     * These points will expand the bounding box\r\n     */\r\n\r\n    interface IMaxima {\r\n        x: number[];\r\n        y: number[];\r\n    }\r\n    function getMaxima(x1: number, x2: number, x3: number, x4: number, y1: number, y2: number, y3: number, y4: number): IMaxima {\r\n        return {\r\n            x: cod(x1, x2, x3, x4),\r\n            y: cod(y1, y2, y3, y4)\r\n        };\r\n    }\r\n\r\n    function cod(a: number, b: number, c: number, d: number): number[] {\r\n        var u = 2 * a - 4 * b + 2 * c;\r\n        var v = b - a;\r\n        var w = -a + 3 * b + d - 3 * c;\r\n        var rt = Math.sqrt(u * u - 4 * v * w);\r\n\r\n        var cods: number[] = [null, null];\r\n        if (isNaN(rt))\r\n            return cods;\r\n\r\n        var t: number,\r\n            ot: number;\r\n\r\n        t = (-u + rt) / (2 * w);\r\n        if (t >= 0 && t <= 1) {\r\n            ot = 1 - t;\r\n            cods[0] = (a * ot * ot * ot) + (3 * b * t * ot * ot) + (3 * c * ot * t * t) + (d * t * t * t);\r\n        }\r\n\r\n        t = (-u - rt) / (2 * w);\r\n        if (t >= 0 && t <= 1) {\r\n            ot = 1 - t;\r\n            cods[1] = (a * ot * ot * ot) + (3 * b * t * ot * ot) + (3 * c * ot * t * t) + (d * t * t * t);\r\n        }\r\n\r\n        return cods;\r\n    }\r\n}","module minerva.path.segments {\r\n    export interface IEllipse extends IPathSegment {\r\n        x: number;\r\n        y: number;\r\n        width: number;\r\n        height: number;\r\n    }\r\n    export function ellipse (x: number, y: number, width: number, height: number): IEllipse {\r\n        var radiusX = width / 2;\r\n        var radiusY = height / 2;\r\n        var right = x + width;\r\n        var bottom = y + height;\r\n        var centerX = x + radiusX;\r\n        var centerY = y + radiusY;\r\n\r\n        return {\r\n            sx: null,\r\n            sy: null,\r\n            ex: x,\r\n            ey: y,\r\n            isSingle: true,\r\n            x: x,\r\n            y: y,\r\n            width: width,\r\n            height: height,\r\n            draw: function (ctx: CanvasRenderingContext2D) {\r\n                ctx.beginPath();\r\n                if (width === height) { //circle\r\n                    ctx.arc(centerX, centerY, radiusX, 0, Math.PI * 2, false);\r\n                    return;\r\n                }\r\n\r\n                var kappa = .5522848; // 4 * ((sqrt(2) - 1) / 3)\r\n                var ox = radiusX * kappa;\r\n                var oy = radiusY * kappa;\r\n\r\n                //move to left edge, halfway down\r\n                ctx.moveTo(x, centerY);\r\n                //top left bezier curve\r\n                ctx.bezierCurveTo(x, centerY - oy, centerX - ox, y, centerX, y);\r\n                //top right bezier curve\r\n                ctx.bezierCurveTo(centerX + ox, y, right, centerY - oy, right, centerY);\r\n                //bottom right bezier curve\r\n                ctx.bezierCurveTo(right, centerY + oy, centerX + ox, bottom, centerX, bottom);\r\n                //bottom left bezier curve\r\n                ctx.bezierCurveTo(centerX - ox, bottom, x, centerY + oy, x, centerY);\r\n                ctx.closePath();\r\n\r\n            },\r\n            extendFillBox: function (box: IBoundingBox) {\r\n                box.l = Math.min(box.l, x);\r\n                box.r = Math.max(box.r, x + width);\r\n                box.t = Math.min(box.t, y);\r\n                box.b = Math.max(box.b, y + height);\r\n            },\r\n            extendStrokeBox: function (box: IBoundingBox, pars: IStrokeParameters) {\r\n                var hs = pars.strokeThickness / 2.0;\r\n                box.l = Math.min(box.l, x - hs);\r\n                box.r = Math.max(box.r, x + width + hs);\r\n                box.t = Math.min(box.t, y - hs);\r\n                box.b = Math.max(box.b, y + height + hs);\r\n            },\r\n            getStartVector: function (): number[] {\r\n                return null;\r\n            },\r\n            getEndVector: function (): number[] {\r\n                return null;\r\n            }\r\n        };\r\n    }\r\n}","module minerva.path.segments {\r\n    export interface IEllipticalArc extends IPathSegment {\r\n        rx: number;\r\n        ry: number;\r\n        rotationAngle: number;\r\n        isLargeArcFlag: boolean;\r\n        sweepDirectionFlag: SweepDirection;\r\n        ex: number;\r\n        ey: number;\r\n    }\r\n\r\n    //SVG implementation: http://www.w3.org/TR/SVG/implnote.html#ArcSyntax\r\n    export function ellipticalArc (rx: number, ry: number, rotationAngle: number, isLargeArcFlag: boolean, sweepDirectionFlag: SweepDirection, ex: number, ey: number): IEllipticalArc {\r\n        return <IEllipticalArc>{\r\n            sx: null,\r\n            sy: null,\r\n            isSingle: false,\r\n            rx: rx,\r\n            ry: ry,\r\n            rotationAngle: rotationAngle,\r\n            isLargeArcFlag: isLargeArcFlag,\r\n            sweepDirectionFlag: sweepDirectionFlag,\r\n            ex: ex,\r\n            ey: ey,\r\n            sub: null,\r\n            draw: function (ctx: CanvasRenderingContext2D) {\r\n                this.sub = this.sub || buildSegments(this);\r\n                for (var i = 0, sub = this.sub, len = sub.length; i < len; i++) {\r\n                    sub[i].draw(ctx);\r\n                }\r\n            },\r\n            extendFillBox: function (box: IBoundingBox) {\r\n                this.sub = this.sub || buildSegments(this);\r\n                for (var i = 0, sub = this.sub, len = sub.length; i < len; i++) {\r\n                    sub[i].extendFillBox(box);\r\n                }\r\n            },\r\n            extendStrokeBox: function (box: IBoundingBox, pars: IStrokeParameters) {\r\n                this.sub = this.sub || buildSegments(this);\r\n                for (var i = 0, sub = this.sub, len = sub.length; i < len; i++) {\r\n                    sub[i].extendStrokeBox(box, pars);\r\n                }\r\n            },\r\n            toString: function (): string {\r\n                return \"A\" + rx.toString() + \",\" + ry.toString() + \" \" + rotationAngle.toString() + \" \" + isLargeArcFlag.toString() + \" \" + sweepDirectionFlag.toString() + \" \" + ex.toString() + \",\" + ey.toString();\r\n            },\r\n            getStartVector: function (): number[] {\r\n                this.sub = this.sub || buildSegments(this);\r\n                var sub = this.sub[0];\r\n                return sub ? sub.getStartVector() : [0, 0];\r\n            },\r\n            getEndVector: function (): number[] {\r\n                this.sub = this.sub || buildSegments(this);\r\n                var sub = this.sub[this.sub.length - 1];\r\n                return sub ? sub.getEndVector() : [0, 0];\r\n            }\r\n        };\r\n    }\r\n\r\n    var NO_DRAW_EPSILON = 0.000002;\r\n    var ZERO_EPSILON = 0.000019;\r\n    var SMALL_EPSILON = 0.000117;\r\n\r\n    function buildSegments (ea: IEllipticalArc): IPathSegment[] {\r\n        // from tests it seems that Silverlight closely follows SVG arc\r\n        // behavior (which is very different from the model used with GDI+)\r\n        // some helpful stuff is available here:\r\n        // http://www.w3.org/TR/SVG/implnote.html#ArcImplementationNotes\r\n\r\n        var segments: IPathSegment[] = [];\r\n\r\n        // get start point from the existing path\r\n        var sx = ea.sx,\r\n            sy = ea.sy,\r\n            ex = ea.ex,\r\n            ey = ea.ey,\r\n            rx = ea.rx,\r\n            ry = ea.ry;\r\n\r\n        // if start and end points are identical, then no arc is drawn\r\n        // FIXME: what's the logic (if any) to compare points\r\n        // e.g. 60 and 60.000002 are drawn while 80 and 80.000003 aren't\r\n        if (Math.abs(ex - sx) < NO_DRAW_EPSILON && Math.abs(ey - sy) < NO_DRAW_EPSILON)\r\n            return segments;\r\n\r\n        // Correction of out-of-range radii, see F6.6 (step 1)\r\n        if (Math.abs(rx) < ZERO_EPSILON || Math.abs(ry) < ZERO_EPSILON) {\r\n            // treat this as a straight line (to end point)\r\n            segments.push(line(ex, ey));\r\n            return segments;\r\n        }\r\n\r\n        // Silverlight \"too small to be useful\"\r\n        if (Math.abs(rx) < SMALL_EPSILON || Math.abs(ry) < SMALL_EPSILON) {\r\n            // yes it does mean there's a hole between \"normal\" FP values and \"zero\" FP values\r\n            // and SL doesn't render anything in this twilight sonze\r\n            return segments;\r\n        }\r\n\r\n        // Correction of out-of-range radii, see F6.6.1 (step 2)\r\n        rx = Math.abs(rx);\r\n        ry = Math.abs(ry);\r\n\r\n        // convert angle into radians\r\n        var angle = ea.rotationAngle * Math.PI / 180.0;\r\n\r\n        // variables required for F6.3.1\r\n        var cos_phi = Math.cos(angle);\r\n        var sin_phi = Math.sin(angle);\r\n        var dx2 = (sx - ex) / 2.0;\r\n        var dy2 = (sy - ey) / 2.0;\r\n        var x1p = cos_phi * dx2 + sin_phi * dy2;\r\n        var y1p = cos_phi * dy2 - sin_phi * dx2;\r\n        var x1p2 = x1p * x1p;\r\n        var y1p2 = y1p * y1p;\r\n        var rx2 = rx * rx;\r\n        var ry2 = ry * ry;\r\n\r\n        // Correction of out-of-range radii, see F6.6.2 (step 4)\r\n        var lambda = (x1p2 / rx2) + (y1p2 / ry2);\r\n        if (lambda > 1.0) {\r\n            // see F6.6.3\r\n            var lambda_root = Math.sqrt(lambda);\r\n            rx *= lambda_root;\r\n            ry *= lambda_root;\r\n            // update rx2 and ry2\r\n            rx2 = rx * rx;\r\n            ry2 = ry * ry;\r\n        }\r\n\r\n        var cxp, cyp, cx, cy;\r\n        var c = (rx2 * ry2) - (rx2 * y1p2) - (ry2 * x1p2);\r\n\r\n        var large = ea.isLargeArcFlag === true;\r\n        var sweep = ea.sweepDirectionFlag === SweepDirection.Clockwise;\r\n        // check if there is no possible solution (i.e. we can't do a square root of a negative value)\r\n        if (c < 0.0) {\r\n            // scale uniformly until we have a single solution (see F6.2) i.e. when c == 0.0\r\n            var scale = Math.sqrt(1.0 - c / (rx2 * ry2));\r\n            rx *= scale;\r\n            ry *= scale;\r\n            // update rx2 and ry2\r\n            rx2 = rx * rx;\r\n            ry2 = ry * ry;\r\n\r\n            // step 2 (F6.5.2) - simplified since c == 0.0\r\n            cxp = 0.0;\r\n            cyp = 0.0;\r\n\r\n            // step 3 (F6.5.3 first part) - simplified since cxp and cyp == 0.0\r\n            cx = 0.0;\r\n            cy = 0.0;\r\n        } else {\r\n            // complete c calculation\r\n            c = Math.sqrt(c / ((rx2 * y1p2) + (ry2 * x1p2)));\r\n\r\n            // inverse sign if Fa == Fs\r\n            if (large === sweep)\r\n                c = -c;\r\n\r\n            // step 2 (F6.5.2)\r\n            cxp = c * ( rx * y1p / ry);\r\n            cyp = c * (-ry * x1p / rx);\r\n\r\n            // step 3 (F6.5.3 first part)\r\n            cx = cos_phi * cxp - sin_phi * cyp;\r\n            cy = sin_phi * cxp + cos_phi * cyp;\r\n        }\r\n\r\n        // step 3 (F6.5.3 second part) we now have the center point of the ellipse\r\n        cx += (sx + ex) / 2.0;\r\n        cy += (sy + ey) / 2.0;\r\n\r\n        // step 4 (F6.5.4)\r\n        // we dont' use arccos (as per w3c doc), see http://www.euclideanspace.com/maths/algebra/vectors/angleBetween/index.htm\r\n        // note: atan2 (0.0, 1.0) == 0.0\r\n        var at = Math.atan2(((y1p - cyp) / ry), ((x1p - cxp) / rx));\r\n        var theta1 = (at < 0.0) ? 2.0 * Math.PI + at : at;\r\n\r\n        var nat = Math.atan2(((-y1p - cyp) / ry), ((-x1p - cxp) / rx));\r\n        var delta_theta = (nat < at) ? 2.0 * Math.PI - at + nat : nat - at;\r\n\r\n        if (sweep) {\r\n            // ensure delta theta < 0 or else add 360 degrees\r\n            if (delta_theta < 0.0)\r\n                delta_theta += 2.0 * Math.PI;\r\n        } else {\r\n            // ensure delta theta > 0 or else substract 360 degrees\r\n            if (delta_theta > 0.0)\r\n                delta_theta -= 2.0 * Math.PI;\r\n        }\r\n\r\n        // add several cubic bezier to approximate the arc (smaller than 90 degrees)\r\n        // we add one extra segment because we want something smaller than 90deg (i.e. not 90 itself)\r\n        var segment_count = Math.floor(Math.abs(delta_theta / (Math.PI / 2))) + 1;\r\n        var delta = delta_theta / segment_count;\r\n\r\n        // http://www.stillhq.com/ctpfaq/2001/comp.text.pdf-faq-2001-04.txt (section 2.13)\r\n        var bcp = 4.0 / 3 * (1 - Math.cos(delta / 2)) / Math.sin(delta / 2);\r\n\r\n        var cos_phi_rx = cos_phi * rx;\r\n        var cos_phi_ry = cos_phi * ry;\r\n        var sin_phi_rx = sin_phi * rx;\r\n        var sin_phi_ry = sin_phi * ry;\r\n\r\n        var cos_theta1 = Math.cos(theta1);\r\n        var sin_theta1 = Math.sin(theta1);\r\n\r\n        for (var i = 0; i < segment_count; ++i) {\r\n            // end angle (for this segment) = current + delta\r\n            var theta2 = theta1 + delta;\r\n            var cos_theta2 = Math.cos(theta2);\r\n            var sin_theta2 = Math.sin(theta2);\r\n\r\n            // first control point (based on start point sx,sy)\r\n            var c1x = sx - bcp * (cos_phi_rx * sin_theta1 + sin_phi_ry * cos_theta1);\r\n            var c1y = sy + bcp * (cos_phi_ry * cos_theta1 - sin_phi_rx * sin_theta1);\r\n\r\n            // end point (for this segment)\r\n            var cur_ex = cx + (cos_phi_rx * cos_theta2 - sin_phi_ry * sin_theta2);\r\n            var cur_ey = cy + (sin_phi_rx * cos_theta2 + cos_phi_ry * sin_theta2);\r\n\r\n            // second control point (based on end point ex,ey)\r\n            var c2x = cur_ex + bcp * (cos_phi_rx * sin_theta2 + sin_phi_ry * cos_theta2);\r\n            var c2y = cur_ey + bcp * (sin_phi_rx * sin_theta2 - cos_phi_ry * cos_theta2);\r\n\r\n            segments.push(cubicBezier(c1x, c1y, c2x, c2y, cur_ex, cur_ey));\r\n\r\n            // next start point is the current end point (same for angle)\r\n            sx = cur_ex;\r\n            sy = cur_ey;\r\n            theta1 = theta2;\r\n            // avoid recomputations\r\n            cos_theta1 = cos_theta2;\r\n            sin_theta1 = sin_theta2;\r\n        }\r\n\r\n        return segments;\r\n    }\r\n}","module minerva.path.segments {\r\n    export interface ILine extends IPathSegment {\r\n        x: number;\r\n        y: number;\r\n    }\r\n    export function line(x: number, y: number): ILine {\r\n        return {\r\n            isSingle: false,\r\n            sx: null,\r\n            sy: null,\r\n            x: x,\r\n            y: y,\r\n            ex: x,\r\n            ey: y,\r\n            draw: function (ctx: CanvasRenderingContext2D) {\r\n                ctx.lineTo(x, y);\r\n            },\r\n            extendFillBox: function (box: IBoundingBox) {\r\n                box.l = Math.min(box.l, x);\r\n                box.r = Math.max(box.r, x);\r\n                box.t = Math.min(box.t, y);\r\n                box.b = Math.max(box.b, y);\r\n            },\r\n            extendStrokeBox: function (box: IBoundingBox, pars: IStrokeParameters) {\r\n                this.extendFillBox(box);\r\n            },\r\n            toString: function (): string {\r\n                return \"L\" + x.toString() + \",\" + y.toString();\r\n            },\r\n            getStartVector: function (): number[] {\r\n                return [\r\n                        x - this.sx,\r\n                        y - this.sy\r\n                ];\r\n            },\r\n            getEndVector: function (): number[] {\r\n                return [\r\n                        x - this.sx,\r\n                        y - this.sy\r\n                ];\r\n            }\r\n        };\r\n    }\r\n}","module minerva.path.segments {\r\n    export interface IMove extends IPathSegment {\r\n        x: number;\r\n        y: number;\r\n        isMove: boolean;\r\n    }\r\n    export function move(x: number, y: number): IMove {\r\n        return {\r\n            sx: null,\r\n            sy: null,\r\n            ex: x,\r\n            ey: y,\r\n            isSingle: false,\r\n            isMove: true,\r\n            x: x,\r\n            y: y,\r\n            draw: function (ctx: CanvasRenderingContext2D) {\r\n                ctx.moveTo(x, y);\r\n            },\r\n            extendFillBox: function (box: IBoundingBox) {\r\n                box.l = Math.min(box.l, x);\r\n                box.r = Math.max(box.r, x);\r\n                box.t = Math.min(box.t, y);\r\n                box.b = Math.max(box.b, y);\r\n            },\r\n            extendStrokeBox: function (box: IBoundingBox, pars: IStrokeParameters) {\r\n                this.extendFillBox(box);\r\n            },\r\n            toString: function (): string {\r\n                return \"M\" + x.toString() + \",\" + y.toString();\r\n            },\r\n            getStartVector: function (): number[] {\r\n                return null;\r\n            },\r\n            getEndVector: function (): number[] {\r\n                return null;\r\n            }\r\n        };\r\n    }\r\n}","module minerva.path.segments {\r\n    export interface IQuadraticBezier extends IPathSegment {\r\n        cpx: number;\r\n        cpy: number;\r\n        x: number;\r\n        y: number;\r\n    }\r\n    export function quadraticBezier(cpx: number, cpy: number, x: number, y: number): IQuadraticBezier {\r\n        return {\r\n            sx: null,\r\n            sy: null,\r\n            ex: x,\r\n            ey: y,\r\n            isSingle: false,\r\n            cpx: cpx,\r\n            cpy: cpy,\r\n            x: x,\r\n            y: y,\r\n            draw: function (ctx: CanvasRenderingContext2D) {\r\n                ctx.quadraticCurveTo(cpx, cpy, x, y);\r\n            },\r\n            extendFillBox: function (box: IBoundingBox) {\r\n                var m = getMaxima(this.sx, cpx, x, this.sy, cpy, y);\r\n                if (m.x != null) {\r\n                    box.l = Math.min(box.l, m.x);\r\n                    box.r = Math.max(box.r, m.x);\r\n                }\r\n                if (m.y != null) {\r\n                    box.t = Math.min(box.t, m.y);\r\n                    box.b = Math.max(box.b, m.y);\r\n                }\r\n\r\n                box.l = Math.min(box.l, x);\r\n                box.r = Math.max(box.r, x);\r\n                box.t = Math.min(box.t, y);\r\n                box.b = Math.max(box.b, y);\r\n            },\r\n            extendStrokeBox: function (box: IBoundingBox, pars: IStrokeParameters) {\r\n                var hs = pars.strokeThickness / 2.0;\r\n\r\n                var m = getMaxima(this.sx, cpx, x, this.sy, cpy, y);\r\n                if (m.x) {\r\n                    box.l = Math.min(box.l, m.x - hs);\r\n                    box.r = Math.max(box.r, m.x + hs);\r\n                }\r\n                if (m.y) {\r\n                    box.t = Math.min(box.t, m.y - hs);\r\n                    box.b = Math.max(box.b, m.y + hs);\r\n                }\r\n\r\n                box.l = Math.min(box.l, x);\r\n                box.r = Math.max(box.r, x);\r\n                box.t = Math.min(box.t, y);\r\n                box.b = Math.max(box.b, y);\r\n            },\r\n            toString: function (): string {\r\n                return \"Q\" + cpx.toString() + \",\" + cpy.toString() + \" \" + x.toString() + \",\" + y.toString();\r\n            },\r\n            getStartVector: function (): number[] {\r\n                //[F(0)'x, F(0)'y]\r\n                return [\r\n                        2 * (cpx - this.sx),\r\n                        2 * (cpy - this.sy)\r\n                ];\r\n            },\r\n            getEndVector: function (): number[] {\r\n                //[F(1)'x, F(1)'y]\r\n                return [\r\n                        2 * (x - cpx),\r\n                        2 * (y - cpy)\r\n                ];\r\n            }\r\n        };\r\n    }\r\n\r\n//http://pomax.nihongoresources.com/pages/bezier/\r\n    /* Quadratic Bezier curve is defined by parametric curve:\r\n     *  F(t)x = s.x(1-t)^2 + cp.x(1-t)t + e.x(t^2)\r\n     *  F(t)x = s.y(1-t)^2 + cp.y(1-t)t + e.y(t^2)\r\n     * where\r\n     *  s = start point\r\n     *  cp = control point\r\n     *  e = end point\r\n     *\r\n     * We find the coordinates (2) where F(t)x/dt = 0, F(t)y/dt = 0\r\n     * (within the constraints of the curve (0 <= t <= 1)\r\n     * These points will expand the bounding box\r\n     */\r\n\r\n    interface IMaxima {\r\n        x: number;\r\n        y: number;\r\n    }\r\n    function getMaxima(x1: number, x2: number, x3: number, y1: number, y2: number, y3: number): IMaxima {\r\n        return {\r\n            x: cod(x1, x2, x3),\r\n            y: cod(y1, y2, y3)\r\n        };\r\n    }\r\n\r\n    function cod(a: number, b: number, c: number): number {\r\n        var t = (a - b) / (a - 2 * b + c);\r\n        if (t < 0 || t > 1)\r\n            return null;\r\n        return (a * Math.pow(1 - t, 2)) + (2 * b * (1 - t) * t) + (c * Math.pow(t, 2));\r\n    }\r\n}","module minerva.path.segments {\r\n    export interface IRect extends IPathSegment {\r\n        x: number;\r\n        y: number;\r\n        width: number;\r\n        height: number;\r\n    }\r\n    export function rect (x: number, y: number, width: number, height: number): IRect {\r\n        return {\r\n            sx: null,\r\n            sy: null,\r\n            isSingle: true,\r\n            x: x,\r\n            y: y,\r\n            ex: x,\r\n            ey: y,\r\n            width: width,\r\n            height: height,\r\n            draw: function (ctx: CanvasRenderingContext2D) {\r\n                ctx.rect(x, y, width, height);\r\n            },\r\n            extendFillBox: function (box: IBoundingBox) {\r\n                box.l = Math.min(box.l, x);\r\n                box.r = Math.max(box.r, x + width);\r\n                box.t = Math.min(box.t, y);\r\n                box.b = Math.max(box.b, y + height);\r\n            },\r\n            extendStrokeBox: function (box: IBoundingBox, pars: IStrokeParameters) {\r\n                var hs = pars.strokeThickness / 2.0;\r\n                box.l = Math.min(box.l, x - hs);\r\n                box.r = Math.max(box.r, x + width + hs);\r\n                box.t = Math.min(box.t, y - hs);\r\n                box.b = Math.max(box.b, y + height + hs);\r\n            },\r\n            getStartVector: function (): number[] {\r\n                return null;\r\n            },\r\n            getEndVector: function (): number[] {\r\n                return null;\r\n            }\r\n        };\r\n    }\r\n}","module minerva.path.segments {\r\n    export function roundedRect (x: number, y: number, width: number, height: number, radiusX: number, radiusY: number): IRect {\r\n        if (radiusX === 0.0 && radiusY === 0.0)\r\n            return rect(x, y, width, height);\r\n\r\n        return <IRect>{\r\n            sx: null,\r\n            sy: null,\r\n            ex: x,\r\n            ey: y,\r\n            isSingle: true,\r\n            x: x,\r\n            y: y,\r\n            width: width,\r\n            height: height,\r\n            radiusX: radiusX,\r\n            radiusY: radiusY,\r\n            draw: function (ctx: CanvasRenderingContext2D) {\r\n                minerva.shapes.rectangle.helpers.draw(ctx, x, y, width, height, radiusX, radiusY);\r\n            },\r\n            extendFillBox: function (box: IBoundingBox) {\r\n                box.l = Math.min(box.l, x);\r\n                box.r = Math.max(box.r, x + width);\r\n                box.t = Math.min(box.t, y);\r\n                box.b = Math.max(box.b, y + height);\r\n            },\r\n            extendStrokeBox: function (box: IBoundingBox, pars: IStrokeParameters) {\r\n                var hs = pars.strokeThickness / 2.0;\r\n                box.l = Math.min(box.l, x - hs);\r\n                box.r = Math.max(box.r, x + width + hs);\r\n                box.t = Math.min(box.t, y - hs);\r\n                box.b = Math.max(box.b, y + height + hs);\r\n            },\r\n            getStartVector: function (): number[] {\r\n                return null;\r\n            },\r\n            getEndVector: function (): number[] {\r\n                return null;\r\n            }\r\n        };\r\n    }\r\n}","interface CanvasRenderingContext2D {\r\n    backingStorePixelRatio: number;\r\n}\r\nif (!CanvasRenderingContext2D.prototype.hasOwnProperty(\"backingStorePixelRatio\")) {\r\n    Object.defineProperty(CanvasRenderingContext2D.prototype, \"backingStorePixelRatio\", {\r\n        get: function (): number {\r\n            var ctx = <any>this;\r\n            return ctx.webkitBackingStorePixelRatio\r\n                || ctx.mozBackingStorePixelRatio\r\n                || ctx.msBackingStorePixelRatio\r\n                || ctx.oBackingStorePixelRatio\r\n                || 1;\r\n        }\r\n    });\r\n}","interface CanvasRenderingContext2D {\r\n    ellipse(x: number, y: number, radiusX: number, radiusY: number, rotation: number, startAngle: number, endAngle: number, antiClockwise?: boolean);\r\n}\r\nif (!CanvasRenderingContext2D.prototype.ellipse) {\r\n    CanvasRenderingContext2D.prototype.ellipse = function (x: number, y: number, radiusX: number, radiusY: number, rotation: number, startAngle: number, endAngle: number, antiClockwise: boolean) {\r\n        this.save();\r\n        this.translate(x, y);\r\n        this.rotate(rotation);\r\n        this.scale(radiusX, radiusY);\r\n        this.arc(0, 0, 1, startAngle, endAngle, antiClockwise);\r\n        this.restore();\r\n    };\r\n}","interface CanvasRenderingContext2D {\r\n    isPointInStroke(x: number, y: number): boolean;\r\n}\r\nif (!CanvasRenderingContext2D.prototype.isPointInStroke) {\r\n    CanvasRenderingContext2D.prototype.isPointInStroke = function (x: number, y: number) {\r\n        return false;\r\n    };\r\n}","/// <reference path=\"../../core/Updater\" />\r\n\r\nmodule minerva.shapes.shape {\r\n    export interface IShapeUpdaterAssets extends core.IUpdaterAssets, measure.IInput, arrange.IInput, processup.IInput, render.IInput {\r\n    }\r\n\r\n    export class ShapeUpdater extends core.Updater {\r\n        assets: IShapeUpdaterAssets;\r\n\r\n        init () {\r\n            this.setMeasurePipe(singleton(measure.ShapeMeasurePipeDef))\r\n                .setArrangePipe(singleton(arrange.ShapeArrangePipeDef))\r\n                .setRenderPipe(singleton(render.ShapeRenderPipeDef))\r\n                .setProcessUpPipe(singleton(processup.ShapeProcessUpPipeDef))\r\n                .setHitTestPipe(singleton(hittest.ShapeHitTestPipeDef));\r\n\r\n            var assets = this.assets;\r\n            assets.naturalBounds = new Rect();\r\n            assets.shapeFlags = ShapeFlags.None;\r\n            assets.shapeRect = new Rect();\r\n\r\n            assets.fill = null;\r\n            assets.stretch = Stretch.None;\r\n            assets.stroke = null;\r\n            assets.strokeThickness = 1.0;\r\n            assets.strokeDashArray = [];\r\n            assets.strokeDashCap = PenLineCap.Flat;\r\n            assets.strokeDashOffset = 0;\r\n            assets.strokeStartLineCap = PenLineCap.Flat;\r\n            assets.strokeEndLineCap = PenLineCap.Flat;\r\n            assets.strokeLineJoin = PenLineJoin.Miter;\r\n            assets.strokeMiterLimit = 10;\r\n\r\n            super.init();\r\n        }\r\n\r\n        invalidateNaturalBounds () {\r\n            var nb = this.assets.naturalBounds;\r\n            nb.x = nb.y = nb.width = nb.height = 0;\r\n            this.invalidateMeasure();\r\n            this.updateBounds(true);\r\n        }\r\n    }\r\n}","/// <reference path=\"../shape/ShapeUpdater\" />\r\n\r\nmodule minerva.shapes.ellipse {\r\n    export interface IEllipseUpdaterAssets extends shape.IShapeUpdaterAssets, render.IInput {\r\n    }\r\n\r\n    export class EllipseUpdater extends shape.ShapeUpdater {\r\n        assets: IEllipseUpdaterAssets;\r\n\r\n        init () {\r\n            this.setMeasurePipe(singleton(measure.EllipseMeasurePipeDef))\r\n                .setRenderPipe(singleton(render.EllipseRenderPipeDef))\r\n                .setHitTestPipe(singleton(hittest.EllipseHitTestPipeDef));\r\n\r\n            var assets = this.assets;\r\n            assets.stretch = Stretch.Fill;\r\n\r\n            super.init();\r\n        }\r\n    }\r\n}","/// <reference path=\"../shape/ShapeUpdater\" />\r\n\r\nmodule minerva.shapes.path {\r\n    export interface IPathUpdaterAssets extends shape.IShapeUpdaterAssets, measure.IInput, processup.IInput, render.IInput {\r\n    }\r\n\r\n    export class PathUpdater extends shape.ShapeUpdater {\r\n        assets: IPathUpdaterAssets;\r\n\r\n        init () {\r\n            this.setMeasurePipe(singleton(measure.PathMeasurePipeDef))\r\n                .setProcessUpPipe(singleton(processup.PathProcessUpPipeDef))\r\n                .setRenderPipe(singleton(render.PathRenderPipeDef))\r\n                .setHitTestPipe(singleton(hittest.PathHitTestPipeDef));\r\n\r\n            var assets = this.assets;\r\n            assets.stretch = Stretch.None;\r\n            assets.stretchXform = mat3.identity();\r\n\r\n            super.init();\r\n        }\r\n    }\r\n}","/// <reference path=\"../path/PathUpdater\" />\r\n\r\nmodule minerva.shapes.line {\r\n    export interface ILineUpdaterAssets extends path.IPathUpdaterAssets, measure.IInput {\r\n    }\r\n\r\n    export class LineUpdater extends path.PathUpdater {\r\n        assets: ILineUpdaterAssets;\r\n\r\n        init () {\r\n            this.setMeasurePipe(singleton(measure.LineMeasurePipeDef));\r\n\r\n            var assets = this.assets;\r\n            assets.x1 = 0;\r\n            assets.y1 = 0;\r\n            assets.x2 = 0;\r\n            assets.y2 = 0;\r\n\r\n            assets.data = new path.AnonPathGeometry();\r\n\r\n            super.init();\r\n        }\r\n\r\n        invalidatePath () {\r\n            this.assets.data.old = true;\r\n            this.invalidateNaturalBounds();\r\n        }\r\n    }\r\n}","module minerva.shapes.path {\r\n    export class AnonPathGeometry implements IPathGeometry {\r\n        old: boolean = true;\r\n        path = new minerva.path.Path();\r\n        fillRule = FillRule.EvenOdd;\r\n\r\n        Draw (ctx: minerva.core.render.RenderContext) {\r\n            this.path.draw(ctx.raw);\r\n        }\r\n\r\n        GetBounds (pars?: minerva.path.IStrokeParameters): Rect {\r\n            return this.path.calcBounds(pars);\r\n        }\r\n    }\r\n}","/// <reference path=\"../path/PathUpdater\" />\r\n\r\nmodule minerva.shapes.polyline {\r\n    export interface IPolylineUpdaterAssets extends path.IPathUpdaterAssets, measure.IInput {\r\n    }\r\n\r\n    export class PolylineUpdater extends path.PathUpdater {\r\n        assets: IPolylineUpdaterAssets;\r\n\r\n        init () {\r\n            this.setMeasurePipe(singleton(measure.PolylineMeasurePipeDef));\r\n\r\n            var assets = this.assets;\r\n            assets.data = new path.AnonPathGeometry();\r\n            assets.isClosed = false;\r\n\r\n            super.init();\r\n        }\r\n\r\n        invalidateFillRule () {\r\n            this.assets.data.fillRule = this.assets.fillRule;\r\n            this.invalidate();\r\n        }\r\n\r\n        invalidatePath () {\r\n            this.assets.data.old = true;\r\n            this.invalidateNaturalBounds();\r\n        }\r\n    }\r\n}","/// <reference path=\"../polyline/PolylineUpdater\" />\r\n\r\nmodule minerva.shapes.polygon {\r\n    export class PolygonUpdater extends polyline.PolylineUpdater {\r\n        init () {\r\n            super.init();\r\n            this.assets.isClosed = true;\r\n        }\r\n    }\r\n}","/// <reference path=\"../shape/ShapeUpdater\" />\r\n\r\nmodule minerva.shapes.rectangle {\r\n    export interface IRectangleUpdaterAssets extends shape.IShapeUpdaterAssets, render.IInput {\r\n    }\r\n\r\n    export class RectangleUpdater extends shape.ShapeUpdater {\r\n        assets: IRectangleUpdaterAssets;\r\n\r\n        init () {\r\n            this.setMeasurePipe(singleton(measure.RectangleMeasurePipeDef))\r\n                .setRenderPipe(singleton(render.RectangleRenderPipeDef))\r\n                .setHitTestPipe(singleton(hittest.RectangleHitTestPipeDef));\r\n\r\n            var assets = this.assets;\r\n            assets.stretch = Stretch.Fill;\r\n            assets.radiusX = 0;\r\n            assets.radiusY = 0;\r\n\r\n            super.init();\r\n        }\r\n    }\r\n}","module minerva.text.layout {\r\n    var isFirefox = /firefox/i.test(navigator.userAgent);\r\n\r\n    export class Cluster {\r\n        isSelected: boolean = false;\r\n        text: string = null;\r\n        width: number = 0;\r\n\r\n        static DEFAULT_SELECTION_BG = new FakeBrush(\"#444444\");\r\n        static DEFAULT_SELECTION_FG = new FakeBrush(\"#FFFFFF\");\r\n\r\n        static render (cluster: Cluster, assets: ITextAssets, ctx: core.render.RenderContext) {\r\n            var fontHeight = assets.font.getHeight();\r\n            var area = new Rect(0, 0, cluster.width, fontHeight);\r\n\r\n            var raw = ctx.raw;\r\n\r\n            //Background\r\n            var bg = cluster.isSelected ? (assets.selectionBackground || Cluster.DEFAULT_SELECTION_BG) : assets.background;\r\n            if (bg) {\r\n                raw.beginPath();\r\n                raw.rect(area.x, area.y, area.width, area.height);\r\n                ctx.fillEx(bg, area);\r\n            }\r\n\r\n            //Text\r\n            var fg = cluster.isSelected ? (assets.selectionForeground || Cluster.DEFAULT_SELECTION_FG) : assets.foreground;\r\n            var fg5 = \"#000000\";\r\n            if (fg) {\r\n                fg.setupBrush(raw, area);\r\n                fg5 = fg.toHtml5Object();\r\n            }\r\n            raw.fillStyle = fg5;\r\n            raw.font = assets.font.toHtml5Object();\r\n            raw.textAlign = \"left\";\r\n            if (isFirefox) {\r\n                raw.textBaseline = \"bottom\";\r\n                raw.fillText(cluster.text, 0, fontHeight);\r\n            } else {\r\n                raw.textBaseline = \"top\";\r\n                raw.fillText(cluster.text, 0, 0);\r\n            }\r\n\r\n            //Underline\r\n            if (assets.isUnderlined) {\r\n                raw.beginPath();\r\n                raw.moveTo(0, fontHeight);\r\n                raw.lineTo(cluster.width, fontHeight);\r\n                raw.lineWidth = 2;\r\n                raw.strokeStyle = fg5;\r\n                raw.stroke();\r\n            }\r\n        }\r\n    }\r\n}","module minerva.text.layout {\r\n    export class Line {\r\n        runs: Run[] = [];\r\n        width: number = 0;\r\n        height: number = 0;\r\n\r\n        static getLineFromY(lines: Line[], y: number) {\r\n            var line: layout.Line;\r\n            for (var i = 0, oy = 0.0; i < lines.length; i++) {\r\n                line = lines[i];\r\n                oy += line.height;\r\n                if (y < oy)\r\n                    return line;\r\n            }\r\n            return lines[lines.length - 1];\r\n        }\r\n\r\n        static elliptify(docctx: IDocumentContext, docassets: IDocumentAssets, line: layout.Line, measureTextWidth: (text: string, font: Font) => number): boolean {\r\n            if (docctx.textTrimming === TextTrimming.None\r\n                || docctx.textWrapping !== TextWrapping.NoWrap\r\n                || line.width <= docassets.maxWidth)\r\n                return false;\r\n\r\n            var newRuns: layout.Run[] = [];\r\n            for (var runs = line.runs, total = 0, i = 0; i < runs.length; i++) {\r\n                var run = runs[i];\r\n                total += run.width;\r\n                newRuns.push(run);\r\n                if (total >= docassets.maxWidth) {\r\n                    total -= run.width;\r\n                    layout.Run.elliptify(run, docassets.maxWidth - total, docctx.textTrimming, measureTextWidth);\r\n                    line.width = total + run.width;\r\n                    break;\r\n                }\r\n            }\r\n            line.runs = newRuns;\r\n            return true;\r\n        }\r\n    }\r\n}","module minerva.text.layout {\r\n    export class Run {\r\n        attrs: ITextAssets;\r\n        text: string = \"\";\r\n        start: number = 0;\r\n        length: number = 0;\r\n        width: number = 0;\r\n\r\n        pre: Cluster;\r\n        sel: Cluster;\r\n        post: Cluster;\r\n\r\n        static splitSelection(run: Run, start: number, end: number, measureWidth: (text: string, assets: ITextAssets) => number) {\r\n            run.pre = run.sel = run.post = null;\r\n\r\n            var rs = run.start;\r\n            var re = rs + run.length;\r\n\r\n            var prelen = Math.min(run.length, Math.max(0, start - rs));\r\n            if (prelen > 0) {\r\n                var pre = run.pre = new Cluster();\r\n                pre.text = run.text.substr(0, prelen);\r\n                pre.width = measureWidth(pre.text, run.attrs);\r\n            }\r\n\r\n            var postlen = Math.min(run.length, Math.max(0, re - end));\r\n            if (postlen > 0) {\r\n                var post = run.post = new Cluster();\r\n                post.text = run.text.substr(run.length - postlen);\r\n                post.width = measureWidth(post.text, run.attrs);\r\n            }\r\n\r\n            var ss = Math.min(re, Math.max(rs, start));\r\n            var se = Math.max(rs, Math.min(re, end));\r\n            var sellen = Math.max(0, se - ss);\r\n            if (sellen > 0) {\r\n                var sel = run.sel = new Cluster();\r\n                sel.isSelected = true;\r\n                sel.text = run.text.substr(ss - rs, sellen);\r\n                sel.width = measureWidth(sel.text, run.attrs);\r\n            }\r\n        }\r\n\r\n        static elliptify(run: Run, available: number, textTrimming: TextTrimming, measureTextWidth: (text: string, font: Font) => number) {\r\n            if (run.width < available)\r\n                return;\r\n            var text = run.text;\r\n            var font = run.attrs.font;\r\n            var measure = (index: number) => measureTextWidth(text.substr(0, index), font);\r\n            if (textTrimming === TextTrimming.WordEllipsis) {\r\n                shortenWord(run, available - measureTextWidth(\"...\", font), measure);\r\n            } else { //CharacterEllipsis\r\n                shortenChar(run, available - measureTextWidth(\"...\", font), measure);\r\n            }\r\n        }\r\n    }\r\n\r\n    function shortenWord(run: Run, available: number, measure: (index: number) => number) {\r\n        if (available > 0) {\r\n            var len = run.text.length;\r\n            for (var i = 0, next = 0; (i = next) < len && (next = run.text.indexOf(' ', i + 1)) !== -1;) {\r\n                if (measure(next) > available) {\r\n                    run.text = run.text.substr(0, i);\r\n                    break;\r\n                }\r\n            }\r\n            if (len === run.text.length)\r\n                return;\r\n        } else {\r\n            run.text = \"\";\r\n        }\r\n        run.text += \"...\";\r\n        run.length = run.text.length;\r\n        run.width = measure(run.length);\r\n    }\r\n\r\n    function shortenChar(run: Run, available: number, measure: (index: number) => number) {\r\n        if (available > 0) {\r\n            var len = run.text.length;\r\n            var low = 0;\r\n            var high = len;\r\n            var i = Math.ceil(low + (high - low) / 2);\r\n            for (var rawr = 0; (high - low) > 1 && rawr < 1000; i = Math.ceil(low + (high - low) / 2), rawr++) {\r\n                if (measure(i) > available) {\r\n                    high = i;\r\n                } else {\r\n                    low = i;\r\n                }\r\n            }\r\n            run.text = run.text.substr(0, low);\r\n            if (len === run.text.length)\r\n                return;\r\n        } else {\r\n            run.text = \"\";\r\n        }\r\n        run.text += \"...\";\r\n        run.length = run.text.length;\r\n        run.width = measure(run.length);\r\n    }\r\n}","module minerva.text.run {\r\n    export class RunLayoutDef implements ITextLayoutDef {\r\n        layout (docctx: IDocumentContext, docassets: IDocumentAssets, assets: ITextAssets): boolean {\r\n            //TODO: Implement lineStackingStrategy, lineHeight\r\n            var text = assets.text;\r\n            if (!text) {\r\n                var line = new layout.Line();\r\n                line.height = assets.font.getHeight();\r\n                docassets.lines.push(line);\r\n                var run1 = new layout.Run();\r\n                run1.attrs = assets;\r\n                line.runs.push(run1);\r\n                docassets.actualHeight = line.height;\r\n                return false;\r\n            }\r\n\r\n            /*\r\n             The TextTrimming property has no effect unless the TextWrapping property is set to NoWrap.\r\n             Source: https://msdn.microsoft.com/en-us/library/system.windows.controls.textblock.texttrimming(v=vs.95).aspx\r\n             */\r\n            if (docctx.textWrapping === TextWrapping.NoWrap)\r\n                run.doLayoutNoWrap(docctx, docassets, assets);\r\n            else\r\n                run.doLayoutWrap(docctx, docassets, assets);\r\n\r\n            docassets.selCached = false;\r\n            return true;\r\n        }\r\n    }\r\n}","module minerva.text.run {\r\n    interface IRunLayoutPass {\r\n        text: string;\r\n        index: number;\r\n        max: number;\r\n    }\r\n\r\n    export function doLayoutNoWrap (docctx: IDocumentContext, docassets: IDocumentAssets, assets: ITextAssets) {\r\n        var pass: IRunLayoutPass = {\r\n            text: assets.text,\r\n            index: 0,\r\n            max: assets.text.length\r\n        };\r\n\r\n        var font = assets.font;\r\n\r\n        var line = new layout.Line();\r\n        line.height = font.getHeight();\r\n        docassets.actualHeight += line.height;\r\n        docassets.lines.push(line);\r\n\r\n        var run = new layout.Run();\r\n        run.attrs = assets;\r\n        line.runs.push(run);\r\n\r\n        while (pass.index < pass.max) {\r\n            var hitbreak = advance(run, pass, font);\r\n            if (hitbreak) {\r\n                docassets.actualWidth = Math.max(docassets.actualWidth, run.width);\r\n                line.width = run.width;\r\n                line = new layout.Line();\r\n                line.height = font.getHeight();\r\n                docassets.actualHeight += line.height;\r\n                docassets.lines.push(line);\r\n\r\n                run = new layout.Run();\r\n                run.attrs = assets;\r\n                line.runs.push(run);\r\n            }\r\n        }\r\n        line.width = run.width;\r\n        layout.Line.elliptify(docctx, docassets, line, measureTextWidth);\r\n        docassets.actualWidth = Math.max(docassets.actualWidth, run.width);\r\n    }\r\n\r\n    function advance (run: layout.Run, pass: IRunLayoutPass, font: Font): boolean {\r\n        //NOTE: Returning true implies a new line is necessary\r\n        var remaining = pass.text.substr(pass.index);\r\n        var rindex = remaining.indexOf('\\r');\r\n        var nindex = remaining.indexOf('\\n');\r\n\r\n        if (rindex < 0 && nindex < 0) {\r\n            //Didn't find \\r or \\n\r\n            run.length = remaining.length;\r\n            run.text = remaining;\r\n            run.width = measureTextWidth(run.text, font);\r\n            pass.index += run.length;\r\n            return false;\r\n        }\r\n\r\n        if (rindex > -1 && rindex + 1 === nindex) {\r\n            //Found \\r\\n\r\n            run.length = nindex + 1;\r\n            run.text = remaining.substr(0, run.length);\r\n            run.width = measureTextWidth(run.text, font);\r\n            pass.index += run.length;\r\n            return true;\r\n        }\r\n\r\n        if (rindex > -1 && rindex < nindex) {\r\n            //Found \\r before \\n, but not back-to-back\r\n            run.length = rindex + 1;\r\n            run.text = remaining.substr(0, run.length);\r\n            run.width = measureTextWidth(run.text, font);\r\n            pass.index += run.length;\r\n            return true;\r\n        }\r\n\r\n        //Found \\n (potentially before \\r, don't care)\r\n        run.length = nindex + 1;\r\n        run.text = remaining.substr(0, run.length);\r\n        run.width = measureTextWidth(run.text, font);\r\n        pass.index += run.length;\r\n        return true;\r\n    }\r\n\r\n    function measureTextWidth (text: string, font: Font): number {\r\n        return engine.Surface.measureWidth(text, font);\r\n    }\r\n}","module minerva.text.run {\r\n    interface IRunLayoutPass {\r\n        text: string;\r\n        index: number;\r\n        max: number;\r\n    }\r\n\r\n    export function doLayoutWrap (docctx: IDocumentContext, docassets: IDocumentAssets, assets: ITextAssets) {\r\n        var pass: IRunLayoutPass = {\r\n            text: assets.text,\r\n            index: 0,\r\n            max: assets.text.length\r\n        };\r\n\r\n        var font = assets.font;\r\n\r\n        var line = new layout.Line();\r\n        line.height = font.getHeight();\r\n        docassets.actualHeight += line.height;\r\n        docassets.lines.push(line);\r\n\r\n        var run = new layout.Run();\r\n        run.attrs = assets;\r\n        line.runs.push(run);\r\n\r\n        while (pass.index < pass.max) {\r\n            var hitbreak = isFinite(docassets.maxWidth) ? advanceFinite(run, pass, font, docassets.maxWidth) : advanceInfinite(run, pass, font);\r\n            if (hitbreak) {\r\n                docassets.actualWidth = Math.max(docassets.actualWidth, run.width);\r\n                line.width = run.width;\r\n                line = new layout.Line();\r\n                line.height = font.getHeight();\r\n                docassets.actualHeight += line.height;\r\n                docassets.lines.push(line);\r\n\r\n                run = new layout.Run();\r\n                run.attrs = assets;\r\n                line.runs.push(run);\r\n            }\r\n        }\r\n        line.width = run.width;\r\n        docassets.actualWidth = Math.max(docassets.actualWidth, run.width);\r\n    }\r\n\r\n    function advanceInfinite (run: layout.Run, pass: IRunLayoutPass, font: Font): boolean {\r\n        //NOTE: Returning true implies a new line is necessary\r\n        var remaining = pass.text.substr(pass.index);\r\n        var rindex = remaining.indexOf('\\r');\r\n        var nindex = remaining.indexOf('\\n');\r\n\r\n        if (rindex < 0 && nindex < 0) {\r\n            //Didn't find \\r or \\n\r\n            run.length = remaining.length;\r\n            run.text = remaining;\r\n            run.width = measureTextWidth(run.text, font);\r\n            pass.index += run.length;\r\n            return false;\r\n        }\r\n\r\n        if (rindex > -1 && rindex + 1 === nindex) {\r\n            //Found \\r\\n\r\n            run.length = nindex + 1;\r\n            run.text = remaining.substr(0, run.length);\r\n            run.width = measureTextWidth(run.text, font);\r\n            pass.index += run.length;\r\n            return true;\r\n        }\r\n\r\n        if (rindex > -1 && rindex < nindex) {\r\n            //Found \\r before \\n, but not back-to-back\r\n            run.length = rindex + 1;\r\n            run.text = remaining.substr(0, run.length);\r\n            run.width = measureTextWidth(run.text, font);\r\n            pass.index += run.length;\r\n            return true;\r\n        }\r\n\r\n        //Found \\n (potentially before \\r, don't care)\r\n        run.length = nindex + 1;\r\n        run.text = remaining.substr(0, run.length);\r\n        run.width = measureTextWidth(run.text, font);\r\n        pass.index += run.length;\r\n        return true;\r\n    }\r\n\r\n    function advanceFinite (run: layout.Run, pass: IRunLayoutPass, font: Font, maxWidth: number): boolean {\r\n        //NOTE: Returning true implies a new line is necessary\r\n        var text = pass.text;\r\n        var start = pass.index;\r\n        var lastSpace = -1;\r\n        var c: string;\r\n        var curText = \"\";\r\n        var curWidth = 0;\r\n        while (pass.index < pass.max) {\r\n            c = text.charAt(pass.index);\r\n            curText += c;\r\n            curWidth = measureTextWidth(curText, font);\r\n            if (c === '\\n') {\r\n                run.length = pass.index - start + 1;\r\n                run.text = text.substr(start, run.length);\r\n                run.width = measureTextWidth(run.text, font);\r\n                pass.index++;\r\n                return true;\r\n            } else if (c === '\\r') {\r\n                run.length = pass.index - start + 1;\r\n                pass.index++;\r\n                if (text.charAt(pass.index) === '\\n') {\r\n                    run.length++;\r\n                    pass.index++;\r\n                }\r\n                run.text = text.substr(start, run.length);\r\n                run.width = measureTextWidth(run.text, font);\r\n                return true;\r\n            }\r\n            if (curWidth > maxWidth) {\r\n                var breakIndex = (lastSpace > -1) ? lastSpace + 1 : pass.index;\r\n                run.length = (breakIndex - start) || 1; //Force at least 1 character\r\n                run.text = text.substr(start, run.length);\r\n                run.width = measureTextWidth(run.text, font);\r\n                pass.index = start + run.length;\r\n                return pass.index < pass.max;\r\n            }\r\n            if (c === ' ')\r\n                lastSpace = pass.index;\r\n            pass.index++;\r\n        }\r\n        run.text = text.substr(start);\r\n        run.length = run.text.length;\r\n        run.width = measureTextWidth(run.text, font);\r\n        return false;\r\n    }\r\n\r\n    function measureTextWidth (text: string, font: Font): number {\r\n        return engine.Surface.measureWidth(text, font);\r\n    }\r\n}"],"sourceRoot":"/source/"}
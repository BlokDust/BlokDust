var Fayde;
(function (Fayde) {
    Fayde.version = '0.16.58';
})(Fayde || (Fayde = {}));
if (!Array.isArray) {
    Array.isArray = function (arg) {
        return Object.prototype.toString.call(arg) === '[object Array]';
    };
}
if (!Function.prototype.bind) {
    Function.prototype.bind = function (oThis) {
        if (typeof this !== 'function') {
            throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');
        }
        var aArgs = Array.prototype.slice.call(arguments, 1), fToBind = this, fNOP = function () {
        }, fBound = function () {
            return fToBind.apply(this instanceof fNOP && oThis
                ? this
                : oThis, aArgs.concat(Array.prototype.slice.call(arguments)));
        };
        fNOP.prototype = this.prototype;
        fBound.prototype = new fNOP();
        return fBound;
    };
}
(function (context) {
    if (!context.perfex) {
        context.perfex = {};
    }
    if (!context.perfex.timer) {
        context.perfex.timer = {
            all: [],
            reset: function () {
            },
            start: function (tag) {
            },
            stop: function () {
            }
        };
    }
    if (!context.perfex.phases) {
        context.perfex.phases = {
            current: null,
            all: [],
            start: function (tag) {
            }
        };
    }
})(window);
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Fayde;
(function (Fayde) {
    Fayde.XMLNS = "http://schemas.wsick.com/fayde";
    Fayde.XMLNSX = "http://schemas.wsick.com/fayde/x";
    Fayde.XMLNSINTERNAL = "http://schemas.wsick.com/fayde/internal";
    Fayde.Enum = nullstone.Enum;
    Fayde.Uri = nullstone.Uri;
    var ResourceTypeManager = (function (_super) {
        __extends(ResourceTypeManager, _super);
        function ResourceTypeManager() {
            _super.apply(this, arguments);
        }
        ResourceTypeManager.prototype.resolveResource = function (uri) {
            if (uri.scheme === "lib") {
                var res = uri.resource;
                var full = uri.toString();
                var base = full.replace(res, "");
                var lib = this.resolveLibrary(base);
                if (!lib)
                    throw new Error("Could not find library when resolving resource [" + full + "].");
                return joinPaths(lib.basePath, res.length > 1 ? res.substr(1) : "");
            }
            return uri.toString();
        };
        return ResourceTypeManager;
    })(nullstone.TypeManager);
    Fayde.ResourceTypeManager = ResourceTypeManager;
    Fayde.TypeManager = new ResourceTypeManager(Fayde.XMLNS, Fayde.XMLNSX);
    function joinPaths(base, rel) {
        if (base[base.length - 1] !== "/")
            base += "/";
        return base + (rel[0] === "/" ? rel.substr(1) : rel);
    }
    Fayde.CoreLibrary = Fayde.TypeManager.resolveLibrary(Fayde.XMLNS);
    Fayde.CoreLibrary.$$module = Fayde;
    Fayde.XLibrary = Fayde.TypeManager.resolveLibrary(Fayde.XMLNSX);
    Fayde.XLibrary.$$module = Fayde;
    function RegisterType(type, uri, name) {
        name = name || nullstone.getTypeName(type);
        Fayde.TypeManager.add(uri, name, type);
    }
    Fayde.RegisterType = RegisterType;
    function RegisterEnum(enu, uri, name) {
        Fayde.TypeManager.addEnum(uri, name, enu);
    }
    Fayde.RegisterEnum = RegisterEnum;
    Fayde.IType_ = new nullstone.Interface("IType");
    Fayde.IType_.is = function (o) {
        return typeof o === "function";
    };
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Collections;
    (function (Collections) {
        (function (CollectionChangedAction) {
            CollectionChangedAction[CollectionChangedAction["Add"] = 1] = "Add";
            CollectionChangedAction[CollectionChangedAction["Remove"] = 2] = "Remove";
            CollectionChangedAction[CollectionChangedAction["Replace"] = 3] = "Replace";
            CollectionChangedAction[CollectionChangedAction["Reset"] = 4] = "Reset";
        })(Collections.CollectionChangedAction || (Collections.CollectionChangedAction = {}));
        var CollectionChangedAction = Collections.CollectionChangedAction;
        Fayde.CoreLibrary.addEnum(CollectionChangedAction, "NotifyCollectionChangedAction");
        var CollectionChangedEventArgs = (function () {
            function CollectionChangedEventArgs() {
            }
            CollectionChangedEventArgs.Reset = function (allValues) {
                var args = new CollectionChangedEventArgs();
                Object.defineProperty(args, "Action", { value: CollectionChangedAction.Reset, writable: false });
                Object.defineProperty(args, "OldStartingIndex", { value: 0, writable: false });
                Object.defineProperty(args, "NewStartingIndex", { value: -1, writable: false });
                Object.defineProperty(args, "OldItems", { value: allValues, writable: false });
                Object.defineProperty(args, "NewItems", { value: null, writable: false });
                return args;
            };
            CollectionChangedEventArgs.Replace = function (newValue, oldValue, index) {
                var args = new CollectionChangedEventArgs();
                Object.defineProperty(args, "Action", { value: CollectionChangedAction.Replace, writable: false });
                Object.defineProperty(args, "OldStartingIndex", { value: -1, writable: false });
                Object.defineProperty(args, "NewStartingIndex", { value: index, writable: false });
                Object.defineProperty(args, "OldItems", { value: [oldValue], writable: false });
                Object.defineProperty(args, "NewItems", { value: [newValue], writable: false });
                return args;
            };
            CollectionChangedEventArgs.Add = function (newValue, index) {
                var args = new CollectionChangedEventArgs();
                Object.defineProperty(args, "Action", { value: CollectionChangedAction.Add, writable: false });
                Object.defineProperty(args, "OldStartingIndex", { value: -1, writable: false });
                Object.defineProperty(args, "NewStartingIndex", { value: index, writable: false });
                Object.defineProperty(args, "OldItems", { value: null, writable: false });
                Object.defineProperty(args, "NewItems", { value: [newValue], writable: false });
                return args;
            };
            CollectionChangedEventArgs.AddRange = function (newValues, index) {
                var args = new CollectionChangedEventArgs();
                Object.defineProperty(args, "Action", { value: CollectionChangedAction.Add, writable: false });
                Object.defineProperty(args, "OldStartingIndex", { value: -1, writable: false });
                Object.defineProperty(args, "NewStartingIndex", { value: index, writable: false });
                Object.defineProperty(args, "OldItems", { value: null, writable: false });
                Object.defineProperty(args, "NewItems", { value: newValues, writable: false });
                return args;
            };
            CollectionChangedEventArgs.Remove = function (oldValue, index) {
                var args = new CollectionChangedEventArgs();
                Object.defineProperty(args, "Action", { value: CollectionChangedAction.Remove, writable: false });
                Object.defineProperty(args, "OldStartingIndex", { value: index, writable: false });
                Object.defineProperty(args, "NewStartingIndex", { value: -1, writable: false });
                Object.defineProperty(args, "OldItems", { value: [oldValue], writable: false });
                Object.defineProperty(args, "NewItems", { value: null, writable: false });
                return args;
            };
            return CollectionChangedEventArgs;
        })();
        Collections.CollectionChangedEventArgs = CollectionChangedEventArgs;
    })(Collections = Fayde.Collections || (Fayde.Collections = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Collections;
    (function (Collections) {
        Collections.INotifyCollectionChanged_ = new nullstone.Interface("INotifyCollectionChanged");
        Collections.INotifyCollectionChanged_.is = function (o) {
            return o && o.CollectionChanged instanceof nullstone.Event;
        };
    })(Collections = Fayde.Collections || (Fayde.Collections = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var PropertyChangedEventArgs = (function () {
        function PropertyChangedEventArgs(propertyName) {
            Object.defineProperty(this, "PropertyName", { value: propertyName, writable: false });
        }
        return PropertyChangedEventArgs;
    })();
    Fayde.PropertyChangedEventArgs = PropertyChangedEventArgs;
    Fayde.CoreLibrary.add(PropertyChangedEventArgs);
    Fayde.INotifyPropertyChanged_ = new nullstone.Interface("INotifyPropertyChanged");
    Fayde.INotifyPropertyChanged_.is = function (o) {
        return o && o.PropertyChanged instanceof nullstone.Event;
    };
})(Fayde || (Fayde = {}));
/// <reference path="INotifyCollectionChanged.ts" />
/// <reference path="../Core/INotifyPropertyChanged.ts" />
var Fayde;
(function (Fayde) {
    var Collections;
    (function (Collections) {
        var ObservableCollection = (function () {
            function ObservableCollection() {
                this._ht = [];
                this.CollectionChanged = new nullstone.Event();
                this.PropertyChanged = new nullstone.Event();
            }
            ObservableCollection.prototype.getEnumerator = function () {
                return nullstone.IEnumerator_.fromArray(this._ht);
            };
            Object.defineProperty(ObservableCollection.prototype, "Count", {
                get: function () {
                    return this._ht.length;
                },
                enumerable: true,
                configurable: true
            });
            ObservableCollection.prototype.ToArray = function () {
                return this._ht.slice(0);
            };
            ObservableCollection.prototype.GetValueAt = function (index) {
                var ht = this._ht;
                if (index < 0 || index >= ht.length)
                    throw new IndexOutOfRangeException(index);
                return ht[index];
            };
            ObservableCollection.prototype.SetValueAt = function (index, value) {
                var ht = this._ht;
                if (index < 0 || index >= ht.length)
                    throw new IndexOutOfRangeException(index);
                var oldValue = ht[index];
                ht[index] = value;
                this.CollectionChanged.raise(this, Collections.CollectionChangedEventArgs.Replace(value, oldValue, index));
            };
            ObservableCollection.prototype.Add = function (value) {
                var index = this._ht.push(value) - 1;
                this.CollectionChanged.raise(this, Collections.CollectionChangedEventArgs.Add(value, index));
                this._RaisePropertyChanged("Count");
            };
            ObservableCollection.prototype.AddRange = function (values) {
                var index = this._ht.length;
                var len = values.length;
                for (var i = 0; i < len; i++) {
                    this._ht.push(values[i]);
                }
                this.CollectionChanged.raise(this, Collections.CollectionChangedEventArgs.AddRange(values, index));
                this._RaisePropertyChanged("Count");
            };
            ObservableCollection.prototype.Insert = function (index, value) {
                var ht = this._ht;
                if (index < 0 || index > ht.length)
                    throw new IndexOutOfRangeException(index);
                if (index >= ht.length)
                    ht.push(value);
                else
                    ht.splice(index, 0, value);
                this.CollectionChanged.raise(this, Collections.CollectionChangedEventArgs.Add(value, index));
                this._RaisePropertyChanged("Count");
            };
            ObservableCollection.prototype.IndexOf = function (value) {
                return this._ht.indexOf(value);
            };
            ObservableCollection.prototype.Contains = function (value) {
                return this._ht.indexOf(value) > -1;
            };
            ObservableCollection.prototype.Remove = function (value) {
                var index = this._ht.indexOf(value);
                if (index < 0)
                    return false;
                this._ht.splice(index, 1);
                this.CollectionChanged.raise(this, Collections.CollectionChangedEventArgs.Remove(value, index));
                this._RaisePropertyChanged("Count");
                return true;
            };
            ObservableCollection.prototype.RemoveAt = function (index) {
                if (index < 0 || index >= this._ht.length)
                    throw new IndexOutOfRangeException(index);
                var item = this._ht.splice(index, 1)[0];
                this.CollectionChanged.raise(this, Collections.CollectionChangedEventArgs.Remove(item, index));
                this._RaisePropertyChanged("Count");
            };
            ObservableCollection.prototype.Clear = function () {
                var old = this._ht;
                this._ht = [];
                this.CollectionChanged.raise(this, Collections.CollectionChangedEventArgs.Reset(old));
                this._RaisePropertyChanged("Count");
            };
            ObservableCollection.prototype._RaisePropertyChanged = function (propertyName) {
                this.PropertyChanged.raise(this, new Fayde.PropertyChangedEventArgs(propertyName));
            };
            return ObservableCollection;
        })();
        Collections.ObservableCollection = ObservableCollection;
        Fayde.CoreLibrary.add(ObservableCollection);
        nullstone.ICollection_.mark(ObservableCollection);
    })(Collections = Fayde.Collections || (Fayde.Collections = {}));
})(Fayde || (Fayde = {}));
/// <reference path="ObservableCollection.ts" />
var Fayde;
(function (Fayde) {
    var Collections;
    (function (Collections) {
        var DeepObservableCollection = (function (_super) {
            __extends(DeepObservableCollection, _super);
            function DeepObservableCollection() {
                _super.call(this);
                this.ItemPropertyChanged = new nullstone.Event();
                this.CollectionChanged.on(this._OnCollectionChanged, this);
            }
            DeepObservableCollection.prototype._OnCollectionChanged = function (sender, e) {
                if (e.NewItems) {
                    for (var i = 0; i < e.NewItems.length; i++) {
                        var notify = Fayde.INotifyPropertyChanged_.as(e.NewItems[i]);
                        if (notify)
                            notify.PropertyChanged.on(this._OnItemPropertyChanged, this);
                    }
                }
                if (e.OldItems) {
                    for (var i = 0; i < e.OldItems.length; i++) {
                        var notify = Fayde.INotifyPropertyChanged_.as(e.OldItems[i]);
                        if (notify)
                            notify.PropertyChanged.off(this._OnItemPropertyChanged, this);
                    }
                }
            };
            DeepObservableCollection.prototype._OnItemPropertyChanged = function (sender, e) {
                this.ItemPropertyChanged.raise(this, new Collections.ItemPropertyChangedEventArgs(sender, e.PropertyName));
            };
            return DeepObservableCollection;
        })(Collections.ObservableCollection);
        Collections.DeepObservableCollection = DeepObservableCollection;
    })(Collections = Fayde.Collections || (Fayde.Collections = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Collections;
    (function (Collections) {
        var FilteredCollection = (function (_super) {
            __extends(FilteredCollection, _super);
            function FilteredCollection(filter, source) {
                _super.call(this);
                this.Filter = filter;
                this._SetSource(source || new Collections.DeepObservableCollection());
            }
            Object.defineProperty(FilteredCollection.prototype, "Source", {
                get: function () { return this._Source; },
                set: function (value) { this._SetSource(value); },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(FilteredCollection.prototype, "Filter", {
                get: function () {
                    return this._Filter;
                },
                set: function (value) {
                    this._Filter = value;
                    this.Update();
                },
                enumerable: true,
                configurable: true
            });
            FilteredCollection.prototype._SetSource = function (source) {
                if (this._Source) {
                    this._Source.CollectionChanged.off(this._OnSourceCollectionChanged, this);
                    this._Source.ItemPropertyChanged.off(this._OnSourceItemPropertyChanged, this);
                }
                this._Source = source;
                if (source) {
                    source.CollectionChanged.on(this._OnSourceCollectionChanged, this);
                    source.ItemPropertyChanged.on(this._OnSourceItemPropertyChanged, this);
                }
                this.Update();
            };
            FilteredCollection.prototype._OnSourceCollectionChanged = function (sender, e) {
                this.Update();
            };
            FilteredCollection.prototype._OnSourceItemPropertyChanged = function (sender, e) {
                this.Update();
                var index = this.Source.IndexOf(e.Item);
                if (this.Filter && this.Filter(e.Item, index))
                    this.ItemPropertyChanged.raise(this, e);
            };
            FilteredCollection.prototype.Update = function () {
                if (!this._Source)
                    return;
                var filter = this.Filter || (function (item) { return true; });
                for (var i = 0, j = 0, enumerator = this._Source.getEnumerator(); enumerator.moveNext(); i++) {
                    var isIncluded = filter(enumerator.current, i);
                    var isCurrent = j < this.Count && this.GetValueAt(j) === enumerator.current;
                    if (isIncluded && !isCurrent)
                        this.Insert(j, enumerator.current);
                    else if (!isIncluded && isCurrent)
                        this.RemoveAt(j);
                    if (isIncluded)
                        j++;
                }
            };
            return FilteredCollection;
        })(Collections.DeepObservableCollection);
        Collections.FilteredCollection = FilteredCollection;
    })(Collections = Fayde.Collections || (Fayde.Collections = {}));
})(Fayde || (Fayde = {}));
/// <reference path="../Core/INotifyPropertyChanged.ts" />
var Fayde;
(function (Fayde) {
    var Collections;
    (function (Collections) {
        var ItemPropertyChangedEventArgs = (function (_super) {
            __extends(ItemPropertyChangedEventArgs, _super);
            function ItemPropertyChangedEventArgs(item, propertyName) {
                _super.call(this, propertyName);
                Object.defineProperty(this, "Item", { value: item, writable: false });
            }
            return ItemPropertyChangedEventArgs;
        })(Fayde.PropertyChangedEventArgs);
        Collections.ItemPropertyChangedEventArgs = ItemPropertyChangedEventArgs;
    })(Collections = Fayde.Collections || (Fayde.Collections = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Collections;
    (function (Collections) {
        var ReadOnlyObservableCollection = (function () {
            function ReadOnlyObservableCollection(source) {
                this.CollectionChanged = new nullstone.Event();
                this.PropertyChanged = new nullstone.Event();
                this._Source = source;
                this._Source.CollectionChanged.on(this._OnCollectionChanged, this);
                this._Source.PropertyChanged.on(this._OnPropertyChanged, this);
            }
            Object.defineProperty(ReadOnlyObservableCollection.prototype, "Count", {
                get: function () {
                    return this._Source.Count;
                },
                enumerable: true,
                configurable: true
            });
            ReadOnlyObservableCollection.prototype.GetValueAt = function (index) {
                return this._Source.GetValueAt(index);
            };
            ReadOnlyObservableCollection.prototype.getEnumerator = function () {
                return this._Source.getEnumerator();
            };
            ReadOnlyObservableCollection.prototype.ToArray = function () {
                return this._Source.ToArray();
            };
            ReadOnlyObservableCollection.prototype.IndexOf = function (value) {
                return this._Source.IndexOf(value);
            };
            ReadOnlyObservableCollection.prototype.Contains = function (value) {
                return this._Source.Contains(value);
            };
            ReadOnlyObservableCollection.prototype._OnCollectionChanged = function (sender, args) {
                this.CollectionChanged.raise(this, args);
            };
            ReadOnlyObservableCollection.prototype._OnPropertyChanged = function (sender, args) {
                this.PropertyChanged.raise(this, args);
            };
            ReadOnlyObservableCollection.prototype.SetValueAt = function (index, value) {
                throw new Error("Collection is read only.");
            };
            ReadOnlyObservableCollection.prototype.Insert = function (index, value) {
                throw new Error("Collection is read only.");
            };
            ReadOnlyObservableCollection.prototype.Add = function (value) {
                throw new Error("Collection is read only.");
            };
            ReadOnlyObservableCollection.prototype.Remove = function (value) {
                throw new Error("Collection is read only.");
            };
            ReadOnlyObservableCollection.prototype.RemoveAt = function (index) {
                throw new Error("Collection is read only.");
            };
            ReadOnlyObservableCollection.prototype.Clear = function () {
                throw new Error("Collection is read only.");
            };
            return ReadOnlyObservableCollection;
        })();
        Collections.ReadOnlyObservableCollection = ReadOnlyObservableCollection;
        Fayde.CoreLibrary.add(Collections.ObservableCollection);
        nullstone.addTypeInterfaces(ReadOnlyObservableCollection, nullstone.ICollection_, Collections.INotifyCollectionChanged_, Fayde.INotifyPropertyChanged_);
    })(Collections = Fayde.Collections || (Fayde.Collections = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var XamlNode = (function () {
        function XamlNode(xobj) {
            this.ParentNode = null;
            this.Name = "";
            this.NameScope = null;
            this.DocNameScope = null;
            this.IsShareable = false;
            this._OwnerNameScope = null;
            this._LogicalChildren = [];
            this._IAMonitors = null;
            this._DataContext = undefined;
            this._IsEnabled = true;
            this.IsAttached = false;
            this.XObject = xobj;
        }
        Object.defineProperty(XamlNode.prototype, "DataContext", {
            get: function () { return this._DataContext; },
            set: function (value) {
                var old = this._DataContext;
                if (old === value)
                    return;
                this._DataContext = value;
                this.OnDataContextChanged(old, value);
            },
            enumerable: true,
            configurable: true
        });
        XamlNode.prototype.OnDataContextChanged = function (oldDataContext, newDataContext) {
            var childNodes = this._LogicalChildren;
            var len = childNodes.length;
            var childNode = null;
            for (var i = 0; i < len; i++) {
                childNode = childNodes[i];
                childNode.DataContext = newDataContext;
            }
        };
        Object.defineProperty(XamlNode.prototype, "IsEnabled", {
            get: function () { return this._IsEnabled; },
            set: function (value) {
                value = value !== false;
                var old = this._IsEnabled;
                if (old === value)
                    return;
                this._IsEnabled = value;
                this.OnIsEnabledChanged(old, value);
            },
            enumerable: true,
            configurable: true
        });
        XamlNode.prototype.OnIsEnabledChanged = function (oldValue, newValue) {
            var childNodes = this._LogicalChildren;
            var len = childNodes.length;
            var childNode = null;
            for (var i = 0; i < len; i++) {
                childNode = childNodes[i];
                childNode.IsEnabled = newValue;
            }
        };
        XamlNode.prototype.FindName = function (name, doc) {
            var scope = this.FindNameScope();
            var node;
            if (scope)
                node = scope.FindName(name);
            var docscope;
            ;
            if (!node && doc && (docscope = this.DocNameScope))
                node = docscope.FindName(name);
            return node;
        };
        XamlNode.prototype.SetName = function (name) {
            this.Name = name;
            var ns = this.FindNameScope();
            if (ns)
                ns.RegisterName(name, this);
        };
        XamlNode.prototype.FindNameScope = function () {
            if (this._OwnerNameScope)
                return this._OwnerNameScope;
            var curNode = this;
            var ns;
            while (curNode) {
                ns = curNode.NameScope;
                if (ns) {
                    this._OwnerNameScope = ns;
                    return ns;
                }
                curNode = curNode.ParentNode;
            }
            return undefined;
        };
        XamlNode.prototype.SetIsAttached = function (value) {
            if (this.IsAttached === value)
                return;
            this.IsAttached = value;
            this.OnIsAttachedChanged(value);
        };
        XamlNode.prototype.OnIsAttachedChanged = function (newIsAttached) {
            var xobj = this.XObject;
            if (newIsAttached && this.ParentNode && !xobj.App) {
                xobj.App = this.ParentNode.XObject.App;
            }
            var childNodes = this._LogicalChildren;
            var len = childNodes.length;
            var childNode = null;
            for (var i = 0; i < len; i++) {
                childNode = childNodes[i];
                childNode.SetIsAttached(newIsAttached);
            }
            for (var i = 0, monitors = (this._IAMonitors || []).slice(0), len = monitors.length; i < len; i++) {
                monitors[i].Callback(newIsAttached);
            }
            if (!newIsAttached)
                this._OwnerNameScope = undefined;
        };
        XamlNode.prototype.MonitorIsAttached = function (func) {
            var monitors = this._IAMonitors;
            if (!monitors)
                this._IAMonitors = monitors = [];
            var monitor = {
                Callback: func,
                Detach: null
            };
            monitor.Detach = function () {
                var index = monitors.indexOf(monitor);
                if (index > -1)
                    monitors.splice(index, 1);
            };
            this._IAMonitors.push(monitor);
            return monitor;
        };
        XamlNode.prototype.AttachTo = function (parentNode, error) {
            if (this.ParentNode && this.IsShareable)
                return true;
            var data = {
                ParentNode: parentNode,
                ChildNode: this,
                Name: ""
            };
            var curNode = parentNode;
            while (curNode) {
                if (curNode === this) {
                    error.Message = "Cycle found.";
                    error.Data = data;
                    error.Number = BError.Attach;
                    return false;
                }
                curNode = curNode.ParentNode;
            }
            if (this.ParentNode) {
                if (this.ParentNode === parentNode)
                    return true;
                error.Message = "Element is already a child of another element.";
                error.Data = data;
                error.Number = BError.Attach;
                return false;
            }
            var parentScope = parentNode.FindNameScope();
            var thisScope = this.NameScope;
            if (thisScope) {
                if (!thisScope.IsRoot) {
                    parentScope.Absorb(thisScope);
                    this.NameScope = null;
                    this._OwnerNameScope = parentScope;
                }
            }
            else if (parentScope) {
                var name = this.Name;
                if (name) {
                    var existing = parentScope.FindName(name);
                    if (existing && existing !== this) {
                        error.Message = "Name is already registered in parent namescope.";
                        data.Name = name;
                        error.Data = data;
                        error.Number = BError.Attach;
                        return false;
                    }
                    parentScope.RegisterName(name, this);
                }
                this._OwnerNameScope = parentScope;
            }
            var old = this.ParentNode;
            this.ParentNode = parentNode;
            this.OnParentChanged(old, parentNode);
            parentNode._LogicalChildren.push(this);
            this.SetIsAttached(parentNode.IsAttached);
            return true;
        };
        XamlNode.prototype.Detach = function () {
            var name = this.Name;
            if (name && !this.NameScope) {
                var ns = this.FindNameScope();
                if (ns)
                    ns.UnregisterName(this.Name);
            }
            this._OwnerNameScope = null;
            this.SetIsAttached(false);
            var old = this.ParentNode;
            this.ParentNode = null;
            if (old) {
                var index = old._LogicalChildren.indexOf(this);
                if (index > -1)
                    old._LogicalChildren.splice(index, 1);
                this.OnParentChanged(old, null);
            }
        };
        XamlNode.prototype.OnParentChanged = function (oldParentNode, newParentNode) { };
        XamlNode.prototype.GetInheritedEnumerator = function () { return undefined; };
        XamlNode.SetShareable = function (xn) {
            xn.IsShareable = true;
        };
        return XamlNode;
    })();
    Fayde.XamlNode = XamlNode;
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var XamlObject = (function () {
        function XamlObject() {
            this.TemplateOwner = null;
            this.App = null;
            this._ID = XamlObject._LastID++;
            this.XamlNode = this.CreateNode();
        }
        XamlObject.prototype.CreateNode = function () {
            return new Fayde.XamlNode(this);
        };
        Object.defineProperty(XamlObject.prototype, "Name", {
            get: function () { return this.XamlNode.Name; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(XamlObject.prototype, "Parent", {
            get: function () {
                var pn = this.XamlNode.ParentNode;
                if (!pn)
                    return;
                return pn.XObject;
            },
            enumerable: true,
            configurable: true
        });
        XamlObject.prototype.FindName = function (name, doc) {
            var n = this.XamlNode.FindName(name, doc);
            return n ? n.XObject : undefined;
        };
        XamlObject.prototype.Clone = function () {
            var xobj = new this.constructor();
            xobj.CloneCore(this);
            return xobj;
        };
        XamlObject.prototype.CloneCore = function (source) { };
        XamlObject.prototype.IsInheritable = function (propd) { return false; };
        XamlObject._LastID = 0;
        return XamlObject;
    })();
    Fayde.XamlObject = XamlObject;
    Fayde.CoreLibrary.add(XamlObject);
})(Fayde || (Fayde = {}));
var DependencyProperty = (function () {
    function DependencyProperty() {
        this.IsReadOnly = false;
        this.IsCustom = true;
        this.IsAttached = false;
        this.IsInheritable = false;
        this.IsImmutable = false;
        this.AlwaysChange = false;
        this._Coercer = null;
        this._Validator = null;
    }
    DependencyProperty.Register = function (name, getTargetType, ownerType, defaultValue, changedCallback) {
        var propd = new DependencyProperty();
        propd.Name = name;
        propd.GetTargetType = getTargetType;
        propd.OwnerType = ownerType;
        propd.DefaultValue = defaultValue;
        propd.ChangedCallback = changedCallback;
        propd.Store = Fayde.Providers.PropertyStore.Instance;
        propd.FinishRegister();
        return propd;
    };
    DependencyProperty.RegisterReadOnly = function (name, getTargetType, ownerType, defaultValue, changedCallback) {
        var propd = new DependencyProperty();
        propd.Name = name;
        propd.GetTargetType = getTargetType;
        propd.OwnerType = ownerType;
        propd.DefaultValue = defaultValue;
        propd.ChangedCallback = changedCallback;
        propd.IsReadOnly = true;
        propd.Store = Fayde.Providers.PropertyStore.Instance;
        propd.FinishRegister();
        return propd;
    };
    DependencyProperty.RegisterAttached = function (name, getTargetType, ownerType, defaultValue, changedCallback) {
        var propd = new DependencyProperty();
        propd.Name = name;
        propd.GetTargetType = getTargetType;
        propd.OwnerType = ownerType;
        propd.DefaultValue = defaultValue;
        propd.ChangedCallback = changedCallback;
        propd.IsAttached = true;
        propd.Store = Fayde.Providers.PropertyStore.Instance;
        propd.FinishRegister();
        return propd;
    };
    DependencyProperty.RegisterCore = function (name, getTargetType, ownerType, defaultValue, changedCallback) {
        var propd = new DependencyProperty();
        propd.Name = name;
        propd.GetTargetType = getTargetType;
        propd.OwnerType = ownerType;
        propd.DefaultValue = defaultValue;
        propd.ChangedCallback = changedCallback;
        propd.IsCustom = false;
        propd.Store = Fayde.Providers.PropertyStore.Instance;
        propd.FinishRegister();
        return propd;
    };
    DependencyProperty.RegisterReadOnlyCore = function (name, getTargetType, ownerType, defaultValue, changedCallback) {
        var propd = new DependencyProperty();
        propd.Name = name;
        propd.GetTargetType = getTargetType;
        propd.OwnerType = ownerType;
        propd.DefaultValue = defaultValue;
        propd.ChangedCallback = changedCallback;
        propd.IsCustom = false;
        propd.IsReadOnly = true;
        propd.Store = Fayde.Providers.PropertyStore.Instance;
        propd.FinishRegister();
        return propd;
    };
    DependencyProperty.RegisterAttachedCore = function (name, getTargetType, ownerType, defaultValue, changedCallback) {
        var propd = new DependencyProperty();
        propd.Name = name;
        propd.GetTargetType = getTargetType;
        propd.OwnerType = ownerType;
        propd.DefaultValue = defaultValue;
        propd.ChangedCallback = changedCallback;
        propd.IsCustom = false;
        propd.IsAttached = true;
        propd.Store = Fayde.Providers.PropertyStore.Instance;
        propd.FinishRegister();
        return propd;
    };
    DependencyProperty.RegisterImmutable = function (name, getTargetType, ownerType) {
        var propd = new ImmutableDependencyProperty();
        propd.Name = name;
        propd.GetTargetType = getTargetType;
        propd.OwnerType = ownerType;
        propd.DefaultValue = undefined;
        propd.IsImmutable = true;
        propd.Store = Fayde.Providers.ImmutableStore.Instance;
        propd.FinishRegister();
        return propd;
    };
    DependencyProperty.RegisterInheritable = function (name, getTargetType, ownerType, defaultValue, changedCallback) {
        var propd = new DependencyProperty();
        propd.Name = name;
        propd.GetTargetType = getTargetType;
        propd.OwnerType = ownerType;
        propd.DefaultValue = defaultValue;
        propd.ChangedCallback = changedCallback;
        propd.IsCustom = true;
        propd.IsInheritable = true;
        propd.Store = Fayde.Providers.InheritedStore.Instance;
        propd.FinishRegister();
        return propd;
    };
    DependencyProperty.RegisterFull = function (name, getTargetType, ownerType, defaultValue, changedCallback, coercer, alwaysChange, validator, isCustom, isReadOnly, isAttached) {
        var propd = new DependencyProperty();
        propd.Name = name;
        propd.GetTargetType = getTargetType;
        propd.OwnerType = ownerType;
        propd.DefaultValue = defaultValue;
        propd.ChangedCallback = changedCallback;
        propd._Coercer = coercer;
        propd.AlwaysChange = alwaysChange;
        propd._Validator = validator;
        propd.IsCustom = isCustom !== false;
        propd.IsReadOnly = isReadOnly === true;
        propd.IsAttached = isAttached === true;
        propd.Store = Fayde.Providers.PropertyStore.Instance;
        propd.FinishRegister();
        return propd;
    };
    DependencyProperty.prototype.FinishRegister = function () {
        var name = this.Name;
        var ownerType = this.OwnerType;
        if (!ownerType || typeof ownerType !== "function")
            throw new InvalidOperationException("DependencyProperty does not have a valid OwnerType.");
        var registeredDPs = ownerType._RegisteredDPs;
        if (!registeredDPs) {
            var registeredDPs = {};
            Object.defineProperty(ownerType, "_RegisteredDPs", {
                value: registeredDPs,
                enumerable: false,
                writable: false
            });
        }
        if (registeredDPs[name] !== undefined)
            throw new InvalidOperationException("Dependency Property is already registered. [" + name + "]");
        registeredDPs[name] = this;
        this._ID = DependencyProperty._LastID = DependencyProperty._LastID + 1;
        DependencyProperty._IDs[this._ID] = this;
        if (this.IsImmutable)
            return;
        var propd = this;
        var getter = function () {
            return this.GetValue(propd);
        };
        var setter = function (value) {
            this.SetValue(propd, value);
        };
        if (this.IsReadOnly)
            setter = function (value) {
                throw new Exception("Property [" + propd.Name + "] is readonly.");
            };
        Object.defineProperty(ownerType.prototype, this.Name, {
            get: getter,
            set: setter,
            configurable: true
        });
    };
    DependencyProperty.prototype.ExtendTo = function (type) {
        var registeredDPs = type._RegisteredDPs;
        if (!registeredDPs) {
            var registeredDPs = {};
            Object.defineProperty(type, "_RegisteredDPs", {
                value: registeredDPs,
                enumerable: false,
                writable: false
            });
        }
        registeredDPs[this.Name] = this;
        var propd = this;
        var getter = function () {
            return this.GetValue(propd);
        };
        var setter = function (value) {
            this.SetValue(propd, value);
        };
        Object.defineProperty(type.prototype, this.Name, {
            get: getter,
            set: setter,
            configurable: true
        });
        return this;
    };
    DependencyProperty.prototype.ValidateSetValue = function (dobj, value, isValidOut) {
        var coerced = value;
        if (this._Coercer)
            coerced = this._Coercer(dobj, this, coerced);
        isValidOut.IsValid = true;
        if (this._Validator)
            isValidOut.IsValid = !!this._Validator(dobj, this, coerced, value);
        return coerced;
    };
    DependencyProperty.GetDependencyProperty = function (ownerType, name, noError) {
        if (!ownerType)
            return undefined;
        var reg = ownerType._RegisteredDPs;
        var propd;
        if (reg)
            propd = reg[name];
        if (!propd)
            propd = DependencyProperty.GetDependencyProperty(nullstone.getTypeParent(ownerType), name, true);
        if (!propd && !noError)
            throw new Exception("Cannot locate dependency property [" + ownerType.name + "].[" + name + "]");
        return propd;
    };
    DependencyProperty.UnsetValue = {};
    DependencyProperty._IDs = [];
    DependencyProperty._LastID = 0;
    return DependencyProperty;
})();
Fayde.CoreLibrary.add(DependencyProperty);
var ImmutableDependencyProperty = (function (_super) {
    __extends(ImmutableDependencyProperty, _super);
    function ImmutableDependencyProperty() {
        _super.apply(this, arguments);
        this.IsImmutable = true;
    }
    ImmutableDependencyProperty.prototype.Initialize = function (dobj) {
        var storage = Fayde.Providers.GetStorage(dobj, this);
        storage.Precedence = Fayde.Providers.PropertyPrecedence.LocalValue;
        var type = this.GetTargetType();
        var obj = new type();
        Object.defineProperty(dobj, this.Name, {
            value: obj,
            writable: false
        });
        return storage.Local = obj;
    };
    return ImmutableDependencyProperty;
})(DependencyProperty);
var Fayde;
(function (Fayde) {
    var Providers;
    (function (Providers) {
        (function (PropertyPrecedence) {
            PropertyPrecedence[PropertyPrecedence["IsEnabled"] = 0] = "IsEnabled";
            PropertyPrecedence[PropertyPrecedence["LocalValue"] = 1] = "LocalValue";
            PropertyPrecedence[PropertyPrecedence["LocalStyle"] = 2] = "LocalStyle";
            PropertyPrecedence[PropertyPrecedence["ImplicitStyle"] = 3] = "ImplicitStyle";
            PropertyPrecedence[PropertyPrecedence["Inherited"] = 4] = "Inherited";
            PropertyPrecedence[PropertyPrecedence["InheritedDataContext"] = 5] = "InheritedDataContext";
            PropertyPrecedence[PropertyPrecedence["DefaultValue"] = 6] = "DefaultValue";
            PropertyPrecedence[PropertyPrecedence["Lowest"] = 6] = "Lowest";
            PropertyPrecedence[PropertyPrecedence["Highest"] = 0] = "Highest";
            PropertyPrecedence[PropertyPrecedence["Count"] = 7] = "Count";
        })(Providers.PropertyPrecedence || (Providers.PropertyPrecedence = {}));
        var PropertyPrecedence = Providers.PropertyPrecedence;
        function GetStorage(dobj, propd) {
            var arr = dobj._PropertyStorage;
            var storage = arr[propd._ID];
            if (!storage)
                arr[propd._ID] = storage = propd.Store.CreateStorage(dobj, propd);
            return storage;
        }
        Providers.GetStorage = GetStorage;
        var PropertyStore = (function () {
            function PropertyStore() {
            }
            PropertyStore.prototype.GetValue = function (storage) {
                var val;
                if ((val = storage.Local) !== undefined)
                    return val;
                if ((val = storage.LocalStyleValue) !== undefined)
                    return val;
                if ((val = storage.ImplicitStyleValue) !== undefined)
                    return val;
                return storage.Property.DefaultValue;
            };
            PropertyStore.prototype.GetValuePrecedence = function (storage) {
                if (storage.Local !== undefined)
                    return PropertyPrecedence.LocalValue;
                if (storage.LocalStyleValue !== undefined)
                    return PropertyPrecedence.LocalStyle;
                if (storage.ImplicitStyleValue !== undefined)
                    return PropertyPrecedence.ImplicitStyle;
                return PropertyPrecedence.DefaultValue;
            };
            PropertyStore.prototype.SetLocalValue = function (storage, newValue) {
                if (newValue === undefined || newValue === DependencyProperty.UnsetValue) {
                    this.ClearValue(storage);
                    return;
                }
                var propd = storage.Property;
                if (newValue && propd.GetTargetType() === String) {
                    if (typeof newValue !== "string")
                        newValue = newValue.toString();
                }
                var isValidOut = { IsValid: false };
                newValue = propd.ValidateSetValue(storage.OwnerNode.XObject, newValue, isValidOut);
                if (!isValidOut.IsValid)
                    return;
                var precDiff = storage.Precedence - PropertyPrecedence.LocalValue;
                if (!propd.AlwaysChange && precDiff < 0) {
                    storage.Local = newValue;
                    return;
                }
                var oldValue = undefined;
                if (precDiff > 0)
                    oldValue = this.GetValue(storage);
                else
                    oldValue = storage.Local;
                storage.Local = newValue;
                this.OnPropertyChanged(storage, PropertyPrecedence.LocalValue, oldValue, newValue);
            };
            PropertyStore.prototype.SetLocalStyleValue = function (storage, newValue) {
                var precDiff = storage.Precedence - PropertyPrecedence.LocalStyle;
                if (precDiff < 0) {
                    storage.LocalStyleValue = newValue;
                    return;
                }
                var oldValue = undefined;
                if (precDiff > 0)
                    oldValue = this.GetValue(storage);
                else
                    oldValue = storage.LocalStyleValue;
                storage.LocalStyleValue = newValue;
                this.OnPropertyChanged(storage, PropertyPrecedence.LocalStyle, oldValue, newValue);
            };
            PropertyStore.prototype.SetImplicitStyle = function (storage, newValue) {
                var precDiff = storage.Precedence - PropertyPrecedence.ImplicitStyle;
                if (precDiff < 0) {
                    storage.ImplicitStyleValue = newValue;
                    return;
                }
                var oldValue = undefined;
                if (precDiff > 0)
                    oldValue = this.GetValue(storage);
                else
                    oldValue = storage.ImplicitStyleValue;
                storage.ImplicitStyleValue = newValue;
                this.OnPropertyChanged(storage, PropertyPrecedence.ImplicitStyle, oldValue, newValue);
            };
            PropertyStore.prototype.ClearValue = function (storage) {
                var oldLocal = storage.Local;
                if (oldLocal === undefined)
                    return;
                storage.Local = undefined;
                this.OnPropertyChanged(storage, PropertyPrecedence.LocalValue, oldLocal, undefined);
            };
            PropertyStore.prototype.OnPropertyChanged = function (storage, effectivePrecedence, oldValue, newValue) {
                var propd = storage.Property;
                if (newValue === undefined) {
                    effectivePrecedence = this.GetValuePrecedence(storage);
                    newValue = this.GetValue(storage);
                }
                storage.Precedence = effectivePrecedence;
                if (!propd.AlwaysChange && oldValue === newValue)
                    return undefined;
                if (!storage.Property.IsCustom) {
                    if (oldValue instanceof Fayde.XamlObject)
                        oldValue.XamlNode.Detach();
                    if (newValue instanceof Fayde.XamlObject) {
                        var error = new BError();
                        if (!newValue.XamlNode.AttachTo(storage.OwnerNode, error))
                            error.ThrowException();
                    }
                }
                var args = {
                    Property: propd,
                    OldValue: oldValue,
                    NewValue: newValue
                };
                var sender = storage.OwnerNode.XObject;
                if (propd.ChangedCallback)
                    propd.ChangedCallback(sender, args);
                var listeners = storage.PropListeners;
                if (listeners) {
                    var len = listeners.length;
                    for (var i = 0; i < len; i++) {
                        listeners[i].OnPropertyChanged(sender, args);
                    }
                }
                return args;
            };
            PropertyStore.prototype.ListenToChanged = function (target, propd, func, closure) {
                var storage = GetStorage(target, propd);
                var listeners = storage.PropListeners;
                if (!listeners)
                    listeners = storage.PropListeners = [];
                var listener = {
                    Detach: function () {
                        var index = listeners.indexOf(listener);
                        if (index > -1)
                            listeners.splice(index, 1);
                    },
                    Property: propd,
                    OnPropertyChanged: function (sender, args) { func.call(closure, sender, args); }
                };
                listeners.push(listener);
                return listener;
            };
            PropertyStore.prototype.CreateStorage = function (dobj, propd) {
                return {
                    OwnerNode: dobj.XamlNode,
                    Property: propd,
                    Precedence: PropertyPrecedence.DefaultValue,
                    Animations: undefined,
                    Local: undefined,
                    LocalStyleValue: undefined,
                    ImplicitStyleValue: undefined,
                    PropListeners: undefined,
                };
            };
            PropertyStore.prototype.Clone = function (dobj, sourceStorage) {
                var newStorage = this.CreateStorage(dobj, sourceStorage.Property);
                newStorage.Precedence = sourceStorage.Precedence;
                newStorage.Local = Fayde.Clone(sourceStorage.Local);
                var anims = newStorage.Animations = sourceStorage.Animations;
                if (anims) {
                    for (var i = 0; i < anims.length; i++) {
                        anims[i].PropStorage = newStorage;
                    }
                }
                return newStorage;
            };
            return PropertyStore;
        })();
        Providers.PropertyStore = PropertyStore;
        PropertyStore.Instance = new PropertyStore();
    })(Providers = Fayde.Providers || (Fayde.Providers = {}));
})(Fayde || (Fayde = {}));
/// <reference path="PropertyStore.ts" />
var Fayde;
(function (Fayde) {
    var Providers;
    (function (Providers) {
        var DataContextStore = (function (_super) {
            __extends(DataContextStore, _super);
            function DataContextStore() {
                _super.apply(this, arguments);
            }
            DataContextStore.prototype.GetValue = function (storage) {
                var val = _super.prototype.GetValue.call(this, storage);
                if (val === undefined)
                    val = storage.InheritedValue;
                return val;
            };
            DataContextStore.prototype.GetValuePrecedence = function (storage) {
                var prec = _super.prototype.GetValuePrecedence.call(this, storage);
                if (prec < Providers.PropertyPrecedence.InheritedDataContext)
                    return prec;
                if (storage.InheritedValue !== undefined)
                    return Providers.PropertyPrecedence.InheritedDataContext;
                return Providers.PropertyPrecedence.DefaultValue;
            };
            DataContextStore.prototype.OnInheritedChanged = function (storage, newInherited) {
                var oldInherited = storage.InheritedValue;
                storage.InheritedValue = newInherited;
                if (storage.Precedence >= Providers.PropertyPrecedence.InheritedDataContext && oldInherited !== newInherited)
                    this.OnPropertyChanged(storage, Providers.PropertyPrecedence.InheritedDataContext, oldInherited, newInherited);
            };
            DataContextStore.prototype.CreateStorage = function (dobj, propd) {
                return {
                    OwnerNode: dobj.XamlNode,
                    Property: propd,
                    Precedence: Providers.PropertyPrecedence.DefaultValue,
                    Animations: undefined,
                    Local: undefined,
                    LocalStyleValue: undefined,
                    ImplicitStyleValue: undefined,
                    InheritedValue: undefined,
                    PropListeners: undefined,
                };
            };
            DataContextStore.prototype.OnPropertyChanged = function (storage, effectivePrecedence, oldValue, newValue) {
                var args = _super.prototype.OnPropertyChanged.call(this, storage, effectivePrecedence, oldValue, newValue);
                if (args) {
                    if (effectivePrecedence > Providers.PropertyPrecedence.LocalValue && this.TryUpdateDataContextExpression(storage, args.NewValue))
                        return;
                    storage.OwnerNode.OnDataContextChanged(args.OldValue, args.NewValue);
                }
                return args;
            };
            DataContextStore.prototype.TryUpdateDataContextExpression = function (storage, newDataContext) {
                var val = storage.InheritedValue;
                var exprs = storage.OwnerNode.XObject._Expressions;
                var dcexpr = exprs[storage.Property._ID];
                if (!dcexpr)
                    return false;
                dcexpr.OnDataContextChanged(newDataContext);
                return true;
            };
            return DataContextStore;
        })(Providers.PropertyStore);
        Providers.DataContextStore = DataContextStore;
        DataContextStore.Instance = new DataContextStore();
    })(Providers = Fayde.Providers || (Fayde.Providers = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    function DPReaction(propd, callback, listen) {
        if (listen === false) {
            propd.ChangedCallback = reaction(callback);
        }
        else {
            propd.ChangedCallback = lReaction(callback);
        }
    }
    Fayde.DPReaction = DPReaction;
    function reaction(callback) {
        return function (dobj, args) {
            callback && callback(dobj, args.OldValue, args.NewValue);
        };
    }
    function lReaction(callback) {
        return function (dobj, args) {
            var ov = args.OldValue;
            var nv = args.NewValue;
            Fayde.UnreactTo(ov, dobj);
            callback && callback(dobj, ov, nv);
            Fayde.ReactTo(nv, dobj, function () { return callback(dobj, nv, nv); });
        };
    }
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    function Incite(obj, val) {
        if (!obj)
            return;
        var reactions = obj.$$reactions;
        if (!reactions)
            return;
        var rs = obj.$$reaction_sources;
        for (var i = 0; i < reactions.length; i++) {
            reactions[i].call(rs[i], val);
        }
    }
    Fayde.Incite = Incite;
    function ReactTo(obj, scope, changed) {
        if (!obj)
            return;
        var rs = obj.$$reaction_sources;
        if (!rs) {
            rs = [];
            Object.defineProperty(obj, "$$reaction_sources", { value: rs, enumerable: false });
        }
        rs.push(scope);
        var reactions = obj.$$reactions;
        if (!reactions) {
            reactions = [];
            Object.defineProperty(obj, "$$reactions", { value: reactions, enumerable: false });
        }
        reactions.push(changed);
    }
    Fayde.ReactTo = ReactTo;
    function UnreactTo(obj, scope) {
        if (!obj)
            return;
        var reactions = obj.$$reactions;
        if (!reactions)
            return;
        var rs = obj.$$reaction_sources;
        var index = rs.indexOf(scope);
        if (index < 0)
            return;
        rs.splice(index, 1);
        reactions.splice(index, 1);
    }
    Fayde.UnreactTo = UnreactTo;
})(Fayde || (Fayde = {}));
/// <reference path="XamlNode.ts" />
/// <reference path="XamlObject.ts" />
/// <reference path="DependencyProperty.ts" />
/// <reference path="Providers/PropertyStore.ts" />
/// <reference path="Providers/DataContextStore.ts" />
/// <reference path="DPReaction.ts" />
/// <reference path="../Runtime/React.ts" />
var Fayde;
(function (Fayde) {
    var DONode = (function (_super) {
        __extends(DONode, _super);
        function DONode(xobj) {
            _super.call(this, xobj);
        }
        DONode.prototype.OnParentChanged = function (oldParentNode, newParentNode) {
            _super.prototype.OnParentChanged.call(this, oldParentNode, newParentNode);
            var propd = DependencyObject.DataContextProperty;
            var storage = Fayde.Providers.GetStorage(this.XObject, propd);
            var newInherited = newParentNode ? newParentNode.DataContext : undefined;
            propd.Store.OnInheritedChanged(storage, newInherited);
        };
        Object.defineProperty(DONode.prototype, "DataContext", {
            get: function () { return this.XObject.DataContext; },
            set: function (value) {
                var propd = DependencyObject.DataContextProperty;
                var storage = Fayde.Providers.GetStorage(this.XObject, propd);
                propd.Store.OnInheritedChanged(storage, value);
            },
            enumerable: true,
            configurable: true
        });
        DONode.prototype.OnDataContextChanged = function (oldDataContext, newDataContext) {
            var dcpid = DependencyObject.DataContextProperty._ID.toString();
            var exprs = this.XObject._Expressions;
            var expr;
            for (var id in exprs) {
                expr = exprs[id];
                if (!(expr instanceof Fayde.Expression))
                    continue;
                if (id === dcpid)
                    continue;
                expr.OnDataContextChanged(newDataContext);
            }
            _super.prototype.OnDataContextChanged.call(this, oldDataContext, newDataContext);
        };
        return DONode;
    })(Fayde.XamlNode);
    Fayde.DONode = DONode;
    var DependencyObject = (function (_super) {
        __extends(DependencyObject, _super);
        function DependencyObject() {
            _super.call(this);
            this._Expressions = [];
            this._PropertyStorage = [];
        }
        DependencyObject.prototype.CreateNode = function () { return new DONode(this); };
        DependencyObject.prototype.GetValue = function (propd) {
            if (!propd)
                throw new ArgumentException("No property specified.");
            var storage = Fayde.Providers.GetStorage(this, propd);
            return propd.Store.GetValue(storage);
        };
        DependencyObject.prototype.SetValue = function (propd, value) {
            if (!propd)
                throw new ArgumentException("No property specified.");
            if (propd.IsReadOnly)
                throw new InvalidOperationException("DependencyProperty '" + propd.OwnerType.name + "." + propd.Name + "' is read only.");
            this.SetValueInternal(propd, value);
        };
        DependencyObject.prototype.SetValueInternal = function (propd, value) {
            var expression;
            if (value instanceof Fayde.Expression) {
                expression = value;
                expression.Seal(this, propd);
            }
            var existing = this._Expressions[propd._ID];
            var updateTwoWay = false;
            var addingExpression = false;
            if (expression) {
                if (expression !== existing) {
                    if (expression.IsAttached)
                        throw new ArgumentException("Cannot attach the same Expression to multiple FrameworkElements");
                    if (existing)
                        this._RemoveExpression(propd);
                    this._AddExpression(propd, expression);
                }
                addingExpression = true;
                value = expression.GetValue(propd);
            }
            else if (existing) {
                if (existing instanceof Fayde.Data.BindingExpressionBase) {
                    var binding = existing.ParentBinding;
                    if (binding.Mode === Fayde.Data.BindingMode.TwoWay) {
                        updateTwoWay = !existing.IsUpdating && !propd.IsCustom;
                    }
                    else if (!existing.IsUpdating || binding.Mode === Fayde.Data.BindingMode.OneTime) {
                        this._RemoveExpression(propd);
                    }
                }
                else if (!existing.IsUpdating) {
                    this._RemoveExpression(propd);
                }
            }
            var storage = Fayde.Providers.GetStorage(this, propd);
            try {
                propd.Store.SetLocalValue(storage, value);
                if (updateTwoWay)
                    existing._TryUpdateSourceObject(value);
            }
            catch (err) {
                if (!addingExpression)
                    throw err;
                var msg = "Error setting value: " + err.toString();
                msg += err.stack;
                console.warn(msg);
                propd.Store.SetLocalValue(storage, propd.DefaultValue);
                if (updateTwoWay)
                    existing._TryUpdateSourceObject(value);
            }
        };
        DependencyObject.prototype.SetCurrentValue = function (propd, value) {
            var storage = Fayde.Providers.GetStorage(this, propd);
            propd.Store.SetLocalValue(storage, value);
            var expr = this._Expressions[propd._ID];
            if (expr instanceof Fayde.Data.BindingExpressionBase)
                expr._TryUpdateSourceObject(value);
        };
        DependencyObject.prototype.ClearValue = function (propd) {
            if (!propd)
                throw new ArgumentException("No dependency property.");
            if (propd.IsReadOnly && !propd.IsCustom)
                throw new ArgumentException("This property is readonly.");
            this._RemoveExpression(propd);
            var storage = Fayde.Providers.GetStorage(this, propd);
            var anims = storage.Animations;
            if (anims && anims.length > 0)
                return;
            propd.Store.ClearValue(storage);
        };
        DependencyObject.prototype.ReadLocalValue = function (propd) {
            if (!propd)
                throw new ArgumentException("No property specified.");
            var expr = this._Expressions[propd._ID];
            var val;
            if (expr)
                val = expr.GetValue(propd);
            else
                val = this.ReadLocalValueInternal(propd);
            if (val === undefined)
                return DependencyProperty.UnsetValue;
            return val;
        };
        DependencyObject.prototype.ReadLocalValueInternal = function (propd) {
            var storage = Fayde.Providers.GetStorage(this, propd);
            return storage.Local;
        };
        DependencyObject.prototype._AddExpression = function (propd, expr) {
            this._Expressions[propd._ID] = expr;
            expr.OnAttached(this);
        };
        DependencyObject.prototype._RemoveExpression = function (propd) {
            var expr = this._Expressions[propd._ID];
            if (expr) {
                this._Expressions[propd._ID] = undefined;
                expr.OnDetached(this);
            }
        };
        DependencyObject.prototype._HasDeferredValueExpression = function (propd) {
            var expr = this._Expressions[propd._ID];
            return expr instanceof Fayde.DeferredValueExpression;
        };
        DependencyObject.prototype.GetBindingExpression = function (propd) {
            var expr = this._Expressions[propd._ID];
            if (expr instanceof Fayde.Data.BindingExpressionBase)
                return expr;
        };
        DependencyObject.prototype.HasValueOrExpression = function (propd) {
            if (this._Expressions[propd._ID] instanceof Fayde.Expression)
                return true;
            return this.ReadLocalValueInternal(propd) !== undefined;
        };
        DependencyObject.prototype.SetBinding = function (propd, binding) {
            if (!propd)
                throw new ArgumentException("propd");
            if (!binding)
                throw new ArgumentException("binding");
            var e = new Fayde.Data.BindingExpression(binding);
            this.SetValueInternal(propd, e);
            return e;
        };
        DependencyObject.prototype.CloneCore = function (source) {
            var sarr = source._PropertyStorage;
            var darr = this._PropertyStorage;
            if (!darr)
                darr = this._PropertyStorage = [];
            for (var id in sarr) {
                var storage = sarr[id];
                darr[id] = storage.Property.Store.Clone(this, storage);
            }
        };
        DependencyObject.prototype.ListenToChanged = function (propd, func, closure) {
            return propd.Store.ListenToChanged(this, propd, func, closure);
        };
        DependencyObject.DataContextProperty = DependencyProperty.Register("DataContext", function () { return Object; }, DependencyObject);
        return DependencyObject;
    })(Fayde.XamlObject);
    Fayde.DependencyObject = DependencyObject;
    Fayde.CoreLibrary.add(DependencyObject);
    DependencyObject.DataContextProperty.Store = Fayde.Providers.DataContextStore.Instance;
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    function UIReaction(propd, callback, listen, sync, instance) {
        var changed;
        if (sync === false) {
            changed = (listen === false) ? reaction(callback) : lReaction(callback);
        }
        else {
            var name = propd.Name;
            name = name.charAt(0).toLowerCase() + name.substr(1);
            if (typeof sync !== "function")
                changed = (listen === false) ? sReaction(callback, name) : slReaction(callback, name);
            else
                changed = (listen === false) ? sReaction(callback, name, sync) : slReaction(callback, name, sync);
        }
        if (instance)
            propd.Store.ListenToChanged(instance, propd, changed, instance);
        else
            propd.ChangedCallback = changed;
    }
    Fayde.UIReaction = UIReaction;
    function reaction(callback) {
        return function (uie, args) {
            callback && callback(uie.XamlNode.LayoutUpdater, args.OldValue, args.NewValue, uie);
        };
    }
    function sReaction(callback, name, syncer) {
        return function (uie, args) {
            var ov = args.OldValue;
            var nv = args.NewValue;
            var upd = uie.XamlNode.LayoutUpdater;
            if (!syncer)
                upd.assets[name] = nv;
            else
                syncer(nv, upd.assets[name]);
            callback && callback(upd, ov, nv, uie);
        };
    }
    function lReaction(callback) {
        return function (uie, args) {
            var ov = args.OldValue;
            var nv = args.NewValue;
            var upd = uie.XamlNode.LayoutUpdater;
            Fayde.UnreactTo(ov, uie);
            callback && callback(upd, ov, nv, uie);
            Fayde.ReactTo(nv, uie, function () { return callback(upd, nv, nv, uie); });
        };
    }
    function slReaction(callback, name, syncer) {
        return function (uie, args) {
            var ov = args.OldValue;
            var nv = args.NewValue;
            var upd = uie.XamlNode.LayoutUpdater;
            Fayde.UnreactTo(ov, uie);
            if (!syncer)
                upd.assets[name] = nv;
            else
                syncer(nv, upd.assets[name]);
            callback && callback(upd, ov, nv, uie);
            Fayde.ReactTo(nv, uie, function () { return callback && callback(upd, nv, nv, uie); });
        };
    }
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    function UIReactionAttached(propd, callback) {
        propd.ChangedCallback = reaction(nullstone.getTypeName(propd.OwnerType) + '.' + propd.Name, callback);
    }
    Fayde.UIReactionAttached = UIReactionAttached;
    function reaction(name, callback) {
        return function (uie, args) {
            var ov = args.OldValue;
            var nv = args.NewValue;
            var upd = uie.XamlNode.LayoutUpdater;
            upd.setAttachedValue(name, nv);
            callback && callback(upd, ov, nv, uie);
        };
    }
})(Fayde || (Fayde = {}));
/// <reference path="PropertyStore.ts" />
var Fayde;
(function (Fayde) {
    var Providers;
    (function (Providers) {
        var InheritedStore = (function (_super) {
            __extends(InheritedStore, _super);
            function InheritedStore() {
                _super.apply(this, arguments);
            }
            InheritedStore.prototype.GetValue = function (storage) {
                var val;
                if ((val = storage.Local) !== undefined)
                    return val;
                if ((val = storage.LocalStyleValue) !== undefined)
                    return val;
                if ((val = storage.ImplicitStyleValue) !== undefined)
                    return val;
                if ((val = storage.InheritedValue) !== undefined)
                    return val;
                return storage.Property.DefaultValue;
            };
            InheritedStore.prototype.GetValuePrecedence = function (storage) {
                var prec = _super.prototype.GetValuePrecedence.call(this, storage);
                if (prec < Providers.PropertyPrecedence.Inherited)
                    return prec;
                if (storage.InheritedValue !== undefined)
                    return Providers.PropertyPrecedence.Inherited;
                return Providers.PropertyPrecedence.DefaultValue;
            };
            InheritedStore.prototype.OnPropertyChanged = function (storage, effectivePrecedence, oldValue, newValue) {
                var args = _super.prototype.OnPropertyChanged.call(this, storage, effectivePrecedence, oldValue, newValue);
                if (effectivePrecedence <= Providers.PropertyPrecedence.Inherited)
                    this.Propagate(storage.OwnerNode, storage.Property, newValue);
                return args;
            };
            InheritedStore.prototype.CreateStorage = function (dobj, propd) {
                return {
                    OwnerNode: dobj.XamlNode,
                    Property: propd,
                    Precedence: Providers.PropertyPrecedence.DefaultValue,
                    Animations: undefined,
                    Local: undefined,
                    LocalStyleValue: undefined,
                    ImplicitStyleValue: undefined,
                    InheritedValue: undefined,
                    PropListeners: undefined,
                };
            };
            InheritedStore.PropagateInheritedOnAdd = function (dobj, subtreeNode) {
                var destination = subtreeNode.XObject;
                var store = InheritedStore.Instance;
                var arr = destination._PropertyStorage;
                var storage;
                var allProps = Fayde.InheritableOwner.AllInheritedProperties;
                var len = allProps.length;
                var propd;
                var newValue;
                var sourceNode;
                for (var i = 0; i < len; i++) {
                    propd = allProps[i];
                    sourceNode = dobj.XamlNode;
                    while (sourceNode && !(sourceNode.XObject.IsInheritable(propd))) {
                        sourceNode = sourceNode.ParentNode;
                    }
                    if (!sourceNode)
                        continue;
                    newValue = sourceNode.XObject.GetValue(propd);
                    if (newValue === propd.DefaultValue)
                        continue;
                    storage = arr[propd._ID];
                    if (!storage)
                        storage = arr[propd._ID] = store.CreateStorage(destination, propd);
                    if (!store.SetInheritedValue(subtreeNode, propd, newValue))
                        store.Propagate(subtreeNode, propd, newValue);
                }
            };
            InheritedStore.ClearInheritedOnRemove = function (dobj, subtreeNode) {
                var store = InheritedStore.Instance;
                var allProps = Fayde.InheritableOwner.AllInheritedProperties;
                var len = allProps.length;
                var propd;
                for (var i = 0; i < len; i++) {
                    propd = allProps[i];
                    if (!store.SetInheritedValue(subtreeNode, propd, undefined))
                        store.Propagate(subtreeNode, propd, undefined);
                }
            };
            InheritedStore.prototype.Propagate = function (ownerNode, propd, newValue) {
                var enumerator = ownerNode.GetInheritedEnumerator();
                var uin;
                while (enumerator.moveNext()) {
                    uin = enumerator.current;
                    if (!this.SetInheritedValue(uin, propd, newValue))
                        this.Propagate(uin, propd, newValue);
                }
            };
            InheritedStore.prototype.SetInheritedValue = function (don, propd, newValue) {
                var dobj = don.XObject;
                if (!dobj.IsInheritable(propd))
                    return false;
                var storage = Providers.GetStorage(dobj, propd);
                if (storage.Precedence < Providers.PropertyPrecedence.Inherited) {
                    storage.InheritedValue = newValue;
                    return true;
                }
                var oldValue = storage.InheritedValue;
                if (oldValue === undefined)
                    oldValue = propd.DefaultValue;
                storage.InheritedValue = newValue;
                storage.Precedence = Providers.PropertyPrecedence.Inherited;
                this.OnPropertyChanged(storage, Providers.PropertyPrecedence.Inherited, oldValue, newValue);
                return true;
            };
            return InheritedStore;
        })(Providers.PropertyStore);
        Providers.InheritedStore = InheritedStore;
        InheritedStore.Instance = new InheritedStore();
    })(Providers = Fayde.Providers || (Fayde.Providers = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    (function (Orientation) {
        Orientation[Orientation["Horizontal"] = 0] = "Horizontal";
        Orientation[Orientation["Vertical"] = 1] = "Vertical";
    })(Fayde.Orientation || (Fayde.Orientation = {}));
    var Orientation = Fayde.Orientation;
    Fayde.CoreLibrary.addEnum(Orientation, "Orientation");
    (function (Visibility) {
        Visibility[Visibility["Visible"] = 0] = "Visible";
        Visibility[Visibility["Collapsed"] = 1] = "Collapsed";
    })(Fayde.Visibility || (Fayde.Visibility = {}));
    var Visibility = Fayde.Visibility;
    Fayde.CoreLibrary.addEnum(Visibility, "Visibility");
    nullstone.registerEnumConverter(Visibility, function (val) {
        if (val === "true" || val === true || val === Visibility.Visible || val === "Visible")
            return Visibility.Visible;
        return Visibility.Collapsed;
    });
    (function (CursorType) {
        CursorType[CursorType["Default"] = 0] = "Default";
        CursorType[CursorType["Hand"] = 1] = "Hand";
        CursorType[CursorType["IBeam"] = 2] = "IBeam";
        CursorType[CursorType["Wait"] = 3] = "Wait";
        CursorType[CursorType["SizeNESW"] = 4] = "SizeNESW";
        CursorType[CursorType["SizeNWSE"] = 5] = "SizeNWSE";
        CursorType[CursorType["SizeNS"] = 6] = "SizeNS";
        CursorType[CursorType["SizeWE"] = 7] = "SizeWE";
    })(Fayde.CursorType || (Fayde.CursorType = {}));
    var CursorType = Fayde.CursorType;
    Fayde.CoreLibrary.addEnum(CursorType, "CursorType");
    Fayde.CursorTypeMappings = {
        Default: "",
        Hand: "pointer",
        IBeam: "text",
        Wait: "wait",
        SizeNESW: "ne-resize",
        SizeNWSE: "nw-resize",
        SizeNS: "n-resize",
        SizeWE: "w-resize"
    };
    (function (HorizontalAlignment) {
        HorizontalAlignment[HorizontalAlignment["Left"] = 0] = "Left";
        HorizontalAlignment[HorizontalAlignment["Center"] = 1] = "Center";
        HorizontalAlignment[HorizontalAlignment["Right"] = 2] = "Right";
        HorizontalAlignment[HorizontalAlignment["Stretch"] = 3] = "Stretch";
    })(Fayde.HorizontalAlignment || (Fayde.HorizontalAlignment = {}));
    var HorizontalAlignment = Fayde.HorizontalAlignment;
    Fayde.CoreLibrary.addEnum(HorizontalAlignment, "HorizontalAlignment");
    (function (VerticalAlignment) {
        VerticalAlignment[VerticalAlignment["Top"] = 0] = "Top";
        VerticalAlignment[VerticalAlignment["Center"] = 1] = "Center";
        VerticalAlignment[VerticalAlignment["Bottom"] = 2] = "Bottom";
        VerticalAlignment[VerticalAlignment["Stretch"] = 3] = "Stretch";
    })(Fayde.VerticalAlignment || (Fayde.VerticalAlignment = {}));
    var VerticalAlignment = Fayde.VerticalAlignment;
    Fayde.CoreLibrary.addEnum(VerticalAlignment, "VerticalAlignment");
    (function (FlowDirection) {
        FlowDirection[FlowDirection["LeftToRight"] = 0] = "LeftToRight";
        FlowDirection[FlowDirection["RightToLeft"] = 1] = "RightToLeft";
    })(Fayde.FlowDirection || (Fayde.FlowDirection = {}));
    var FlowDirection = Fayde.FlowDirection;
    Fayde.CoreLibrary.addEnum(FlowDirection, "FlowDirection");
    (function (FontWeight) {
        FontWeight[FontWeight["Thin"] = 100] = "Thin";
        FontWeight[FontWeight["ExtraLight"] = 200] = "ExtraLight";
        FontWeight[FontWeight["Light"] = 300] = "Light";
        FontWeight[FontWeight["Normal"] = 400] = "Normal";
        FontWeight[FontWeight["Medium"] = 500] = "Medium";
        FontWeight[FontWeight["SemiBold"] = 600] = "SemiBold";
        FontWeight[FontWeight["Bold"] = 700] = "Bold";
        FontWeight[FontWeight["ExtraBold"] = 800] = "ExtraBold";
        FontWeight[FontWeight["Black"] = 900] = "Black";
        FontWeight[FontWeight["ExtraBlack"] = 950] = "ExtraBlack";
    })(Fayde.FontWeight || (Fayde.FontWeight = {}));
    var FontWeight = Fayde.FontWeight;
    Fayde.CoreLibrary.addEnum(FontWeight, "FontWeight");
    (function (TextAlignment) {
        TextAlignment[TextAlignment["Left"] = 0] = "Left";
        TextAlignment[TextAlignment["Center"] = 1] = "Center";
        TextAlignment[TextAlignment["Right"] = 2] = "Right";
        TextAlignment[TextAlignment["Justify"] = 3] = "Justify";
    })(Fayde.TextAlignment || (Fayde.TextAlignment = {}));
    var TextAlignment = Fayde.TextAlignment;
    Fayde.CoreLibrary.addEnum(TextAlignment, "TextAlignment");
    (function (TextDecorations) {
        TextDecorations[TextDecorations["None"] = 0] = "None";
        TextDecorations[TextDecorations["Underline"] = 1] = "Underline";
    })(Fayde.TextDecorations || (Fayde.TextDecorations = {}));
    var TextDecorations = Fayde.TextDecorations;
    Fayde.CoreLibrary.addEnum(TextDecorations, "TextDecorations");
    (function (LineStackingStrategy) {
        LineStackingStrategy[LineStackingStrategy["MaxHeight"] = 0] = "MaxHeight";
        LineStackingStrategy[LineStackingStrategy["BlockLineHeight"] = 1] = "BlockLineHeight";
    })(Fayde.LineStackingStrategy || (Fayde.LineStackingStrategy = {}));
    var LineStackingStrategy = Fayde.LineStackingStrategy;
    Fayde.CoreLibrary.addEnum(LineStackingStrategy, "LineStackingStrategy");
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    Fayde.FontStyle = minerva.FontStyle;
    Fayde.FontStretch = minerva.FontStretch;
    Fayde.CoreLibrary.addEnum(Fayde.FontStretch, "FontStretch");
    Fayde.Font = minerva.Font;
    Fayde.CoreLibrary.add(minerva.Font);
})(Fayde || (Fayde = {}));
/// <reference path="UIReaction.ts" />
/// <reference path="Providers/InheritedStore.ts" />
/// <reference path="../Primitives/Font.ts" />
var Fayde;
(function (Fayde) {
    var InheritableOwner = (function () {
        function InheritableOwner() {
        }
        InheritableOwner.UseLayoutRoundingProperty = DependencyProperty.RegisterInheritable("UseLayoutRounding", function () { return Boolean; }, InheritableOwner, true);
        InheritableOwner.FlowDirectionProperty = DependencyProperty.RegisterInheritable("FlowDirection", function () { return new Fayde.Enum(minerva.FlowDirection); }, InheritableOwner, minerva.FlowDirection.LeftToRight);
        InheritableOwner.ForegroundProperty = DependencyProperty.RegisterInheritable("Foreground", function () { return Fayde.Media.Brush; }, InheritableOwner);
        InheritableOwner.FontFamilyProperty = DependencyProperty.RegisterInheritable("FontFamily", function () { return String; }, InheritableOwner, Fayde.Font.DEFAULT_FAMILY);
        InheritableOwner.FontSizeProperty = DependencyProperty.RegisterInheritable("FontSize", function () { return Number; }, InheritableOwner, Fayde.Font.DEFAULT_SIZE);
        InheritableOwner.FontStretchProperty = DependencyProperty.RegisterInheritable("FontStretch", function () { return String; }, InheritableOwner, Fayde.Font.DEFAULT_STRETCH);
        InheritableOwner.FontStyleProperty = DependencyProperty.RegisterInheritable("FontStyle", function () { return String; }, InheritableOwner, Fayde.Font.DEFAULT_STYLE);
        InheritableOwner.FontWeightProperty = DependencyProperty.RegisterInheritable("FontWeight", function () { return new Fayde.Enum(Fayde.FontWeight); }, InheritableOwner, Fayde.Font.DEFAULT_WEIGHT);
        InheritableOwner.TextDecorationsProperty = DependencyProperty.RegisterInheritable("TextDecorations", function () { return new Fayde.Enum(Fayde.TextDecorations); }, InheritableOwner, Fayde.TextDecorations.None);
        InheritableOwner.LanguageProperty = DependencyProperty.RegisterInheritable("Language", function () { return String; }, InheritableOwner);
        return InheritableOwner;
    })();
    Fayde.InheritableOwner = InheritableOwner;
    InheritableOwner.AllInheritedProperties = [
        InheritableOwner.ForegroundProperty,
        InheritableOwner.FontFamilyProperty,
        InheritableOwner.FontStretchProperty,
        InheritableOwner.FontStyleProperty,
        InheritableOwner.FontWeightProperty,
        InheritableOwner.FontSizeProperty,
        InheritableOwner.LanguageProperty,
        InheritableOwner.FlowDirectionProperty,
        InheritableOwner.UseLayoutRoundingProperty,
        InheritableOwner.TextDecorationsProperty
    ];
    Fayde.CoreLibrary.add(InheritableOwner);
    var reactions;
    (function (reactions) {
        Fayde.UIReaction(InheritableOwner.UseLayoutRoundingProperty, minerva.core.reactTo.useLayoutRounding, false);
        Fayde.UIReaction(InheritableOwner.FlowDirectionProperty, minerva.core.reactTo.flowDirection, false);
    })(reactions || (reactions = {}));
})(Fayde || (Fayde = {}));
/// <reference path="DependencyObject.ts" />
/// <reference path="UIReaction.ts" />
/// <reference path="UIReactionAttached.ts" />
/// <reference path="Providers/InheritedStore.ts" />
/// <reference path="Enums.ts" />
/// <reference path="InheritableOwner.ts" />
var Fayde;
(function (Fayde) {
    var UINode = (function (_super) {
        __extends(UINode, _super);
        function UINode(xobj) {
            _super.call(this, xobj);
            this.IsMouseOver = false;
            this.IsLoaded = false;
            var upd = this.LayoutUpdater = xobj.CreateLayoutUpdater();
            upd.setAttachedValue("$node", this);
            upd.setAttachedValue("$id", this.XObject._ID);
        }
        UINode.prototype.GetVisualRoot = function () {
            var curNode = this;
            var vpNode;
            while (vpNode = curNode.VisualParentNode) {
                curNode = vpNode;
            }
            return curNode;
        };
        UINode.prototype.SetIsLoaded = function (value) { };
        UINode.prototype.OnVisualChildAttached = function (uie) {
            var un = uie.XamlNode;
            Fayde.Providers.InheritedStore.PropagateInheritedOnAdd(this.XObject, un);
            un.SetVisualParentNode(this);
        };
        UINode.prototype.OnVisualChildDetached = function (uie) {
            var un = uie.XamlNode;
            un.SetVisualParentNode(null);
            Fayde.Providers.InheritedStore.ClearInheritedOnRemove(this.XObject, un);
        };
        UINode.prototype.SetVisualParentNode = function (visualParentNode) {
            if (this.VisualParentNode === visualParentNode)
                return;
            this.VisualParentNode = visualParentNode;
            this.LayoutUpdater.setVisualParent(visualParentNode ? visualParentNode.LayoutUpdater : null);
        };
        UINode.prototype.Focus = function (recurse) { return false; };
        UINode.prototype._EmitFocusChange = function (type) {
            if (type === "got")
                this._EmitGotFocus();
            else if (type === "lost")
                this._EmitLostFocus();
        };
        UINode.prototype._EmitLostFocus = function () {
            var e = new Fayde.RoutedEventArgs();
            var x = this.XObject;
            x.OnLostFocus(e);
            x.LostFocus.raise(x, e);
        };
        UINode.prototype._EmitGotFocus = function () {
            var e = new Fayde.RoutedEventArgs();
            var x = this.XObject;
            x.OnGotFocus(e);
            x.GotFocus.raise(x, e);
        };
        UINode.prototype._EmitKeyDown = function (args) {
            var x = this.XObject;
            x.OnKeyDown(args);
            x.KeyDown.raise(x, args);
        };
        UINode.prototype._EmitKeyUp = function (args) {
            var x = this.XObject;
            x.OnKeyUp(args);
            x.KeyUp.raise(x, args);
        };
        UINode.prototype._EmitLostMouseCapture = function (pos) {
            var x = this.XObject;
            var e = new Fayde.Input.MouseEventArgs(pos);
            x.OnLostMouseCapture(e);
            x.LostMouseCapture.raise(x, e);
        };
        UINode.prototype._EmitMouseEvent = function (type, isLeftButton, isRightButton, args) {
            var x = this.XObject;
            switch (type) {
                case Fayde.Input.MouseInputType.MouseUp:
                    if (isLeftButton) {
                        x.OnMouseLeftButtonUp(args);
                        x.MouseLeftButtonUp.raise(x, args);
                    }
                    else if (isRightButton) {
                        x.OnMouseRightButtonUp(args);
                        x.MouseRightButtonUp.raise(x, args);
                    }
                    break;
                case Fayde.Input.MouseInputType.MouseDown:
                    if (isLeftButton) {
                        x.OnMouseLeftButtonDown(args);
                        x.MouseLeftButtonDown.raise(x, args);
                    }
                    else if (isRightButton) {
                        x.OnMouseRightButtonDown(args);
                        x.MouseRightButtonDown.raise(x, args);
                    }
                    break;
                case Fayde.Input.MouseInputType.MouseLeave:
                    this.IsMouseOver = false;
                    x.OnMouseLeave(args);
                    x.MouseLeave.raise(x, args);
                    break;
                case Fayde.Input.MouseInputType.MouseEnter:
                    this.IsMouseOver = true;
                    x.OnMouseEnter(args);
                    x.MouseEnter.raise(x, args);
                    break;
                case Fayde.Input.MouseInputType.MouseMove:
                    x.OnMouseMove(args);
                    x.MouseMove.raise(x, args);
                    break;
                case Fayde.Input.MouseInputType.MouseWheel:
                    x.OnMouseWheel(args);
                    x.MouseWheel.raise(x, args);
                    break;
                default:
                    return false;
            }
            return args.Handled;
        };
        UINode.prototype._EmitTouchEvent = function (type, args) {
            var x = this.XObject;
            switch (type) {
                case Fayde.Input.TouchInputType.TouchDown:
                    x.OnTouchDown(args);
                    x.TouchDown.raise(x, args);
                    break;
                case Fayde.Input.TouchInputType.TouchUp:
                    x.OnTouchUp(args);
                    x.TouchUp.raise(x, args);
                    break;
                case Fayde.Input.TouchInputType.TouchMove:
                    x.OnTouchMove(args);
                    x.TouchMove.raise(x, args);
                    break;
                case Fayde.Input.TouchInputType.TouchEnter:
                    x.OnTouchEnter(args);
                    x.TouchEnter.raise(x, args);
                    break;
                case Fayde.Input.TouchInputType.TouchLeave:
                    x.OnTouchLeave(args);
                    x.TouchLeave.raise(x, args);
                    break;
                default:
                    return false;
            }
            return args.Handled;
        };
        UINode.prototype._EmitGotTouchCapture = function (e) {
            var x = this.XObject;
            x.OnGotTouchCapture(e);
            x.GotTouchCapture.raise(this, e);
        };
        UINode.prototype._EmitLostTouchCapture = function (e) {
            var x = this.XObject;
            x.OnLostTouchCapture(e);
            x.LostTouchCapture.raise(this, e);
        };
        UINode.prototype.CanCaptureMouse = function () { return true; };
        UINode.prototype.CaptureMouse = function () {
            if (!this.IsAttached)
                return false;
            Fayde.Surface.SetMouseCapture(this);
            return true;
        };
        UINode.prototype.ReleaseMouseCapture = function () {
            if (!this.IsAttached)
                return;
            Fayde.Surface.ReleaseMouseCapture(this);
        };
        UINode.prototype.IsAncestorOf = function (uin) {
            var vpNode = uin;
            while (vpNode && vpNode !== this)
                vpNode = vpNode.VisualParentNode;
            return vpNode === this;
        };
        UINode.prototype.TransformToVisual = function (uin) {
            var raw = minerva.core.Updater.transformToVisual(this.LayoutUpdater, uin ? uin.LayoutUpdater : null);
            if (!raw)
                throw new ArgumentException("UIElement not attached.");
            var mt = new Fayde.Media.MatrixTransform();
            mt.SetCurrentValue(Fayde.Media.MatrixTransform.MatrixProperty, new Fayde.Media.Matrix(raw));
            return mt;
        };
        return UINode;
    })(Fayde.DONode);
    Fayde.UINode = UINode;
    var UIElement = (function (_super) {
        __extends(UIElement, _super);
        function UIElement() {
            _super.apply(this, arguments);
            this.LostFocus = new Fayde.RoutedEvent();
            this.GotFocus = new Fayde.RoutedEvent();
            this.LostMouseCapture = new Fayde.RoutedEvent();
            this.KeyDown = new Fayde.RoutedEvent();
            this.KeyUp = new Fayde.RoutedEvent();
            this.MouseLeftButtonUp = new Fayde.RoutedEvent();
            this.MouseRightButtonUp = new Fayde.RoutedEvent();
            this.MouseLeftButtonDown = new Fayde.RoutedEvent();
            this.MouseRightButtonDown = new Fayde.RoutedEvent();
            this.MouseLeave = new Fayde.RoutedEvent();
            this.MouseEnter = new Fayde.RoutedEvent();
            this.MouseMove = new Fayde.RoutedEvent();
            this.MouseWheel = new Fayde.RoutedEvent();
            this.TouchDown = new Fayde.RoutedEvent();
            this.TouchUp = new Fayde.RoutedEvent();
            this.TouchEnter = new Fayde.RoutedEvent();
            this.TouchLeave = new Fayde.RoutedEvent();
            this.TouchMove = new Fayde.RoutedEvent();
            this.GotTouchCapture = new Fayde.RoutedEvent();
            this.LostTouchCapture = new Fayde.RoutedEvent();
        }
        UIElement.prototype.CreateNode = function () { return new UINode(this); };
        UIElement.prototype.CreateLayoutUpdater = function () { return new minerva.core.Updater(); };
        Object.defineProperty(UIElement.prototype, "IsItemsControl", {
            get: function () { return false; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UIElement.prototype, "VisualParent", {
            get: function () {
                var vpNode = this.XamlNode.VisualParentNode;
                if (vpNode)
                    return vpNode.XObject;
                return undefined;
            },
            enumerable: true,
            configurable: true
        });
        UIElement.prototype.IsInheritable = function (propd) {
            return propd === UIElement.UseLayoutRoundingProperty;
        };
        Object.defineProperty(UIElement.prototype, "IsMouseOver", {
            get: function () { return this.XamlNode.IsMouseOver; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UIElement.prototype, "DesiredSize", {
            get: function () {
                var ds = this.XamlNode.LayoutUpdater.assets.desiredSize;
                return new minerva.Size(ds.width, ds.height);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UIElement.prototype, "RenderSize", {
            get: function () {
                var ds = this.XamlNode.LayoutUpdater.assets.renderSize;
                return new minerva.Size(ds.width, ds.height);
            },
            enumerable: true,
            configurable: true
        });
        UIElement.prototype.Focus = function () { return this.XamlNode.Focus(); };
        UIElement.prototype.CaptureMouse = function () { return this.XamlNode.CaptureMouse(); };
        UIElement.prototype.ReleaseMouseCapture = function () { this.XamlNode.ReleaseMouseCapture(); };
        UIElement.prototype.IsAncestorOf = function (uie) {
            if (!uie)
                return false;
            return this.XamlNode.IsAncestorOf(uie.XamlNode);
        };
        UIElement.prototype.TransformToVisual = function (uie) {
            var uin = (uie) ? uie.XamlNode : null;
            return this.XamlNode.TransformToVisual(uin);
        };
        UIElement.prototype.InvalidateMeasure = function () { this.XamlNode.LayoutUpdater.invalidateMeasure(); };
        UIElement.prototype.Measure = function (availableSize) {
            this.XamlNode.LayoutUpdater.measure(availableSize);
        };
        UIElement.prototype.InvalidateArrange = function () { this.XamlNode.LayoutUpdater.invalidateArrange(); };
        UIElement.prototype.Arrange = function (finalRect) {
            this.XamlNode.LayoutUpdater.arrange(finalRect);
        };
        UIElement.prototype.OnGotFocus = function (e) { };
        UIElement.prototype.OnLostFocus = function (e) { };
        UIElement.prototype.OnLostMouseCapture = function (e) { };
        UIElement.prototype.OnKeyDown = function (e) { };
        UIElement.prototype.OnKeyUp = function (e) { };
        UIElement.prototype.OnMouseEnter = function (e) { };
        UIElement.prototype.OnMouseLeave = function (e) { };
        UIElement.prototype.OnMouseLeftButtonDown = function (e) { };
        UIElement.prototype.OnMouseLeftButtonUp = function (e) { };
        UIElement.prototype.OnMouseMove = function (e) { };
        UIElement.prototype.OnMouseRightButtonDown = function (e) { };
        UIElement.prototype.OnMouseRightButtonUp = function (e) { };
        UIElement.prototype.OnMouseWheel = function (e) { };
        UIElement.prototype.OnTouchDown = function (e) { };
        UIElement.prototype.OnTouchUp = function (e) { };
        UIElement.prototype.OnTouchEnter = function (e) { };
        UIElement.prototype.OnTouchLeave = function (e) { };
        UIElement.prototype.OnTouchMove = function (e) { };
        UIElement.prototype.OnGotTouchCapture = function (e) { };
        UIElement.prototype.OnLostTouchCapture = function (e) { };
        UIElement.prototype._TriggersChanged = function (args) {
            var oldTriggers = args.OldValue;
            var newTriggers = args.NewValue;
            if (oldTriggers instanceof Fayde.TriggerCollection)
                oldTriggers.DetachTarget(this);
            if (newTriggers instanceof Fayde.TriggerCollection)
                newTriggers.AttachTarget(this);
        };
        UIElement.ClipProperty = DependencyProperty.RegisterCore("Clip", function () { return Fayde.Media.Geometry; }, UIElement);
        UIElement.EffectProperty = DependencyProperty.Register("Effect", function () { return Fayde.Media.Effects.Effect; }, UIElement);
        UIElement.IsHitTestVisibleProperty = DependencyProperty.RegisterCore("IsHitTestVisible", function () { return Boolean; }, UIElement, true);
        UIElement.OpacityMaskProperty = DependencyProperty.RegisterCore("OpacityMask", function () { return Fayde.Media.Brush; }, UIElement);
        UIElement.OpacityProperty = DependencyProperty.RegisterCore("Opacity", function () { return Number; }, UIElement, 1.0);
        UIElement.RenderTransformProperty = DependencyProperty.RegisterCore("RenderTransform", function () { return Fayde.Media.Transform; }, UIElement);
        UIElement.RenderTransformOriginProperty = DependencyProperty.Register("RenderTransformOrigin", function () { return Point; }, UIElement);
        UIElement.TagProperty = DependencyProperty.Register("Tag", function () { return Object; }, UIElement);
        UIElement.TriggersProperty = DependencyProperty.RegisterCore("Triggers", function () { return Fayde.TriggerCollection; }, UIElement, undefined, function (d, args) { return d._TriggersChanged(args); });
        UIElement.UseLayoutRoundingProperty = Fayde.InheritableOwner.UseLayoutRoundingProperty.ExtendTo(UIElement);
        UIElement.VisibilityProperty = DependencyProperty.RegisterCore("Visibility", function () { return new Fayde.Enum(Fayde.Visibility); }, UIElement, Fayde.Visibility.Visible);
        return UIElement;
    })(Fayde.DependencyObject);
    Fayde.UIElement = UIElement;
    Fayde.CoreLibrary.add(UIElement);
    var reactions;
    (function (reactions) {
        Fayde.UIReaction(UIElement.ClipProperty, minerva.core.reactTo.clip);
        Fayde.UIReaction(UIElement.EffectProperty, minerva.core.reactTo.effect);
        Fayde.UIReaction(UIElement.IsHitTestVisibleProperty, minerva.core.reactTo.isHitTestVisible, false);
        Fayde.UIReaction(UIElement.OpacityProperty, minerva.core.reactTo.opacity, false);
        Fayde.UIReaction(UIElement.RenderTransformProperty, minerva.core.reactTo.renderTransform);
        Fayde.UIReaction(UIElement.RenderTransformOriginProperty, minerva.core.reactTo.renderTransformOrigin, false, minerva.Point.copyTo);
        Fayde.UIReaction(UIElement.VisibilityProperty, function (upd, ov, nv, uie) {
            minerva.core.reactTo.visibility(upd, ov, nv);
            Fayde.Surface.RemoveFocusFrom(uie);
        }, false);
    })(reactions || (reactions = {}));
})(Fayde || (Fayde = {}));
/// <reference path="PropertyStore.ts" />
var Fayde;
(function (Fayde) {
    var Providers;
    (function (Providers) {
        var ResourcesStore = (function (_super) {
            __extends(ResourcesStore, _super);
            function ResourcesStore() {
                _super.apply(this, arguments);
            }
            ResourcesStore.prototype.GetValue = function (storage) {
                if (storage.Local !== undefined)
                    return storage.Local;
                var rd = storage.Local = new Fayde.ResourceDictionary();
                rd.AttachTo(storage.OwnerNode.XObject);
                return rd;
            };
            ResourcesStore.prototype.GetValuePrecedence = function (storage) {
                return Providers.PropertyPrecedence.LocalValue;
            };
            ResourcesStore.prototype.SetLocalValue = function (storage, newValue) {
                console.warn("Cannot set Resources.");
            };
            ResourcesStore.prototype.SetLocalStyleValue = function (storage, newValue) {
            };
            ResourcesStore.prototype.SetImplicitStyle = function (storage, newValue) {
            };
            ResourcesStore.prototype.ClearValue = function (storage, notifyListeners) {
            };
            return ResourcesStore;
        })(Providers.PropertyStore);
        Providers.ResourcesStore = ResourcesStore;
        ResourcesStore.Instance = new ResourcesStore();
    })(Providers = Fayde.Providers || (Fayde.Providers = {}));
})(Fayde || (Fayde = {}));
/// <reference path="PropertyStore.ts" />
var Fayde;
(function (Fayde) {
    var Providers;
    (function (Providers) {
        var ActualSizeStore = (function (_super) {
            __extends(ActualSizeStore, _super);
            function ActualSizeStore() {
                _super.apply(this, arguments);
            }
            ActualSizeStore.prototype.GetValue = function (storage) {
                if (storage.Local !== undefined)
                    return storage.Local;
                return 0.0;
            };
            ActualSizeStore.prototype.GetValuePrecedence = function (storage) { return Providers.PropertyPrecedence.LocalValue; };
            ActualSizeStore.prototype.SetLocalValue = function (storage, newValue) {
                var oldValue = storage.Local;
                storage.Local = newValue;
                if (oldValue === newValue)
                    return;
                this.OnPropertyChanged(storage, Providers.PropertyPrecedence.LocalValue, oldValue, newValue);
            };
            ActualSizeStore.prototype.SetLocalStyleValue = function (storage, newValue) { };
            ActualSizeStore.prototype.SetImplicitStyle = function (storage, newValue) { };
            ActualSizeStore.prototype.ClearValue = function (storage, notifyListeners) { };
            return ActualSizeStore;
        })(Providers.PropertyStore);
        Providers.ActualSizeStore = ActualSizeStore;
        ActualSizeStore.Instance = new ActualSizeStore();
    })(Providers = Fayde.Providers || (Fayde.Providers = {}));
})(Fayde || (Fayde = {}));
/// <reference path="UIElement.ts" />
/// <reference path="Providers/ResourcesStore.ts" />
/// <reference path="Providers/ActualSizeStore.ts" />
var Fayde;
(function (Fayde) {
    var FENode = (function (_super) {
        __extends(FENode, _super);
        function FENode(xobj) {
            var _this = this;
            _super.call(this, xobj);
            var lu = this.LayoutUpdater;
            lu.tree.setTemplateApplier(function () {
                var error = new BError();
                var result = _this.ApplyTemplateWithError(error);
                if (error.Message)
                    error.ThrowException();
                return result;
            });
            lu.setSizeUpdater({
                setActualWidth: function (value) {
                    xobj.SetCurrentValue(FrameworkElement.ActualWidthProperty, value);
                },
                setActualHeight: function (value) {
                    xobj.SetCurrentValue(FrameworkElement.ActualHeightProperty, value);
                },
                onSizeChanged: function (oldSize, newSize) {
                    xobj.SizeChanged.raise(xobj, new Fayde.SizeChangedEventArgs(oldSize, newSize));
                }
            });
        }
        FENode.prototype.SetSubtreeNode = function (subtreeNode, error) {
            if (this.SubtreeNode) {
                this.SubtreeNode.Detach();
                this.SubtreeNode = null;
            }
            if (subtreeNode && !subtreeNode.AttachTo(this, error))
                return false;
            this.SubtreeNode = subtreeNode;
            return true;
        };
        FENode.prototype.GetInheritedEnumerator = function () {
            return this.GetVisualTreeEnumerator();
        };
        FENode.prototype.GetVisualTreeEnumerator = function () {
            var walker = this.LayoutUpdater.tree.walk();
            return {
                current: undefined,
                moveNext: function () {
                    if (!walker.step())
                        return false;
                    this.current = walker.current.getAttachedValue("$node");
                    return true;
                }
            };
        };
        FENode.prototype.SetIsLoaded = function (value) {
            if (this.IsLoaded === value)
                return;
            this.IsLoaded = value;
            this.OnIsLoadedChanged(value);
        };
        FENode.prototype.OnIsLoadedChanged = function (newIsLoaded) {
            var xobj = this.XObject;
            var res = xobj.Resources;
            if (!newIsLoaded) {
                Fayde.Providers.ImplicitStyleBroker.Clear(xobj, Fayde.Providers.StyleMask.VisualTree);
                xobj.Unloaded.raise(xobj, new Fayde.RoutedEventArgs());
            }
            else {
                Fayde.Providers.ImplicitStyleBroker.Set(xobj, Fayde.Providers.StyleMask.All);
            }
            for (var en = this.GetVisualTreeEnumerator(); en.moveNext();) {
                en.current.SetIsLoaded(newIsLoaded);
            }
            if (newIsLoaded) {
                xobj.Loaded.raise(xobj, new Fayde.RoutedEventArgs());
                this.InvokeLoaded();
            }
        };
        FENode.prototype.InvokeLoaded = function () { };
        FENode.prototype.AttachVisualChild = function (uie, error) {
            this.OnVisualChildAttached(uie);
            if (!this.SetSubtreeNode(uie.XamlNode, error))
                return false;
            uie.XamlNode.SetIsLoaded(this.IsLoaded);
            return true;
        };
        FENode.prototype.DetachVisualChild = function (uie, error) {
            if (!this.SetSubtreeNode(null, error))
                return false;
            this.OnVisualChildDetached(uie);
            uie.XamlNode.SetIsLoaded(false);
            return true;
        };
        FENode.prototype.ApplyTemplateWithError = function (error) {
            if (this.SubtreeNode)
                return false;
            var result = this.DoApplyTemplateWithError(error);
            var xobj = this.XObject;
            if (result)
                xobj.OnApplyTemplate();
            xobj.TemplateApplied.raise(xobj, null);
            return result;
        };
        FENode.prototype.DoApplyTemplateWithError = function (error) { return false; };
        FENode.prototype.FinishApplyTemplateWithError = function (uie, error) {
            if (!uie || error.Message)
                return false;
            this.AttachVisualChild(uie, error);
            return error.Message == null;
        };
        FENode.prototype.UpdateLayout = function () {
            console.warn("FENode.UpdateLayout not implemented");
        };
        FENode.DetachFromVisualParent = function (xobj) {
            var vpNode = xobj.XamlNode.VisualParentNode;
            if (vpNode instanceof FENode) {
                var err = new BError();
                vpNode.DetachVisualChild(xobj, err);
                if (err.Message)
                    err.ThrowException();
            }
        };
        return FENode;
    })(Fayde.UINode);
    Fayde.FENode = FENode;
    var FrameworkElement = (function (_super) {
        __extends(FrameworkElement, _super);
        function FrameworkElement() {
            _super.apply(this, arguments);
            this.SizeChanged = new Fayde.RoutedEvent();
            this.Loaded = new Fayde.RoutedEvent();
            this.Unloaded = new Fayde.RoutedEvent();
            this.LayoutUpdated = new nullstone.Event();
            this.TemplateApplied = new nullstone.Event();
            this.BindingValidationError = new nullstone.Event();
        }
        FrameworkElement.prototype.CreateNode = function () { return new FENode(this); };
        FrameworkElement.prototype.IsInheritable = function (propd) {
            if (propd === FrameworkElement.FlowDirectionProperty)
                return true;
            if (propd === FrameworkElement.LanguageProperty)
                return true;
            return _super.prototype.IsInheritable.call(this, propd);
        };
        FrameworkElement.prototype.OnApplyTemplate = function () { };
        FrameworkElement.prototype.OnBindingValidationError = function (args) {
            this.BindingValidationError.raise(this, args);
        };
        FrameworkElement.prototype.UpdateLayout = function () { this.XamlNode.UpdateLayout(); };
        FrameworkElement.ActualHeightProperty = DependencyProperty.RegisterReadOnly("ActualHeight", function () { return Number; }, FrameworkElement);
        FrameworkElement.ActualWidthProperty = DependencyProperty.RegisterReadOnly("ActualWidth", function () { return Number; }, FrameworkElement);
        FrameworkElement.CursorProperty = DependencyProperty.Register("Cursor", function () { return new Fayde.Enum(Fayde.CursorType); }, FrameworkElement, Fayde.CursorType.Default);
        FrameworkElement.FlowDirectionProperty = Fayde.InheritableOwner.FlowDirectionProperty.ExtendTo(FrameworkElement);
        FrameworkElement.HeightProperty = DependencyProperty.Register("Height", function () { return Length; }, FrameworkElement, NaN);
        FrameworkElement.HorizontalAlignmentProperty = DependencyProperty.Register("HorizontalAlignment", function () { return new Fayde.Enum(Fayde.HorizontalAlignment); }, FrameworkElement, Fayde.HorizontalAlignment.Stretch);
        FrameworkElement.LanguageProperty = Fayde.InheritableOwner.LanguageProperty.ExtendTo(FrameworkElement);
        FrameworkElement.MarginProperty = DependencyProperty.RegisterCore("Margin", function () { return Thickness; }, FrameworkElement);
        FrameworkElement.MaxHeightProperty = DependencyProperty.Register("MaxHeight", function () { return Number; }, FrameworkElement, Number.POSITIVE_INFINITY);
        FrameworkElement.MaxWidthProperty = DependencyProperty.Register("MaxWidth", function () { return Number; }, FrameworkElement, Number.POSITIVE_INFINITY);
        FrameworkElement.MinHeightProperty = DependencyProperty.Register("MinHeight", function () { return Number; }, FrameworkElement, 0.0);
        FrameworkElement.MinWidthProperty = DependencyProperty.Register("MinWidth", function () { return Number; }, FrameworkElement, 0.0);
        FrameworkElement.StyleProperty = DependencyProperty.Register("Style", function () { return Fayde.Style; }, FrameworkElement, undefined, function (dobj, args) { return Fayde.Providers.LocalStyleBroker.Set(dobj, args.NewValue); });
        FrameworkElement.VerticalAlignmentProperty = DependencyProperty.Register("VerticalAlignment", function () { return new Fayde.Enum(Fayde.VerticalAlignment); }, FrameworkElement, Fayde.VerticalAlignment.Stretch);
        FrameworkElement.WidthProperty = DependencyProperty.Register("Width", function () { return Length; }, FrameworkElement, NaN);
        FrameworkElement.ResourcesProperty = DependencyProperty.Register("Resources", function () { return Fayde.ResourceDictionary; }, FrameworkElement);
        FrameworkElement.DefaultStyleKeyProperty = DependencyProperty.Register("DefaultStyleKey", function () { return Function; }, FrameworkElement);
        return FrameworkElement;
    })(Fayde.UIElement);
    Fayde.FrameworkElement = FrameworkElement;
    Fayde.CoreLibrary.add(FrameworkElement);
    FrameworkElement.ActualWidthProperty.Store = Fayde.Providers.ActualSizeStore.Instance;
    FrameworkElement.ActualHeightProperty.Store = Fayde.Providers.ActualSizeStore.Instance;
    FrameworkElement.ResourcesProperty.Store = Fayde.Providers.ResourcesStore.Instance;
    var reactions;
    (function (reactions) {
        Fayde.UIReaction(FrameworkElement.WidthProperty, minerva.core.reactTo.width, false);
        Fayde.UIReaction(FrameworkElement.HeightProperty, minerva.core.reactTo.height, false);
        Fayde.UIReaction(FrameworkElement.MaxWidthProperty, minerva.core.reactTo.maxWidth, false);
        Fayde.UIReaction(FrameworkElement.MaxHeightProperty, minerva.core.reactTo.maxHeight, false);
        Fayde.UIReaction(FrameworkElement.MinWidthProperty, minerva.core.reactTo.minWidth, false);
        Fayde.UIReaction(FrameworkElement.MinHeightProperty, minerva.core.reactTo.minHeight, false);
        Fayde.UIReaction(FrameworkElement.MarginProperty, minerva.core.reactTo.margin, false, minerva.Thickness.copyTo);
        Fayde.UIReaction(FrameworkElement.HorizontalAlignmentProperty, minerva.core.reactTo.horizontalAlignment, false);
        Fayde.UIReaction(FrameworkElement.VerticalAlignmentProperty, minerva.core.reactTo.verticalAlignment, false);
    })(reactions || (reactions = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Markup;
    (function (Markup) {
        Markup.Content = (function () {
            function ca(type, prop) {
                nullstone.Annotation(type, "Content", prop, true);
            }
            ca.Get = function (type) {
                var cur = type;
                while (cur) {
                    var anns = nullstone.GetAnnotations(cur, "Content");
                    if (anns) {
                        var cp = anns[0];
                        if (cp)
                            return cp;
                    }
                    cur = nullstone.getTypeParent(cur);
                }
                return undefined;
            };
            return ca;
        })();
        Markup.TextContent = (function () {
            function tca(type, prop) {
                nullstone.Annotation(type, "TextContent", prop, true);
            }
            tca.Get = function (type) {
                var cur = type;
                while (cur) {
                    var anns = nullstone.GetAnnotations(cur, "TextContent");
                    if (anns) {
                        var cp = anns[0];
                        if (cp)
                            return cp;
                    }
                    cur = nullstone.getTypeParent(cur);
                }
                return undefined;
            };
            return tca;
        })();
    })(Markup = Fayde.Markup || (Fayde.Markup = {}));
})(Fayde || (Fayde = {}));
/// <reference path="../Core/FrameworkElement.ts" />
/// <reference path="../Markup/ContentAnnotation.ts" />
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        var Border = (function (_super) {
            __extends(Border, _super);
            function Border() {
                _super.call(this);
                this.DefaultStyleKey = Border;
            }
            Border.prototype.CreateLayoutUpdater = function () {
                return new minerva.controls.border.BorderUpdater();
            };
            Border.BackgroundProperty = DependencyProperty.RegisterCore("Background", function () { return Fayde.Media.Brush; }, Border);
            Border.BorderBrushProperty = DependencyProperty.RegisterCore("BorderBrush", function () { return Fayde.Media.Brush; }, Border);
            Border.BorderThicknessProperty = DependencyProperty.Register("BorderThickness", function () { return Thickness; }, Border);
            Border.ChildProperty = DependencyProperty.Register("Child", function () { return Fayde.UIElement; }, Border);
            Border.CornerRadiusProperty = DependencyProperty.Register("CornerRadius", function () { return CornerRadius; }, Border);
            Border.PaddingProperty = DependencyProperty.Register("Padding", function () { return Thickness; }, Border);
            return Border;
        })(Fayde.FrameworkElement);
        Controls.Border = Border;
        Fayde.CoreLibrary.add(Border);
        Fayde.Markup.Content(Border, Border.ChildProperty);
        Fayde.UIReaction(Border.BackgroundProperty, function (upd, ov, nv) {
            upd.invalidate();
        });
        Fayde.UIReaction(Border.BorderBrushProperty, function (upd, ov, nv) {
            upd.invalidate();
        });
        Fayde.UIReaction(Border.BorderThicknessProperty, function (upd, ov, nv) { return upd.invalidateMeasure(); }, false, minerva.Thickness.copyTo);
        Fayde.UIReaction(Border.PaddingProperty, function (upd, ov, nv) { return upd.invalidateMeasure(); }, false, minerva.Thickness.copyTo);
        Fayde.UIReaction(Border.CornerRadiusProperty, function (upd, ov, nv) { return upd.invalidate(); }, false, minerva.CornerRadius.copyTo);
        Fayde.UIReaction(Border.ChildProperty, function (upd, ov, nv, border) {
            var node = border.XamlNode;
            var error = new BError();
            if (ov instanceof Fayde.UIElement)
                node.DetachVisualChild(ov, error);
            if (nv instanceof Fayde.UIElement)
                node.AttachVisualChild(nv, error);
            if (error.Message)
                error.ThrowException();
            upd.updateBounds();
            upd.invalidateMeasure();
        }, false, false);
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
/// <reference path="PropertyStore.ts" />
var Fayde;
(function (Fayde) {
    var Providers;
    (function (Providers) {
        var IsEnabledStore = (function (_super) {
            __extends(IsEnabledStore, _super);
            function IsEnabledStore() {
                _super.apply(this, arguments);
            }
            IsEnabledStore.prototype.GetValue = function (storage) {
                if (storage.InheritedValue === false)
                    return false;
                return _super.prototype.GetValue.call(this, storage);
            };
            IsEnabledStore.prototype.GetValuePrecedence = function (storage) {
                if (storage.InheritedValue === false)
                    return Providers.PropertyPrecedence.IsEnabled;
                return _super.prototype.GetValuePrecedence.call(this, storage);
            };
            IsEnabledStore.prototype.SetLocalValue = function (storage, newValue) {
                var oldValue = storage.Local;
                storage.Local = newValue;
                if (oldValue === newValue || storage.InheritedValue === false)
                    return;
                this.OnPropertyChanged(storage, Providers.PropertyPrecedence.LocalValue, oldValue, newValue);
            };
            IsEnabledStore.prototype.OnPropertyChanged = function (storage, effectivePrecedence, oldValue, newValue) {
                var args = _super.prototype.OnPropertyChanged.call(this, storage, effectivePrecedence, oldValue, newValue);
                storage.OwnerNode.OnIsEnabledChanged(oldValue, newValue);
                return args;
            };
            IsEnabledStore.prototype.CreateStorage = function (dobj, propd) {
                return {
                    OwnerNode: dobj.XamlNode,
                    Property: propd,
                    Precedence: Providers.PropertyPrecedence.DefaultValue,
                    InheritedValue: true,
                    Animations: undefined,
                    Local: undefined,
                    LocalStyleValue: undefined,
                    ImplicitStyleValue: undefined,
                    PropListeners: undefined,
                };
            };
            IsEnabledStore.prototype.EmitInheritedChanged = function (storage, newInherited) {
                var oldInherited = storage.InheritedValue;
                if (newInherited !== false) {
                    storage.Precedence = _super.prototype.GetValuePrecedence.call(this, storage);
                    storage.InheritedValue = true;
                }
                else {
                    storage.InheritedValue = false;
                }
                if (oldInherited === newInherited)
                    return;
                this.OnPropertyChanged(storage, Providers.PropertyPrecedence.IsEnabled, oldInherited, newInherited);
            };
            IsEnabledStore.EmitInheritedChanged = function (cn, value) {
                var propd = Fayde.Controls.Control.IsEnabledProperty;
                var storage = Providers.GetStorage(cn.XObject, propd);
                propd.Store.EmitInheritedChanged(storage, value);
            };
            return IsEnabledStore;
        })(Providers.PropertyStore);
        Providers.IsEnabledStore = IsEnabledStore;
        IsEnabledStore.Instance = new IsEnabledStore();
    })(Providers = Fayde.Providers || (Fayde.Providers = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Input;
    (function (Input) {
        (function (KeyboardNavigationMode) {
            KeyboardNavigationMode[KeyboardNavigationMode["Continue"] = 0] = "Continue";
            KeyboardNavigationMode[KeyboardNavigationMode["Once"] = 1] = "Once";
            KeyboardNavigationMode[KeyboardNavigationMode["Cycle"] = 2] = "Cycle";
            KeyboardNavigationMode[KeyboardNavigationMode["None"] = 3] = "None";
            KeyboardNavigationMode[KeyboardNavigationMode["Contained"] = 4] = "Contained";
            KeyboardNavigationMode[KeyboardNavigationMode["Local"] = 5] = "Local";
        })(Input.KeyboardNavigationMode || (Input.KeyboardNavigationMode = {}));
        var KeyboardNavigationMode = Input.KeyboardNavigationMode;
        Fayde.CoreLibrary.addEnum(KeyboardNavigationMode, "KeyboardNavigationMode");
        (function (ModifierKeys) {
            ModifierKeys[ModifierKeys["None"] = 0] = "None";
            ModifierKeys[ModifierKeys["Alt"] = 1] = "Alt";
            ModifierKeys[ModifierKeys["Control"] = 2] = "Control";
            ModifierKeys[ModifierKeys["Shift"] = 4] = "Shift";
            ModifierKeys[ModifierKeys["Windows"] = 8] = "Windows";
            ModifierKeys[ModifierKeys["Apple"] = 16] = "Apple";
        })(Input.ModifierKeys || (Input.ModifierKeys = {}));
        var ModifierKeys = Input.ModifierKeys;
        var Keyboard = (function () {
            function Keyboard() {
            }
            Keyboard.RefreshModifiers = function (e) {
                if (e.Shift)
                    Keyboard.Modifiers |= ModifierKeys.Shift;
                else
                    Keyboard.Modifiers &= ~ModifierKeys.Shift;
                if (e.Ctrl)
                    Keyboard.Modifiers |= ModifierKeys.Control;
                else
                    Keyboard.Modifiers &= ~ModifierKeys.Control;
                if (e.Alt)
                    Keyboard.Modifiers |= ModifierKeys.Alt;
                else
                    Keyboard.Modifiers &= ~ModifierKeys.Alt;
            };
            Keyboard.HasControl = function () {
                return (Keyboard.Modifiers & ModifierKeys.Control) === ModifierKeys.Control;
            };
            Keyboard.HasAlt = function () {
                return (Keyboard.Modifiers & ModifierKeys.Alt) === ModifierKeys.Alt;
            };
            Keyboard.HasShift = function () {
                return (Keyboard.Modifiers & ModifierKeys.Shift) === ModifierKeys.Shift;
            };
            Keyboard.Modifiers = ModifierKeys.None;
            return Keyboard;
        })();
        Input.Keyboard = Keyboard;
        Fayde.CoreLibrary.add(Keyboard);
    })(Input = Fayde.Input || (Fayde.Input = {}));
})(Fayde || (Fayde = {}));
/// <reference path="../Core/FrameworkElement.ts" />
/// <reference path="../Core/Providers/IsEnabledStore.ts" />
/// <reference path="../Input/Keyboard.ts" />
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        var ControlNode = (function (_super) {
            __extends(ControlNode, _super);
            function ControlNode(xobj) {
                _super.call(this, xobj);
                this.IsFocused = false;
            }
            ControlNode.prototype.TabTo = function () {
                var xobj = this.XObject;
                return xobj.IsEnabled && xobj.IsTabStop && this.Focus();
            };
            ControlNode.prototype.ApplyTemplateWithError = function (error) {
                if (!_super.prototype.ApplyTemplateWithError.call(this, error))
                    return false;
                this.XObject.UpdateValidationState();
                return true;
            };
            ControlNode.prototype.DoApplyTemplateWithError = function (error) {
                var xobj = this.XObject;
                var t = xobj.Template;
                var root;
                if (t)
                    root = t.GetVisualTree(xobj);
                if (!root && !(root = this.GetDefaultVisualTree()))
                    return false;
                if (this.TemplateRoot && this.TemplateRoot !== root)
                    this.DetachVisualChild(this.TemplateRoot, error);
                this.TemplateRoot = root;
                if (this.TemplateRoot)
                    this.AttachVisualChild(this.TemplateRoot, error);
                if (error.Message)
                    return false;
                return true;
            };
            ControlNode.prototype.GetDefaultVisualTree = function () { return undefined; };
            ControlNode.prototype.OnIsAttachedChanged = function (newIsAttached) {
                _super.prototype.OnIsAttachedChanged.call(this, newIsAttached);
                if (!newIsAttached)
                    Fayde.Media.VSM.VisualStateManager.Deactivate(this.XObject, this.TemplateRoot);
                else
                    Fayde.Media.VSM.VisualStateManager.Activate(this.XObject, this.TemplateRoot);
            };
            ControlNode.prototype.OnParentChanged = function (oldParentNode, newParentNode) {
                _super.prototype.OnParentChanged.call(this, oldParentNode, newParentNode);
                this.IsEnabled = newParentNode ? newParentNode.IsEnabled : true;
            };
            ControlNode.prototype.OnTemplateChanged = function (oldTemplate, newTemplate) {
                var subtree = this.SubtreeNode;
                if (subtree) {
                    var error = new BError();
                    if (!this.DetachVisualChild(subtree.XObject, error))
                        error.ThrowException();
                }
                this.LayoutUpdater.invalidateMeasure();
            };
            Object.defineProperty(ControlNode.prototype, "IsEnabled", {
                get: function () { return this.XObject.IsEnabled; },
                set: function (value) {
                    Fayde.Providers.IsEnabledStore.EmitInheritedChanged(this, value);
                    this.OnIsEnabledChanged(undefined, value);
                },
                enumerable: true,
                configurable: true
            });
            ControlNode.prototype.OnIsEnabledChanged = function (oldValue, newValue) {
                if (!newValue) {
                    this.IsMouseOver = false;
                    if (Fayde.Surface.RemoveFocusFrom(this.XObject)) {
                        Fayde.TabNavigationWalker.Focus(this, true);
                    }
                    this.ReleaseMouseCapture();
                }
                _super.prototype.OnIsEnabledChanged.call(this, oldValue, newValue);
            };
            ControlNode.prototype.Focus = function (recurse) {
                return Fayde.Surface.Focus(this.XObject, recurse);
            };
            ControlNode.prototype.CanCaptureMouse = function () { return this.XObject.IsEnabled; };
            return ControlNode;
        })(Fayde.FENode);
        Controls.ControlNode = ControlNode;
        var Control = (function (_super) {
            __extends(Control, _super);
            function Control() {
                _super.call(this);
                this.IsEnabledChanged = new nullstone.Event();
                Fayde.UIReaction(Control.IsEnabledProperty, function (upd, nv, ov, control) {
                    var args = {
                        Property: Control.IsEnabledProperty,
                        OldValue: ov,
                        NewValue: nv
                    };
                    control.OnIsEnabledChanged(args);
                    if (nv !== true)
                        control.XamlNode.IsMouseOver = false;
                    control.UpdateVisualState();
                    control.IsEnabledChanged.raiseAsync(control, args);
                }, false, true, this);
                Fayde.UIReaction(Control.PaddingProperty, function (upd, nv, ov) { return upd.invalidateMeasure(); }, false, true, this);
                Fayde.UIReaction(Control.BorderThicknessProperty, function (upd, nv, ov) { return upd.invalidateMeasure(); }, false, true, this);
                Fayde.UIReaction(Control.HorizontalContentAlignmentProperty, function (upd, nv, ov) { return upd.invalidateArrange(); }, false, true, this);
                Fayde.UIReaction(Control.VerticalContentAlignmentProperty, function (upd, nv, ov) { return upd.invalidateArrange(); }, false, true, this);
            }
            Control.prototype.CreateNode = function () { return new ControlNode(this); };
            Control.prototype.CreateLayoutUpdater = function () { return new minerva.controls.control.ControlUpdater(); };
            Control.prototype.IsInheritable = function (propd) {
                if (ControlInheritedProperties.indexOf(propd) > -1)
                    return true;
                return _super.prototype.IsInheritable.call(this, propd);
            };
            Object.defineProperty(Control.prototype, "IsFocused", {
                get: function () { return this.XamlNode.IsFocused; },
                enumerable: true,
                configurable: true
            });
            Control.prototype.GetTemplateChild = function (childName, type) {
                var root = this.XamlNode.TemplateRoot;
                if (!root)
                    return;
                var n = root.XamlNode.FindName(childName);
                if (!n)
                    return;
                var xobj = n.XObject;
                if (!type || (xobj instanceof type))
                    return xobj;
            };
            Control.prototype.ApplyTemplate = function () {
                var error = new BError();
                var result = this.XamlNode.ApplyTemplateWithError(error);
                if (error.Message)
                    error.ThrowException();
                return result;
            };
            Control.prototype.GetDefaultStyle = function () {
                return undefined;
            };
            Control.prototype.OnIsEnabledChanged = function (e) { };
            Control.prototype.OnGotFocus = function (e) {
                this.XamlNode.IsFocused = true;
                this.UpdateValidationState();
            };
            Control.prototype.OnLostFocus = function (e) {
                this.XamlNode.IsFocused = false;
                this.UpdateValidationState();
            };
            Control.prototype.UpdateVisualState = function (useTransitions) {
                var _this = this;
                useTransitions = useTransitions !== false;
                var gotoFunc = function (state) { return Fayde.Media.VSM.VisualStateManager.GoToState(_this, state, useTransitions); };
                this.GoToStates(gotoFunc);
            };
            Control.prototype.GoToStates = function (gotoFunc) {
                this.GoToStateCommon(gotoFunc);
                this.GoToStateFocus(gotoFunc);
                this.GoToStateSelection(gotoFunc);
            };
            Control.prototype.GoToStateCommon = function (gotoFunc) {
                if (!this.IsEnabled)
                    return gotoFunc("Disabled");
                if (this.IsMouseOver)
                    return gotoFunc("MouseOver");
                return gotoFunc("Normal");
            };
            Control.prototype.GoToStateFocus = function (gotoFunc) {
                if (this.IsFocused && this.IsEnabled)
                    return gotoFunc("Focused");
                return gotoFunc("Unfocused");
            };
            Control.prototype.GoToStateSelection = function (gotoFunc) {
                return false;
            };
            Control.prototype.UpdateValidationState = function (valid) {
                var _this = this;
                if (valid === undefined) {
                    var errors = Fayde.Validation.GetErrors(this);
                    valid = errors.Count < 1;
                }
                var gotoFunc = function (state) { return Fayde.Media.VSM.VisualStateManager.GoToState(_this, state, true); };
                this.GoToStateValidation(valid, gotoFunc);
            };
            Control.prototype.GoToStateValidation = function (valid, gotoFunc) {
                if (valid)
                    return gotoFunc("Valid");
                else if (this.IsFocused)
                    return gotoFunc("InvalidFocused");
                return gotoFunc("InvalidUnfocused");
            };
            Control.BackgroundProperty = DependencyProperty.RegisterCore("Background", function () { return Fayde.Media.Brush; }, Control);
            Control.BorderBrushProperty = DependencyProperty.RegisterCore("BorderBrush", function () { return Fayde.Media.Brush; }, Control);
            Control.BorderThicknessProperty = DependencyProperty.RegisterCore("BorderThickness", function () { return Thickness; }, Control);
            Control.FontFamilyProperty = Fayde.InheritableOwner.FontFamilyProperty.ExtendTo(Control);
            Control.FontSizeProperty = Fayde.InheritableOwner.FontSizeProperty.ExtendTo(Control);
            Control.FontStretchProperty = Fayde.InheritableOwner.FontStretchProperty.ExtendTo(Control);
            Control.FontStyleProperty = Fayde.InheritableOwner.FontStyleProperty.ExtendTo(Control);
            Control.FontWeightProperty = Fayde.InheritableOwner.FontWeightProperty.ExtendTo(Control);
            Control.ForegroundProperty = Fayde.InheritableOwner.ForegroundProperty.ExtendTo(Control);
            Control.HorizontalContentAlignmentProperty = DependencyProperty.Register("HorizontalContentAlignment", function () { return new Fayde.Enum(Fayde.HorizontalAlignment); }, Control, Fayde.HorizontalAlignment.Center);
            Control.IsEnabledProperty = DependencyProperty.Register("IsEnabled", function () { return Boolean; }, Control, true);
            Control.IsTabStopProperty = DependencyProperty.Register("IsTabStop", function () { return Boolean; }, Control, true);
            Control.PaddingProperty = DependencyProperty.RegisterCore("Padding", function () { return Thickness; }, Control);
            Control.TabIndexProperty = DependencyProperty.Register("TabIndex", function () { return Number; }, Control);
            Control.TabNavigationProperty = DependencyProperty.Register("TabNavigation", function () { return new Fayde.Enum(Fayde.Input.KeyboardNavigationMode); }, Control, Fayde.Input.KeyboardNavigationMode.Local);
            Control.TemplateProperty = DependencyProperty.Register("Template", function () { return Controls.ControlTemplate; }, Control, undefined, function (d, args) { return d.XamlNode.OnTemplateChanged(args.OldValue, args.NewValue); });
            Control.VerticalContentAlignmentProperty = DependencyProperty.Register("VerticalContentAlignment", function () { return new Fayde.Enum(Fayde.VerticalAlignment); }, Control, Fayde.VerticalAlignment.Center);
            return Control;
        })(Fayde.FrameworkElement);
        Controls.Control = Control;
        Fayde.CoreLibrary.add(Control);
        Control.IsEnabledProperty.Store = Fayde.Providers.IsEnabledStore.Instance;
        var ControlInheritedProperties = [
            Control.FontFamilyProperty,
            Control.FontSizeProperty,
            Control.FontStretchProperty,
            Control.FontStyleProperty,
            Control.FontWeightProperty,
            Control.ForegroundProperty
        ];
        Controls.TemplateVisualStates = nullstone.CreateTypedAnnotation("TemplateVisualState");
        Controls.TemplateParts = nullstone.CreateTypedAnnotation("TemplatePart");
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
/// <reference path="Control.ts" />
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        var ContentControlNode = (function (_super) {
            __extends(ContentControlNode, _super);
            function ContentControlNode(xobj) {
                _super.call(this, xobj);
                this._DefaultPresenter = null;
            }
            ContentControlNode.prototype.GetDefaultVisualTree = function () {
                var xobj = this.XObject;
                var content = xobj.Content;
                if (content instanceof Fayde.UIElement)
                    return content;
                var presenter = this._DefaultPresenter;
                if (!presenter) {
                    presenter = this._DefaultPresenter = new Controls.ContentPresenter();
                    presenter.TemplateOwner = this.XObject;
                }
                presenter.SetValue(Controls.ContentPresenter.ContentProperty, new Fayde.TemplateBindingExpression("Content"));
                presenter.SetValue(Controls.ContentPresenter.ContentTemplateProperty, new Fayde.TemplateBindingExpression("ContentTemplate"));
                return presenter;
            };
            ContentControlNode.prototype.OnContentChanged = function (o, n) {
                if (o instanceof Fayde.UIElement || n instanceof Fayde.UIElement)
                    this.CleanOldContent(o);
            };
            ContentControlNode.prototype.OnTemplateChanged = function (oldTemplate, newTemplate) {
                if (oldTemplate)
                    this.CleanOldContent(this.XObject.Content);
                _super.prototype.OnTemplateChanged.call(this, oldTemplate, newTemplate);
            };
            ContentControlNode.prototype.CleanOldContent = function (content) {
                if (content instanceof Fayde.UIElement) {
                    Fayde.FENode.DetachFromVisualParent(content);
                    this.LayoutUpdater.invalidateMeasure();
                }
                else {
                    var presenter = this._DefaultPresenter;
                    if (presenter) {
                        presenter.ClearValue(Controls.ContentPresenter.ContentProperty);
                        presenter.ClearValue(Controls.ContentPresenter.ContentTemplateProperty);
                        Fayde.FENode.DetachFromVisualParent(presenter);
                        this.LayoutUpdater.invalidateMeasure();
                    }
                }
            };
            return ContentControlNode;
        })(Controls.ControlNode);
        Controls.ContentControlNode = ContentControlNode;
        var ContentControl = (function (_super) {
            __extends(ContentControl, _super);
            function ContentControl() {
                _super.call(this);
                this.DefaultStyleKey = ContentControl;
            }
            ContentControl.prototype.CreateNode = function () {
                return new ContentControlNode(this);
            };
            ContentControl.prototype.OnContentPropertyChanged = function (args) {
                this.XamlNode.OnContentChanged(args.OldValue, args.NewValue);
                this.OnContentChanged(args.OldValue, args.NewValue);
            };
            ContentControl.prototype.OnContentUriPropertyChanged = function (args) {
                var _this = this;
                var oldUri;
                if (args.OldValue instanceof Fayde.Uri) {
                    this.Content = undefined;
                    oldUri = args.OldValue;
                }
                var newUri;
                if (args.NewValue instanceof Fayde.Uri) {
                    newUri = args.NewValue;
                    Fayde.Markup.Resolve(newUri)
                        .then(function (m) { return _this._OnLoadedUri(m); }, function (err) { return _this._OnErroredUri(err, newUri); });
                }
                this.OnContentUriChanged(oldUri, newUri);
            };
            ContentControl.prototype.OnContentChanged = function (oldContent, newContent) {
            };
            ContentControl.prototype.OnContentTemplateChanged = function (oldContentTemplate, newContentTemplate) {
            };
            ContentControl.prototype.OnContentUriChanged = function (oldSourceUri, newSourceUri) {
            };
            ContentControl.prototype._OnLoadedUri = function (xm) {
                this.Content = Fayde.Markup.Load(this.App, xm);
            };
            ContentControl.prototype._OnErroredUri = function (err, src) {
                console.warn("Error resolving XamlResource: '" + src.toString() + "'.");
            };
            ContentControl.ContentProperty = DependencyProperty.Register("Content", function () { return Object; }, ContentControl, undefined, function (d, args) { return d.OnContentPropertyChanged(args); });
            ContentControl.ContentTemplateProperty = DependencyProperty.Register("ContentTemplate", function () { return Fayde.DataTemplate; }, ContentControl, undefined, function (d, args) { return d.OnContentTemplateChanged(args.OldValue, args.NewValue); });
            ContentControl.ContentUriProperty = DependencyProperty.Register("ContentUri", function () { return Fayde.Uri; }, ContentControl, undefined, function (d, args) { return d.OnContentUriPropertyChanged(args); });
            return ContentControl;
        })(Controls.Control);
        Controls.ContentControl = ContentControl;
        Fayde.CoreLibrary.add(ContentControl);
        Fayde.Markup.Content(ContentControl, ContentControl.ContentProperty);
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        (function (TextWrapping) {
            TextWrapping[TextWrapping["NoWrap"] = 0] = "NoWrap";
            TextWrapping[TextWrapping["Wrap"] = 1] = "Wrap";
            TextWrapping[TextWrapping["WrapWithOverflow"] = 2] = "WrapWithOverflow";
        })(Controls.TextWrapping || (Controls.TextWrapping = {}));
        var TextWrapping = Controls.TextWrapping;
        Fayde.CoreLibrary.addEnum(TextWrapping, "TextWrapping");
        (function (ScrollBarVisibility) {
            ScrollBarVisibility[ScrollBarVisibility["Disabled"] = 0] = "Disabled";
            ScrollBarVisibility[ScrollBarVisibility["Auto"] = 1] = "Auto";
            ScrollBarVisibility[ScrollBarVisibility["Hidden"] = 2] = "Hidden";
            ScrollBarVisibility[ScrollBarVisibility["Visible"] = 3] = "Visible";
        })(Controls.ScrollBarVisibility || (Controls.ScrollBarVisibility = {}));
        var ScrollBarVisibility = Controls.ScrollBarVisibility;
        Fayde.CoreLibrary.addEnum(ScrollBarVisibility, "ScrollBarVisibility");
        (function (TextTrimming) {
            TextTrimming[TextTrimming["None"] = 0] = "None";
            TextTrimming[TextTrimming["WordEllipsis"] = 1] = "WordEllipsis";
            TextTrimming[TextTrimming["CharacterEllipsis"] = 2] = "CharacterEllipsis";
        })(Controls.TextTrimming || (Controls.TextTrimming = {}));
        var TextTrimming = Controls.TextTrimming;
        Fayde.CoreLibrary.addEnum(TextTrimming, "TextTrimming");
        (function (ClickMode) {
            ClickMode[ClickMode["Release"] = 0] = "Release";
            ClickMode[ClickMode["Press"] = 1] = "Press";
            ClickMode[ClickMode["Hover"] = 2] = "Hover";
        })(Controls.ClickMode || (Controls.ClickMode = {}));
        var ClickMode = Controls.ClickMode;
        Fayde.CoreLibrary.addEnum(ClickMode, "ClickMode");
        (function (PlacementMode) {
            PlacementMode[PlacementMode["Bottom"] = 0] = "Bottom";
            PlacementMode[PlacementMode["Right"] = 1] = "Right";
            PlacementMode[PlacementMode["Mouse"] = 2] = "Mouse";
            PlacementMode[PlacementMode["Left"] = 3] = "Left";
            PlacementMode[PlacementMode["Top"] = 4] = "Top";
        })(Controls.PlacementMode || (Controls.PlacementMode = {}));
        var PlacementMode = Controls.PlacementMode;
        Fayde.CoreLibrary.addEnum(PlacementMode, "PlacementMode");
        (function (SelectionMode) {
            SelectionMode[SelectionMode["Single"] = 0] = "Single";
            SelectionMode[SelectionMode["Multiple"] = 1] = "Multiple";
            SelectionMode[SelectionMode["Extended"] = 2] = "Extended";
        })(Controls.SelectionMode || (Controls.SelectionMode = {}));
        var SelectionMode = Controls.SelectionMode;
        Fayde.CoreLibrary.addEnum(SelectionMode, "SelectionMode");
        (function (MediaElementState) {
            MediaElementState[MediaElementState["Closed"] = 0] = "Closed";
            MediaElementState[MediaElementState["Opening"] = 1] = "Opening";
            MediaElementState[MediaElementState["Buffering"] = 4] = "Buffering";
            MediaElementState[MediaElementState["Playing"] = 5] = "Playing";
            MediaElementState[MediaElementState["Paused"] = 6] = "Paused";
            MediaElementState[MediaElementState["Stopped"] = 7] = "Stopped";
        })(Controls.MediaElementState || (Controls.MediaElementState = {}));
        var MediaElementState = Controls.MediaElementState;
        Fayde.CoreLibrary.addEnum(MediaElementState, "MediaElementState");
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
/// <reference path="../ContentControl.ts" />
/// <reference path="../Enums.ts" />
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        var Primitives;
        (function (Primitives) {
            var ButtonBase = (function (_super) {
                __extends(ButtonBase, _super);
                function ButtonBase() {
                    _super.call(this);
                    this.Click = new Fayde.RoutedEvent();
                    this._IsMouseCaptured = false;
                    this._IsMouseLeftButtonDown = false;
                    this._IsSpaceKeyDown = false;
                    this._MousePosition = new Point();
                    this._SuspendStateChanges = false;
                    this.IsTabStop = true;
                }
                ButtonBase.prototype.OnIsPressedChanged = function (args) {
                    this.UpdateVisualState();
                };
                ButtonBase.prototype.OnIsEnabledChanged = function (e) {
                    var _this = this;
                    if (!!e.NewValue)
                        return;
                    this._DoWithSuspend(function () {
                        _this.SetCurrentValue(ButtonBase.IsFocusedProperty, false);
                        _this.SetCurrentValue(ButtonBase.IsPressedProperty, false);
                        _this._IsMouseCaptured = false;
                        _this._IsSpaceKeyDown = false;
                        _this._IsMouseLeftButtonDown = false;
                    });
                };
                ButtonBase.prototype.OnMouseEnter = function (e) {
                    var _this = this;
                    _super.prototype.OnMouseEnter.call(this, e);
                    this.UpdateVisualState();
                    if (this.ClickMode !== Controls.ClickMode.Hover || !this.IsEnabled)
                        return;
                    this._DoWithSuspend(function () {
                        _this.SetCurrentValue(ButtonBase.IsPressedProperty, true);
                        _this.OnClick();
                    });
                };
                ButtonBase.prototype.OnMouseLeave = function (e) {
                    var _this = this;
                    _super.prototype.OnMouseLeave.call(this, e);
                    this.UpdateVisualState();
                    if (this.ClickMode !== Controls.ClickMode.Hover || !this.IsEnabled)
                        return;
                    this._DoWithSuspend(function () {
                        _this.SetCurrentValue(ButtonBase.IsPressedProperty, false);
                    });
                };
                ButtonBase.prototype.OnMouseMove = function (e) {
                    _super.prototype.OnMouseMove.call(this, e);
                    this._MousePosition = e.GetPosition(this);
                    if (this._IsMouseLeftButtonDown && this.IsEnabled && this.ClickMode !== Controls.ClickMode.Hover && this._IsMouseCaptured && !this._IsSpaceKeyDown) {
                        this.SetCurrentValue(ButtonBase.IsPressedProperty, this._IsValidPosition(this._MousePosition));
                    }
                };
                ButtonBase.prototype.OnMouseLeftButtonDown = function (e) {
                    var _this = this;
                    _super.prototype.OnMouseLeftButtonDown.call(this, e);
                    this._IsMouseLeftButtonDown = true;
                    if (!this.IsEnabled)
                        return;
                    var clickMode = this.ClickMode;
                    if (clickMode === Controls.ClickMode.Hover)
                        return;
                    e.Handled = true;
                    this._DoWithSuspend(function () {
                        _this.Focus();
                        _this._CaptureMouseInternal();
                        if (_this._IsMouseCaptured)
                            _this.SetCurrentValue(ButtonBase.IsPressedProperty, true);
                    });
                    if (clickMode === Controls.ClickMode.Press)
                        this.OnClick();
                };
                ButtonBase.prototype.OnMouseLeftButtonUp = function (e) {
                    _super.prototype.OnMouseLeftButtonDown.call(this, e);
                    this._IsMouseLeftButtonDown = false;
                    if (!this.IsEnabled)
                        return;
                    var clickMode = this.ClickMode;
                    if (clickMode === Controls.ClickMode.Hover)
                        return;
                    e.Handled = true;
                    if (!this._IsSpaceKeyDown && this.IsPressed && clickMode === Controls.ClickMode.Release)
                        this.OnClick();
                    if (!this._IsSpaceKeyDown) {
                        this._ReleaseMouseCaptureInternal();
                        this.SetCurrentValue(ButtonBase.IsPressedProperty, false);
                    }
                };
                ButtonBase.prototype.OnGotFocus = function (e) {
                    _super.prototype.OnGotFocus.call(this, e);
                    this.SetCurrentValue(ButtonBase.IsFocusedProperty, true);
                    this.UpdateVisualState();
                };
                ButtonBase.prototype.OnLostFocus = function (e) {
                    var _this = this;
                    _super.prototype.OnLostFocus.call(this, e);
                    this.SetCurrentValue(ButtonBase.IsFocusedProperty, false);
                    if (this.ClickMode === Controls.ClickMode.Hover)
                        return;
                    this._DoWithSuspend(function () {
                        _this.SetCurrentValue(ButtonBase.IsPressedProperty, false);
                        _this._ReleaseMouseCaptureInternal();
                        _this._IsSpaceKeyDown = false;
                    });
                };
                ButtonBase.prototype.OnTouchMove = function (e) {
                    _super.prototype.OnTouchMove.call(this, e);
                    if (!this.IsEnabled || e.Device.Captured !== this)
                        return;
                    var tp = e.GetTouchPoint(this);
                    this.SetCurrentValue(ButtonBase.IsPressedProperty, this._IsValidPosition(tp.Position));
                };
                ButtonBase.prototype.OnTouchDown = function (e) {
                    var _this = this;
                    _super.prototype.OnTouchDown.call(this, e);
                    if (!this.IsEnabled)
                        return;
                    e.Handled = true;
                    this._DoWithSuspend(function () {
                        _this.Focus();
                        if (e.Device.Capture(_this))
                            _this.SetCurrentValue(ButtonBase.IsPressedProperty, true);
                    });
                    if (this.ClickMode === Controls.ClickMode.Press)
                        this.OnClick();
                };
                ButtonBase.prototype.OnTouchUp = function (e) {
                    _super.prototype.OnTouchUp.call(this, e);
                    if (!this.IsEnabled)
                        return;
                    e.Handled = true;
                    if (this.IsPressed && this.ClickMode === Controls.ClickMode.Release)
                        this.OnClick();
                    e.Device.ReleaseCapture(this);
                    this.SetCurrentValue(ButtonBase.IsPressedProperty, false);
                };
                ButtonBase.prototype.OnClick = function () {
                    var cmd = this.Command;
                    var par = this.CommandParameter;
                    if (cmd != null) {
                        var canf = cmd.CanExecute;
                        if ((canf == null || typeof canf !== "function" || canf(par)) && (cmd.Execute && typeof cmd.Execute === "function"))
                            cmd.Execute(par);
                    }
                    this.Click.raise(this, new Fayde.RoutedEventArgs());
                };
                ButtonBase.prototype._DoWithSuspend = function (action) {
                    this._SuspendStateChanges = true;
                    try {
                        action();
                    }
                    finally {
                        this._SuspendStateChanges = false;
                        this.UpdateVisualState();
                    }
                };
                ButtonBase.prototype.UpdateVisualState = function (useTransitions) {
                    if (this._SuspendStateChanges)
                        return;
                    _super.prototype.UpdateVisualState.call(this, useTransitions);
                };
                ButtonBase.prototype.GoToStateCommon = function (gotoFunc) {
                    if (!this.IsEnabled)
                        return gotoFunc("Disabled");
                    if (this.IsPressed)
                        return gotoFunc("Pressed");
                    if (this.IsMouseOver)
                        return gotoFunc("MouseOver");
                    return gotoFunc("Normal");
                };
                ButtonBase.prototype._CaptureMouseInternal = function () {
                    if (!this._IsMouseCaptured)
                        this._IsMouseCaptured = this.CaptureMouse();
                };
                ButtonBase.prototype._ReleaseMouseCaptureInternal = function () {
                    this.ReleaseMouseCapture();
                    this._IsMouseCaptured = false;
                };
                ButtonBase.prototype._IsValidPosition = function (pos) {
                    return pos.x >= 0.0 && pos.x <= this.ActualWidth
                        && pos.y >= 0.0 && pos.y <= this.ActualHeight;
                };
                ButtonBase.prototype.OnCommandChanged = function (args) {
                    var cmd = Fayde.Input.ICommand_.as(args.OldValue);
                    if (cmd)
                        cmd.CanExecuteChanged.off(this.OnCommandCanExecuteChanged, this);
                    cmd = Fayde.Input.ICommand_.as(args.NewValue);
                    if (cmd) {
                        cmd.CanExecuteChanged.on(this.OnCommandCanExecuteChanged, this);
                        this.IsEnabled = cmd.CanExecute(this.CommandParameter);
                    }
                };
                ButtonBase.prototype.OnCommandCanExecuteChanged = function (sender, e) {
                    this.IsEnabled = this.Command.CanExecute(this.CommandParameter);
                };
                ButtonBase.prototype.OnCommandParameterChanged = function (args) {
                    var cmd = this.Command;
                    if (cmd)
                        this.IsEnabled = cmd.CanExecute(args.NewValue);
                };
                ButtonBase.ClickModeProperty = DependencyProperty.Register("ClickMode", function () { return new Fayde.Enum(Controls.ClickMode); }, ButtonBase, Controls.ClickMode.Release);
                ButtonBase.IsPressedProperty = DependencyProperty.RegisterReadOnly("IsPressed", function () { return Boolean; }, ButtonBase, false, function (d, args) { return d.OnIsPressedChanged(args); });
                ButtonBase.IsFocusedProperty = DependencyProperty.RegisterReadOnly("IsFocused", function () { return Boolean; }, ButtonBase, false);
                ButtonBase.CommandProperty = DependencyProperty.RegisterCore("Command", function () { return Fayde.Input.ICommand_; }, ButtonBase, undefined, function (d, args) { return d.OnCommandChanged(args); });
                ButtonBase.CommandParameterProperty = DependencyProperty.RegisterCore("CommandParameter", function () { return Object; }, ButtonBase, undefined, function (d, args) { return d.OnCommandParameterChanged(args); });
                return ButtonBase;
            })(Controls.ContentControl);
            Primitives.ButtonBase = ButtonBase;
            Fayde.CoreLibrary.add(ButtonBase);
        })(Primitives = Controls.Primitives || (Controls.Primitives = {}));
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
/// <reference path="Primitives/ButtonBase.ts" />
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        var Button = (function (_super) {
            __extends(Button, _super);
            function Button() {
                _super.call(this);
                this.DefaultStyleKey = Button;
            }
            Button.prototype.OnApplyTemplate = function () {
                _super.prototype.OnApplyTemplate.call(this);
                this.UpdateVisualState(false);
            };
            Button.prototype.OnIsEnabledChanged = function (e) {
                _super.prototype.OnIsEnabledChanged.call(this, e);
                this.IsTabStop = e.NewValue;
            };
            return Button;
        })(Controls.Primitives.ButtonBase);
        Controls.Button = Button;
        Fayde.CoreLibrary.add(Button);
        Controls.TemplateVisualStates(Button, { GroupName: "CommonStates", Name: "Normal" }, { GroupName: "CommonStates", Name: "MouseOver" }, { GroupName: "CommonStates", Name: "Pressed" }, { GroupName: "CommonStates", Name: "Disabled" }, { GroupName: "FocusStates", Name: "Unfocused" }, { GroupName: "FocusStates", Name: "Focused" });
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
/// <reference path="XamlObject.ts" />
var Fayde;
(function (Fayde) {
    var XamlObjectCollection = (function (_super) {
        __extends(XamlObjectCollection, _super);
        function XamlObjectCollection() {
            _super.apply(this, arguments);
            this._ht = [];
        }
        XamlObjectCollection.prototype.AttachTo = function (xobj) {
            var error = new BError();
            if (!this.XamlNode.AttachTo(xobj.XamlNode, error))
                error.ThrowException();
        };
        Object.defineProperty(XamlObjectCollection.prototype, "Count", {
            get: function () {
                return this._ht.length;
            },
            enumerable: true,
            configurable: true
        });
        XamlObjectCollection.prototype.GetRange = function (startIndex, endIndex) {
            return this._ht.slice(startIndex, endIndex);
        };
        XamlObjectCollection.prototype.GetValueAt = function (index) {
            return this._ht[index];
        };
        XamlObjectCollection.prototype.SetValueAt = function (index, value) {
            if (!this.CanAdd(value))
                return false;
            if (index < 0 || index >= this._ht.length)
                return false;
            var removed = this._ht[index];
            var added = value;
            var error = new BError();
            if (this.AddingToCollection(added, error)) {
                this._ht[index] = added;
                this.RemovedFromCollection(removed, true);
                this._RaiseItemReplaced(removed, added, index);
                return true;
            }
            return false;
        };
        XamlObjectCollection.prototype.Add = function (value) {
            var rv = this.Insert(this._ht.length, value);
            return rv ? this._ht.length - 1 : -1;
        };
        XamlObjectCollection.prototype.Insert = function (index, value) {
            if (!this.CanAdd(value))
                return false;
            if (index < 0)
                return false;
            var count = this._ht.length;
            if (index > count)
                index = count;
            var error = new BError();
            if (this.AddingToCollection(value, error)) {
                this._ht.splice(index, 0, value);
                this._RaiseItemAdded(value, index);
                return true;
            }
            if (error.Message)
                throw new Exception(error.Message);
            return false;
        };
        XamlObjectCollection.prototype.Remove = function (value) {
            var index = this.IndexOf(value);
            if (index === -1)
                return false;
            return this.RemoveAt(index);
        };
        XamlObjectCollection.prototype.RemoveAt = function (index) {
            if (index < 0 || index >= this._ht.length)
                return false;
            var value = this._ht[index];
            this._ht.splice(index, 1);
            this.RemovedFromCollection(value, true);
            this._RaiseItemRemoved(value, index);
            return true;
        };
        XamlObjectCollection.prototype.Clear = function () {
            var old = this._ht;
            this._ht = [];
            var len = old.length;
            for (var i = 0; i < len; i++) {
                this.RemovedFromCollection(old[i], true);
            }
            this._RaiseCleared(old);
            return true;
        };
        XamlObjectCollection.prototype.IndexOf = function (value) {
            return this._ht.indexOf(value);
        };
        XamlObjectCollection.prototype.Contains = function (value) {
            return this.IndexOf(value) > -1;
        };
        XamlObjectCollection.prototype.CanAdd = function (value) {
            return true;
        };
        XamlObjectCollection.prototype.AddingToCollection = function (value, error) {
            if (value instanceof Fayde.XamlObject)
                return value.XamlNode.AttachTo(this.XamlNode, error);
            return true;
        };
        XamlObjectCollection.prototype.RemovedFromCollection = function (value, isValueSafe) {
            if (value instanceof Fayde.XamlObject)
                value.XamlNode.Detach();
        };
        XamlObjectCollection.prototype.getEnumerator = function (reverse) {
            return nullstone.IEnumerator_.fromArray(this._ht, reverse);
        };
        XamlObjectCollection.prototype.GetNodeEnumerator = function (reverse) {
            var prev = this.getEnumerator(reverse);
            return {
                current: undefined,
                moveNext: function () {
                    if (!prev.moveNext()) {
                        this.current = undefined;
                        return false;
                    }
                    var xobj = prev.current;
                    this.current = xobj.XamlNode;
                    return true;
                }
            };
        };
        XamlObjectCollection.prototype._RaiseItemAdded = function (value, index) {
        };
        XamlObjectCollection.prototype._RaiseItemRemoved = function (value, index) {
        };
        XamlObjectCollection.prototype._RaiseItemReplaced = function (removed, added, index) {
        };
        XamlObjectCollection.prototype._RaiseCleared = function (old) {
        };
        XamlObjectCollection.prototype.CloneCore = function (source) {
            for (var en = source.getEnumerator(); en.moveNext();) {
                this.Add(Fayde.Clone(en.current));
            }
        };
        XamlObjectCollection.prototype.ToArray = function () {
            return this._ht.slice(0);
        };
        return XamlObjectCollection;
    })(Fayde.XamlObject);
    Fayde.XamlObjectCollection = XamlObjectCollection;
    nullstone.ICollection_.mark(XamlObjectCollection);
})(Fayde || (Fayde = {}));
/// <reference path="PropertyStore.ts" />
var Fayde;
(function (Fayde) {
    var Providers;
    (function (Providers) {
        var ImmutableStore = (function (_super) {
            __extends(ImmutableStore, _super);
            function ImmutableStore() {
                _super.apply(this, arguments);
            }
            ImmutableStore.prototype.GetValue = function (storage) {
                return storage.Local;
            };
            ImmutableStore.prototype.GetValuePrecedence = function (storage) {
                return Providers.PropertyPrecedence.LocalValue;
            };
            ImmutableStore.prototype.SetLocalValue = function (storage, newValue) {
                console.warn("Trying to set value for immutable property.");
            };
            ImmutableStore.prototype.ClearValue = function (storage) {
                console.warn("Trying to clear value for immutable property.");
            };
            ImmutableStore.prototype.ListenToChanged = function (target, propd, func, closure) {
                return {
                    Property: propd,
                    OnPropertyChanged: function (sender, args) { },
                    Detach: function () { }
                };
            };
            ImmutableStore.prototype.Clone = function (dobj, sourceStorage) {
                if (sourceStorage.Local instanceof Fayde.XamlObjectCollection) {
                    var newStorage = Providers.GetStorage(dobj, sourceStorage.Property);
                    var newColl = newStorage.Local;
                    newColl.CloneCore(sourceStorage.Local);
                    var anims = newStorage.Animations = sourceStorage.Animations;
                    if (anims) {
                        for (var i = 0; i < anims.length; i++) {
                            anims[i].PropStorage = newStorage;
                        }
                    }
                    return newStorage;
                }
                else {
                    console.warn("Cloning Immutable improperly");
                    return _super.prototype.Clone.call(this, dobj, sourceStorage);
                }
            };
            return ImmutableStore;
        })(Providers.PropertyStore);
        Providers.ImmutableStore = ImmutableStore;
        ImmutableStore.Instance = new ImmutableStore();
    })(Providers = Fayde.Providers || (Fayde.Providers = {}));
})(Fayde || (Fayde = {}));
/// <reference path="../Core/FrameworkElement.ts" />
/// <reference path="../Core/XamlObjectCollection.ts" />
/// <reference path="../Core/Providers/ImmutableStore.ts" />
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        var PanelChildrenCollection = (function (_super) {
            __extends(PanelChildrenCollection, _super);
            function PanelChildrenCollection() {
                _super.apply(this, arguments);
                this.$$updaters = [];
            }
            PanelChildrenCollection.prototype.AddingToCollection = function (value, error) {
                var panelNode = this.XamlNode.ParentNode;
                if (!panelNode.AttachVisualChild(value, error))
                    return false;
                return _super.prototype.AddingToCollection.call(this, value, error);
            };
            PanelChildrenCollection.prototype.RemovedFromCollection = function (value, isValueSafe) {
                var panelNode = this.XamlNode.ParentNode;
                panelNode.DetachVisualChild(value, null);
                _super.prototype.RemovedFromCollection.call(this, value, isValueSafe);
            };
            PanelChildrenCollection.prototype._RaiseCleared = function (values) {
                this.$$updaters.length = 0;
            };
            PanelChildrenCollection.prototype._RaiseItemAdded = function (value, index) {
                this.$$updaters.splice(index, 0, value.XamlNode.LayoutUpdater);
            };
            PanelChildrenCollection.prototype._RaiseItemRemoved = function (value, index) {
                this.$$updaters.splice(index, 1);
            };
            PanelChildrenCollection.prototype._RaiseItemReplaced = function (removed, added, index) {
                this.$$updaters.splice(index, 1, added.XamlNode.LayoutUpdater);
            };
            return PanelChildrenCollection;
        })(Fayde.XamlObjectCollection);
        var PanelNode = (function (_super) {
            __extends(PanelNode, _super);
            function PanelNode(xobj) {
                _super.call(this, xobj);
            }
            PanelNode.prototype.AttachVisualChild = function (uie, error) {
                this.OnVisualChildAttached(uie);
                uie.XamlNode.SetIsLoaded(this.IsLoaded);
                return true;
            };
            PanelNode.prototype.DetachVisualChild = function (uie, error) {
                this.OnVisualChildDetached(uie);
                uie.XamlNode.SetIsLoaded(false);
                return true;
            };
            return PanelNode;
        })(Fayde.FENode);
        Controls.PanelNode = PanelNode;
        var Panel = (function (_super) {
            __extends(Panel, _super);
            function Panel() {
                _super.call(this);
                var coll = Panel.ChildrenProperty.Initialize(this);
                this.XamlNode.LayoutUpdater.setChildren(coll.$$updaters);
                var error = new BError();
                this.XamlNode.SetSubtreeNode(coll.XamlNode, error);
            }
            Panel.prototype.CreateNode = function () { return new PanelNode(this); };
            Panel.prototype.CreateLayoutUpdater = function () { return new minerva.controls.panel.PanelUpdater(); };
            Panel.GetZIndex = function (uie) { return uie.GetValue(Panel.ZIndexProperty); };
            Panel.SetZIndex = function (uie, value) { uie.SetValue(Panel.ZIndexProperty, value); };
            Panel.BackgroundProperty = DependencyProperty.Register("Background", function () { return Fayde.Media.Brush; }, Panel);
            Panel.ChildrenProperty = DependencyProperty.RegisterImmutable("Children", function () { return PanelChildrenCollection; }, Panel);
            Panel.ZIndexProperty = DependencyProperty.RegisterAttached("ZIndex", function () { return Number; }, Panel, 0);
            return Panel;
        })(Fayde.FrameworkElement);
        Controls.Panel = Panel;
        Fayde.CoreLibrary.add(Panel);
        Fayde.Markup.Content(Panel, Panel.ChildrenProperty);
        var reactions;
        (function (reactions) {
            Fayde.UIReaction(Panel.BackgroundProperty, function (upd, ov, nv) {
                if (nv !== ov)
                    upd.updateBounds();
                upd.invalidate();
            });
            Fayde.UIReactionAttached(Panel.ZIndexProperty, minerva.controls.panel.reactTo.zIndex);
        })(reactions || (reactions = {}));
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
/// <reference path="Panel.ts" />
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        var Canvas = (function (_super) {
            __extends(Canvas, _super);
            function Canvas() {
                _super.apply(this, arguments);
            }
            Canvas.prototype.CreateLayoutUpdater = function () { return new minerva.controls.canvas.CanvasUpdater(); };
            Canvas.GetTop = function (d) { return d.GetValue(Canvas.TopProperty); };
            Canvas.SetTop = function (d, value) { d.SetValue(Canvas.TopProperty, value); };
            Canvas.GetLeft = function (d) { return d.GetValue(Canvas.LeftProperty); };
            Canvas.SetLeft = function (d, value) { d.SetValue(Canvas.LeftProperty, value); };
            Canvas.TopProperty = DependencyProperty.RegisterAttached("Top", function () { return Number; }, Canvas, 0.0);
            Canvas.LeftProperty = DependencyProperty.RegisterAttached("Left", function () { return Number; }, Canvas, 0.0);
            return Canvas;
        })(Controls.Panel);
        Controls.Canvas = Canvas;
        Fayde.CoreLibrary.add(Canvas);
        var reactions;
        (function (reactions) {
            Fayde.UIReactionAttached(Canvas.TopProperty, minerva.controls.canvas.reactTo.top);
            Fayde.UIReactionAttached(Canvas.LeftProperty, minerva.controls.canvas.reactTo.left);
        })(reactions || (reactions = {}));
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
/// <reference path="ButtonBase.ts" />
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        var Primitives;
        (function (Primitives) {
            var ToggleButton = (function (_super) {
                __extends(ToggleButton, _super);
                function ToggleButton() {
                    _super.call(this);
                    this.Checked = new Fayde.RoutedEvent();
                    this.Indeterminate = new Fayde.RoutedEvent();
                    this.Unchecked = new Fayde.RoutedEvent();
                    this.DefaultStyleKey = ToggleButton;
                }
                ToggleButton.prototype.OnApplyTemplate = function () {
                    _super.prototype.OnApplyTemplate.call(this);
                    this.UpdateVisualState(false);
                };
                ToggleButton.prototype.OnContentChanged = function (oldContent, newContent) {
                    _super.prototype.OnContentChanged.call(this, oldContent, newContent);
                    this.UpdateVisualState();
                };
                ToggleButton.prototype.OnClick = function () {
                    this.OnToggle();
                    _super.prototype.OnClick.call(this);
                };
                ToggleButton.prototype.UpdateVisualState = function (useTransitions) {
                    useTransitions = useTransitions !== false;
                    _super.prototype.UpdateVisualState.call(this, useTransitions);
                    var isChecked = this.IsChecked;
                    var vsm = Fayde.Media.VSM.VisualStateManager;
                    if (isChecked === true) {
                        vsm.GoToState(this, "Checked", useTransitions);
                    }
                    else if (isChecked === false) {
                        vsm.GoToState(this, "Unchecked", useTransitions);
                    }
                    else {
                        if (!vsm.GoToState(this, "Indeterminate", useTransitions)) {
                            vsm.GoToState(this, "Unchecked", useTransitions);
                        }
                    }
                };
                ToggleButton.prototype.OnIsCheckedChanged = function (args) {
                    var isChecked = args.NewValue;
                    this.UpdateVisualState();
                    var rargs = new Fayde.RoutedEventArgs();
                    if (isChecked === true) {
                        this.Checked.raise(this, rargs);
                    }
                    else if (isChecked === false) {
                        this.Unchecked.raise(this, rargs);
                    }
                    else {
                        this.Indeterminate.raise(this, rargs);
                    }
                };
                ToggleButton.prototype.OnToggle = function () {
                    var isChecked = this.IsChecked;
                    if (isChecked === true) {
                        this.IsChecked = this.IsThreeState ? null : false;
                    }
                    else {
                        this.IsChecked = isChecked != null;
                    }
                };
                ToggleButton.IsCheckedProperty = DependencyProperty.RegisterCore("IsChecked", function () { return Boolean; }, ToggleButton, false, function (d, args) { return d.OnIsCheckedChanged(args); });
                ToggleButton.IsThreeStateProperty = DependencyProperty.RegisterCore("IsThreeState", function () { return Boolean; }, ToggleButton, false);
                return ToggleButton;
            })(Primitives.ButtonBase);
            Primitives.ToggleButton = ToggleButton;
            Fayde.CoreLibrary.add(ToggleButton);
            Controls.TemplateVisualStates(ToggleButton, { GroupName: "CommonStates", Name: "Pressed" }, { GroupName: "CommonStates", Name: "MouseOver" }, { GroupName: "CommonStates", Name: "Normal" }, { GroupName: "CommonStates", Name: "Disabled" }, { GroupName: "FocusStates", Name: "Unfocused" }, { GroupName: "FocusStates", Name: "Focused" }, { GroupName: "CheckStates", Name: "Checked" }, { GroupName: "CheckStates", Name: "Unchecked" }, { GroupName: "CheckStates", Name: "Indeterminate" });
        })(Primitives = Controls.Primitives || (Controls.Primitives = {}));
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
/// <reference path="Primitives/ToggleButton.ts" />
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        var CheckBox = (function (_super) {
            __extends(CheckBox, _super);
            function CheckBox() {
                _super.call(this);
                this.DefaultStyleKey = CheckBox;
            }
            return CheckBox;
        })(Controls.Primitives.ToggleButton);
        Controls.CheckBox = CheckBox;
        Fayde.CoreLibrary.add(CheckBox);
        Controls.TemplateVisualStates(CheckBox, { GroupName: "CommonStates", Name: "Normal" }, { GroupName: "CommonStates", Name: "MouseOver" }, { GroupName: "CommonStates", Name: "Pressed" }, { GroupName: "CommonStates", Name: "Disabled" }, { GroupName: "FocusStates", Name: "Unfocused" }, { GroupName: "FocusStates", Name: "Focused" }, { GroupName: "CheckStates", Name: "Checked" }, { GroupName: "CheckStates", Name: "Unchecked" }, { GroupName: "CheckStates", Name: "Indeterminate" }, { GroupName: "ValidationStates", Name: "InvalidUnfocused" }, { GroupName: "ValidationStates", Name: "InvalidFocused" }, { GroupName: "ValidationStates", Name: "Valid" });
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
/// <reference path="../Core/DependencyObject.ts" />
/// <reference path="../Core/XamlObjectCollection.ts" />
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        var ColumnDefinition = (function (_super) {
            __extends(ColumnDefinition, _super);
            function ColumnDefinition() {
                _super.apply(this, arguments);
            }
            ColumnDefinition.prototype.setActualWidth = function (value) {
                this.SetCurrentValue(ColumnDefinition.ActualWidthProperty, value);
            };
            ColumnDefinition.WidthProperty = DependencyProperty.Register("Width", function () { return Controls.GridLength; }, ColumnDefinition, undefined, Fayde.Incite);
            ColumnDefinition.MaxWidthProperty = DependencyProperty.Register("MaxWidth", function () { return Number; }, ColumnDefinition, Number.POSITIVE_INFINITY, Fayde.Incite);
            ColumnDefinition.MinWidthProperty = DependencyProperty.Register("MinWidth", function () { return Number; }, ColumnDefinition, 0.0, Fayde.Incite);
            ColumnDefinition.ActualWidthProperty = DependencyProperty.RegisterReadOnly("ActualWidth", function () { return Number; }, ColumnDefinition, 0.0);
            return ColumnDefinition;
        })(Fayde.DependencyObject);
        Controls.ColumnDefinition = ColumnDefinition;
        Fayde.CoreLibrary.add(ColumnDefinition);
        var GridUnitType = minerva.controls.grid.GridUnitType;
        function ConvertColumnDefinition(o) {
            if (!o || o instanceof ColumnDefinition)
                return o;
            var s = o.toString();
            var cd = new ColumnDefinition();
            if (s.toLowerCase() === "auto") {
                cd.Width = new Controls.GridLength(0, GridUnitType.Auto);
                return cd;
            }
            if (s === "*") {
                cd.Width = new Controls.GridLength(1, GridUnitType.Star);
                return cd;
            }
            var v = parseFloat(s);
            if (isNaN(v))
                throw new XamlParseException("Invalid ColumnDefinition: '" + s + "'.");
            cd.Width = new Controls.GridLength(v, s[s.length - 1] === "*" ? GridUnitType.Star : GridUnitType.Pixel);
            return cd;
        }
        nullstone.registerTypeConverter(ColumnDefinition, ConvertColumnDefinition);
        var ColumnDefinitionCollection = (function (_super) {
            __extends(ColumnDefinitionCollection, _super);
            function ColumnDefinitionCollection() {
                _super.apply(this, arguments);
            }
            ColumnDefinitionCollection.prototype._RaiseItemAdded = function (value, index) {
                Fayde.Incite(this, {
                    item: value,
                    index: index,
                    add: true
                });
            };
            ColumnDefinitionCollection.prototype._RaiseItemRemoved = function (value, index) {
                Fayde.Incite(this, {
                    item: value,
                    index: index,
                    add: false
                });
            };
            return ColumnDefinitionCollection;
        })(Fayde.XamlObjectCollection);
        Controls.ColumnDefinitionCollection = ColumnDefinitionCollection;
        Fayde.CoreLibrary.add(ColumnDefinitionCollection);
        function ConvertColumnDefinitionCollection(o) {
            if (!o || o instanceof ColumnDefinitionCollection)
                return o;
            if (typeof o === "string") {
                var tokens = o.split(" ");
                var len = tokens.length;
                var cdc = new ColumnDefinitionCollection();
                var cd;
                for (var i = 0; i < len; i++) {
                    if (cd = ConvertColumnDefinition(tokens[i]))
                        cdc.Add(cd);
                }
                return cdc;
            }
            return undefined;
        }
        nullstone.registerTypeConverter(ColumnDefinitionCollection, ConvertColumnDefinitionCollection);
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
/// <reference path="Control.ts" />
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        var ItemsControlNode = (function (_super) {
            __extends(ItemsControlNode, _super);
            function ItemsControlNode(xobj) {
                _super.call(this, xobj);
                this.ItemsPresenter = null;
            }
            ItemsControlNode.prototype.GetDefaultVisualTree = function () {
                var presenter = this.ItemsPresenter;
                if (!presenter)
                    (presenter = new Controls.ItemsPresenter()).TemplateOwner = this.XObject;
                return presenter;
            };
            return ItemsControlNode;
        })(Controls.ControlNode);
        Controls.ItemsControlNode = ItemsControlNode;
        var ItemsControl = (function (_super) {
            __extends(ItemsControl, _super);
            function ItemsControl() {
                _super.call(this);
                this._IsDataBound = false;
                this._SuspendItemsChanged = false;
                this._DisplayMemberTemplate = null;
                this.DefaultStyleKey = ItemsControl;
                var coll = ItemsControl.ItemsProperty.Initialize(this);
                coll.ItemsChanged.on(this._OnItemsUpdated, this);
                this._ItemContainersManager = new Controls.Internal.ItemContainersManager(this);
            }
            ItemsControl.prototype.CreateNode = function () { return new ItemsControlNode(this); };
            Object.defineProperty(ItemsControl.prototype, "IsItemsControl", {
                get: function () { return true; },
                enumerable: true,
                configurable: true
            });
            ItemsControl.GetIsItemsHost = function (d) { return d.GetValue(ItemsControl.IsItemsHostProperty) === true; };
            ItemsControl.SetIsItemsHost = function (d, value) { d.SetValue(ItemsControl.IsItemsHostProperty, value === true); };
            ItemsControl.prototype.OnDisplayMemberPathChanged = function (e) {
                for (var en = this.ItemContainersManager.GetEnumerator(); en.moveNext();) {
                    this.UpdateContainerTemplate(en.current, en.CurrentItem);
                }
            };
            ItemsControl.prototype.OnItemsSourceChanged = function (e) {
                var nc = Fayde.Collections.INotifyCollectionChanged_.as(e.OldValue);
                if (nc)
                    nc.CollectionChanged.off(this._OnItemsSourceUpdated, this);
                var items = this.Items;
                var resetargs = Fayde.Collections.CollectionChangedEventArgs.Reset(items.ToArray());
                try {
                    this._SuspendItemsChanged = true;
                    items.Clear();
                }
                finally {
                    this._SuspendItemsChanged = false;
                }
                this.OnItemsChanged(resetargs);
                this._IsDataBound = !!e.NewValue;
                var arr = toArray(e.NewValue);
                try {
                    this._SuspendItemsChanged = true;
                    if (arr)
                        items.AddRange(arr);
                }
                finally {
                    this._SuspendItemsChanged = false;
                }
                if (arr)
                    this.OnItemsChanged(Fayde.Collections.CollectionChangedEventArgs.AddRange(arr, 0));
                var nc = Fayde.Collections.INotifyCollectionChanged_.as(e.NewValue);
                if (nc)
                    nc.CollectionChanged.on(this._OnItemsSourceUpdated, this);
            };
            ItemsControl.prototype.OnItemTemplateChanged = function (e) {
                for (var en = this.ItemContainersManager.GetEnumerator(); en.moveNext();) {
                    this.UpdateContainerTemplate(en.current, en.CurrentItem);
                }
            };
            Object.defineProperty(ItemsControl.prototype, "ItemContainersManager", {
                get: function () { return this._ItemContainersManager; },
                enumerable: true,
                configurable: true
            });
            ItemsControl.prototype.PrepareContainerForItem = function (container, item) {
                if (this.DisplayMemberPath != null && this.ItemTemplate != null)
                    throw new InvalidOperationException("Cannot set 'DisplayMemberPath' and 'ItemTemplate' simultaneously");
                this.UpdateContainerTemplate(container, item);
            };
            ItemsControl.prototype.ClearContainerForItem = function (container, item) {
                if (container instanceof Controls.ContentPresenter) {
                    var cp = container;
                    if (cp.Content === item)
                        cp.Content = null;
                }
                else if (container instanceof Controls.ContentControl) {
                    var cc = container;
                    if (cc.Content === item)
                        cc.Content = null;
                }
            };
            ItemsControl.prototype.GetContainerForItem = function () { return new Controls.ContentPresenter(); };
            ItemsControl.prototype.IsItemItsOwnContainer = function (item) { return item instanceof Fayde.UIElement; };
            ItemsControl.prototype._OnItemsUpdated = function (sender, e) {
                if (this._SuspendItemsChanged)
                    return;
                if (this._IsDataBound)
                    throw new InvalidOperationException("Cannot modify Items while bound to ItemsSource.");
                this.OnItemsChanged(e);
            };
            ItemsControl.prototype._OnItemsSourceUpdated = function (sender, e) {
                var items = this.Items;
                try {
                    this._SuspendItemsChanged = true;
                    switch (e.Action) {
                        case Fayde.Collections.CollectionChangedAction.Add:
                            for (var i = 0, len = e.NewItems.length; i < len; i++) {
                                items.Insert(e.NewStartingIndex + i, e.NewItems[i]);
                            }
                            break;
                        case Fayde.Collections.CollectionChangedAction.Remove:
                            for (var i = 0, len = e.OldItems.length; i < len; i++) {
                                items.RemoveAt(e.OldStartingIndex);
                            }
                            break;
                        case Fayde.Collections.CollectionChangedAction.Replace:
                            items.SetValueAt(e.NewStartingIndex, e.NewItems[0]);
                            break;
                        case Fayde.Collections.CollectionChangedAction.Reset:
                            items.Clear();
                            break;
                    }
                }
                finally {
                    this._SuspendItemsChanged = false;
                }
                this.OnItemsChanged(e);
            };
            ItemsControl.prototype.OnItemsChanged = function (e) {
                switch (e.Action) {
                    case Fayde.Collections.CollectionChangedAction.Add:
                        this.OnItemsAdded(e.NewStartingIndex, e.NewItems);
                        break;
                    case Fayde.Collections.CollectionChangedAction.Remove:
                        this.OnItemsRemoved(e.OldStartingIndex, e.OldItems);
                        break;
                    case Fayde.Collections.CollectionChangedAction.Replace:
                        this.OnItemsRemoved(e.NewStartingIndex, e.OldItems);
                        this.OnItemsAdded(e.NewStartingIndex, e.NewItems);
                        break;
                    case Fayde.Collections.CollectionChangedAction.Reset:
                        this.OnItemsRemoved(0, e.OldItems);
                        break;
                }
            };
            ItemsControl.prototype.OnItemsAdded = function (index, newItems) {
                this._ItemContainersManager.OnItemsAdded(index, newItems);
                var presenter = this.XamlNode.ItemsPresenter;
                if (presenter)
                    presenter.OnItemsAdded(index, newItems);
            };
            ItemsControl.prototype.OnItemsRemoved = function (index, oldItems) {
                var presenter = this.XamlNode.ItemsPresenter;
                if (presenter)
                    presenter.OnItemsRemoved(index, oldItems);
                this._ItemContainersManager.OnItemsRemoved(index, oldItems);
            };
            ItemsControl.prototype.UpdateContainerTemplate = function (container, item) {
                if (!container || container === item)
                    return;
                var template;
                if (!(item instanceof Fayde.UIElement))
                    template = this.ItemTemplate || this._GetDisplayMemberTemplate();
                if (container instanceof Controls.ContentPresenter) {
                    var cp = container;
                    cp.ContentTemplate = template;
                    cp.Content = item;
                }
                else if (container instanceof Controls.ContentControl) {
                    var cc = container;
                    cc.ContentTemplate = template;
                    cc.Content = item;
                }
            };
            ItemsControl.prototype._GetDisplayMemberTemplate = function () {
                if (!this._DisplayMemberTemplate) {
                    var xm = DisplayTemplate.create(this.DisplayMemberPath || "");
                    this._DisplayMemberTemplate = Fayde.Markup.Load(this.App, xm);
                }
                return this._DisplayMemberTemplate;
            };
            ItemsControl.DisplayMemberPathProperty = DependencyProperty.Register("DisplayMemberPath", function () { return String; }, ItemsControl, null, function (d, args) { return d.OnDisplayMemberPathChanged(args); });
            ItemsControl.ItemsPanelProperty = DependencyProperty.Register("ItemsPanel", function () { return Controls.ItemsPanelTemplate; }, ItemsControl);
            ItemsControl.ItemsSourceProperty = DependencyProperty.RegisterFull("ItemsSource", function () { return nullstone.IEnumerable_; }, ItemsControl, null, function (d, args) { return d.OnItemsSourceChanged(args); });
            ItemsControl.ItemsProperty = DependencyProperty.RegisterImmutable("Items", function () { return Controls.ItemCollection; }, ItemsControl);
            ItemsControl.ItemTemplateProperty = DependencyProperty.Register("ItemTemplate", function () { return Fayde.DataTemplate; }, ItemsControl, undefined, function (d, args) { return d.OnItemTemplateChanged(args); });
            ItemsControl.IsItemsHostProperty = DependencyProperty.RegisterAttached("IsItemsHost", function () { return Boolean; }, ItemsControl, false);
            return ItemsControl;
        })(Controls.Control);
        Controls.ItemsControl = ItemsControl;
        Fayde.CoreLibrary.add(ItemsControl);
        Fayde.Markup.Content(ItemsControl, ItemsControl.ItemsProperty);
        function toArray(value) {
            if (value instanceof Array)
                return value;
            var enu = nullstone.IEnumerable_.as(value);
            if (enu) {
                var arr = [];
                for (var en = enu.getEnumerator(); en.moveNext();) {
                    arr.push(en.current);
                }
                return arr;
            }
            return null;
        }
        var DisplayTemplate;
        (function (DisplayTemplate) {
            function create(dmp) {
                return Fayde.Markup.CreateXaml("<DataTemplate xmlns=\"" + Fayde.XMLNS + "\"><Grid><TextBlock Text=\"{Binding " + dmp + "}\" /></Grid></DataTemplate>", Fayde.XMLNS + "/itemscontrol/displaymember/" + dmp);
            }
            DisplayTemplate.create = create;
        })(DisplayTemplate || (DisplayTemplate = {}));
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
/// <reference path="../ItemsControl.ts" />
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        var Primitives;
        (function (Primitives) {
            var Selector = (function (_super) {
                __extends(Selector, _super);
                function Selector() {
                    _super.call(this);
                    this.SelectionChanged = new Fayde.RoutedEvent();
                    this._SelectedItems = new Fayde.Collections.ObservableCollection();
                    this._SelectedItemsIsInvalid = false;
                    this.$TemplateScrollViewer = null;
                    this._SelectedValueWalker = null;
                    this._Selection = new Primitives.SelectorSelection(this);
                }
                Object.defineProperty(Selector.prototype, "SynchronizeWithCurrentItem", {
                    get: function () {
                        if (!Fayde.Data.ICollectionView_.is(this.ItemsSource))
                            return false;
                        return this.IsSynchronizedWithCurrentItem !== false;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Selector.prototype, "SelectedItems", {
                    get: function () {
                        if (this._SelectedItemsIsInvalid)
                            this._Selection.RepopulateSelectedItems();
                        return this._SelectedItems;
                    },
                    enumerable: true,
                    configurable: true
                });
                Selector.prototype._OnIsSynchronizedWithCurrentItemChanged = function (args) {
                    if (args.NewValue === true)
                        throw new ArgumentException("Setting IsSynchronizedWithCurrentItem to 'true' is not supported");
                    if (args.NewValue != null)
                        return this.SelectedItem = null;
                    var icv = Fayde.Data.ICollectionView_.as(this.ItemsSource);
                    if (icv)
                        this.SelectedItem = icv.CurrentItem;
                };
                Selector.prototype._OnSelectedIndexChanged = function (args) {
                    if (this._Selection.IsUpdating)
                        return;
                    var items = this.Items;
                    if (args.NewValue < 0 || args.NewValue >= items.Count)
                        this._Selection.ClearSelection();
                    else
                        this._Selection.Select(items.GetValueAt(args.NewValue));
                };
                Selector.prototype._OnSelectedItemChanged = function (args) {
                    if (this._Selection.IsUpdating)
                        return;
                    if (args.NewValue == null)
                        this._Selection.ClearSelection();
                    else if (this.Items.IndexOf(args.NewValue) !== -1)
                        this._Selection.Select(args.NewValue);
                    else if (this.Items.IndexOf(args.OldValue) !== -1)
                        this._Selection.Select(args.OldValue);
                    else
                        this._Selection.ClearSelection();
                };
                Selector.prototype._OnSelectedValueChanged = function (args) {
                    if (this._Selection.IsUpdating)
                        return;
                    this._SelectItemFromValue(args.NewValue, false);
                };
                Selector.prototype._OnSelectedValuePathChanged = function (args) {
                    this._SelectedValueWalker = !args.NewValue ? null : new Fayde.Data.PropertyPathWalker(args.NewValue);
                    this._SelectItemFromValue(this.SelectedValue, true);
                };
                Selector.prototype._OnSelectionModeChanged = function (args) {
                    this._Selection.Mode = args.NewValue;
                    if (args.NewValue !== Controls.SelectionMode.Single)
                        return;
                    var selIndex = this.SelectedIndex;
                    if (selIndex === -1)
                        return;
                    this._Selection.SelectOnly(this.Items.GetValueAt(selIndex));
                };
                Selector.prototype.OnApplyTemplate = function () {
                    _super.prototype.OnApplyTemplate.call(this);
                    var tsv = this.$TemplateScrollViewer = this.GetTemplateChild("ScrollViewer", Controls.ScrollViewer);
                    if (tsv) {
                        tsv.$TemplatedParentHandlesScrolling = true;
                        tsv.HorizontalScrollBarVisibility = Controls.ScrollViewer.GetHorizontalScrollBarVisibility(this);
                        tsv.VerticalScrollBarVisibility = Controls.ScrollViewer.GetVerticalScrollBarVisibility(this);
                    }
                };
                Selector.prototype.OnItemsChanged = function (e) {
                    _super.prototype.OnItemsChanged.call(this, e);
                    var item;
                    switch (e.Action) {
                        case Fayde.Collections.CollectionChangedAction.Add:
                            var lbi;
                            if (e.NewItems[0] instanceof Controls.ListBoxItem)
                                lbi = e.NewItems[0];
                            if (lbi != null && lbi.IsSelected && !this.SelectedItems.Contains(lbi)) {
                                this._Selection.Select(lbi);
                            }
                            else if (this.SelectedItem != null) {
                                this._Selection.Select(this.SelectedItem);
                            }
                            break;
                        case Fayde.Collections.CollectionChangedAction.Reset:
                            var o;
                            var icv = Fayde.Data.ICollectionView_.as(this.ItemsSource);
                            if (icv && this.SynchronizeWithCurrentItem)
                                o = icv.CurrentItem;
                            else
                                o = this.SelectedItem;
                            if (this.Items.Contains(o))
                                this._Selection.Select(o);
                            else
                                this._Selection.ClearSelection();
                            break;
                        case Fayde.Collections.CollectionChangedAction.Remove:
                            item = e.OldItems[0];
                            if (this.SelectedItems.Contains(item))
                                this._Selection.Unselect(item);
                            else if (e.OldStartingIndex <= this.SelectedIndex)
                                this._Selection.Select(this.SelectedItem);
                            break;
                        case Fayde.Collections.CollectionChangedAction.Replace:
                            item = e.OldItems[0];
                            this._Selection.Unselect(item);
                            break;
                        default:
                            throw new NotSupportedException("Collection changed action '" + e.Action + "' not supported");
                    }
                };
                Selector.prototype.OnItemsSourceChanged = function (args) {
                    _super.prototype.OnItemsSourceChanged.call(this, args);
                    var view = Fayde.Data.ICollectionView_.as(args.OldValue);
                    if (view)
                        view.CurrentChanged.off(this._OnCurrentItemChanged, this);
                    view = Fayde.Data.ICollectionView_.as(args.NewValue);
                    if (view) {
                        view.CurrentChanged.on(this._OnCurrentItemChanged, this);
                        if (this.SynchronizeWithCurrentItem)
                            this._Selection.SelectOnly(view.CurrentItem);
                        else
                            this._Selection.ClearSelection();
                    }
                    else {
                        this._Selection.ClearSelection();
                    }
                };
                Selector.prototype.OnItemContainerStyleChanged = function (oldStyle, newStyle) { };
                Selector.prototype.ClearContainerForItem = function (element, item) {
                    _super.prototype.ClearContainerForItem.call(this, element, item);
                    var lbi = element;
                    lbi.ParentSelector = null;
                    if (lbi !== item)
                        lbi.Content = null;
                };
                Selector.prototype.PrepareContainerForItem = function (element, item) {
                    _super.prototype.PrepareContainerForItem.call(this, element, item);
                    var lbi = element;
                    lbi.ParentSelector = this;
                    if (this.SelectedItems.Contains(item))
                        lbi.IsSelected = true;
                    if (lbi.IsSelected && !this.SelectedItems.Contains(item))
                        this._Selection.Select(item);
                };
                Selector.prototype._GetValueFromItem = function (item) {
                    if (this._SelectedValueWalker == null)
                        return item;
                    if (item == null)
                        return item;
                    return this._SelectedValueWalker.GetValue(item);
                };
                Selector.prototype._SelectItemFromValue = function (selectedValue, ignoreSelectedValue) {
                    if (selectedValue == null) {
                        this._Selection.ClearSelection(ignoreSelectedValue);
                        return;
                    }
                    var items = this.Items;
                    var count = items.Count;
                    for (var i = 0; i < count; i++) {
                        var item = items.GetValueAt(i);
                        var val = this._GetValueFromItem(item);
                        if (nullstone.equals(selectedValue, val)) {
                            if (!this.SelectedItems.Contains(item))
                                this._Selection.Select(item);
                            return;
                        }
                    }
                    this._Selection.ClearSelection(ignoreSelectedValue);
                };
                Selector.prototype.SelectAll = function () {
                    this._Selection.SelectAll(this.Items.ToArray());
                };
                Selector.prototype._OnCurrentItemChanged = function (sender, e) {
                    if (!this._Selection.IsUpdating && this.SynchronizeWithCurrentItem) {
                        var icv = this.ItemsSource;
                        if (!nullstone.equals(icv.CurrentItem, this.SelectedItem))
                            this._Selection.SelectOnly(icv.CurrentItem);
                    }
                };
                Selector.prototype._RaiseSelectionChanged = function (oldVals, newVals) {
                    if (!oldVals)
                        oldVals = [];
                    if (!newVals)
                        newVals = [];
                    var lbi;
                    var oldCount = oldVals.length;
                    var oldValue;
                    for (var i = 0; i < oldCount; i++) {
                        oldValue = oldVals[i];
                        if (oldValue == null)
                            continue;
                        lbi = null;
                        if (oldValue instanceof Controls.ListBoxItem)
                            lbi = oldValue;
                        lbi = lbi || this.ItemContainersManager.ContainerFromItem(oldValue);
                        if (lbi)
                            lbi.IsSelected = false;
                    }
                    var newCount = newVals.length;
                    var newValue;
                    for (var i = 0; i < newCount; i++) {
                        newValue = newVals[i];
                        if (newValue == null)
                            continue;
                        lbi = null;
                        if (newValue instanceof Controls.ListBoxItem)
                            lbi = newValue;
                        lbi = lbi || this.ItemContainersManager.ContainerFromItem(newValue);
                        if (lbi) {
                            lbi.IsSelected = true;
                            lbi.Focus();
                        }
                    }
                    var args = new Primitives.SelectionChangedEventArgs(oldVals, newVals);
                    this.OnSelectionChanged(args);
                    this.SelectionChanged.raise(this, args);
                };
                Selector.prototype.OnSelectionChanged = function (args) { };
                Selector.prototype.NotifyListItemClicked = function (lbi) {
                    this._Selection.Select(this.ItemContainersManager.ItemFromContainer(lbi));
                };
                Selector.prototype.NotifyListItemLoaded = function (lbi) {
                    if (this.ItemContainersManager.ItemFromContainer(lbi) === this.SelectedItem) {
                        lbi.IsSelected = true;
                        lbi.Focus();
                    }
                };
                Selector.prototype.NotifyListItemGotFocus = function (lbi) { };
                Selector.prototype.NotifyListItemLostFocus = function (lbi) { };
                Selector.IsSynchronizedWithCurrentItemProperty = DependencyProperty.Register("IsSynchronizedWithCurrentItem", function () { return Boolean; }, Selector, null, function (d, args) { return d._OnIsSynchronizedWithCurrentItemChanged(args); });
                Selector.SelectedIndexProperty = DependencyProperty.Register("SelectedIndex", function () { return Number; }, Selector, -1, function (d, args) { return d._OnSelectedIndexChanged(args); });
                Selector.SelectedItemProperty = DependencyProperty.Register("SelectedItem", function () { return Object; }, Selector, undefined, function (d, args) { return d._OnSelectedItemChanged(args); });
                Selector.SelectedValueProperty = DependencyProperty.Register("SelectedValue", function () { return Object; }, Selector, undefined, function (d, args) { return d._OnSelectedValueChanged(args); });
                Selector.SelectedValuePathProperty = DependencyProperty.Register("SelectedValuePath", function () { return String; }, Selector, "", function (d, args) { return d._OnSelectedValuePathChanged(args); });
                Selector.IsSelectionActiveProperty = DependencyProperty.RegisterReadOnlyCore("IsSelectionActive", function () { return Boolean; }, Selector);
                Selector.SelectionModeProperty = DependencyProperty.Register("SelectionMode", function () { return new Fayde.Enum(Controls.SelectionMode); }, Selector, undefined, function (d, args) { return d._OnSelectionModeChanged(args); });
                return Selector;
            })(Controls.ItemsControl);
            Primitives.Selector = Selector;
            Fayde.CoreLibrary.add(Selector);
        })(Primitives = Controls.Primitives || (Controls.Primitives = {}));
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Markup;
    (function (Markup) {
        var XamlMarkup = nullstone.markup.xaml.XamlMarkup;
        var lastId = 0;
        function CreateXaml(obj, uri) {
            lastId++;
            uri = uri || "http://gen/" + lastId.toString();
            var xm = new XamlMarkup(uri);
            var root = (typeof obj === "string")
                ? xm.loadRoot(obj)
                : obj;
            if (!root.isDefaultNamespace(Fayde.XMLNS))
                throw new XamlParseException("Invalid default namespace. [" + root.lookupNamespaceURI(null) + "]");
            xm.setRoot(root);
            return xm;
        }
        Markup.CreateXaml = CreateXaml;
    })(Markup = Fayde.Markup || (Fayde.Markup = {}));
})(Fayde || (Fayde = {}));
/// <reference path="../Core/FrameworkElement.ts" />
/// <reference path="../Markup/Creator.ts" />
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        var fmd = Fayde.Markup.CreateXaml("<DataTemplate xmlns=\"" + Fayde.XMLNS + "\"><Grid><TextBlock Text=\"{Binding}\" /></Grid></DataTemplate>", Fayde.XMLNS + "/contentpresenter/default");
        var fallbackTemplate;
        function getFallbackTemplate(app) {
            return fallbackTemplate = fallbackTemplate || Fayde.Markup.Load(app, fmd);
        }
        var ContentPresenterNode = (function (_super) {
            __extends(ContentPresenterNode, _super);
            function ContentPresenterNode(xobj) {
                _super.call(this, xobj);
            }
            Object.defineProperty(ContentPresenterNode.prototype, "ContentRoot", {
                get: function () { return this._ContentRoot; },
                enumerable: true,
                configurable: true
            });
            ContentPresenterNode.prototype.DoApplyTemplateWithError = function (error) {
                if (this._ContentRoot)
                    return false;
                var xobj = this.XObject;
                if (xobj.TemplateOwner instanceof Controls.ContentControl) {
                    if (!xobj.HasValueOrExpression(ContentPresenter.ContentProperty)) {
                        xobj.SetValue(ContentPresenter.ContentProperty, new Fayde.TemplateBindingExpression("Content"));
                    }
                    if (!xobj.HasValueOrExpression(ContentPresenter.ContentTemplateProperty)) {
                        xobj.SetValue(ContentPresenter.ContentTemplateProperty, new Fayde.TemplateBindingExpression("ContentTemplate"));
                    }
                }
                var content = xobj.Content;
                if (content instanceof Fayde.UIElement) {
                    this._ContentRoot = content;
                    xobj.DataContext = undefined;
                }
                else {
                    xobj.DataContext = content == null ? null : content;
                    this._ContentRoot = this._GetContentTemplate(content ? content.constructor : null).GetVisualTree(xobj);
                }
                if (!this._ContentRoot)
                    return false;
                return this.AttachVisualChild(this._ContentRoot, error);
            };
            ContentPresenterNode.prototype.ClearRoot = function () {
                if (this._ContentRoot)
                    this.DetachVisualChild(this._ContentRoot, null);
                this._ContentRoot = null;
            };
            ContentPresenterNode.prototype._ContentChanged = function (args) {
                var isUIContent = args.NewValue instanceof Fayde.UIElement;
                if (isUIContent || args.OldValue instanceof Fayde.UIElement) {
                    this.ClearRoot();
                }
                else if (!isUIContent) {
                    if (this._ShouldInvalidateImplicitTemplate(args.OldValue, args.NewValue))
                        this.ClearRoot();
                    this.XObject.DataContext = args.NewValue == null ? null : args.NewValue;
                }
                this.LayoutUpdater.invalidateMeasure();
            };
            ContentPresenterNode.prototype._ContentTemplateChanged = function () {
                this.ClearRoot();
                this.LayoutUpdater.invalidateMeasure();
            };
            ContentPresenterNode.prototype._ShouldInvalidateImplicitTemplate = function (oldValue, newValue) {
                var octor = oldValue ? oldValue.constructor : null;
                var nctor = newValue ? newValue.constructor : null;
                if (octor !== nctor)
                    return true;
                if (octor === Object)
                    return true;
                return false;
            };
            ContentPresenterNode.prototype._GetContentTemplate = function (type) {
                var dt = this.XObject.ContentTemplate;
                if (dt)
                    return dt;
                if (type && typeof type === "function") {
                    var node = this;
                    var rd;
                    while (node) {
                        var xobj = node.XObject;
                        if (xobj instanceof Fayde.FrameworkElement && (rd = xobj.Resources)) {
                            dt = rd.Get(type);
                            if (dt instanceof Fayde.DataTemplate)
                                return dt;
                        }
                        node = node.ParentNode;
                    }
                    var surface = this.LayoutUpdater.tree.surface;
                    var app = surface ? surface.App : null;
                    if (app) {
                        dt = app.Resources.Get(type);
                        if (dt instanceof Fayde.DataTemplate)
                            return dt;
                    }
                }
                return getFallbackTemplate(this.XObject.App);
            };
            return ContentPresenterNode;
        })(Fayde.FENode);
        Controls.ContentPresenterNode = ContentPresenterNode;
        var ContentPresenter = (function (_super) {
            __extends(ContentPresenter, _super);
            function ContentPresenter() {
                _super.apply(this, arguments);
            }
            ContentPresenter.prototype.CreateNode = function () { return new ContentPresenterNode(this); };
            ContentPresenter.ContentProperty = DependencyProperty.Register("Content", function () { return Object; }, ContentPresenter, undefined, function (d, args) { return d.XamlNode._ContentChanged(args); });
            ContentPresenter.ContentTemplateProperty = DependencyProperty.Register("ContentTemplate", function () { return Fayde.DataTemplate; }, ContentPresenter, undefined, function (d, args) { return d.XamlNode._ContentTemplateChanged(); });
            return ContentPresenter;
        })(Fayde.FrameworkElement);
        Controls.ContentPresenter = ContentPresenter;
        Fayde.CoreLibrary.add(ContentPresenter);
        Fayde.Markup.Content(ContentPresenter, ContentPresenter.ContentProperty);
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
/// <reference path="../../Core/FrameworkElement.ts" />
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        var Primitives;
        (function (Primitives) {
            var PopupUpdater = minerva.controls.popup.PopupUpdater;
            var PopupNode = (function (_super) {
                __extends(PopupNode, _super);
                function PopupNode() {
                    _super.apply(this, arguments);
                    this.ClickedOutside = new nullstone.Event();
                    this._Overlay = null;
                    this._Catcher = null;
                }
                PopupNode.prototype.OnIsAttachedChanged = function (newIsAttached) {
                    _super.prototype.OnIsAttachedChanged.call(this, newIsAttached);
                    this.RegisterInitiator(this.VisualParentNode.XObject);
                    if (!newIsAttached && this.XObject.IsOpen)
                        this.XObject.IsOpen = false;
                };
                PopupNode.prototype.EnsureOverlay = function () {
                    if (!this._Overlay) {
                        this._Overlay = new Controls.Canvas();
                        this.LayoutUpdater.setLayer(this._Overlay.XamlNode.LayoutUpdater);
                    }
                    return this._Overlay;
                };
                PopupNode.prototype.EnsureCatcher = function () {
                    var catcher = this._Catcher;
                    if (this.ClickedOutside.has && !catcher) {
                        catcher = this._Catcher = new Controls.Canvas();
                        catcher.Background = Fayde.Media.SolidColorBrush.FromColor(Color.FromRgba(255, 255, 255, 0));
                        catcher.LayoutUpdated.on(this.UpdateCatcher, this);
                        catcher.MouseLeftButtonDown.on(this._RaiseClickedOutside, this);
                        this.EnsureOverlay().Children.Insert(0, catcher);
                    }
                    return catcher;
                };
                PopupNode.prototype.UpdateCatcher = function () {
                    var root = this._Overlay;
                    if (!root)
                        return;
                    var surface = this.LayoutUpdater.tree.initiatorSurface;
                    if (!surface)
                        return;
                    root.Width = surface.width;
                    root.Height = surface.height;
                    var catcher = this._Catcher;
                    if (!catcher)
                        return;
                    catcher.Width = root.Width;
                    catcher.Height = root.Height;
                };
                PopupNode.prototype._RaiseClickedOutside = function (sender, e) {
                    this.ClickedOutside.raise(this, null);
                };
                PopupNode.prototype.RegisterInitiator = function (initiator) {
                    if (!(initiator instanceof Fayde.UIElement))
                        return;
                    this.LayoutUpdater.setInitiator(initiator.XamlNode.LayoutUpdater);
                };
                return PopupNode;
            })(Fayde.FENode);
            Primitives.PopupNode = PopupNode;
            var Popup = (function (_super) {
                __extends(Popup, _super);
                function Popup() {
                    _super.apply(this, arguments);
                    this.Opened = new nullstone.Event();
                    this.Closed = new nullstone.Event();
                }
                Popup.prototype.CreateNode = function () { return new PopupNode(this); };
                Popup.prototype.CreateLayoutUpdater = function () { return new PopupUpdater(); };
                Popup.prototype.WatchOutsideClick = function (callback, closure) {
                    this.XamlNode.ClickedOutside.on(callback, closure);
                    this.XamlNode.EnsureCatcher();
                };
                Popup.ChildProperty = DependencyProperty.Register("Child", function () { return Fayde.UIElement; }, Popup);
                Popup.HorizontalOffsetProperty = DependencyProperty.Register("HorizontalOffset", function () { return Number; }, Popup, 0.0);
                Popup.VerticalOffsetProperty = DependencyProperty.Register("VerticalOffset", function () { return Number; }, Popup, 0.0);
                Popup.IsOpenProperty = DependencyProperty.Register("IsOpen", function () { return Boolean; }, Popup, false);
                return Popup;
            })(Fayde.FrameworkElement);
            Primitives.Popup = Popup;
            Fayde.CoreLibrary.add(Popup);
            Fayde.Markup.Content(Popup, Popup.ChildProperty);
            var reactions;
            (function (reactions) {
                Fayde.UIReaction(Popup.IsOpenProperty, function (upd, ov, nv, popup) {
                    if (nv === true) {
                        popup.Opened.raiseAsync(popup, null);
                        popup.XamlNode.UpdateCatcher();
                    }
                    else {
                        popup.Closed.raiseAsync(popup, null);
                    }
                    minerva.controls.popup.reactTo.isOpen(upd, ov, nv);
                }, false);
                Fayde.UIReaction(Popup.ChildProperty, function (upd, ov, nv, popup) {
                    var overlay = popup.XamlNode.EnsureOverlay();
                    if (ov) {
                        Fayde.Providers.InheritedStore.ClearInheritedOnRemove(popup, ov.XamlNode);
                        overlay.Children.Remove(ov);
                    }
                    upd.setChild(nv ? nv.XamlNode.LayoutUpdater : null);
                    if (nv) {
                        popup.XamlNode.EnsureCatcher();
                        overlay.Children.Add(nv);
                        Fayde.Providers.InheritedStore.PropagateInheritedOnAdd(popup, nv.XamlNode);
                    }
                }, false, false);
                Fayde.UIReaction(Popup.HorizontalOffsetProperty, minerva.controls.popup.reactTo.horizontalOffset, false);
                Fayde.UIReaction(Popup.VerticalOffsetProperty, minerva.controls.popup.reactTo.verticalOffset, false);
            })(reactions || (reactions = {}));
        })(Primitives = Controls.Primitives || (Controls.Primitives = {}));
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        var Primitives;
        (function (Primitives) {
            Primitives.IScrollInfo_ = new nullstone.Interface("IScrollInfo");
        })(Primitives = Controls.Primitives || (Controls.Primitives = {}));
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
/// <reference path="ContentPresenter.ts" />
/// <reference path="Primitives/IScrollInfo.ts" />
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        var ScrollContentPresenter = (function (_super) {
            __extends(ScrollContentPresenter, _super);
            function ScrollContentPresenter() {
                _super.apply(this, arguments);
                this._IsClipPropertySet = false;
                this._ClippingRectangle = null;
            }
            ScrollContentPresenter.prototype.CreateLayoutUpdater = function () {
                var updater = new minerva.controls.scrollcontentpresenter.ScrollContentPresenterUpdater();
                updater.assets.scrollData = this._ScrollData = new Controls.Primitives.ScrollData();
                return updater;
            };
            Object.defineProperty(ScrollContentPresenter.prototype, "ScrollOwner", {
                get: function () { return this._ScrollData.scrollOwner; },
                set: function (value) { this._ScrollData.scrollOwner = value; },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScrollContentPresenter.prototype, "CanHorizontallyScroll", {
                get: function () { return this._ScrollData.canHorizontallyScroll; ; },
                set: function (value) {
                    var sd = this._ScrollData;
                    if (sd.canHorizontallyScroll !== value) {
                        sd.canHorizontallyScroll = value;
                        this.XamlNode.LayoutUpdater.invalidateMeasure();
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScrollContentPresenter.prototype, "CanVerticallyScroll", {
                get: function () { return this._ScrollData.canVerticallyScroll; },
                set: function (value) {
                    var sd = this._ScrollData;
                    if (sd.canVerticallyScroll !== value) {
                        sd.canVerticallyScroll = value;
                        this.XamlNode.LayoutUpdater.invalidateMeasure();
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScrollContentPresenter.prototype, "ExtentWidth", {
                get: function () { return this._ScrollData.extentWidth; },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScrollContentPresenter.prototype, "ExtentHeight", {
                get: function () { return this._ScrollData.extentHeight; },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScrollContentPresenter.prototype, "ViewportWidth", {
                get: function () { return this._ScrollData.viewportWidth; },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScrollContentPresenter.prototype, "ViewportHeight", {
                get: function () { return this._ScrollData.viewportHeight; },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScrollContentPresenter.prototype, "HorizontalOffset", {
                get: function () { return this._ScrollData.offsetX; },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScrollContentPresenter.prototype, "VerticalOffset", {
                get: function () { return this._ScrollData.offsetY; },
                enumerable: true,
                configurable: true
            });
            ScrollContentPresenter.prototype.LineUp = function () { return this.SetVerticalOffset(this._ScrollData.offsetY - 16); };
            ScrollContentPresenter.prototype.LineDown = function () { return this.SetVerticalOffset(this._ScrollData.offsetY + 16); };
            ScrollContentPresenter.prototype.LineLeft = function () { return this.SetHorizontalOffset(this._ScrollData.offsetX - 16); };
            ScrollContentPresenter.prototype.LineRight = function () { return this.SetHorizontalOffset(this._ScrollData.offsetX + 16); };
            ScrollContentPresenter.prototype.MouseWheelUp = function () { return this.SetVerticalOffset(this._ScrollData.offsetY - 48); };
            ScrollContentPresenter.prototype.MouseWheelDown = function () { return this.SetVerticalOffset(this._ScrollData.offsetY + 48); };
            ScrollContentPresenter.prototype.MouseWheelLeft = function () { return this.SetHorizontalOffset(this._ScrollData.offsetX - 48); };
            ScrollContentPresenter.prototype.MouseWheelRight = function () { return this.SetHorizontalOffset(this._ScrollData.offsetX + 48); };
            ScrollContentPresenter.prototype.PageUp = function () { return this.SetVerticalOffset(this._ScrollData.offsetY - this._ScrollData.viewportHeight); };
            ScrollContentPresenter.prototype.PageDown = function () { return this.SetVerticalOffset(this._ScrollData.offsetY + this._ScrollData.viewportHeight); };
            ScrollContentPresenter.prototype.PageLeft = function () { return this.SetHorizontalOffset(this._ScrollData.offsetX - this._ScrollData.viewportWidth); };
            ScrollContentPresenter.prototype.PageRight = function () { return this.SetHorizontalOffset(this._ScrollData.offsetX + this._ScrollData.viewportWidth); };
            ScrollContentPresenter.prototype.MakeVisible = function (uie, viewport) {
                var vis = new minerva.Rect();
                if (minerva.Rect.isEmpty(viewport) || !uie || uie === this || !this.XamlNode.IsAncestorOf(uie.XamlNode))
                    return vis;
                var generalTransform = uie.TransformToVisual(this);
                var xpoint = generalTransform.Transform(viewport);
                minerva.Size.copyTo(viewport, vis);
                minerva.Point.copyTo(xpoint, vis);
                return vis;
            };
            ScrollContentPresenter.prototype.SetHorizontalOffset = function (offset) {
                if (isNaN(offset))
                    throw new ArgumentException("Offset is not a number.");
                var sd = this._ScrollData;
                if (!sd.canHorizontallyScroll)
                    return false;
                offset = Math.max(0, Math.min(offset, sd.extentWidth - sd.viewportWidth));
                if (NumberEx.AreClose(this._ScrollData.offsetX, offset))
                    return false;
                sd.cachedOffsetX = offset;
                this.XamlNode.LayoutUpdater.invalidateArrange();
                return true;
            };
            ScrollContentPresenter.prototype.SetVerticalOffset = function (offset) {
                if (isNaN(offset))
                    throw new ArgumentException("Offset is not a number.");
                var sd = this._ScrollData;
                if (!sd.canVerticallyScroll)
                    return false;
                offset = Math.max(0, Math.min(offset, sd.extentHeight - sd.viewportHeight));
                if (NumberEx.AreClose(this._ScrollData.offsetY, offset))
                    return false;
                sd.cachedOffsetY = offset;
                this.XamlNode.LayoutUpdater.invalidateArrange();
                return true;
            };
            ScrollContentPresenter.prototype.OnApplyTemplate = function () {
                _super.prototype.OnApplyTemplate.call(this);
                var sv;
                if (this.TemplateOwner instanceof Controls.ScrollViewer)
                    sv = this.TemplateOwner;
                else
                    return;
                var content = this.Content;
                var info = Controls.Primitives.IScrollInfo_.as(content);
                if (!info && content instanceof Controls.ItemsPresenter) {
                    var ip = content;
                    var err = new BError();
                    ip.XamlNode.ApplyTemplateWithError(err);
                    if (err.Message)
                        err.ThrowException();
                    info = Controls.Primitives.IScrollInfo_.as(ip.Panel);
                }
                if (!info)
                    info = this;
                info.CanHorizontallyScroll = sv.HorizontalScrollBarVisibility !== Controls.ScrollBarVisibility.Disabled;
                info.CanVerticallyScroll = sv.VerticalScrollBarVisibility !== Controls.ScrollBarVisibility.Disabled;
                info.ScrollOwner = sv;
                sv.ScrollInfo = info;
                sv.InvalidateScrollInfo();
            };
            return ScrollContentPresenter;
        })(Controls.ContentPresenter);
        Controls.ScrollContentPresenter = ScrollContentPresenter;
        Fayde.CoreLibrary.add(ScrollContentPresenter);
        nullstone.addTypeInterfaces(ScrollContentPresenter, Controls.Primitives.IScrollInfo_);
        function computeScrollOffsetWithMinimalScroll(topView, bottomView, topChild, bottomChild) {
            var flag = NumberEx.IsLessThanClose(topChild, topView) && NumberEx.IsLessThanClose(bottomChild, bottomView);
            var flag1 = NumberEx.IsGreaterThanClose(topChild, topView) && NumberEx.IsGreaterThanClose(bottomChild, bottomView);
            var flag4 = (bottomChild - topChild) > (bottomView - topView);
            if ((!flag || flag4) && (!flag1 || !flag4)) {
                if (flag || flag1)
                    return bottomChild - bottomView - topView;
                return topView;
            }
            return topChild;
        }
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
/// <reference path="../Control.ts" />
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        var Primitives;
        (function (Primitives) {
            var RangeBase = (function (_super) {
                __extends(RangeBase, _super);
                function RangeBase() {
                    var _this = this;
                    _super.call(this);
                    this.ValueChanged = new Fayde.RoutedPropertyChangedEvent();
                    this._Coercer = new Controls.Internal.RangeCoercer(this, function (val) { return _this.SetCurrentValue(RangeBase.MaximumProperty, val); }, function (val) { return _this.SetCurrentValue(RangeBase.ValueProperty, val); });
                }
                RangeBase.prototype.OnMinimumChanged = function (oldMin, newMin) { };
                RangeBase.prototype.OnMaximumChanged = function (oldMax, newMax) { };
                RangeBase.prototype.OnValueChanged = function (oldVal, newVal) {
                    this.ValueChanged.raise(this, new Fayde.RoutedPropertyChangedEventArgs(oldVal, newVal));
                };
                RangeBase.MinimumProperty = DependencyProperty.RegisterFull("Minimum", function () { return Number; }, RangeBase, 0, function (d, args) { return d._Coercer.OnMinimumChanged(args.OldValue, args.NewValue); }, undefined, false, numberValidator);
                RangeBase.MaximumProperty = DependencyProperty.RegisterFull("Maximum", function () { return Number; }, RangeBase, 1, function (d, args) { return d._Coercer.OnMaximumChanged(args.OldValue, args.NewValue); }, undefined, false, numberValidator);
                RangeBase.LargeChangeProperty = DependencyProperty.RegisterFull("LargeChange", function () { return Number; }, RangeBase, 1, undefined, undefined, false, changeValidator);
                RangeBase.SmallChangeProperty = DependencyProperty.RegisterFull("SmallChange", function () { return Number; }, RangeBase, 0.1, undefined, undefined, false, changeValidator);
                RangeBase.ValueProperty = DependencyProperty.RegisterFull("Value", function () { return Number; }, RangeBase, 0, function (d, args) { return d._Coercer.OnValueChanged(args.OldValue, args.NewValue); }, undefined, false, numberValidator);
                return RangeBase;
            })(Controls.Control);
            Primitives.RangeBase = RangeBase;
            Fayde.CoreLibrary.add(RangeBase);
            function numberValidator(d, propd, value) {
                if (typeof value !== "number")
                    return false;
                if (isNaN(value))
                    return false;
                if (!isFinite(value))
                    return false;
                return true;
            }
            function changeValidator(d, propd, value) {
                if (!numberValidator(d, propd, value))
                    return false;
                return value >= 0;
            }
        })(Primitives = Controls.Primitives || (Controls.Primitives = {}));
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
/// <reference path="ButtonBase.ts" />
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        var Primitives;
        (function (Primitives) {
            var RepeatButton = (function (_super) {
                __extends(RepeatButton, _super);
                function RepeatButton() {
                    _super.call(this);
                    this._KeyboardCausingRepeat = false;
                    this._MouseCausingRepeat = false;
                    this._MousePosition = null;
                    this._IntervalID = null;
                    this._NewInterval = null;
                    this.ClickMode = Controls.ClickMode.Press;
                    this.DefaultStyleKey = RepeatButton;
                }
                RepeatButton.prototype.OnApplyTemplate = function () {
                    _super.prototype.OnApplyTemplate.call(this);
                    this.UpdateVisualState(false);
                };
                RepeatButton.prototype.OnDelayChanged = function (args) {
                    if (args.NewValue < 0)
                        throw new ArgumentException("Delay Property cannot be negative.");
                };
                RepeatButton.prototype.OnIntervalChanged = function (args) {
                    if (args.NewValue < 0)
                        throw new ArgumentException("Interval Property cannot be negative.");
                    this._NewInterval = args.NewValue;
                };
                RepeatButton.prototype.OnIsEnabledChanged = function (e) {
                    _super.prototype.OnIsEnabledChanged.call(this, e);
                    this._KeyboardCausingRepeat = false;
                    this._MouseCausingRepeat = false;
                    this._UpdateRepeatState();
                };
                RepeatButton.prototype.OnKeyDown = function (e) {
                    if (e.Key === Fayde.Input.Key.Space && this.ClickMode !== Controls.ClickMode.Hover) {
                        this._KeyboardCausingRepeat = true;
                        this._UpdateRepeatState();
                    }
                    _super.prototype.OnKeyDown.call(this, e);
                };
                RepeatButton.prototype.OnKeyUp = function (e) {
                    _super.prototype.OnKeyUp.call(this, e);
                    if (e.Key === Fayde.Input.Key.Space && this.ClickMode !== Controls.ClickMode.Hover) {
                        this._KeyboardCausingRepeat = false;
                        this._UpdateRepeatState();
                    }
                    this.UpdateVisualState();
                };
                RepeatButton.prototype.OnLostFocus = function (e) {
                    _super.prototype.OnLostFocus.call(this, e);
                    if (this.ClickMode !== Controls.ClickMode.Hover) {
                        this._KeyboardCausingRepeat = false;
                        this._MouseCausingRepeat = false;
                        this._UpdateRepeatState();
                    }
                };
                RepeatButton.prototype.OnMouseEnter = function (e) {
                    _super.prototype.OnMouseEnter.call(this, e);
                    if (this.ClickMode === Controls.ClickMode.Hover) {
                        this._MouseCausingRepeat = true;
                        this._UpdateRepeatState();
                    }
                    this.UpdateVisualState();
                    this._UpdateMousePosition(e);
                };
                RepeatButton.prototype.OnMouseLeave = function (e) {
                    _super.prototype.OnMouseLeave.call(this, e);
                    if (this.ClickMode === Controls.ClickMode.Hover) {
                        this._MouseCausingRepeat = false;
                        this._UpdateRepeatState();
                    }
                    this.UpdateVisualState();
                };
                RepeatButton.prototype.OnMouseLeftButtonDown = function (e) {
                    if (e.Handled)
                        return;
                    _super.prototype.OnMouseLeftButtonDown.call(this, e);
                    if (this.ClickMode !== Controls.ClickMode.Hover) {
                        this._MouseCausingRepeat = true;
                        this._UpdateRepeatState();
                    }
                };
                RepeatButton.prototype.OnMouseLeftButtonUp = function (e) {
                    if (e.Handled)
                        return;
                    _super.prototype.OnMouseLeftButtonUp.call(this, e);
                    if (this.ClickMode !== Controls.ClickMode.Hover) {
                        this._MouseCausingRepeat = false;
                        this._UpdateRepeatState();
                    }
                    this.UpdateVisualState();
                };
                RepeatButton.prototype.OnMouseMove = function (e) {
                    this._UpdateMousePosition(e);
                };
                RepeatButton.prototype._UpdateMousePosition = function (e) {
                    var curNode = this.XamlNode;
                    var parentNode = curNode;
                    while (curNode instanceof Fayde.FENode) {
                        parentNode = curNode;
                        curNode = curNode.ParentNode;
                    }
                    this._MousePosition = e.GetPosition(parentNode.XObject);
                };
                RepeatButton.prototype._UpdateRepeatState = function () {
                    var _this = this;
                    if (this._MouseCausingRepeat || this._KeyboardCausingRepeat) {
                        if (this._IntervalID == null)
                            this._IntervalID = window.setInterval(function () { return _this._StartRepeatingAfterDelay(); }, this.Delay);
                    }
                    else {
                        if (this._IntervalID != null)
                            window.clearInterval(this._IntervalID);
                        this._IntervalID = null;
                    }
                };
                RepeatButton.prototype._StartRepeatingAfterDelay = function () {
                    var _this = this;
                    window.clearInterval(this._IntervalID);
                    this._IntervalID = window.setInterval(function () { return _this._OnTimeout(); }, this.Interval);
                };
                RepeatButton.prototype._OnTimeout = function () {
                    var _this = this;
                    if (this._NewInterval != null) {
                        window.clearInterval(this._IntervalID);
                        this._IntervalID = window.setInterval(function () { return _this._OnTimeout(); }, this._NewInterval);
                        this._NewInterval = null;
                    }
                    if (!this.IsPressed)
                        return;
                    if (this._KeyboardCausingRepeat) {
                        this.OnClick();
                        return;
                    }
                    var els = Fayde.VisualTreeHelper.FindElementsInHostCoordinates(this._MousePosition, this);
                    if (els.indexOf(this) > -1) {
                        this.OnClick();
                    }
                };
                RepeatButton.DelayProperty = DependencyProperty.Register("Delay", function () { return Number; }, RepeatButton, 500, function (d, args) { return d.OnDelayChanged(args); });
                RepeatButton.IntervalProperty = DependencyProperty.Register("Interval", function () { return Number; }, RepeatButton, 33, function (d, args) { return d.OnIntervalChanged(args); });
                return RepeatButton;
            })(Primitives.ButtonBase);
            Primitives.RepeatButton = RepeatButton;
            Fayde.CoreLibrary.add(RepeatButton);
            Controls.TemplateVisualStates(RepeatButton, { GroupName: "CommonStates", Name: "Normal" }, { GroupName: "CommonStates", Name: "MouseOver" }, { GroupName: "CommonStates", Name: "Pressed" }, { GroupName: "CommonStates", Name: "Disabled" }, { GroupName: "FocusStates", Name: "Unfocused" }, { GroupName: "FocusStates", Name: "Focused" });
        })(Primitives = Controls.Primitives || (Controls.Primitives = {}));
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
/// <reference path="../Control.ts" />
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        var Primitives;
        (function (Primitives) {
            var Thumb = (function (_super) {
                __extends(Thumb, _super);
                function Thumb() {
                    _super.call(this);
                    this._PreviousPosition = null;
                    this._Origin = null;
                    this.DragCompleted = new Fayde.RoutedEvent();
                    this.DragDelta = new Fayde.RoutedEvent();
                    this.DragStarted = new Fayde.RoutedEvent();
                    this.DefaultStyleKey = Thumb;
                }
                Thumb.prototype.OnApplyTemplate = function () {
                    _super.prototype.OnApplyTemplate.call(this);
                    this.UpdateVisualState(false);
                };
                Thumb.prototype.OnDraggingChanged = function (args) {
                    this.UpdateVisualState();
                };
                Thumb.prototype.OnGotFocus = function (e) {
                    _super.prototype.OnGotFocus.call(this, e);
                    this._FocusChanged(Fayde.Surface.HasFocus(this));
                };
                Thumb.prototype.OnLostFocus = function (e) {
                    _super.prototype.OnLostFocus.call(this, e);
                    this._FocusChanged(Fayde.Surface.HasFocus(this));
                };
                Thumb.prototype._FocusChanged = function (hasFocus) {
                    this.SetCurrentValue(Thumb.IsFocusedProperty, hasFocus);
                    this.UpdateVisualState();
                };
                Thumb.prototype.OnLostMouseCapture = function (e) {
                    if (!this.IsDragging || !this.IsEnabled)
                        return;
                    this.SetCurrentValue(Thumb.IsDraggingProperty, false);
                    this._RaiseDragCompleted(false);
                };
                Thumb.prototype.OnMouseEnter = function (e) {
                    if (this.IsEnabled)
                        this.UpdateVisualState();
                };
                Thumb.prototype.OnMouseLeave = function (e) {
                    if (this.IsEnabled)
                        this.UpdateVisualState();
                };
                Thumb.prototype.OnMouseLeftButtonDown = function (e) {
                    _super.prototype.OnMouseLeftButtonDown.call(this, e);
                    if (e.Handled || this.IsDragging || !this.IsEnabled)
                        return;
                    e.Handled = true;
                    this.CaptureMouse();
                    this.SetCurrentValue(Thumb.IsDraggingProperty, true);
                    var vpNode = this.XamlNode.VisualParentNode;
                    this._Origin = this._PreviousPosition = e.GetPosition((vpNode) ? vpNode.XObject : undefined);
                    var success = false;
                    try {
                        this._RaiseDragStarted();
                        success = true;
                    }
                    finally {
                        if (!success)
                            this.CancelDrag();
                    }
                };
                Thumb.prototype.OnMouseMove = function (e) {
                    if (!this.IsDragging)
                        return;
                    var vpNode = this.XamlNode.VisualParentNode;
                    var p = e.GetPosition((vpNode) ? vpNode.XObject : undefined);
                    if (!minerva.Point.isEqual(p, this._PreviousPosition)) {
                        this._RaiseDragDelta(p.x - this._PreviousPosition.x, p.y - this._PreviousPosition.y);
                        this._PreviousPosition = p;
                    }
                };
                Thumb.prototype.OnLostTouchCapture = function (e) {
                    _super.prototype.OnLostTouchCapture.call(this, e);
                    if (!this.IsDragging || !this.IsEnabled)
                        return;
                    this.SetCurrentValue(Thumb.IsDraggingProperty, false);
                    this._RaiseDragCompleted(false);
                };
                Thumb.prototype.OnTouchEnter = function (e) {
                    _super.prototype.OnTouchEnter.call(this, e);
                    if (this.IsEnabled)
                        this.UpdateVisualState();
                };
                Thumb.prototype.OnTouchLeave = function (e) {
                    _super.prototype.OnTouchLeave.call(this, e);
                    if (this.IsEnabled)
                        this.UpdateVisualState();
                };
                Thumb.prototype.OnTouchDown = function (e) {
                    _super.prototype.OnTouchDown.call(this, e);
                    if (e.Handled || this.IsDragging || !this.IsEnabled)
                        return;
                    e.Handled = true;
                    e.Device.Capture(this);
                    this.SetCurrentValue(Thumb.IsDraggingProperty, true);
                    var vpNode = this.XamlNode.VisualParentNode;
                    var tp = e.GetTouchPoint(vpNode ? vpNode.XObject : undefined);
                    this._Origin = this._PreviousPosition = tp.Position;
                    var success = false;
                    try {
                        this._RaiseDragStarted();
                        success = true;
                    }
                    finally {
                        if (!success)
                            this.CancelDrag();
                    }
                };
                Thumb.prototype.OnTouchUp = function (e) {
                    _super.prototype.OnTouchUp.call(this, e);
                    if (e.Handled || !this.IsDragging || !this.IsEnabled)
                        return;
                    e.Handled = true;
                    e.Device.ReleaseCapture(this);
                };
                Thumb.prototype.OnTouchMove = function (e) {
                    _super.prototype.OnTouchMove.call(this, e);
                    if (!this.IsDragging || e.Device.Captured !== this)
                        return;
                    var vpNode = this.XamlNode.VisualParentNode;
                    var tp = e.Device.GetTouchPoint(vpNode ? vpNode.XObject : undefined);
                    var pos = tp.Position;
                    if (!minerva.Point.isEqual(pos, this._PreviousPosition)) {
                        this._RaiseDragDelta(pos.x - this._PreviousPosition.x, pos.y - this._PreviousPosition.y);
                        this._PreviousPosition = pos;
                    }
                };
                Thumb.prototype.CancelDrag = function () {
                    if (!this.IsDragging)
                        return;
                    this.SetCurrentValue(Thumb.IsDraggingProperty, false);
                    this._RaiseDragCompleted(true);
                };
                Thumb.prototype._RaiseDragStarted = function () {
                    this.DragStarted.raise(this, new Primitives.DragStartedEventArgs(this._Origin.x, this._Origin.y));
                };
                Thumb.prototype._RaiseDragDelta = function (x, y) {
                    this.DragDelta.raise(this, new Primitives.DragDeltaEventArgs(x, y));
                };
                Thumb.prototype._RaiseDragCompleted = function (canceled) {
                    this.DragCompleted.raise(this, new Primitives.DragCompletedEventArgs(this._PreviousPosition.x - this._Origin.x, this._PreviousPosition.y - this._Origin.y, canceled));
                };
                Thumb.prototype.GoToStateCommon = function (gotoFunc) {
                    if (!this.IsEnabled)
                        return gotoFunc("Disabled");
                    if (this.IsDragging)
                        return gotoFunc("Pressed");
                    if (this.IsMouseOver)
                        return gotoFunc("MouseOver");
                    return gotoFunc("Normal");
                };
                Thumb.IsDraggingProperty = DependencyProperty.RegisterReadOnly("IsDragging", function () { return Boolean; }, Thumb, false, function (d, args) { return d.OnDraggingChanged(args); });
                Thumb.IsFocusedProperty = DependencyProperty.RegisterReadOnly("IsFocused", function () { return Boolean; }, Thumb);
                return Thumb;
            })(Controls.Control);
            Primitives.Thumb = Thumb;
            Fayde.CoreLibrary.add(Thumb);
            Controls.TemplateVisualStates(Thumb, { GroupName: "CommonStates", Name: "Normal" }, { GroupName: "CommonStates", Name: "MouseOver" }, { GroupName: "CommonStates", Name: "Pressed" }, { GroupName: "CommonStates", Name: "Disabled" }, { GroupName: "FocusStates", Name: "Unfocused" }, { GroupName: "FocusStates", Name: "Focused" });
        })(Primitives = Controls.Primitives || (Controls.Primitives = {}));
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
/// <reference path="RangeBase.ts" />
/// <reference path="RepeatButton.ts" />
/// <reference path="Thumb.ts" />
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        var Primitives;
        (function (Primitives) {
            var ScrollBar = (function (_super) {
                __extends(ScrollBar, _super);
                function ScrollBar() {
                    _super.call(this);
                    this._DragValue = 0;
                    this.Scroll = new Fayde.RoutedEvent();
                    this.DefaultStyleKey = ScrollBar;
                    this.SizeChanged.on(this._HandleSizeChanged, this);
                }
                Object.defineProperty(ScrollBar.prototype, "IsDragging", {
                    get: function () {
                        if (this.$HorizontalThumb)
                            return this.$HorizontalThumb.IsDragging;
                        if (this.$VerticalThumb)
                            return this.$VerticalThumb.IsDragging;
                        return false;
                    },
                    enumerable: true,
                    configurable: true
                });
                ScrollBar.prototype.OnApplyTemplate = function () {
                    _super.prototype.OnApplyTemplate.call(this);
                    this.$HorizontalTemplate = this.GetTemplateChild("HorizontalRoot", Fayde.FrameworkElement);
                    this.$HorizontalLargeIncrease = this.GetTemplateChild("HorizontalLargeIncrease", Primitives.RepeatButton);
                    this.$HorizontalLargeDecrease = this.GetTemplateChild("HorizontalLargeDecrease", Primitives.RepeatButton);
                    this.$HorizontalSmallIncrease = this.GetTemplateChild("HorizontalSmallIncrease", Primitives.RepeatButton);
                    this.$HorizontalSmallDecrease = this.GetTemplateChild("HorizontalSmallDecrease", Primitives.RepeatButton);
                    this.$HorizontalThumb = this.GetTemplateChild("HorizontalThumb", Primitives.Thumb);
                    this.$VerticalTemplate = this.GetTemplateChild("VerticalRoot", Fayde.FrameworkElement);
                    this.$VerticalLargeIncrease = this.GetTemplateChild("VerticalLargeIncrease", Primitives.RepeatButton);
                    this.$VerticalLargeDecrease = this.GetTemplateChild("VerticalLargeDecrease", Primitives.RepeatButton);
                    this.$VerticalSmallIncrease = this.GetTemplateChild("VerticalSmallIncrease", Primitives.RepeatButton);
                    this.$VerticalSmallDecrease = this.GetTemplateChild("VerticalSmallDecrease", Primitives.RepeatButton);
                    this.$VerticalThumb = this.GetTemplateChild("VerticalThumb", Primitives.Thumb);
                    if (this.$HorizontalThumb) {
                        this.$HorizontalThumb.DragStarted.on(this._OnThumbDragStarted, this);
                        this.$HorizontalThumb.DragDelta.on(this._OnThumbDragDelta, this);
                        this.$HorizontalThumb.DragCompleted.on(this._OnThumbDragCompleted, this);
                    }
                    if (this.$HorizontalLargeIncrease) {
                        this.$HorizontalLargeIncrease.Click.on(this._LargeIncrement, this);
                    }
                    if (this.$HorizontalLargeDecrease) {
                        this.$HorizontalLargeDecrease.Click.on(this._LargeDecrement, this);
                    }
                    if (this.$HorizontalSmallIncrease) {
                        this.$HorizontalSmallIncrease.Click.on(this._SmallIncrement, this);
                    }
                    if (this.$HorizontalSmallDecrease) {
                        this.$HorizontalSmallDecrease.Click.on(this._SmallDecrement, this);
                    }
                    if (this.$VerticalThumb) {
                        this.$VerticalThumb.DragStarted.on(this._OnThumbDragStarted, this);
                        this.$VerticalThumb.DragDelta.on(this._OnThumbDragDelta, this);
                        this.$VerticalThumb.DragCompleted.on(this._OnThumbDragCompleted, this);
                    }
                    if (this.$VerticalLargeIncrease) {
                        this.$VerticalLargeIncrease.Click.on(this._LargeIncrement, this);
                    }
                    if (this.$VerticalLargeDecrease) {
                        this.$VerticalLargeDecrease.Click.on(this._LargeDecrement, this);
                    }
                    if (this.$VerticalSmallIncrease) {
                        this.$VerticalSmallIncrease.Click.on(this._SmallIncrement, this);
                    }
                    if (this.$VerticalSmallDecrease) {
                        this.$VerticalSmallDecrease.Click.on(this._SmallDecrement, this);
                    }
                    this._OnOrientationChanged();
                    this.UpdateVisualState(false);
                };
                ScrollBar.prototype.OnMaximumChanged = function (oldMax, newMax) {
                    _super.prototype.OnMaximumChanged.call(this, oldMax, newMax);
                    this._UpdateTrackLayout();
                };
                ScrollBar.prototype.OnMinimumChanged = function (oldMin, newMin) {
                    _super.prototype.OnMinimumChanged.call(this, oldMin, newMin);
                    this._UpdateTrackLayout();
                };
                ScrollBar.prototype.OnValueChanged = function (oldValue, newValue) {
                    _super.prototype.OnValueChanged.call(this, oldValue, newValue);
                    this._UpdateTrackLayout();
                };
                ScrollBar.prototype._OnThumbDragStarted = function (sender, e) {
                    this._DragValue = this.Value;
                };
                ScrollBar.prototype._OnThumbDragDelta = function (sender, e) {
                    var change = 0;
                    var zoomFactor = 1;
                    var num = zoomFactor;
                    var max = this.Maximum;
                    var min = this.Minimum;
                    var diff = max - min;
                    var trackLength = this._GetTrackLength();
                    var isHorizontal = this.Orientation === Fayde.Orientation.Horizontal;
                    if (this.$VerticalThumb && !isHorizontal) {
                        change = num * e.VerticalChange / (trackLength - this.$VerticalThumb.ActualHeight) * diff;
                    }
                    if (this.$HorizontalThumb && isHorizontal) {
                        change = num * e.HorizontalChange / (trackLength - this.$HorizontalThumb.ActualWidth) * diff;
                    }
                    if (!isNaN(change) && isFinite(change)) {
                        this._DragValue += change;
                        var num1 = Math.min(max, Math.max(min, this._DragValue));
                        if (num1 !== this.Value) {
                            this.Value = num1;
                            this._RaiseScroll(Primitives.ScrollEventType.ThumbTrack);
                        }
                    }
                };
                ScrollBar.prototype._OnThumbDragCompleted = function (sender, e) {
                    this._RaiseScroll(Primitives.ScrollEventType.EndScroll);
                };
                ScrollBar.prototype._SmallDecrement = function (sender, e) {
                    var curValue = this.Value;
                    var num = Math.max(curValue - this.SmallChange, this.Minimum);
                    if (curValue !== num) {
                        this.SetCurrentValue(Primitives.RangeBase.ValueProperty, num);
                        this._RaiseScroll(Primitives.ScrollEventType.SmallDecrement);
                    }
                };
                ScrollBar.prototype._SmallIncrement = function (sender, e) {
                    var curValue = this.Value;
                    var num = Math.min(curValue + this.SmallChange, this.Maximum);
                    if (curValue !== num) {
                        this.SetCurrentValue(Primitives.RangeBase.ValueProperty, num);
                        this._RaiseScroll(Primitives.ScrollEventType.SmallIncrement);
                    }
                };
                ScrollBar.prototype._LargeDecrement = function (sender, e) {
                    var curValue = this.Value;
                    var num = Math.max(curValue - this.LargeChange, this.Minimum);
                    if (curValue !== num) {
                        this.SetCurrentValue(Primitives.RangeBase.ValueProperty, num);
                        this._RaiseScroll(Primitives.ScrollEventType.LargeDecrement);
                    }
                };
                ScrollBar.prototype._LargeIncrement = function (sender, e) {
                    var curValue = this.Value;
                    var num = Math.min(curValue + this.LargeChange, this.Maximum);
                    if (curValue !== num) {
                        this.SetCurrentValue(Primitives.RangeBase.ValueProperty, num);
                        this._RaiseScroll(Primitives.ScrollEventType.LargeIncrement);
                    }
                };
                ScrollBar.prototype._HandleSizeChanged = function (sender, e) {
                    this._UpdateTrackLayout();
                };
                ScrollBar.prototype._OnOrientationChanged = function () {
                    var isHorizontal = this.Orientation === Fayde.Orientation.Horizontal;
                    if (this.$HorizontalTemplate) {
                        this.$HorizontalTemplate.Visibility = isHorizontal ? Fayde.Visibility.Visible : Fayde.Visibility.Collapsed;
                    }
                    if (this.$VerticalTemplate) {
                        this.$VerticalTemplate.Visibility = isHorizontal ? Fayde.Visibility.Collapsed : Fayde.Visibility.Visible;
                    }
                    this._UpdateTrackLayout();
                };
                ScrollBar.prototype._UpdateTrackLayout = function () {
                    var trackLength = this._GetTrackLength();
                    var max = this.Maximum;
                    var min = this.Minimum;
                    var val = this.Value;
                    var multiplier = (val - min) / (max - min);
                    var thumbSize = this._UpdateThumbSize(trackLength);
                    var isHorizontal = this.Orientation === Fayde.Orientation.Horizontal;
                    if (isHorizontal && this.$HorizontalLargeDecrease && this.$HorizontalThumb) {
                        this.$HorizontalLargeDecrease.Width = Math.max(0, multiplier * (trackLength - thumbSize));
                    }
                    else if (!isHorizontal && this.$VerticalLargeDecrease && this.$VerticalThumb) {
                        this.$VerticalLargeDecrease.Height = Math.max(0, multiplier * (trackLength - thumbSize));
                    }
                };
                ScrollBar.prototype._UpdateThumbSize = function (trackLength) {
                    var result = Number.NaN;
                    var hideThumb = trackLength <= 0;
                    if (trackLength > 0) {
                        var isHorizontal = this.Orientation === Fayde.Orientation.Horizontal;
                        var max = this.Maximum;
                        var min = this.Minimum;
                        if (isHorizontal && this.$HorizontalThumb) {
                            if (max - min !== 0)
                                result = Math.max(this.$HorizontalThumb.MinWidth, this._ConvertViewportSizeToDisplayUnits(trackLength));
                            if (max - min === 0 || result > this.ActualWidth || trackLength <= this.$HorizontalThumb.MinWidth) {
                                hideThumb = true;
                            }
                            else {
                                this.$HorizontalThumb.Visibility = Fayde.Visibility.Visible;
                                this.$HorizontalThumb.Width = result;
                            }
                        }
                        else if (!isHorizontal && this.$VerticalThumb) {
                            if (max - min !== 0)
                                result = Math.max(this.$VerticalThumb.MinHeight, this._ConvertViewportSizeToDisplayUnits(trackLength));
                            if (max - min === 0 || result > this.ActualHeight || trackLength <= this.$VerticalThumb.MinHeight) {
                                hideThumb = true;
                            }
                            else {
                                this.$VerticalThumb.Visibility = Fayde.Visibility.Visible;
                                this.$VerticalThumb.Height = result;
                            }
                        }
                    }
                    if (hideThumb) {
                        if (this.$HorizontalThumb) {
                            this.$HorizontalThumb.Visibility = Fayde.Visibility.Collapsed;
                        }
                        if (this.$VerticalThumb) {
                            this.$VerticalThumb.Visibility = Fayde.Visibility.Collapsed;
                        }
                    }
                    return result;
                };
                ScrollBar.prototype._GetTrackLength = function () {
                    var actual = NaN;
                    if (this.Orientation === Fayde.Orientation.Horizontal) {
                        actual = this.ActualWidth;
                        if (this.$HorizontalSmallDecrease) {
                            var thickness = this.$HorizontalSmallDecrease.Margin;
                            actual = actual - (this.$HorizontalSmallDecrease.ActualWidth + thickness.left + thickness.right);
                        }
                        if (this.$HorizontalSmallIncrease) {
                            var thickness = this.$HorizontalSmallIncrease.Margin;
                            actual = actual - (this.$HorizontalSmallIncrease.ActualWidth + thickness.left + thickness.right);
                        }
                    }
                    else {
                        actual = this.ActualHeight;
                        if (this.$VerticalSmallDecrease) {
                            var thickness = this.$VerticalSmallDecrease.Margin;
                            actual = actual - (this.$VerticalSmallDecrease.ActualHeight + thickness.top + thickness.bottom);
                        }
                        if (this.$VerticalSmallIncrease) {
                            var thickness = this.$VerticalSmallIncrease.Margin;
                            actual = actual - (this.$VerticalSmallIncrease.ActualHeight + thickness.top + thickness.bottom);
                        }
                    }
                    return actual;
                };
                ScrollBar.prototype._ConvertViewportSizeToDisplayUnits = function (trackLength) {
                    var viewportSize = this.ViewportSize;
                    return trackLength * viewportSize / (viewportSize + this.Maximum - this.Minimum);
                };
                ScrollBar.prototype._RaiseScroll = function (type) {
                    var args = new Primitives.ScrollEventArgs(type, this.Value);
                    args.OriginalSource = this;
                    this.Scroll.raise(this, args);
                };
                ScrollBar.OrientationProperty = DependencyProperty.Register("Orientation", function () { return new Fayde.Enum(Fayde.Orientation); }, ScrollBar, Fayde.Orientation.Horizontal, function (d, args) { return d._OnOrientationChanged(); });
                ScrollBar.ViewportSizeProperty = DependencyProperty.Register("ViewportSize", function () { return Number; }, ScrollBar, 0, function (d, args) { return d._UpdateTrackLayout(); });
                return ScrollBar;
            })(Primitives.RangeBase);
            Primitives.ScrollBar = ScrollBar;
            Fayde.CoreLibrary.add(ScrollBar);
            Controls.TemplateVisualStates(ScrollBar, { GroupName: "CommonStates", Name: "Normal" }, { GroupName: "CommonStates", Name: "MouseOver" }, { GroupName: "CommonStates", Name: "Disabled" });
            Controls.TemplateParts(ScrollBar, { Name: "VerticalRoot", Type: Fayde.FrameworkElement }, { Name: "VerticalLargeIncrease", Type: Primitives.RepeatButton }, { Name: "VerticalLargeDecrease", Type: Primitives.RepeatButton }, { Name: "VerticalSmallIncrease", Type: Primitives.RepeatButton }, { Name: "VerticalSmallDecrease", Type: Primitives.RepeatButton }, { Name: "VerticalThumb", Type: Primitives.Thumb }, { Name: "HorizontalRoot", Type: Fayde.FrameworkElement }, { Name: "HorizontalLargeIncrease", Type: Primitives.RepeatButton }, { Name: "HorizontalLargeDecrease", Type: Primitives.RepeatButton }, { Name: "HorizontalSmallIncrease", Type: Primitives.RepeatButton }, { Name: "HorizontalSmallDecrease", Type: Primitives.RepeatButton }, { Name: "HorizontalThumb", Type: Primitives.Thumb });
        })(Primitives = Controls.Primitives || (Controls.Primitives = {}));
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
/// <reference path="ContentControl.ts" />
/// <reference path="ScrollContentPresenter.ts" />
/// <reference path="Primitives/ScrollBar.ts" />
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        var ScrollViewer = (function (_super) {
            __extends(ScrollViewer, _super);
            function ScrollViewer() {
                _super.call(this);
                this.$TemplatedParentHandlesScrolling = false;
                this._Delta = new Point();
                this._TouchInitialOffset = new Point();
                this.DefaultStyleKey = ScrollViewer;
            }
            ScrollViewer._ScrollBarVisibilityChanged = function (d, args) {
                if (!d)
                    return;
                if (d instanceof ScrollViewer) {
                    var sv = d;
                    sv.XamlNode.LayoutUpdater.invalidateMeasure();
                    var scrollInfo = sv.ScrollInfo;
                    if (scrollInfo) {
                        scrollInfo.CanHorizontallyScroll = sv.HorizontalScrollBarVisibility !== Controls.ScrollBarVisibility.Disabled;
                        scrollInfo.CanVerticallyScroll = sv.VerticalScrollBarVisibility !== Controls.ScrollBarVisibility.Disabled;
                    }
                    sv._UpdateScrollBarVisibility();
                    return;
                }
                if (d instanceof Controls.ListBox) {
                    var listbox = d;
                    if (listbox.$TemplateScrollViewer)
                        listbox.$TemplateScrollViewer.SetValue(args.Property, args.NewValue);
                    return;
                }
            };
            ScrollViewer.GetHorizontalScrollBarVisibility = function (d) { return d.GetValue(ScrollViewer.HorizontalScrollBarVisibilityProperty); };
            ScrollViewer.SetHorizontalScrollBarVisibility = function (d, value) { d.SetValue(ScrollViewer.HorizontalScrollBarVisibilityProperty, value); };
            Object.defineProperty(ScrollViewer.prototype, "HorizontalScrollBarVisibility", {
                get: function () { return this.GetValue(ScrollViewer.HorizontalScrollBarVisibilityProperty); },
                set: function (value) { this.SetValue(ScrollViewer.HorizontalScrollBarVisibilityProperty, value); },
                enumerable: true,
                configurable: true
            });
            ScrollViewer.GetVerticalScrollBarVisibility = function (d) { return d.GetValue(ScrollViewer.VerticalScrollBarVisibilityProperty); };
            ScrollViewer.SetVerticalScrollBarVisibility = function (d, value) { d.SetValue(ScrollViewer.VerticalScrollBarVisibilityProperty, value); };
            Object.defineProperty(ScrollViewer.prototype, "VerticalScrollBarVisibility", {
                get: function () { return this.GetValue(ScrollViewer.VerticalScrollBarVisibilityProperty); },
                set: function (value) { this.SetValue(ScrollViewer.VerticalScrollBarVisibilityProperty, value); },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScrollViewer.prototype, "ScrollInfo", {
                get: function () { return this._ScrollInfo; },
                set: function (value) {
                    this._ScrollInfo = value;
                    if (value) {
                        value.CanHorizontallyScroll = this.HorizontalScrollBarVisibility !== Controls.ScrollBarVisibility.Disabled;
                        value.CanVerticallyScroll = this.VerticalScrollBarVisibility !== Controls.ScrollBarVisibility.Disabled;
                    }
                },
                enumerable: true,
                configurable: true
            });
            ScrollViewer.prototype.InvalidateScrollInfo = function () {
                var scrollInfo = this.ScrollInfo;
                if (scrollInfo) {
                    this.SetCurrentValue(ScrollViewer.ExtentWidthProperty, scrollInfo.ExtentWidth);
                    this.SetCurrentValue(ScrollViewer.ExtentHeightProperty, scrollInfo.ExtentHeight);
                    this.SetCurrentValue(ScrollViewer.ViewportWidthProperty, scrollInfo.ViewportWidth);
                    this.SetCurrentValue(ScrollViewer.ViewportHeightProperty, scrollInfo.ViewportHeight);
                    this._UpdateScrollBar(Fayde.Orientation.Horizontal, scrollInfo.HorizontalOffset);
                    this._UpdateScrollBar(Fayde.Orientation.Vertical, scrollInfo.VerticalOffset);
                    this._UpdateScrollBarVisibility();
                }
                var lu = this.XamlNode.LayoutUpdater;
                var w = Math.max(0, this.ExtentWidth - this.ViewportWidth);
                if (w !== this.ScrollableWidth) {
                    this.SetCurrentValue(ScrollViewer.ScrollableWidthProperty, w);
                    lu.invalidateMeasure();
                }
                var h = Math.max(0, this.ExtentHeight - this.ViewportHeight);
                if (h !== this.ScrollableHeight) {
                    this.SetCurrentValue(ScrollViewer.ScrollableHeightProperty, h);
                    lu.invalidateMeasure();
                }
            };
            ScrollViewer.prototype._UpdateScrollBarVisibility = function () {
                var lu = this.XamlNode.LayoutUpdater;
                var scrollInfo = this.ScrollInfo;
                var horizontalVisibility = Fayde.Visibility.Visible;
                var hsbv = this.HorizontalScrollBarVisibility;
                switch (hsbv) {
                    case Controls.ScrollBarVisibility.Visible:
                        break;
                    case Controls.ScrollBarVisibility.Disabled:
                    case Controls.ScrollBarVisibility.Hidden:
                        horizontalVisibility = Fayde.Visibility.Collapsed;
                        break;
                    case Controls.ScrollBarVisibility.Auto:
                    default:
                        horizontalVisibility = (!scrollInfo || scrollInfo.ExtentWidth <= scrollInfo.ViewportWidth) ? Fayde.Visibility.Collapsed : Fayde.Visibility.Visible;
                        break;
                }
                if (horizontalVisibility !== this.ComputedHorizontalScrollBarVisibility) {
                    this.SetCurrentValue(ScrollViewer.ComputedHorizontalScrollBarVisibilityProperty, horizontalVisibility);
                    lu.invalidateMeasure();
                }
                var verticalVisibility = Fayde.Visibility.Visible;
                var vsbv = this.VerticalScrollBarVisibility;
                switch (vsbv) {
                    case Controls.ScrollBarVisibility.Visible:
                        break;
                    case Controls.ScrollBarVisibility.Disabled:
                    case Controls.ScrollBarVisibility.Hidden:
                        verticalVisibility = Fayde.Visibility.Collapsed;
                        break;
                    case Controls.ScrollBarVisibility.Auto:
                    default:
                        verticalVisibility = (!scrollInfo || scrollInfo.ExtentHeight <= scrollInfo.ViewportHeight) ? Fayde.Visibility.Collapsed : Fayde.Visibility.Visible;
                        break;
                }
                if (verticalVisibility !== this.ComputedVerticalScrollBarVisibility) {
                    this.SetCurrentValue(ScrollViewer.ComputedVerticalScrollBarVisibilityProperty, verticalVisibility);
                    lu.invalidateMeasure();
                }
            };
            ScrollViewer.prototype._UpdateScrollBar = function (orientation, value) {
                var propd;
                var sb;
                if (orientation === Fayde.Orientation.Horizontal) {
                    propd = ScrollViewer.HorizontalOffsetProperty;
                    sb = this.$HorizontalScrollBar;
                }
                else {
                    propd = ScrollViewer.VerticalOffsetProperty;
                    sb = this.$VerticalScrollBar;
                }
                try {
                    this.SetCurrentValue(propd, value);
                    if (sb)
                        sb.SetCurrentValue(Controls.Primitives.RangeBase.ValueProperty, value);
                }
                finally {
                }
            };
            ScrollViewer.prototype.OnApplyTemplate = function () {
                var _this = this;
                _super.prototype.OnApplyTemplate.call(this);
                this.$ScrollContentPresenter = this.GetTemplateChild("ScrollContentPresenter", Controls.ScrollContentPresenter);
                this.$HorizontalScrollBar = this.GetTemplateChild("HorizontalScrollBar", Controls.Primitives.ScrollBar);
                if (this.$HorizontalScrollBar) {
                    this.$HorizontalScrollBar.Scroll.on(function (sender, e) { return _this._HandleScroll(Fayde.Orientation.Horizontal, e); }, this);
                }
                this.$VerticalScrollBar = this.GetTemplateChild("VerticalScrollBar", Controls.Primitives.ScrollBar);
                if (this.$VerticalScrollBar) {
                    this.$VerticalScrollBar.Scroll.on(function (sender, e) { return _this._HandleScroll(Fayde.Orientation.Vertical, e); }, this);
                }
                this._UpdateScrollBarVisibility();
            };
            ScrollViewer.prototype.OnMouseLeftButtonDown = function (e) {
                if (!e.Handled && this.Focus())
                    e.Handled = true;
                _super.prototype.OnMouseLeftButtonDown.call(this, e);
            };
            ScrollViewer.prototype.OnMouseWheel = function (e) {
                _super.prototype.OnMouseWheel.call(this, e);
                if (e.Handled)
                    return;
                var scrollInfo = this.ScrollInfo;
                if (!scrollInfo)
                    return;
                if ((e.Delta > 0 && scrollInfo.VerticalOffset !== 0) || (e.Delta < 0 && scrollInfo.VerticalOffset < this.ScrollableHeight)) {
                    if (e.Delta >= 0)
                        scrollInfo.MouseWheelUp();
                    else
                        scrollInfo.MouseWheelDown();
                    e.Handled = true;
                }
            };
            ScrollViewer.prototype.OnTouchDown = function (e) {
                _super.prototype.OnTouchDown.call(this, e);
                var scrollInfo = this.ScrollInfo;
                if (e.Handled || !this.IsEnabled || !scrollInfo)
                    return;
                e.Handled = true;
                this.Focus();
                e.Device.Capture(this);
                var offset = this._TouchInitialOffset;
                offset.x = scrollInfo.HorizontalOffset;
                offset.y = scrollInfo.VerticalOffset;
                this._TouchOrigin = e.GetTouchPoint(this).Position;
            };
            ScrollViewer.prototype.OnTouchUp = function (e) {
                _super.prototype.OnTouchUp.call(this, e);
                if (e.Handled || !this.IsEnabled)
                    return;
                e.Handled = true;
                e.Device.ReleaseCapture(this);
            };
            ScrollViewer.prototype.OnTouchMove = function (e) {
                _super.prototype.OnTouchMove.call(this, e);
                if (e.Handled || e.Device.Captured !== this)
                    return;
                var tp = e.GetTouchPoint(this);
                var pos = tp.Position;
                var delta = this._Delta;
                var origin = this._TouchOrigin;
                delta.x = pos.x - origin.x;
                delta.y = pos.y - origin.y;
                this.ScrollToHorizontalOffset(delta.x);
                this.ScrollToVerticalOffset(delta.y);
            };
            ScrollViewer.prototype.OnKeyDown = function (e) {
                _super.prototype.OnKeyDown.call(this, e);
                if (e.Handled)
                    return;
                if (this.$TemplatedParentHandlesScrolling)
                    return;
                var orientation = Fayde.Orientation.Vertical;
                var scrollEventType = Controls.Primitives.ScrollEventType.ThumbTrack;
                switch (e.Key) {
                    case Fayde.Input.Key.PageUp:
                        scrollEventType = Controls.Primitives.ScrollEventType.LargeDecrement;
                        break;
                    case Fayde.Input.Key.PageDown:
                        scrollEventType = Controls.Primitives.ScrollEventType.LargeIncrement;
                        break;
                    case Fayde.Input.Key.End:
                        if (!e.Modifiers.Ctrl)
                            orientation = Fayde.Orientation.Horizontal;
                        scrollEventType = Controls.Primitives.ScrollEventType.Last;
                        break;
                    case Fayde.Input.Key.Home:
                        if (!e.Modifiers.Ctrl)
                            orientation = Fayde.Orientation.Horizontal;
                        scrollEventType = Controls.Primitives.ScrollEventType.First;
                        break;
                    case Fayde.Input.Key.Left:
                        orientation = Fayde.Orientation.Horizontal;
                        scrollEventType = Controls.Primitives.ScrollEventType.SmallDecrement;
                    case Fayde.Input.Key.Up:
                        scrollEventType = Controls.Primitives.ScrollEventType.SmallDecrement;
                        break;
                    case Fayde.Input.Key.Right:
                        orientation = Fayde.Orientation.Horizontal;
                        scrollEventType = Controls.Primitives.ScrollEventType.SmallIncrement;
                    case Fayde.Input.Key.Down:
                        scrollEventType = Controls.Primitives.ScrollEventType.SmallIncrement;
                        break;
                }
                if (scrollEventType !== Controls.Primitives.ScrollEventType.ThumbTrack)
                    e.Handled = !!this._HandleScroll(orientation, new Controls.Primitives.ScrollEventArgs(scrollEventType, 0));
            };
            ScrollViewer.prototype.ScrollInDirection = function (key) {
                switch (key) {
                    case Fayde.Input.Key.PageUp:
                        this.PageUp();
                        break;
                    case Fayde.Input.Key.PageDown:
                        this.PageDown();
                        break;
                    case Fayde.Input.Key.End:
                        this.PageEnd();
                        break;
                    case Fayde.Input.Key.Home:
                        this.PageHome();
                        break;
                    case Fayde.Input.Key.Left:
                        this.LineLeft();
                        break;
                    case Fayde.Input.Key.Up:
                        this.LineUp();
                        break;
                    case Fayde.Input.Key.Right:
                        this.LineRight();
                        break;
                    case Fayde.Input.Key.Down:
                        this.LineDown();
                        break;
                }
            };
            ScrollViewer.prototype.ScrollToHorizontalOffset = function (offset) { this._HandleHorizontalScroll(new Controls.Primitives.ScrollEventArgs(Controls.Primitives.ScrollEventType.ThumbPosition, offset)); };
            ScrollViewer.prototype.ScrollToVerticalOffset = function (offset) { this._HandleVerticalScroll(new Controls.Primitives.ScrollEventArgs(Controls.Primitives.ScrollEventType.ThumbPosition, offset)); };
            ScrollViewer.prototype.LineUp = function () { this._HandleVerticalScroll(new Controls.Primitives.ScrollEventArgs(Controls.Primitives.ScrollEventType.SmallDecrement, 0)); };
            ScrollViewer.prototype.LineDown = function () { this._HandleVerticalScroll(new Controls.Primitives.ScrollEventArgs(Controls.Primitives.ScrollEventType.SmallIncrement, 0)); };
            ScrollViewer.prototype.LineLeft = function () { this._HandleHorizontalScroll(new Controls.Primitives.ScrollEventArgs(Controls.Primitives.ScrollEventType.SmallDecrement, 0)); };
            ScrollViewer.prototype.LineRight = function () { this._HandleHorizontalScroll(new Controls.Primitives.ScrollEventArgs(Controls.Primitives.ScrollEventType.SmallIncrement, 0)); };
            ScrollViewer.prototype.PageHome = function () { this._HandleHorizontalScroll(new Controls.Primitives.ScrollEventArgs(Controls.Primitives.ScrollEventType.First, 0)); };
            ScrollViewer.prototype.PageEnd = function () { this._HandleHorizontalScroll(new Controls.Primitives.ScrollEventArgs(Controls.Primitives.ScrollEventType.Last, 0)); };
            ScrollViewer.prototype.PageUp = function () { this._HandleVerticalScroll(new Controls.Primitives.ScrollEventArgs(Controls.Primitives.ScrollEventType.LargeDecrement, 0)); };
            ScrollViewer.prototype.PageDown = function () { this._HandleVerticalScroll(new Controls.Primitives.ScrollEventArgs(Controls.Primitives.ScrollEventType.LargeIncrement, 0)); };
            ScrollViewer.prototype.PageLeft = function () { this._HandleHorizontalScroll(new Controls.Primitives.ScrollEventArgs(Controls.Primitives.ScrollEventType.LargeDecrement, 0)); };
            ScrollViewer.prototype.PageRight = function () { this._HandleHorizontalScroll(new Controls.Primitives.ScrollEventArgs(Controls.Primitives.ScrollEventType.LargeIncrement, 0)); };
            ScrollViewer.prototype._HandleScroll = function (orientation, e) {
                if (orientation !== Fayde.Orientation.Horizontal)
                    return this._HandleVerticalScroll(e);
                return this._HandleHorizontalScroll(e);
            };
            ScrollViewer.prototype._HandleHorizontalScroll = function (e) {
                var scrollInfo = this.ScrollInfo;
                if (!scrollInfo)
                    return false;
                var offset = scrollInfo.HorizontalOffset;
                var newValue = offset;
                switch (e.ScrollEventType) {
                    case Controls.Primitives.ScrollEventType.SmallDecrement:
                        return scrollInfo.LineLeft();
                    case Controls.Primitives.ScrollEventType.SmallIncrement:
                        return scrollInfo.LineRight();
                    case Controls.Primitives.ScrollEventType.LargeDecrement:
                        return scrollInfo.PageLeft();
                    case Controls.Primitives.ScrollEventType.LargeIncrement:
                        return scrollInfo.PageRight();
                    case Controls.Primitives.ScrollEventType.ThumbPosition:
                    case Controls.Primitives.ScrollEventType.ThumbTrack:
                        newValue = e.Value;
                        break;
                    case Controls.Primitives.ScrollEventType.First:
                        newValue = Number.NEGATIVE_INFINITY;
                        break;
                    case Controls.Primitives.ScrollEventType.Last:
                        newValue = Number.POSITIVE_INFINITY;
                        break;
                }
                newValue = Math.max(newValue, 0);
                newValue = Math.min(this.ScrollableWidth, newValue);
                if (NumberEx.AreClose(offset, newValue))
                    return false;
                scrollInfo.SetHorizontalOffset(newValue);
                return true;
            };
            ScrollViewer.prototype._HandleVerticalScroll = function (e) {
                var scrollInfo = this.ScrollInfo;
                if (!scrollInfo)
                    return false;
                var offset = scrollInfo.VerticalOffset;
                var newValue = offset;
                switch (e.ScrollEventType) {
                    case Controls.Primitives.ScrollEventType.SmallDecrement:
                        return scrollInfo.LineUp();
                    case Controls.Primitives.ScrollEventType.SmallIncrement:
                        return scrollInfo.LineDown();
                        break;
                    case Controls.Primitives.ScrollEventType.LargeDecrement:
                        return scrollInfo.PageUp();
                        break;
                    case Controls.Primitives.ScrollEventType.LargeIncrement:
                        return scrollInfo.PageDown();
                        break;
                    case Controls.Primitives.ScrollEventType.ThumbPosition:
                    case Controls.Primitives.ScrollEventType.ThumbTrack:
                        newValue = e.Value;
                        break;
                    case Controls.Primitives.ScrollEventType.First:
                        newValue = Number.NEGATIVE_INFINITY;
                        break;
                    case Controls.Primitives.ScrollEventType.Last:
                        newValue = Number.POSITIVE_INFINITY;
                        break;
                }
                newValue = Math.max(newValue, 0);
                newValue = Math.min(this.ScrollableHeight, newValue);
                if (NumberEx.AreClose(offset, newValue))
                    return false;
                return scrollInfo.SetVerticalOffset(newValue);
            };
            ScrollViewer.HorizontalScrollBarVisibilityProperty = DependencyProperty.RegisterAttachedCore("HorizontalScrollBarVisibility", function () { return new Fayde.Enum(Controls.ScrollBarVisibility); }, ScrollViewer, Controls.ScrollBarVisibility.Disabled, ScrollViewer._ScrollBarVisibilityChanged);
            ScrollViewer.VerticalScrollBarVisibilityProperty = DependencyProperty.RegisterAttachedCore("VerticalScrollBarVisibility", function () { return new Fayde.Enum(Controls.ScrollBarVisibility); }, ScrollViewer, Controls.ScrollBarVisibility.Disabled, ScrollViewer._ScrollBarVisibilityChanged);
            ScrollViewer.ComputedHorizontalScrollBarVisibilityProperty = DependencyProperty.RegisterReadOnlyCore("ComputedHorizontalScrollBarVisibility", function () { return new Fayde.Enum(Fayde.Visibility); }, ScrollViewer);
            ScrollViewer.ComputedVerticalScrollBarVisibilityProperty = DependencyProperty.RegisterReadOnlyCore("ComputedVerticalScrollBarVisibility", function () { return new Fayde.Enum(Fayde.Visibility); }, ScrollViewer);
            ScrollViewer.HorizontalOffsetProperty = DependencyProperty.RegisterReadOnlyCore("HorizontalOffset", function () { return Number; }, ScrollViewer);
            ScrollViewer.VerticalOffsetProperty = DependencyProperty.RegisterReadOnlyCore("VerticalOffset", function () { return Number; }, ScrollViewer);
            ScrollViewer.ScrollableWidthProperty = DependencyProperty.RegisterReadOnlyCore("ScrollableWidth", function () { return Number; }, ScrollViewer);
            ScrollViewer.ScrollableHeightProperty = DependencyProperty.RegisterReadOnlyCore("ScrollableHeight", function () { return Number; }, ScrollViewer);
            ScrollViewer.ViewportWidthProperty = DependencyProperty.RegisterReadOnlyCore("ViewportWidth", function () { return Number; }, ScrollViewer);
            ScrollViewer.ViewportHeightProperty = DependencyProperty.RegisterReadOnlyCore("ViewportHeight", function () { return Number; }, ScrollViewer);
            ScrollViewer.ExtentWidthProperty = DependencyProperty.RegisterReadOnlyCore("ExtentWidth", function () { return Number; }, ScrollViewer);
            ScrollViewer.ExtentHeightProperty = DependencyProperty.RegisterReadOnlyCore("ExtentHeight", function () { return Number; }, ScrollViewer);
            return ScrollViewer;
        })(Controls.ContentControl);
        Controls.ScrollViewer = ScrollViewer;
        Fayde.CoreLibrary.add(ScrollViewer);
        Controls.TemplateParts(ScrollViewer, { Name: "ScrollContentPresenter", Type: Controls.ScrollContentPresenter }, { Name: "HorizontalScrollBar", Type: Controls.Primitives.ScrollBar }, { Name: "VerticalScrollBar", Type: Controls.Primitives.ScrollBar });
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
/// <reference path="Primitives/Selector.ts" />
/// <reference path="ContentPresenter.ts" />
/// <reference path="Primitives/Popup.ts" />
/// <reference path="Primitives/ToggleButton.ts" />
/// <reference path="ScrollViewer.ts" />
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        var ComboBox = (function (_super) {
            __extends(ComboBox, _super);
            function ComboBox() {
                _super.call(this);
                this.DropDownOpened = new nullstone.Event();
                this.DropDownClosed = new nullstone.Event();
                this.$DisplayedItem = null;
                this.$SelectionBoxItem = null;
                this.$SelectionBoxItemTemplate = null;
                this._FocusedIndex = -1;
                this.DefaultStyleKey = ComboBox;
            }
            ComboBox.prototype._IsDropDownOpenChanged = function (args) {
                var open = args.NewValue;
                if (this.$Popup != null)
                    this.$Popup.IsOpen = open;
                if (this.$DropDownToggle != null)
                    this.$DropDownToggle.IsChecked = open;
                if (open) {
                    this._FocusedIndex = this.Items.Count > 0 ? Math.max(this.SelectedIndex, 0) : -1;
                    if (this._FocusedIndex > -1) {
                        var focusedItem = this.ItemContainersManager.ContainerFromIndex(this._FocusedIndex);
                        if (focusedItem instanceof Controls.ComboBoxItem)
                            focusedItem.Focus();
                    }
                    this.LayoutUpdated.on(this._UpdatePopupSizeAndPosition, this);
                    this.DropDownOpened.raise(this, null);
                }
                else {
                    this.Focus();
                    this.LayoutUpdated.off(this._UpdatePopupSizeAndPosition, this);
                    this.DropDownClosed.raise(this, null);
                }
                var selectedItem = this.SelectedItem;
                this._UpdateDisplayedItem(open && selectedItem instanceof Fayde.UIElement ? null : selectedItem);
                this.UpdateVisualState(true);
            };
            ComboBox.prototype._MaxDropDownHeightChanged = function (args) {
                this._UpdatePopupMaxHeight(args.NewValue);
            };
            ComboBox.prototype._GetChildOfType = function (name, type) {
                var temp = this.GetTemplateChild(name);
                if (temp instanceof type)
                    return temp;
            };
            ComboBox.prototype.OnApplyTemplate = function () {
                _super.prototype.OnApplyTemplate.call(this);
                this.UpdateVisualState(false);
                this.$ContentPresenter = this._GetChildOfType("ContentPresenter", Controls.ContentPresenter);
                this.$Popup = this._GetChildOfType("Popup", Controls.Primitives.Popup);
                this.$DropDownToggle = this._GetChildOfType("DropDownToggle", Controls.Primitives.ToggleButton);
                if (this.$ContentPresenter != null)
                    this._NullSelFallback = this.$ContentPresenter.Content;
                if (this.$Popup != null) {
                    this._UpdatePopupMaxHeight(this.MaxDropDownHeight);
                    this.$Popup.WatchOutsideClick(this._PopupClickedOutside, this);
                    var child = this.$Popup.Child;
                    if (child != null) {
                        child.KeyDown.on(this._OnChildKeyDown, this);
                        child.SizeChanged.on(this._UpdatePopupSizeAndPosition, this);
                    }
                }
                if (this.$DropDownToggle != null) {
                    this.$DropDownToggle.Checked.on(this._OnToggleChecked, this);
                    this.$DropDownToggle.Unchecked.on(this._OnToggleUnchecked, this);
                }
                this.UpdateVisualState(false);
                this._UpdateDisplayedItem(this.SelectedItem);
            };
            ComboBox.prototype.OnItemContainerStyleChanged = function (args) {
                var newStyle = args.NewValue;
                var enumerator = this.ItemContainersManager.GetEnumerator();
                while (enumerator.moveNext()) {
                    var container = enumerator.current;
                    if (container && container !== enumerator.CurrentItem)
                        container.Style = newStyle;
                }
            };
            ComboBox.prototype.IsItemItsOwnContainer = function (item) {
                return item instanceof Controls.ComboBoxItem;
            };
            ComboBox.prototype.GetContainerForItem = function () {
                return new Controls.ComboBoxItem();
            };
            ComboBox.prototype.PrepareContainerForItem = function (container, item) {
                _super.prototype.PrepareContainerForItem.call(this, container, item);
                var cbi = container;
                if (cbi !== item) {
                    var ics = this.ItemContainerStyle;
                    if (!cbi.Style && ics)
                        cbi.Style = ics;
                }
            };
            ComboBox.prototype.GoToStateFocus = function (gotoFunc) {
                var isEnabled = this.IsEnabled;
                if (this.IsDropDownOpen && isEnabled)
                    return gotoFunc("FocusedDropDown");
                else if (this.IsFocused && isEnabled)
                    return gotoFunc("Focused");
                return gotoFunc("Unfocused");
            };
            ComboBox.prototype.OnIsEnabledChanged = function (e) {
                _super.prototype.OnIsEnabledChanged.call(this, e);
                if (!this.IsEnabled)
                    this.IsDropDownOpen = false;
            };
            ComboBox.prototype.OnMouseLeftButtonDown = function (e) {
                _super.prototype.OnMouseLeftButtonDown.call(this, e);
                if (!e.Handled) {
                    e.Handled = true;
                    this.SetValueInternal(ComboBox.IsSelectionActiveProperty, true);
                    this.IsDropDownOpen = !this.IsDropDownOpen;
                }
            };
            ComboBox.prototype.OnMouseEnter = function (e) {
                _super.prototype.OnMouseEnter.call(this, e);
                this.UpdateVisualState(true);
            };
            ComboBox.prototype.OnMouseLeave = function (e) {
                _super.prototype.OnMouseLeave.call(this, e);
                this.UpdateVisualState(true);
            };
            ComboBox.prototype.OnKeyDown = function (e) {
                _super.prototype.OnKeyDown.call(this, e);
                if (e.Handled)
                    return;
                e.Handled = true;
                var key = e.Key;
                if (this.FlowDirection === Fayde.FlowDirection.RightToLeft) {
                    if (key === Fayde.Input.Key.Left)
                        key = Fayde.Input.Key.Right;
                    else if (key === Fayde.Input.Key.Right)
                        key = Fayde.Input.Key.Left;
                }
                switch (key) {
                    case Fayde.Input.Key.Escape:
                        this.IsDropDownOpen = false;
                        break;
                    case Fayde.Input.Key.Enter:
                    case Fayde.Input.Key.Space:
                        if (this.IsDropDownOpen && this._FocusedIndex !== this.SelectedIndex) {
                            this.SelectedIndex = this._FocusedIndex;
                            this.IsDropDownOpen = false;
                        }
                        else {
                            this.IsDropDownOpen = true;
                        }
                        break;
                    case Fayde.Input.Key.Right:
                    case Fayde.Input.Key.Down:
                        if (this.IsDropDownOpen) {
                            if (this._FocusedIndex < (this.Items.Count - 1)) {
                                this._FocusedIndex++;
                                this.ItemContainersManager.ContainerFromIndex(this._FocusedIndex).Focus();
                            }
                        }
                        else {
                            this.SelectedIndex = Math.min(this.SelectedIndex + 1, this.Items.Count - 1);
                        }
                        break;
                    case Fayde.Input.Key.Left:
                    case Fayde.Input.Key.Up:
                        if (this.IsDropDownOpen) {
                            if (this._FocusedIndex > 0) {
                                this._FocusedIndex--;
                                this.ItemContainersManager.ContainerFromIndex(this._FocusedIndex).Focus();
                            }
                        }
                        else {
                            this.SelectedIndex = Math.max(this.SelectedIndex - 1, 0);
                        }
                        break;
                    default:
                        e.Handled = false;
                        break;
                }
            };
            ComboBox.prototype.OnGotFocus = function (e) {
                _super.prototype.OnGotFocus.call(this, e);
                this.UpdateVisualState(true);
            };
            ComboBox.prototype.OnLostFocus = function (e) {
                _super.prototype.OnLostFocus.call(this, e);
                this.SetValueInternal(ComboBox.IsSelectionActiveProperty, this.$Popup == null ? false : this.$Popup.IsOpen);
                this.UpdateVisualState(true);
            };
            ComboBox.prototype._OnChildKeyDown = function (sender, e) {
                this.OnKeyDown(e);
            };
            ComboBox.prototype.OnSelectionChanged = function (e) {
                if (!this.IsDropDownOpen)
                    this._UpdateDisplayedItem(this.SelectedItem);
            };
            ComboBox.prototype._OnToggleChecked = function (sender, e) { this.IsDropDownOpen = true; };
            ComboBox.prototype._OnToggleUnchecked = function (sender, e) { this.IsDropDownOpen = false; };
            ComboBox.prototype._PopupClickedOutside = function () {
                this.IsDropDownOpen = false;
            };
            ComboBox.prototype._UpdateDisplayedItem = function (selectedItem) {
                if (!this.$ContentPresenter)
                    return;
                if (this.$DisplayedItem != null) {
                    this.$DisplayedItem.Content = this.$ContentPresenter.Content;
                    this.$DisplayedItem = null;
                }
                this.$ContentPresenter.Content = null;
                if (selectedItem == null) {
                    this.$ContentPresenter.Content = this._NullSelFallback;
                    this.$ContentPresenter.ContentTemplate = null;
                    this.$SelectionBoxItem = null;
                    this.$SelectionBoxItemTemplate = null;
                    return;
                }
                var content = selectedItem;
                if (content instanceof Controls.ComboBoxItem)
                    content = content.Content;
                var icm = this.ItemContainersManager;
                var selectedIndex = this.SelectedIndex;
                var temp = icm.ContainerFromIndex(selectedIndex);
                if (temp instanceof Controls.ComboBoxItem)
                    this.$DisplayedItem = temp;
                this.$SelectionBoxItem = content;
                this.$SelectionBoxItemTemplate = this.ItemTemplate;
                if (this.$DisplayedItem != null) {
                    this.$SelectionBoxItemTemplate = this.$DisplayedItem.ContentTemplate;
                    if (content instanceof Fayde.UIElement)
                        this.$DisplayedItem.Content = null;
                    else
                        this.$DisplayedItem = null;
                }
                else {
                    temp = icm.ContainerFromIndex(selectedIndex);
                    var container;
                    if (temp instanceof Controls.ComboBoxItem)
                        container = temp;
                    if (!container) {
                        var generator = icm.CreateGenerator(selectedIndex, 1);
                        if (generator.Generate() && generator.Current instanceof Controls.ComboBoxItem) {
                            container = generator.Current;
                            this.PrepareContainerForItem(container, generator.CurrentItem);
                        }
                    }
                    if (container)
                        this.$SelectionBoxItemTemplate = container.ContentTemplate;
                }
                this.$ContentPresenter.Content = this.$SelectionBoxItem;
                this.$ContentPresenter.ContentTemplate = this.$SelectionBoxItemTemplate;
            };
            ComboBox.prototype._UpdatePopupSizeAndPosition = function (sender, e) {
                var popup = this.$Popup;
                if (!popup)
                    return;
                var child = popup.Child;
                if (!(child instanceof Fayde.FrameworkElement))
                    return;
                child.MinWidth = this.ActualWidth;
                var root = Fayde.VisualTreeHelper.GetRoot(this);
                if (!root)
                    return;
                try {
                    var xform = this.TransformToVisual(null);
                }
                catch (err) {
                    return;
                }
                var offset = new Point(0, this.ActualHeight);
                var bottomRight = new Point(offset.x + child.ActualWidth, offset.y + child.ActualHeight);
                var topLeft = xform.Transform(offset);
                bottomRight = xform.Transform(bottomRight);
                var isRightToLeft = (this.FlowDirection === Fayde.FlowDirection.RightToLeft);
                if (isRightToLeft) {
                    var left = bottomRight.x;
                    bottomRight.x = topLeft.x;
                    topLeft.x = left;
                }
                var finalOffset = new Point();
                var raw = root.ActualWidth;
                if (bottomRight.x > raw) {
                    finalOffset.x = raw - bottomRight.x;
                }
                else if (topLeft.x < 0) {
                    finalOffset.x = offset.x - topLeft.x;
                }
                else {
                    finalOffset.x = offset.x;
                }
                if (isRightToLeft)
                    finalOffset.x = -finalOffset.x;
                var rah = root.ActualHeight;
                if (bottomRight.y > rah) {
                    finalOffset.y = -child.ActualHeight;
                }
                else {
                    finalOffset.y = this.RenderSize.height;
                }
                popup.HorizontalOffset = finalOffset.x;
                popup.VerticalOffset = finalOffset.y;
                this._UpdatePopupMaxHeight(this.MaxDropDownHeight);
            };
            ComboBox.prototype._UpdatePopupMaxHeight = function (height) {
                var child;
                if (this.$Popup && (child = this.$Popup.Child) && child instanceof Fayde.FrameworkElement) {
                    if (height === Number.POSITIVE_INFINITY) {
                        var surface = this.XamlNode.LayoutUpdater.tree.surface;
                        if (surface)
                            height = surface.height / 2.0;
                    }
                    child.MaxHeight = height;
                }
            };
            ComboBox.IsDropDownOpenProperty = DependencyProperty.Register("IsDropDownOpen", function () { return Boolean; }, ComboBox, false, function (d, args) { return d._IsDropDownOpenChanged(args); });
            ComboBox.ItemContainerStyleProperty = DependencyProperty.Register("ItemContainerStyle", function () { return Fayde.Style; }, ComboBox, undefined, function (d, args) { return d.OnItemContainerStyleChanged(args); });
            ComboBox.MaxDropDownHeightProperty = DependencyProperty.Register("MaxDropDownHeight", function () { return Number; }, ComboBox, Number.POSITIVE_INFINITY, function (d, args) { return d._MaxDropDownHeightChanged(args); });
            ComboBox.IsSelectionActiveProperty = Controls.Primitives.Selector.IsSelectionActiveProperty;
            return ComboBox;
        })(Controls.Primitives.Selector);
        Controls.ComboBox = ComboBox;
        Fayde.CoreLibrary.add(ComboBox);
        Controls.TemplateParts(ComboBox, { Name: "ContentPresenter", Type: Controls.ContentPresenter }, { Name: "Popup", Type: Controls.Primitives.Popup }, { Name: "ContentPresenterBorder", Type: Fayde.FrameworkElement }, { Name: "DropDownToggle", Type: Controls.Primitives.ToggleButton }, { Name: "ScrollViewer", Type: Controls.ScrollViewer });
        Controls.TemplateVisualStates(ComboBox, { GroupName: "CommonStates", Name: "Normal" }, { GroupName: "CommonStates", Name: "MouseOver" }, { GroupName: "CommonStates", Name: "Disabled" }, { GroupName: "FocusStates", Name: "Unfocused" }, { GroupName: "FocusStates", Name: "Focused" }, { GroupName: "FocusStates", Name: "FocusedDropDown" }, { GroupName: "ValidationStates", Name: "Valid" }, { GroupName: "ValidationStates", Name: "InvalidUnfocused" }, { GroupName: "ValidationStates", Name: "InvalidFocused" });
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
/// <reference path="ContentControl.ts" />
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        var ListBoxItem = (function (_super) {
            __extends(ListBoxItem, _super);
            function ListBoxItem() {
                _super.call(this);
                this.ParentSelectorChanged = new nullstone.Event();
                this.DefaultStyleKey = ListBoxItem;
            }
            Object.defineProperty(ListBoxItem.prototype, "ParentSelector", {
                get: function () { return this._ParentSelector; },
                set: function (value) {
                    if (this._ParentSelector === value)
                        return;
                    this._ParentSelector = value;
                    this.ParentSelectorChanged.raise(this, null);
                },
                enumerable: true,
                configurable: true
            });
            ListBoxItem.prototype.OnApplyTemplate = function () {
                _super.prototype.OnApplyTemplate.call(this);
                this.UpdateVisualState(false);
            };
            ListBoxItem.prototype.OnMouseLeftButtonDown = function (e) {
                if (e.Handled)
                    return;
                e.Handled = true;
                if (!this.XamlNode.Focus(true))
                    return;
                if (this._ParentSelector != null)
                    this._ParentSelector.NotifyListItemClicked(this);
            };
            ListBoxItem.prototype.OnMouseEnter = function (e) {
                _super.prototype.OnMouseEnter.call(this, e);
                this.UpdateVisualState();
            };
            ListBoxItem.prototype.OnMouseLeave = function (e) {
                _super.prototype.OnMouseLeave.call(this, e);
                this.UpdateVisualState();
            };
            ListBoxItem.prototype.OnGotFocus = function (e) {
                _super.prototype.OnGotFocus.call(this, e);
                this.UpdateVisualState();
                if (this._ParentSelector != null) {
                    this._ParentSelector.NotifyListItemGotFocus(this);
                }
            };
            ListBoxItem.prototype.OnLostFocus = function (e) {
                _super.prototype.OnLostFocus.call(this, e);
                this.UpdateVisualState();
                if (this._ParentSelector != null) {
                    this._ParentSelector.NotifyListItemLostFocus(this);
                }
            };
            ListBoxItem.prototype.GoToStateSelection = function (gotoFunc) {
                if (!this.IsSelected)
                    return gotoFunc("Unselected");
                if (gotoFunc("SelectedUnfocused"))
                    return true;
                return gotoFunc("Selected");
            };
            ListBoxItem.prototype.OnIsSelectedChanged = function (args) {
                this.UpdateVisualState();
            };
            ListBoxItem.IsSelectedProperty = DependencyProperty.RegisterCore("IsSelected", function () { return Boolean; }, ListBoxItem, null, function (d, args) { return d.OnIsSelectedChanged(args); });
            return ListBoxItem;
        })(Controls.ContentControl);
        Controls.ListBoxItem = ListBoxItem;
        Fayde.CoreLibrary.add(ListBoxItem);
        Controls.TemplateVisualStates(ListBoxItem, { GroupName: "CommonStates", Name: "Normal" }, { GroupName: "CommonStates", Name: "MouseOver" }, { GroupName: "CommonStates", Name: "Disabled" }, { GroupName: "FocusStates", Name: "Unfocused" }, { GroupName: "FocusStates", Name: "Focused" }, { GroupName: "SelectionStates", Name: "Unselected" }, { GroupName: "SelectionStates", Name: "Selected" }, { GroupName: "SelectionStates", Name: "SelectedUnfocused" });
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
/// <reference path="ListBoxItem.ts" />
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        var ComboBoxItem = (function (_super) {
            __extends(ComboBoxItem, _super);
            function ComboBoxItem() {
                _super.call(this);
                this.DefaultStyleKey = ComboBoxItem;
            }
            ComboBoxItem.prototype.OnMouseLeftButtonUp = function (e) {
                _super.prototype.OnMouseLeftButtonUp.call(this, e);
                if (this.ParentSelector instanceof Controls.ComboBox)
                    this.ParentSelector.IsDropDownOpen = false;
            };
            return ComboBoxItem;
        })(Controls.ListBoxItem);
        Controls.ComboBoxItem = ComboBoxItem;
        Fayde.CoreLibrary.add(ComboBoxItem);
        Controls.TemplateVisualStates(ComboBoxItem, { GroupName: "CommonStates", Name: "Normal" }, { GroupName: "CommonStates", Name: "MouseOver" }, { GroupName: "FocusStates", Name: "Unfocused" }, { GroupName: "FocusStates", Name: "Focused" }, { GroupName: "SelectionStates", Name: "Unselected" }, { GroupName: "SelectionStates", Name: "Selected" }, { GroupName: "SelectionStates", Name: "SelectedUnfocused" });
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Markup;
    (function (Markup) {
        var FrameworkTemplate = (function (_super) {
            __extends(FrameworkTemplate, _super);
            function FrameworkTemplate() {
                _super.apply(this, arguments);
            }
            FrameworkTemplate.prototype.Validate = function () {
                return "";
            };
            FrameworkTemplate.prototype.GetVisualTree = function (bindingSource) {
                var uie = LoadImpl(this.App, this.$$markup, this.$$resources, bindingSource);
                if (!(uie instanceof Fayde.UIElement))
                    throw new XamlParseException("Template root visual is not a UIElement.");
                return uie;
            };
            return FrameworkTemplate;
        })(Fayde.DependencyObject);
        Markup.FrameworkTemplate = FrameworkTemplate;
        function setTemplateRoot(ft, root) {
            if (root instanceof Element)
                ft.$$markup = Markup.CreateXaml(root);
        }
        function setResources(ft, res) {
            ft.$$resources = res;
        }
        function LoadXaml(app, xaml) {
            var markup = Markup.CreateXaml(xaml);
            return Load(app, markup);
        }
        Markup.LoadXaml = LoadXaml;
        function Load(app, xm) {
            return LoadImpl(app, xm);
        }
        Markup.Load = Load;
        function LoadImpl(app, xm, resources, bindingSource) {
            perfex.timer.start('MarkupLoad', xm.uri.toString());
            var oresolve = {
                isPrimitive: false,
                type: undefined
            };
            var namescope = new Fayde.NameScope(true);
            var active = Markup.Internal.createActiveObject(app, namescope, bindingSource);
            var pactor = Markup.Internal.createPropertyActor(active, extractType, extractDP);
            var oactor = Markup.Internal.createObjectActor(pactor);
            var ractor = Markup.Internal.createResourcesActor(active, resources);
            var last;
            var parser = xm.createParser()
                .setNamespaces(Fayde.XMLNS, Fayde.XMLNSX);
            var parse = {
                resolveType: function (uri, name) {
                    if (!Fayde.TypeManager.resolveType(uri, name, oresolve))
                        throw new XamlParseException("Could not resolve type [" + uri + "][" + name + "].");
                    return oresolve;
                },
                resolveObject: function (type) {
                    if (type === Fayde.ResourceDictionary && !pactor.isNewResources())
                        return undefined;
                    perfex.timer.start('MarkupCreateObject', type);
                    var obj = new (type)();
                    if (obj instanceof FrameworkTemplate)
                        parser.skipBranch();
                    else if (obj instanceof Markup.StaticResource)
                        obj.setContext(active.getApp(), resources);
                    perfex.timer.stop();
                    return obj;
                },
                resolvePrimitive: function (type, text) {
                    return nullstone.convertAnyToType(text, type);
                },
                resolveResources: function (owner, ownerType) {
                    var rd = owner.Resources;
                    return rd;
                },
                branchSkip: function (root, obj) {
                    if (obj instanceof FrameworkTemplate) {
                        var ft = last = obj;
                        var err = obj.Validate();
                        if (err)
                            throw new XamlParseException(err);
                        setTemplateRoot(ft, root);
                        setResources(ft, ractor.get());
                    }
                },
                object: function (obj, isContent) {
                    active.set(obj);
                    oactor.start();
                    ractor.start();
                },
                objectEnd: function (obj, key, isContent, prev) {
                    last = obj;
                    ractor.end();
                    oactor.end();
                    active.set(prev);
                    if (!active.obj)
                        return;
                    if (isContent) {
                        pactor.startContent();
                        pactor.addObject(obj, key);
                        pactor.end();
                    }
                    else {
                        pactor.addObject(obj, key);
                    }
                },
                contentText: function (text) {
                    pactor.setContentText(text);
                },
                name: function (name) {
                    active.setName(name);
                },
                propertyStart: function (ownerType, propName) {
                    pactor.start(ownerType, propName);
                },
                propertyEnd: function (ownerType, propName) {
                    pactor.end();
                },
                attributeStart: function (ownerType, attrName) {
                },
                attributeEnd: function (ownerType, attrName, obj) {
                    pactor.setObject(ownerType, attrName, obj);
                },
                error: function (err) { return false; },
                end: function () {
                }
            };
            function extractType(text) {
                var prefix = null;
                var name = text;
                var ind = name.indexOf(':');
                if (ind > -1) {
                    prefix = name.substr(0, ind);
                    name = name.substr(ind + 1);
                }
                var uri = parser.resolvePrefix(prefix);
                Fayde.TypeManager.resolveType(uri, name, oresolve);
                return oresolve.type;
            }
            function extractDP(text) {
                var name = text;
                var ind = name.indexOf('.');
                var ownerType;
                if (ind > -1) {
                    ownerType = extractType(name.substr(0, ind));
                    name = name.substr(ind + 1);
                }
                else {
                    for (var en = parser.walkUpObjects(); en.moveNext();) {
                        var style = en.current;
                        if (style instanceof Fayde.Style) {
                            ownerType = style.TargetType;
                            if (!ownerType)
                                throw new XamlParseException("Style must have a TargetType.");
                            break;
                        }
                    }
                }
                return (ownerType)
                    ? DependencyProperty.GetDependencyProperty(ownerType, name)
                    : null;
            }
            parser.on(parse)
                .parse(xm.root);
            if (last instanceof Fayde.XamlObject) {
                last.XamlNode.NameScope = namescope;
            }
            perfex.timer.stop();
            return last;
        }
    })(Markup = Fayde.Markup || (Fayde.Markup = {}));
})(Fayde || (Fayde = {}));
/// <reference path="../Markup/Loader" />
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        var ControlTemplate = (function (_super) {
            __extends(ControlTemplate, _super);
            function ControlTemplate() {
                _super.apply(this, arguments);
            }
            ControlTemplate.prototype.Validate = function () {
                if (!this.TargetType)
                    return "ControlTemplate must have a TargetType.";
            };
            ControlTemplate.TargetTypeProperty = DependencyProperty.Register("TargetType", function () { return Fayde.IType_; }, ControlTemplate);
            return ControlTemplate;
        })(Fayde.Markup.FrameworkTemplate);
        Controls.ControlTemplate = ControlTemplate;
        Fayde.CoreLibrary.add(ControlTemplate);
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
/// <reference path="ContentControl" />
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        function clickResultPropertyChanged(dobj, args) {
            var btn = (dobj instanceof Controls.Primitives.ButtonBase) ? dobj : null;
            if (!btn)
                return;
            if (args.OldValue !== undefined)
                btn.Click.off(buttonClicked, btn);
            if (args.NewValue !== undefined)
                btn.Click.on(buttonClicked, btn);
        }
        function buttonClicked(sender, args) {
            var dialog = Fayde.VisualTreeHelper.GetParentOfType(sender, Dialog);
            if (dialog)
                dialog.DialogResult = Dialog.GetClickResult(sender);
        }
        var Dialog = (function (_super) {
            __extends(Dialog, _super);
            function Dialog() {
                _super.call(this);
                this._IgnoreResult = false;
                this.DefaultStyleKey = Dialog;
            }
            Dialog.prototype.OnDialogResultChanged = function (args) {
                if (this._IgnoreResult === true)
                    return;
                var overlay = Controls.Primitives.Overlay.FindOverlay(this);
                if (overlay) {
                    overlay.Close(args.NewValue);
                    this._IgnoreResult = true;
                    try {
                        this.SetCurrentValue(Dialog.DialogResultProperty, undefined);
                    }
                    finally {
                        this._IgnoreResult = false;
                    }
                }
            };
            Dialog.GetClickResult = function (dobj) {
                return dobj.GetValue(Dialog.ClickResultProperty);
            };
            Dialog.SetClickResult = function (dobj, value) {
                dobj.SetValue(Dialog.ClickResultProperty, value);
            };
            Dialog.DialogResultProperty = DependencyProperty.Register("DialogResult", function () { return Boolean; }, Dialog, undefined, function (d, args) { return d.OnDialogResultChanged(args); });
            Dialog.ClickResultProperty = DependencyProperty.RegisterAttached("ClickResult", function () { return Boolean; }, Dialog, undefined, clickResultPropertyChanged);
            return Dialog;
        })(Controls.ContentControl);
        Controls.Dialog = Dialog;
        Fayde.CoreLibrary.add(Dialog);
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
/// <reference path="Control.ts" />
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        var UserControl = (function (_super) {
            __extends(UserControl, _super);
            function UserControl() {
                _super.call(this);
                this.DefaultStyleKey = UserControl;
            }
            UserControl.prototype.CreateLayoutUpdater = function () {
                return new minerva.controls.usercontrol.UserControlUpdater();
            };
            UserControl.prototype.InitializeComponent = function () {
                this.ApplyTemplate();
            };
            UserControl.ContentProperty = DependencyProperty.Register("Content", function () { return Fayde.UIElement; }, UserControl);
            return UserControl;
        })(Controls.Control);
        Controls.UserControl = UserControl;
        Fayde.CoreLibrary.add(UserControl);
        Fayde.Markup.Content(UserControl, UserControl.ContentProperty);
        var reactions;
        (function (reactions) {
            Fayde.UIReaction(UserControl.ContentProperty, function (updater, ov, nv, uc) {
                var error = new BError();
                if (ov instanceof Fayde.UIElement)
                    uc.XamlNode.DetachVisualChild(ov, error);
                if (nv instanceof Fayde.UIElement)
                    uc.XamlNode.AttachVisualChild(nv, error);
                if (error.Message)
                    error.ThrowException();
                updater.updateBounds();
            }, false, false);
        })(reactions || (reactions = {}));
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
/// <reference path="UserControl.ts" />
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        var Page = (function (_super) {
            __extends(Page, _super);
            function Page() {
                _super.call(this);
                this.DefaultStyleKey = Page;
            }
            Page.GetAsync = function (initiator, url) {
                return nullstone.async.create(function (resolve, reject) {
                    Fayde.Markup.Resolve(url)
                        .then(function (xm) {
                        TimelineProfile.Parse(true, "Page");
                        var page = Fayde.Markup.Load(initiator.App, xm);
                        TimelineProfile.Parse(false, "Page");
                        if (!(page instanceof Controls.Page))
                            reject("Markup must be a Page.");
                        else
                            resolve(page);
                    }, reject);
                });
            };
            Page.TitleProperty = DependencyProperty.Register("Title", function () { return String; }, Page);
            return Page;
        })(Controls.UserControl);
        Controls.Page = Page;
        Fayde.CoreLibrary.add(Page);
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Navigation;
    (function (Navigation) {
        Navigation.INavigate_ = new nullstone.Interface("INavigate");
    })(Navigation = Fayde.Navigation || (Fayde.Navigation = {}));
})(Fayde || (Fayde = {}));
/// <reference path="ContentControl.ts" />
/// <reference path="Page.ts" />
/// <reference path="../Navigation/INavigate.ts" />
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        function createErrorDoc(error) {
            var safe = (error || '').toString()
                .replace(/&/g, '&amp;')
                .replace(/</g, '&lt;')
                .replace(/>/g, '&gt;')
                .replace(/"/g, '&quot;')
                .replace(/'/g, '&apos;');
            var xaml = '<Page xmlns="' + Fayde.XMLNS + '" xmlns:x="' + Fayde.XMLNSX + '" Title="Error">';
            xaml += '<TextBlock Text="' + safe + '" />';
            xaml += '</Page>';
            return Fayde.Markup.CreateXaml(xaml, Fayde.XMLNS + "/frame/error");
        }
        function getErrorPage(app, error) {
            return Fayde.Markup.Load(app, createErrorDoc(error));
        }
        var Frame = (function (_super) {
            __extends(Frame, _super);
            function Frame() {
                _super.call(this);
                this._NavService = new Fayde.Navigation.NavigationService();
                this._CurrentRoute = undefined;
                this.DefaultStyleKey = Frame;
                this.Loaded.on(this._FrameLoaded, this);
            }
            Frame.prototype.OnIsLoadingChanged = function (oldIsLoading, newIsLoading) {
                this.UpdateVisualState();
            };
            Frame.prototype.GoToStates = function (gotoFunc) {
                this.GoToStateLoading(gotoFunc);
            };
            Frame.prototype.GoToStateLoading = function (gotoFunc) {
                return gotoFunc(this.IsLoading ? "Loading" : "Idle");
            };
            Frame.prototype.Navigate = function (uri) {
                return this._NavService.Navigate(uri);
            };
            Frame.prototype.GoForward = function () {
            };
            Frame.prototype.GoBackward = function () {
            };
            Frame.prototype.StopLoading = function () {
            };
            Frame.prototype._FrameLoaded = function (sender, e) {
                if (this.IsDeepLinked) {
                    this._NavService.LocationChanged.on(this._HandleDeepLink, this);
                    this._HandleDeepLink();
                }
            };
            Frame.prototype._HandleDeepLink = function () {
                this._LoadContent(this._NavService.CurrentUri);
            };
            Frame.prototype._LoadContent = function (source) {
                var _this = this;
                this.SetCurrentValue(Frame.CurrentSourceProperty, source);
                this.StopLoading();
                this.SetCurrentValue(Frame.IsLoadingProperty, true);
                var fragment = source.fragment;
                if (fragment[0] === "#")
                    fragment = fragment.substr(1);
                TimelineProfile.Navigate(true, fragment);
                var targetUri = new Fayde.Uri(fragment, nullstone.UriKind.Relative);
                var target = undefined;
                if (this.RouteMapper) {
                    this._CurrentRoute = this.RouteMapper.MapUri(targetUri);
                    if (!this._CurrentRoute)
                        throw new InvalidOperationException("Route could not be mapped." + targetUri.toString());
                    target = this._CurrentRoute.View.toString();
                }
                else if (this.UriMapper) {
                    var mapped = this.UriMapper.MapUri(targetUri);
                    if (!mapped)
                        throw new InvalidOperationException("Uri could not be mapped." + targetUri.toString());
                    target = mapped.toString();
                }
                Controls.Page.GetAsync(this, target)
                    .then(function (page) { return _this._HandleSuccess(page); }, function (err) { return _this._HandleError(err); });
            };
            Frame.prototype._HandleSuccess = function (page) {
                this._SetPage(page);
                this.SetCurrentValue(Frame.IsLoadingProperty, false);
                TimelineProfile.Navigate(false);
                TimelineProfile.IsNextLayoutPassProfiled = true;
            };
            Frame.prototype._HandleError = function (error) {
                this._SetPage(getErrorPage(this.App, error));
                this.SetCurrentValue(Frame.IsLoadingProperty, false);
                TimelineProfile.Navigate(false);
            };
            Frame.prototype._SetPage = function (page) {
                document.title = page.Title;
                this.Content = page;
                if (this._CurrentRoute)
                    page.DataContext = this._CurrentRoute.DataContext;
                if (page.DataContext == null)
                    page.DataContext = this.DataContext;
            };
            Frame.prototype.SourcePropertyChanged = function (args) {
                if (true)
                    this.Navigate(args.NewValue);
            };
            Frame.IsDeepLinkedProperty = DependencyProperty.Register("IsDeepLinked", function () { return Boolean; }, Frame, true);
            Frame.CurrentSourceProperty = DependencyProperty.RegisterReadOnly("CurrentSource", function () { return Fayde.Uri; }, Frame);
            Frame.SourceProperty = DependencyProperty.Register("Source", function () { return Fayde.Uri; }, Frame, undefined, function (d, args) { return d.SourcePropertyChanged(args); });
            Frame.UriMapperProperty = DependencyProperty.Register("UriMapper", function () { return Fayde.Navigation.UriMapper; }, Frame);
            Frame.RouteMapperProperty = DependencyProperty.Register("RouteMapper", function () { return Fayde.Navigation.RouteMapper; }, Frame);
            Frame.IsLoadingProperty = DependencyProperty.RegisterReadOnly("IsLoading", function () { return Boolean; }, Frame, false, function (d, args) { return d.OnIsLoadingChanged(args.OldValue, args.NewValue); });
            return Frame;
        })(Controls.ContentControl);
        Controls.Frame = Frame;
        Fayde.CoreLibrary.add(Frame);
        nullstone.addTypeInterfaces(Frame, Fayde.Navigation.INavigate_);
        Controls.TemplateVisualStates(Frame, { GroupName: "LoadingStates", Name: "Idle" }, { GroupName: "LoadingStates", Name: "Loading" });
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
/// <reference path="Panel.ts" />
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        var GridNode = (function (_super) {
            __extends(GridNode, _super);
            function GridNode() {
                _super.apply(this, arguments);
            }
            GridNode.prototype.ColumnDefinitionsChanged = function (coldef, index, add) {
                var updater = this.LayoutUpdater;
                var coldefs = updater.assets.columnDefinitions;
                if (add) {
                    coldefs.splice(index, 0, coldef);
                    Fayde.ReactTo(coldef, this, function () { return updater.invalidateMeasure(); });
                }
                else {
                    Fayde.UnreactTo(coldef, this);
                    coldefs.splice(index, 1);
                }
                updater.invalidateMeasure();
            };
            GridNode.prototype.RowDefinitionsChanged = function (rowdef, index, add) {
                var updater = this.LayoutUpdater;
                var rowdefs = updater.assets.rowDefinitions;
                if (add) {
                    rowdefs.splice(index, 0, rowdef);
                    Fayde.ReactTo(rowdef, this, function () { return updater.invalidateMeasure(); });
                }
                else {
                    Fayde.UnreactTo(rowdef, this);
                    rowdefs.splice(index, 1);
                }
                updater.invalidateMeasure();
            };
            return GridNode;
        })(Controls.PanelNode);
        Controls.GridNode = GridNode;
        var Grid = (function (_super) {
            __extends(Grid, _super);
            function Grid() {
                var _this = this;
                _super.call(this);
                var coldefs = Grid.ColumnDefinitionsProperty.Initialize(this);
                Fayde.ReactTo(coldefs, this, function (obj) { return _this.XamlNode.ColumnDefinitionsChanged(obj.item, obj.index, obj.add); });
                var rowdefs = Grid.RowDefinitionsProperty.Initialize(this);
                Fayde.ReactTo(rowdefs, this, function (obj) { return _this.XamlNode.RowDefinitionsChanged(obj.item, obj.index, obj.add); });
            }
            Grid.prototype.CreateNode = function () { return new GridNode(this); };
            Grid.prototype.CreateLayoutUpdater = function () { return new minerva.controls.grid.GridUpdater(); };
            Grid.GetColumn = function (d) { return d.GetValue(Grid.ColumnProperty); };
            Grid.SetColumn = function (d, value) { d.SetValue(Grid.ColumnProperty, value); };
            Grid.GetColumnSpan = function (d) { return d.GetValue(Grid.ColumnSpanProperty); };
            Grid.SetColumnSpan = function (d, value) { d.SetValue(Grid.ColumnSpanProperty, value); };
            Grid.GetRow = function (d) { return d.GetValue(Grid.RowProperty); };
            Grid.SetRow = function (d, value) { d.SetValue(Grid.RowProperty, value); };
            Grid.GetRowSpan = function (d) { return d.GetValue(Grid.RowSpanProperty); };
            Grid.SetRowSpan = function (d, value) { d.SetValue(Grid.RowSpanProperty, value); };
            Grid.ColumnProperty = DependencyProperty.RegisterAttached("Column", function () { return Number; }, Grid, 0);
            Grid.ColumnSpanProperty = DependencyProperty.RegisterAttached("ColumnSpan", function () { return Number; }, Grid, 1);
            Grid.RowProperty = DependencyProperty.RegisterAttached("Row", function () { return Number; }, Grid, 0);
            Grid.RowSpanProperty = DependencyProperty.RegisterAttached("RowSpan", function () { return Number; }, Grid, 1);
            Grid.ColumnDefinitionsProperty = DependencyProperty.RegisterImmutable("ColumnDefinitions", function () { return Controls.ColumnDefinitionCollection; }, Grid);
            Grid.RowDefinitionsProperty = DependencyProperty.RegisterImmutable("RowDefinitions", function () { return Controls.RowDefinitionCollection; }, Grid);
            Grid.ShowGridLinesProperty = DependencyProperty.Register("ShowGridLines", function () { return Boolean; }, Grid, false);
            return Grid;
        })(Controls.Panel);
        Controls.Grid = Grid;
        Fayde.CoreLibrary.add(Grid);
        var reactions;
        (function (reactions) {
            Fayde.UIReaction(Grid.ShowGridLinesProperty, minerva.controls.grid.reactTo.showGridLines, false);
            Fayde.UIReactionAttached(Grid.ColumnProperty, minerva.controls.grid.reactTo.column);
            Fayde.UIReactionAttached(Grid.ColumnSpanProperty, minerva.controls.grid.reactTo.columnSpan);
            Fayde.UIReactionAttached(Grid.RowProperty, minerva.controls.grid.reactTo.row);
            Fayde.UIReactionAttached(Grid.RowSpanProperty, minerva.controls.grid.reactTo.rowSpan);
        })(reactions || (reactions = {}));
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        var GridUnitType = minerva.controls.grid.GridUnitType;
        Fayde.CoreLibrary.addEnum(GridUnitType, "GridUnitType");
        var GridLength = (function () {
            function GridLength(value, unitType) {
                this.Value = value == null ? 0 : value;
                this.Type = unitType || GridUnitType.Auto;
            }
            GridLength.Equals = function (gl1, gl2) {
                return Math.abs(gl1.Value - gl2.Value) < 0.001 && gl1.Type == gl2.Type;
            };
            GridLength.prototype.Clone = function () {
                return new Controls.GridLength(this.Value, this.Type);
            };
            return GridLength;
        })();
        Controls.GridLength = GridLength;
        Fayde.CoreLibrary.add(GridLength);
        nullstone.registerTypeConverter(GridLength, function (val) {
            if (val instanceof GridLength)
                return val;
            if (!val || val.toLowerCase() === "auto")
                return new GridLength();
            var type = GridUnitType.Pixel;
            if (val[val.length - 1] === "*") {
                val = val.substr(0, val.length - 1);
                type = GridUnitType.Star;
            }
            var v = parseFloat(val);
            if (isNaN(v))
                v = 1;
            return new GridLength(v, type);
        });
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
/// <reference path="ContentControl.ts" />
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        var HeaderedContentControl = (function (_super) {
            __extends(HeaderedContentControl, _super);
            function HeaderedContentControl() {
                _super.call(this);
                this.DefaultStyleKey = HeaderedContentControl;
            }
            HeaderedContentControl.prototype.OnHeaderChanged = function (oldHeader, newHeader) { };
            HeaderedContentControl.prototype.OnHeaderTemplateChanged = function (oldHeaderTemplate, newHeaderTemplate) { };
            HeaderedContentControl.HeaderProperty = DependencyProperty.Register("Header", function () { return Object; }, HeaderedContentControl, undefined, function (d, args) { return d.OnHeaderChanged(args.OldValue, args.NewValue); });
            HeaderedContentControl.HeaderTemplateProperty = DependencyProperty.Register("HeaderTemplate", function () { return Fayde.DataTemplate; }, HeaderedContentControl, undefined, function (d, args) { return d.OnHeaderTemplateChanged(args.OldValue, args.NewValue); });
            return HeaderedContentControl;
        })(Controls.ContentControl);
        Controls.HeaderedContentControl = HeaderedContentControl;
        Fayde.CoreLibrary.add(HeaderedContentControl);
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
/// <reference path="Primitives/ButtonBase.ts" />
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        var HyperlinkButton = (function (_super) {
            __extends(HyperlinkButton, _super);
            function HyperlinkButton() {
                _super.call(this);
                this.DefaultStyleKey = HyperlinkButton;
            }
            HyperlinkButton.prototype.OnApplyTemplate = function () {
                _super.prototype.OnApplyTemplate.call(this);
                this.UpdateVisualState(false);
            };
            HyperlinkButton.prototype.OnClick = function () {
                _super.prototype.OnClick.call(this);
                var navUri = this.NavigateUri;
                if (navUri)
                    Fayde.Navigation.Navigate(this, this.TargetName, navUri);
            };
            HyperlinkButton.NavigateUriProperty = DependencyProperty.Register("NavigateUri", function () { return Fayde.Uri; }, HyperlinkButton);
            HyperlinkButton.TargetNameProperty = DependencyProperty.Register("TargetName", function () { return String; }, HyperlinkButton);
            return HyperlinkButton;
        })(Controls.Primitives.ButtonBase);
        Controls.HyperlinkButton = HyperlinkButton;
        Fayde.CoreLibrary.add(HyperlinkButton);
        Controls.TemplateVisualStates(HyperlinkButton, { GroupName: "CommonStates", Name: "Normal" }, { GroupName: "CommonStates", Name: "MouseOver" }, { GroupName: "CommonStates", Name: "Pressed" }, { GroupName: "CommonStates", Name: "Disabled" }, { GroupName: "FocusStates", Name: "Unfocused" }, { GroupName: "FocusStates", Name: "Focused" });
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        (function (BrushMappingMode) {
            BrushMappingMode[BrushMappingMode["Absolute"] = 0] = "Absolute";
            BrushMappingMode[BrushMappingMode["RelativeToBoundingBox"] = 1] = "RelativeToBoundingBox";
        })(Media.BrushMappingMode || (Media.BrushMappingMode = {}));
        var BrushMappingMode = Media.BrushMappingMode;
        Fayde.CoreLibrary.addEnum(BrushMappingMode, "BrushMappingMode");
        (function (GradientSpreadMethod) {
            GradientSpreadMethod[GradientSpreadMethod["Pad"] = 0] = "Pad";
            GradientSpreadMethod[GradientSpreadMethod["Reflect"] = 1] = "Reflect";
            GradientSpreadMethod[GradientSpreadMethod["Repeat"] = 2] = "Repeat";
        })(Media.GradientSpreadMethod || (Media.GradientSpreadMethod = {}));
        var GradientSpreadMethod = Media.GradientSpreadMethod;
        Fayde.CoreLibrary.addEnum(GradientSpreadMethod, "GradientSpreadMethod");
        (function (Stretch) {
            Stretch[Stretch["None"] = 0] = "None";
            Stretch[Stretch["Fill"] = 1] = "Fill";
            Stretch[Stretch["Uniform"] = 2] = "Uniform";
            Stretch[Stretch["UniformToFill"] = 3] = "UniformToFill";
        })(Media.Stretch || (Media.Stretch = {}));
        var Stretch = Media.Stretch;
        Fayde.CoreLibrary.addEnum(Stretch, "Stretch");
        (function (AlignmentX) {
            AlignmentX[AlignmentX["Left"] = 0] = "Left";
            AlignmentX[AlignmentX["Center"] = 1] = "Center";
            AlignmentX[AlignmentX["Right"] = 2] = "Right";
        })(Media.AlignmentX || (Media.AlignmentX = {}));
        var AlignmentX = Media.AlignmentX;
        Fayde.CoreLibrary.addEnum(AlignmentX, "AlignmentX");
        (function (AlignmentY) {
            AlignmentY[AlignmentY["Top"] = 0] = "Top";
            AlignmentY[AlignmentY["Center"] = 1] = "Center";
            AlignmentY[AlignmentY["Bottom"] = 2] = "Bottom";
        })(Media.AlignmentY || (Media.AlignmentY = {}));
        var AlignmentY = Media.AlignmentY;
        Fayde.CoreLibrary.addEnum(AlignmentY, "AlignmentY");
        (function (TextHintingMode) {
            TextHintingMode[TextHintingMode["Fixed"] = 0] = "Fixed";
            TextHintingMode[TextHintingMode["Animated"] = 1] = "Animated";
        })(Media.TextHintingMode || (Media.TextHintingMode = {}));
        var TextHintingMode = Media.TextHintingMode;
        Fayde.CoreLibrary.addEnum(TextHintingMode, "TextHintingMode");
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
/// <reference path="../Core/FrameworkElement.ts" />
/// <reference path="../Media/Enums.ts" />
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        var ImageUpdater = minerva.controls.image.ImageUpdater;
        var Image = (function (_super) {
            __extends(Image, _super);
            function Image() {
                _super.apply(this, arguments);
                this.ImageOpened = new nullstone.Event();
                this.ImageFailed = new nullstone.Event();
            }
            Image.prototype.CreateLayoutUpdater = function () {
                return new ImageUpdater();
            };
            Image._SourceCoercer = function (d, propd, value) {
                if (typeof value === "string")
                    return new Fayde.Media.Imaging.BitmapImage(new Fayde.Uri(value));
                if (value instanceof Fayde.Uri)
                    return new Fayde.Media.Imaging.BitmapImage(value);
                return value;
            };
            Image.prototype.OnImageErrored = function (source, e) {
                this.ImageFailed.raise(this, null);
            };
            Image.prototype.OnImageLoaded = function (source, e) {
                this.ImageOpened.raise(this, null);
                var lu = this.XamlNode.LayoutUpdater;
                lu.invalidateMeasure();
            };
            Image.prototype.ImageChanged = function (source) {
                var lu = this.XamlNode.LayoutUpdater;
                lu.invalidateMeasure();
                lu.invalidate();
            };
            Image.SourceProperty = DependencyProperty.RegisterFull("Source", function () { return Fayde.Media.Imaging.ImageSource; }, Image, undefined, undefined, Image._SourceCoercer);
            Image.StretchProperty = DependencyProperty.RegisterCore("Stretch", function () { return new Fayde.Enum(Fayde.Media.Stretch); }, Image, Fayde.Media.Stretch.Uniform);
            return Image;
        })(Fayde.FrameworkElement);
        Controls.Image = Image;
        Fayde.CoreLibrary.add(Image);
        Fayde.UIReaction(Image.SourceProperty, function (upd, ov, nv, image) {
            if (ov instanceof Fayde.Media.Imaging.BitmapSource)
                ov.Unlisten(image);
            if (nv instanceof Fayde.Media.Imaging.BitmapSource) {
                nv.Listen(image);
            }
            else {
                upd.updateBounds();
                upd.invalidate();
            }
            upd.invalidateMeasure();
            upd.invalidateMetrics();
        }, false);
        Fayde.UIReaction(Image.StretchProperty, function (upd, ov, nv) {
            upd.invalidateMeasure();
            upd.invalidateMetrics();
        }, false);
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
/// <reference path="../Core/DependencyObject.ts" />
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        var ItemCollection = (function (_super) {
            __extends(ItemCollection, _super);
            function ItemCollection() {
                _super.apply(this, arguments);
                this.ItemsChanged = new nullstone.Event();
                this.IsReadOnly = false;
            }
            ItemCollection.prototype.ToArray = function () {
                return this._ht.slice(0);
            };
            Object.defineProperty(ItemCollection.prototype, "Count", {
                get: function () {
                    return this._ht.length;
                },
                enumerable: true,
                configurable: true
            });
            ItemCollection.prototype.GetValueAt = function (index) {
                var ht = this._ht;
                if (index < 0 || index >= ht.length)
                    throw new IndexOutOfRangeException(index);
                return ht[index];
            };
            ItemCollection.prototype.GetRange = function (startIndex, endIndex) {
                return this._ht.slice(startIndex, endIndex + 1);
            };
            ItemCollection.prototype.SetValueAt = function (index, value) {
                this._ValidateReadOnly();
                this.SetValueAtImpl(index, value);
                return true;
            };
            ItemCollection.prototype.SetValueAtImpl = function (index, value) {
                var ht = this._ht;
                if (index < 0 || index >= ht.length)
                    throw new IndexOutOfRangeException(index);
                var oldValue = ht[index];
                ht[index] = value;
                this.ItemsChanged.raise(this, Fayde.Collections.CollectionChangedEventArgs.Replace(value, oldValue, index));
            };
            ItemCollection.prototype.Add = function (value) {
                this._ValidateReadOnly();
                if (value == null)
                    throw new ArgumentException("value");
                return this.AddImpl(value);
            };
            ItemCollection.prototype.AddImpl = function (value) {
                var index = this._ht.push(value) - 1;
                this.ItemsChanged.raise(this, Fayde.Collections.CollectionChangedEventArgs.Add(value, index));
                return index;
            };
            ItemCollection.prototype.AddRange = function (values) {
                this._ValidateReadOnly();
                if (!values)
                    return;
                for (var i = 0; i < values.length; i++) {
                    if (values[i] == null)
                        throw new ArgumentException("value");
                }
                this.AddRangeImpl(values);
            };
            ItemCollection.prototype.AddRangeImpl = function (values) {
                var index = this._ht.length;
                this._ht = this._ht.concat(values);
                this.ItemsChanged.raise(this, Fayde.Collections.CollectionChangedEventArgs.AddRange(values, index));
            };
            ItemCollection.prototype.Insert = function (index, value) {
                this._ValidateReadOnly();
                if (value == null)
                    throw new ArgumentException("value");
                this.InsertImpl(index, value);
                return true;
            };
            ItemCollection.prototype.InsertImpl = function (index, value) {
                var ht = this._ht;
                if (index < 0 || index > ht.length)
                    throw new IndexOutOfRangeException(index);
                if (index >= ht.length)
                    ht.push(value);
                else
                    ht.splice(index, 0, value);
                this.ItemsChanged.raise(this, Fayde.Collections.CollectionChangedEventArgs.Add(value, index));
            };
            ItemCollection.prototype.IndexOf = function (value) {
                return this._ht.indexOf(value);
            };
            ItemCollection.prototype.Contains = function (value) {
                return this._ht.indexOf(value) > -1;
            };
            ItemCollection.prototype.Remove = function (value) {
                this._ValidateReadOnly();
                this.RemoveImpl(value);
                return true;
            };
            ItemCollection.prototype.RemoveImpl = function (value) {
                var index = this._ht.indexOf(value);
                if (index < 0)
                    return;
                this._ht.splice(index, 1);
                this.ItemsChanged.raise(this, Fayde.Collections.CollectionChangedEventArgs.Remove(value, index));
            };
            ItemCollection.prototype.RemoveAt = function (index) {
                this._ValidateReadOnly();
                if (index < 0 || index >= this._ht.length)
                    throw new IndexOutOfRangeException(index);
                this.RemoveAtImpl(index);
                return true;
            };
            ItemCollection.prototype.RemoveAtImpl = function (index) {
                var item = this._ht.splice(index, 1)[0];
                this.ItemsChanged.raise(this, Fayde.Collections.CollectionChangedEventArgs.Remove(item, index));
            };
            ItemCollection.prototype.Clear = function () {
                this._ValidateReadOnly();
                this.ClearImpl();
                return true;
            };
            ItemCollection.prototype.ClearImpl = function () {
                var old = this._ht;
                this._ht = [];
                this.ItemsChanged.raise(this, Fayde.Collections.CollectionChangedEventArgs.Reset(old));
            };
            ItemCollection.prototype._ValidateReadOnly = function () {
                if (this.IsReadOnly)
                    throw new InvalidOperationException("The collection is readonly.");
            };
            return ItemCollection;
        })(Fayde.XamlObjectCollection);
        Controls.ItemCollection = ItemCollection;
        Fayde.CoreLibrary.add(ItemCollection);
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
/// <reference path="../Markup/Loader" />
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        var ItemsPanelTemplate = (function (_super) {
            __extends(ItemsPanelTemplate, _super);
            function ItemsPanelTemplate() {
                _super.apply(this, arguments);
            }
            ItemsPanelTemplate.prototype.GetVisualTree = function (bindingSource) {
                var panel = _super.prototype.GetVisualTree.call(this, bindingSource);
                if (!(panel instanceof Controls.Panel))
                    throw new XamlParseException("The root element of an ItemsPanelTemplate must be a Panel subclass.");
                return panel;
            };
            return ItemsPanelTemplate;
        })(Fayde.Markup.FrameworkTemplate);
        Controls.ItemsPanelTemplate = ItemsPanelTemplate;
        Fayde.CoreLibrary.add(ItemsPanelTemplate);
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
/// <reference path="../Core/FrameworkElement.ts" />
/// <reference path="../Markup/Creator.ts" />
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        var spxd = Fayde.Markup.CreateXaml("<ItemsPanelTemplate xmlns=\"" + Fayde.XMLNS + "\"><StackPanel /></ItemsPanelTemplate>", Fayde.XMLNS + "/itemspresenter/stackpanel/default");
        var spft;
        var vspxd = Fayde.Markup.CreateXaml("<ItemsPanelTemplate xmlns=\"" + Fayde.XMLNS + "\"><VirtualizingStackPanel /></ItemsPanelTemplate>", Fayde.XMLNS + "/itemspresenter/virtualizingstackpanel/default");
        var vspft;
        function getFallbackTemplate(ic) {
            if (ic instanceof Controls.ListBox)
                return vspft = vspft || Fayde.Markup.Load(ic.App, vspxd);
            return spft = spft || Fayde.Markup.Load(ic.App, spxd);
        }
        var ItemsPresenterNode = (function (_super) {
            __extends(ItemsPresenterNode, _super);
            function ItemsPresenterNode(xobj) {
                _super.call(this, xobj);
            }
            Object.defineProperty(ItemsPresenterNode.prototype, "ElementRoot", {
                get: function () { return this._ElementRoot; },
                enumerable: true,
                configurable: true
            });
            ItemsPresenterNode.prototype.DoApplyTemplateWithError = function (error) {
                if (this._ElementRoot)
                    return false;
                var xobj = this.XObject;
                var ic = xobj.TemplateOwner;
                if (!(ic instanceof Controls.ItemsControl))
                    return false;
                var er;
                if (ic.ItemsPanel)
                    er = this._ElementRoot = ic.ItemsPanel.GetVisualTree(xobj);
                if (!er)
                    er = this._ElementRoot = getFallbackTemplate(ic).GetVisualTree(xobj);
                Controls.ItemsControl.SetIsItemsHost(er, true);
                if (!this.FinishApplyTemplateWithError(er, error))
                    return false;
                ic.XamlNode.ItemsPresenter = xobj;
                xobj.OnItemsAdded(0, ic.Items.ToArray());
                return true;
            };
            return ItemsPresenterNode;
        })(Fayde.FENode);
        Controls.ItemsPresenterNode = ItemsPresenterNode;
        var ItemsPresenter = (function (_super) {
            __extends(ItemsPresenter, _super);
            function ItemsPresenter() {
                _super.apply(this, arguments);
            }
            ItemsPresenter.prototype.CreateNode = function () { return new ItemsPresenterNode(this); };
            Object.defineProperty(ItemsPresenter.prototype, "ItemsControl", {
                get: function () {
                    return this.TemplateOwner instanceof Controls.ItemsControl ? this.TemplateOwner : null;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ItemsPresenter.prototype, "Panel", {
                get: function () {
                    var er = this.XamlNode.ElementRoot;
                    return er instanceof Controls.Panel ? er : undefined;
                },
                enumerable: true,
                configurable: true
            });
            ItemsPresenter.Get = function (panel) {
                if (!(panel instanceof Controls.Panel))
                    return null;
                if (!Controls.ItemsControl.GetIsItemsHost(panel))
                    return null;
                return panel.TemplateOwner instanceof ItemsPresenter ? panel.TemplateOwner : null;
            };
            ItemsPresenter.prototype.OnItemsAdded = function (index, newItems) {
                var panel = this.Panel;
                if (!panel)
                    return;
                if (panel instanceof Controls.VirtualizingPanel) {
                    panel.OnItemsAdded(index, newItems);
                }
                else {
                    for (var ic = this.ItemsControl, children = panel.Children, generator = ic.ItemContainersManager.CreateGenerator(index, newItems.length); generator.Generate();) {
                        var container = generator.Current;
                        children.Insert(index + generator.GenerateIndex, container);
                        ic.PrepareContainerForItem(container, generator.CurrentItem);
                    }
                }
            };
            ItemsPresenter.prototype.OnItemsRemoved = function (index, oldItems) {
                var panel = this.Panel;
                if (!panel)
                    return;
                if (panel instanceof Controls.VirtualizingPanel) {
                    panel.OnItemsRemoved(index, oldItems);
                }
                else {
                    var icm = this.ItemsControl.ItemContainersManager;
                    var children = panel.Children;
                    var count = oldItems ? oldItems.length : null;
                    if (count == null || count === children.Count) {
                        children.Clear();
                    }
                    else {
                        while (count > 0) {
                            children.RemoveAt(index);
                            count--;
                        }
                    }
                }
            };
            return ItemsPresenter;
        })(Fayde.FrameworkElement);
        Controls.ItemsPresenter = ItemsPresenter;
        Fayde.CoreLibrary.add(ItemsPresenter);
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
/// <reference path="Primitives/Selector.ts" />
/// <reference path="ScrollViewer.ts" />
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        var ListBox = (function (_super) {
            __extends(ListBox, _super);
            function ListBox() {
                _super.call(this);
                this._FocusedIndex = 0;
                this.DefaultStyleKey = ListBox;
            }
            ListBox.prototype.ScrollIntoView = function (item) {
                var tsv = this.$TemplateScrollViewer;
                if (!tsv)
                    return;
                var items = this.Items;
                if (!items.Contains(item))
                    return;
                var ihro = { Value: null };
                var lbiro = { Value: null };
                var virtualizing = Controls.VirtualizingStackPanel.GetIsVirtualizing(this);
                if (this._IsOnCurrentPage(item, ihro, lbiro))
                    return;
                var ihr = ihro.Value;
                var lbir = lbiro.Value;
                if (this._GetIsVerticalOrientation()) {
                    if (virtualizing) {
                        tsv.ScrollToVerticalOffset(this.SelectedIndex);
                        return;
                    }
                    var verticalOffset = tsv.VerticalOffset;
                    var verticalDelta = 0;
                    if (ihr.GetBottom() < lbir.GetBottom()) {
                        verticalDelta = lbir.GetBottom() - ihr.GetBottom();
                        verticalOffset += verticalDelta;
                    }
                    if ((lbir.Y - verticalDelta) < ihr.Y) {
                        verticalOffset -= ihr.Y - (lbir.Y - verticalDelta);
                    }
                    tsv.ScrollToVerticalOffset(verticalOffset);
                }
                else {
                    if (virtualizing) {
                        tsv.ScrollToHorizontalOffset(this.SelectedIndex);
                        return;
                    }
                    var horizontalOffset = tsv.HorizontalOffset;
                    var horizontalDelta = 0;
                    if (ihr.GetRight() < lbir.GetRight()) {
                        horizontalDelta = lbir.GetRight() - ihr.GetRight();
                        horizontalOffset += horizontalDelta;
                    }
                    if ((ihr.X - horizontalDelta) < ihr.X) {
                        horizontalOffset -= ihr.X - (lbir.X - horizontalDelta);
                    }
                    tsv.ScrollToHorizontalOffset(horizontalOffset);
                }
            };
            ListBox.prototype._NavigateByPage = function (forward) {
                var tsv = this.$TemplateScrollViewer;
                var newFocusedIndex = -1;
                var item = (this._FocusedIndex !== -1) ? this.Items.GetValueAt(this._FocusedIndex) : null;
                if (item != null && !this._IsOnCurrentPage(item)) {
                    this.ScrollIntoView(item);
                    if (tsv != null)
                        tsv.UpdateLayout();
                }
                if (item == null) {
                    newFocusedIndex = this._GetFirstItemOnCurrentPage(this._FocusedIndex, forward);
                }
                else {
                    var firstItemOnCurrentPage = this._GetFirstItemOnCurrentPage(this._FocusedIndex, forward);
                    if (firstItemOnCurrentPage !== this._FocusedIndex) {
                        newFocusedIndex = firstItemOnCurrentPage;
                    }
                    else {
                        if (tsv != null) {
                            if (this._GetIsVerticalOrientation()) {
                                tsv.ScrollToVerticalOffset(Math.max(0, Math.min(tsv.ScrollableHeight, tsv.VerticalOffset + (tsv.ViewportHeight * (forward ? 1 : -1)))));
                            }
                            else {
                                tsv.ScrollToHorizontalOffset(Math.max(0, Math.min(tsv.ScrollableWidth, tsv.HorizontalOffset + (tsv.ViewportWidth * (forward ? 1 : -1)))));
                            }
                            tsv.UpdateLayout();
                        }
                        newFocusedIndex = this._GetFirstItemOnCurrentPage(this._FocusedIndex, forward);
                    }
                }
                return newFocusedIndex;
            };
            ListBox.prototype._ScrollInDirection = function (key) {
                if (this.$TemplateScrollViewer)
                    this.$TemplateScrollViewer.ScrollInDirection(key);
            };
            ListBox.prototype._IsOnCurrentPage = function (item, itemsHostRectOut, listBoxItemsRectOut) {
                if (!itemsHostRectOut)
                    itemsHostRectOut = { Value: null };
                if (!listBoxItemsRectOut)
                    listBoxItemsRectOut = { Value: null };
                var itemsHost = Fayde.VisualTreeHelper.GetChild(Fayde.VisualTreeHelper.GetChild(this, 0), 0);
                var tsv = this.$TemplateScrollViewer;
                if (tsv != null) {
                    itemsHost = tsv;
                    if (tsv.$ScrollContentPresenter != null)
                        itemsHost = tsv.$ScrollContentPresenter;
                }
                if (!(itemsHost instanceof Fayde.FrameworkElement))
                    itemsHost = null;
                var ihro = itemsHostRectOut.Value = new minerva.Rect();
                var lbiro = listBoxItemsRectOut.Value = new minerva.Rect();
                if (!itemsHost)
                    return false;
                minerva.Size.copyTo(itemsHost.RenderSize, ihro);
                var lbi = this.ItemContainersManager.ContainerFromItem(item);
                if (!lbi)
                    return false;
                minerva.Size.copyTo(lbi.RenderSize, lbiro);
                if (itemsHost instanceof Controls.Control) {
                    var padding = itemsHost.Padding;
                    if (padding) {
                        ihro.x = ihro.x + padding.left;
                        ihro.y = ihro.y + padding.top;
                        ihro.width = ihro.width - padding.left - padding.right;
                        ihro.height = ihro.height - padding.top - padding.bottom;
                    }
                }
                var genXform = lbi.TransformToVisual(itemsHost);
                if (genXform != null) {
                    var ptl = genXform.Transform(new Point());
                    var pbr = genXform.Transform(new Point(lbi.RenderSize.width, lbi.RenderSize.height));
                    lbiro.x = Math.min(ptl.x, pbr.x);
                    lbiro.y = Math.min(ptl.y, pbr.y);
                    lbiro.width = Math.abs(ptl.x - pbr.x);
                    lbiro.height = Math.abs(ptl.y - pbr.y);
                }
                return this._GetIsVerticalOrientation()
                    ? ihro.y <= lbiro.y && minerva.Rect.getBottom(ihro) >= minerva.Rect.getBottom(lbiro)
                    : ihro.x <= lbiro.x && minerva.Rect.getRight(ihro) >= minerva.Rect.getRight(lbiro);
            };
            ListBox.prototype._GetFirstItemOnCurrentPage = function (startingIndex, forward) {
                var delta = forward ? 1 : -1;
                var fiocp = -1;
                var probeIndex = startingIndex;
                var items = this.Items;
                var itemsCount = items.Count;
                while (probeIndex >= 0 && probeIndex < itemsCount && !this._IsOnCurrentPage(items.GetValueAt(probeIndex))) {
                    fiocp = probeIndex;
                    probeIndex += delta;
                }
                while (probeIndex >= 0 && probeIndex < itemsCount && this._IsOnCurrentPage(items.GetValueAt(probeIndex))) {
                    fiocp = probeIndex;
                    probeIndex += delta;
                }
                return fiocp;
            };
            ListBox.prototype.OnItemContainerStyleChanged = function (args) {
                var oldStyle = args.OldValue;
                var newStyle = args.NewValue;
                var enumerator = this.ItemContainersManager.GetEnumerator();
                while (enumerator.moveNext()) {
                    var lbi = enumerator.current;
                    if (lbi instanceof Controls.ListBoxItem && lbi.Style === oldStyle)
                        lbi.Style = newStyle;
                }
            };
            ListBox.prototype.OnKeyDown = function (args) {
                if (args.Handled)
                    return;
                var newFocusedIndex = -1;
                switch (args.Key) {
                    case Fayde.Input.Key.Space:
                    case Fayde.Input.Key.Enter:
                        if (Fayde.Input.Key.Enter !== args.Key || Fayde.Input.KeyboardNavigation.GetAcceptsReturn(this)) {
                            if (!Fayde.Input.Keyboard.HasAlt()) {
                                var focusedEl = Fayde.Surface.GetFocusedElement(this);
                                var lbi;
                                if (focusedEl instanceof Controls.ListBoxItem)
                                    lbi = focusedEl;
                                if (lbi) {
                                    if (Fayde.Input.Keyboard.HasControl() && lbi.IsSelected) {
                                        this.SelectedItem = null;
                                    }
                                    else {
                                        this.SelectedItem = this.ItemContainersManager.ItemFromContainer(lbi);
                                    }
                                    args.Handled = true;
                                }
                            }
                        }
                        break;
                    case Fayde.Input.Key.Home:
                        newFocusedIndex = 0;
                        break;
                    case Fayde.Input.Key.End:
                        newFocusedIndex = this.Items.Count - 1;
                        break;
                    case Fayde.Input.Key.PageUp:
                        newFocusedIndex = this._NavigateByPage(false);
                        break;
                    case Fayde.Input.Key.PageDown:
                        newFocusedIndex = this._NavigateByPage(true);
                        break;
                    case Fayde.Input.Key.Left:
                        if (this._GetIsVerticalOrientation()) {
                            this._ScrollInDirection(Fayde.Input.Key.Left);
                        }
                        else {
                            newFocusedIndex = this._FocusedIndex - 1;
                        }
                        break;
                    case Fayde.Input.Key.Up:
                        if (this._GetIsVerticalOrientation()) {
                            newFocusedIndex = this._FocusedIndex - 1;
                        }
                        else {
                            this._ScrollInDirection(Fayde.Input.Key.Up);
                        }
                        break;
                    case Fayde.Input.Key.Right:
                        if (this._GetIsVerticalOrientation()) {
                            this._ScrollInDirection(Fayde.Input.Key.Right);
                        }
                        else {
                            newFocusedIndex = this._FocusedIndex + 1;
                        }
                        break;
                    case Fayde.Input.Key.Down:
                        if (this._GetIsVerticalOrientation()) {
                            newFocusedIndex = this._FocusedIndex + 1;
                        }
                        else {
                            this._ScrollInDirection(Fayde.Input.Key.Down);
                        }
                        break;
                }
                if (newFocusedIndex !== -1 && this._FocusedIndex !== -1 && newFocusedIndex !== this._FocusedIndex && newFocusedIndex >= 0 && newFocusedIndex < this.Items.Count) {
                    var icm = this.ItemContainersManager;
                    var lbi = icm.ContainerFromIndex(newFocusedIndex);
                    var item = icm.ItemFromContainer(lbi);
                    this.ScrollIntoView(item);
                    if (Fayde.Input.Keyboard.HasControl()) {
                        lbi.Focus();
                    }
                    else {
                        this.SelectedItem = item;
                    }
                    args.Handled = true;
                }
            };
            ListBox.prototype._GetIsVerticalOrientation = function () {
                var presenter = this.XamlNode.ItemsPresenter;
                if (!presenter)
                    return true;
                var p = presenter.Panel;
                if (p instanceof Controls.StackPanel)
                    return p.Orientation === Fayde.Orientation.Vertical;
                if (p instanceof Controls.VirtualizingStackPanel)
                    return p.Orientation === Fayde.Orientation.Vertical;
                return true;
            };
            ListBox.prototype.IsItemItsOwnContainer = function (item) {
                return item instanceof Controls.ListBoxItem;
            };
            ListBox.prototype.GetContainerForItem = function () {
                var item = new Controls.ListBoxItem();
                var ics = this.ItemContainerStyle;
                if (ics != null)
                    item.Style = ics;
                return item;
            };
            ListBox.prototype.PrepareContainerForItem = function (element, item) {
                _super.prototype.PrepareContainerForItem.call(this, element, item);
                var ics = this.ItemContainerStyle;
                var lbi = element;
                if (!lbi.Style && ics)
                    lbi.Style = ics;
            };
            ListBox.prototype.OnGotFocus = function (e) {
                _super.prototype.OnGotFocus.call(this, e);
                this.SetValueInternal(ListBox.IsSelectionActiveProperty, true);
            };
            ListBox.prototype.OnLostFocus = function (e) {
                _super.prototype.OnLostFocus.call(this, e);
                this.SetValueInternal(ListBox.IsSelectionActiveProperty, false);
            };
            ListBox.prototype.NotifyListItemGotFocus = function (lbi) {
                this._FocusedIndex = this.ItemContainersManager.IndexFromContainer(lbi);
            };
            ListBox.prototype.NotifyListItemLostFocus = function (lbi) {
                this._FocusedIndex = -1;
            };
            ListBox.ItemContainerStyleProperty = DependencyProperty.Register("ItemContainerStyle", function () { return Fayde.Style; }, ListBox, undefined, function (d, args) { return d.OnItemContainerStyleChanged(args); });
            ListBox.IsSelectionActiveProperty = Controls.Primitives.Selector.IsSelectionActiveProperty;
            return ListBox;
        })(Controls.Primitives.Selector);
        Controls.ListBox = ListBox;
        Fayde.CoreLibrary.add(ListBox);
        Controls.TemplateVisualStates(ListBox, { GroupName: "ValidationStates", Name: "Valid" }, { GroupName: "ValidationStates", Name: "InvalidUnfocused" }, { GroupName: "ValidationStates", Name: "InvalidFocused" });
        Controls.TemplateParts(ListBox, { Name: "ScrollViewer", Type: Controls.ScrollViewer });
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
/// <reference path="../Core/FrameworkElement.ts" />
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        var MediaElement = (function (_super) {
            __extends(MediaElement, _super);
            function MediaElement() {
                _super.apply(this, arguments);
            }
            return MediaElement;
        })(Fayde.FrameworkElement);
        Controls.MediaElement = MediaElement;
        Fayde.CoreLibrary.add(MediaElement);
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var RoutedEventArgs = (function () {
        function RoutedEventArgs() {
            this.Handled = false;
            this.Source = null;
            this.OriginalSource = null;
        }
        return RoutedEventArgs;
    })();
    Fayde.RoutedEventArgs = RoutedEventArgs;
    Fayde.CoreLibrary.add(RoutedEventArgs);
})(Fayde || (Fayde = {}));
/// <reference path="../Core/RoutedEventArgs.ts" />
var Fayde;
(function (Fayde) {
    var Input;
    (function (Input) {
        (function (Key) {
            Key[Key["None"] = 0] = "None";
            Key[Key["Back"] = 1] = "Back";
            Key[Key["Tab"] = 2] = "Tab";
            Key[Key["Enter"] = 3] = "Enter";
            Key[Key["Shift"] = 4] = "Shift";
            Key[Key["Ctrl"] = 5] = "Ctrl";
            Key[Key["Alt"] = 6] = "Alt";
            Key[Key["CapsLock"] = 7] = "CapsLock";
            Key[Key["Escape"] = 8] = "Escape";
            Key[Key["Space"] = 9] = "Space";
            Key[Key["PageUp"] = 10] = "PageUp";
            Key[Key["PageDown"] = 11] = "PageDown";
            Key[Key["End"] = 12] = "End";
            Key[Key["Home"] = 13] = "Home";
            Key[Key["Left"] = 14] = "Left";
            Key[Key["Up"] = 15] = "Up";
            Key[Key["Right"] = 16] = "Right";
            Key[Key["Down"] = 17] = "Down";
            Key[Key["Insert"] = 18] = "Insert";
            Key[Key["Delete"] = 19] = "Delete";
            Key[Key["D0"] = 20] = "D0";
            Key[Key["D1"] = 21] = "D1";
            Key[Key["D2"] = 22] = "D2";
            Key[Key["D3"] = 23] = "D3";
            Key[Key["D4"] = 24] = "D4";
            Key[Key["D5"] = 25] = "D5";
            Key[Key["D6"] = 26] = "D6";
            Key[Key["D7"] = 27] = "D7";
            Key[Key["D8"] = 28] = "D8";
            Key[Key["D9"] = 29] = "D9";
            Key[Key["A"] = 30] = "A";
            Key[Key["B"] = 31] = "B";
            Key[Key["C"] = 32] = "C";
            Key[Key["D"] = 33] = "D";
            Key[Key["E"] = 34] = "E";
            Key[Key["F"] = 35] = "F";
            Key[Key["G"] = 36] = "G";
            Key[Key["H"] = 37] = "H";
            Key[Key["I"] = 38] = "I";
            Key[Key["J"] = 39] = "J";
            Key[Key["K"] = 40] = "K";
            Key[Key["L"] = 41] = "L";
            Key[Key["M"] = 42] = "M";
            Key[Key["N"] = 43] = "N";
            Key[Key["O"] = 44] = "O";
            Key[Key["P"] = 45] = "P";
            Key[Key["Q"] = 46] = "Q";
            Key[Key["R"] = 47] = "R";
            Key[Key["S"] = 48] = "S";
            Key[Key["T"] = 49] = "T";
            Key[Key["U"] = 50] = "U";
            Key[Key["V"] = 51] = "V";
            Key[Key["W"] = 52] = "W";
            Key[Key["X"] = 53] = "X";
            Key[Key["Y"] = 54] = "Y";
            Key[Key["Z"] = 55] = "Z";
            Key[Key["F1"] = 56] = "F1";
            Key[Key["F2"] = 57] = "F2";
            Key[Key["F3"] = 58] = "F3";
            Key[Key["F4"] = 59] = "F4";
            Key[Key["F5"] = 60] = "F5";
            Key[Key["F6"] = 61] = "F6";
            Key[Key["F7"] = 62] = "F7";
            Key[Key["F8"] = 63] = "F8";
            Key[Key["F9"] = 64] = "F9";
            Key[Key["F10"] = 65] = "F10";
            Key[Key["F11"] = 66] = "F11";
            Key[Key["F12"] = 67] = "F12";
            Key[Key["NumPad0"] = 68] = "NumPad0";
            Key[Key["NumPad1"] = 69] = "NumPad1";
            Key[Key["NumPad2"] = 70] = "NumPad2";
            Key[Key["NumPad3"] = 71] = "NumPad3";
            Key[Key["NumPad4"] = 72] = "NumPad4";
            Key[Key["NumPad5"] = 73] = "NumPad5";
            Key[Key["NumPad6"] = 74] = "NumPad6";
            Key[Key["NumPad7"] = 75] = "NumPad7";
            Key[Key["NumPad8"] = 76] = "NumPad8";
            Key[Key["NumPad9"] = 77] = "NumPad9";
            Key[Key["Multiply"] = 78] = "Multiply";
            Key[Key["Add"] = 79] = "Add";
            Key[Key["Subtract"] = 80] = "Subtract";
            Key[Key["Decimal"] = 81] = "Decimal";
            Key[Key["Divide"] = 82] = "Divide";
            Key[Key["Unknown"] = 255] = "Unknown";
        })(Input.Key || (Input.Key = {}));
        var Key = Input.Key;
        Fayde.CoreLibrary.addEnum(Key, "Key");
        var KeyboardEventArgs = (function (_super) {
            __extends(KeyboardEventArgs, _super);
            function KeyboardEventArgs() {
                _super.apply(this, arguments);
            }
            return KeyboardEventArgs;
        })(Fayde.RoutedEventArgs);
        Input.KeyboardEventArgs = KeyboardEventArgs;
        Fayde.CoreLibrary.add(KeyboardEventArgs);
        var KeyEventArgs = (function (_super) {
            __extends(KeyEventArgs, _super);
            function KeyEventArgs(modifiers, keyCode, key, c) {
                _super.call(this);
                this.Modifiers = modifiers;
                this.PlatformKeyCode = keyCode;
                this.Key = key;
                if (this.Key == null)
                    this.Key = Key.Unknown;
                this.Char = c;
            }
            return KeyEventArgs;
        })(KeyboardEventArgs);
        Input.KeyEventArgs = KeyEventArgs;
        Fayde.CoreLibrary.add(KeyEventArgs);
    })(Input = Fayde.Input || (Fayde.Input = {}));
})(Fayde || (Fayde = {}));
/// <reference path="Control.ts" />
/// <reference path="../Input/KeyEventArgs.ts" />
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        var Key = Fayde.Input.Key;
        var MAX_UNDO_COUNT = 10;
        var TextBoxBase = (function (_super) {
            __extends(TextBoxBase, _super);
            function TextBoxBase(eventsMask) {
                var _this = this;
                _super.call(this);
                this._Selecting = false;
                this._Captured = false;
                this.IsReadOnly = false;
                this.AcceptsReturn = false;
                this.$ContentProxy = new Controls.Internal.TextBoxContentProxy();
                var view = this.$View = this.CreateView();
                view.MouseLeftButtonDown.on(function (s, e) { return _this.OnMouseLeftButtonDown(e); }, this);
                view.MouseLeftButtonUp.on(function (s, e) { return _this.OnMouseLeftButtonUp(e); }, this);
                this.$Proxy = new Fayde.Text.Proxy(eventsMask, MAX_UNDO_COUNT);
                this._SyncFont();
            }
            TextBoxBase.prototype._SyncFont = function () {
                var _this = this;
                var view = this.$View;
                var propds = [
                    Controls.Control.ForegroundProperty,
                    Controls.Control.FontFamilyProperty,
                    Controls.Control.FontSizeProperty,
                    Controls.Control.FontStretchProperty,
                    Controls.Control.FontStyleProperty,
                    Controls.Control.FontWeightProperty
                ];
                propds.forEach(function (propd) { return propd.Store.ListenToChanged(_this, propd, function (dobj, args) { return view.setFontProperty(propd, args.NewValue); }, _this); });
            };
            TextBoxBase.prototype.CreateView = function () {
                return new Controls.Internal.TextBoxView();
            };
            Object.defineProperty(TextBoxBase.prototype, "Cursor", {
                get: function () {
                    var cursor = this.GetValue(Fayde.FrameworkElement.CursorProperty);
                    if (cursor === Fayde.CursorType.Default)
                        return Fayde.CursorType.IBeam;
                    return cursor;
                },
                enumerable: true,
                configurable: true
            });
            TextBoxBase.prototype.OnApplyTemplate = function () {
                _super.prototype.OnApplyTemplate.call(this);
                this.$ContentProxy.setElement(this.GetTemplateChild("ContentElement", Fayde.FrameworkElement), this.$View);
            };
            TextBoxBase.prototype.OnLostFocus = function (e) {
                _super.prototype.OnLostFocus.call(this, e);
                this.$View.setIsFocused(false);
            };
            TextBoxBase.prototype.OnGotFocus = function (e) {
                _super.prototype.OnGotFocus.call(this, e);
                this.$View.setIsFocused(true);
            };
            TextBoxBase.prototype.OnMouseLeftButtonDown = function (e) {
                if (e.Handled)
                    return;
                e.Handled = true;
                this.Focus();
                this._Captured = this.CaptureMouse();
                this._Selecting = true;
                var cursor = this.$View.GetCursorFromPoint(e.GetPosition(this.$View));
                this.$Proxy.beginSelect(cursor);
            };
            TextBoxBase.prototype.OnMouseLeftButtonUp = function (e) {
                if (e.Handled)
                    return;
                if (this._Captured)
                    this.ReleaseMouseCapture();
                e.Handled = true;
                this._Selecting = false;
                this._Captured = false;
            };
            TextBoxBase.prototype.OnMouseMove = function (e) {
                if (!this._Selecting)
                    return;
                e.Handled = true;
                var cursor = this.$View.GetCursorFromPoint(e.GetPosition(this.$View));
                this.$Proxy.adjustSelection(cursor);
            };
            TextBoxBase.prototype.OnTouchDown = function (e) {
                _super.prototype.OnTouchDown.call(this, e);
                if (e.Handled)
                    return;
                e.Handled = true;
                this.Focus();
                e.Device.Capture(this);
                this._Selecting = true;
                var pos = e.Device.GetTouchPoint(this.$View).Position;
                var cursor = this.$View.GetCursorFromPoint(pos);
                this.$Proxy.beginSelect(cursor);
            };
            TextBoxBase.prototype.OnTouchUp = function (e) {
                _super.prototype.OnTouchUp.call(this, e);
                if (e.Handled)
                    return;
                if (e.Device.Captured === this)
                    e.Device.ReleaseCapture(this);
                e.Handled = true;
                this._Selecting = false;
            };
            TextBoxBase.prototype.OnTouchMove = function (e) {
                _super.prototype.OnTouchMove.call(this, e);
                if (!this._Selecting)
                    return;
                e.Handled = true;
                var pos = e.Device.GetTouchPoint(this.$View).Position;
                var cursor = this.$View.GetCursorFromPoint(pos);
                this.$Proxy.adjustSelection(cursor);
            };
            TextBoxBase.prototype.OnKeyDown = function (args) {
                switch (args.Key) {
                    case Key.Shift:
                    case Key.Ctrl:
                    case Key.Alt:
                        return;
                }
                var isReadOnly = this.IsReadOnly;
                var handled = false;
                var proxy = this.$Proxy;
                proxy.begin();
                switch (args.Key) {
                    case Key.Back:
                        if (isReadOnly)
                            break;
                        handled = this._KeyDownBackSpace(args.Modifiers);
                        break;
                    case Key.Delete:
                        if (isReadOnly)
                            break;
                        if (args.Modifiers.Shift) {
                            handled = true;
                        }
                        else {
                            handled = this._KeyDownDelete(args.Modifiers);
                        }
                        break;
                    case Key.Insert:
                        if (args.Modifiers.Shift) {
                            handled = true;
                        }
                        else if (args.Modifiers.Ctrl) {
                            handled = true;
                        }
                        break;
                    case Key.PageDown:
                        handled = this._KeyDownPageDown(args.Modifiers);
                        break;
                    case Key.PageUp:
                        handled = this._KeyDownPageUp(args.Modifiers);
                        break;
                    case Key.Home:
                        handled = this._KeyDownHome(args.Modifiers);
                        break;
                    case Key.End:
                        handled = this._KeyDownEnd(args.Modifiers);
                        break;
                    case Key.Left:
                        handled = this._KeyDownLeft(args.Modifiers);
                        break;
                    case Key.Right:
                        handled = this._KeyDownRight(args.Modifiers);
                        break;
                    case Key.Down:
                        handled = this._KeyDownDown(args.Modifiers);
                        break;
                    case Key.Up:
                        handled = this._KeyDownUp(args.Modifiers);
                        break;
                    default:
                        if (args.Modifiers.Ctrl) {
                            switch (args.Key) {
                                case Key.A:
                                    handled = true;
                                    proxy.selectAll();
                                    break;
                                case Key.C:
                                    handled = true;
                                    break;
                                case Key.X:
                                    if (isReadOnly)
                                        break;
                                    handled = true;
                                    break;
                                case Key.Y:
                                    if (!isReadOnly) {
                                        handled = true;
                                        proxy.redo();
                                    }
                                    break;
                                case Key.Z:
                                    if (!isReadOnly) {
                                        handled = true;
                                        proxy.undo();
                                    }
                                    break;
                            }
                        }
                        break;
                }
                if (handled) {
                    args.Handled = handled;
                }
                proxy.end();
                if (!args.Handled && !isReadOnly)
                    this.PostOnKeyDown(args);
            };
            TextBoxBase.prototype.PostOnKeyDown = function (args) {
                if (args.Handled)
                    return;
                if (args.Modifiers.Alt || args.Modifiers.Ctrl)
                    return;
                var proxy = this.$Proxy;
                proxy.begin();
                if (args.Key === Key.Enter) {
                    if (this.AcceptsReturn === true) {
                        proxy.enterText('\n');
                        args.Handled = true;
                    }
                }
                else if (args.Char != null && !args.Modifiers.Ctrl && !args.Modifiers.Alt) {
                    proxy.enterText(args.Char);
                    args.Handled = true;
                }
                proxy.end();
            };
            TextBoxBase.prototype._KeyDownBackSpace = function (modifiers) {
                if (modifiers.Shift || modifiers.Alt)
                    return false;
                var proxy = this.$Proxy;
                var anchor = proxy.selAnchor;
                var cursor = proxy.selCursor;
                var start = 0;
                var length = 0;
                if (cursor !== anchor) {
                    length = Math.abs(cursor - anchor);
                    start = Math.min(anchor, cursor);
                }
                else if (modifiers.Ctrl) {
                    start = this.$Advancer.CursorPrevWord(cursor);
                    length = cursor - start;
                }
                else if (cursor > 0) {
                    start = this.$Advancer.CursorPrevChar(cursor);
                    length = cursor - start;
                }
                proxy.removeText(start, length);
                return true;
            };
            TextBoxBase.prototype._KeyDownDelete = function (modifiers) {
                if (modifiers.Shift || modifiers.Alt)
                    return false;
                var proxy = this.$Proxy;
                var anchor = proxy.selAnchor;
                var cursor = proxy.selCursor;
                var start = 0;
                var length = 0;
                if (cursor !== anchor) {
                    length = Math.abs(cursor - anchor);
                    start = Math.min(anchor, cursor);
                }
                else if (modifiers.Ctrl) {
                    length = this.$Advancer.CursorNextWord(cursor) - cursor;
                    start = cursor;
                }
                else {
                    length = this.$Advancer.CursorNextChar(cursor) - cursor;
                    start = cursor;
                }
                return proxy.removeText(start, length);
            };
            TextBoxBase.prototype._KeyDownPageDown = function (modifiers) {
                if (modifiers.Alt)
                    return false;
                var proxy = this.$Proxy;
                var anchor = proxy.selAnchor;
                var cursor = proxy.selCursor;
                cursor = this.$Advancer.CursorDown(cursor, true);
                if (!modifiers.Shift)
                    anchor = cursor;
                return proxy.setAnchorCursor(anchor, cursor);
            };
            TextBoxBase.prototype._KeyDownPageUp = function (modifiers) {
                if (modifiers.Alt)
                    return false;
                var proxy = this.$Proxy;
                var anchor = proxy.selAnchor;
                var cursor = proxy.selCursor;
                cursor = this.$Advancer.CursorUp(cursor, true);
                if (!modifiers.Shift)
                    anchor = cursor;
                return proxy.setAnchorCursor(anchor, cursor);
            };
            TextBoxBase.prototype._KeyDownHome = function (modifiers) {
                if (modifiers.Alt)
                    return false;
                var proxy = this.$Proxy;
                var anchor = proxy.selAnchor;
                var cursor = proxy.selCursor;
                if (modifiers.Ctrl) {
                    cursor = this.$Advancer.CursorBegin(cursor);
                }
                else {
                    cursor = this.$Advancer.CursorLineBegin(cursor);
                }
                if (!modifiers.Shift)
                    anchor = cursor;
                return proxy.setAnchorCursor(anchor, cursor);
            };
            TextBoxBase.prototype._KeyDownEnd = function (modifiers) {
                if (modifiers.Alt)
                    return false;
                var proxy = this.$Proxy;
                var anchor = proxy.selAnchor;
                var cursor = proxy.selCursor;
                if (modifiers.Ctrl) {
                    cursor = this.$Advancer.CursorEnd(cursor);
                }
                else {
                    cursor = this.$Advancer.CursorLineEnd(cursor);
                }
                if (!modifiers.Shift)
                    anchor = cursor;
                return proxy.setAnchorCursor(anchor, cursor);
            };
            TextBoxBase.prototype._KeyDownLeft = function (modifiers) {
                if (modifiers.Alt)
                    return false;
                var proxy = this.$Proxy;
                var anchor = proxy.selAnchor;
                var cursor = proxy.selCursor;
                if (modifiers.Ctrl) {
                    cursor = this.$Advancer.CursorPrevWord(cursor);
                }
                else if (!modifiers.Shift && anchor !== cursor) {
                    cursor = Math.min(anchor, cursor);
                }
                else {
                    cursor = this.$Advancer.CursorPrevChar(cursor);
                }
                if (!modifiers.Shift)
                    anchor = cursor;
                return proxy.setAnchorCursor(anchor, cursor);
            };
            TextBoxBase.prototype._KeyDownRight = function (modifiers) {
                if (modifiers.Alt)
                    return false;
                var proxy = this.$Proxy;
                var anchor = proxy.selAnchor;
                var cursor = proxy.selCursor;
                if (modifiers.Ctrl) {
                    cursor = this.$Advancer.CursorNextWord(cursor);
                }
                else if (!modifiers.Shift && anchor !== cursor) {
                    cursor = Math.max(anchor, cursor);
                }
                else {
                    cursor = this.$Advancer.CursorNextChar(cursor);
                }
                if (!modifiers.Shift)
                    anchor = cursor;
                return proxy.setAnchorCursor(anchor, cursor);
            };
            TextBoxBase.prototype._KeyDownDown = function (modifiers) {
                if (modifiers.Alt)
                    return false;
                var proxy = this.$Proxy;
                var cursor = this.$Advancer.CursorDown(proxy.selCursor, false);
                var anchor = proxy.selAnchor;
                if (!modifiers.Shift)
                    anchor = cursor;
                return proxy.setAnchorCursor(anchor, cursor);
            };
            TextBoxBase.prototype._KeyDownUp = function (modifiers) {
                if (modifiers.Alt)
                    return false;
                var proxy = this.$Proxy;
                var cursor = this.$Advancer.CursorUp(proxy.selCursor, false);
                var anchor = proxy.selAnchor;
                if (!modifiers.Shift)
                    anchor = cursor;
                return proxy.setAnchorCursor(anchor, cursor);
            };
            TextBoxBase.CaretBrushProperty = DependencyProperty.RegisterCore("CaretBrush", function () { return Fayde.Media.Brush; }, TextBoxBase);
            TextBoxBase.SelectionForegroundProperty = DependencyProperty.RegisterCore("SelectionForeground", function () { return Fayde.Media.Brush; }, TextBoxBase);
            TextBoxBase.SelectionBackgroundProperty = DependencyProperty.RegisterCore("SelectionBackground", function () { return Fayde.Media.Brush; }, TextBoxBase);
            TextBoxBase.SelectionLengthProperty = DependencyProperty.RegisterFull("SelectionLength", function () { return Number; }, TextBoxBase, 0, undefined, undefined, true, positiveIntValidator);
            TextBoxBase.SelectionStartProperty = DependencyProperty.RegisterFull("SelectionStart", function () { return Number; }, TextBoxBase, 0, undefined, undefined, true, positiveIntValidator);
            TextBoxBase.BaselineOffsetProperty = DependencyProperty.Register("BaselineOffset", function () { return Number; }, TextBoxBase);
            TextBoxBase.MaxLengthProperty = DependencyProperty.RegisterFull("MaxLength", function () { return Number; }, TextBoxBase, 0, undefined, undefined, undefined, positiveIntValidator);
            return TextBoxBase;
        })(Controls.Control);
        Controls.TextBoxBase = TextBoxBase;
        Fayde.RegisterType(TextBoxBase, Fayde.XMLNSINTERNAL);
        var reactions;
        (function (reactions) {
            Fayde.DPReaction(TextBoxBase.CaretBrushProperty, function (tbb, ov, nv) {
                tbb.$View.setCaretBrush(nv);
            });
            Fayde.DPReaction(TextBoxBase.SelectionStartProperty, function (tbb, ov, nv) {
                tbb.$Proxy.setSelectionStart(nv);
                tbb.$View.setSelectionStart(nv);
            }, false);
            Fayde.DPReaction(TextBoxBase.SelectionLengthProperty, function (tbb, ov, nv) {
                tbb.$Proxy.setSelectionLength(nv);
                tbb.$View.setSelectionLength(nv);
            }, false);
            Fayde.DPReaction(TextBoxBase.SelectionBackgroundProperty, function (tbb, ov, nv) {
                tbb.$View.setFontAttr("selectionBackground", nv);
                tbb.XamlNode.LayoutUpdater.invalidate();
            });
            Fayde.DPReaction(TextBoxBase.SelectionForegroundProperty, function (tbb, ov, nv) {
                tbb.$View.setFontAttr("selectionForeground", nv);
                tbb.XamlNode.LayoutUpdater.invalidate();
            });
            Fayde.DPReaction(TextBoxBase.MaxLengthProperty, function (tbb, ov, nv) {
                tbb.$Proxy.maxLength = nv;
            }, false);
        })(reactions || (reactions = {}));
        function positiveIntValidator(dobj, propd, value) {
            if (typeof value !== 'number')
                return false;
            return value >= 0;
        }
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
/// <reference path="TextBoxBase.ts" />
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        var PasswordBox = (function (_super) {
            __extends(PasswordBox, _super);
            function PasswordBox() {
                var _this = this;
                _super.call(this, Fayde.Text.EmitChangedType.TEXT);
                this.DefaultStyleKey = PasswordBox;
                var proxy = this.$Proxy;
                proxy.SyncSelectionStart = function (value) { return _this.SetCurrentValue(PasswordBox.SelectionStartProperty, value); };
                proxy.SyncSelectionLength = function (value) { return _this.SetCurrentValue(PasswordBox.SelectionLengthProperty, value); };
                proxy.SyncText = function (value) { return _this.SetCurrentValue(PasswordBox.PasswordProperty, value); };
                this.$Advancer = new Controls.Internal.PasswordBoxCursorAdvancer(this.$Proxy);
            }
            Object.defineProperty(PasswordBox.prototype, "DisplayText", {
                get: function () {
                    var result = "";
                    var count = this.$Proxy.text.length;
                    var pattern = this.PasswordChar;
                    while (count > 0) {
                        if (count & 1)
                            result += pattern;
                        count >>= 1, pattern += pattern;
                    }
                    return result;
                },
                enumerable: true,
                configurable: true
            });
            PasswordBox.PasswordCharProperty = DependencyProperty.Register("PasswordChar", function () { return String; }, PasswordBox, String.fromCharCode(9679));
            PasswordBox.PasswordProperty = DependencyProperty.Register("Password", function () { return String; }, PasswordBox);
            return PasswordBox;
        })(Controls.TextBoxBase);
        Controls.PasswordBox = PasswordBox;
        Fayde.CoreLibrary.add(PasswordBox);
        Controls.TemplateVisualStates(PasswordBox, { GroupName: "CommonStates", Name: "Normal" }, { GroupName: "CommonStates", Name: "MouseOver" }, { GroupName: "CommonStates", Name: "Disabled" }, { GroupName: "FocusStates", Name: "Unfocused" }, { GroupName: "FocusStates", Name: "Focused" }, { GroupName: "ValidationStates", Name: "Valid" }, { GroupName: "ValidationStates", Name: "InvalidUnfocused" }, { GroupName: "ValidationStates", Name: "InvalidFocused" });
        var reactions;
        (function (reactions) {
            Fayde.DPReaction(PasswordBox.PasswordCharProperty, function (pb, ov, nv) {
                pb.$View.setText(pb.DisplayText);
            }, false);
            Fayde.DPReaction(PasswordBox.PasswordProperty, function (pb, ov, nv) {
                pb.$Proxy.setText(nv);
                pb.$View.setText(pb.DisplayText);
            }, false);
        })(reactions || (reactions = {}));
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
/// <reference path="Primitives/RangeBase.ts" />
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        var ProgressBar = (function (_super) {
            __extends(ProgressBar, _super);
            function ProgressBar() {
                _super.call(this);
                this.DefaultStyleKey = ProgressBar;
            }
            ProgressBar.prototype.OnIsIndeterminateChanged = function (args) {
                this._UpdateIndicator();
                this.UpdateVisualState();
            };
            ProgressBar.prototype.OnMinimumChanged = function (oldMinimum, newMinimum) {
                _super.prototype.OnMinimumChanged.call(this, oldMinimum, newMinimum);
                this._UpdateIndicator();
            };
            ProgressBar.prototype.OnMaximumChanged = function (oldMaximum, newMaximum) {
                _super.prototype.OnMaximumChanged.call(this, oldMaximum, newMaximum);
                this._UpdateIndicator();
            };
            ProgressBar.prototype.OnValueChanged = function (oldValue, newValue) {
                _super.prototype.OnValueChanged.call(this, oldValue, newValue);
                this._UpdateIndicator();
            };
            ProgressBar.prototype.OnApplyTemplate = function () {
                _super.prototype.OnApplyTemplate.call(this);
                var track = this._Track;
                if (track)
                    track.SizeChanged.off(this._OnTrackSizeChanged, this);
                track = this._Track = this.GetTemplateChild("ProgressBarTrack", Fayde.FrameworkElement);
                this._Indicator = this.GetTemplateChild("ProgressBarIndicator", Fayde.FrameworkElement);
                if (track)
                    track.SizeChanged.on(this._OnTrackSizeChanged, this);
                this.UpdateVisualState(false);
            };
            ProgressBar.prototype.GoToStates = function (gotoFunc) {
                if (this.IsIndeterminate)
                    gotoFunc("Indeterminate");
                else
                    gotoFunc("Determinate");
            };
            ProgressBar.prototype._OnTrackSizeChanged = function (sender, e) {
                this._UpdateIndicator();
            };
            ProgressBar.prototype._UpdateIndicator = function () {
                var min = this.Minimum;
                var max = this.Maximum;
                var val = this.Value;
                var indicator = this._Indicator;
                if (!indicator)
                    return;
                var parent = Fayde.VisualTreeHelper.GetParent(indicator);
                if (!parent)
                    return;
                var margin = indicator.Margin;
                var outerWidth = (margin) ? margin.left + margin.right : 0.0;
                var padding = null;
                if (parent instanceof Controls.Border)
                    padding = parent.Padding;
                else if (parent instanceof Controls.Control)
                    padding = parent.Padding;
                if (padding) {
                    outerWidth += padding.left;
                    outerWidth += padding.right;
                }
                var progress = 1.0;
                if (!this.IsIndeterminate && max !== min)
                    progress = (val - min) / (max - min);
                var fullWidth = Math.max(0, parent.ActualWidth - outerWidth);
                indicator.Width = fullWidth * progress;
            };
            ProgressBar.IsIndeterminateProperty = DependencyProperty.Register("IsIndeterminate", function () { return Boolean; }, ProgressBar, false, function (d, args) { return d.OnIsIndeterminateChanged(args); });
            return ProgressBar;
        })(Controls.Primitives.RangeBase);
        Controls.ProgressBar = ProgressBar;
        Fayde.CoreLibrary.add(ProgressBar);
        Controls.TemplateVisualStates(ProgressBar, { GroupName: "CommonStates", Name: "Indeterminate" }, { GroupName: "CommonStates", Name: "Determinate" });
        Controls.TemplateParts(ProgressBar, { Name: "ProgressBarIndicator", Type: Fayde.FrameworkElement }, { Name: "ProgressBarTrack", Type: Fayde.FrameworkElement });
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
/// <reference path="Primitives/ToggleButton.ts" />
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        var RadioButton = (function (_super) {
            __extends(RadioButton, _super);
            function RadioButton() {
                _super.call(this);
                this.DefaultStyleKey = RadioButton;
                register("", this);
            }
            RadioButton.prototype.OnGroupNameChanged = function (args) {
                unregister(args.OldValue, this);
                register(args.NewValue, this);
            };
            RadioButton.prototype.OnIsCheckedChanged = function (e) {
                if (e.NewValue === true)
                    this.UpdateRadioButtonGroup();
                _super.prototype.OnIsCheckedChanged.call(this, e);
            };
            RadioButton.prototype.OnToggle = function () {
                this.IsChecked = true;
            };
            RadioButton.prototype.UpdateRadioButtonGroup = function () {
                var groupName = this.GroupName || "";
                var elements = groupNameToElements[groupName];
                if (!elements)
                    return;
                var element = null;
                if (groupName) {
                    var rootNode = this.XamlNode.GetVisualRoot();
                    for (var i = 0; i < elements.length; i++) {
                        element = elements[i];
                        if (element === this)
                            continue;
                        if (!element.IsChecked)
                            continue;
                        if (rootNode !== element.XamlNode.GetVisualRoot())
                            continue;
                        element.IsChecked = false;
                    }
                }
                else {
                    var vpNode = this.XamlNode.VisualParentNode;
                    for (var i = 0; i < elements.length; i++) {
                        element = elements[i];
                        if (element === this)
                            continue;
                        if (!element.IsChecked)
                            continue;
                        if (vpNode !== element.XamlNode.VisualParentNode)
                            continue;
                        element.IsChecked = false;
                    }
                }
            };
            RadioButton.GroupNameProperty = DependencyProperty.Register("GroupName", function () { return String; }, RadioButton, false, function (d, args) { return d.OnGroupNameChanged(args); });
            return RadioButton;
        })(Controls.Primitives.ToggleButton);
        Controls.RadioButton = RadioButton;
        Fayde.CoreLibrary.add(RadioButton);
        Controls.TemplateVisualStates(RadioButton, { GroupName: "CommonStates", Name: "Normal" }, { GroupName: "CommonStates", Name: "MouseOver" }, { GroupName: "CommonStates", Name: "Pressed" }, { GroupName: "CommonStates", Name: "Disabled" }, { GroupName: "FocusStates", Name: "Unfocused" }, { GroupName: "FocusStates", Name: "Focused" }, { GroupName: "CheckStates", Name: "Unchecked" }, { GroupName: "CheckStates", Name: "Checked" }, { GroupName: "CheckStates", Name: "Indeterminate" }, { GroupName: "ValidationStates", Name: "InvalidUnfocused" }, { GroupName: "ValidationStates", Name: "InvalidFocused" }, { GroupName: "ValidationStates", Name: "Valid" });
        var groupNameToElements = [];
        function register(groupName, radioButton) {
            if (!groupName)
                groupName = "";
            var list = groupNameToElements[groupName];
            if (!list)
                groupNameToElements[groupName] = list = [];
            list.push(radioButton);
        }
        function unregister(groupName, radioButton) {
            if (!groupName)
                groupName = "";
            var list = groupNameToElements[groupName];
            if (list) {
                var index = list.indexOf(radioButton);
                if (index > -1)
                    list.splice(index, 1);
            }
        }
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
/// <reference path="Control.ts" />
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        var _RichTextBoxView = (function () {
            function _RichTextBoxView() {
            }
            return _RichTextBoxView;
        })();
        Controls._RichTextBoxView = _RichTextBoxView;
        Fayde.RegisterType(_RichTextBoxView, Fayde.XMLNSINTERNAL);
        var RichTextBox = (function (_super) {
            __extends(RichTextBox, _super);
            function RichTextBox() {
                _super.call(this);
                this.DefaultStyleKey = RichTextBox;
            }
            return RichTextBox;
        })(Controls.Control);
        Controls.RichTextBox = RichTextBox;
        Fayde.CoreLibrary.add(RichTextBox);
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
/// <reference path="../Core/DependencyObject.ts" />
/// <reference path="../Core/XamlObjectCollection.ts" />
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        var RowDefinition = (function (_super) {
            __extends(RowDefinition, _super);
            function RowDefinition() {
                _super.apply(this, arguments);
            }
            RowDefinition.prototype.setActualHeight = function (value) {
                this.SetCurrentValue(RowDefinition.ActualHeightProperty, value);
            };
            RowDefinition.HeightProperty = DependencyProperty.Register("Height", function () { return Controls.GridLength; }, RowDefinition, undefined, Fayde.Incite);
            RowDefinition.MaxHeightProperty = DependencyProperty.Register("MaxHeight", function () { return Number; }, RowDefinition, Number.POSITIVE_INFINITY, Fayde.Incite);
            RowDefinition.MinHeightProperty = DependencyProperty.Register("MinHeight", function () { return Number; }, RowDefinition, 0.0, Fayde.Incite);
            RowDefinition.ActualHeightProperty = DependencyProperty.RegisterReadOnly("ActualHeight", function () { return Number; }, RowDefinition, 0.0);
            return RowDefinition;
        })(Fayde.DependencyObject);
        Controls.RowDefinition = RowDefinition;
        Fayde.CoreLibrary.add(RowDefinition);
        var GridUnitType = minerva.controls.grid.GridUnitType;
        function ConvertRowDefinition(o) {
            if (!o || o instanceof RowDefinition)
                return o;
            var s = o.toString();
            var rd = new RowDefinition();
            if (s.toLowerCase() === "auto") {
                rd.Height = new Controls.GridLength(0, GridUnitType.Auto);
                return rd;
            }
            if (s === "*") {
                rd.Height = new Controls.GridLength(1, GridUnitType.Star);
                return rd;
            }
            var v = parseFloat(s);
            if (isNaN(v))
                throw new XamlParseException("Invalid RowDefinition: '" + s + "'.");
            rd.Height = new Controls.GridLength(v, s[s.length - 1] === "*" ? GridUnitType.Star : GridUnitType.Pixel);
            return rd;
        }
        nullstone.registerTypeConverter(RowDefinition, ConvertRowDefinition);
        var RowDefinitionCollection = (function (_super) {
            __extends(RowDefinitionCollection, _super);
            function RowDefinitionCollection() {
                _super.apply(this, arguments);
            }
            RowDefinitionCollection.prototype._RaiseItemAdded = function (value, index) {
                Fayde.Incite(this, {
                    item: value,
                    index: index,
                    add: true
                });
            };
            RowDefinitionCollection.prototype._RaiseItemRemoved = function (value, index) {
                Fayde.Incite(this, {
                    item: value,
                    index: index,
                    add: false
                });
            };
            return RowDefinitionCollection;
        })(Fayde.XamlObjectCollection);
        Controls.RowDefinitionCollection = RowDefinitionCollection;
        Fayde.CoreLibrary.add(RowDefinitionCollection);
        function ConvertRowDefinitionCollection(o) {
            if (!o || o instanceof RowDefinitionCollection)
                return o;
            if (typeof o === "string") {
                var tokens = o.split(" ");
                var len = tokens.length;
                var rdc = new RowDefinitionCollection();
                var rd;
                for (var i = 0; i < len; i++) {
                    if (rd = ConvertRowDefinition(tokens[i]))
                        rdc.Add(rd);
                }
                return rdc;
            }
            return undefined;
        }
        nullstone.registerTypeConverter(RowDefinitionCollection, ConvertRowDefinitionCollection);
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
/// <reference path="Primitives/RangeBase.ts" />
/// <reference path="Primitives/RepeatButton.ts" />
/// <reference path="Primitives/Thumb.ts" />
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        var GridUnitType = minerva.controls.grid.GridUnitType;
        var Slider = (function (_super) {
            __extends(Slider, _super);
            function Slider() {
                _super.call(this);
                this._DragValue = 0;
                this.DefaultStyleKey = Slider;
                this.SizeChanged.on(this._HandleSizeChanged, this);
            }
            Slider.prototype.OnApplyTemplate = function () {
                _super.prototype.OnApplyTemplate.call(this);
                this.$HorizontalTemplate = this.GetTemplateChild("HorizontalTemplate", Fayde.FrameworkElement);
                this.$HorizontalLargeIncrease = this.GetTemplateChild("HorizontalTrackLargeChangeIncreaseRepeatButton", Controls.Primitives.RepeatButton);
                this.$HorizontalLargeDecrease = this.GetTemplateChild("HorizontalTrackLargeChangeDecreaseRepeatButton", Controls.Primitives.RepeatButton);
                this.$HorizontalThumb = this.GetTemplateChild("HorizontalThumb", Controls.Primitives.Thumb);
                this.$VerticalTemplate = this.GetTemplateChild("VerticalTemplate", Fayde.FrameworkElement);
                this.$VerticalLargeIncrease = this.GetTemplateChild("VerticalTrackLargeChangeIncreaseRepeatButton", Controls.Primitives.RepeatButton);
                this.$VerticalLargeDecrease = this.GetTemplateChild("VerticalTrackLargeChangeDecreaseRepeatButton", Controls.Primitives.RepeatButton);
                this.$VerticalThumb = this.GetTemplateChild("VerticalThumb", Controls.Primitives.Thumb);
                if (this.$HorizontalThumb != null) {
                    this.$HorizontalThumb.DragStarted.on(this._OnThumbDragStarted, this);
                    this.$HorizontalThumb.DragDelta.on(this._OnThumbDragDelta, this);
                }
                if (this.$HorizontalLargeDecrease != null) {
                    this.$HorizontalLargeDecrease.Click.on(function (sender, e) { this.Focus(); this.Value -= this.LargeChange; }, this);
                }
                if (this.$HorizontalLargeIncrease != null) {
                    this.$HorizontalLargeIncrease.Click.on(function (sender, e) { this.Focus(); this.Value += this.LargeChange; }, this);
                }
                if (this.$VerticalThumb != null) {
                    this.$VerticalThumb.DragStarted.on(this._OnThumbDragStarted, this);
                    this.$VerticalThumb.DragDelta.on(this._OnThumbDragDelta, this);
                }
                if (this.$VerticalLargeDecrease != null) {
                    this.$VerticalLargeDecrease.Click.on(function (sender, e) { this.Focus(); this.Value -= this.LargeChange; }, this);
                }
                if (this.$VerticalLargeIncrease != null) {
                    this.$VerticalLargeIncrease.Click.on(function (sender, e) { this.Focus(); this.Value += this.LargeChange; }, this);
                }
                this._OnOrientationChanged();
                this.UpdateVisualState(false);
            };
            Slider.prototype.OnIsEnabledChanged = function (e) {
                _super.prototype.OnIsEnabledChanged.call(this, e);
                this.UpdateVisualState();
            };
            Slider.prototype.OnMinimumChanged = function (oldMin, newMin) {
                _super.prototype.OnMinimumChanged.call(this, oldMin, newMin);
                this._UpdateTrackLayout();
            };
            Slider.prototype.OnMaximumChanged = function (oldMax, newMax) {
                _super.prototype.OnMaximumChanged.call(this, oldMax, newMax);
                this._UpdateTrackLayout();
            };
            Slider.prototype.OnValueChanged = function (oldValue, newValue) {
                _super.prototype.OnValueChanged.call(this, oldValue, newValue);
                this._UpdateTrackLayout();
            };
            Slider.prototype._HandleSizeChanged = function (sender, e) {
                this._UpdateTrackLayout();
            };
            Slider.prototype._OnOrientationChanged = function () {
                var isHorizontal = this.Orientation === Fayde.Orientation.Horizontal;
                if (this.$HorizontalTemplate != null)
                    this.$HorizontalTemplate.Visibility = isHorizontal ? Fayde.Visibility.Visible : Fayde.Visibility.Collapsed;
                if (this.$VerticalTemplate != null)
                    this.$VerticalTemplate.Visibility = !isHorizontal ? Fayde.Visibility.Visible : Fayde.Visibility.Collapsed;
                this._UpdateTrackLayout();
            };
            Slider.prototype._UpdateTrackLayout = function () {
                var max = this.Maximum;
                var min = this.Minimum;
                var val = this.Value;
                var isHorizontal = this.Orientation === Fayde.Orientation.Horizontal;
                var temp = isHorizontal ? this.$HorizontalTemplate : this.$VerticalTemplate;
                if (!(temp instanceof Controls.Grid))
                    return;
                var templateGrid = temp;
                var isReversed = this.IsDirectionReversed;
                var largeDecrease;
                var largeIncrease;
                var thumb;
                if (isHorizontal) {
                    var coldefs = templateGrid.ColumnDefinitions;
                    largeDecrease = this.$HorizontalLargeDecrease;
                    largeIncrease = this.$HorizontalLargeIncrease;
                    thumb = this.$HorizontalThumb;
                    if (coldefs && coldefs.Count === 3) {
                        coldefs.GetValueAt(0).Width = new Controls.GridLength(1, isReversed ? GridUnitType.Star : GridUnitType.Auto);
                        coldefs.GetValueAt(2).Width = new Controls.GridLength(1, isReversed ? GridUnitType.Auto : GridUnitType.Star);
                        if (largeDecrease != null)
                            Controls.Grid.SetColumn(largeDecrease, isReversed ? 2 : 0);
                        if (largeIncrease != null)
                            Controls.Grid.SetColumn(largeIncrease, isReversed ? 0 : 2);
                    }
                }
                else {
                    var rowdefs = templateGrid.RowDefinitions;
                    largeDecrease = this.$VerticalLargeDecrease;
                    largeIncrease = this.$VerticalLargeIncrease;
                    thumb = this.$VerticalThumb;
                    if (rowdefs && rowdefs.Count === 3) {
                        rowdefs.GetValueAt(0).Height = new Controls.GridLength(1, isReversed ? GridUnitType.Auto : GridUnitType.Star);
                        rowdefs.GetValueAt(2).Height = new Controls.GridLength(1, isReversed ? GridUnitType.Star : GridUnitType.Auto);
                        if (largeDecrease != null)
                            Controls.Grid.SetRow(largeDecrease, isReversed ? 0 : 2);
                        if (largeIncrease != null)
                            Controls.Grid.SetRow(largeIncrease, isReversed ? 2 : 0);
                    }
                }
                if (max === min)
                    return;
                var percent = val / (max - min);
                if (largeDecrease != null && thumb != null) {
                    if (isHorizontal)
                        largeDecrease.Width = Math.max(0, percent * (this.ActualWidth - thumb.ActualWidth));
                    else
                        largeDecrease.Height = Math.max(0, percent * (this.ActualHeight - thumb.ActualHeight));
                }
            };
            Slider.prototype._OnThumbDragStarted = function (sender, e) {
                this.Focus();
                this._DragValue = this.Value;
            };
            Slider.prototype._OnThumbDragDelta = function (sender, e) {
                var offset = 0;
                var isHorizontal = this.Orientation === Fayde.Orientation.Horizontal;
                if (isHorizontal && this.$HorizontalThumb != null) {
                    offset = e.HorizontalChange / (this.ActualWidth - this.$HorizontalThumb.ActualWidth) * (this.Maximum - this.Minimum);
                }
                else if (!isHorizontal && this.$VerticalThumb != null) {
                    offset = -e.VerticalChange / (this.ActualHeight - this.$VerticalThumb.ActualHeight) * (this.Maximum - this.Minimum);
                }
                if (!isNaN(offset) && isFinite(offset)) {
                    this._DragValue += this.IsDirectionReversed ? -offset : offset;
                    var newValue = Math.min(this.Maximum, Math.max(this.Minimum, this._DragValue));
                    if (newValue != this.Value)
                        this.Value = newValue;
                }
            };
            Slider.prototype.OnMouseEnter = function (e) {
                _super.prototype.OnMouseEnter.call(this, e);
                if ((this.Orientation === Fayde.Orientation.Horizontal && this.$HorizontalThumb != null && this.$HorizontalThumb.IsDragging) ||
                    (this.Orientation === Fayde.Orientation.Vertical && this.$VerticalThumb != null && this.$VerticalThumb.IsDragging)) {
                    this.UpdateVisualState();
                }
            };
            Slider.prototype.OnMouseLeave = function (e) {
                _super.prototype.OnMouseLeave.call(this, e);
                if ((this.Orientation === Fayde.Orientation.Horizontal && this.$HorizontalThumb != null && this.$HorizontalThumb.IsDragging) ||
                    (this.Orientation === Fayde.Orientation.Vertical && this.$VerticalThumb != null && this.$VerticalThumb.IsDragging)) {
                    this.UpdateVisualState();
                }
            };
            Slider.prototype.OnMouseLeftButtonDown = function (e) {
                _super.prototype.OnMouseLeftButtonDown.call(this, e);
                if (e.Handled)
                    return;
                e.Handled = true;
                this.Focus();
                this.CaptureMouse();
            };
            Slider.prototype.OnLostMouseCapture = function (e) {
                _super.prototype.OnLostMouseCapture.call(this, e);
                this.UpdateVisualState();
            };
            Slider.prototype.OnKeyDown = function (e) {
                _super.prototype.OnKeyDown.call(this, e);
                if (e.Handled)
                    return;
                if (!this.IsEnabled)
                    return;
                switch (e.Key) {
                    case Fayde.Input.Key.Left:
                    case Fayde.Input.Key.Down:
                        this.Value += (this.IsDirectionReversed ? this.SmallChange : -this.SmallChange);
                        break;
                    case Fayde.Input.Key.Right:
                    case Fayde.Input.Key.Up:
                        this.Value += (this.IsDirectionReversed ? -this.SmallChange : this.SmallChange);
                        break;
                    case Fayde.Input.Key.Home:
                        this.Value = this.Minimum;
                        break;
                    case Fayde.Input.Key.End:
                        this.Value = this.Maximum;
                        break;
                }
            };
            Slider.prototype.OnGotFocus = function (e) {
                _super.prototype.OnGotFocus.call(this, e);
                this.SetValueInternal(Slider.IsFocusedProperty, true);
            };
            Slider.prototype.OnLostFocus = function (e) {
                _super.prototype.OnLostFocus.call(this, e);
                this.SetValueInternal(Slider.IsFocusedProperty, false);
            };
            Slider.IsDirectionReversedProperty = DependencyProperty.RegisterCore("IsDirectionReversed", function () { return Boolean; }, Slider, false, function (d, args) { return d._UpdateTrackLayout(); });
            Slider.IsFocusedProperty = DependencyProperty.RegisterReadOnlyCore("IsFocused", function () { return Boolean; }, Slider, false, function (d, args) { return d.UpdateVisualState(); });
            Slider.OrientationProperty = DependencyProperty.RegisterCore("Orientation", function () { return new Fayde.Enum(Fayde.Orientation); }, Slider, Fayde.Orientation.Horizontal, function (d, args) { return d._OnOrientationChanged(); });
            return Slider;
        })(Controls.Primitives.RangeBase);
        Controls.Slider = Slider;
        Fayde.CoreLibrary.add(Slider);
        Controls.TemplateVisualStates(Slider, { GroupName: "CommonStates", Name: "Normal" }, { GroupName: "CommonStates", Name: "MouseOver" }, { GroupName: "CommonStates", Name: "Disabled" }, { GroupName: "FocusStates", Name: "Unfocused" }, { GroupName: "FocusStates", Name: "Focused" });
        Controls.TemplateParts(Slider, { Name: "HorizontalTemplate", Type: Fayde.FrameworkElement }, { Name: "HorizontalThumb", Type: Controls.Primitives.Thumb }, { Name: "HorizontalTrackLargeChangeIncreaseRepeatButton", Type: Controls.Primitives.RepeatButton }, { Name: "HorizontalTrackLargeChangeDecreaseRepeatButton", Type: Controls.Primitives.RepeatButton }, { Name: "VerticalTemplate", Type: Fayde.FrameworkElement }, { Name: "VerticalThumb", Type: Controls.Primitives.Thumb }, { Name: "VerticalTrackLargeChangeIncreaseRepeatButton", Type: Controls.Primitives.RepeatButton }, { Name: "VerticalTrackLargeChangeDecreaseRepeatButton", Type: Controls.Primitives.RepeatButton });
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
/// <reference path="Panel.ts" />
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        var StackPanel = (function (_super) {
            __extends(StackPanel, _super);
            function StackPanel() {
                _super.apply(this, arguments);
            }
            StackPanel.prototype.CreateLayoutUpdater = function () {
                return new minerva.controls.stackpanel.StackPanelUpdater();
            };
            StackPanel.OrientationProperty = DependencyProperty.Register("Orientation", function () { return new Fayde.Enum(Fayde.Orientation); }, StackPanel, Fayde.Orientation.Vertical);
            return StackPanel;
        })(Controls.Panel);
        Controls.StackPanel = StackPanel;
        Fayde.CoreLibrary.add(StackPanel);
        var reactions;
        (function (reactions) {
            Fayde.UIReaction(StackPanel.OrientationProperty, function (upd, ov, nv) {
                upd.invalidateMeasure();
                upd.invalidateArrange();
            }, false);
        })(reactions || (reactions = {}));
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
/// <reference path="Enums.ts" />
/// <reference path="../Core/FrameworkElement.ts" />
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        var TextBlockUpdater = minerva.controls.textblock.TextBlockUpdater;
        var TextBlockNode = (function (_super) {
            __extends(TextBlockNode, _super);
            function TextBlockNode(xobj) {
                _super.call(this, xobj);
                this._IsDocAuto = false;
                this._SettingText = false;
                this._SettingInlines = false;
                this._AutoRun = new Fayde.Documents.Run();
            }
            TextBlockNode.prototype.GetInheritedEnumerator = function () {
                var xobj = this.XObject;
                var inlines = xobj.Inlines;
                if (inlines)
                    return inlines.GetNodeEnumerator();
            };
            TextBlockNode.prototype.TextChanged = function (args) {
                if (this._SettingInlines)
                    return;
                this._AutoRun.Text = args.NewValue;
                if (!this._IsDocAuto) {
                    this._IsDocAuto = true;
                    this.LayoutUpdater.tree.clearText();
                    this._SettingText = true;
                    var inlines = this.XObject.Inlines;
                    inlines.Clear();
                    inlines.Add(this._AutoRun);
                    this.LayoutUpdater.invalidateTextMetrics();
                    this._SettingText = false;
                }
            };
            TextBlockNode.prototype.InlinesChanged = function (inline, index, isAdd) {
                var xobj = this.XObject;
                if (isAdd)
                    Fayde.Providers.InheritedStore.PropagateInheritedOnAdd(xobj, inline.XamlNode);
                var updater = this.LayoutUpdater;
                if (isAdd)
                    updater.tree.onTextAttached(inline.TextUpdater, index);
                else
                    updater.tree.onTextDetached(inline.TextUpdater);
                if (isAdd)
                    Fayde.ReactTo(inline, this, this.InlineChanged);
                else
                    Fayde.UnreactTo(inline, this);
                if (this._SettingText)
                    return;
                this._SettingInlines = true;
                var inlines = xobj.Inlines;
                var text = "";
                for (var en = inlines.getEnumerator(); en.moveNext();) {
                    text += en.current._SerializeText();
                }
                xobj.SetCurrentValue(TextBlock.TextProperty, text);
                this._SettingInlines = false;
                updater.invalidateTextMetrics();
            };
            TextBlockNode.prototype.InlineChanged = function (obj) {
                switch (obj.type) {
                    case 'font':
                        this.LayoutUpdater.invalidateFont(obj.full);
                        break;
                    case 'text':
                        this.LayoutUpdater.invalidateTextMetrics();
                        break;
                }
            };
            return TextBlockNode;
        })(Fayde.FENode);
        Controls.TextBlockNode = TextBlockNode;
        var TextBlock = (function (_super) {
            __extends(TextBlock, _super);
            function TextBlock() {
                var _this = this;
                _super.call(this);
                var inlines = TextBlock.InlinesProperty.Initialize(this);
                inlines.AttachTo(this);
                Fayde.ReactTo(inlines, this, function (change) { return _this.XamlNode.InlinesChanged(change.item, change.index, change.add); });
                Fayde.UIReaction(TextBlock.ForegroundProperty, function (upd, ov, nv) { return upd.invalidate(); }, true, true, this);
                Fayde.UIReaction(TextBlock.PaddingProperty, function (upd, ov, nv) { return upd.invalidateTextMetrics(); }, false, true, this);
                Fayde.UIReaction(TextBlock.LineStackingStrategyProperty, function (upd, ov, nv) { return upd.invalidateTextMetrics(); }, false, true, this);
                Fayde.UIReaction(TextBlock.LineHeightProperty, function (upd, ov, nv) { return upd.invalidateTextMetrics(); }, false, true, this);
                Fayde.UIReaction(TextBlock.TextAlignmentProperty, function (upd, ov, nv) { return upd.invalidateTextMetrics(); }, false, true, this);
                Fayde.UIReaction(TextBlock.TextTrimmingProperty, function (upd, ov, nv) { return upd.invalidateTextMetrics(); }, false, true, this);
                Fayde.UIReaction(TextBlock.TextWrappingProperty, function (upd, ov, nv) { return upd.invalidateTextMetrics(); }, false, true, this);
            }
            TextBlock.prototype.CreateNode = function () {
                return new TextBlockNode(this);
            };
            TextBlock.prototype.CreateLayoutUpdater = function () {
                return new TextBlockUpdater();
            };
            TextBlock.prototype.IsInheritable = function (propd) {
                if (TextBlockInheritedProps.indexOf(propd) > -1)
                    return true;
                return _super.prototype.IsInheritable.call(this, propd);
            };
            TextBlock.PaddingProperty = DependencyProperty.RegisterCore("Padding", function () { return Thickness; }, TextBlock);
            TextBlock.FontFamilyProperty = Fayde.InheritableOwner.FontFamilyProperty.ExtendTo(TextBlock);
            TextBlock.FontSizeProperty = Fayde.InheritableOwner.FontSizeProperty.ExtendTo(TextBlock);
            TextBlock.FontStretchProperty = Fayde.InheritableOwner.FontStretchProperty.ExtendTo(TextBlock);
            TextBlock.FontStyleProperty = Fayde.InheritableOwner.FontStyleProperty.ExtendTo(TextBlock);
            TextBlock.FontWeightProperty = Fayde.InheritableOwner.FontWeightProperty.ExtendTo(TextBlock);
            TextBlock.ForegroundProperty = Fayde.InheritableOwner.ForegroundProperty.ExtendTo(TextBlock);
            TextBlock.TextDecorationsProperty = Fayde.InheritableOwner.TextDecorationsProperty.ExtendTo(TextBlock);
            TextBlock.TextProperty = DependencyProperty.Register("Text", function () { return String; }, TextBlock, "", function (d, args) { return d.XamlNode.TextChanged(args); });
            TextBlock.InlinesProperty = DependencyProperty.RegisterImmutable("Inlines", function () { return Fayde.Documents.InlineCollection; }, TextBlock);
            TextBlock.LineStackingStrategyProperty = DependencyProperty.RegisterCore("LineStackingStrategy", function () { return new Fayde.Enum(Fayde.LineStackingStrategy); }, TextBlock, Fayde.LineStackingStrategy.MaxHeight);
            TextBlock.LineHeightProperty = DependencyProperty.RegisterCore("LineHeight", function () { return Number; }, TextBlock, NaN);
            TextBlock.TextAlignmentProperty = DependencyProperty.RegisterCore("TextAlignment", function () { return new Fayde.Enum(Fayde.TextAlignment); }, TextBlock, Fayde.TextAlignment.Left);
            TextBlock.TextTrimmingProperty = DependencyProperty.RegisterCore("TextTrimming", function () { return new Fayde.Enum(Controls.TextTrimming); }, TextBlock, Controls.TextTrimming.None);
            TextBlock.TextWrappingProperty = DependencyProperty.RegisterCore("TextWrapping", function () { return new Fayde.Enum(Controls.TextWrapping); }, TextBlock, Controls.TextWrapping.NoWrap);
            return TextBlock;
        })(Fayde.FrameworkElement);
        Controls.TextBlock = TextBlock;
        Fayde.CoreLibrary.add(TextBlock);
        Fayde.Markup.Content(TextBlock, TextBlock.InlinesProperty);
        Fayde.Markup.TextContent(TextBlock, TextBlock.TextProperty);
        var TextBlockInheritedProps = [
            TextBlock.FontFamilyProperty,
            TextBlock.FontSizeProperty,
            TextBlock.FontStretchProperty,
            TextBlock.FontStyleProperty,
            TextBlock.FontWeightProperty,
            TextBlock.ForegroundProperty
        ];
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
/// <reference path="TextBoxBase.ts" />
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        var TextBox = (function (_super) {
            __extends(TextBox, _super);
            function TextBox() {
                var _this = this;
                _super.call(this, Fayde.Text.EmitChangedType.TEXT | Fayde.Text.EmitChangedType.SELECTION);
                this.TextChanged = new Fayde.RoutedEvent();
                this.DefaultStyleKey = TextBox;
                var proxy = this.$Proxy;
                proxy.SyncSelectionStart = function (value) { return _this.SetCurrentValue(TextBox.SelectionStartProperty, value); };
                proxy.SyncSelectionLength = function (value) { return _this.SetCurrentValue(TextBox.SelectionLengthProperty, value); };
                proxy.SyncText = function (value) {
                    _this.SetCurrentValue(TextBox.TextProperty, value);
                    var args = new Fayde.RoutedEventArgs();
                    args.Source = _this;
                    _this.TextChanged.raise(_this, args);
                };
                this.$Advancer = new Controls.Internal.TextBoxCursorAdvancer(this.$Proxy);
            }
            TextBox.prototype.OnApplyTemplate = function () {
                _super.prototype.OnApplyTemplate.call(this);
                var vis = (this.TextWrapping === Controls.TextWrapping.Wrap) ? Controls.ScrollBarVisibility.Disabled : this.HorizontalScrollBarVisibility;
                this.$ContentProxy.setHorizontalScrollBar(vis);
                this.$ContentProxy.setVerticalScrollBar(this.VerticalScrollBarVisibility);
            };
            Object.defineProperty(TextBox.prototype, "DisplayText", {
                get: function () {
                    return this.Text;
                },
                enumerable: true,
                configurable: true
            });
            TextBox.prototype.OnMouseEnter = function (e) {
                _super.prototype.OnMouseEnter.call(this, e);
                this.UpdateVisualState();
            };
            TextBox.prototype.OnMouseLeave = function (e) {
                _super.prototype.OnMouseLeave.call(this, e);
                this.UpdateVisualState();
            };
            TextBox.prototype.OnGotFocus = function (e) {
                _super.prototype.OnGotFocus.call(this, e);
                this.UpdateVisualState();
            };
            TextBox.prototype.OnLostFocus = function (e) {
                _super.prototype.OnLostFocus.call(this, e);
                this.UpdateVisualState();
            };
            TextBox.prototype.GoToStateCommon = function (gotoFunc) {
                if (!this.IsEnabled)
                    return gotoFunc("Disabled");
                if (this.IsReadOnly)
                    return gotoFunc("ReadOnly");
                if (this.IsMouseOver)
                    return gotoFunc("MouseOver");
                return gotoFunc("Normal");
            };
            TextBox.prototype.SelectAll = function () {
                this.$Proxy.selectAll();
            };
            TextBox.prototype.Select = function (start, length) {
                this.$Proxy.select(start, length);
            };
            TextBox.AcceptsReturnProperty = DependencyProperty.Register("AcceptsReturn", function () { return Boolean; }, TextBox, false);
            TextBox.IsReadOnlyProperty = DependencyProperty.Register("IsReadOnly", function () { return Boolean; }, TextBox, false);
            TextBox.TextProperty = DependencyProperty.Register("Text", function () { return String; }, TextBox);
            TextBox.TextAlignmentProperty = DependencyProperty.Register("TextAlignment", function () { return new Fayde.Enum(Fayde.TextAlignment); }, TextBox, Fayde.TextAlignment.Left);
            TextBox.TextWrappingProperty = DependencyProperty.Register("TextWrapping", function () { return new Fayde.Enum(Controls.TextWrapping); }, TextBox, Controls.TextWrapping.NoWrap);
            TextBox.HorizontalScrollBarVisibilityProperty = DependencyProperty.Register("HorizontalScrollBarVisibility", function () { return new Fayde.Enum(Controls.ScrollBarVisibility); }, TextBox, Controls.ScrollBarVisibility.Hidden);
            TextBox.VerticalScrollBarVisibilityProperty = DependencyProperty.Register("VerticalScrollBarVisibility", function () { return new Fayde.Enum(Controls.ScrollBarVisibility); }, TextBox, Controls.ScrollBarVisibility.Hidden);
            return TextBox;
        })(Controls.TextBoxBase);
        Controls.TextBox = TextBox;
        Fayde.CoreLibrary.add(TextBox);
        Controls.TemplateVisualStates(TextBox, { GroupName: "CommonStates", Name: "Normal" }, { GroupName: "CommonStates", Name: "MouseOver" }, { GroupName: "CommonStates", Name: "Disabled" }, { GroupName: "CommonStates", Name: "ReadOnly" }, { GroupName: "FocusStates", Name: "Unfocused" }, { GroupName: "FocusStates", Name: "Focused" }, { GroupName: "ValidationStates", Name: "Valid" }, { GroupName: "ValidationStates", Name: "InvalidUnfocused" }, { GroupName: "ValidationStates", Name: "InvalidFocused" });
        Controls.TemplateParts(TextBox, { Name: "ContentElement", Type: Fayde.FrameworkElement });
        var reactions;
        (function (reactions) {
            Fayde.DPReaction(TextBox.AcceptsReturnProperty, function (tb, ov, nv) {
                tb.$Proxy.acceptsReturn = nv === true;
            }, false);
            Fayde.DPReaction(TextBox.IsReadOnlyProperty, function (tb, ov, nv) {
                tb.$View.setIsReadOnly(nv === true);
            }, false);
            Fayde.DPReaction(TextBox.TextAlignmentProperty, function (tb, ov, nv) { return tb.$View.setTextAlignment(nv); }, false);
            Fayde.DPReaction(TextBox.TextWrappingProperty, function (tb, ov, nv) {
                var vis = (nv === Controls.TextWrapping.Wrap) ? Controls.ScrollBarVisibility.Disabled : tb.HorizontalScrollBarVisibility;
                tb.$ContentProxy.setHorizontalScrollBar(vis);
                tb.$View.setTextWrapping(nv);
            }, false);
            Fayde.DPReaction(TextBox.HorizontalScrollBarVisibilityProperty, function (tb, ov, nv) {
                var vis = (tb.TextWrapping === Controls.TextWrapping.Wrap) ? Controls.ScrollBarVisibility.Disabled : tb.HorizontalScrollBarVisibility;
                tb.$ContentProxy.setHorizontalScrollBar(vis);
            }, false);
            Fayde.DPReaction(TextBox.VerticalScrollBarVisibilityProperty, function (tb, ov, nv) {
                tb.$ContentProxy.setVerticalScrollBar(nv);
            }, false);
            Fayde.DPReaction(TextBox.TextProperty, function (tb, ov, nv) {
                tb.$Proxy.setText(nv);
                tb.$View.setText(tb.DisplayText);
            }, false);
        })(reactions || (reactions = {}));
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
/// <reference path="ContentControl.ts" />
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        var ToolTip = (function (_super) {
            __extends(ToolTip, _super);
            function ToolTip() {
                _super.call(this);
                this._TooltipParent = null;
                this._TooltipParentDCListener = null;
                this.PlacementOverride = null;
                this.PlacementTargetOverride = null;
                this.Opened = new Fayde.RoutedEvent();
                this.Closed = new Fayde.RoutedEvent();
                this._ParentPopup = null;
                this.DefaultStyleKey = ToolTip;
            }
            Object.defineProperty(ToolTip.prototype, "TooltipParent", {
                get: function () { return this._TooltipParent; },
                set: function (value) {
                    if (this._TooltipParentDCListener)
                        this._TooltipParentDCListener.Detach();
                    this._TooltipParent = value;
                    if (this._TooltipParent)
                        this._TooltipParentDCListener = Fayde.DependencyObject.DataContextProperty.Store.ListenToChanged(this._TooltipParent, Fayde.DependencyObject.DataContextProperty, this.OnTooltipParentDataContextChanged, this);
                },
                enumerable: true,
                configurable: true
            });
            ToolTip.prototype.OnApplyTemplate = function () {
                _super.prototype.OnApplyTemplate.call(this);
                this.UpdateVisualState(false);
            };
            ToolTip.prototype.OnHorizontalOffsetChanged = function (args) {
                if (args.NewValue !== args.OldValue)
                    this.OnOffsetChanged(args.NewValue, 0);
            };
            ToolTip.prototype.OnVerticalOffsetChanged = function (args) {
                if (args.NewValue !== args.OldValue)
                    this.OnOffsetChanged(0, args.NewValue);
            };
            ToolTip.prototype.OnIsOpenChanged = function (args) {
                if (args.NewValue) {
                    if (!this._ParentPopup)
                        this.HookupParentPopup();
                    this._ParentPopup.IsOpen = true;
                    this.PerformPlacement(this.HorizontalOffset, this.VerticalOffset);
                }
                else {
                    this._ParentPopup.IsOpen = false;
                }
                this.UpdateVisualState();
            };
            ToolTip.prototype.OnOffsetChanged = function (horizontalOffset, verticalOffset) {
                if (!this._ParentPopup || !this.IsOpen)
                    return;
                this.PerformPlacement(horizontalOffset, verticalOffset);
            };
            ToolTip.prototype.OnLayoutUpdated = function (sender, e) {
                if (this._ParentPopup)
                    this.PerformPlacement(this.HorizontalOffset, this.VerticalOffset);
            };
            ToolTip.prototype.OnTooltipParentDataContextChanged = function (sender, args) {
                if (this._ParentPopup && this.TooltipParent)
                    this._ParentPopup.DataContext = this.TooltipParent.DataContext;
            };
            ToolTip.prototype.HookupParentPopup = function () {
                console.assert(!this._ParentPopup, "this._parentPopup should be null, we want to set visual tree once");
                var pp = this._ParentPopup = new Controls.Primitives.Popup();
                pp.DataContext = !this.TooltipParent ? null : this.TooltipParent.DataContext;
                pp.Opened.on(this.OnPopupOpened, this);
                pp.Closed.on(this.OnPopupClosed, this);
                this.IsTabStop = false;
                pp.XamlNode.RegisterInitiator(this._TooltipParent);
                pp.Child = this;
                pp.IsHitTestVisible = false;
                this.IsHitTestVisible = false;
            };
            ToolTip.prototype.OnPopupOpened = function (sender, e) {
                var args = new Fayde.RoutedEventArgs();
                args.OriginalSource = this;
                this.Opened.raise(this, args);
                this.LayoutUpdated.on(this.OnLayoutUpdated, this);
            };
            ToolTip.prototype.OnPopupClosed = function (sender, e) {
                var args = new Fayde.RoutedEventArgs();
                args.OriginalSource = this;
                this.Closed.raise(this, args);
                this.LayoutUpdated.off(this.OnLayoutUpdated, this);
            };
            ToolTip.prototype.PerformPlacement = function (horizontalOffset, verticalOffset) {
                if (!this.IsOpen)
                    return;
                var root = Fayde.Application.Current.RootVisual;
                if (!root)
                    return;
                var mode = this.PlacementOverride != null ? this.PlacementOverride : this.Placement;
                var target = (this.PlacementTargetOverride || this.PlacementTarget);
                var targetBounds = new minerva.Rect();
                var point = Controls.ToolTipService.MousePosition;
                if (mode !== Controls.PlacementMode.Mouse) {
                    point = new Point();
                    try {
                        if (target != null) {
                            targetBounds = new minerva.Rect(0, 0, target.ActualWidth, target.ActualHeight);
                            targetBounds = target.TransformToVisual(null).TransformBounds(targetBounds);
                            point.x = targetBounds.x;
                            point.y = targetBounds.y;
                        }
                    }
                    catch (err) {
                        console.warn("Could not transform the tooltip point.");
                        return;
                    }
                }
                switch (mode) {
                    case Controls.PlacementMode.Top:
                        point.y = targetBounds.y - this.ActualHeight;
                        break;
                    case Controls.PlacementMode.Bottom:
                        point.y = targetBounds.y + targetBounds.height;
                        break;
                    case Controls.PlacementMode.Left:
                        point.x = targetBounds.x - this.ActualWidth;
                        break;
                    case Controls.PlacementMode.Right:
                        point.x = targetBounds.x + targetBounds.width;
                        break;
                    case Controls.PlacementMode.Mouse:
                        point.y += new Controls.TextBox().FontSize;
                        break;
                    default:
                        throw new NotSupportedException("PlacementMode '" + mode + "' is not supported.");
                }
                var rootWidth = root.ActualWidth;
                if ((point.x + this.ActualWidth) > rootWidth) {
                    if (mode === Controls.PlacementMode.Right)
                        point.x = targetBounds.x - this.ActualWidth;
                    else
                        point.x = rootWidth - this.ActualWidth;
                }
                else if (point.x < 0) {
                    if (mode === Controls.PlacementMode.Left)
                        point.x = targetBounds.x + targetBounds.width;
                    else
                        point.x = 0;
                }
                var rootHeight = root.ActualHeight;
                if ((point.y + this.ActualHeight) > rootHeight) {
                    if (mode === Controls.PlacementMode.Bottom)
                        point.y = targetBounds.y - this.ActualHeight;
                    else
                        point.y = rootHeight - this.ActualHeight;
                }
                else if (point.y < 0) {
                    if (mode === Controls.PlacementMode.Top)
                        point.y = targetBounds.y + targetBounds.height;
                    else
                        point.y = 0;
                }
                this._ParentPopup.VerticalOffset = point.y;
                this._ParentPopup.HorizontalOffset = point.x;
            };
            ToolTip.prototype.GoToStates = function (gotoFunc) {
                if (this.IsOpen)
                    gotoFunc("Open");
                else
                    gotoFunc("Closed");
            };
            ToolTip.HorizontalOffsetProperty = DependencyProperty.Register("HorizontalOffset", function () { return Number; }, ToolTip, 0, function (d, args) { return d.OnHorizontalOffsetChanged(args); });
            ToolTip.VerticalOffsetProperty = DependencyProperty.Register("VerticalOffset", function () { return Number; }, ToolTip, 0, function (d, args) { return d.OnVerticalOffsetChanged(args); });
            ToolTip.IsOpenProperty = DependencyProperty.Register("IsOpen", function () { return Boolean; }, ToolTip, false, function (d, args) { return d.OnIsOpenChanged(args); });
            ToolTip.PlacementProperty = DependencyProperty.Register("Placement", function () { return new Fayde.Enum(Controls.PlacementMode); }, ToolTip, Controls.PlacementMode.Mouse);
            ToolTip.PlacementTargetProperty = DependencyProperty.Register("PlacementTarget", function () { return Fayde.UIElement; }, ToolTip);
            return ToolTip;
        })(Controls.ContentControl);
        Controls.ToolTip = ToolTip;
        Fayde.CoreLibrary.add(ToolTip);
        Controls.TemplateVisualStates(ToolTip, { GroupName: "OpenStates", Name: "Closed" }, { GroupName: "OpenStates", Name: "Open" });
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
var Point = (function (_super) {
    __extends(Point, _super);
    function Point() {
        _super.apply(this, arguments);
    }
    Point.prototype.Clone = function () {
        return new Point(this.x, this.y);
    };
    Point.LERP = function (start, end, p) {
        var x = start.x + (end.x - start.x) * p;
        var y = start.y + (end.y - start.y) * p;
        return new Point(x, y);
    };
    return Point;
})(minerva.Point);
Fayde.CoreLibrary.addPrimitive(Point);
nullstone.registerTypeConverter(Point, function (val) {
    if (!val)
        return new Point();
    if (val instanceof Point)
        return val;
    if (val instanceof minerva.Point)
        return new Point(val.x, val.y);
    var tokens = Fayde.splitCommaList(val.toString());
    if (tokens.length === 2) {
        var x = parseFloat(tokens[0]);
        var y = parseFloat(tokens[1]);
        return new Point(x, y);
    }
    throw new Exception("Cannot parse Point value '" + val + "'");
});
/// <reference path="../Core/DependencyObject.ts" />
/// <reference path="../Primitives/Point.ts" />
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        var AssignedToolTipProperty = DependencyProperty.Register("AssignedToolTip", function () { return Controls.ToolTip; }, Fayde.UIElement, null);
        var betweenShowDelay = 100;
        var initialShowDelay = 400;
        var showDuration = 5000;
        function toolTipChanged(dobj, args) {
            var owner = dobj;
            var tooltip = args.NewValue;
            if (args.OldValue)
                slave.UnregisterTooltip(owner);
            if (!tooltip)
                return;
            slave.RegisterTooltip(owner, tooltip);
            slave.SetRootVisual(owner);
        }
        var ToolTipService = (function () {
            function ToolTipService() {
            }
            ToolTipService.GetToolTip = function (dobj) { return dobj.GetValue(ToolTipService.ToolTipProperty); };
            ToolTipService.SetToolTip = function (dobj, value) { dobj.SetValue(ToolTipService.ToolTipProperty, value); };
            ToolTipService.GetPlacement = function (dobj) { return dobj.GetValue(ToolTipService.PlacementProperty); };
            ToolTipService.SetPlacement = function (dobj, value) { dobj.SetValue(ToolTipService.PlacementProperty, value); };
            ToolTipService.GetPlacementTarget = function (dobj) { return dobj.GetValue(ToolTipService.PlacementTargetProperty); };
            ToolTipService.SetPlacementTarget = function (dobj, value) { dobj.SetValue(ToolTipService.PlacementTargetProperty, value); };
            Object.defineProperty(ToolTipService, "MousePosition", {
                get: function () {
                    return slave.MousePosition;
                },
                enumerable: true,
                configurable: true
            });
            ToolTipService.ToolTipProperty = DependencyProperty.RegisterAttached("ToolTip", function () { return Fayde.DependencyObject; }, ToolTipService, undefined, toolTipChanged);
            ToolTipService.PlacementProperty = DependencyProperty.RegisterAttached("Placement", function () { return new Fayde.Enum(Controls.PlacementMode); }, ToolTipService);
            ToolTipService.PlacementTargetProperty = DependencyProperty.RegisterAttached("PlacementTarget", function () { return Fayde.UIElement; }, ToolTipService);
            return ToolTipService;
        })();
        Controls.ToolTipService = ToolTipService;
        Fayde.CoreLibrary.add(ToolTipService);
        var ToolTipServiceSlave = (function () {
            function ToolTipServiceSlave() {
                this.MousePosition = new Point();
                this._RootVisual = null;
                this._CurrentTooltip = null;
                this._LastEnterSource = null;
                this._LastOpened = 0;
                this._OpenInterval = null;
                this._CloseInterval = null;
            }
            ToolTipServiceSlave.prototype.SetRootVisual = function (owner) {
                if (this._RootVisual)
                    return;
                var updater = owner.XamlNode.LayoutUpdater;
                var surface = updater.tree.surface;
                if (!surface)
                    return;
                var rv = this._RootVisual = surface.App.RootVisual;
                if (!rv)
                    return;
                rv.MouseMove.on(this.OnRootMouseMove, this);
            };
            ToolTipServiceSlave.prototype.OnRootMouseMove = function (sender, e) {
                this.MousePosition = e.GetPosition(null);
            };
            ToolTipServiceSlave.prototype.RegisterTooltip = function (owner, tooltip) {
                console.assert(owner != null, "ToolTip must have an owner");
                console.assert(tooltip != null, "ToolTip can not be null");
                owner.MouseEnter.on(this.OnOwnerMouseEnter, this);
                owner.MouseLeave.on(this.OnOwnerMouseLeave, this);
                owner.MouseLeftButtonDown.on(this.OnOwnerMouseLeftButtonDown, this);
                owner.KeyDown.on(this.OnOwnerKeyDown, this);
                var converted = this.ConvertToToolTip(tooltip);
                owner.SetValue(AssignedToolTipProperty, converted);
                if (owner instanceof Fayde.FrameworkElement)
                    converted.TooltipParent = owner;
            };
            ToolTipServiceSlave.prototype.UnregisterTooltip = function (owner) {
                console.assert(owner != null, "owner element is required");
                var tooltip = owner.GetValue(AssignedToolTipProperty);
                if (!tooltip || !(tooltip instanceof Controls.ToolTip))
                    return;
                owner.MouseEnter.off(this.OnOwnerMouseEnter, this);
                owner.MouseLeave.off(this.OnOwnerMouseLeave, this);
                owner.MouseLeftButtonDown.off(this.OnOwnerMouseLeftButtonDown, this);
                owner.KeyDown.off(this.OnOwnerKeyDown, this);
                tooltip.TooltipParent = null;
                if (tooltip.IsOpen) {
                    if (tooltip === this._CurrentTooltip) {
                        window.clearInterval(this._CloseInterval);
                        this._CurrentTooltip = null;
                        this._Owner = null;
                        this._LastEnterSource = null;
                    }
                    tooltip.IsOpen = false;
                }
                owner.ClearValue(AssignedToolTipProperty);
            };
            ToolTipServiceSlave.prototype.OnOwnerMouseEnter = function (sender, e) {
                this.MousePosition = e.GetPosition(null);
                this.OnOwnerMouseEnterInternal(sender, e.OriginalSource);
            };
            ToolTipServiceSlave.prototype.OnOwnerMouseLeave = function (sender, e) {
                if (!this._CurrentTooltip) {
                    window.clearInterval(this._OpenInterval);
                    this._Owner = null;
                    this._LastEnterSource = null;
                    return;
                }
                this.CloseAutomaticToolTip();
            };
            ToolTipServiceSlave.prototype.OnOwnerMouseLeftButtonDown = function (sender, e) {
                if (this._LastEnterSource && this._LastEnterSource === e.OriginalSource)
                    return;
                if (this._Owner !== sender)
                    return;
                if (!this._CurrentTooltip) {
                    window.clearInterval(this._OpenInterval);
                    this._Owner = null;
                    this._LastEnterSource = null;
                    return;
                }
                this.CloseAutomaticToolTip();
            };
            ToolTipServiceSlave.prototype.OnOwnerKeyDown = function (sender, e) {
                if (this._LastEnterSource && this._LastEnterSource === e.OriginalSource)
                    return;
                if (this._Owner !== sender)
                    return;
                if (!this._CurrentTooltip) {
                    window.clearInterval(this._OpenInterval);
                    this._Owner = null;
                    this._LastEnterSource = null;
                    return;
                }
                if (isSpecialKey(e.Key))
                    return;
                this.CloseAutomaticToolTip();
            };
            ToolTipServiceSlave.prototype.OnOwnerMouseEnterInternal = function (sender, source) {
                var _this = this;
                if (this._LastEnterSource && this._LastEnterSource === source)
                    return;
                if (this._CurrentTooltip) {
                    if (sender.GetValue(AssignedToolTipProperty) === this._CurrentTooltip)
                        return;
                    this.CloseAutomaticToolTip();
                }
                this._Owner = sender;
                this._LastEnterSource = source;
                console.assert(!this._CurrentTooltip);
                this.SetRootVisual(sender);
                var sinceLastOpen = new Date().getTime() - this._LastOpened;
                if (sinceLastOpen <= betweenShowDelay) {
                    this.OpenAutomaticToolTip();
                }
                else {
                    this._OpenInterval = window.setInterval(function () { return _this.OpenAutomaticToolTip(); }, initialShowDelay);
                }
            };
            ToolTipServiceSlave.prototype.ConvertToToolTip = function (o) {
                if (o instanceof Controls.ToolTip)
                    return o;
                if (o instanceof Fayde.FrameworkElement) {
                    var parent = o.Parent;
                    if (parent instanceof Controls.ToolTip)
                        return parent;
                }
                var tooltip = new Controls.ToolTip();
                tooltip.Content = o;
                return tooltip;
            };
            ToolTipServiceSlave.prototype.OpenAutomaticToolTip = function () {
                var _this = this;
                window.clearInterval(this._OpenInterval);
                console.assert(this._Owner != null, "ToolTip owner was not set prior to starting the open timer");
                var cur = this._CurrentTooltip = this._Owner.GetValue(AssignedToolTipProperty);
                if (cur != null) {
                    cur.PlacementOverride = ToolTipService.GetPlacement(this._Owner);
                    cur.PlacementTargetOverride = ToolTipService.GetPlacementTarget(this._Owner) || this._Owner;
                    cur.IsOpen = true;
                    this._CloseInterval = window.setInterval(function () { return _this.CloseAutomaticToolTip(); }, showDuration);
                }
            };
            ToolTipServiceSlave.prototype.CloseAutomaticToolTip = function () {
                window.clearInterval(this._CloseInterval);
                var cur = this._CurrentTooltip;
                cur.PlacementOverride = null;
                cur.PlacementTargetOverride = null;
                cur.IsOpen = false;
                this._CurrentTooltip = null;
                this._Owner = null;
                this._LastEnterSource = null;
                this._LastOpened = new Date().getTime();
            };
            return ToolTipServiceSlave;
        })();
        var slave = new ToolTipServiceSlave();
        var specialKeys = [
            Fayde.Input.Key.Alt,
            Fayde.Input.Key.Back,
            Fayde.Input.Key.Delete,
            Fayde.Input.Key.Down,
            Fayde.Input.Key.End,
            Fayde.Input.Key.Home,
            Fayde.Input.Key.Insert,
            Fayde.Input.Key.Left,
            Fayde.Input.Key.PageDown,
            Fayde.Input.Key.PageUp,
            Fayde.Input.Key.Right,
            Fayde.Input.Key.Space,
            Fayde.Input.Key.Up
        ];
        function isSpecialKey(key) {
            return specialKeys.indexOf(key) > -1;
        }
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
/// <reference path="Panel.ts" />
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        (function (VirtualizationMode) {
            VirtualizationMode[VirtualizationMode["Standard"] = 0] = "Standard";
            VirtualizationMode[VirtualizationMode["Recycling"] = 1] = "Recycling";
        })(Controls.VirtualizationMode || (Controls.VirtualizationMode = {}));
        var VirtualizationMode = Controls.VirtualizationMode;
        Fayde.CoreLibrary.addEnum(VirtualizationMode, "VirtualizationMode");
        var VirtualizingPanel = (function (_super) {
            __extends(VirtualizingPanel, _super);
            function VirtualizingPanel() {
                _super.apply(this, arguments);
            }
            VirtualizingPanel.GetVirtualizationMode = function (d) { return d.GetValue(VirtualizingPanel.VirtualizationModeProperty); };
            VirtualizingPanel.SetVirtualizationMode = function (d, value) { d.SetValue(VirtualizingPanel.VirtualizationModeProperty, value); };
            VirtualizingPanel.GetIsVirtualizing = function (d) { return d.GetValue(VirtualizingPanel.IsVirtualizingProperty); };
            VirtualizingPanel.SetIsVirtualizing = function (d, value) { d.SetValue(VirtualizingPanel.IsVirtualizingProperty, value); };
            Object.defineProperty(VirtualizingPanel.prototype, "ItemsControl", {
                get: function () {
                    var presenter = Controls.ItemsPresenter.Get(this);
                    return presenter ? presenter.ItemsControl : null;
                },
                enumerable: true,
                configurable: true
            });
            VirtualizingPanel.prototype.OnItemsAdded = function (index, newItems) {
                this.XamlNode.LayoutUpdater.invalidateMeasure();
            };
            VirtualizingPanel.prototype.OnItemsRemoved = function (index, oldItems) {
                this.XamlNode.LayoutUpdater.invalidateMeasure();
            };
            VirtualizingPanel.VirtualizationModeProperty = DependencyProperty.RegisterAttached("VirtualizationMode", function () { return new Fayde.Enum(VirtualizationMode); }, VirtualizingPanel, VirtualizationMode.Recycling);
            VirtualizingPanel.IsVirtualizingProperty = DependencyProperty.RegisterAttached("IsVirtualizing", function () { return Boolean; }, VirtualizingPanel, false);
            return VirtualizingPanel;
        })(Controls.Panel);
        Controls.VirtualizingPanel = VirtualizingPanel;
        Fayde.CoreLibrary.add(VirtualizingPanel);
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
/// <reference path="VirtualizingPanel.ts" />
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        var LineDelta = 14.7;
        var Wheelitude = 3;
        var VirtualizingStackPanelUpdater = minerva.controls.virtualizingstackpanel.VirtualizingStackPanelUpdater;
        var VirtualizingStackPanel = (function (_super) {
            __extends(VirtualizingStackPanel, _super);
            function VirtualizingStackPanel() {
                _super.apply(this, arguments);
            }
            VirtualizingStackPanel.prototype.CreateLayoutUpdater = function () {
                var updater = new VirtualizingStackPanelUpdater();
                updater.assets.scrollData = this._ScrollData = new Controls.Primitives.ScrollData();
                updater.tree.containerOwner = new Controls.Internal.VirtualizingPanelContainerOwner(this);
                return updater;
            };
            Object.defineProperty(VirtualizingStackPanel.prototype, "ScrollOwner", {
                get: function () {
                    return this._ScrollData.scrollOwner;
                },
                set: function (value) {
                    this._ScrollData.scrollOwner = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(VirtualizingStackPanel.prototype, "CanHorizontallyScroll", {
                get: function () {
                    return this._ScrollData.canHorizontallyScroll;
                    ;
                },
                set: function (value) {
                    var sd = this._ScrollData;
                    if (sd.canHorizontallyScroll !== value) {
                        sd.canHorizontallyScroll = value;
                        this.XamlNode.LayoutUpdater.invalidateMeasure();
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(VirtualizingStackPanel.prototype, "CanVerticallyScroll", {
                get: function () {
                    return this._ScrollData.canVerticallyScroll;
                },
                set: function (value) {
                    var sd = this._ScrollData;
                    if (sd.canVerticallyScroll !== value) {
                        sd.canVerticallyScroll = value;
                        this.XamlNode.LayoutUpdater.invalidateMeasure();
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(VirtualizingStackPanel.prototype, "ExtentWidth", {
                get: function () {
                    return this._ScrollData.extentWidth;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(VirtualizingStackPanel.prototype, "ExtentHeight", {
                get: function () {
                    return this._ScrollData.extentHeight;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(VirtualizingStackPanel.prototype, "ViewportWidth", {
                get: function () {
                    return this._ScrollData.viewportWidth;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(VirtualizingStackPanel.prototype, "ViewportHeight", {
                get: function () {
                    return this._ScrollData.viewportHeight;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(VirtualizingStackPanel.prototype, "HorizontalOffset", {
                get: function () {
                    return this._ScrollData.offsetX;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(VirtualizingStackPanel.prototype, "VerticalOffset", {
                get: function () {
                    return this._ScrollData.offsetY;
                },
                enumerable: true,
                configurable: true
            });
            VirtualizingStackPanel.prototype.LineUp = function () {
                var sd = this._ScrollData;
                if (this.Orientation === Fayde.Orientation.Horizontal)
                    return this.SetVerticalOffset(sd.offsetY - LineDelta);
                return this.SetVerticalOffset(sd.offsetY - 1);
            };
            VirtualizingStackPanel.prototype.LineDown = function () {
                var sd = this._ScrollData;
                if (this.Orientation === Fayde.Orientation.Horizontal)
                    return this.SetVerticalOffset(sd.offsetY + LineDelta);
                return this.SetVerticalOffset(sd.offsetY + 1);
            };
            VirtualizingStackPanel.prototype.LineLeft = function () {
                var sd = this._ScrollData;
                if (this.Orientation === Fayde.Orientation.Vertical)
                    return this.SetHorizontalOffset(sd.offsetX - LineDelta);
                return this.SetHorizontalOffset(sd.offsetX - 1);
            };
            VirtualizingStackPanel.prototype.LineRight = function () {
                var sd = this._ScrollData;
                if (this.Orientation === Fayde.Orientation.Vertical)
                    return this.SetHorizontalOffset(sd.offsetX + LineDelta);
                return this.SetHorizontalOffset(sd.offsetX + 1);
            };
            VirtualizingStackPanel.prototype.MouseWheelUp = function () {
                var sd = this._ScrollData;
                if (this.Orientation === Fayde.Orientation.Horizontal)
                    return this.SetVerticalOffset(sd.offsetY - LineDelta * Wheelitude);
                return this.SetVerticalOffset(sd.offsetY - Wheelitude);
            };
            VirtualizingStackPanel.prototype.MouseWheelDown = function () {
                var sd = this._ScrollData;
                if (this.Orientation === Fayde.Orientation.Horizontal)
                    return this.SetVerticalOffset(sd.offsetY + LineDelta * Wheelitude);
                return this.SetVerticalOffset(sd.offsetY + Wheelitude);
            };
            VirtualizingStackPanel.prototype.MouseWheelLeft = function () {
                var sd = this._ScrollData;
                if (this.Orientation === Fayde.Orientation.Vertical)
                    return this.SetHorizontalOffset(sd.offsetX - LineDelta * Wheelitude);
                return this.SetHorizontalOffset(sd.offsetX - Wheelitude);
            };
            VirtualizingStackPanel.prototype.MouseWheelRight = function () {
                var sd = this._ScrollData;
                if (this.Orientation === Fayde.Orientation.Vertical)
                    return this.SetHorizontalOffset(sd.offsetX + LineDelta * Wheelitude);
                return this.SetHorizontalOffset(sd.offsetX + Wheelitude);
            };
            VirtualizingStackPanel.prototype.PageUp = function () {
                var sd = this._ScrollData;
                return this.SetVerticalOffset(sd.offsetY - sd.viewportHeight);
            };
            VirtualizingStackPanel.prototype.PageDown = function () {
                var sd = this._ScrollData;
                return this.SetVerticalOffset(sd.offsetY + sd.viewportHeight);
            };
            VirtualizingStackPanel.prototype.PageLeft = function () {
                var sd = this._ScrollData;
                return this.SetHorizontalOffset(sd.offsetX - sd.viewportWidth);
            };
            VirtualizingStackPanel.prototype.PageRight = function () {
                var sd = this._ScrollData;
                return this.SetHorizontalOffset(sd.offsetX + sd.viewportWidth);
            };
            VirtualizingStackPanel.prototype.MakeVisible = function (uie, rectangle) {
                var exposed = new minerva.Rect();
                var sd = this._ScrollData;
                var uin = uie.XamlNode;
                var isVertical = this.Orientation === Fayde.Orientation.Vertical;
                var enumerator = this.Children.getEnumerator();
                while (enumerator.moveNext()) {
                    var child = enumerator.current;
                    var childNode = child.XamlNode;
                    var childRenderSize = childNode.LayoutUpdater.assets.renderSize;
                    if (uin === childNode) {
                        if (isVertical) {
                            if (rectangle.x !== sd.offsetX)
                                this.SetHorizontalOffset(rectangle.x);
                            exposed.width = Math.min(childRenderSize.width, sd.viewportWidth);
                            exposed.height = childRenderSize.height;
                            exposed.x = sd.offsetX;
                        }
                        else {
                            if (rectangle.y !== sd.offsetY)
                                this.SetVerticalOffset(rectangle.y);
                            exposed.height = Math.min(childRenderSize.height, sd.viewportHeight);
                            exposed.width = childRenderSize.width;
                            exposed.y = sd.offsetY;
                        }
                        return exposed;
                    }
                    if (isVertical)
                        exposed.y += childRenderSize.height;
                    else
                        exposed.x += childRenderSize.width;
                }
                throw new ArgumentException("Visual is not a child of this Panel");
            };
            VirtualizingStackPanel.prototype.SetHorizontalOffset = function (offset) {
                var sd = this._ScrollData;
                if (offset < 0 || sd.viewportWidth >= sd.extentWidth)
                    offset = 0;
                else if ((offset + sd.viewportWidth) >= sd.extentWidth)
                    offset = sd.extentWidth - sd.viewportWidth;
                if (sd.offsetX === offset)
                    return false;
                sd.offsetX = offset;
                if (this.Orientation === Fayde.Orientation.Horizontal)
                    this.XamlNode.LayoutUpdater.invalidateMeasure();
                else
                    this.XamlNode.LayoutUpdater.invalidateArrange();
                var scrollOwner = this.ScrollOwner;
                if (scrollOwner)
                    scrollOwner.InvalidateScrollInfo();
                return true;
            };
            VirtualizingStackPanel.prototype.SetVerticalOffset = function (offset) {
                var sd = this._ScrollData;
                if (offset < 0 || sd.viewportHeight >= sd.extentHeight)
                    offset = 0;
                else if ((offset + sd.viewportHeight) >= sd.extentHeight)
                    offset = sd.extentHeight - sd.viewportHeight;
                if (sd.offsetY === offset)
                    return false;
                sd.offsetY = offset;
                if (this.Orientation === Fayde.Orientation.Vertical)
                    this.XamlNode.LayoutUpdater.invalidateMeasure();
                else
                    this.XamlNode.LayoutUpdater.invalidateArrange();
                var scrollOwner = this.ScrollOwner;
                if (scrollOwner)
                    scrollOwner.InvalidateScrollInfo();
                return true;
            };
            VirtualizingStackPanel.prototype.OnItemsAdded = function (index, newItems) {
                _super.prototype.OnItemsAdded.call(this, index, newItems);
                var isHorizontal = this.Orientation === Fayde.Orientation.Horizontal;
                var offset = isHorizontal ? this.HorizontalOffset : this.VerticalOffset;
                if (index <= offset)
                    isHorizontal ? this.SetHorizontalOffset(offset + newItems.length) : this.SetVerticalOffset(offset + newItems.length);
                var scrollOwner = this.ScrollOwner;
                if (scrollOwner)
                    scrollOwner.InvalidateScrollInfo();
            };
            VirtualizingStackPanel.prototype.OnItemsRemoved = function (index, oldItems) {
                _super.prototype.OnItemsRemoved.call(this, index, oldItems);
                var ic = this.ItemsControl;
                if (ic) {
                    var icm = ic.ItemContainersManager;
                    var children = this.Children;
                    for (var i = 0, len = oldItems.length; i < len; i++) {
                        var oldItem = oldItems[i];
                        var container = icm.ContainerFromItem(oldItem);
                        if (container)
                            children.Remove(container);
                    }
                }
                var isHorizontal = this.Orientation === Fayde.Orientation.Horizontal;
                var offset = isHorizontal ? this.HorizontalOffset : this.VerticalOffset;
                var numBeforeOffset = Math.min(offset, index + oldItems.length) - index;
                if (numBeforeOffset > 0)
                    isHorizontal ? this.SetHorizontalOffset(numBeforeOffset) : this.SetVerticalOffset(numBeforeOffset);
                var scrollOwner = this.ScrollOwner;
                if (scrollOwner)
                    scrollOwner.InvalidateScrollInfo();
            };
            VirtualizingStackPanel.OrientationProperty = DependencyProperty.Register("Orientation", function () { return new Fayde.Enum(Fayde.Orientation); }, VirtualizingStackPanel, Fayde.Orientation.Vertical);
            return VirtualizingStackPanel;
        })(Controls.VirtualizingPanel);
        Controls.VirtualizingStackPanel = VirtualizingStackPanel;
        Fayde.CoreLibrary.add(VirtualizingStackPanel);
        nullstone.addTypeInterfaces(VirtualizingStackPanel, Controls.Primitives.IScrollInfo_);
        var reactions;
        (function (reactions) {
            Fayde.UIReaction(VirtualizingStackPanel.OrientationProperty, function (upd, ov, nv) { return upd.invalidateMeasure(); }, false);
        })(reactions || (reactions = {}));
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    function Clone(value) {
        if (value === undefined)
            return undefined;
        if (value === null)
            return null;
        if (value instanceof Array)
            return value.slice(0);
        if (value !== Object(value))
            return value;
        if (value.Clone instanceof Function)
            return value.Clone();
        return extend(new value.constructor(), value);
    }
    Fayde.Clone = Clone;
    function extend(obj) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var s;
        for (var i = 0, len = args.length; i < len; i++) {
            if (s = args[i]) {
                for (var prop in s) {
                    obj[prop] = s[prop];
                }
            }
        }
        return obj;
    }
})(Fayde || (Fayde = {}));
/// <reference path="../Markup/Loader" />
var Fayde;
(function (Fayde) {
    var DataTemplate = (function (_super) {
        __extends(DataTemplate, _super);
        function DataTemplate() {
            _super.apply(this, arguments);
        }
        DataTemplate.DataTypeProperty = DependencyProperty.Register("DataType", function () { return Fayde.IType_; }, DataTemplate);
        return DataTemplate;
    })(Fayde.Markup.FrameworkTemplate);
    Fayde.DataTemplate = DataTemplate;
    Fayde.CoreLibrary.add(DataTemplate);
})(Fayde || (Fayde = {}));
var DependencyPropertyChangedEventArgs = (function () {
    function DependencyPropertyChangedEventArgs() {
    }
    return DependencyPropertyChangedEventArgs;
})();
/// <reference path="DataTemplate.ts" />
var Fayde;
(function (Fayde) {
    var HierarchicalDataTemplate = (function (_super) {
        __extends(HierarchicalDataTemplate, _super);
        function HierarchicalDataTemplate() {
            _super.apply(this, arguments);
        }
        HierarchicalDataTemplate.ItemsSourceProperty = DependencyProperty.Register("ItemsSource", function () { return nullstone.IEnumerable_; }, HierarchicalDataTemplate);
        HierarchicalDataTemplate.ItemTemplateProperty = DependencyProperty.Register("ItemTemplate", function () { return Fayde.DataTemplate; }, HierarchicalDataTemplate);
        HierarchicalDataTemplate.ItemContainerStyleProperty = DependencyProperty.Register("ItemContainerStyle", function () { return Fayde.Style; }, HierarchicalDataTemplate);
        return HierarchicalDataTemplate;
    })(Fayde.DataTemplate);
    Fayde.HierarchicalDataTemplate = HierarchicalDataTemplate;
    Fayde.CoreLibrary.add(HierarchicalDataTemplate);
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var LayoutInformation = (function () {
        function LayoutInformation() {
        }
        LayoutInformation.GetLayoutClip = function (uie) {
            var rect = new minerva.Rect();
            minerva.Rect.copyTo(uie.XamlNode.LayoutUpdater.assets.layoutClip, rect);
            var geom = new Fayde.Media.RectangleGeometry();
            geom.Rect = rect;
            return geom;
        };
        LayoutInformation.GetLayoutSlot = function (uie) {
            var rect = new minerva.Rect();
            minerva.Rect.copyTo(uie.XamlNode.LayoutUpdater.assets.layoutSlot, rect);
            return rect;
        };
        return LayoutInformation;
    })();
    Fayde.LayoutInformation = LayoutInformation;
    Fayde.CoreLibrary.add(LayoutInformation);
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var NameScope = (function () {
        function NameScope(isRoot) {
            this.IsRoot = false;
            this.XNodes = {};
            if (isRoot)
                this.IsRoot = isRoot;
        }
        NameScope.prototype.FindName = function (name) {
            return this.XNodes[name];
        };
        NameScope.prototype.RegisterName = function (name, xnode) {
            var existing = this.XNodes[name];
            if (existing && existing !== xnode)
                throw new InvalidOperationException("Name is already registered.");
            this.XNodes[name] = xnode;
        };
        NameScope.prototype.UnregisterName = function (name) {
            this.XNodes[name] = undefined;
        };
        NameScope.prototype.Absorb = function (otherNs) {
            var on = otherNs.XNodes;
            for (var name in on) {
                this.RegisterName(name, on[name]);
            }
        };
        return NameScope;
    })();
    Fayde.NameScope = NameScope;
})(Fayde || (Fayde = {}));
/// <reference path="DependencyObject.ts" />
/// <reference path="XamlObjectCollection.ts" />
var Fayde;
(function (Fayde) {
    var ResourceDictionaryCollection = (function (_super) {
        __extends(ResourceDictionaryCollection, _super);
        function ResourceDictionaryCollection() {
            _super.apply(this, arguments);
        }
        ResourceDictionaryCollection.prototype.Get = function (key) {
            for (var en = this.getEnumerator(); en.moveNext();) {
                var cur = en.current.Get(key);
                if (cur !== undefined)
                    return cur;
            }
            return undefined;
        };
        ResourceDictionaryCollection.prototype.AddingToCollection = function (value, error) {
            if (!_super.prototype.AddingToCollection.call(this, value, error))
                return false;
            return this._AssertNoCycles(value, value.XamlNode.ParentNode, error);
        };
        ResourceDictionaryCollection.prototype._AssertNoCycles = function (subtreeRoot, firstAncestorNode, error) {
            var curNode = firstAncestorNode;
            while (curNode) {
                var rd = curNode.XObject;
                if (rd instanceof ResourceDictionary) {
                    var cycleFound = false;
                    if (rd === subtreeRoot)
                        cycleFound = true;
                    else if (rd.Source && nullstone.equals(rd.Source, subtreeRoot.Source))
                        cycleFound = true;
                    if (cycleFound) {
                        error.Message = "Cycle found in resource dictionaries.";
                        error.Number = BError.InvalidOperation;
                        return false;
                    }
                }
                curNode = curNode.ParentNode;
            }
            for (var en = subtreeRoot.MergedDictionaries.getEnumerator(); en.moveNext();) {
                if (!this._AssertNoCycles(en.current, firstAncestorNode, error))
                    return false;
            }
            return true;
        };
        return ResourceDictionaryCollection;
    })(Fayde.XamlObjectCollection);
    Fayde.ResourceDictionaryCollection = ResourceDictionaryCollection;
    Fayde.CoreLibrary.add(ResourceDictionaryCollection);
    var ResourceDictionary = (function (_super) {
        __extends(ResourceDictionary, _super);
        function ResourceDictionary() {
            _super.apply(this, arguments);
            this._Keys = [];
            this._Values = [];
            this._IsSourceLoaded = false;
            this._SourceBacking = null;
        }
        Object.defineProperty(ResourceDictionary.prototype, "MergedDictionaries", {
            get: function () {
                var md = this._MergedDictionaries;
                if (!md) {
                    md = this._MergedDictionaries = new ResourceDictionaryCollection();
                    md.AttachTo(this);
                }
                return md;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ResourceDictionary.prototype, "Count", {
            get: function () {
                return this._Values.length;
            },
            enumerable: true,
            configurable: true
        });
        ResourceDictionary.prototype.AttachTo = function (xobj) {
            var error = new BError();
            if (!this.XamlNode.AttachTo(xobj.XamlNode, error))
                error.ThrowException();
        };
        ResourceDictionary.prototype.Contains = function (key) {
            return this._Keys.indexOf(key) > -1;
        };
        ResourceDictionary.prototype.Get = function (key) {
            if (!!this.Source) {
                return this._GetFromSource(key);
            }
            var index = this._Keys.indexOf(key);
            if (index > -1)
                return this._Values[index];
            var md = this._MergedDictionaries;
            if (md)
                return md.Get(key);
            return undefined;
        };
        ResourceDictionary.prototype.Set = function (key, value) {
            if (key === undefined)
                return false;
            if (value === undefined)
                return this.Remove(key);
            var index = this._Keys.indexOf(key);
            var error = new BError();
            if (value instanceof Fayde.XamlObject && !value.XamlNode.AttachTo(this.XamlNode, error)) {
                if (error.Message)
                    throw new Exception(error.Message);
                return false;
            }
            if (index < 0) {
                this._Keys.push(key);
                this._Values.push(value);
            }
            else {
                var oldValue = this._Values[index];
                this._Keys[index] = key;
                this._Values[index] = value;
                if (oldValue instanceof Fayde.XamlObject)
                    oldValue.XamlNode.Detach();
            }
            return true;
        };
        ResourceDictionary.prototype.Remove = function (key) {
            var index = this._Keys.indexOf(key);
            if (index < 0)
                return false;
            this._Keys.splice(index, 1);
            var oldvalue = this._Values.splice(index, 1)[0];
            if (oldvalue instanceof Fayde.XamlObject)
                oldvalue.XamlNode.Detach();
        };
        ResourceDictionary.prototype.getEnumerator = function (reverse) {
            return nullstone.IEnumerator_.fromArray(this._Values, reverse);
        };
        ResourceDictionary.prototype.GetNodeEnumerator = function (reverse) {
            var prev = this.getEnumerator(reverse);
            return {
                current: undefined,
                moveNext: function () {
                    if (prev.moveNext()) {
                        this.current = undefined;
                        return false;
                    }
                    var xobj = prev.current;
                    this.current = xobj.XamlNode;
                    return true;
                }
            };
        };
        ResourceDictionary.prototype._GetFromSource = function (key) {
            if (!this._IsSourceLoaded) {
                this._SourceBacking = Fayde.Markup.Load(this.App, nullstone.markup.xaml.XamlMarkup.create(this.Source));
                this._IsSourceLoaded = true;
            }
            return this._SourceBacking.Get(key);
        };
        return ResourceDictionary;
    })(Fayde.XamlObject);
    Fayde.ResourceDictionary = ResourceDictionary;
    Fayde.CoreLibrary.add(ResourceDictionary);
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var RoutedEvent = (function (_super) {
        __extends(RoutedEvent, _super);
        function RoutedEvent() {
            _super.apply(this, arguments);
        }
        return RoutedEvent;
    })(nullstone.Event);
    Fayde.RoutedEvent = RoutedEvent;
    Fayde.CoreLibrary.add(RoutedEvent);
})(Fayde || (Fayde = {}));
/// <reference path="RoutedEvent.ts" />
/// <reference path="RoutedEventArgs.ts" />
var Fayde;
(function (Fayde) {
    var RoutedPropertyChangedEvent = (function (_super) {
        __extends(RoutedPropertyChangedEvent, _super);
        function RoutedPropertyChangedEvent() {
            _super.apply(this, arguments);
        }
        return RoutedPropertyChangedEvent;
    })(Fayde.RoutedEvent);
    Fayde.RoutedPropertyChangedEvent = RoutedPropertyChangedEvent;
    Fayde.CoreLibrary.add(RoutedPropertyChangedEvent);
    var RoutedPropertyChangedEventArgs = (function (_super) {
        __extends(RoutedPropertyChangedEventArgs, _super);
        function RoutedPropertyChangedEventArgs(oldValue, newValue) {
            _super.call(this);
            Object.defineProperty(this, "OldValue", { value: oldValue, writable: false });
            Object.defineProperty(this, "NewValue", { value: newValue, writable: false });
        }
        return RoutedPropertyChangedEventArgs;
    })(Fayde.RoutedEventArgs);
    Fayde.RoutedPropertyChangedEventArgs = RoutedPropertyChangedEventArgs;
    Fayde.CoreLibrary.add(RoutedPropertyChangedEventArgs);
})(Fayde || (Fayde = {}));
/// <reference path="RoutedEvent.ts" />
/// <reference path="RoutedEventArgs.ts" />
var Fayde;
(function (Fayde) {
    var RoutedPropertyChangingEvent = (function (_super) {
        __extends(RoutedPropertyChangingEvent, _super);
        function RoutedPropertyChangingEvent() {
            _super.apply(this, arguments);
        }
        return RoutedPropertyChangingEvent;
    })(Fayde.RoutedEvent);
    Fayde.RoutedPropertyChangingEvent = RoutedPropertyChangingEvent;
    Fayde.CoreLibrary.add(RoutedPropertyChangingEvent);
    var RoutedPropertyChangingEventArgs = (function (_super) {
        __extends(RoutedPropertyChangingEventArgs, _super);
        function RoutedPropertyChangingEventArgs(propd, oldValue, newValue, isCancelable) {
            _super.call(this);
            this._Cancel = false;
            this.InCoercion = false;
            this.Property = propd;
            this.OldValue = oldValue;
            this.NewValue = newValue;
            this._IsCancelable = isCancelable;
        }
        Object.defineProperty(RoutedPropertyChangingEventArgs.prototype, "IsCancellable", {
            get: function () { return this._IsCancelable; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RoutedPropertyChangingEventArgs.prototype, "Cancel", {
            get: function () { return this._Cancel; },
            set: function (value) {
                if (this._IsCancelable)
                    this._Cancel = value;
                else if (value)
                    throw new InvalidOperationException("Not cancelable.");
            },
            enumerable: true,
            configurable: true
        });
        return RoutedPropertyChangingEventArgs;
    })(Fayde.RoutedEventArgs);
    Fayde.RoutedPropertyChangingEventArgs = RoutedPropertyChangingEventArgs;
    Fayde.CoreLibrary.add(RoutedPropertyChangingEventArgs);
})(Fayde || (Fayde = {}));
/// <reference path="DependencyObject.ts" />
/// <reference path="XamlObjectCollection.ts" />
var Fayde;
(function (Fayde) {
    var SetterCollection = (function (_super) {
        __extends(SetterCollection, _super);
        function SetterCollection() {
            _super.apply(this, arguments);
            this._IsSealed = false;
        }
        SetterCollection.prototype.Seal = function () {
            if (this._IsSealed)
                return;
            for (var en = this.getEnumerator(); en.moveNext();) {
                en.current.Seal();
            }
            this._IsSealed = true;
        };
        SetterCollection.prototype.AddingToCollection = function (value, error) {
            if (!value || !this._ValidateSetter(value, error))
                return false;
            return _super.prototype.AddingToCollection.call(this, value, error);
        };
        SetterCollection.prototype._ValidateSetter = function (setter, error) {
            if (!(setter.Property instanceof DependencyProperty)) {
                error.Message = "Setter.Property must be a DependencyProperty.";
                return false;
            }
            if (setter.Value === undefined) {
                if (!setter._HasDeferredValueExpression(Setter.ValueProperty)) {
                    error.Message = "Setter must have a Value.";
                    return false;
                }
            }
            if (this._IsSealed) {
                error.Message = "Setter is sealed.";
                return false;
            }
            return true;
        };
        return SetterCollection;
    })(Fayde.XamlObjectCollection);
    Fayde.SetterCollection = SetterCollection;
    Fayde.CoreLibrary.add(SetterCollection);
    var Setter = (function (_super) {
        __extends(Setter, _super);
        function Setter() {
            _super.apply(this, arguments);
            this._IsSealed = false;
        }
        Setter.prototype.Seal = function () {
            var propd = this.Property;
            var val = this.Value;
            var propTargetType = propd.GetTargetType();
            this.SetCurrentValue(Setter.ConvertedValueProperty, nullstone.convertAnyToType(val, propTargetType));
            this._IsSealed = true;
        };
        Setter.Compare = function (setter1, setter2) {
            var a = setter1.Property;
            var b = setter2.Property;
            return (a === b) ? 0 : ((a._ID > b._ID) ? 1 : -1);
        };
        Setter.PropertyProperty = DependencyProperty.Register("Property", function () { return DependencyProperty; }, Setter);
        Setter.ValueProperty = DependencyProperty.Register("Value", function () { return Object; }, Setter);
        Setter.ConvertedValueProperty = DependencyProperty.RegisterReadOnly("ConvertedValue", function () { return Object; }, Setter);
        return Setter;
    })(Fayde.DependencyObject);
    Fayde.Setter = Setter;
    Fayde.CoreLibrary.add(Setter);
})(Fayde || (Fayde = {}));
/// <reference path="RoutedEventArgs.ts" />
var Fayde;
(function (Fayde) {
    var SizeChangedEventArgs = (function (_super) {
        __extends(SizeChangedEventArgs, _super);
        function SizeChangedEventArgs(previousSize, newSize) {
            _super.call(this);
            Object.defineProperty(this, "PreviousSize", { value: new minerva.Size(), writable: false });
            Object.defineProperty(this, "NewSize", { value: new minerva.Size(), writable: false });
            minerva.Size.copyTo(previousSize, this.PreviousSize);
            minerva.Size.copyTo(newSize, this.NewSize);
        }
        return SizeChangedEventArgs;
    })(Fayde.RoutedEventArgs);
    Fayde.SizeChangedEventArgs = SizeChangedEventArgs;
    Fayde.CoreLibrary.add(SizeChangedEventArgs);
})(Fayde || (Fayde = {}));
/// <reference path="DependencyObject.ts" />
var Fayde;
(function (Fayde) {
    var Style = (function (_super) {
        __extends(Style, _super);
        function Style() {
            _super.call(this);
            this._IsSealed = false;
            var coll = Style.SettersProperty.Initialize(this);
            coll.AttachTo(this);
        }
        Style.prototype.Seal = function () {
            if (this._IsSealed)
                return;
            this.Setters.Seal();
            this._IsSealed = true;
            var base = this.BasedOn;
            if (base)
                base.Seal();
        };
        Style.prototype.Validate = function (instance, error) {
            var targetType = this.TargetType;
            var parentType = instance.constructor;
            if (this._IsSealed) {
                if (!(instance instanceof targetType)) {
                    error.Number = BError.XamlParse;
                    error.Message = "Style.TargetType (" + targetType.name + ") is not a subclass of (" + parentType.name + ")";
                    return false;
                }
                return true;
            }
            var cycles = [];
            var root = this;
            while (root) {
                if (cycles.indexOf(root) > -1) {
                    error.Number = BError.InvalidOperation;
                    error.Message = "Circular reference in Style.BasedOn";
                    return false;
                }
                cycles.push(root);
                root = root.BasedOn;
            }
            cycles = null;
            root = this;
            var targetType;
            while (root) {
                targetType = root.TargetType;
                if (root === this) {
                    if (!targetType) {
                        error.Number = BError.InvalidOperation;
                        error.Message = "TargetType cannot be null";
                        return false;
                    }
                    else if (!nullstone.doesInheritFrom(parentType, targetType)) {
                        error.Number = BError.XamlParse;
                        error.Message = "Style.TargetType (" + targetType.name + ") is not a subclass of (" + parentType.name + ")";
                        return false;
                    }
                }
                else if (!targetType || !nullstone.doesInheritFrom(parentType, targetType)) {
                    error.Number = BError.InvalidOperation;
                    error.Message = "Style.TargetType (" + (targetType ? targetType.name : "<Not Specified>") + ") is not a subclass of (" + parentType.name + ")";
                    return false;
                }
                parentType = targetType;
                root = root.BasedOn;
            }
            this.Seal();
            return true;
        };
        Style.SettersProperty = DependencyProperty.RegisterImmutable("Setters", function () { return Fayde.SetterCollection; }, Style);
        Style.BasedOnProperty = DependencyProperty.Register("BasedOn", function () { return Style; }, Style);
        Style.TargetTypeProperty = DependencyProperty.Register("TargetType", function () { return Fayde.IType_; }, Style);
        return Style;
    })(Fayde.DependencyObject);
    Fayde.Style = Style;
    Fayde.CoreLibrary.add(Style);
    Fayde.Markup.Content(Style, Style.SettersProperty);
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var TemplateBinding = (function () {
        function TemplateBinding() {
        }
        TemplateBinding.prototype.init = function (val) {
            this.SourceProperty = val;
        };
        TemplateBinding.prototype.transmute = function (os) {
            return new Fayde.TemplateBindingExpression(this.SourceProperty);
        };
        return TemplateBinding;
    })();
    Fayde.TemplateBinding = TemplateBinding;
    Fayde.CoreLibrary.add(TemplateBinding);
})(Fayde || (Fayde = {}));
/// <reference path="DependencyObject.ts" />
/// <reference path="XamlObjectCollection.ts" />
var Fayde;
(function (Fayde) {
    var TriggerAction = (function (_super) {
        __extends(TriggerAction, _super);
        function TriggerAction() {
            _super.apply(this, arguments);
        }
        TriggerAction.prototype.Fire = function () { };
        return TriggerAction;
    })(Fayde.DependencyObject);
    Fayde.TriggerAction = TriggerAction;
    Fayde.CoreLibrary.add(TriggerAction);
    var TriggerActionCollection = (function (_super) {
        __extends(TriggerActionCollection, _super);
        function TriggerActionCollection() {
            _super.apply(this, arguments);
        }
        TriggerActionCollection.prototype.Fire = function () {
            var enumerator = this.getEnumerator();
            while (enumerator.moveNext()) {
                enumerator.current.Fire();
            }
        };
        return TriggerActionCollection;
    })(Fayde.XamlObjectCollection);
    Fayde.TriggerActionCollection = TriggerActionCollection;
    Fayde.CoreLibrary.add(TriggerActionCollection);
    var TriggerBase = (function (_super) {
        __extends(TriggerBase, _super);
        function TriggerBase() {
            _super.apply(this, arguments);
        }
        TriggerBase.prototype.Attach = function (target) { };
        TriggerBase.prototype.Detach = function (target) { };
        return TriggerBase;
    })(Fayde.DependencyObject);
    Fayde.TriggerBase = TriggerBase;
    Fayde.CoreLibrary.add(TriggerBase);
    var EventTrigger = (function (_super) {
        __extends(EventTrigger, _super);
        function EventTrigger() {
            _super.call(this);
            this._IsAttached = false;
            var coll = EventTrigger.ActionsProperty.Initialize(this);
            coll.AttachTo(this);
        }
        EventTrigger.prototype.Attach = function (target) {
            if (this._IsAttached)
                return;
            var evt = this._ParseEventName(target);
            if (evt) {
                this._IsAttached = true;
                evt.on(this._FireActions, this);
                return;
            }
            console.warn("Could not attach to RoutedEvent: " + this.RoutedEvent);
        };
        EventTrigger.prototype.Detach = function (target) {
            var evt = this._ParseEventName(target);
            if (evt)
                evt.off(this._FireActions, this);
            this._IsAttached = false;
        };
        EventTrigger.prototype._FireActions = function (sender, e) {
            var actions = this.Actions;
            if (actions)
                actions.Fire();
        };
        EventTrigger.prototype._ParseEventName = function (target) {
            var routedEventName = this.RoutedEvent;
            var tokens = routedEventName.split(".");
            if (tokens.length === 1)
                routedEventName = tokens[0];
            else if (tokens.length === 2)
                routedEventName = tokens[1];
            else
                return undefined;
            var evt = target[routedEventName];
            if (evt instanceof Fayde.RoutedEvent)
                return evt;
            return undefined;
        };
        EventTrigger.ActionsProperty = DependencyProperty.RegisterImmutable("Actions", function () { return TriggerActionCollection; }, EventTrigger);
        EventTrigger.RoutedEventProperty = DependencyProperty.Register("RoutedEvent", function () { return String; }, EventTrigger);
        return EventTrigger;
    })(TriggerBase);
    Fayde.EventTrigger = EventTrigger;
    Fayde.CoreLibrary.add(EventTrigger);
    Fayde.Markup.Content(EventTrigger, EventTrigger.ActionsProperty);
    var TriggerCollection = (function (_super) {
        __extends(TriggerCollection, _super);
        function TriggerCollection() {
            _super.apply(this, arguments);
        }
        Object.defineProperty(TriggerCollection.prototype, "ParentXamlObject", {
            get: function () {
                var parentNode = this.XamlNode.ParentNode;
                if (!parentNode)
                    return undefined;
                return parentNode.XObject;
            },
            enumerable: true,
            configurable: true
        });
        TriggerCollection.prototype.AddingToCollection = function (value, error) {
            if (!_super.prototype.AddingToCollection.call(this, value, error))
                return false;
            var parent = this.ParentXamlObject;
            if (parent)
                value.Attach(parent);
            return true;
        };
        TriggerCollection.prototype.RemovedFromCollection = function (value, isValueSafe) {
            _super.prototype.RemovedFromCollection.call(this, value, isValueSafe);
            var parent = this.ParentXamlObject;
            if (parent)
                value.Detach(parent);
        };
        TriggerCollection.prototype.AttachTarget = function (target) {
            var enumerator = this.getEnumerator();
            while (enumerator.moveNext()) {
                enumerator.current.Attach(target);
            }
        };
        TriggerCollection.prototype.DetachTarget = function (target) {
            var enumerator = this.getEnumerator();
            while (enumerator.moveNext()) {
                enumerator.current.Detach(target);
            }
        };
        return TriggerCollection;
    })(Fayde.XamlObjectCollection);
    Fayde.TriggerCollection = TriggerCollection;
    Fayde.CoreLibrary.add(TriggerCollection);
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var VisualTreeEnum = (function () {
        function VisualTreeEnum() {
        }
        VisualTreeEnum.GetAncestors = function (uie) {
            return new AncestorsEnumerable(uie);
        };
        return VisualTreeEnum;
    })();
    Fayde.VisualTreeEnum = VisualTreeEnum;
    var AncestorsEnumerable = (function () {
        function AncestorsEnumerable(uie) {
            this.uie = uie;
        }
        AncestorsEnumerable.prototype.getEnumerator = function () {
            var curNode = this.uie ? this.uie.XamlNode : null;
            var e = {
                current: undefined,
                moveNext: function () {
                    curNode = curNode ? curNode.VisualParentNode : undefined;
                    e.current = curNode ? curNode.XObject : undefined;
                    return e.current !== undefined;
                }
            };
            return e;
        };
        return AncestorsEnumerable;
    })();
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var VisualTreeHelper = (function () {
        function VisualTreeHelper() {
        }
        VisualTreeHelper.GetParent = function (d) {
            if (!(d instanceof Fayde.FrameworkElement))
                throw new InvalidOperationException("Reference is not a valid visual DependencyObject");
            var parentNode = d.XamlNode.VisualParentNode;
            if (parentNode)
                return parentNode.XObject;
        };
        VisualTreeHelper.GetParentOfType = function (d, type) {
            if (!(d instanceof Fayde.FrameworkElement))
                throw new InvalidOperationException("Reference is not a valid visual DependencyObject");
            var curNode = d.XamlNode;
            while ((curNode = curNode.VisualParentNode)) {
                if (curNode.XObject instanceof type)
                    return curNode.XObject;
            }
            return undefined;
        };
        VisualTreeHelper.GetRoot = function (d) {
            if (!(d instanceof Fayde.FrameworkElement))
                throw new InvalidOperationException("Reference is not a valid visual DependencyObject");
            var rootNode = d.XamlNode.GetVisualRoot();
            if (rootNode)
                return rootNode.XObject;
        };
        VisualTreeHelper.GetChild = function (d, childIndex) {
            if (!(d instanceof Fayde.FrameworkElement))
                throw new InvalidOperationException("Reference is not a valid visual DependencyObject");
            var feNode = d.XamlNode;
            var subtreeNode = feNode.SubtreeNode;
            if (!subtreeNode)
                throw new IndexOutOfRangeException(childIndex);
            var subtree = subtreeNode.XObject;
            if (subtree instanceof Fayde.XamlObjectCollection)
                return subtree.GetValueAt(childIndex);
            if ((subtree instanceof Fayde.UIElement) && childIndex === 0)
                return subtree;
            throw new IndexOutOfRangeException(childIndex);
        };
        VisualTreeHelper.GetChildrenCount = function (d) {
            if (!(d instanceof Fayde.FrameworkElement))
                throw new InvalidOperationException("Reference is not a valid visual DependencyObject");
            var feNode = d.XamlNode;
            var subtreeNode = feNode.SubtreeNode;
            if (!subtreeNode)
                return 0;
            var subtree = subtreeNode.XObject;
            if (subtreeNode.XObject instanceof Fayde.XamlObjectCollection)
                return subtree.Count;
            if (subtree instanceof Fayde.UIElement)
                return 1;
            return 0;
        };
        VisualTreeHelper.FindElementsInHostCoordinates = function (pos, uie) {
            return minerva.findElementsInHostSpace(pos, uie.XamlNode.LayoutUpdater)
                .map(function (upd) { return upd.getAttachedValue("$node").XObject; });
        };
        VisualTreeHelper.__Debug = function (ui, func) {
            var uin;
            if (ui instanceof Fayde.UIElement) {
                uin = ui.XamlNode;
            }
            else if (ui instanceof Fayde.UINode) {
                uin = ui;
            }
            else if (ui instanceof minerva.core.Updater) {
                uin = ui.getAttachedValue("$node");
            }
            var topNode;
            if (!uin) {
                var rv = Fayde.Application.Current.RootVisual;
                topNode = (rv) ? rv.XamlNode : null;
            }
            else {
                topNode = uin.GetVisualRoot();
            }
            if (!topNode)
                return "[No top node.]";
            if (!func)
                func = VisualTreeHelper.__DebugUIElement;
            return VisualTreeHelper.__DebugTree(topNode, uin, 1, func);
        };
        VisualTreeHelper.__DebugTree = function (curNode, matchNode, tabIndex, func) {
            var str = "";
            if (curNode === matchNode) {
                for (var i = 0; i < tabIndex; i++) {
                    str += ">>>>>>>>";
                }
            }
            else {
                for (var i = 0; i < tabIndex; i++) {
                    str += "\t";
                }
            }
            var cur = curNode.XObject;
            str += cur.constructor.name;
            var id = cur._ID;
            if (id)
                str += "[" + id + "]";
            var name = curNode.Name;
            str += " [";
            var ns = curNode.NameScope;
            if (!ns)
                str += "^";
            else if (ns.IsRoot)
                str += "+";
            else
                str += "-";
            str += name + "]";
            if (func)
                str += func(curNode, tabIndex);
            str += "\n";
            var enumerator = curNode.GetVisualTreeEnumerator();
            if (!enumerator)
                return str;
            var childNode;
            while (enumerator.moveNext()) {
                childNode = enumerator.current;
                str += VisualTreeHelper.__DebugTree(childNode, matchNode, tabIndex + 1, func);
            }
            return str;
        };
        VisualTreeHelper.__DebugUIElement = function (uin, tabIndex) {
            if (!uin)
                return "";
            var uie = uin.XObject;
            var str = "(";
            if (uie.Visibility === Fayde.Visibility.Visible)
                str += "Visible";
            else
                str += "Collapsed";
            var lu = uin.LayoutUpdater;
            if (lu) {
                str += " ";
                var ls = lu.assets.layoutSlot;
                str += "(" + ls.x + "," + ls.y + ")(" + ls.width + "," + ls.height + ")";
            }
            str += ")";
            var t = uie.TemplateOwner;
            str += "$TO=" + (t ? t.constructor.name : "(null)");
            var gridStr = VisualTreeHelper.__DebugGrid(uin, tabIndex);
            if (gridStr)
                str += "\n" + gridStr;
            return str;
        };
        VisualTreeHelper.__DebugGrid = function (uin, tabIndex) {
            var grid;
            if (uin.XObject instanceof Fayde.Controls.Grid)
                grid = uin.XObject;
            if (!grid)
                return "";
            var rds = grid.RowDefinitions;
            var rcount = rds.Count;
            var cds = grid.ColumnDefinitions;
            var ccount = cds.Count;
            var tabs = "";
            for (var i = 0; i < tabIndex; i++) {
                tabs += "\t";
            }
            var str = "";
            if (rcount > 0) {
                str += tabs;
                str += "  Rows (" + rcount + "):\n";
                var rowdef;
                for (var en = rds.getEnumerator(), i = 0; en.moveNext(); i++) {
                    rowdef = en.current;
                    str += tabs;
                    str += "\t[" + i + "] -> " + rowdef.ActualHeight + "\n";
                }
            }
            var enumerator2;
            if (ccount > 0) {
                str += tabs;
                str += "  Columns (" + ccount + "):\n";
                var coldef;
                for (var en2 = cds.getEnumerator(), i = 0; en2.moveNext(); i++) {
                    coldef = en2.current;
                    str += tabs;
                    str += "\t[" + i + "] -> " + coldef.ActualWidth + "\n";
                }
            }
            return str;
        };
        VisualTreeHelper.__DebugUIElementLayout = function (uin, tabIndex) {
            if (!uin)
                return "";
            return uin.LayoutUpdater._DebugLayout();
        };
        VisualTreeHelper.__DebugLayout = function (ui) {
            return VisualTreeHelper.__Debug(ui, VisualTreeHelper.__DebugUIElementLayout);
        };
        VisualTreeHelper.__GetById = function (id) {
            var rv = Fayde.Application.Current.RootVisual;
            var topNode = (rv) ? rv.XamlNode : null;
            if (!topNode)
                return;
            var walker = Fayde.DeepTreeWalker(topNode);
            var curNode;
            while (curNode = walker.Step()) {
                if (curNode.XObject._ID === id)
                    return curNode.XObject;
            }
        };
        return VisualTreeHelper;
    })();
    Fayde.VisualTreeHelper = VisualTreeHelper;
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    (function (VisualTreeDirection) {
        VisualTreeDirection[VisualTreeDirection["Logical"] = 0] = "Logical";
        VisualTreeDirection[VisualTreeDirection["Reverse"] = 1] = "Reverse";
        VisualTreeDirection[VisualTreeDirection["ZForward"] = 2] = "ZForward";
        VisualTreeDirection[VisualTreeDirection["ZReverse"] = 3] = "ZReverse";
    })(Fayde.VisualTreeDirection || (Fayde.VisualTreeDirection = {}));
    var VisualTreeDirection = Fayde.VisualTreeDirection;
    function mergeSetters(arr, dps, style) {
        var enumerator = style.Setters.getEnumerator(true);
        var setter;
        while (enumerator.moveNext()) {
            setter = enumerator.current;
            if (!(setter instanceof Fayde.Setter))
                continue;
            var propd = setter.Property;
            if (!propd)
                continue;
            if (dps[propd._ID])
                continue;
            dps[propd._ID] = setter;
            arr.push(setter);
        }
    }
    function SingleStyleWalker(style) {
        var dps = [];
        var flattenedSetters = [];
        var cur = style;
        while (cur) {
            mergeSetters(flattenedSetters, dps, cur);
            cur = cur.BasedOn;
        }
        flattenedSetters.sort(Fayde.Setter.Compare);
        return {
            Step: function () {
                return flattenedSetters.shift();
            }
        };
    }
    Fayde.SingleStyleWalker = SingleStyleWalker;
    function MultipleStylesWalker(styles) {
        var flattenedSetters = [];
        if (styles) {
            var dps = [];
            var stylesSeen = [];
            var len = styles.length;
            for (var i = 0; i < len; i++) {
                var style = styles[i];
                while (style) {
                    if (stylesSeen.indexOf(style) > -1)
                        continue;
                    mergeSetters(flattenedSetters, dps, style);
                    stylesSeen.push(style);
                    style = style.BasedOn;
                }
            }
            flattenedSetters.sort(Fayde.Setter.Compare);
        }
        return {
            Step: function () {
                return flattenedSetters.shift();
            }
        };
    }
    Fayde.MultipleStylesWalker = MultipleStylesWalker;
    function DeepTreeWalker(topNode, direction) {
        var last = undefined;
        var dir = VisualTreeDirection.Logical;
        var walkList = [topNode];
        if (direction)
            dir = direction;
        return {
            Step: function () {
                if (last) {
                    var enumerator = last.GetVisualTreeEnumerator();
                    var insertIndex = 0;
                    while (enumerator.moveNext()) {
                        walkList.splice(insertIndex, 0, enumerator.current);
                        insertIndex++;
                    }
                }
                var next = walkList.shift();
                if (!next) {
                    last = undefined;
                    return;
                }
                return (last = next);
            },
            SkipBranch: function () {
                last = undefined;
            }
        };
    }
    Fayde.DeepTreeWalker = DeepTreeWalker;
    function compare(left, right) {
        if (!left)
            return !right ? 0 : -1;
        if (!right)
            return 1;
        var v1 = left.XObject.TabIndex;
        var v2 = right.XObject.TabIndex;
        if (v1 == null) {
            return v2 != null ? -1 : 0;
        }
        else if (v2 == null) {
            return 1;
        }
        if (v1 > v2)
            return 1;
        return v1 === v2 ? 0 : -1;
    }
    function getParentNavigationMode(uin) {
        while (uin) {
            if (uin instanceof Fayde.Controls.ControlNode)
                return uin.XObject.TabNavigation;
            return Fayde.Input.KeyboardNavigationMode.Local;
        }
        return Fayde.Input.KeyboardNavigationMode.Local;
    }
    function getActiveNavigationMode(uin) {
        while (uin) {
            if (uin instanceof Fayde.Controls.ControlNode)
                return uin.XObject.TabNavigation;
            uin = uin.VisualParentNode;
        }
        return Fayde.Input.KeyboardNavigationMode.Local;
    }
    function walkChildren(root, cur, forwards) {
        var walker = new TabNavigationWalker(root, cur, forwards);
        return walker.FocusChild();
    }
    var TabNavigationWalker = (function () {
        function TabNavigationWalker(root, cur, forwards) {
            this._Root = root;
            this._Current = cur;
            this._Forwards = forwards;
            this._TabSorted = [];
        }
        TabNavigationWalker.prototype.FocusChild = function () {
            var childNode;
            var childIsControl;
            var curIndex = -1;
            var childWalker = DeepTreeWalker(this._Root);
            while (childNode = childWalker.Step()) {
                if (childNode === this._Root || !(childNode instanceof Fayde.Controls.ControlNode))
                    continue;
                this._TabSorted.push(childNode);
                childWalker.SkipBranch();
            }
            if (this._TabSorted.length > 1) {
                this._TabSorted.sort(compare);
                if (!this._Forwards)
                    this._TabSorted = this._TabSorted.reverse();
            }
            var len = this._TabSorted.length;
            for (var i = 0; i < len; i++) {
                if (this._TabSorted[i] === this._Current)
                    curIndex = i;
            }
            if (curIndex !== -1 && getActiveNavigationMode(this._Root) === Fayde.Input.KeyboardNavigationMode.Once) {
                if (!this._Forwards && this._Root instanceof Fayde.Controls.ControlNode)
                    return this._Root.TabTo();
                return false;
            }
            var len = this._TabSorted.length;
            if (len > 0) {
                for (var j = 0; j < len; j++) {
                    if ((j + curIndex + 1) === len && getActiveNavigationMode(this._Root) !== Fayde.Input.KeyboardNavigationMode.Cycle)
                        break;
                    childNode = this._TabSorted[(j + curIndex + 1) % len];
                    childIsControl = childNode instanceof Fayde.Controls.ControlNode;
                    if (childIsControl && !childNode.XObject.IsEnabled)
                        continue;
                    if (!this._Forwards && walkChildren(childNode))
                        return true;
                    if (childIsControl && childNode.TabTo())
                        return true;
                    if (this._Forwards && walkChildren(childNode))
                        return true;
                }
            }
            if (curIndex !== -1 && !this._Forwards) {
                if (this._Root instanceof Fayde.Controls.ControlNode)
                    return this._Root.TabTo();
            }
            return false;
        };
        TabNavigationWalker.Focus = function (uin, forwards) {
            var focused = false;
            var cur = uin;
            var root = uin;
            if ((root.VisualParentNode && getParentNavigationMode(root.VisualParentNode) === Fayde.Input.KeyboardNavigationMode.Once)
                || (!forwards && root && root.VisualParentNode)) {
                while (root = root.VisualParentNode)
                    if (root instanceof Fayde.Controls.ControlNode || !root.VisualParentNode)
                        break;
            }
            do {
                focused = focused || walkChildren(root, cur, forwards);
                if (!focused && getActiveNavigationMode(root) === Fayde.Input.KeyboardNavigationMode.Cycle)
                    return true;
                cur = root;
                root = root.VisualParentNode;
                while (root && !(root instanceof Fayde.Controls.ControlNode) && root.VisualParentNode)
                    root = root.VisualParentNode;
            } while (!focused && root);
            if (!focused)
                focused = focused || walkChildren(cur, null, forwards);
            return focused;
        };
        return TabNavigationWalker;
    })();
    Fayde.TabNavigationWalker = TabNavigationWalker;
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Data;
    (function (Data) {
        var convert = nullstone.convertAnyToType;
        Data.WarnBrokenPath = false;
        var Binding = (function () {
            function Binding(obj) {
                this.BindsDirectlyToSource = false;
                this.NotifyOnValidationError = false;
                this.ValidatesOnExceptions = false;
                this.ValidatesOnDataErrors = false;
                this.ValidatesOnNotifyDataErrors = true;
                if (obj instanceof Binding) {
                    var binding = obj;
                    this.StringFormat = binding.StringFormat;
                    this.FallbackValue = binding.FallbackValue;
                    this.TargetNullValue = binding.TargetNullValue;
                    this.BindsDirectlyToSource = binding.BindsDirectlyToSource;
                    this.Converter = binding.Converter;
                    this.ConverterParameter = binding.ConverterParameter;
                    this.ConverterCulture = binding.ConverterCulture;
                    this.ElementName = binding.ElementName;
                    this.Mode = binding.Mode;
                    this.NotifyOnValidationError = binding.NotifyOnValidationError;
                    this.RelativeSource = binding.RelativeSource ? binding.RelativeSource.Clone() : null;
                    this.Path = binding.Path;
                    this.Source = binding.Source;
                    this.UpdateSourceTrigger = binding.UpdateSourceTrigger;
                    this.ValidatesOnExceptions = binding.ValidatesOnExceptions;
                    this.ValidatesOnDataErrors = binding.ValidatesOnDataErrors;
                    this.ValidatesOnNotifyDataErrors = binding.ValidatesOnNotifyDataErrors;
                }
                else if (typeof obj === "string") {
                    this.Path = new Data.PropertyPath(obj);
                }
                else if (obj instanceof Data.PropertyPath) {
                    this.Path = obj;
                }
                else {
                    this.Path = new Data.PropertyPath("");
                }
            }
            Binding.prototype.init = function (val) {
                this.Path = new Data.PropertyPath(val);
            };
            Binding.prototype.transmute = function (os) {
                this.$$coerce();
                Object.freeze(this);
                return new Data.BindingExpression(this);
            };
            Binding.prototype.$$coerce = function () {
                this.StringFormat = this.StringFormat ? this.StringFormat.toString() : undefined;
                this.BindsDirectlyToSource = convert(this.BindsDirectlyToSource, Boolean) || false;
                this.Mode = Fayde.Enum.fromAny(Data.BindingMode, this.Mode);
                this.NotifyOnValidationError = convert(this.NotifyOnValidationError, Boolean) || false;
                this.Path = convert(this.Path, Data.PropertyPath);
                this.UpdateSourceTrigger = Fayde.Enum.fromAny(Data.UpdateSourceTrigger, this.UpdateSourceTrigger);
                this.ValidatesOnExceptions = convert(this.ValidatesOnExceptions, Boolean) || false;
                this.ValidatesOnDataErrors = convert(this.ValidatesOnDataErrors, Boolean) || false;
                this.ValidatesOnNotifyDataErrors = convert(this.ValidatesOnNotifyDataErrors, Boolean) !== false;
            };
            Binding.prototype.Clone = function () {
                return new Binding(this);
            };
            Binding.fromData = function (data) {
                var binding = new Binding(data.Path);
                binding.StringFormat = data.StringFormat;
                binding.FallbackValue = data.FallbackValue;
                binding.TargetNullValue = data.TargetNullValue;
                binding.BindsDirectlyToSource = data.BindsDirectlyToSource;
                binding.Converter = data.Converter;
                binding.ConverterParameter = data.ConverterParameter;
                binding.ConverterCulture = data.ConverterCulture;
                binding.ElementName = data.ElementName;
                binding.Mode = data.Mode;
                binding.NotifyOnValidationError = data.NotifyOnValidationError;
                binding.RelativeSource = data.RelativeSource;
                binding.Source = data.Source;
                binding.UpdateSourceTrigger = data.UpdateSourceTrigger;
                binding.ValidatesOnExceptions = data.ValidatesOnExceptions;
                binding.ValidatesOnDataErrors = data.ValidatesOnDataErrors;
                binding.ValidatesOnNotifyDataErrors = data.ValidatesOnNotifyDataErrors;
                return binding;
            };
            return Binding;
        })();
        Data.Binding = Binding;
        Fayde.CoreLibrary.add(Binding);
    })(Data = Fayde.Data || (Fayde.Data = {}));
})(Fayde || (Fayde = {}));
/// <reference path="../Core/DependencyObject.ts" />
var Fayde;
(function (Fayde) {
    var Data;
    (function (Data) {
        var CollectionViewSource = (function (_super) {
            __extends(CollectionViewSource, _super);
            function CollectionViewSource() {
                _super.apply(this, arguments);
            }
            CollectionViewSource.SourceProperty = DependencyProperty.Register("Source", function () { return Object; }, CollectionViewSource);
            CollectionViewSource.ViewProperty = DependencyProperty.Register("View", function () { return Data.ICollectionView_; }, CollectionViewSource);
            return CollectionViewSource;
        })(Fayde.DependencyObject);
        Data.CollectionViewSource = CollectionViewSource;
    })(Data = Fayde.Data || (Fayde.Data = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Data;
    (function (Data) {
        var DataErrorsChangedEventArgs = (function () {
            function DataErrorsChangedEventArgs(propertyName) {
                this.PropertyName = propertyName;
                Object.freeze(this);
            }
            return DataErrorsChangedEventArgs;
        })();
        Data.DataErrorsChangedEventArgs = DataErrorsChangedEventArgs;
    })(Data = Fayde.Data || (Fayde.Data = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Data;
    (function (Data) {
        (function (RelativeSourceMode) {
            RelativeSourceMode[RelativeSourceMode["TemplatedParent"] = 0] = "TemplatedParent";
            RelativeSourceMode[RelativeSourceMode["Self"] = 1] = "Self";
            RelativeSourceMode[RelativeSourceMode["FindAncestor"] = 2] = "FindAncestor";
            RelativeSourceMode[RelativeSourceMode["ItemsControlParent"] = 3] = "ItemsControlParent";
        })(Data.RelativeSourceMode || (Data.RelativeSourceMode = {}));
        var RelativeSourceMode = Data.RelativeSourceMode;
        Fayde.CoreLibrary.addEnum(RelativeSourceMode, "RelativeSourceMode");
        (function (BindingMode) {
            BindingMode[BindingMode["OneWay"] = 0] = "OneWay";
            BindingMode[BindingMode["TwoWay"] = 1] = "TwoWay";
            BindingMode[BindingMode["OneTime"] = 2] = "OneTime";
            BindingMode[BindingMode["OneWayToSource"] = 3] = "OneWayToSource";
        })(Data.BindingMode || (Data.BindingMode = {}));
        var BindingMode = Data.BindingMode;
        Fayde.CoreLibrary.addEnum(BindingMode, "BindingMode");
        (function (UpdateSourceTrigger) {
            UpdateSourceTrigger[UpdateSourceTrigger["Default"] = 0] = "Default";
            UpdateSourceTrigger[UpdateSourceTrigger["PropertyChanged"] = 1] = "PropertyChanged";
            UpdateSourceTrigger[UpdateSourceTrigger["Explicit"] = 3] = "Explicit";
        })(Data.UpdateSourceTrigger || (Data.UpdateSourceTrigger = {}));
        var UpdateSourceTrigger = Data.UpdateSourceTrigger;
        Fayde.CoreLibrary.addEnum(UpdateSourceTrigger, "UpdateSourceTrigger");
    })(Data = Fayde.Data || (Fayde.Data = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Data;
    (function (Data) {
        Data.ICollectionView_ = new nullstone.Interface("ICollectionView");
    })(Data = Fayde.Data || (Fayde.Data = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Data;
    (function (Data) {
        Data.IDataErrorInfo_ = new nullstone.Interface("IDataErrorInfo");
    })(Data = Fayde.Data || (Fayde.Data = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Data;
    (function (Data) {
        Data.INotifyDataErrorInfo_ = new nullstone.Interface("INotifyDataErrorInfo");
    })(Data = Fayde.Data || (Fayde.Data = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Data;
    (function (Data) {
        Data.IValueConverter_ = new nullstone.Interface("IValueConverter");
    })(Data = Fayde.Data || (Fayde.Data = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Data;
    (function (Data) {
        var RelativeSource = (function () {
            function RelativeSource(obj) {
                this.AncestorType = null;
                if (obj instanceof RelativeSource) {
                    var rs = obj;
                    this.Mode = rs.Mode;
                    this.AncestorLevel = rs.AncestorLevel;
                    this.AncestorType = rs.AncestorType;
                }
            }
            RelativeSource.prototype.init = function (val) {
                this.Mode = Data.RelativeSourceMode[val];
            };
            RelativeSource.prototype.resolveTypeFields = function (resolver) {
                if (typeof this.AncestorType === "string")
                    this.AncestorType = resolver(this.AncestorType);
            };
            RelativeSource.prototype.transmute = function (os) {
                if (this.Mode == null && typeof this.AncestorType === "function") {
                    this.Mode = Data.RelativeSourceMode.FindAncestor;
                }
                else {
                    this.Mode = Fayde.Enum.fromAny(Data.RelativeSourceMode, this.Mode);
                }
                this.AncestorLevel = parseInt(this.AncestorLevel) || 1;
                Object.freeze(this);
                return this;
            };
            RelativeSource.prototype.Clone = function () {
                return new RelativeSource(this);
            };
            RelativeSource.prototype.Find = function (target) {
                switch (this.Mode) {
                    case Data.RelativeSourceMode.Self:
                        return target;
                    case Data.RelativeSourceMode.TemplatedParent:
                        return target.TemplateOwner;
                    case Data.RelativeSourceMode.FindAncestor:
                        return findAncestor(target, this);
                    case Data.RelativeSourceMode.ItemsControlParent:
                        return findItemsControlAncestor(target, this);
                }
            };
            return RelativeSource;
        })();
        Data.RelativeSource = RelativeSource;
        Fayde.CoreLibrary.add(RelativeSource);
        function findAncestor(target, relSource) {
            if (!(target instanceof Fayde.DependencyObject))
                return;
            var ancestorType = relSource.AncestorType;
            if (typeof ancestorType !== "function") {
                console.warn("RelativeSourceMode.FindAncestor with no AncestorType specified.");
                return;
            }
            var ancestorLevel = relSource.AncestorLevel;
            if (isNaN(ancestorLevel)) {
                console.warn("RelativeSourceMode.FindAncestor with no AncestorLevel specified.");
                return;
            }
            for (var parent = Fayde.VisualTreeHelper.GetParent(target); parent != null; parent = Fayde.VisualTreeHelper.GetParent(parent)) {
                if (parent instanceof ancestorType && --ancestorLevel < 1)
                    return parent;
            }
        }
        function findItemsControlAncestor(target, relSource) {
            if (!(target instanceof Fayde.DependencyObject))
                return;
            var ancestorLevel = relSource.AncestorLevel;
            ancestorLevel = ancestorLevel || 1;
            for (var parent = Fayde.VisualTreeHelper.GetParent(target); parent != null; parent = Fayde.VisualTreeHelper.GetParent(parent)) {
                if (!!parent.IsItemsControl && --ancestorLevel < 1)
                    return parent;
            }
        }
    })(Data = Fayde.Data || (Fayde.Data = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Documents;
    (function (Documents) {
        function TextReaction(propd, callback, listen, sync, instance) {
            var changed;
            if (sync === false) {
                changed = (listen === false) ? reaction(callback) : lReaction(callback);
            }
            else {
                var name = propd.Name;
                name = name.charAt(0).toLowerCase() + name.substr(1);
                if (typeof sync !== "function")
                    changed = (listen === false) ? sReaction(callback, name) : slReaction(callback, name);
                else
                    changed = (listen === false) ? sReaction(callback, name, sync) : slReaction(callback, name, sync);
            }
            if (instance)
                propd.Store.ListenToChanged(instance, propd, changed, instance);
            else
                propd.ChangedCallback = changed;
        }
        Documents.TextReaction = TextReaction;
        function reaction(callback) {
            return function (te, args) {
                callback && callback(te.TextUpdater, args.OldValue, args.NewValue, te);
            };
        }
        function sReaction(callback, name, syncer) {
            return function (te, args) {
                var ov = args.OldValue;
                var nv = args.NewValue;
                var upd = te.TextUpdater;
                if (!syncer)
                    upd.assets[name] = nv;
                else
                    syncer(nv, upd.assets[name]);
                callback && callback(upd, ov, nv, te);
            };
        }
        function lReaction(callback) {
            return function (te, args) {
                var ov = args.OldValue;
                var nv = args.NewValue;
                var upd = te.TextUpdater;
                Fayde.UnreactTo(ov, te);
                callback && callback(upd, ov, nv, te);
                Fayde.ReactTo(nv, te, function () { return callback(upd, nv, nv, te); });
            };
        }
        function slReaction(callback, name, syncer) {
            return function (te, args) {
                var ov = args.OldValue;
                var nv = args.NewValue;
                var upd = te.TextUpdater;
                Fayde.UnreactTo(ov, te);
                if (!syncer)
                    upd.assets[name] = nv;
                else
                    syncer(nv, upd.assets[name]);
                callback && callback(upd, ov, nv, te);
                Fayde.ReactTo(nv, te, function () { return callback && callback(upd, nv, nv, te); });
            };
        }
    })(Documents = Fayde.Documents || (Fayde.Documents = {}));
})(Fayde || (Fayde = {}));
/// <reference path="../Core/DependencyObject.ts"/>
/// <reference path="../Core/InheritableOwner.ts"/>
/// <reference path="TextReaction.ts"/>
var Fayde;
(function (Fayde) {
    var Documents;
    (function (Documents) {
        var TextElementNode = (function (_super) {
            __extends(TextElementNode, _super);
            function TextElementNode(xobj, inheritedWalkProperty) {
                _super.call(this, xobj);
                this.InheritedWalkProperty = inheritedWalkProperty;
            }
            TextElementNode.prototype.GetInheritedEnumerator = function () {
                if (!this.InheritedWalkProperty)
                    return nullstone.IEnumerator_.empty;
                var coll = this.XObject[this.InheritedWalkProperty];
                if (coll)
                    return coll.GetNodeEnumerator();
            };
            return TextElementNode;
        })(Fayde.DONode);
        Documents.TextElementNode = TextElementNode;
        function invalidateFont(upd, ov, nv, te) {
            Fayde.Incite(te, {
                type: 'font',
                full: upd.invalidateFont()
            });
        }
        var TextElement = (function (_super) {
            __extends(TextElement, _super);
            function TextElement() {
                _super.call(this);
                this.TextUpdater = new minerva.text.TextUpdater();
                Documents.TextReaction(TextElement.ForegroundProperty, function (upd, ov, nv, te) {
                    Fayde.Incite(te, {
                        type: 'font',
                        full: upd.invalidateFont()
                    });
                }, true, true, this);
                Documents.TextReaction(TextElement.FontFamilyProperty, invalidateFont, false, true, this);
                Documents.TextReaction(TextElement.FontSizeProperty, invalidateFont, false, true, this);
                Documents.TextReaction(TextElement.FontStretchProperty, invalidateFont, false, true, this);
                Documents.TextReaction(TextElement.FontStyleProperty, invalidateFont, false, true, this);
                Documents.TextReaction(TextElement.FontWeightProperty, invalidateFont, false, true, this);
            }
            TextElement.prototype.CreateNode = function () {
                return new TextElementNode(this, null);
            };
            TextElement.prototype.IsInheritable = function (propd) {
                return TextElementInheritedProps.indexOf(propd) > -1;
            };
            TextElement.prototype._SerializeText = function () {
                return undefined;
            };
            TextElement.prototype.Equals = function (te) {
                if (this.FontFamily !== te.FontFamily)
                    return false;
                if (this.FontSize !== te.FontSize)
                    return false;
                if (this.FontStyle !== te.FontStyle)
                    return false;
                if (this.FontWeight !== te.FontWeight)
                    return false;
                if (this.FontStretch !== te.FontStretch)
                    return false;
                if (!nullstone.equals(this.Foreground, te.Foreground))
                    return false;
                return true;
            };
            TextElement.FontFamilyProperty = Fayde.InheritableOwner.FontFamilyProperty.ExtendTo(TextElement);
            TextElement.FontSizeProperty = Fayde.InheritableOwner.FontSizeProperty.ExtendTo(TextElement);
            TextElement.FontStretchProperty = Fayde.InheritableOwner.FontStretchProperty.ExtendTo(TextElement);
            TextElement.FontStyleProperty = Fayde.InheritableOwner.FontStyleProperty.ExtendTo(TextElement);
            TextElement.FontWeightProperty = Fayde.InheritableOwner.FontWeightProperty.ExtendTo(TextElement);
            TextElement.ForegroundProperty = Fayde.InheritableOwner.ForegroundProperty.ExtendTo(TextElement);
            TextElement.LanguageProperty = Fayde.InheritableOwner.LanguageProperty.ExtendTo(TextElement);
            return TextElement;
        })(Fayde.DependencyObject);
        Documents.TextElement = TextElement;
        Fayde.CoreLibrary.add(TextElement);
        var TextElementInheritedProps = [
            TextElement.FontFamilyProperty,
            TextElement.FontSizeProperty,
            TextElement.FontStretchProperty,
            TextElement.FontStyleProperty,
            TextElement.FontWeightProperty,
            TextElement.ForegroundProperty,
            TextElement.LanguageProperty
        ];
    })(Documents = Fayde.Documents || (Fayde.Documents = {}));
})(Fayde || (Fayde = {}));
/// <reference path="TextElement.ts" />
var Fayde;
(function (Fayde) {
    var Documents;
    (function (Documents) {
        var Block = (function (_super) {
            __extends(Block, _super);
            function Block() {
                _super.apply(this, arguments);
            }
            return Block;
        })(Documents.TextElement);
        Documents.Block = Block;
        Fayde.CoreLibrary.add(Block);
    })(Documents = Fayde.Documents || (Fayde.Documents = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Documents;
    (function (Documents) {
        var BlockCollection = (function (_super) {
            __extends(BlockCollection, _super);
            function BlockCollection() {
                _super.apply(this, arguments);
            }
            BlockCollection.prototype._RaiseItemAdded = function (value, index) {
                Fayde.Incite(this, {
                    item: value,
                    index: index,
                    add: true
                });
            };
            BlockCollection.prototype._RaiseItemRemoved = function (value, index) {
                Fayde.Incite(this, {
                    item: value,
                    index: index,
                    add: false
                });
            };
            return BlockCollection;
        })(Fayde.XamlObjectCollection);
        Documents.BlockCollection = BlockCollection;
        Fayde.CoreLibrary.add(BlockCollection);
    })(Documents = Fayde.Documents || (Fayde.Documents = {}));
})(Fayde || (Fayde = {}));
/// <reference path="TextElement.ts" />
var Fayde;
(function (Fayde) {
    var Documents;
    (function (Documents) {
        var Inline = (function (_super) {
            __extends(Inline, _super);
            function Inline() {
                _super.call(this);
                Documents.TextReaction(Inline.TextDecorationsProperty, function (upd, ov, nv, te) {
                    Fayde.Incite(te, {
                        type: 'font',
                        full: upd.invalidateFont()
                    });
                }, false, true, this);
            }
            Inline.prototype.Equals = function (inline) {
                if (this.TextDecorations !== inline.TextDecorations)
                    return false;
                return _super.prototype.Equals.call(this, inline);
            };
            Inline.prototype.IsInheritable = function (propd) {
                if (propd === Inline.TextDecorationsProperty)
                    return true;
                return _super.prototype.IsInheritable.call(this, propd);
            };
            Inline.TextDecorationsProperty = Fayde.InheritableOwner.TextDecorationsProperty.ExtendTo(Inline);
            return Inline;
        })(Documents.TextElement);
        Documents.Inline = Inline;
        Fayde.CoreLibrary.add(Inline);
    })(Documents = Fayde.Documents || (Fayde.Documents = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Documents;
    (function (Documents) {
        var InlineCollection = (function (_super) {
            __extends(InlineCollection, _super);
            function InlineCollection() {
                _super.apply(this, arguments);
            }
            InlineCollection.prototype._RaiseItemAdded = function (value, index) {
                Fayde.Incite(this, {
                    item: value,
                    index: index,
                    add: true
                });
            };
            InlineCollection.prototype._RaiseItemRemoved = function (value, index) {
                Fayde.Incite(this, {
                    item: value,
                    index: index,
                    add: false
                });
            };
            return InlineCollection;
        })(Fayde.XamlObjectCollection);
        Documents.InlineCollection = InlineCollection;
        Fayde.CoreLibrary.add(InlineCollection);
    })(Documents = Fayde.Documents || (Fayde.Documents = {}));
})(Fayde || (Fayde = {}));
/// <reference path="Inline.ts" />
var Fayde;
(function (Fayde) {
    var Documents;
    (function (Documents) {
        var LineBreak = (function (_super) {
            __extends(LineBreak, _super);
            function LineBreak() {
                _super.apply(this, arguments);
            }
            return LineBreak;
        })(Documents.Inline);
        Documents.LineBreak = LineBreak;
        Fayde.CoreLibrary.add(LineBreak);
    })(Documents = Fayde.Documents || (Fayde.Documents = {}));
})(Fayde || (Fayde = {}));
/// <reference path="Block.ts" />
var Fayde;
(function (Fayde) {
    var Documents;
    (function (Documents) {
        var Paragraph = (function (_super) {
            __extends(Paragraph, _super);
            function Paragraph() {
                var _this = this;
                _super.call(this);
                var coll = Paragraph.InlinesProperty.Initialize(this);
                coll.AttachTo(this);
                Fayde.ReactTo(coll, this, function (obj) { return _this.InlinesChanged(obj.item, obj.add); });
            }
            Paragraph.prototype.CreateNode = function () {
                return new Documents.TextElementNode(this, "Inlines");
            };
            Paragraph.prototype.InlinesChanged = function (inline, isAdd) {
                var _this = this;
                if (isAdd)
                    Fayde.Providers.InheritedStore.PropagateInheritedOnAdd(this, inline.XamlNode);
                if (isAdd)
                    Fayde.ReactTo(inline, this, function (obj) { return Fayde.Incite(_this, obj); });
                else
                    Fayde.UnreactTo(inline, this);
                Fayde.Incite(this, {
                    type: 'text',
                    full: true
                });
            };
            Paragraph.InlinesProperty = DependencyProperty.RegisterImmutable("Inlines", function () { return Documents.InlineCollection; }, Paragraph);
            return Paragraph;
        })(Documents.Block);
        Documents.Paragraph = Paragraph;
        Fayde.CoreLibrary.add(Paragraph);
        Fayde.Markup.Content(Paragraph, Paragraph.InlinesProperty);
    })(Documents = Fayde.Documents || (Fayde.Documents = {}));
})(Fayde || (Fayde = {}));
/// <reference path="Inline.ts" />
var Fayde;
(function (Fayde) {
    var Documents;
    (function (Documents) {
        var Run = (function (_super) {
            __extends(Run, _super);
            function Run() {
                _super.apply(this, arguments);
            }
            Run.prototype._SerializeText = function () { return this.Text; };
            Run.prototype.IsInheritable = function (propd) {
                if (propd === Run.FlowDirectionProperty)
                    return true;
                return _super.prototype.IsInheritable.call(this, propd);
            };
            Run.FlowDirectionProperty = Fayde.InheritableOwner.FlowDirectionProperty.ExtendTo(Run);
            Run.TextProperty = DependencyProperty.Register("Text", function () { return String; }, Run);
            return Run;
        })(Documents.Inline);
        Documents.Run = Run;
        Fayde.CoreLibrary.add(Run);
        var reactions;
        (function (reactions) {
            Documents.TextReaction(Run.TextProperty, function (upd, ov, nv, run) {
                Fayde.Incite(run, {
                    type: 'text',
                    full: true
                });
            }, false);
        })(reactions || (reactions = {}));
    })(Documents = Fayde.Documents || (Fayde.Documents = {}));
})(Fayde || (Fayde = {}));
/// <reference path="TextElement.ts"/>
var Fayde;
(function (Fayde) {
    var Documents;
    (function (Documents) {
        var Section = (function (_super) {
            __extends(Section, _super);
            function Section() {
                var _this = this;
                _super.call(this);
                var coll = Section.BlocksProperty.Initialize(this);
                coll.AttachTo(this);
                Fayde.ReactTo(coll, this, function (obj) { return _this.BlocksChanged(obj.item, obj.add); });
            }
            Section.prototype.CreateNode = function () {
                return new Documents.TextElementNode(this, "Blocks");
            };
            Section.prototype.BlocksChanged = function (block, isAdd) {
                var _this = this;
                if (isAdd)
                    Fayde.Providers.InheritedStore.PropagateInheritedOnAdd(this, block.XamlNode);
                if (isAdd)
                    Fayde.ReactTo(block, this, function (obj) { return Fayde.Incite(_this, obj); });
                else
                    Fayde.UnreactTo(block, this);
                Fayde.Incite(this, {
                    type: 'text',
                    full: true
                });
            };
            Section.BlocksProperty = DependencyProperty.RegisterImmutable("Blocks", function () { return Documents.BlockCollection; }, Section);
            return Section;
        })(Documents.TextElement);
        Documents.Section = Section;
        Fayde.CoreLibrary.add(Section);
        Fayde.Markup.Content(Section, Section.BlocksProperty);
    })(Documents = Fayde.Documents || (Fayde.Documents = {}));
})(Fayde || (Fayde = {}));
/// <reference path="Inline.ts" />
var Fayde;
(function (Fayde) {
    var Documents;
    (function (Documents) {
        var Span = (function (_super) {
            __extends(Span, _super);
            function Span() {
                var _this = this;
                _super.call(this);
                var coll = Span.InlinesProperty.Initialize(this);
                coll.AttachTo(this);
                Fayde.ReactTo(coll, this, function (obj) { return _this.InlinesChanged(obj.item, obj.add); });
            }
            Span.prototype.CreateNode = function () {
                return new Documents.TextElementNode(this, "Inlines");
            };
            Span.prototype._SerializeText = function () {
                var str = "";
                var enumerator = this.Inlines.getEnumerator();
                while (enumerator.moveNext()) {
                    str += enumerator.current._SerializeText();
                }
                return str;
            };
            Span.prototype.InlinesChanged = function (inline, isAdd) {
                var _this = this;
                if (isAdd)
                    Fayde.Providers.InheritedStore.PropagateInheritedOnAdd(this, inline.XamlNode);
                if (isAdd)
                    Fayde.ReactTo(inline, this, function (obj) { return Fayde.Incite(_this, obj); });
                else
                    Fayde.UnreactTo(inline, this);
                Fayde.Incite(this, {
                    type: 'text',
                    full: true
                });
            };
            Span.InlinesProperty = DependencyProperty.RegisterImmutable("Inlines", function () { return Documents.InlineCollection; }, Span);
            return Span;
        })(Documents.Inline);
        Documents.Span = Span;
        Fayde.CoreLibrary.add(Span);
        Fayde.Markup.Content(Span, Span.InlinesProperty);
    })(Documents = Fayde.Documents || (Fayde.Documents = {}));
})(Fayde || (Fayde = {}));
/// <reference path="Span.ts" />
var Fayde;
(function (Fayde) {
    var Documents;
    (function (Documents) {
        var Underline = (function (_super) {
            __extends(Underline, _super);
            function Underline() {
                _super.apply(this, arguments);
            }
            return Underline;
        })(Documents.Span);
        Documents.Underline = Underline;
        Fayde.CoreLibrary.add(Underline);
    })(Documents = Fayde.Documents || (Fayde.Documents = {}));
})(Fayde || (Fayde = {}));
/// <reference path="../Core/DependencyObject.ts" />
var Fayde;
(function (Fayde) {
    var Application = (function (_super) {
        __extends(Application, _super);
        function Application() {
            _super.call(this);
            this.Loaded = new nullstone.Event();
            this.Address = null;
            this.AllowNavigation = true;
            this._IsRunning = false;
            this._IsLoaded = false;
            this._Storyboards = [];
            this._ClockTimer = new Fayde.ClockTimer();
            this._RootVisual = null;
            this.Resized = new Fayde.RoutedEvent();
            this.XamlNode.NameScope = new Fayde.NameScope(true);
            var rd = Application.ResourcesProperty.Initialize(this);
            this.MainSurface = new Fayde.Surface(this);
            this.Address = new Fayde.Uri(document.URL);
        }
        Application.prototype.OnThemeNameChanged = function (args) {
            var _this = this;
            if (!this._IsLoaded)
                return;
            Fayde.ThemeManager.LoadAsync(args.NewValue)
                .then(function () { return _this._ApplyTheme(); }, function (err) { return console.error("Could not load theme.", err); });
        };
        Application.prototype._ApplyTheme = function () {
            for (var walker = this.MainSurface.walkLayers(); walker.step();) {
                for (var subwalker = walker.current.walkDeep(); subwalker.step();) {
                    var node = subwalker.current.getAttachedValue("$node");
                    Fayde.Providers.ImplicitStyleBroker.Set(node.XObject, Fayde.Providers.StyleMask.Theme);
                }
            }
        };
        Application.prototype.OnResized = function (oldSize, newSize) {
            this.Resized.raise(this, new Fayde.SizeChangedEventArgs(oldSize, newSize));
        };
        Object.defineProperty(Application.prototype, "RootVisual", {
            get: function () {
                for (var walker = this.MainSurface.walkLayers(); walker.step();) {
                    var node = walker.current.getAttachedValue("$node");
                    return node.XObject;
                }
            },
            enumerable: true,
            configurable: true
        });
        Application.prototype.$$SetRootVisual = function (value) {
            this._RootVisual = value;
        };
        Application.prototype.Attach = function (canvas) {
            this.MainSurface.init(canvas);
            this.MainSurface.Attach(this._RootVisual, true);
        };
        Application.prototype.Start = function () {
            this.Update();
            this.Render();
            this._ClockTimer.RegisterTimer(this);
            this._IsLoaded = true;
            this.Loaded.raiseAsync(this, null);
        };
        Application.prototype.OnTicked = function (lastTime, nowTime) {
            this.ProcessStoryboards(lastTime, nowTime);
            this.Update();
            this.Render();
        };
        Application.prototype.StopEngine = function () {
            this._ClockTimer.UnregisterTimer(this);
        };
        Application.prototype.ProcessStoryboards = function (lastTime, nowTime) {
            perfex.timer.start('StoryboardsProcess', this);
            for (var i = 0, sbs = this._Storyboards; i < sbs.length; i++) {
                sbs[i].Update(nowTime);
            }
            perfex.timer.stop();
        };
        Application.prototype.Update = function () {
            if (this._IsRunning)
                return;
            this._IsRunning = true;
            perfex.timer.start('UpdateLayout', this);
            var updated = this.MainSurface.updateLayout();
            perfex.timer.stop();
            this._IsRunning = false;
        };
        Application.prototype.Render = function () {
            perfex.timer.start('Render', this);
            this.MainSurface.render();
            perfex.timer.stop();
        };
        Application.prototype.RegisterStoryboard = function (storyboard) {
            var sbs = this._Storyboards;
            var index = sbs.indexOf(storyboard);
            if (index === -1)
                sbs.push(storyboard);
        };
        Application.prototype.UnregisterStoryboard = function (storyboard) {
            var sbs = this._Storyboards;
            var index = sbs.indexOf(storyboard);
            if (index !== -1)
                sbs.splice(index, 1);
        };
        Application.GetAsync = function (url) {
            return nullstone.async.create(function (resolve, reject) {
                Fayde.Markup.Resolve(url)
                    .then(function (appm) {
                    TimelineProfile.Parse(true, "App");
                    var app = Fayde.Markup.Load(null, appm);
                    TimelineProfile.Parse(false, "App");
                    if (!(app instanceof Application))
                        reject("Markup must be an Application.");
                    else
                        resolve(app);
                }, reject);
            });
        };
        Application.prototype.Resolve = function () {
            var _this = this;
            return nullstone.async.create(function (resolve, reject) {
                resolve(_this);
            });
        };
        Application.ResourcesProperty = DependencyProperty.RegisterImmutable("Resources", function () { return Fayde.ResourceDictionary; }, Application);
        Application.ThemeNameProperty = DependencyProperty.Register("ThemeName", function () { return String; }, Application, "Default", function (d, args) { return d.OnThemeNameChanged(args); });
        return Application;
    })(Fayde.DependencyObject);
    Fayde.Application = Application;
    Fayde.CoreLibrary.add(Application);
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var requestAnimFrame = (function () {
        return window.requestAnimationFrame ||
            window.webkitRequestAnimationFrame ||
            window.mozRequestAnimationFrame ||
            window.oRequestAnimationFrame ||
            window.msRequestAnimationFrame ||
            function (callback) {
                window.setTimeout(callback, 1000 / 200);
            };
    })();
    var ClockTimer = (function () {
        function ClockTimer() {
            this._Listeners = [];
            this._LastTime = 0;
        }
        ClockTimer.prototype.RegisterTimer = function (listener) {
            var ls = this._Listeners;
            var index = ls.indexOf(listener);
            if (index > -1)
                return;
            ls.push(listener);
            if (ls.length === 1)
                this._RequestAnimationTick();
        };
        ClockTimer.prototype.UnregisterTimer = function (listener) {
            var ls = this._Listeners;
            var index = ls.indexOf(listener);
            if (index > -1)
                ls.splice(index, 1);
        };
        ClockTimer.prototype._DoTick = function () {
            var nowTime = new Date().getTime();
            var lastTime = this._LastTime;
            this._LastTime = nowTime;
            var ls = this._Listeners;
            var len = ls.length;
            if (len === 0)
                return;
            for (var i = 0; i < len; i++) {
                ls[i].OnTicked(lastTime, nowTime);
            }
            this._RequestAnimationTick();
        };
        ClockTimer.prototype._RequestAnimationTick = function () {
            var _this = this;
            requestAnimFrame(function () { return _this._DoTick(); });
        };
        return ClockTimer;
    })();
    Fayde.ClockTimer = ClockTimer;
})(Fayde || (Fayde = {}));
var Exception = (function () {
    function Exception(message) {
        this.Message = message;
    }
    Exception.prototype.toString = function () {
        var typeName = this.constructor.name;
        if (typeName)
            return typeName + ": " + this.Message;
        return this.Message;
    };
    return Exception;
})();
var ArgumentException = (function (_super) {
    __extends(ArgumentException, _super);
    function ArgumentException(message) {
        _super.call(this, message);
    }
    return ArgumentException;
})(Exception);
var ArgumentNullException = (function (_super) {
    __extends(ArgumentNullException, _super);
    function ArgumentNullException(message) {
        _super.call(this, message);
    }
    return ArgumentNullException;
})(Exception);
var InvalidOperationException = (function (_super) {
    __extends(InvalidOperationException, _super);
    function InvalidOperationException(message) {
        _super.call(this, message);
    }
    return InvalidOperationException;
})(Exception);
var XamlParseException = (function (_super) {
    __extends(XamlParseException, _super);
    function XamlParseException(message) {
        _super.call(this, message);
    }
    return XamlParseException;
})(Exception);
var XamlMarkupParseException = (function (_super) {
    __extends(XamlMarkupParseException, _super);
    function XamlMarkupParseException(message) {
        _super.call(this, message);
    }
    return XamlMarkupParseException;
})(Exception);
var NotSupportedException = (function (_super) {
    __extends(NotSupportedException, _super);
    function NotSupportedException(message) {
        _super.call(this, message);
    }
    return NotSupportedException;
})(Exception);
var IndexOutOfRangeException = (function (_super) {
    __extends(IndexOutOfRangeException, _super);
    function IndexOutOfRangeException(index) {
        _super.call(this, index.toString());
    }
    return IndexOutOfRangeException;
})(Exception);
var ArgumentOutOfRangeException = (function (_super) {
    __extends(ArgumentOutOfRangeException, _super);
    function ArgumentOutOfRangeException(msg) {
        _super.call(this, msg);
    }
    return ArgumentOutOfRangeException;
})(Exception);
var AttachException = (function (_super) {
    __extends(AttachException, _super);
    function AttachException(message, data) {
        _super.call(this, message);
        this.Data = data;
    }
    return AttachException;
})(Exception);
var InvalidJsonException = (function (_super) {
    __extends(InvalidJsonException, _super);
    function InvalidJsonException(jsonText, innerException) {
        _super.call(this, "Invalid json.");
        this.JsonText = jsonText;
        this.InnerException = innerException;
    }
    return InvalidJsonException;
})(Exception);
var TargetInvocationException = (function (_super) {
    __extends(TargetInvocationException, _super);
    function TargetInvocationException(message, innerException) {
        _super.call(this, message);
        this.InnerException = innerException;
    }
    return TargetInvocationException;
})(Exception);
var UnknownTypeException = (function (_super) {
    __extends(UnknownTypeException, _super);
    function UnknownTypeException(fullTypeName) {
        _super.call(this, fullTypeName);
        this.FullTypeName = fullTypeName;
    }
    return UnknownTypeException;
})(Exception);
var FormatException = (function (_super) {
    __extends(FormatException, _super);
    function FormatException(message) {
        _super.call(this, message);
    }
    return FormatException;
})(Exception);
var Fayde;
(function (Fayde) {
    var Engine;
    (function (Engine) {
        var FocusManager = (function () {
            function FocusManager(state) {
                this._ChangedEvents = [];
                this._State = state;
            }
            FocusManager.prototype.GetFocusToRoot = function () {
                if (!this.Node)
                    return null;
                return elementPathToRoot(this.Node);
            };
            FocusManager.prototype.OnNodeDetached = function (node) {
                var f = this.Node;
                while (f) {
                    if (f === node) {
                        this._FocusNode();
                        return;
                    }
                    f = f.VisualParentNode;
                }
            };
            FocusManager.prototype.TabFocus = function (isShift) {
                if (!this.Node)
                    return false;
                Fayde.TabNavigationWalker.Focus(this.Node, !isShift);
                return true;
            };
            FocusManager.prototype.Focus = function (ctrlNode, recurse) {
                recurse = recurse === undefined || recurse === true;
                if (!ctrlNode.IsAttached)
                    return false;
                var walker = Fayde.DeepTreeWalker(ctrlNode);
                var uin;
                while (uin = walker.Step()) {
                    if (uin.XObject.Visibility !== Fayde.Visibility.Visible) {
                        walker.SkipBranch();
                        continue;
                    }
                    if (!(uin instanceof Fayde.Controls.ControlNode))
                        continue;
                    var cn = uin;
                    var c = cn.XObject;
                    if (!c.IsEnabled) {
                        if (!recurse)
                            return false;
                        walker.SkipBranch();
                        continue;
                    }
                    var loaded = ctrlNode.IsLoaded;
                    var check = ctrlNode;
                    while (!loaded && (check = check.VisualParentNode)) {
                        loaded = loaded || check.IsLoaded;
                    }
                    if (loaded && cn.LayoutUpdater.assets.totalIsRenderVisible && c.IsTabStop)
                        return this._FocusNode(cn);
                    if (!recurse)
                        return false;
                }
                return false;
            };
            FocusManager.prototype._FocusNode = function (uin) {
                if (uin === this.Node)
                    return true;
                var fn = this.Node;
                if (fn) {
                    this._ChangedEvents.push({
                        LostFocus: elementPathToRoot(fn),
                        GotFocus: null
                    });
                }
                this.Node = uin;
                if (uin) {
                    this._ChangedEvents.push({
                        LostFocus: null,
                        GotFocus: elementPathToRoot(uin)
                    });
                }
                if (this._State.IsFirstUserInitiated)
                    this.EmitChangesAsync();
                return true;
            };
            FocusManager.prototype.EmitChanges = function () {
                var evts = this._ChangedEvents;
                var cur;
                while (cur = evts.shift()) {
                    this._EmitFocusList("lost", cur.LostFocus);
                    this._EmitFocusList("got", cur.GotFocus);
                }
            };
            FocusManager.prototype.EmitChangesAsync = function () {
                var _this = this;
                setTimeout(function () { return _this.EmitChanges(); }, 1);
            };
            FocusManager.prototype._EmitFocusList = function (type, list) {
                if (!list)
                    return;
                var cur;
                while (cur = list.shift()) {
                    cur._EmitFocusChange(type);
                }
            };
            FocusManager.prototype.FocusAnyLayer = function (walker) {
                if (!this.Node) {
                    var top;
                    for (var node; walker.step();) {
                        node = walker.current.getAttachedValue("$node");
                        if (!top)
                            top = node;
                        if (Fayde.TabNavigationWalker.Focus(node))
                            break;
                    }
                    if (!this.Node && top)
                        this._FocusNode(top);
                }
                if (this._State.IsFirstUserInitiated)
                    this.EmitChangesAsync();
            };
            return FocusManager;
        })();
        Engine.FocusManager = FocusManager;
        function elementPathToRoot(source) {
            var list = [];
            while (source) {
                list.push(source);
                source = source.VisualParentNode;
            }
            return list;
        }
    })(Engine = Fayde.Engine || (Fayde.Engine = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Engine;
    (function (Engine) {
        var InputManager = (function () {
            function InputManager(surface) {
                this._Cursor = Fayde.CursorType.Default;
                this.SetCursor = function (cursor) { };
                this._CurrentPos = null;
                this._EmittingMouseEvent = false;
                this._InputList = [];
                this._Captured = null;
                this._PendingCapture = null;
                this._PendingReleaseCapture = false;
                this._CapturedInputList = [];
                this._Surface = surface;
                this._KeyInterop = Fayde.Input.CreateKeyInterop();
                this._MouseInterop = Fayde.Input.CreateMouseInterop();
                this._TouchInterop = Fayde.Input.CreateTouchInterop();
                this._Focus = new Engine.FocusManager(this._State = {
                    IsUserInitiated: false,
                    IsFirstUserInitiated: false
                });
            }
            Object.defineProperty(InputManager.prototype, "FocusedNode", {
                get: function () { return this._Focus.Node; },
                enumerable: true,
                configurable: true
            });
            InputManager.prototype.Focus = function (node, recurse) { return this._Focus.Focus(node, recurse); };
            InputManager.prototype.Register = function (canvas) {
                var _this = this;
                this.SetCursor = function (cursor) { return canvas.style.cursor = Fayde.CursorTypeMappings[Fayde.CursorType[_this._Cursor = cursor]]; };
                this._KeyInterop.RegisterEvents(this);
                this._MouseInterop.RegisterEvents(this, canvas);
                this._TouchInterop.Register(this, canvas);
            };
            InputManager.prototype.OnNodeDetached = function (node) {
                var il = this._InputList;
                if (il[il.length - 1] === node)
                    this._InputList = [];
                this._Focus.OnNodeDetached(node);
            };
            InputManager.prototype.SetIsUserInitiatedEvent = function (value) {
                this._Focus.EmitChanges();
                this._State.IsFirstUserInitiated = this._State.IsFirstUserInitiated || value;
                this._State.IsUserInitiated = value;
            };
            InputManager.prototype.HandleKeyDown = function (args) {
                this.SetIsUserInitiatedEvent(true);
                Fayde.Input.Keyboard.RefreshModifiers(args.Modifiers);
                var focusToRoot = this._Focus.GetFocusToRoot();
                if (focusToRoot)
                    this._EmitKeyDown(focusToRoot, args);
                if (!args.Handled && args.Key === Fayde.Input.Key.Tab) {
                    if (!this._Focus.TabFocus(args.Modifiers.Shift))
                        this._Focus.FocusAnyLayer(this._Surface.walkLayers(true));
                    args.Handled = true;
                }
                this.SetIsUserInitiatedEvent(false);
            };
            InputManager.prototype._EmitKeyDown = function (list, args, endIndex) {
                if (endIndex === 0)
                    return;
                if (!endIndex || endIndex === -1)
                    endIndex = list.length;
                var i = 0;
                var cur = list.shift();
                while (cur && i < endIndex) {
                    cur._EmitKeyDown(args);
                    cur = list.shift();
                    i++;
                }
            };
            InputManager.prototype.HandleMousePress = function (button, pos) {
                this.SetIsUserInitiatedEvent(true);
                var handled = this.HandleMouseEvent(Fayde.Input.MouseInputType.MouseDown, button, pos);
                this.UpdateCursorFromInputList();
                this.SetIsUserInitiatedEvent(false);
                return handled;
            };
            InputManager.prototype.HandleMouseRelease = function (button, pos) {
                this.SetIsUserInitiatedEvent(true);
                this.HandleMouseEvent(Fayde.Input.MouseInputType.MouseUp, button, pos);
                this.UpdateCursorFromInputList();
                this.SetIsUserInitiatedEvent(false);
                if (this._Captured)
                    this._PerformReleaseCapture();
            };
            InputManager.prototype.HandleMouseEvent = function (type, button, pos, delta, emitLeave, emitEnter) {
                this._CurrentPos = pos;
                if (this._EmittingMouseEvent)
                    return false;
                var newInputList = this.HitTestPoint(pos);
                if (!newInputList)
                    return false;
                this._EmittingMouseEvent = true;
                var indices = { Index1: -1, Index2: -1 };
                findFirstCommonElement(this._InputList, newInputList, indices);
                if (emitLeave === undefined || emitLeave === true)
                    this._EmitMouseList(Fayde.Input.MouseInputType.MouseLeave, button, pos, delta, this._InputList, indices.Index1);
                if (emitEnter === undefined || emitEnter === true)
                    this._EmitMouseList(Fayde.Input.MouseInputType.MouseEnter, button, pos, delta, newInputList, indices.Index2);
                var handled = false;
                if (type !== Fayde.Input.MouseInputType.NoOp)
                    handled = this._EmitMouseList(type, button, pos, delta, this._Captured ? this._CapturedInputList : newInputList);
                this._InputList = newInputList;
                if (this._Surface.HitTestCallback)
                    this._Surface.HitTestCallback(newInputList);
                if (this._PendingCapture)
                    this._PerformCapture(this._PendingCapture);
                if (this._PendingReleaseCapture || (this._Captured && !this._Captured.CanCaptureMouse()))
                    this._PerformReleaseCapture();
                this._EmittingMouseEvent = false;
                return handled;
            };
            InputManager.prototype._EmitMouseList = function (type, button, pos, delta, list, endIndex) {
                var handled = false;
                if (endIndex === 0)
                    return handled;
                if (!endIndex || endIndex === -1)
                    endIndex = list.length;
                var args = this._MouseInterop.CreateEventArgs(type, pos, delta);
                var node = list[0];
                if (node && args instanceof Fayde.RoutedEventArgs)
                    args.Source = node.XObject;
                var isL = this._MouseInterop.IsLeftButton(button);
                var isR = this._MouseInterop.IsRightButton(button);
                if (Fayde.Engine.Inspection.TryHandle(type, isL, isR, args, list))
                    return true;
                for (var i = 0; i < endIndex; i++) {
                    node = list[i];
                    if (type === Fayde.Input.MouseInputType.MouseLeave)
                        args.Source = node.XObject;
                    if (node._EmitMouseEvent(type, isL, isR, args))
                        handled = true;
                    if (type === Fayde.Input.MouseInputType.MouseLeave)
                        args = this._MouseInterop.CreateEventArgs(type, pos, delta);
                }
                return handled;
            };
            InputManager.prototype.HitTestPoint = function (pos) {
                return this._Surface.hitTest(pos).map(function (upd) { return upd.getAttachedValue("$node"); });
            };
            InputManager.prototype.UpdateCursorFromInputList = function () {
                var newCursor = Fayde.CursorType.Default;
                var list = this._Captured ? this._CapturedInputList : this._InputList;
                var len = list.length;
                for (var i = 0; i < len; i++) {
                    newCursor = list[i].XObject.Cursor;
                    if (newCursor !== Fayde.CursorType.Default)
                        break;
                }
                this.SetCursor(newCursor);
            };
            InputManager.prototype.SetMouseCapture = function (uin) {
                if (this._Captured || this._PendingCapture)
                    return uin === this._Captured || uin === this._PendingCapture;
                if (!this._EmittingMouseEvent)
                    return false;
                this._PendingCapture = uin;
                return true;
            };
            InputManager.prototype.ReleaseMouseCapture = function (uin) {
                if (uin !== this._Captured && uin !== this._PendingCapture)
                    return;
                if (this._EmittingMouseEvent)
                    this._PendingReleaseCapture = true;
                else
                    this._PerformReleaseCapture();
            };
            InputManager.prototype._PerformCapture = function (uin) {
                this._Captured = uin;
                var newInputList = [];
                while (uin != null) {
                    newInputList.push(uin);
                    uin = uin.VisualParentNode;
                }
                this._CapturedInputList = newInputList;
                this._PendingCapture = null;
            };
            InputManager.prototype._PerformReleaseCapture = function () {
                var oldCaptured = this._Captured;
                this._Captured = null;
                this._PendingReleaseCapture = false;
                oldCaptured._EmitLostMouseCapture(this._CurrentPos);
                this.HandleMouseEvent(Fayde.Input.MouseInputType.NoOp, null, this._CurrentPos, undefined, false, true);
            };
            return InputManager;
        })();
        Engine.InputManager = InputManager;
        function findFirstCommonElement(list1, list2, outObj) {
            var i = list1.length - 1;
            var j = list2.length - 1;
            outObj.Index1 = -1;
            outObj.Index2 = -1;
            while (i >= 0 && j >= 0) {
                if (list1[i] !== list2[j])
                    return;
                outObj.Index1 = i--;
                outObj.Index2 = j--;
            }
        }
    })(Engine = Fayde.Engine || (Fayde.Engine = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Engine;
    (function (Engine) {
        var Inspection = (function () {
            function Inspection() {
            }
            Inspection.TryHandle = function (type, isLeftButton, isRightButton, args, htlist) {
                if (!Fayde.IsInspectionOn)
                    return false;
                if (type !== Fayde.Input.MouseInputType.MouseDown)
                    return false;
                if (!isRightButton)
                    return false;
                if (!Fayde.Input.Keyboard.HasControl())
                    return false;
                var pos = args.AbsolutePos;
                showMenu(pos, htlist);
                return true;
            };
            Inspection.Kill = function () {
                if (menu)
                    menu.style.display = "none";
            };
            return Inspection;
        })();
        Engine.Inspection = Inspection;
        var menu = null;
        function showMenu(pos, htlist) {
            menu = menu || createMenu();
            fillMenu(htlist);
            menu.style.left = pos.x.toString() + "px";
            menu.style.top = pos.y.toString() + "px";
            menu.style.display = "";
        }
        function createMenu() {
            var m = document.createElement("div");
            m.style.position = "absolute";
            m.style.display = "none";
            m.style.backgroundColor = "rgba(128,128,128,1.0)";
            m.style.padding = "5px";
            m.style.fontFamily = "Tahoma";
            m.oncontextmenu = function () { return false; };
            document.body.appendChild(m);
            return m;
        }
        function fillMenu(htlist) {
            menu.innerHTML = "";
            var len = htlist.length;
            for (var i = 0; i < len; i++) {
                menu.appendChild(createMenuItem(htlist[i]));
            }
        }
        function createMenuItem(cur) {
            var miDiv = document.createElement("div");
            miDiv.style.cursor = "pointer";
            miDiv.innerHTML = serializeUINode(cur);
            miDiv.onclick = function () { return handleMenuItemClick(cur); };
            miDiv.onmouseenter = function () { return handleMenuItemEnter(miDiv); };
            miDiv.onmouseleave = function () { return handleMenuItemLeave(miDiv); };
            return miDiv;
        }
        function serializeUINode(uin) {
            var cur = uin.XObject;
            var str = "";
            var id = cur._ID;
            if (id)
                str += "[" + id + "] ";
            str += cur.constructor.name;
            var name = uin.Name;
            if (name) {
                str += " [";
                var ns = uin.NameScope;
                if (!ns)
                    str += "^";
                else if (ns.IsRoot)
                    str += "+";
                else
                    str += "-";
                str += name + "]";
            }
            return str;
        }
        function handleMenuItemClick(uin) {
            menu.style.display = "none";
        }
        function handleMenuItemEnter(mi) {
            mi.style.textDecoration = "underline";
        }
        function handleMenuItemLeave(mi) {
            mi.style.textDecoration = "none";
        }
    })(Engine = Fayde.Engine || (Fayde.Engine = {}));
})(Fayde || (Fayde = {}));
var resizeTimeout;
var Fayde;
(function (Fayde) {
    var Surface = (function (_super) {
        __extends(Surface, _super);
        function Surface(app) {
            _super.call(this);
            this.$$root = null;
            Object.defineProperty(this, "App", { value: app, writable: false });
            this.$$inputMgr = new Fayde.Engine.InputManager(this);
        }
        Surface.prototype.init = function (canvas) {
            var _this = this;
            _super.prototype.init.call(this, canvas);
            this.$$stretchCanvas();
            document.body.onresize = function (e) { return _this.$$handleResize(window.event ? window.event : e); };
            window.onresize = function (e) { return _this.$$handleResize(window.event ? window.event : e); };
            this.$$inputMgr.Register(canvas);
        };
        Surface.prototype.Attach = function (uie, root) {
            if (root === true) {
                if (!(uie instanceof Fayde.UIElement))
                    throw new Exception("Unsupported top level element.");
                if (this.$$root)
                    this.detachLayer(this.$$root.XamlNode.LayoutUpdater);
                this.$$root = uie;
            }
            this.attachLayer(uie.XamlNode.LayoutUpdater, root);
        };
        Surface.prototype.attachLayer = function (layer, root) {
            _super.prototype.attachLayer.call(this, layer, root);
            var node = layer.getAttachedValue("$node");
            node.SetIsLoaded(true);
            node.SetIsAttached(true);
        };
        Surface.prototype.Detach = function (uie) {
            this.detachLayer(uie.XamlNode.LayoutUpdater);
        };
        Surface.prototype.detachLayer = function (layer) {
            var node = layer.getAttachedValue("$node");
            node.SetIsLoaded(false);
            node.SetIsAttached(false);
            _super.prototype.detachLayer.call(this, layer);
        };
        Surface.prototype.updateLayout = function () {
            var updated = _super.prototype.updateLayout.call(this);
            if (updated)
                this.$$onLayoutUpdated();
            return updated;
        };
        Surface.prototype.$$onLayoutUpdated = function () {
            for (var walker = this.walkLayers(); walker.step();) {
                for (var subwalker = walker.current.walkDeep(); subwalker.step();) {
                    var upd = subwalker.current;
                    var node = upd.getAttachedValue("$node");
                    var xobj = node.XObject;
                    xobj.LayoutUpdated.raise(xobj, null);
                }
            }
        };
        Surface.prototype.Focus = function (node, recurse) {
            return this.$$inputMgr.Focus(node, recurse);
        };
        Surface.HasFocus = function (uie) {
            var uin = uie.XamlNode;
            var surface = uin.LayoutUpdater.tree.surface;
            if (!surface)
                return false;
            var curNode = surface.$$inputMgr.FocusedNode;
            while (curNode) {
                if (curNode === uin)
                    return true;
                curNode = curNode.VisualParentNode;
            }
            return false;
        };
        Surface.Focus = function (uie, recurse) {
            var uin = uie.XamlNode;
            var surface = uin.LayoutUpdater.tree.surface;
            if (!surface)
                return false;
            return surface.$$inputMgr.Focus(uin, recurse);
        };
        Surface.GetFocusedElement = function (uie) {
            var uin = uie.XamlNode;
            var surface = uin.LayoutUpdater.tree.surface;
            if (!surface)
                return null;
            var curNode = surface.$$inputMgr.FocusedNode;
            return curNode.XObject;
        };
        Surface.RemoveFocusFrom = function (uie) {
            var node = uie.XamlNode;
            var surface = node.LayoutUpdater.tree.surface;
            if (!surface)
                return false;
            surface.$$inputMgr.OnNodeDetached(node);
            return true;
        };
        Surface.SetMouseCapture = function (uin) {
            var surface = uin.LayoutUpdater.tree.surface;
            if (!surface)
                return false;
            return surface.$$inputMgr.SetMouseCapture(uin);
        };
        Surface.ReleaseMouseCapture = function (uin) {
            var surface = uin.LayoutUpdater.tree.surface;
            if (!surface)
                return;
            surface.$$inputMgr.ReleaseMouseCapture(uin);
        };
        Surface.prototype.$$handleResize = function (evt) {
            var _this = this;
            if (resizeTimeout)
                clearTimeout(resizeTimeout);
            resizeTimeout = setTimeout(function () {
                _this.$$stretchCanvas();
                resizeTimeout = null;
            }, 15);
        };
        Surface.prototype.$$stretchCanvas = function () {
            this.resize(window.innerWidth, window.innerHeight);
        };
        return Surface;
    })(minerva.engine.Surface);
    Fayde.Surface = Surface;
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Theme = (function () {
        function Theme(name, libUri) {
            this.Resources = null;
            this.Name = name;
            this.LibraryUri = libUri;
        }
        Theme.prototype.LoadAsync = function () {
            var _this = this;
            var reqUri = Fayde.ThemeConfig.GetRequestUri(this.LibraryUri, this.Name);
            if (!reqUri)
                return nullstone.async.resolve(this);
            return nullstone.async.create(function (resolve, reject) {
                Fayde.Markup.Resolve(reqUri)
                    .then(function (md) {
                    var rd = Fayde.Markup.Load(null, md);
                    if (!(rd instanceof Fayde.ResourceDictionary))
                        reject(new Error("Theme root must be a ResourceDictionary."));
                    Object.defineProperty(_this, "Resources", { value: rd, writable: false });
                    resolve(_this);
                }, function () {
                    if (Theme.WarnMissing)
                        console.warn("Failed to load Theme. [" + _this.LibraryUri + "][" + _this.Name + "]");
                    resolve(_this);
                });
            });
        };
        Theme.prototype.GetImplicitStyle = function (type) {
            var rd = this.Resources;
            if (!rd)
                return undefined;
            var style = rd.Get(type);
            if (style instanceof Fayde.Style)
                return style;
            return undefined;
        };
        Theme.WarnMissing = false;
        return Theme;
    })();
    Fayde.Theme = Theme;
    Fayde.CoreLibrary.add(Theme);
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var ThemeConfig;
    (function (ThemeConfig) {
        var configs = {};
        var DEFAULT_TEMPLATE_URI = "lib/<libname>/themes/<themename>.Theme.xml";
        function GetRequestUri(uri, name) {
            if (Fayde.Uri.isNullOrEmpty(uri))
                return null;
            var config = configs[uri.toString()];
            if (config && config.none)
                return null;
            var templateUri = ((config) ? config.requestTemplateUri : null) || DEFAULT_TEMPLATE_URI;
            return processTemplate(uri, name, templateUri);
        }
        ThemeConfig.GetRequestUri = GetRequestUri;
        function OverrideRequestUri(uri, templateUri) {
            configs[uri.toString()] = {
                requestTemplateUri: templateUri
            };
        }
        ThemeConfig.OverrideRequestUri = OverrideRequestUri;
        function Set(libName, path) {
            if (!libName) {
                console.warn("Could not configure theme. No library specified.");
                return;
            }
            var uri = new Fayde.Uri(libName);
            if (uri.scheme !== "http")
                uri = new Fayde.Uri("lib://" + libName);
            if (path === undefined)
                configs[uri.toString()] = null;
            else if (path === null)
                configs[uri.toString()] = {
                    none: true
                };
            else
                configs[uri.toString()] = {
                    requestTemplateUri: path
                };
        }
        ThemeConfig.Set = Set;
        function processTemplate(uri, name, template) {
            var libName = uri.host;
            var rv = template;
            rv = rv.replace("<libname>", libName);
            rv = rv.replace("<themename>", name);
            return rv;
        }
        OverrideRequestUri(new Fayde.Uri(Fayde.XMLNS), "lib/fayde/themes/<themename>.theme.xml");
    })(ThemeConfig = Fayde.ThemeConfig || (Fayde.ThemeConfig = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var ThemeManagerImpl = (function () {
        function ThemeManagerImpl() {
            this.$$libthemerepos = [];
            Fayde.TypeManager.libResolver.libraryCreated.on(this.$$onLibraryCreated, this);
            this.$$libthemerepos.push(new LibraryThemeRepo(new Fayde.Uri(Fayde.XMLNS)));
        }
        ThemeManagerImpl.prototype.$$onLibraryCreated = function (sender, args) {
            this.$$libthemerepos.push(new LibraryThemeRepo(args.library.uri));
        };
        ThemeManagerImpl.prototype.LoadAsync = function (themeName) {
            return nullstone.async.many(this.$$libthemerepos.map(function (repo) { return repo.ChangeActive(themeName); }));
        };
        ThemeManagerImpl.prototype.FindStyle = function (defaultStyleKey) {
            if (!defaultStyleKey)
                return null;
            var uri = defaultStyleKey.$$uri;
            if (uri) {
                var repo = this.$$findRepo(uri);
                if (repo)
                    return repo.Active.GetImplicitStyle(defaultStyleKey);
            }
            return null;
        };
        ThemeManagerImpl.prototype.$$findRepo = function (uri) {
            for (var i = 0, repos = this.$$libthemerepos; i < repos.length; i++) {
                var repo = repos[i];
                if (repo.Uri.toString() === uri)
                    return repo;
            }
        };
        return ThemeManagerImpl;
    })();
    var LibraryThemeRepo = (function () {
        function LibraryThemeRepo(uri) {
            this.$$themes = {};
            Object.defineProperty(this, "Uri", { value: uri, writable: false });
        }
        Object.defineProperty(LibraryThemeRepo.prototype, "Active", {
            get: function () {
                return this.$$active;
            },
            enumerable: true,
            configurable: true
        });
        LibraryThemeRepo.prototype.Get = function (name) {
            var theme = this.$$themes[name];
            if (!theme)
                theme = this.$$themes[name] = new Fayde.Theme(name, this.Uri);
            return theme;
        };
        LibraryThemeRepo.prototype.ChangeActive = function (name) {
            var _this = this;
            var theme = this.Get(name);
            return nullstone.async.create(function (resolve, reject) {
                theme.LoadAsync()
                    .then(function () {
                    _this.$$active = theme;
                    resolve(theme);
                }, reject);
            });
        };
        return LibraryThemeRepo;
    })();
    Fayde.ThemeManager = new ThemeManagerImpl();
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Expression = (function () {
        function Expression() {
            this.IsUpdating = false;
            this.IsAttached = false;
        }
        Expression.prototype.Seal = function (owner, prop) {
        };
        Expression.prototype.OnAttached = function (target) {
            this.IsAttached = true;
            this.OnDataContextChanged(target.XamlNode.DataContext);
        };
        Expression.prototype.OnDetached = function (target) {
            this.IsAttached = false;
            this.OnDataContextChanged(undefined);
        };
        Expression.prototype.GetValue = function (propd) {
        };
        Expression.prototype.OnDataContextChanged = function (newDataContext) {
        };
        return Expression;
    })();
    Fayde.Expression = Expression;
})(Fayde || (Fayde = {}));
/// <reference path="Expression.ts" />
var Fayde;
(function (Fayde) {
    var Data;
    (function (Data) {
        var BindingExpressionBase = (function (_super) {
            __extends(BindingExpressionBase, _super);
            function BindingExpressionBase(binding) {
                _super.call(this);
                this._TwoWayLostFocusElement = null;
                this._CurrentNotifyError = null;
                this._CurrentError = null;
                this._Cached = false;
                this._CachedValue = undefined;
                this._IsSealed = false;
                if (!Object.isFrozen(binding))
                    Object.freeze(binding);
                Object.defineProperty(this, "ParentBinding", {
                    value: binding,
                    writable: false
                });
            }
            Object.defineProperty(BindingExpressionBase.prototype, "DataItem", {
                get: function () {
                    return this.PropertyPathWalker.Source;
                },
                enumerable: true,
                configurable: true
            });
            BindingExpressionBase.prototype.Seal = function (owner, prop) {
                if (this._IsSealed)
                    return;
                this._IsSealed = true;
                Object.defineProperty(this, "Target", {
                    value: owner,
                    writable: false
                });
                var propd = prop;
                Object.defineProperty(this, "Property", {
                    value: propd,
                    writable: false
                });
                var binding = this.ParentBinding;
                var path = binding.Path.Path;
                if ((!path || path === ".") && binding.Mode === Data.BindingMode.TwoWay)
                    throw new ArgumentException("TwoWay bindings require a non-empty Path.");
                if (binding.Mode === Data.BindingMode.TwoWay && (owner instanceof Fayde.Controls.TextBox || owner instanceof Fayde.Controls.PasswordBox))
                    this._TwoWayLostFocusElement = owner;
                this._IsDataContextBound = !binding.ElementName && !binding.Source && !binding.RelativeSource;
                var bindsToView = propd === Fayde.DependencyObject.DataContextProperty || propd.GetTargetType() === nullstone.IEnumerable_ || propd.GetTargetType() === Data.ICollectionView_;
                var walker = this.PropertyPathWalker = new Data.PropertyPathWalker(binding.Path.ParsePath, binding.BindsDirectlyToSource, bindsToView, this._IsDataContextBound);
                if (binding.Mode !== Data.BindingMode.OneTime)
                    walker.Listen(this);
            };
            BindingExpressionBase.prototype.OnAttached = function (element) {
                var _this = this;
                if (this.IsAttached)
                    return;
                if (this.Target && this.Target !== element)
                    throw new Error("Cannot attach BindingExpression to another DependencyObject.");
                if (Fayde.Data.Debug && window.console)
                    console.log("[BINDING] OnAttached: [" + element.constructor.name + "] {Path=" + this.ParentBinding.Path.Path + "}");
                _super.prototype.OnAttached.call(this, element);
                this._SourceAvailableMonitor = this.Target.XamlNode.MonitorIsAttached(function (newIsAttached) { return _this._OnSourceAvailable(); });
                var source = this._FindSource();
                this.PropertyPathWalker.Update(source);
                if (this._TwoWayLostFocusElement)
                    this._TwoWayLostFocusElement.LostFocus.on(this._TargetLostFocus, this);
                if (this.ParentBinding.Mode === Data.BindingMode.TwoWay && this.Property.IsCustom) {
                    this._PropertyListener = this.Property.Store.ListenToChanged(this.Target, this.Property, this._UpdateSourceCallback, this);
                }
            };
            BindingExpressionBase.prototype.GetValue = function (propd) {
                if (this._Cached)
                    return this._CachedValue;
                if (this.PropertyPathWalker.IsPathBroken) {
                    var target = this.Target;
                    if (Data.WarnBrokenPath && target && target.XamlNode.IsAttached) {
                        var fe = target instanceof Fayde.FrameworkElement ? target : null;
                        if (!fe || fe.XamlNode.IsLoaded)
                            console.warn("[BINDING] Path Broken --> Path='" + this.PropertyPathWalker.Path + "'");
                    }
                    this._CachedValue = null;
                }
                else {
                    this._CachedValue = this.PropertyPathWalker.ValueInternal;
                }
                this._CachedValue = this._ConvertToType(propd, this._CachedValue);
                this._Cached = true;
                return this._CachedValue;
            };
            BindingExpressionBase.prototype._OnSourceAvailable = function () {
                this._SourceAvailableMonitor.Detach();
                var source = this._FindSource();
                if (source)
                    this.PropertyPathWalker.Update(source);
                this._Invalidate();
                this.Target.SetValue(this.Property, this);
            };
            BindingExpressionBase.prototype._FindSource = function () {
                if (this.ParentBinding.Source) {
                    return this.ParentBinding.Source;
                }
                else if (this.ParentBinding.ElementName != null) {
                    return this._FindSourceByElementName();
                }
                else if (this.ParentBinding.RelativeSource) {
                    return this.ParentBinding.RelativeSource.Find(this.Target);
                }
                return this._DataContext;
            };
            BindingExpressionBase.prototype._FindSourceByElementName = function () {
                var name = this.ParentBinding.ElementName;
                var xobj = this.Target;
                if (!xobj)
                    return undefined;
                var source = xobj.FindName(name, true);
                if (source)
                    return source;
                return undefined;
            };
            BindingExpressionBase.prototype.OnDetached = function (element) {
                if (!this.IsAttached)
                    return;
                if (Fayde.Data.Debug && window.console)
                    console.log("[BINDING] OnDetached: [" + element.constructor.name + "] {Path=" + this.ParentBinding.Path.Path + "}");
                _super.prototype.OnDetached.call(this, element);
                if (this._TwoWayLostFocusElement)
                    this._TwoWayLostFocusElement.LostFocus.off(this._TargetLostFocus, this);
                if (this._CurrentError != null) {
                    var fe = getMentor(element);
                    if (fe)
                        Fayde.Validation.RemoveError(fe, this._CurrentError);
                    this._CurrentError = null;
                }
                if (this._PropertyListener) {
                    this._PropertyListener.Detach();
                    this._PropertyListener = null;
                }
                this.PropertyPathWalker.Update(null);
                this.Target = undefined;
            };
            BindingExpressionBase.prototype.IsBrokenChanged = function () {
                this.Refresh();
            };
            BindingExpressionBase.prototype.ValueChanged = function () {
                this.Refresh();
            };
            BindingExpressionBase.prototype.UpdateSource = function () {
                return this._UpdateSourceObject();
            };
            BindingExpressionBase.prototype._TryUpdateSourceObject = function (value) {
                if (this._ShouldUpdateSource())
                    this._UpdateSourceObject(value);
            };
            BindingExpressionBase.prototype._UpdateSourceCallback = function (sender, args) {
                try {
                    if (this._ShouldUpdateSource())
                        this._UpdateSourceObject(this.Target.GetValue(this.Property));
                }
                catch (err) {
                    console.warn("[BINDING] UpdateSource: " + err.toString());
                }
            };
            BindingExpressionBase.prototype._TargetLostFocus = function (sender, e) {
                if (this.ParentBinding.UpdateSourceTrigger === Data.UpdateSourceTrigger.Explicit)
                    return;
                this._UpdateSourceObject();
            };
            BindingExpressionBase.prototype._ShouldUpdateSource = function () {
                if (this.IsUpdating)
                    return false;
                if (!this._TwoWayLostFocusElement)
                    return this.ParentBinding.UpdateSourceTrigger !== Data.UpdateSourceTrigger.Explicit;
                return this.ParentBinding.UpdateSourceTrigger === Data.UpdateSourceTrigger.PropertyChanged;
            };
            BindingExpressionBase.prototype._UpdateSourceObject = function (value) {
                if (value === undefined)
                    value = this.Target.GetValue(this.Property);
                var binding = this.ParentBinding;
                if (binding.Mode !== Data.BindingMode.TwoWay)
                    return;
                var dataError = null;
                var exception;
                var oldUpdating = this.IsUpdating;
                var walker = this.PropertyPathWalker;
                var node = this.PropertyPathWalker.FinalNode;
                try {
                    if (this.PropertyPathWalker.IsPathBroken)
                        return;
                    value = this._ConvertFromTargetToSource(binding, node, value);
                    if (this._CachedValue === undefined && value === undefined)
                        return;
                    this.IsUpdating = true;
                    node.SetValue(value);
                    this._CachedValue = value;
                }
                catch (err) {
                    if (binding.ValidatesOnExceptions) {
                        if (err instanceof TargetInvocationException)
                            exception = err.InnerException;
                        exception = err;
                    }
                }
                finally {
                    this.IsUpdating = oldUpdating;
                    if (binding.ValidatesOnDataErrors && !exception) {
                        dataError = getDataError(walker);
                    }
                }
                if (binding.ValidatesOnExceptions)
                    this._MaybeEmitError(null, exception);
                else if (binding.ValidatesOnDataErrors)
                    this._MaybeEmitError(dataError, exception);
            };
            BindingExpressionBase.prototype.OnDataContextChanged = function (newDataContext) {
                if (Fayde.Data.Debug && window.console)
                    console.log("[BINDING] DataContextChanged: [" + this.Target._ID + ":" + this.Target.constructor.name + "] {Path=" + this.ParentBinding.Path.Path + "}");
                if (this._DataContext === newDataContext)
                    return;
                this._DataContext = newDataContext;
                if (!this._IsDataContextBound)
                    return;
                if (Fayde.Data.IsCounterEnabled)
                    Fayde.Data.DataContextCounter++;
                try {
                    this.PropertyPathWalker.Update(newDataContext);
                    if (this.ParentBinding.Mode === Data.BindingMode.OneTime)
                        this.Refresh();
                }
                catch (err) {
                    console.warn("[BINDING] DataContextChanged Error: " + err.message);
                }
            };
            BindingExpressionBase.prototype._Invalidate = function () {
                this._Cached = false;
                this._CachedValue = undefined;
            };
            BindingExpressionBase.prototype.Refresh = function () {
                var dataError = null;
                var exception;
                if (!this.IsAttached)
                    return;
                var walker = this.PropertyPathWalker;
                this._AttachToNotifyError(walker.FinalNode.GetSource());
                var binding = this.ParentBinding;
                if (!this.IsUpdating && binding.ValidatesOnDataErrors)
                    dataError = getDataError(walker);
                var oldUpdating = this.IsUpdating;
                try {
                    this.IsUpdating = true;
                    this._Invalidate();
                    this.Target.SetValue(this.Property, this);
                }
                catch (err) {
                    if (binding.ValidatesOnExceptions) {
                        exception = err;
                        if (exception instanceof TargetInvocationException)
                            exception = exception.InnerException;
                    }
                    else {
                        console.warn(err);
                    }
                }
                finally {
                    this.IsUpdating = oldUpdating;
                }
                if (binding.ValidatesOnExceptions)
                    this._MaybeEmitError(null, exception);
                else if (binding.ValidatesOnDataErrors)
                    this._MaybeEmitError(dataError, exception);
            };
            BindingExpressionBase.prototype._ConvertFromTargetToSource = function (binding, node, value) {
                if (binding.TargetNullValue && binding.TargetNullValue === value)
                    value = null;
                var converter = binding.Converter;
                if (converter) {
                    value = converter.ConvertBack(value, node.ValueType, binding.ConverterParameter, binding.ConverterCulture);
                }
                return value;
            };
            BindingExpressionBase.prototype._ConvertToType = function (propd, value) {
                var targetType = this.Property.GetTargetType();
                try {
                    var binding = this.ParentBinding;
                    if (!this.PropertyPathWalker.IsPathBroken && binding.Converter) {
                        value = binding.Converter.Convert(value, targetType, binding.ConverterParameter, binding.ConverterCulture);
                    }
                    if (value === DependencyProperty.UnsetValue || this.PropertyPathWalker.IsPathBroken) {
                        value = binding.FallbackValue;
                        if (value === undefined)
                            value = propd.DefaultValue;
                    }
                    else if (value == null) {
                        value = binding.TargetNullValue;
                        if (value == null && this._IsDataContextBound && !binding.Path.Path)
                            value = propd.DefaultValue;
                    }
                    else {
                        var format = binding.StringFormat;
                        if (format) {
                            if (format.indexOf("{0") < 0)
                                format = "{0:" + format + "}";
                            value = Fayde.Localization.Format(format, value);
                        }
                    }
                }
                catch (err) {
                    console.warn("[BINDING]" + err.toString());
                    value = binding.FallbackValue;
                }
                return nullstone.convertAnyToType(value, targetType);
            };
            BindingExpressionBase.prototype._MaybeEmitError = function (message, exception) {
                var fe = getMentor(this.Target);
                if (!fe)
                    return;
                var error = (exception instanceof Exception || exception instanceof Error) ? exception : null;
                if (message === "")
                    message = null;
                var oldError = this._CurrentError;
                if (message != null)
                    this._CurrentError = new Fayde.Validation.ValidationError(message, null, this.PropertyPathWalker.FinalPropertyName);
                else if (error)
                    this._CurrentError = new Fayde.Validation.ValidationError(null, error, this.PropertyPathWalker.FinalPropertyName);
                else
                    this._CurrentError = null;
                Fayde.Validation.Emit(fe, this.ParentBinding, oldError, this._CurrentError);
            };
            BindingExpressionBase.prototype._AttachToNotifyError = function (element) {
                if (!Data.INotifyDataErrorInfo_.is(element))
                    return;
                if (element === this._CurrentNotifyError || !this.ParentBinding.ValidatesOnNotifyDataErrors)
                    return;
                var property = this.PropertyPathWalker.FinalPropertyName;
                if (this._CurrentNotifyError) {
                    this._CurrentNotifyError.ErrorsChanged.off(this._NotifyErrorsChanged, this);
                    this._MaybeEmitError(null, null);
                }
                this._CurrentNotifyError = element;
                if (element) {
                    element.ErrorsChanged.on(this._NotifyErrorsChanged, this);
                    if (element.HasErrors) {
                        var enu = element.GetErrors(property);
                        if (enu) {
                            for (var en = enu.getEnumerator(); en.moveNext();) {
                                this._MaybeEmitError(en.current, en.current);
                            }
                        }
                    }
                    else {
                        this._MaybeEmitError(null, null);
                    }
                }
            };
            BindingExpressionBase.prototype._NotifyErrorsChanged = function (sender, e) {
                var property = this.PropertyPathWalker.FinalPropertyName;
                if (e.PropertyName !== property)
                    return;
                var errors = this._CurrentNotifyError ? this._CurrentNotifyError.GetErrors(property) : null;
                if (!errors) {
                    this._MaybeEmitError(null, null);
                    return;
                }
                var arr = nullstone.IEnumerable_.toArray(errors);
                if (arr.length <= 0) {
                    this._MaybeEmitError(null, null);
                    return;
                }
                for (var i = 0; i < arr.length; i++) {
                    var cur = arr[i];
                    this._MaybeEmitError(cur, cur);
                }
            };
            return BindingExpressionBase;
        })(Fayde.Expression);
        Data.BindingExpressionBase = BindingExpressionBase;
        function getMentor(dobj) {
            for (var cur = dobj; cur; cur = cur.Parent) {
                if (cur instanceof Fayde.FrameworkElement)
                    return cur;
            }
            return null;
        }
        function getDataError(walker) {
            var info = Data.IDataErrorInfo_.as(walker.FinalNode.GetSource());
            var name = walker.FinalPropertyName;
            return (info && name) ? info.GetError(name) : null;
        }
    })(Data = Fayde.Data || (Fayde.Data = {}));
})(Fayde || (Fayde = {}));
/// <reference path="BindingExpressionBase.ts" />
var Fayde;
(function (Fayde) {
    var Data;
    (function (Data) {
        var BindingExpression = (function (_super) {
            __extends(BindingExpression, _super);
            function BindingExpression(binding) {
                _super.call(this, binding);
            }
            return BindingExpression;
        })(Data.BindingExpressionBase);
        Data.BindingExpression = BindingExpression;
    })(Data = Fayde.Data || (Fayde.Data = {}));
})(Fayde || (Fayde = {}));
/// <reference path="Expression.ts" />
var Fayde;
(function (Fayde) {
    var DeferredValueExpression = (function (_super) {
        __extends(DeferredValueExpression, _super);
        function DeferredValueExpression() {
            _super.apply(this, arguments);
        }
        DeferredValueExpression.prototype.GetValue = function (propd) {
            return undefined;
        };
        DeferredValueExpression.prototype.toString = function () { return "DeferredValueExpression"; };
        return DeferredValueExpression;
    })(Fayde.Expression);
    Fayde.DeferredValueExpression = DeferredValueExpression;
})(Fayde || (Fayde = {}));
/// <reference path="Expression.ts" />
var Fayde;
(function (Fayde) {
    var EventBindingExpression = (function (_super) {
        __extends(EventBindingExpression, _super);
        function EventBindingExpression(eventBinding) {
            _super.call(this);
            this.IsUpdating = false;
            this.IsAttached = false;
            this._CommandWalker = null;
            this._CommandParameterWalker = null;
            this._Target = null;
            this._Event = null;
            this._EventName = null;
            this._EventBinding = eventBinding;
            var cb = this._EventBinding.CommandBinding;
            if (cb)
                this._CommandWalker = new Fayde.Data.PropertyPathWalker(cb.Path.ParsePath, cb.BindsDirectlyToSource, false, !cb.ElementName && !cb.Source && !cb.RelativeSource);
            var cpb = this._EventBinding.CommandParameterBinding;
            if (cpb)
                this._CommandParameterWalker = new Fayde.Data.PropertyPathWalker(cpb.Path.ParsePath, cpb.BindsDirectlyToSource, false, !cpb.ElementName && !cpb.Source && !cpb.RelativeSource);
        }
        EventBindingExpression.prototype.Seal = function (owner, prop) {
        };
        EventBindingExpression.prototype.Init = function (eventName) {
            this._EventName = eventName;
        };
        EventBindingExpression.prototype.GetValue = function (propd) {
        };
        EventBindingExpression.prototype.OnAttached = function (target) {
            if (this.IsAttached)
                return;
            this.IsAttached = true;
            this._Target = target;
            this._Event = target[this._EventName];
            if (this._Event)
                this._Event.on(this._Callback, this);
        };
        EventBindingExpression.prototype.OnDetached = function (target) {
            if (!this.IsAttached)
                return;
            if (this._Event)
                this._Event.off(this._Callback, this);
            this._Event = null;
            this.IsAttached = false;
        };
        EventBindingExpression.prototype.OnDataContextChanged = function (newDataContext) {
        };
        EventBindingExpression.prototype._Callback = function (sender, e) {
            var target = this._Target;
            var csource = findSource(target, this._EventBinding.CommandBinding);
            var context = csource;
            var etarget = context;
            var cw = this._CommandWalker;
            if (cw) {
                etarget = cw.GetValue(etarget);
                context = cw.GetContext();
                if (context == null)
                    context = csource;
            }
            if (!etarget) {
                console.warn("[EVENTBINDING]: Could not find command target for event '" + this._EventName + "'.");
                return;
            }
            var cargs = {
                sender: sender,
                args: e,
                parameter: null
            };
            var cpb = this._EventBinding.CommandParameterBinding;
            if (cpb) {
                var cpw = this._CommandParameterWalker;
                var cpsource = findSource(target, cpb);
                cargs.parameter = cpw.GetValue(cpsource);
            }
            if (typeof etarget === "function") {
                etarget.call(context, cargs);
            }
            else {
                var ecmd = Fayde.Input.ICommand_.as(etarget);
                if (!ecmd) {
                    console.warn("[EVENTBINDING]: Could not find command target for event '" + this._EventName + "'.");
                    return;
                }
                ecmd = etarget;
                if (ecmd.CanExecute.call(context, cargs))
                    ecmd.Execute.call(context, cargs);
            }
        };
        return EventBindingExpression;
    })(Fayde.Expression);
    Fayde.EventBindingExpression = EventBindingExpression;
    function findSource(target, binding) {
        if (binding) {
            if (binding.Source)
                return binding.Source;
            if (binding.ElementName != null)
                return findSourceByElementName(target, binding.ElementName);
            if (binding.RelativeSource) {
                return binding.RelativeSource.Find(target);
            }
        }
        return target.XamlNode.DataContext;
    }
    function findSourceByElementName(target, name) {
        var xobj = target;
        if (!xobj)
            return undefined;
        var source = xobj.FindName(name, true);
        if (source)
            return source;
        return undefined;
    }
})(Fayde || (Fayde = {}));
/// <reference path="Expression.ts" />
var Fayde;
(function (Fayde) {
    var TemplateBindingExpression = (function (_super) {
        __extends(TemplateBindingExpression, _super);
        function TemplateBindingExpression(sourceProperty) {
            _super.call(this);
            this._IsSealed = false;
            this._SourcePropertyName = sourceProperty;
        }
        TemplateBindingExpression.prototype.Seal = function (owner, prop) {
            if (this._IsSealed)
                return;
            this._IsSealed = true;
            var to = owner.TemplateOwner;
            if (!(to instanceof Fayde.DependencyObject))
                throw new Error("TemplateBinding must be applied to a DependencyObject within a template.");
            this.SourceProperty = DependencyProperty.GetDependencyProperty(to.constructor, this._SourcePropertyName);
            this.TargetProperty = prop;
        };
        TemplateBindingExpression.prototype.GetValue = function (propd) {
            var target = this._Target;
            var source = target.TemplateOwner;
            var value;
            if (source)
                value = source.GetValue(this.SourceProperty);
            value = nullstone.convertAnyToType(value, this.TargetProperty.GetTargetType());
            return value;
        };
        TemplateBindingExpression.prototype.OnAttached = function (dobj) {
            _super.prototype.OnAttached.call(this, dobj);
            this._Target = dobj;
            this._DetachListener();
            var cc;
            if (this._Target instanceof Fayde.Controls.ContentControl)
                cc = this._Target;
            this._AttachListener();
        };
        TemplateBindingExpression.prototype.OnDetached = function (dobj) {
            _super.prototype.OnDetached.call(this, dobj);
            var listener = this._Listener;
            if (!listener)
                return;
            var cc;
            if (this._Target instanceof Fayde.Controls.ContentControl)
                cc = this._Target;
            this._DetachListener();
            this._Target = null;
        };
        TemplateBindingExpression.prototype.OnSourcePropertyChanged = function (sender, args) {
            if (this.SourceProperty._ID !== args.Property._ID)
                return;
            try {
                this.IsUpdating = true;
                var targetProp = this.TargetProperty;
                try {
                    this._Target.SetCurrentValue(targetProp, this.GetValue(null));
                }
                catch (err2) {
                    var val = targetProp.DefaultValue;
                    this._Target.SetCurrentValue(targetProp, val);
                }
            }
            catch (err) {
            }
            finally {
                this.IsUpdating = false;
            }
        };
        TemplateBindingExpression.prototype._AttachListener = function () {
            var _this = this;
            var source = this._Target.TemplateOwner;
            if (!source)
                return;
            this._Listener = this.SourceProperty.Store.ListenToChanged(source, this.SourceProperty, function (sender, args) { return _this.OnSourcePropertyChanged(sender, args); }, this);
        };
        TemplateBindingExpression.prototype._DetachListener = function () {
            var listener = this._Listener;
            if (listener) {
                this._Listener.Detach();
                this._Listener = null;
            }
        };
        return TemplateBindingExpression;
    })(Fayde.Expression);
    Fayde.TemplateBindingExpression = TemplateBindingExpression;
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Input;
    (function (Input) {
        Input.ICommand_ = new nullstone.Interface("ICommand");
    })(Input = Fayde.Input || (Fayde.Input = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Input;
    (function (Input) {
        var InteractionHelper;
        (function (InteractionHelper) {
            function GetLogicalKey(flowDirection, key) {
                if (flowDirection !== Fayde.FlowDirection.RightToLeft)
                    return key;
                switch (key) {
                    case Input.Key.Left:
                        return Input.Key.Right;
                    case Input.Key.Right:
                        return Input.Key.Left;
                    default:
                        return key;
                }
            }
            InteractionHelper.GetLogicalKey = GetLogicalKey;
        })(InteractionHelper = Input.InteractionHelper || (Input.InteractionHelper = {}));
    })(Input = Fayde.Input || (Fayde.Input = {}));
})(Fayde || (Fayde = {}));
/// <reference path="KeyEventArgs.ts" />
var Fayde;
(function (Fayde) {
    var Input;
    (function (Input) {
        function CreateKeyInterop() {
            if (navigator.appName === "Microsoft Internet Explorer")
                return new IEKeyInterop();
            if (navigator.appName === "Netscape") {
                if (!!navigator.userAgent.match(/Trident\//))
                    return new IEKeyInterop();
                return new NetscapeKeyInterop();
            }
            return new KeyInterop();
        }
        Input.CreateKeyInterop = CreateKeyInterop;
        var keyFromKeyCode = [];
        keyFromKeyCode[8] = Input.Key.Back;
        keyFromKeyCode[9] = Input.Key.Tab;
        keyFromKeyCode[13] = Input.Key.Enter;
        keyFromKeyCode[16] = Input.Key.Shift;
        keyFromKeyCode[17] = Input.Key.Ctrl;
        keyFromKeyCode[18] = Input.Key.Alt;
        keyFromKeyCode[20] = Input.Key.CapsLock;
        keyFromKeyCode[27] = Input.Key.Escape;
        keyFromKeyCode[32] = Input.Key.Space;
        keyFromKeyCode[33] = Input.Key.PageUp;
        keyFromKeyCode[34] = Input.Key.PageDown;
        keyFromKeyCode[35] = Input.Key.End;
        keyFromKeyCode[36] = Input.Key.Home;
        keyFromKeyCode[37] = Input.Key.Left;
        keyFromKeyCode[38] = Input.Key.Up;
        keyFromKeyCode[39] = Input.Key.Right;
        keyFromKeyCode[40] = Input.Key.Down;
        keyFromKeyCode[45] = Input.Key.Insert;
        keyFromKeyCode[46] = Input.Key.Delete;
        keyFromKeyCode[48] = Input.Key.D0;
        keyFromKeyCode[49] = Input.Key.D1;
        keyFromKeyCode[50] = Input.Key.D2;
        keyFromKeyCode[51] = Input.Key.D3;
        keyFromKeyCode[52] = Input.Key.D4;
        keyFromKeyCode[53] = Input.Key.D5;
        keyFromKeyCode[54] = Input.Key.D6;
        keyFromKeyCode[55] = Input.Key.D7;
        keyFromKeyCode[56] = Input.Key.D8;
        keyFromKeyCode[57] = Input.Key.D9;
        keyFromKeyCode[65] = Input.Key.A;
        keyFromKeyCode[66] = Input.Key.B;
        keyFromKeyCode[67] = Input.Key.C;
        keyFromKeyCode[68] = Input.Key.D;
        keyFromKeyCode[69] = Input.Key.E;
        keyFromKeyCode[70] = Input.Key.F;
        keyFromKeyCode[71] = Input.Key.G;
        keyFromKeyCode[72] = Input.Key.H;
        keyFromKeyCode[73] = Input.Key.I;
        keyFromKeyCode[74] = Input.Key.J;
        keyFromKeyCode[75] = Input.Key.K;
        keyFromKeyCode[76] = Input.Key.L;
        keyFromKeyCode[77] = Input.Key.M;
        keyFromKeyCode[78] = Input.Key.N;
        keyFromKeyCode[79] = Input.Key.O;
        keyFromKeyCode[80] = Input.Key.P;
        keyFromKeyCode[81] = Input.Key.Q;
        keyFromKeyCode[82] = Input.Key.R;
        keyFromKeyCode[83] = Input.Key.S;
        keyFromKeyCode[84] = Input.Key.T;
        keyFromKeyCode[85] = Input.Key.U;
        keyFromKeyCode[86] = Input.Key.V;
        keyFromKeyCode[87] = Input.Key.W;
        keyFromKeyCode[88] = Input.Key.X;
        keyFromKeyCode[89] = Input.Key.Y;
        keyFromKeyCode[90] = Input.Key.Z;
        keyFromKeyCode[96] = Input.Key.NumPad0;
        keyFromKeyCode[97] = Input.Key.NumPad1;
        keyFromKeyCode[98] = Input.Key.NumPad2;
        keyFromKeyCode[99] = Input.Key.NumPad3;
        keyFromKeyCode[100] = Input.Key.NumPad4;
        keyFromKeyCode[101] = Input.Key.NumPad5;
        keyFromKeyCode[102] = Input.Key.NumPad6;
        keyFromKeyCode[103] = Input.Key.NumPad7;
        keyFromKeyCode[104] = Input.Key.NumPad8;
        keyFromKeyCode[105] = Input.Key.NumPad9;
        keyFromKeyCode[106] = Input.Key.Multiply;
        keyFromKeyCode[107] = Input.Key.Add;
        keyFromKeyCode[109] = Input.Key.Subtract;
        keyFromKeyCode[110] = Input.Key.Decimal;
        keyFromKeyCode[111] = Input.Key.Divide;
        keyFromKeyCode[112] = Input.Key.F1;
        keyFromKeyCode[113] = Input.Key.F2;
        keyFromKeyCode[114] = Input.Key.F3;
        keyFromKeyCode[115] = Input.Key.F4;
        keyFromKeyCode[116] = Input.Key.F5;
        keyFromKeyCode[117] = Input.Key.F6;
        keyFromKeyCode[118] = Input.Key.F7;
        keyFromKeyCode[119] = Input.Key.F8;
        keyFromKeyCode[120] = Input.Key.F9;
        keyFromKeyCode[121] = Input.Key.F10;
        keyFromKeyCode[122] = Input.Key.F11;
        keyFromKeyCode[123] = Input.Key.F12;
        var KeyInterop = (function () {
            function KeyInterop() {
            }
            KeyInterop.prototype.RegisterEvents = function (input) {
                var _this = this;
                document.onkeypress = function (e) {
                    var args = _this.CreateArgsPress(e);
                    if (args) {
                        input.HandleKeyDown(args);
                        if (args.Handled) {
                            e.preventDefault();
                            return false;
                        }
                    }
                };
                document.onkeydown = function (e) {
                    var args = _this.CreateArgsDown(e);
                    if (args) {
                        input.HandleKeyDown(args);
                        if (args.Handled) {
                            e.preventDefault();
                            return false;
                        }
                    }
                };
            };
            KeyInterop.prototype.CreateArgsPress = function (e) { return undefined; };
            KeyInterop.prototype.CreateArgsDown = function (e) { return undefined; };
            return KeyInterop;
        })();
        var udkie = [];
        udkie[41] = 48;
        udkie[33] = 49;
        udkie[64] = 50;
        udkie[35] = 51;
        udkie[36] = 52;
        udkie[37] = 53;
        udkie[94] = 54;
        udkie[38] = 55;
        udkie[42] = 56;
        udkie[34] = Input.Key.Unknown;
        var IEKeyInterop = (function (_super) {
            __extends(IEKeyInterop, _super);
            function IEKeyInterop() {
                _super.apply(this, arguments);
            }
            IEKeyInterop.prototype.CreateArgsPress = function (e) {
                if (!e["char"])
                    return;
                var modifiers = {
                    Shift: e.shiftKey,
                    Ctrl: e.ctrlKey,
                    Alt: e.altKey
                };
                var keyCode = e.keyCode;
                var unshifted = udkie[keyCode];
                if (unshifted)
                    keyCode = unshifted;
                var args = new Fayde.Input.KeyEventArgs(modifiers, keyCode, keyFromKeyCode[keyCode], e["char"]);
                if (args.Key === Input.Key.Unknown && e.key) {
                    args.Char = e.key;
                    var code = args.Char.toUpperCase().charCodeAt(0);
                    args.Key = keyFromKeyCode[code];
                    if (args.Key == null)
                        args.Key = Input.Key.Unknown;
                }
                return args;
            };
            IEKeyInterop.prototype.CreateArgsDown = function (e) {
                if (e["char"] && e.keyCode !== 8 && e.keyCode !== 9)
                    return;
                var modifiers = {
                    Shift: e.shiftKey,
                    Ctrl: e.ctrlKey,
                    Alt: e.altKey
                };
                return new Fayde.Input.KeyEventArgs(modifiers, e.keyCode, keyFromKeyCode[e.keyCode]);
            };
            return IEKeyInterop;
        })(KeyInterop);
        var sknet = [];
        sknet[8] = Input.Key.Back;
        sknet[9] = Input.Key.Tab;
        sknet[20] = Input.Key.CapsLock;
        sknet[27] = Input.Key.Escape;
        sknet[33] = Input.Key.PageUp;
        sknet[34] = Input.Key.PageDown;
        sknet[35] = Input.Key.End;
        sknet[36] = Input.Key.Home;
        sknet[37] = Input.Key.Left;
        sknet[38] = Input.Key.Up;
        sknet[39] = Input.Key.Right;
        sknet[40] = Input.Key.Down;
        sknet[45] = Input.Key.Insert;
        sknet[46] = Input.Key.Delete;
        var udknet = [];
        udknet[41] = 48;
        udknet[33] = 49;
        udknet[64] = 50;
        udknet[35] = 51;
        udknet[36] = 52;
        udknet[37] = 53;
        udknet[94] = 54;
        udknet[38] = 55;
        udknet[42] = 56;
        udknet[34] = Input.Key.Unknown;
        var NetscapeKeyInterop = (function (_super) {
            __extends(NetscapeKeyInterop, _super);
            function NetscapeKeyInterop() {
                _super.apply(this, arguments);
            }
            NetscapeKeyInterop.prototype.CreateArgsPress = function (e) {
                var modifiers = {
                    Shift: e.shiftKey,
                    Ctrl: e.ctrlKey,
                    Alt: e.altKey
                };
                var keyCode = e.keyCode;
                var unshifted = udknet[keyCode];
                if (unshifted)
                    keyCode = unshifted;
                var args = new Fayde.Input.KeyEventArgs(modifiers, keyCode, keyFromKeyCode[keyCode], String.fromCharCode(e.which || e.keyCode));
                if (args.Char === "'")
                    args.Key = Input.Key.Unknown;
                return args;
            };
            NetscapeKeyInterop.prototype.CreateArgsDown = function (e) {
                if (sknet[e.keyCode] === undefined)
                    return null;
                var modifiers = {
                    Shift: e.shiftKey,
                    Ctrl: e.ctrlKey,
                    Alt: e.altKey
                };
                return new Fayde.Input.KeyEventArgs(modifiers, e.keyCode, keyFromKeyCode[e.keyCode]);
            };
            return NetscapeKeyInterop;
        })(KeyInterop);
    })(Input = Fayde.Input || (Fayde.Input = {}));
})(Fayde || (Fayde = {}));
/// <reference path="../Core/DependencyObject.ts" />
var Fayde;
(function (Fayde) {
    var Input;
    (function (Input) {
        var KeyboardNavigation = (function () {
            function KeyboardNavigation() {
            }
            KeyboardNavigation.GetAcceptsReturn = function (d) { return d.GetValue(KeyboardNavigation.AcceptsReturnProperty); };
            KeyboardNavigation.SetAcceptsReturn = function (d, value) { d.SetValue(KeyboardNavigation.AcceptsReturnProperty, value); };
            KeyboardNavigation.GetControlTabNavigation = function (d) { return d.GetValue(KeyboardNavigation.ControlTabNavigationProperty); };
            KeyboardNavigation.SetControlTabNavigation = function (d, value) { d.SetValue(KeyboardNavigation.ControlTabNavigationProperty, value); };
            KeyboardNavigation.GetDirectionalNavigation = function (d) { return d.GetValue(KeyboardNavigation.DirectionalNavigationProperty); };
            KeyboardNavigation.SetDirectionalNavigation = function (d, value) { d.SetValue(KeyboardNavigation.DirectionalNavigationProperty, value); };
            KeyboardNavigation.GetIsTabStop = function (d) { return d.GetValue(KeyboardNavigation.IsTabStopProperty); };
            KeyboardNavigation.SetIsTabStop = function (d, value) { d.SetValue(KeyboardNavigation.IsTabStopProperty, value); };
            KeyboardNavigation.GetTabIndex = function (d) { return d.GetValue(KeyboardNavigation.TabIndexProperty); };
            KeyboardNavigation.SetTabIndex = function (d, value) { d.SetValue(KeyboardNavigation.TabIndexProperty, value); };
            KeyboardNavigation.GetTabNavigation = function (d) { return d.GetValue(KeyboardNavigation.TabNavigationProperty); };
            KeyboardNavigation.SetTabNavigation = function (d, value) { d.SetValue(KeyboardNavigation.TabNavigationProperty, value); };
            KeyboardNavigation.AcceptsReturnProperty = DependencyProperty.RegisterAttached("AcceptsReturn", function () { return Boolean; }, KeyboardNavigation);
            KeyboardNavigation.ControlTabNavigationProperty = DependencyProperty.RegisterAttached("ControlTabNavigation", function () { return new Fayde.Enum(Input.KeyboardNavigationMode); }, KeyboardNavigation);
            KeyboardNavigation.DirectionalNavigationProperty = DependencyProperty.RegisterAttached("DirectionalNavigation", function () { return new Fayde.Enum(Input.KeyboardNavigationMode); }, KeyboardNavigation);
            KeyboardNavigation.IsTabStopProperty = DependencyProperty.RegisterAttached("IsTabStop", function () { return Boolean; }, KeyboardNavigation);
            KeyboardNavigation.TabIndexProperty = DependencyProperty.RegisterAttached("TabIndex", function () { return Number; }, KeyboardNavigation);
            KeyboardNavigation.TabNavigationProperty = DependencyProperty.RegisterAttached("TabNavigation", function () { return new Fayde.Enum(Input.KeyboardNavigationMode); }, KeyboardNavigation);
            return KeyboardNavigation;
        })();
        Input.KeyboardNavigation = KeyboardNavigation;
        Fayde.CoreLibrary.add(KeyboardNavigation);
    })(Input = Fayde.Input || (Fayde.Input = {}));
})(Fayde || (Fayde = {}));
/// <reference path="../Core/RoutedEventArgs.ts" />
var Fayde;
(function (Fayde) {
    var Input;
    (function (Input) {
        var MouseEventArgs = (function (_super) {
            __extends(MouseEventArgs, _super);
            function MouseEventArgs(absolutePos) {
                _super.call(this);
                Object.defineProperty(this, "AbsolutePos", { value: absolutePos, writable: false });
            }
            MouseEventArgs.prototype.GetPosition = function (relativeTo) {
                var p = this.AbsolutePos.Clone();
                if (!relativeTo)
                    return p;
                if (!(relativeTo instanceof Fayde.UIElement))
                    throw new ArgumentException("Specified relative object must be a UIElement.");
                minerva.core.Updater.transformPoint(relativeTo.XamlNode.LayoutUpdater, p);
                return p;
            };
            return MouseEventArgs;
        })(Fayde.RoutedEventArgs);
        Input.MouseEventArgs = MouseEventArgs;
        Fayde.CoreLibrary.add(MouseEventArgs);
        var MouseButtonEventArgs = (function (_super) {
            __extends(MouseButtonEventArgs, _super);
            function MouseButtonEventArgs(absolutePos) {
                _super.call(this, absolutePos);
            }
            return MouseButtonEventArgs;
        })(MouseEventArgs);
        Input.MouseButtonEventArgs = MouseButtonEventArgs;
        Fayde.CoreLibrary.add(MouseButtonEventArgs);
        var MouseWheelEventArgs = (function (_super) {
            __extends(MouseWheelEventArgs, _super);
            function MouseWheelEventArgs(absolutePos, delta) {
                _super.call(this, absolutePos);
                Object.defineProperty(this, "Delta", { value: delta, writable: false });
            }
            return MouseWheelEventArgs;
        })(MouseEventArgs);
        Input.MouseWheelEventArgs = MouseWheelEventArgs;
        Fayde.CoreLibrary.add(MouseWheelEventArgs);
    })(Input = Fayde.Input || (Fayde.Input = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Input;
    (function (Input) {
        (function (MouseInputType) {
            MouseInputType[MouseInputType["NoOp"] = 0] = "NoOp";
            MouseInputType[MouseInputType["MouseUp"] = 1] = "MouseUp";
            MouseInputType[MouseInputType["MouseDown"] = 2] = "MouseDown";
            MouseInputType[MouseInputType["MouseLeave"] = 3] = "MouseLeave";
            MouseInputType[MouseInputType["MouseEnter"] = 4] = "MouseEnter";
            MouseInputType[MouseInputType["MouseMove"] = 5] = "MouseMove";
            MouseInputType[MouseInputType["MouseWheel"] = 6] = "MouseWheel";
        })(Input.MouseInputType || (Input.MouseInputType = {}));
        var MouseInputType = Input.MouseInputType;
        function CreateMouseInterop() {
            if (navigator.appName === "Microsoft Internet Explorer")
                return new IEMouseInterop();
            if (navigator.appName === "Netscape") {
                if (!!navigator.userAgent.match(/Trident\//))
                    return new IEMouseInterop();
                return new NetscapeMouseInterop();
            }
            return new MouseInterop();
        }
        Input.CreateMouseInterop = CreateMouseInterop;
        var MouseInterop = (function () {
            function MouseInterop() {
                this._CanvasOffset = null;
                this._IsContextMenuDisabled = false;
            }
            MouseInterop.prototype.RegisterEvents = function (input, canvas) {
                var _this = this;
                this._Input = input;
                this._CanvasOffset = this._CalcOffset(canvas);
                canvas.addEventListener("contextmenu", function (e) { return _this._HandleContextMenu(window.event ? window.event : e); });
                canvas.addEventListener("mousedown", function (e) { return _this._HandleButtonPress(window.event ? window.event : e); });
                canvas.addEventListener("mouseup", function (e) { return _this._HandleButtonRelease(window.event ? window.event : e); });
                canvas.addEventListener("mouseout", function (e) { return _this._HandleOut(window.event ? window.event : e); });
                canvas.addEventListener("mousemove", function (e) { return _this._HandleMove(window.event ? window.event : e); });
                canvas.addEventListener("mousewheel", function (e) { return _this._HandleWheel(window.event ? window.event : e); });
                canvas.addEventListener("DOMMouseScroll", function (e) { return _this._HandleWheel(window.event ? window.event : e); });
            };
            MouseInterop.prototype._CalcOffset = function (canvas) {
                var left = 0;
                var top = 0;
                var cur = canvas;
                if (cur.offsetParent) {
                    do {
                        left += cur.offsetLeft;
                        top += cur.offsetTop;
                    } while (cur = cur.offsetParent);
                }
                return { left: left, top: top };
            };
            MouseInterop.prototype._GetMousePosition = function (evt) {
                return new Point(evt.clientX + window.pageXOffset + this._CanvasOffset.left, evt.clientY + window.pageYOffset + this._CanvasOffset.top);
            };
            MouseInterop.prototype.IsLeftButton = function (button) {
                return button === 1;
            };
            MouseInterop.prototype.IsRightButton = function (button) {
                return button === 2;
            };
            MouseInterop.prototype._HandleContextMenu = function (evt) {
                if (!this._IsContextMenuDisabled)
                    return;
                this._IsContextMenuDisabled = false;
                evt.stopPropagation && evt.stopPropagation();
                evt.preventDefault && evt.preventDefault();
                evt.cancelBubble = true;
                return false;
            };
            MouseInterop.prototype._HandleButtonPress = function (evt) {
                Fayde.Engine.Inspection.Kill();
                Input.Keyboard.RefreshModifiers(createModifiers(evt));
                var button = evt.which ? evt.which : evt.button;
                var pos = this._GetMousePosition(evt);
                if (this._Input.HandleMousePress(button, pos))
                    this.DisableNextContextMenu();
            };
            MouseInterop.prototype._HandleButtonRelease = function (evt) {
                Input.Keyboard.RefreshModifiers(createModifiers(evt));
                var button = evt.which ? evt.which : evt.button;
                var pos = this._GetMousePosition(evt);
                this._Input.HandleMouseRelease(button, pos);
            };
            MouseInterop.prototype._HandleOut = function (evt) {
                Input.Keyboard.RefreshModifiers(createModifiers(evt));
                var pos = this._GetMousePosition(evt);
                this._Input.HandleMouseEvent(MouseInputType.MouseLeave, null, pos);
            };
            MouseInterop.prototype._HandleMove = function (evt) {
                Input.Keyboard.RefreshModifiers(createModifiers(evt));
                var pos = this._GetMousePosition(evt);
                this._Input.HandleMouseEvent(MouseInputType.MouseMove, null, pos);
                this._Input.UpdateCursorFromInputList();
            };
            MouseInterop.prototype._HandleWheel = function (evt) {
                Input.Keyboard.RefreshModifiers(createModifiers(evt));
                var delta = 0;
                if (evt.wheelDelta)
                    delta = evt.wheelDelta / 120;
                else if (evt.detail)
                    delta = -evt.detail / 3;
                if (evt.preventDefault)
                    evt.preventDefault();
                evt.returnValue = false;
                this._Input.HandleMouseEvent(MouseInputType.MouseWheel, null, this._GetMousePosition(evt), delta);
                this._Input.UpdateCursorFromInputList();
            };
            MouseInterop.prototype.CreateEventArgs = function (type, pos, delta) {
                switch (type) {
                    case MouseInputType.MouseUp:
                        return new Fayde.Input.MouseButtonEventArgs(pos);
                    case MouseInputType.MouseDown:
                        return new Fayde.Input.MouseButtonEventArgs(pos);
                    case MouseInputType.MouseLeave:
                        return new Fayde.Input.MouseEventArgs(pos);
                    case MouseInputType.MouseEnter:
                        return new Fayde.Input.MouseEventArgs(pos);
                    case MouseInputType.MouseMove:
                        return new Fayde.Input.MouseEventArgs(pos);
                    case MouseInputType.MouseWheel:
                        return new Fayde.Input.MouseWheelEventArgs(pos, delta);
                }
            };
            MouseInterop.prototype.DisableNextContextMenu = function () {
                this._IsContextMenuDisabled = true;
            };
            return MouseInterop;
        })();
        var IEMouseInterop = (function (_super) {
            __extends(IEMouseInterop, _super);
            function IEMouseInterop() {
                _super.apply(this, arguments);
                this.StopIEContextMenu = false;
            }
            IEMouseInterop.prototype.DisableNextContextMenu = function () {
                _super.prototype.DisableNextContextMenu.call(this);
                this.StopIEContextMenu = true;
            };
            IEMouseInterop.prototype.RegisterEvents = function (input, canvas) {
                var _this = this;
                _super.prototype.RegisterEvents.call(this, input, canvas);
                canvas.oncontextmenu = function (e) { return _this._HandleIEContextMenu(e); };
            };
            IEMouseInterop.prototype._HandleIEContextMenu = function (evt) {
                if (this.StopIEContextMenu) {
                    this.StopIEContextMenu = false;
                    return false;
                }
                return true;
            };
            return IEMouseInterop;
        })(MouseInterop);
        var NetscapeMouseInterop = (function (_super) {
            __extends(NetscapeMouseInterop, _super);
            function NetscapeMouseInterop() {
                _super.apply(this, arguments);
            }
            NetscapeMouseInterop.prototype.IsRightButton = function (button) {
                return button === 3;
            };
            return NetscapeMouseInterop;
        })(MouseInterop);
        function createModifiers(e) {
            return {
                Shift: e.shiftKey,
                Ctrl: e.ctrlKey,
                Alt: e.altKey
            };
        }
    })(Input = Fayde.Input || (Fayde.Input = {}));
})(Fayde || (Fayde = {}));
/// <reference path="../Core/RoutedEventArgs.ts" />
var Fayde;
(function (Fayde) {
    var Input;
    (function (Input) {
        var TouchEventArgs = (function (_super) {
            __extends(TouchEventArgs, _super);
            function TouchEventArgs(device) {
                _super.call(this);
                this.Device = device;
            }
            TouchEventArgs.prototype.GetTouchPoint = function (relativeTo) {
                return this.Device.GetTouchPoint(relativeTo);
            };
            return TouchEventArgs;
        })(Fayde.RoutedEventArgs);
        Input.TouchEventArgs = TouchEventArgs;
        Fayde.CoreLibrary.add(TouchEventArgs);
    })(Input = Fayde.Input || (Fayde.Input = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Input;
    (function (Input) {
        (function (TouchInputType) {
            TouchInputType[TouchInputType["NoOp"] = 0] = "NoOp";
            TouchInputType[TouchInputType["TouchDown"] = 1] = "TouchDown";
            TouchInputType[TouchInputType["TouchUp"] = 2] = "TouchUp";
            TouchInputType[TouchInputType["TouchMove"] = 3] = "TouchMove";
            TouchInputType[TouchInputType["TouchEnter"] = 4] = "TouchEnter";
            TouchInputType[TouchInputType["TouchLeave"] = 5] = "TouchLeave";
        })(Input.TouchInputType || (Input.TouchInputType = {}));
        var TouchInputType = Input.TouchInputType;
        function CreateTouchInterop() {
            if (navigator.msPointerEnabled || navigator.pointerEnabled)
                return new Input.TouchInternal.PointerTouchInterop();
            if ("ontouchstart" in window)
                return new Input.TouchInternal.NonPointerTouchInterop();
            return new DummyTouchInterop();
        }
        Input.CreateTouchInterop = CreateTouchInterop;
        var DummyTouchInterop = (function () {
            function DummyTouchInterop() {
            }
            DummyTouchInterop.prototype.Register = function (input, canvas) { };
            return DummyTouchInterop;
        })();
    })(Input = Fayde.Input || (Fayde.Input = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Input;
    (function (Input) {
        var TouchPoint = (function () {
            function TouchPoint(position, force) {
                Object.defineProperty(this, "Position", { value: position, writable: false });
                Object.defineProperty(this, "Force", { value: force, writable: false });
            }
            return TouchPoint;
        })();
        Input.TouchPoint = TouchPoint;
        Fayde.CoreLibrary.add(TouchPoint);
    })(Input = Fayde.Input || (Fayde.Input = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Input;
    (function (Input) {
        var keyboardInput;
        var VirtualKeyboard = (function () {
            function VirtualKeyboard() {
            }
            VirtualKeyboard.Init = function () {
                keyboardInput = document.createElement('input');
                keyboardInput.type = "text";
                var style = keyboardInput.style;
                style.opacity = "0";
                style.cssFloat = "left";
                style.width = "0";
                style.height = "0";
                style.borderWidth = "0";
                document.body.insertBefore(keyboardInput, document.body.firstElementChild);
            };
            VirtualKeyboard.Launch = function () {
                console.log("Launch");
                keyboardInput.focus();
            };
            return VirtualKeyboard;
        })();
        Input.VirtualKeyboard = VirtualKeyboard;
    })(Input = Fayde.Input || (Fayde.Input = {}));
})(Fayde || (Fayde = {}));
var TimeSpan = (function () {
    function TimeSpan() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i - 0] = arguments[_i];
        }
        this._Ticks = 0;
        if (args.length === 0)
            return;
        if (args.length === 1) {
            this._Ticks = args[0] || 0;
            return;
        }
        var days = 0;
        var hours = 0;
        var minutes = 0;
        var seconds = 0;
        var milliseconds = 0;
        if (args.length === 3) {
            hours = args[0] || 0;
            minutes = args[1] || 0;
            seconds = args[2] || 0;
        }
        else {
            days = args[0] || 0;
            hours = args[1] || 0;
            minutes = args[2] || 0;
            seconds = args[3] || 0;
            milliseconds = args[4] || 0;
        }
        this._Ticks = (days * TimeSpan._TicksPerDay) + (hours * TimeSpan._TicksPerHour) + (minutes * TimeSpan._TicksPerMinute)
            + (seconds * TimeSpan._TicksPerSecond) + (milliseconds * TimeSpan._TicksPerMillisecond);
    }
    Object.defineProperty(TimeSpan, "Zero", {
        get: function () { return new TimeSpan(); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeSpan, "MinValue", {
        get: function () { return new TimeSpan(Number.MIN_VALUE); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeSpan, "MaxValue", {
        get: function () { return new TimeSpan(Number.MAX_VALUE); },
        enumerable: true,
        configurable: true
    });
    TimeSpan.FromDays = function (value) {
        return new TimeSpan(value * this._TicksPerDay);
    };
    TimeSpan.FromHours = function (value) {
        return new TimeSpan(value * this._TicksPerHour);
    };
    TimeSpan.FromMinutes = function (value) {
        return new TimeSpan(value * this._TicksPerMinute);
    };
    TimeSpan.FromSeconds = function (value) {
        return new TimeSpan(value * this._TicksPerSecond);
    };
    TimeSpan.FromMilliseconds = function (value) {
        return new TimeSpan(value * this._TicksPerMillisecond);
    };
    Object.defineProperty(TimeSpan.prototype, "Days", {
        get: function () {
            return this._Ticks > 0 ? Math.floor(this._Ticks / TimeSpan._TicksPerDay) : Math.ceil(this._Ticks / TimeSpan._TicksPerDay);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeSpan.prototype, "Hours", {
        get: function () {
            var remTicks = this._Ticks % TimeSpan._TicksPerDay;
            return remTicks > 0 ? Math.floor(remTicks / TimeSpan._TicksPerHour) : Math.ceil(remTicks / TimeSpan._TicksPerHour);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeSpan.prototype, "Minutes", {
        get: function () {
            var remTicks = this._Ticks % TimeSpan._TicksPerDay;
            remTicks = remTicks % TimeSpan._TicksPerHour;
            return remTicks > 0 ? Math.floor(remTicks / TimeSpan._TicksPerMinute) : Math.ceil(remTicks / TimeSpan._TicksPerMinute);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeSpan.prototype, "Seconds", {
        get: function () {
            var remTicks = this._Ticks % TimeSpan._TicksPerDay;
            remTicks = remTicks % TimeSpan._TicksPerHour;
            remTicks = remTicks % TimeSpan._TicksPerMinute;
            return remTicks > 0 ? Math.floor(remTicks / TimeSpan._TicksPerSecond) : Math.ceil(remTicks / TimeSpan._TicksPerSecond);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeSpan.prototype, "Milliseconds", {
        get: function () {
            var remTicks = this._Ticks % TimeSpan._TicksPerDay;
            remTicks = remTicks % TimeSpan._TicksPerHour;
            remTicks = remTicks % TimeSpan._TicksPerMinute;
            remTicks = remTicks % TimeSpan._TicksPerSecond;
            return remTicks > 0 ? Math.floor(remTicks / TimeSpan._TicksPerMillisecond) : Math.ceil(remTicks / TimeSpan._TicksPerMillisecond);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeSpan.prototype, "Ticks", {
        get: function () { return this._Ticks; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeSpan.prototype, "TotalDays", {
        get: function () { return this._Ticks / TimeSpan._TicksPerDay; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeSpan.prototype, "TotalHours", {
        get: function () { return this._Ticks / TimeSpan._TicksPerHour; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeSpan.prototype, "TotalMinutes", {
        get: function () { return this._Ticks / TimeSpan._TicksPerMinute; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeSpan.prototype, "TotalSeconds", {
        get: function () { return this._Ticks / TimeSpan._TicksPerSecond; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeSpan.prototype, "TotalMilliseconds", {
        get: function () { return this._Ticks / TimeSpan._TicksPerMillisecond; },
        enumerable: true,
        configurable: true
    });
    TimeSpan.prototype.AddTicks = function (ticks) {
        if (ticks == null)
            return;
        if (isNaN(ticks))
            return;
        this._Ticks += ticks;
    };
    TimeSpan.prototype.AddMilliseconds = function (milliseconds) {
        this.AddTicks(milliseconds * TimeSpan._TicksPerMillisecond);
    };
    TimeSpan.prototype.Add = function (ts2) {
        var ts = new TimeSpan();
        ts._Ticks = this._Ticks + ts2._Ticks;
        return ts;
    };
    TimeSpan.prototype.Subtract = function (ts2) {
        var ts = new TimeSpan();
        ts._Ticks = this._Ticks - ts2._Ticks;
        return ts;
    };
    TimeSpan.prototype.Multiply = function (v) {
        var ts = new TimeSpan();
        ts._Ticks = Math.round(this._Ticks * v);
        return ts;
    };
    TimeSpan.prototype.Divide = function (ts2) {
        var ts = new TimeSpan();
        ts._Ticks = this._Ticks / ts2._Ticks;
        return ts;
    };
    TimeSpan.prototype.CompareTo = function (ts2) {
        if (this._Ticks === ts2._Ticks)
            return 0;
        return (this._Ticks > ts2._Ticks) ? 1 : -1;
    };
    TimeSpan.prototype.IsZero = function () {
        return this._Ticks === 0;
    };
    TimeSpan.prototype.GetJsDelay = function () {
        return this._Ticks * TimeSpan._TicksPerMillisecond;
    };
    TimeSpan.prototype.toString = function (format) {
        if (!format)
            return Fayde.Localization.FormatSingle(this, "c");
        return Fayde.Localization.FormatSingle(this, format);
    };
    TimeSpan.prototype.valueOf = function () {
        return this.Ticks;
    };
    TimeSpan._TicksPerMillisecond = 1;
    TimeSpan._TicksPerSecond = 1000;
    TimeSpan._TicksPerMinute = TimeSpan._TicksPerSecond * 60;
    TimeSpan._TicksPerHour = TimeSpan._TicksPerMinute * 60;
    TimeSpan._TicksPerDay = TimeSpan._TicksPerHour * 24;
    return TimeSpan;
})();
Fayde.CoreLibrary.addPrimitive(TimeSpan);
nullstone.registerTypeConverter(TimeSpan, function (val) {
    if (val instanceof TimeSpan)
        return val;
    if (val instanceof Duration) {
        var duration = val;
        if (duration.HasTimeSpan)
            return new TimeSpan(duration.TimeSpan.Ticks);
        else
            throw new Exception("Cannot convert " + duration.IsForever ? "Forever" : "Automatic" +
                +" duration to TimeSpan");
    }
    if (typeof val === "number")
        return new TimeSpan(val);
    val = val.toString();
    var tokens = val.split(":");
    if (tokens.length === 1) {
        var ticks = parseFloat(val);
        if (!isNaN(ticks))
            return new TimeSpan(ticks);
        throw new Exception("Invalid TimeSpan format '" + val + "'.");
    }
    if (tokens.length !== 3)
        throw new Exception("Invalid TimeSpan format '" + val + "'.");
    var days = 0;
    var hours;
    var minutes;
    var seconds;
    var milliseconds = 0;
    var daysplit = tokens[0].split(".");
    if (daysplit.length === 2) {
        days = parseInt(daysplit[0]);
        hours = parseInt(daysplit[1]);
    }
    else if (daysplit.length === 1) {
        hours = parseInt(daysplit[0]);
    }
    minutes = parseInt(tokens[1]);
    seconds = parseFloat(tokens[2]);
    milliseconds = seconds % 1;
    seconds = seconds - milliseconds;
    milliseconds *= 1000.0;
    return new TimeSpan(days, hours, minutes, seconds, milliseconds);
});
/// <reference path="TimeSpan.ts" />
var DayOfWeek;
(function (DayOfWeek) {
    DayOfWeek[DayOfWeek["Sunday"] = 0] = "Sunday";
    DayOfWeek[DayOfWeek["Monday"] = 1] = "Monday";
    DayOfWeek[DayOfWeek["Tuesday"] = 2] = "Tuesday";
    DayOfWeek[DayOfWeek["Wednesday"] = 3] = "Wednesday";
    DayOfWeek[DayOfWeek["Thursday"] = 4] = "Thursday";
    DayOfWeek[DayOfWeek["Friday"] = 5] = "Friday";
    DayOfWeek[DayOfWeek["Saturday"] = 6] = "Saturday";
})(DayOfWeek || (DayOfWeek = {}));
Fayde.CoreLibrary.addEnum(DayOfWeek, "DayOfWeek");
var DateTimeKind;
(function (DateTimeKind) {
    DateTimeKind[DateTimeKind["Unspecified"] = 0] = "Unspecified";
    DateTimeKind[DateTimeKind["Local"] = 1] = "Local";
    DateTimeKind[DateTimeKind["Utc"] = 2] = "Utc";
})(DateTimeKind || (DateTimeKind = {}));
Fayde.CoreLibrary.addEnum(DateTimeKind, "DateTimeKind");
var DateTime = (function () {
    function DateTime() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i - 0] = arguments[_i];
        }
        this._InternalDate = null;
        var ticks = null;
        var kind = DateTimeKind.Unspecified;
        var year = 0;
        var month = 0;
        var day = 0;
        var hour = 0;
        var minute = 0;
        var second = 0;
        var millisecond = 0;
        if (args.length === 1) {
            var arg0 = args[0];
            if (arg0 instanceof Date) {
                ticks = arg0.getTime();
            }
            else {
                ticks = args[0];
            }
        }
        else if (args.length === 2) {
            var arg0 = args[0];
            if (arg0 instanceof Date) {
                ticks = arg0.getTime();
            }
            else {
                ticks = args[0];
            }
            kind = args[1];
        }
        else if (args.length === 3) {
            year = args[0];
            month = args[1];
            day = args[2];
        }
        else if (args.length === 6) {
            year = args[0];
            month = args[1];
            day = args[2];
            hour = args[3];
            minute = args[4];
            second = args[5];
        }
        else if (args.length === 7) {
            year = args[0];
            month = args[1];
            day = args[2];
            hour = args[3];
            minute = args[4];
            second = args[5];
            millisecond = args[6];
        }
        else if (args.length === 8) {
            year = args[0];
            month = args[1];
            day = args[2];
            hour = args[3];
            minute = args[4];
            second = args[5];
            millisecond = args[6];
            kind = args[7];
        }
        else {
            ticks = 0;
        }
        this._Kind = kind || DateTimeKind.Unspecified;
        if (isNaN(ticks) || ticks < DateTime.MIN_TICKS || ticks > DateTime.MAX_TICKS) {
            throw new Error("DateTime is out of range.");
        }
        if (ticks != null) {
            this._InternalDate = new Date(ticks);
            return;
        }
        var id = this._InternalDate = new Date();
        if (this._Kind === DateTimeKind.Utc) {
            id.setUTCFullYear(year, month - 1, day);
            id.setUTCHours(hour);
            id.setUTCMinutes(minute);
            id.setUTCSeconds(second);
            id.setMilliseconds(millisecond);
        }
        else {
            id.setFullYear(year, month - 1, day);
            id.setHours(hour);
            id.setMinutes(minute);
            id.setSeconds(second);
            id.setMilliseconds(millisecond);
        }
    }
    Object.defineProperty(DateTime, "MinValue", {
        get: function () { return new DateTime(DateTime.MIN_TICKS); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateTime, "MaxValue", {
        get: function () { return new DateTime(DateTime.MAX_TICKS); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateTime, "Now", {
        get: function () { return new DateTime(new Date().getTime(), DateTimeKind.Local); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateTime, "Today", {
        get: function () { return DateTime.Now.Date; },
        enumerable: true,
        configurable: true
    });
    DateTime.Compare = function (dt1, dt2) {
        var t1 = dt1._InternalDate.getTime();
        var t2 = dt2._InternalDate.getTime();
        if (t1 < t2)
            return -1;
        if (t1 > t2)
            return 1;
        return 0;
    };
    DateTime.DaysInMonth = function (year, month) {
        var ticks = new Date(year, (month - 1) + 1, 1).getTime() - TimeSpan._TicksPerDay;
        var dt = new DateTime(ticks);
        return dt.Day;
    };
    Object.defineProperty(DateTime.prototype, "Ticks", {
        get: function () { return this._InternalDate.getTime(); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateTime.prototype, "Kind", {
        get: function () { return this._Kind; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateTime.prototype, "Date", {
        get: function () {
            var t = this._InternalDate.getTime();
            var newid = new Date(t);
            if (this._Kind === DateTimeKind.Utc) {
                newid.setUTCHours(0);
                newid.setUTCMinutes(0);
                newid.setUTCSeconds(0);
                newid.setUTCMilliseconds(0);
            }
            else {
                newid.setHours(0);
                newid.setMinutes(0);
                newid.setSeconds(0);
                newid.setMilliseconds(0);
            }
            return new DateTime(newid.getTime(), this._Kind);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateTime.prototype, "Day", {
        get: function () {
            if (this._Kind === DateTimeKind.Utc)
                return this._InternalDate.getUTCDate();
            return this._InternalDate.getDate();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateTime.prototype, "DayOfWeek", {
        get: function () {
            if (this._Kind === DateTimeKind.Utc)
                return this._InternalDate.getUTCDay();
            return this._InternalDate.getDay();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateTime.prototype, "DayOfYear", {
        get: function () {
            var dt = this.Date;
            var base = new DateTime(dt.Year, 1, 1, 0, 0, 0, 0, this.Kind);
            var diff = new TimeSpan(dt.Ticks - base.Ticks);
            return Math.floor(diff.TotalDays);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateTime.prototype, "Hour", {
        get: function () {
            if (this._Kind === DateTimeKind.Utc)
                return this._InternalDate.getUTCHours();
            return this._InternalDate.getHours();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateTime.prototype, "Millisecond", {
        get: function () {
            if (this._Kind === DateTimeKind.Utc)
                return this._InternalDate.getUTCMilliseconds();
            return this._InternalDate.getMilliseconds();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateTime.prototype, "Minute", {
        get: function () {
            if (this._Kind === DateTimeKind.Utc)
                return this._InternalDate.getUTCMinutes();
            return this._InternalDate.getMinutes();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateTime.prototype, "Month", {
        get: function () {
            if (this._Kind === DateTimeKind.Utc)
                return this._InternalDate.getUTCMonth() + 1;
            return this._InternalDate.getMonth() + 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateTime.prototype, "Second", {
        get: function () {
            if (this._Kind === DateTimeKind.Utc)
                return this._InternalDate.getUTCSeconds();
            return this._InternalDate.getSeconds();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateTime.prototype, "TimeOfDay", {
        get: function () {
            var id = this._InternalDate;
            if (this._Kind === DateTimeKind.Utc)
                return new TimeSpan(0, id.getUTCHours(), id.getUTCMinutes(), id.getUTCSeconds(), id.getUTCMilliseconds());
            return new TimeSpan(0, id.getHours(), id.getMinutes(), id.getSeconds(), id.getMilliseconds());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateTime.prototype, "Year", {
        get: function () {
            if (this._Kind === DateTimeKind.Utc)
                return this._InternalDate.getUTCFullYear();
            return this._InternalDate.getFullYear();
        },
        enumerable: true,
        configurable: true
    });
    DateTime.prototype.AddYears = function (years) {
        var newid = new Date(this._InternalDate.getTime());
        var wyears = Math.floor(years);
        if (isNaN(wyears)) {
            throw new ArgumentOutOfRangeException("years");
        }
        if (this.Kind === DateTimeKind.Utc) {
            newid.setUTCFullYear(newid.getUTCFullYear() + wyears);
        }
        else {
            newid.setFullYear(newid.getFullYear() + wyears);
        }
        return new DateTime(newid, this.Kind);
    };
    DateTime.prototype.AddMonths = function (months) {
        var newid = new Date(this._InternalDate.getTime());
        var wmonths = Math.floor(months);
        if (isNaN(wmonths)) {
            throw new ArgumentOutOfRangeException("months");
        }
        if (this.Kind === DateTimeKind.Utc) {
            newid.setUTCMonth(newid.getUTCMonth() + wmonths);
        }
        else {
            newid.setMonth(newid.getMonth() + wmonths);
        }
        return new DateTime(newid, this.Kind);
    };
    DateTime.prototype.AddDays = function (value) {
        return this.Add(TimeSpan.FromDays(value));
    };
    DateTime.prototype.AddHours = function (value) {
        return this.Add(TimeSpan.FromHours(value));
    };
    DateTime.prototype.AddMinutes = function (value) {
        return this.Add(TimeSpan.FromMinutes(value));
    };
    DateTime.prototype.AddSeconds = function (value) {
        return this.Add(TimeSpan.FromSeconds(value));
    };
    DateTime.prototype.AddMilliseconds = function (value) {
        return this.Add(TimeSpan.FromMilliseconds(value));
    };
    DateTime.prototype.Add = function (value) {
        var newid = new Date(this._InternalDate.getTime());
        if (this.Kind === DateTimeKind.Utc) {
            newid.setUTCDate(newid.getUTCDate() + value.Days);
            newid.setUTCHours(newid.getUTCHours() + value.Hours);
            newid.setUTCMinutes(newid.getUTCMinutes() + value.Minutes);
            newid.setUTCSeconds(newid.getUTCSeconds() + value.Seconds);
            newid.setUTCMilliseconds(newid.getUTCMilliseconds() + value.Milliseconds);
        }
        else {
            newid.setDate(newid.getDate() + value.Days);
            newid.setHours(newid.getHours() + value.Hours);
            newid.setMinutes(newid.getMinutes() + value.Minutes);
            newid.setSeconds(newid.getSeconds() + value.Seconds);
            newid.setMilliseconds(newid.getMilliseconds() + value.Milliseconds);
        }
        return new DateTime(newid, this.Kind);
    };
    DateTime.prototype.AddTicks = function (value) {
        return new DateTime(this.Ticks + value, this.Kind);
    };
    DateTime.prototype.Subtract = function (value) {
        if (value instanceof DateTime) {
            return new TimeSpan(this.Ticks - value.Ticks);
        }
        else if (value instanceof TimeSpan) {
            return new DateTime(this.Ticks - value.Ticks, this.Kind);
        }
        return new DateTime(this.Ticks, this.Kind);
    };
    DateTime.prototype.ToUniversalTime = function () {
        if (this.Kind === DateTimeKind.Utc)
            return new DateTime(this.Ticks, DateTimeKind.Utc);
        var id = this._InternalDate;
        return new DateTime(id.getUTCFullYear(), id.getUTCMonth() + 1, id.getUTCDate(), id.getUTCHours(), id.getUTCMinutes(), id.getUTCSeconds(), id.getUTCMilliseconds(), DateTimeKind.Utc);
    };
    DateTime.prototype.toString = function (format) {
        if (!format)
            return Fayde.Localization.FormatSingle(this, "s");
        return Fayde.Localization.FormatSingle(this, format);
    };
    DateTime.prototype.valueOf = function () {
        return this.Ticks;
    };
    DateTime.MAX_TICKS = 8640000000000000;
    DateTime.MIN_TICKS = -8640000000000000;
    return DateTime;
})();
Fayde.CoreLibrary.addPrimitive(DateTime);
nullstone.registerTypeConverter(DateTime, function (value) {
    if (value instanceof DateTime)
        return value;
    if (value instanceof Date)
        return new DateTime(value);
    if (typeof value === "string")
        return new DateTime(Date.parse(value));
    if (typeof value === "number")
        return new DateTime(value);
    throw new Exception("Cannot parse DateTime value '" + value + "'");
});
/// <reference path="../Primitives/DateTime.ts" />
var Fayde;
(function (Fayde) {
    var Localization;
    (function (Localization) {
        var Calendar = (function () {
            function Calendar() {
                this.ID = 1;
                this.Eras = [1];
                this.EraNames = ["A.D."];
                this.CurrentEraValue = 1;
                this.TwoDigitYearMax = 2029;
                this.MaxSupportedDateTime = new DateTime(9999, 12, 31, 23, 59, 59, 999);
                this.MinSupportedDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0);
            }
            return Calendar;
        })();
        Localization.Calendar = Calendar;
    })(Localization = Fayde.Localization || (Fayde.Localization = {}));
})(Fayde || (Fayde = {}));
/// <reference path="Calendar.ts" />
var Fayde;
(function (Fayde) {
    var Localization;
    (function (Localization) {
        (function (CalendarWeekRule) {
            CalendarWeekRule[CalendarWeekRule["FirstDay"] = 0] = "FirstDay";
            CalendarWeekRule[CalendarWeekRule["FirstFullWeek"] = 1] = "FirstFullWeek";
            CalendarWeekRule[CalendarWeekRule["FirstFourDayWeek"] = 2] = "FirstFourDayWeek";
        })(Localization.CalendarWeekRule || (Localization.CalendarWeekRule = {}));
        var CalendarWeekRule = Localization.CalendarWeekRule;
        var DateTimeFormatInfo = (function () {
            function DateTimeFormatInfo() {
                this.AbbreviatedDayNames = [
                    "Sun",
                    "Mon",
                    "Tue",
                    "Wed",
                    "Thu",
                    "Fri",
                    "Sat"
                ];
                this.AbbreviatedMonthGenitiveNames = [
                    "Jan",
                    "Feb",
                    "Mar",
                    "Apr",
                    "May",
                    "Jun",
                    "Jul",
                    "Aug",
                    "Sep",
                    "Oct",
                    "Nov",
                    "Dec",
                    ""
                ];
                this.AbbreviatedMonthNames = [
                    "Jan",
                    "Feb",
                    "Mar",
                    "Apr",
                    "May",
                    "Jun",
                    "Jul",
                    "Aug",
                    "Sep",
                    "Oct",
                    "Nov",
                    "Dec"
                ];
                this.AMDesignator = "AM";
                this.Calendar = new Localization.Calendar();
                this.CalendarWeekRule = CalendarWeekRule.FirstDay;
                this.DateSeparator = "/";
                this.DayNames = [
                    "Sunday",
                    "Monday",
                    "Tuesday",
                    "Wednesday",
                    "Thursday",
                    "Friday",
                    "Saturday"
                ];
                this.FirstDayOfWeek = DayOfWeek.Sunday;
                this.FullDateTimePattern = "dddd, MMMM dd, yyyy h:mm:ss tt";
                this.LongDatePattern = "dddd, MMMM dd, yyyy";
                this.LongTimePattern = "h:mm:ss tt";
                this.MonthDayPattern = "MMMM dd";
                this.MonthGenitiveNames = [
                    "January",
                    "February",
                    "March",
                    "April",
                    "May",
                    "June",
                    "July",
                    "August",
                    "September",
                    "October",
                    "November",
                    "December",
                    ""
                ];
                this.MonthNames = [
                    "January",
                    "February",
                    "March",
                    "April",
                    "May",
                    "June",
                    "July",
                    "August",
                    "September",
                    "October",
                    "November",
                    "December"
                ];
                this.PMDesignator = "PM";
                this.RFC1123Pattern = "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'";
                this.ShortDatePattern = "M/d/yyyy";
                this.ShortestDayNames = [
                    "Su",
                    "Mo",
                    "Tu",
                    "We",
                    "Th",
                    "Fr",
                    "Sa"
                ];
                this.ShortTimePattern = "h:mm tt";
                this.SortableDateTimePattern = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
                this.TimeSeparator = ":";
                this.UniversalSortableDateTimePattern = "yyyy'-'MM'-'dd HH':'mm':'ss'Z'";
                this.YearMonthPattern = "MMMM, yyyy";
                this.HasForceTwoDigitYears = false;
            }
            DateTimeFormatInfo.prototype.GetEraName = function (era) {
                if (era === 0)
                    era = this.Calendar.CurrentEraValue;
                if (era < 0)
                    throw new ArgumentException("era");
                var eras = this.Calendar.EraNames;
                if (era >= eras.length)
                    throw new ArgumentException("era");
                return eras[era];
            };
            DateTimeFormatInfo.ParseRepeatPattern = function (format, pos, patternChar) {
                var length = format.length;
                var index = pos + 1;
                var code = patternChar.charCodeAt(0);
                while (index < length && format.charCodeAt(index) === code)
                    ++index;
                return index - pos;
            };
            DateTimeFormatInfo.ParseNextChar = function (format, pos) {
                if (pos >= format.length - 1)
                    return -1;
                return format.charCodeAt(pos + 1);
            };
            DateTimeFormatInfo.ParseQuoteString = function (format, pos, result) {
                var length = format.length;
                var num = pos;
                var ch1 = format[pos++];
                var flag = false;
                var special = String.fromCharCode(92);
                while (pos < length) {
                    var ch2 = format[pos++];
                    if (ch2 === ch1) {
                        flag = true;
                        break;
                    }
                    else if (ch2 === special) {
                        if (pos >= length)
                            throw new FormatException("Invalid format string.");
                        result.push(format[pos++]);
                    }
                    else
                        result.push(ch2);
                }
                if (flag)
                    return pos - num;
                throw new FormatException("Bad quote: " + ch1);
            };
            DateTimeFormatInfo.FormatDigits = function (sb, value, len, overrideLenLimit) {
                if (!overrideLenLimit && len > 2)
                    len = 2;
                var s = Math.floor(value).toString();
                while (s.length < len)
                    s = "0" + s;
                sb.push(s);
            };
            DateTimeFormatInfo.FormatMonth = function (month, repeat, info) {
                if (repeat === 3)
                    return info.AbbreviatedMonthNames[month - 1];
                return info.MonthNames[month - 1];
            };
            DateTimeFormatInfo.FormatDayOfWeek = function (dayOfWeek, repeat, info) {
                if (repeat === 3)
                    return info.AbbreviatedDayNames[dayOfWeek];
                return info.DayNames[dayOfWeek];
            };
            DateTimeFormatInfo.HebrewFormatDigits = function (sb, digits) {
                console.warn("Hebrew not implemented");
                return digits.toString();
            };
            DateTimeFormatInfo.FormatHebrewMonthName = function (obj, month, repeat, info) {
                console.warn("Hebrew not implemented");
                return DateTimeFormatInfo.FormatMonth(month, repeat, info);
                if (month >= 7)
                    ++month;
                if (repeat === 3)
                    return info.AbbreviatedMonthNames[month - 1];
                return info.MonthNames[month - 1];
            };
            DateTimeFormatInfo.Instance = new DateTimeFormatInfo();
            return DateTimeFormatInfo;
        })();
        Localization.DateTimeFormatInfo = DateTimeFormatInfo;
    })(Localization = Fayde.Localization || (Fayde.Localization = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Localization;
    (function (Localization) {
        function Format(format) {
            var items = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                items[_i - 1] = arguments[_i];
            }
            var sb = [];
            appendFormat(sb, format, items);
            return sb.join("");
        }
        Localization.Format = Format;
        function FormatSingle(obj, format) {
            return doFormattable(obj, format);
        }
        Localization.FormatSingle = FormatSingle;
        function appendFormat(_this, format, args, provider) {
            if (format == null || args == null)
                throw new ArgumentNullException(format == null ? "format" : "args");
            var index1 = 0;
            var length = format.length;
            var ch = 0;
            while (true) {
                var flag = false;
                var repeatCount = 0;
                var breakout = false;
                do {
                    if (index1 < length) {
                        ch = format.charCodeAt(index1);
                        ++index1;
                        if (ch === 125) {
                            if (index1 < length && format.charCodeAt(index1) === 125)
                                ++index1;
                            else
                                throw formatError();
                        }
                        if (ch === 123) {
                            if (index1 >= length || format.charCodeAt(index1) !== 123)
                                --index1;
                            else {
                                breakout = true;
                                ++index1;
                                break;
                            }
                        }
                        else {
                            _this.push(String.fromCharCode(ch));
                            breakout = true;
                            break;
                        }
                    }
                    if (index1 != length) {
                        var index2 = index1 + 1;
                        if (index2 === length || (ch = format.charCodeAt(index2)) < 48 || ch > 57)
                            throw formatError();
                        var index3 = 0;
                        do {
                            index3 = index3 * 10 + ch - 48;
                            ++index2;
                            if (index2 == length)
                                throw formatError();
                            ch = format.charCodeAt(index2);
                        } while (ch >= 48 && ch <= 57 && index3 < 1000000);
                        if (index3 >= args.length)
                            throw new FormatException("Index out of range.");
                        while (index2 < length && (ch = format.charCodeAt(index2)) === 32)
                            ++index2;
                        flag = false;
                        var num = 0;
                        if (ch === 44) {
                            ++index2;
                            while (index2 < length && format.charCodeAt(index2) === 32)
                                ++index2;
                            if (index2 == length)
                                throw formatError();
                            ch = format.charCodeAt(index2);
                            if (ch === 45) {
                                flag = true;
                                ++index2;
                                if (index2 == length)
                                    throw formatError();
                                ch = format.charCodeAt(index2);
                            }
                            if (ch < 48 || ch > 57)
                                throw formatError();
                            do {
                                num = num * 10 + ch - 48;
                                ++index2;
                                if (index2 == length)
                                    throw formatError();
                                ch = format.charCodeAt(index2);
                            } while (ch >= 48 && ch <= 57 && num < 1000000);
                        }
                        while (index2 < length && (ch = format.charCodeAt(index2)) === 32)
                            ++index2;
                        var obj = args[index3];
                        var stringBuilder = null;
                        if (ch === 58) {
                            var index4 = index2 + 1;
                            while (true) {
                                if (index4 === length)
                                    throw formatError();
                                ch = format.charCodeAt(index4);
                                ++index4;
                                if (ch === 123) {
                                    if (index4 < length && format.charCodeAt(index4) === 123)
                                        ++index4;
                                    else
                                        throw formatError();
                                }
                                else if (ch === 125) {
                                    if (index4 < length && format.charCodeAt(index4) === 125)
                                        ++index4;
                                    else
                                        break;
                                }
                                stringBuilder = stringBuilder || [];
                                stringBuilder.push(String.fromCharCode(ch));
                            }
                            index2 = index4 - 1;
                        }
                        if (ch !== 125)
                            throw formatError();
                        index1 = index2 + 1;
                        var str = formatItem(obj, stringBuilder, provider) || "";
                        repeatCount = num - str.length;
                        if (!flag && repeatCount > 0)
                            pushMany(_this, ' ', repeatCount);
                        _this.push(str);
                    }
                    else
                        return;
                } while (!flag || repeatCount <= 0);
                if (!breakout)
                    pushMany(_this, ' ', repeatCount);
            }
        }
        function formatItem(obj, stringBuilder, provider) {
            var format1 = null;
            var str = null;
            if (str == null) {
                if (format1 == null && stringBuilder != null)
                    format1 = stringBuilderToString(stringBuilder);
                var formatted = format1 == null ? (obj == null ? "" : obj.toString()) : doFormattable(obj, format1, provider);
                if (formatted !== undefined)
                    str = formatted;
            }
            return str;
        }
        function pushMany(arr, s, count) {
            for (var i = count - 1; i >= 0; i--) {
                arr.push(s);
            }
        }
        function formatError() {
            return new FormatException("Invalid format string.");
        }
        function stringBuilderToString(arr) {
            return arr.join("");
        }
        var formatters = [];
        function RegisterFormattable(type, formatter) {
            formatters[type] = formatter;
        }
        Localization.RegisterFormattable = RegisterFormattable;
        function doFormattable(obj, format, provider) {
            if (obj == null)
                return undefined;
            var type = obj.constructor;
            var formatter = formatters[type];
            if (!formatter)
                return undefined;
            return formatter(obj, format, provider);
        }
    })(Localization = Fayde.Localization || (Fayde.Localization = {}));
})(Fayde || (Fayde = {}));
/// <reference path="../Primitives/DateTime.ts" />
/// <reference path="Format.ts" />
var Fayde;
(function (Fayde) {
    var Localization;
    (function (Localization) {
        Localization.RegisterFormattable(DateTime, function (obj, format, provider) {
            if (!format)
                return undefined;
            if (obj == null)
                return null;
            if (obj.constructor !== DateTime)
                return null;
            var res = tryStandardFormat(obj, format);
            if (res != undefined)
                return res;
            return tryCustomFormat(obj, format, TimeSpan.MinValue);
        });
        function tryStandardFormat(obj, format) {
            if (format.length !== 1)
                return undefined;
            var ch = format[0];
            if (!ch)
                return undefined;
            var f = standardFormatters[ch];
            if (!f)
                return undefined;
            return f(obj);
        }
        var standardFormatters = [];
        standardFormatters["d"] = function (obj) {
            return [
                obj.Month.toString(),
                obj.Day.toString(),
                obj.Year.toString()
            ].join("/");
        };
        standardFormatters["D"] = function (obj) {
            var info = Localization.DateTimeFormatInfo.Instance;
            return [
                info.DayNames[obj.DayOfWeek],
                ", ",
                info.MonthNames[obj.Month - 1],
                " ",
                obj.Day.toString(),
                ", ",
                obj.Year.toString()
            ].join("");
        };
        standardFormatters["f"] = function (obj) {
            return [
                standardFormatters["D"](obj),
                standardFormatters["t"](obj)
            ].join(" ");
        };
        standardFormatters["F"] = function (obj) {
            return [
                standardFormatters["D"](obj),
                standardFormatters["T"](obj)
            ].join(" ");
        };
        standardFormatters["g"] = function (obj) {
            return [
                standardFormatters["d"](obj),
                standardFormatters["t"](obj)
            ].join(" ");
        };
        standardFormatters["G"] = function (obj) {
            return [
                standardFormatters["d"](obj),
                standardFormatters["T"](obj)
            ].join(" ");
        };
        standardFormatters["m"] = standardFormatters["M"] = function (obj) {
            var info = Localization.DateTimeFormatInfo.Instance;
            return [
                info.MonthNames[obj.Month - 1],
                obj.Day
            ].join(" ");
        };
        standardFormatters["r"] = standardFormatters["R"] = function (obj) {
            var utc = obj.ToUniversalTime();
            var info = Localization.DateTimeFormatInfo.Instance;
            return [
                info.AbbreviatedDayNames[utc.DayOfWeek],
                ", ",
                utc.Day,
                " ",
                info.AbbreviatedMonthNames[utc.Month - 1],
                " ",
                utc.Year,
                " ",
                utc.Hour,
                ":",
                utc.Minute,
                ":",
                utc.Second,
                " GMT"
            ].join("");
        };
        standardFormatters["s"] = function (obj) {
            return [
                obj.Year,
                "-",
                padded(obj.Month),
                "-",
                padded(obj.Day),
                "T",
                padded(obj.Hour),
                ":",
                padded(obj.Minute),
                ":",
                padded(obj.Second)
            ].join("");
        };
        standardFormatters["t"] = function (obj) {
            var info = Localization.DateTimeFormatInfo.Instance;
            var hour = obj.Hour;
            var desig = info.AMDesignator;
            if (hour > 12) {
                hour -= 12;
                desig = info.PMDesignator;
            }
            return [
                hour.toString(),
                ":",
                obj.Minute.toString(),
                " ",
                desig
            ].join("");
        };
        standardFormatters["T"] = function (obj) {
            var info = Localization.DateTimeFormatInfo.Instance;
            var hour = obj.Hour;
            var desig = info.AMDesignator;
            if (hour > 12) {
                hour -= 12;
                desig = info.PMDesignator;
            }
            return [
                hour.toString(),
                ":",
                obj.Minute.toString(),
                ":",
                obj.Second.toString(),
                " ",
                desig
            ].join("");
        };
        standardFormatters["u"] = function (obj) {
            return [
                obj.Year.toString(),
                "-",
                padded(obj.Month),
                "-",
                padded(obj.Day),
                " ",
                padded(obj.Hour),
                ":",
                padded(obj.Minute),
                ":",
                padded(obj.Second),
                "Z"
            ].join("");
        };
        standardFormatters["U"] = function (obj) {
            var info = Localization.DateTimeFormatInfo.Instance;
            var hour = obj.Hour;
            var desig = info.AMDesignator;
            if (hour > 12) {
                hour -= 12;
                desig = info.PMDesignator;
            }
            return [
                info.DayNames[obj.DayOfWeek],
                ", ",
                info.MonthNames[obj.Month - 1],
                " ",
                obj.Day.toString(),
                ", ",
                obj.Year.toString(),
                " ",
                hour.toString(),
                ":",
                obj.Minute.toString(),
                ":",
                obj.Second.toString(),
                " ",
                desig
            ].join("");
        };
        standardFormatters["y"] = standardFormatters["Y"] = function (obj) {
            var info = Localization.DateTimeFormatInfo.Instance;
            return [
                info.MonthNames[obj.Month - 1],
                obj.Year
            ].join(", ");
        };
        function padded(num) {
            return num < 10 ? "0" + num.toString() : num.toString();
        }
        function tryCustomFormat(obj, format, offset) {
            var info = Localization.DateTimeFormatInfo.Instance;
            var calendar = info.Calendar;
            var stringBuilder = [];
            var flag = calendar.ID === 8;
            var timeOnly = true;
            var index = 0;
            var len;
            while (index < format.length) {
                var patternChar = format[index];
                switch (patternChar) {
                    case 'm':
                        len = Localization.DateTimeFormatInfo.ParseRepeatPattern(format, index, patternChar);
                        Localization.DateTimeFormatInfo.FormatDigits(stringBuilder, obj.Minute, len);
                        break;
                    case 's':
                        len = Localization.DateTimeFormatInfo.ParseRepeatPattern(format, index, patternChar);
                        Localization.DateTimeFormatInfo.FormatDigits(stringBuilder, obj.Second, len);
                        break;
                    case 't':
                        len = Localization.DateTimeFormatInfo.ParseRepeatPattern(format, index, patternChar);
                        if (len === 1) {
                            if (obj.Hour < 12) {
                                if (info.AMDesignator.length >= 1) {
                                    stringBuilder.push(info.AMDesignator[0]);
                                    break;
                                }
                                else
                                    break;
                            }
                            else if (info.PMDesignator.length >= 1) {
                                stringBuilder.push(info.PMDesignator[0]);
                                break;
                            }
                            else
                                break;
                        }
                        else {
                            stringBuilder.push(obj.Hour < 12 ? info.AMDesignator : info.PMDesignator);
                            break;
                        }
                    case 'y':
                        var year = obj.Year;
                        len = Localization.DateTimeFormatInfo.ParseRepeatPattern(format, index, patternChar);
                        if (info.HasForceTwoDigitYears)
                            Localization.DateTimeFormatInfo.FormatDigits(stringBuilder, year, len <= 2 ? len : 2);
                        else if (calendar.ID === 8)
                            Localization.DateTimeFormatInfo.HebrewFormatDigits(stringBuilder, year);
                        else if (len <= 2) {
                            Localization.DateTimeFormatInfo.FormatDigits(stringBuilder, year % 100, len);
                        }
                        else {
                            stringBuilder.push(Localization.FormatSingle(year, "D" + len.toString()));
                        }
                        timeOnly = false;
                        break;
                    case 'z':
                        len = Localization.DateTimeFormatInfo.ParseRepeatPattern(format, index, patternChar);
                        console.warn("DateTime 'z' not implemented");
                        break;
                    case 'K':
                        len = 1;
                        console.warn("DateTime 'K' not implemented");
                        break;
                    case 'M':
                        len = Localization.DateTimeFormatInfo.ParseRepeatPattern(format, index, patternChar);
                        var month = obj.Month;
                        if (len <= 2) {
                            if (flag)
                                Localization.DateTimeFormatInfo.HebrewFormatDigits(stringBuilder, month);
                            else
                                Localization.DateTimeFormatInfo.FormatDigits(stringBuilder, month, len);
                        }
                        else if (flag)
                            stringBuilder.push(Localization.DateTimeFormatInfo.FormatHebrewMonthName(obj, month, len, info));
                        else
                            stringBuilder.push(Localization.DateTimeFormatInfo.FormatMonth(month, len, info));
                        timeOnly = false;
                        break;
                    case '\\':
                        var num2 = Localization.DateTimeFormatInfo.ParseNextChar(format, index);
                        if (num2 < 0)
                            throw formatError();
                        stringBuilder.push(String.fromCharCode(num2));
                        len = 2;
                        break;
                    case 'd':
                        len = Localization.DateTimeFormatInfo.ParseRepeatPattern(format, index, patternChar);
                        if (len <= 2) {
                            var dayOfMonth = obj.Day;
                            if (flag)
                                Localization.DateTimeFormatInfo.HebrewFormatDigits(stringBuilder, dayOfMonth);
                            else
                                Localization.DateTimeFormatInfo.FormatDigits(stringBuilder, dayOfMonth, len);
                        }
                        else {
                            var dayOfWeek = obj.DayOfWeek;
                            stringBuilder.push(Localization.DateTimeFormatInfo.FormatDayOfWeek(dayOfWeek, len, info));
                        }
                        timeOnly = false;
                        break;
                    case 'f':
                        len = Localization.DateTimeFormatInfo.ParseRepeatPattern(format, index, patternChar);
                        if (len > 7)
                            throw formatError();
                        stringBuilder.push(msf(obj.Millisecond, len));
                        break;
                    case 'F':
                        len = Localization.DateTimeFormatInfo.ParseRepeatPattern(format, index, patternChar);
                        if (len > 7)
                            throw formatError();
                        stringBuilder.push(msF(obj.Millisecond, len));
                        break;
                    case 'g':
                        len = Localization.DateTimeFormatInfo.ParseRepeatPattern(format, index, patternChar);
                        stringBuilder.push(info.GetEraName(1));
                        break;
                    case 'h':
                        len = Localization.DateTimeFormatInfo.ParseRepeatPattern(format, index, patternChar);
                        var num5 = obj.Hour % 12;
                        if (num5 === 0)
                            num5 = 12;
                        Localization.DateTimeFormatInfo.FormatDigits(stringBuilder, num5, len);
                        break;
                    case '/':
                        stringBuilder.push(info.DateSeparator);
                        len = 1;
                        break;
                    case ':':
                        stringBuilder.push(info.TimeSeparator);
                        len = 1;
                        break;
                    case 'H':
                        len = Localization.DateTimeFormatInfo.ParseRepeatPattern(format, index, patternChar);
                        Localization.DateTimeFormatInfo.FormatDigits(stringBuilder, obj.Hour, len);
                        break;
                    case '"':
                    case '\'':
                        len = Localization.DateTimeFormatInfo.ParseQuoteString(format, index, stringBuilder);
                        break;
                    case '%':
                        var num6 = Localization.DateTimeFormatInfo.ParseNextChar(format, index);
                        if (num6 < 0 || num6 === 37)
                            throw formatError();
                        stringBuilder.push(tryCustomFormat(obj, String.fromCharCode(num6), offset));
                        len = 2;
                        break;
                    default:
                        stringBuilder.push(patternChar);
                        len = 1;
                        break;
                }
                index += len;
            }
            return stringBuilder.join("");
        }
        function msf(ms, len) {
            var s = Math.abs(ms).toString();
            while (s.length < 3)
                s = "0" + s;
            s += "0000";
            return s.substr(0, len);
        }
        function msF(ms, len) {
            var f = msf(ms, len);
            var end = f.length - 1;
            for (; end >= 0; end--) {
                if (f[end] !== "0")
                    break;
            }
            return f.slice(0, end + 1);
        }
        function formatError() {
            return new FormatException("Invalid format string.");
        }
    })(Localization = Fayde.Localization || (Fayde.Localization = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Localization;
    (function (Localization) {
        var NumberFormatInfo = (function () {
            function NumberFormatInfo() {
                this.CurrencyDecimalDigits = 2;
                this.CurrencyDecimalSeparator = ".";
                this.CurrencyGroupSeparator = ",";
                this.CurrencyGroupSizes = [3];
                this.CurrencyNegativePattern = 0;
                this.CurrencyPositivePattern = 0;
                this.CurrencySymbol = "$";
                this.NaNSymbol = "NaN";
                this.NegativeInfinitySymbol = "-Infinity";
                this.PositiveInfinitySymbol = "Infinity";
                this.NegativeSign = "-";
                this.PositiveSign = "+";
                this.NumberDecimalDigits = 2;
                this.NumberDecimalSeparator = ".";
                this.NumberGroupSeparator = ",";
                this.NumberGroupSizes = [3];
                this.NumberNegativePattern = 1;
                this.PercentDecimalDigits = 2;
                this.PercentDecimalSeparator = ".";
                this.PercentGroupSeparator = ",";
                this.PercentGroupSizes = [3];
                this.PercentNegativePattern = 0;
                this.PercentPositivePattern = 0;
                this.PercentSymbol = "%";
                this.PerMilleSymbol = "‰";
            }
            NumberFormatInfo.prototype.FormatCurrency = function (num, precision) {
                if (precision == null)
                    precision = this.CurrencyDecimalDigits;
                var rawnum = this.FormatRawNumber(Math.abs(num), precision, this.CurrencyDecimalSeparator, this.CurrencyGroupSeparator, this.CurrencyGroupSizes);
                if (num < 0) {
                    switch (this.CurrencyNegativePattern) {
                        case 0:
                        default:
                            return "(" + this.CurrencySymbol + rawnum + ")";
                        case 1:
                            return [this.NegativeSign, this.CurrencySymbol, rawnum].join("");
                        case 2:
                            return [this.CurrencySymbol, this.NegativeSign, rawnum].join("");
                        case 3:
                            return [this.CurrencySymbol, rawnum, this.NegativeSign].join("");
                        case 4:
                            return "(" + rawnum + this.CurrencySymbol + ")";
                        case 5:
                            return [this.NegativeSign, rawnum, this.CurrencySymbol].join("");
                        case 6:
                            return [rawnum, this.NegativeSign, this.CurrencySymbol].join("");
                        case 7:
                            return [rawnum, this.CurrencySymbol, this.NegativeSign].join("");
                        case 8:
                            return [this.NegativeSign, rawnum, " ", this.CurrencySymbol].join("");
                        case 9:
                            return [this.NegativeSign, this.CurrencySymbol, " ", rawnum].join("");
                        case 10:
                            return [rawnum, " ", this.CurrencySymbol, this.NegativeSign].join("");
                        case 11:
                            return [this.CurrencySymbol, " ", rawnum, this.NegativeSign].join("");
                        case 12:
                            return [this.CurrencySymbol, " ", this.NegativeSign, rawnum].join("");
                        case 13:
                            return [rawnum, this.NegativeSign, " ", this.CurrencySymbol].join("");
                        case 14:
                            return "(" + this.CurrencySymbol + " " + rawnum + ")";
                        case 15:
                            return "(" + rawnum + " " + this.CurrencySymbol + ")";
                    }
                }
                else {
                    switch (this.CurrencyPositivePattern) {
                        case 0:
                        default:
                            return [this.CurrencySymbol, rawnum].join("");
                        case 1:
                            return [rawnum, this.CurrencySymbol].join("");
                        case 2:
                            return [this.CurrencySymbol, rawnum].join(" ");
                        case 3:
                            return [rawnum, this.CurrencySymbol].join(" ");
                    }
                }
            };
            NumberFormatInfo.prototype.FormatNumber = function (num, precision, ignoreGroupSep) {
                if (precision == null)
                    precision = this.NumberDecimalDigits;
                var rawnum = this.FormatRawNumber(Math.abs(num), precision, this.NumberDecimalSeparator, ignoreGroupSep ? "" : this.NumberGroupSeparator, this.NumberGroupSizes);
                if (num >= 0)
                    return rawnum;
                switch (this.NumberNegativePattern) {
                    case 0:
                        return "(" + rawnum + ")";
                    case 1:
                    default:
                        return [this.NegativeSign, rawnum].join("");
                    case 2:
                        return [this.NegativeSign, rawnum].join(" ");
                    case 3:
                        return [rawnum, this.NegativeSign].join("");
                    case 4:
                        return [rawnum, this.NegativeSign].join(" ");
                }
            };
            NumberFormatInfo.prototype.FormatPercent = function (num, precision) {
                if (precision == null)
                    precision = this.PercentDecimalDigits;
                var rawnum = this.FormatRawNumber(Math.abs(num * 100), precision, this.PercentDecimalSeparator, this.PercentGroupSeparator, this.PercentGroupSizes);
                var sym = this.PercentSymbol;
                if (num < 0) {
                    var sign = this.NegativeSign;
                    switch (this.PercentNegativePattern) {
                        case 0:
                        default:
                            return [sign, rawnum, " ", sym].join("");
                        case 1:
                            return [sign, rawnum, sym].join("");
                        case 2:
                            return [sign, sym, rawnum].join("");
                        case 3:
                            return [sym, sign, rawnum].join("");
                        case 4:
                            return [sym, rawnum, sign].join("");
                        case 5:
                            return [rawnum, sign, sym].join("");
                        case 6:
                            return [rawnum, sym, sign].join("");
                        case 7:
                            return [sign, sym, " ", rawnum].join("");
                        case 8:
                            return [sign, sym, " ", rawnum].join("");
                        case 9:
                            return [sym, " ", rawnum, sign].join("");
                        case 10:
                            return [sym, " ", sign, rawnum].join("");
                        case 11:
                            return [rawnum, sign, " ", sym].join("");
                    }
                }
                else {
                    switch (this.PercentPositivePattern) {
                        case 0:
                        default:
                            return [rawnum, this.PercentSymbol].join(" ");
                        case 1:
                            return [rawnum, this.PercentSymbol].join("");
                        case 2:
                            return [this.PercentSymbol, rawnum].join("");
                        case 3:
                            return [this.PercentSymbol, rawnum].join(" ");
                    }
                }
            };
            NumberFormatInfo.prototype.FormatGeneral = function (num, precision) {
                if (precision == null)
                    precision = 6;
                var sig = sigDigits(Math.abs(num), precision);
                var rawnum = sig.toString();
                if (num >= 0)
                    return rawnum;
                return this.NegativeSign + rawnum;
            };
            NumberFormatInfo.prototype.FormatDecimal = function (num, precision) {
                var rawnum = this.FormatRawNumber(Math.abs(num), 0, "", "", null);
                var d = padded(rawnum, precision || 0, true);
                if (num < 0)
                    d = this.NegativeSign + d;
                return d;
            };
            NumberFormatInfo.prototype.FormatExponential = function (num, precision) {
                if (precision == null)
                    precision = 6;
                var e = num.toExponential(precision);
                var tokens = e.split("e+");
                return tokens[0] + "e" + this.PositiveSign + padded(tokens[1], 3, true);
            };
            NumberFormatInfo.prototype.FormatHexadecimal = function (num, precision) {
                if (precision == null)
                    precision = 2;
                num = parseInt(num);
                if (num >= 0)
                    return padded(num.toString(16), precision, true);
                var us = (Math.pow(2, 32) + num).toString(16);
                if (precision >= us.length)
                    return padded(us, precision, true);
                var start = 0;
                while (us.length - start > precision && us[start] === "f") {
                    start++;
                }
                return us.substr(start);
            };
            NumberFormatInfo.prototype.FormatRawNumber = function (num, precision, decSep, groupSep, groupSizes) {
                var rounded = round(num, precision);
                var ip = Math.floor(rounded).toString();
                var fp = rounded.toString().split('.')[1];
                var pfp = padded(fp, precision);
                if (!pfp)
                    return grouped(ip, groupSep);
                return [
                    grouped(ip, groupSep),
                    pfp
                ].join(decSep);
            };
            NumberFormatInfo.Instance = new NumberFormatInfo();
            return NumberFormatInfo;
        })();
        Localization.NumberFormatInfo = NumberFormatInfo;
        function grouped(s, sep) {
            if (s.length < 4)
                return s;
            var offset = s.length % 3;
            if (offset !== 0) {
                offset = 3 - offset;
                s = new Array(offset + 1).join("0") + s;
            }
            return s.match(/\d\d\d/g).join(sep).substr(offset);
        }
        function padded(s, precision, front) {
            if (!s)
                return new Array(precision + 1).join("0");
            if (s.length > precision)
                return front ? s : s.substr(0, precision);
            if (front)
                return new Array(precision - s.length + 1).join("0") + s;
            return s + new Array(precision - s.length + 1).join("0");
        }
        function round(num, places) {
            var factor = Math.pow(10, places);
            return Math.round(num * factor) / factor;
        }
        function sigDigits(num, digits) {
            var n = num.toString();
            var index = n.indexOf(".");
            if (index > -1)
                return round(num, digits - index);
            return round(num, digits - n.length);
        }
    })(Localization = Fayde.Localization || (Fayde.Localization = {}));
})(Fayde || (Fayde = {}));
/// <reference path="Format.ts" />
var Fayde;
(function (Fayde) {
    var Localization;
    (function (Localization) {
        Localization.RegisterFormattable(Number, function (obj, format, provider) {
            if (obj == null)
                return null;
            if (obj.constructor !== Number)
                return null;
            var res = tryStandardFormat(obj, format);
            if (res != undefined)
                return res;
            return format;
        });
        function tryStandardFormat(obj, format) {
            var ch = format[0];
            if (!ch)
                return undefined;
            var lowerch = ch.toLowerCase();
            if (lowerch < "a" || lowerch > "z")
                return undefined;
            var prec = null;
            if (format.length > 1) {
                var prec = parseInt(format.substr(1));
                if (isNaN(prec))
                    return undefined;
            }
            var f = standardFormatters[ch] || standardFormatters[lowerch];
            if (!f)
                return undefined;
            return f(obj, prec);
        }
        var standardFormatters = [];
        standardFormatters["c"] = function (obj, precision) {
            return Localization.NumberFormatInfo.Instance.FormatCurrency(obj, precision);
        };
        standardFormatters["d"] = function (obj, precision) {
            return Localization.NumberFormatInfo.Instance.FormatDecimal(obj, precision);
        };
        standardFormatters["E"] = function (obj, precision) {
            return Localization.NumberFormatInfo.Instance.FormatExponential(obj, precision).toUpperCase();
        };
        standardFormatters["e"] = function (obj, precision) {
            return Localization.NumberFormatInfo.Instance.FormatExponential(obj, precision);
        };
        standardFormatters["f"] = function (obj, precision) {
            return Localization.NumberFormatInfo.Instance.FormatNumber(obj, precision, true);
        };
        standardFormatters["g"] = function (obj, precision) {
            return Localization.NumberFormatInfo.Instance.FormatGeneral(obj, precision);
        };
        standardFormatters["n"] = function (obj, precision) {
            return Localization.NumberFormatInfo.Instance.FormatNumber(obj, precision);
        };
        standardFormatters["p"] = function (obj, precision) {
            return Localization.NumberFormatInfo.Instance.FormatPercent(obj, precision);
        };
        standardFormatters["X"] = function (obj, precision) {
            return Localization.NumberFormatInfo.Instance.FormatHexadecimal(obj, precision).toUpperCase();
        };
        standardFormatters["x"] = function (obj, precision) {
            return Localization.NumberFormatInfo.Instance.FormatHexadecimal(obj, precision);
        };
    })(Localization = Fayde.Localization || (Fayde.Localization = {}));
})(Fayde || (Fayde = {}));
/// <reference path="../Primitives/TimeSpan.ts" />
/// <reference path="Format.ts" />
var Fayde;
(function (Fayde) {
    var Localization;
    (function (Localization) {
        Localization.RegisterFormattable(TimeSpan, function (obj, format, provider) {
            if (!format)
                return undefined;
            if (obj == null)
                return null;
            if (obj.constructor !== TimeSpan)
                return null;
            var res = tryStandardFormat(obj, format);
            if (res != undefined)
                return res;
            return tryCustomFormat(obj, format);
        });
        function tryStandardFormat(obj, format) {
            if (format.length !== 1)
                return undefined;
            var ch = format[0];
            if (!ch)
                return undefined;
            var f = standardFormatters[ch];
            if (!f)
                return undefined;
            return f(obj);
        }
        var standardFormatters = [];
        standardFormatters["c"] = standardFormatters["t"] = standardFormatters["T"] = function (obj) {
            var info = Localization.DateTimeFormatInfo.Instance;
            var s = [
                padded(obj.Hours),
                padded(obj.Minutes),
                padded(obj.Seconds)
            ].join(info.TimeSeparator);
            var days = obj.Days;
            if (days)
                s = Math.abs(days) + "." + s;
            var ms = obj.Milliseconds;
            if (ms)
                s += "." + msf(ms, 7);
            if (obj.Ticks < 0)
                s = "-" + s;
            return s;
        };
        standardFormatters["g"] = function (obj) {
            var info = Localization.DateTimeFormatInfo.Instance;
            var s = [
                Math.abs(obj.Hours),
                padded(obj.Minutes),
                padded(obj.Seconds)
            ].join(info.TimeSeparator);
            var days = obj.Days;
            if (days)
                s = Math.abs(days) + ":" + s;
            var ms = obj.Milliseconds;
            if (ms)
                s += "." + msF(ms, 7);
            if (obj.Ticks < 0)
                s = "-" + s;
            return s;
        };
        standardFormatters["G"] = function (obj) {
            var info = Localization.DateTimeFormatInfo.Instance;
            var s = [
                Math.abs(obj.Days),
                padded(obj.Hours),
                padded(obj.Minutes),
                padded(obj.Seconds)
            ].join(info.TimeSeparator);
            var ms = obj.Milliseconds;
            s += "." + msf(ms, 7);
            if (obj.Ticks < 0)
                s = "-" + s;
            return s;
        };
        function tryCustomFormat(obj, format) {
            var days = Math.abs(obj.Days);
            var hours = Math.abs(obj.Hours);
            var minutes = Math.abs(obj.Minutes);
            var seconds = Math.abs(obj.Seconds);
            var ms = Math.abs(obj.Milliseconds);
            var len;
            var pos = 0;
            var stringBuilder = [];
            while (pos < format.length) {
                var patternChar = format[pos];
                switch (patternChar) {
                    case 'm':
                        len = Localization.DateTimeFormatInfo.ParseRepeatPattern(format, pos, patternChar);
                        if (len > 2)
                            throw formatError();
                        Localization.DateTimeFormatInfo.FormatDigits(stringBuilder, minutes, len);
                        break;
                    case 's':
                        len = Localization.DateTimeFormatInfo.ParseRepeatPattern(format, pos, patternChar);
                        if (len > 2)
                            throw formatError();
                        Localization.DateTimeFormatInfo.FormatDigits(stringBuilder, seconds, len);
                        break;
                    case '\\':
                        var num7 = Localization.DateTimeFormatInfo.ParseNextChar(format, pos);
                        if (num7 < 0)
                            throw formatError();
                        stringBuilder.push(String.fromCharCode(num7));
                        len = 2;
                        break;
                    case 'd':
                        len = Localization.DateTimeFormatInfo.ParseRepeatPattern(format, pos, patternChar);
                        if (len > 8)
                            throw formatError();
                        Localization.DateTimeFormatInfo.FormatDigits(stringBuilder, days, len, true);
                        break;
                    case 'f':
                        len = Localization.DateTimeFormatInfo.ParseRepeatPattern(format, pos, patternChar);
                        if (len > 7)
                            throw formatError();
                        stringBuilder.push(msf(ms, len));
                        break;
                    case 'F':
                        len = Localization.DateTimeFormatInfo.ParseRepeatPattern(format, pos, patternChar);
                        if (len > 7)
                            throw formatError();
                        stringBuilder.push(msF(ms, len));
                        break;
                    case 'h':
                        len = Localization.DateTimeFormatInfo.ParseRepeatPattern(format, pos, patternChar);
                        if (len > 2)
                            throw formatError();
                        Localization.DateTimeFormatInfo.FormatDigits(stringBuilder, hours, len);
                        break;
                    case '"':
                    case '\'':
                        len = Localization.DateTimeFormatInfo.ParseQuoteString(format, pos, stringBuilder);
                        break;
                    case '%':
                        var num9 = Localization.DateTimeFormatInfo.ParseNextChar(format, pos);
                        if (num9 < 0 || num9 === 37)
                            throw formatError();
                        stringBuilder.push(tryCustomFormat(obj, String.fromCharCode(num9)));
                        len = 2;
                        break;
                    default:
                        throw formatError();
                }
                pos += len;
            }
            return stringBuilder.join("");
        }
        function padded(num) {
            var s = Math.abs(num).toString();
            return (s.length === 1) ? "0" + s : s;
        }
        function msf(ms, len) {
            var s = Math.abs(ms).toString();
            while (s.length < 3)
                s = "0" + s;
            s += "0000";
            return s.substr(0, len);
        }
        function msF(ms, len) {
            var f = msf(ms, len);
            var end = f.length - 1;
            for (; end >= 0; end--) {
                if (f[end] !== "0")
                    break;
            }
            return f.slice(0, end + 1);
        }
        function formatError() {
            return new FormatException("Invalid format string.");
        }
    })(Localization = Fayde.Localization || (Fayde.Localization = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var MVVM;
    (function (MVVM) {
        function AutoModel(typeOrModel) {
            var obj = getApplier(typeOrModel);
            var props = [];
            var validators = [];
            var applier = {
                Notify: function () {
                    var properties = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        properties[_i - 0] = arguments[_i];
                    }
                    for (var i = 0; i < properties.length; i++) {
                        var prop = properties[i];
                        if (typeof prop === "string")
                            props.push(prop);
                        else if (Array.isArray(prop))
                            props = props.concat(prop);
                    }
                    return applier;
                },
                Validate: function (propertyName) {
                    var validations = [];
                    for (var _i = 1; _i < arguments.length; _i++) {
                        validations[_i - 1] = arguments[_i];
                    }
                    var cur = validators[propertyName];
                    if (!cur)
                        validators[propertyName] = validations;
                    else
                        validators[propertyName] = cur.concat(validations);
                    return applier;
                },
                Finish: function () {
                    for (var i = 0, uprops = unique(props), len = uprops.length; i < len; i++) {
                        var prop = uprops[i];
                        applyProperty(obj, prop, validators[prop]);
                    }
                    return obj;
                }
            };
            return applier;
        }
        MVVM.AutoModel = AutoModel;
        function getApplier(typeOrModel) {
            if (typeof typeOrModel === "function")
                return typeOrModel.prototype;
            return typeOrModel;
        }
        function unique(arr) {
            var re = [];
            for (var i = 0; i < arr.length; i++) {
                var cur = arr[i];
                if (re.indexOf(cur) > -1)
                    continue;
                re.push(cur);
            }
            return re;
        }
        function applyProperty(obj, propertyName, validations) {
            var initial = obj[propertyName];
            var backingName = "_$" + propertyName + "$_";
            obj[backingName] = initial;
            if (validations && validations.length > 0) {
                Object.defineProperty(obj, propertyName, {
                    get: function () {
                        return this[backingName];
                    },
                    set: function (value) {
                        this[backingName] = value;
                        doValidate(this, value, propertyName, validations);
                        this.OnPropertyChanged(propertyName);
                    }
                });
            }
            else {
                Object.defineProperty(obj, propertyName, {
                    get: function () {
                        return this[backingName];
                    },
                    set: function (value) {
                        this[backingName] = value;
                        this.OnPropertyChanged(propertyName);
                    }
                });
            }
        }
        function doValidate(entity, value, propertyName, validations) {
            var errs = validate(entity, value, propertyName, validations);
            entity.ClearErrors && entity.ClearErrors(propertyName);
            if (!entity.AddError)
                return;
            for (var i = 0; i < errs.length; i++) {
                entity.AddError(propertyName, errs[i]);
            }
        }
        function validate(entity, value, propertyName, validations) {
            var all = [];
            for (var i = 0; i < validations.length; i++) {
                var func = validations[i];
                var errors = func(value, propertyName, entity);
                if (errors)
                    all = all.concat(errors);
            }
            return all;
        }
    })(MVVM = Fayde.MVVM || (Fayde.MVVM = {}));
})(Fayde || (Fayde = {}));
/// <reference path="../Core/INotifyPropertyChanged.ts" />
var Fayde;
(function (Fayde) {
    var MVVM;
    (function (MVVM) {
        function NotifyProperties(type, propNames) {
            var len = propNames.length;
            for (var i = 0; i < len; i++) {
                (function () {
                    var propName = propNames[i];
                    var backingName = "$" + propName + "$";
                    Object.defineProperty(type.prototype, propName, {
                        get: function () { return this[backingName]; },
                        set: function (value) {
                            this[backingName] = value;
                            this.OnPropertyChanged(propName);
                        }
                    });
                })();
            }
        }
        MVVM.NotifyProperties = NotifyProperties;
        var ObservableObject = (function () {
            function ObservableObject() {
                this.PropertyChanged = new nullstone.Event();
            }
            ObservableObject.prototype.OnPropertyChanged = function (propertyName) {
                this.PropertyChanged.raise(this, new Fayde.PropertyChangedEventArgs(propertyName));
            };
            return ObservableObject;
        })();
        MVVM.ObservableObject = ObservableObject;
        Fayde.CoreLibrary.add(ObservableObject);
    })(MVVM = Fayde.MVVM || (Fayde.MVVM = {}));
})(Fayde || (Fayde = {}));
/// <reference path="ObservableObject.ts"/>
var Fayde;
(function (Fayde) {
    var MVVM;
    (function (MVVM) {
        var ViewModelBase = (function (_super) {
            __extends(ViewModelBase, _super);
            function ViewModelBase() {
                _super.apply(this, arguments);
            }
            return ViewModelBase;
        })(MVVM.ObservableObject);
        MVVM.ViewModelBase = ViewModelBase;
        Fayde.CoreLibrary.add(ViewModelBase);
    })(MVVM = Fayde.MVVM || (Fayde.MVVM = {}));
})(Fayde || (Fayde = {}));
/// <reference path="ViewModelBase" />
var Fayde;
(function (Fayde) {
    var MVVM;
    (function (MVVM) {
        var DialogViewModel = (function (_super) {
            __extends(DialogViewModel, _super);
            function DialogViewModel(settings) {
                var _this = this;
                _super.call(this);
                this.IsOpen = false;
                this.OverlayDataContext = null;
                this.RequestOpenCommand = new MVVM.RelayCommand(function (par) { return _this.RequestOpen_Execute(par); }, function (par) { return _this.RequestOpen_CanExecute(par); });
                this.ClosedCommand = new MVVM.RelayCommand(function (par) { return _this.Closed_Execute(par); });
                if (settings) {
                    this.AcceptAction = settings.AcceptAction;
                    this.CompleteAction = settings.CompleteAction;
                    this.ViewModelBuilder = settings.ViewModelBuilder;
                    this.CanOpen = settings.CanOpen;
                }
            }
            DialogViewModel.prototype.Closed_Execute = function (parameter) {
                if (parameter.Result === true) {
                    this.AcceptAction && this.AcceptAction(parameter.Data || undefined);
                }
                this.CompleteAction && this.CompleteAction(parameter);
            };
            DialogViewModel.prototype.RequestOpen_Execute = function (parameter) {
                if (this.ViewModelBuilder != null) {
                    var vm = this.ViewModelBuilder(parameter);
                    if (vm == null)
                        return;
                    this.OverlayDataContext = vm;
                }
                this.IsOpen = true;
            };
            DialogViewModel.prototype.RequestOpen_CanExecute = function (parameter) {
                return !this.CanOpen || this.CanOpen(parameter);
            };
            return DialogViewModel;
        })(MVVM.ViewModelBase);
        MVVM.DialogViewModel = DialogViewModel;
        MVVM.NotifyProperties(DialogViewModel, ["IsOpen", "OverlayDataContext", "RequestOpenCommand", "ClosedCommand"]);
    })(MVVM = Fayde.MVVM || (Fayde.MVVM = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var MVVM;
    (function (MVVM) {
        var Entity = (function () {
            function Entity() {
                this.PropertyChanged = new nullstone.Event();
                this._Errors = {};
                this.ErrorsChanged = new nullstone.Event();
            }
            Entity.prototype.OnPropertyChanged = function (propertyName) {
                this.PropertyChanged.raise(this, new Fayde.PropertyChangedEventArgs(propertyName));
            };
            Object.defineProperty(Entity.prototype, "HasErrors", {
                get: function () {
                    return Object.keys(this._Errors).length > 0;
                },
                enumerable: true,
                configurable: true
            });
            Entity.prototype.AddError = function (propertyName, errorMessage) {
                var errs = this._Errors[propertyName];
                if (!errs) {
                    this._Errors[propertyName] = [errorMessage];
                }
                else {
                    errs.push(errorMessage);
                }
                this.ErrorsChanged.raise(this, new Fayde.Data.DataErrorsChangedEventArgs(propertyName));
            };
            Entity.prototype.RemoveError = function (propertyName, errorMessage) {
                var errs = this._Errors[propertyName];
                if (!errs)
                    return;
                var index = errs.indexOf(errorMessage);
                if (index >= 0)
                    errs.splice(index, 1);
                if (errs.length < 1)
                    delete this._Errors[propertyName];
                this.ErrorsChanged.raise(this, new Fayde.Data.DataErrorsChangedEventArgs(propertyName));
            };
            Entity.prototype.ClearErrors = function (propertyName) {
                var errs = this._Errors[propertyName];
                if (!errs)
                    return;
                delete this._Errors[propertyName];
                this.ErrorsChanged.raise(this, new Fayde.Data.DataErrorsChangedEventArgs(propertyName));
            };
            Entity.prototype.GetErrors = function (propertyName) {
                var errs = this._Errors[propertyName];
                if (!errs)
                    return null;
                return nullstone.IEnumerable_.fromArray(errs);
            };
            Entity.ApplyTo = function (model) {
                var out = model;
                var proto = Entity.prototype;
                Object.defineProperties(out, {
                    "_Errors": { value: {} },
                    "HasErrors": {
                        get: function () {
                            return Object.keys(this._Errors).length > 0;
                        }
                    }
                });
                out.PropertyChanged = new nullstone.Event();
                out.OnPropertyChanged = proto.OnPropertyChanged.bind(out);
                out.ErrorsChanged = new nullstone.Event();
                out.AddError = proto.AddError.bind(out);
                out.RemoveError = proto.RemoveError.bind(out);
                out.ClearErrors = proto.ClearErrors.bind(out);
                out.GetErrors = proto.GetErrors.bind(out);
                Fayde.Data.INotifyDataErrorInfo_.mark(out);
                return out;
            };
            return Entity;
        })();
        MVVM.Entity = Entity;
        Fayde.Data.INotifyDataErrorInfo_.mark(Entity);
    })(MVVM = Fayde.MVVM || (Fayde.MVVM = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Navigation;
    (function (Navigation) {
        var Route = (function () {
            function Route(view, hashParams, dataContext) {
                this.View = view;
                this.HashParams = hashParams;
                this.DataContext = dataContext;
            }
            return Route;
        })();
        Navigation.Route = Route;
        Fayde.CoreLibrary.add(Route);
    })(Navigation = Fayde.Navigation || (Fayde.Navigation = {}));
})(Fayde || (Fayde = {}));
/// <reference path="../Navigation/Route.ts" />
var Fayde;
(function (Fayde) {
    var MVVM;
    (function (MVVM) {
        MVVM.IViewModelProvider_ = new nullstone.Interface("IViewModelProvider");
        MVVM.IViewModelProvider_.is = function (o) {
            return o && typeof o.ResolveViewModel === "function";
        };
    })(MVVM = Fayde.MVVM || (Fayde.MVVM = {}));
})(Fayde || (Fayde = {}));
/// <reference path="../Input/ICommand.ts" />
var Fayde;
(function (Fayde) {
    var MVVM;
    (function (MVVM) {
        var RelayCommand = (function () {
            function RelayCommand(execute, canExecute) {
                this.CanExecuteChanged = new nullstone.Event();
                if (execute)
                    this.Execute = execute;
                if (canExecute)
                    this.CanExecute = canExecute;
            }
            RelayCommand.prototype.Execute = function (parameter) { };
            RelayCommand.prototype.CanExecute = function (parameter) { return true; };
            RelayCommand.prototype.ForceCanExecuteChanged = function () {
                this.CanExecuteChanged.raise(this, null);
            };
            return RelayCommand;
        })();
        MVVM.RelayCommand = RelayCommand;
        Fayde.CoreLibrary.add(RelayCommand);
        nullstone.addTypeInterfaces(RelayCommand, Fayde.Input.ICommand_);
    })(MVVM = Fayde.MVVM || (Fayde.MVVM = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Markup;
    (function (Markup) {
        Markup.IEventFilter_ = new nullstone.Interface("IEventFilter");
        var EventBinding = (function () {
            function EventBinding() {
                this.CommandPath = null;
                this.Command = null;
                this.CommandParameter = null;
                this.CommandBinding = null;
                this.CommandParameterBinding = null;
                this.Filter = null;
            }
            EventBinding.prototype.init = function (val) {
                this.CommandPath = val;
            };
            EventBinding.prototype.transmute = function (os) {
                this.$$coerce();
                Object.freeze(this);
                return new Fayde.EventBindingExpression(this);
            };
            EventBinding.prototype.$$coerce = function () {
                if (this.Command) {
                    this.CommandBinding = this.Command.ParentBinding.Clone();
                    this.Command = null;
                }
                if (this.CommandPath) {
                    this.CommandBinding = new Fayde.Data.Binding(this.CommandPath);
                }
                if (this.CommandParameter) {
                    this.CommandParameterBinding = this.CommandParameter.ParentBinding.Clone();
                    this.CommandParameter = null;
                }
            };
            return EventBinding;
        })();
        Markup.EventBinding = EventBinding;
        Fayde.CoreLibrary.add(EventBinding);
    })(Markup = Fayde.Markup || (Fayde.Markup = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Markup;
    (function (Markup) {
        var XamlMarkup = nullstone.markup.xaml.XamlMarkup;
        function Resolve(uri) {
            return nullstone.async.create(function (resolve, reject) {
                XamlMarkup.create(uri)
                    .loadAsync()
                    .then(function (xm) {
                    var co = collector.create();
                    return nullstone.async.many([
                        xm.resolve(Fayde.TypeManager, co.collect),
                        co.resolve()
                    ]).then(function () { return resolve(xm); }, reject);
                }, reject);
            });
        }
        Markup.Resolve = Resolve;
        var collector;
        (function (collector) {
            function create() {
                var rduris = [];
                return {
                    collect: function (ownerUri, ownerName, propName, val) {
                        if (ownerUri === Fayde.XMLNS && ownerName === "ResourceDictionary" && propName === "Source")
                            rduris.push(val);
                    },
                    resolve: function () {
                        return nullstone.async.many(rduris.map(Resolve));
                    }
                };
            }
            collector.create = create;
        })(collector || (collector = {}));
    })(Markup = Fayde.Markup || (Fayde.Markup = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Markup;
    (function (Markup) {
        var StaticResource = (function () {
            function StaticResource() {
            }
            StaticResource.prototype.init = function (val) {
                this.ResourceKey = val;
            };
            StaticResource.prototype.transmute = function (os) {
                var res = this.$$resources;
                this.$$resources = undefined;
                var key = this.ResourceKey;
                var rd;
                for (var i = os.length - 1; i >= 0; i--) {
                    var cur = os[i];
                    if (cur instanceof Fayde.FrameworkElement) {
                        rd = cur.ReadLocalValue(Fayde.FrameworkElement.ResourcesProperty);
                        if (rd === DependencyProperty.UnsetValue)
                            rd = undefined;
                    }
                    else if (cur instanceof Fayde.Application) {
                        rd = cur.Resources;
                    }
                    else if (cur instanceof Fayde.ResourceDictionary) {
                        rd = cur;
                    }
                    var o = rd ? rd.Get(key) : undefined;
                    if (o !== undefined)
                        return o;
                }
                for (var i = res ? (res.length - 1) : -1; i >= 0; i--) {
                    var o = res[i].Get(key);
                    if (o !== undefined)
                        return o;
                }
                if (this.$$app) {
                    var rd = this.$$app.Resources;
                    if (rd) {
                        var o = rd.Get(key);
                        if (o !== undefined)
                            return o;
                    }
                }
                throw new Error("Could not resolve StaticResource: '" + key + "'.");
            };
            StaticResource.prototype.setContext = function (app, resources) {
                this.$$app = app;
                this.$$resources = resources;
            };
            return StaticResource;
        })();
        Markup.StaticResource = StaticResource;
        Fayde.CoreLibrary.add(StaticResource);
    })(Markup = Fayde.Markup || (Fayde.Markup = {}));
})(Fayde || (Fayde = {}));
/// <reference path="../Core/DependencyObject.ts" />
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        var Brush = (function (_super) {
            __extends(Brush, _super);
            function Brush() {
                _super.call(this);
                this._CachedBounds = null;
                this._CachedBrush = null;
                Fayde.XamlNode.SetShareable(this.XamlNode);
            }
            Brush.prototype.isTransparent = function () {
                return false;
            };
            Brush.prototype.setupBrush = function (ctx, bounds) {
                if (this._CachedBrush && this._CachedBounds && minerva.Rect.isEqual(this._CachedBounds, bounds))
                    return;
                this._CachedBounds = new minerva.Rect(bounds.x, bounds.y, bounds.width, bounds.height);
                var transform = this.Transform;
                if (transform) {
                    var transformedBounds = transform.TransformBounds(bounds);
                    var raw = transform.Value._Raw;
                    var tmpBrush = this.CreateBrush(ctx, bounds);
                    var fillExtents = new minerva.Rect();
                    minerva.Rect.copyTo(bounds, fillExtents);
                    minerva.Rect.grow(fillExtents, raw[4], raw[5], 0, 0);
                    var tmpCanvas = document.createElement("canvas");
                    tmpCanvas.width = Math.max(transformedBounds.width, bounds.width);
                    tmpCanvas.height = Math.max(transformedBounds.height, bounds.height);
                    var tmpCtx = tmpCanvas.getContext("2d");
                    tmpCtx.setTransform(raw[0], raw[1], raw[2], raw[3], raw[4], raw[5]);
                    tmpCtx.fillStyle = tmpBrush;
                    tmpCtx.fillRect(fillExtents.x, fillExtents.y, fillExtents.width, fillExtents.height);
                    this._CachedBrush = ctx.createPattern(tmpCanvas, "no-repeat");
                }
                else {
                    this._CachedBrush = this.CreateBrush(ctx, bounds);
                }
            };
            Brush.prototype.toHtml5Object = function () {
                return this._CachedBrush;
            };
            Brush.prototype.CreateBrush = function (ctx, bounds) {
                return undefined;
            };
            Brush.prototype.InvalidateBrush = function () {
                this._CachedBrush = null;
                this._CachedBounds = null;
                Fayde.Incite(this);
            };
            Brush.TransformProperty = DependencyProperty.RegisterCore("Transform", function () { return Media.Transform; }, Brush);
            return Brush;
        })(Fayde.DependencyObject);
        Media.Brush = Brush;
        Fayde.CoreLibrary.add(Brush);
        var reactions;
        (function (reactions) {
            Fayde.DPReaction(Brush.TransformProperty, function (brush, ov, nv) { return brush.InvalidateBrush(); });
        })(reactions || (reactions = {}));
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
/// <reference path="../Core/DependencyObject.ts" />
/// <reference path="../Core/XamlObjectCollection.ts" />
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        var Geometry = (function (_super) {
            __extends(Geometry, _super);
            function Geometry() {
                _super.call(this);
                this._Path = null;
                this._LocalBounds = new minerva.Rect();
                this._LocalBounds.width = Number.NEGATIVE_INFINITY;
                this._LocalBounds.height = Number.NEGATIVE_INFINITY;
            }
            Geometry.prototype.GetBounds = function (pars) {
                var compute = minerva.Rect.isEmpty(this._LocalBounds);
                if (!this._Path) {
                    this._Path = this._Build();
                    compute = true;
                }
                if (compute)
                    minerva.Rect.copyTo(this.ComputePathBounds(pars), this._LocalBounds);
                var bounds = new minerva.Rect();
                minerva.Rect.copyTo(this._LocalBounds, bounds);
                var transform = this.Transform;
                if (transform != null)
                    bounds = transform.TransformBounds(bounds);
                return bounds;
            };
            Geometry.prototype.Draw = function (ctx) {
                if (!this._Path)
                    return;
                var raw = ctx.raw;
                var transform = this.Transform;
                if (transform != null) {
                    raw.save();
                    ctx.apply(transform.Value._Raw);
                }
                this._Path.draw(raw);
                if (transform != null)
                    raw.restore();
            };
            Geometry.prototype.ComputePathBounds = function (pars) {
                if (!this._Path)
                    this._Path = this._Build();
                if (!this._Path)
                    return new minerva.Rect();
                return this._Path.calcBounds(pars);
            };
            Geometry.prototype.InvalidateGeometry = function () {
                this._Path = null;
                var lb = this._LocalBounds;
                lb.x = lb.y = 0;
                lb.width = lb.height = Number.NEGATIVE_INFINITY;
                Fayde.Incite(this);
            };
            Geometry.prototype._Build = function () {
                return undefined;
            };
            Geometry.prototype.Serialize = function () {
                var path = this._Path;
                if (!path)
                    return;
                return path.Serialize();
            };
            Geometry.TransformProperty = DependencyProperty.Register("Transform", function () { return Media.Transform; }, Geometry);
            return Geometry;
        })(Fayde.DependencyObject);
        Media.Geometry = Geometry;
        Fayde.CoreLibrary.add(Geometry);
        var reactions;
        (function (reactions) {
            Fayde.DPReaction(Geometry.TransformProperty, function (geom, ov, nv) { return geom.InvalidateGeometry(); });
        })(reactions || (reactions = {}));
        var GeometryCollection = (function (_super) {
            __extends(GeometryCollection, _super);
            function GeometryCollection() {
                _super.apply(this, arguments);
            }
            GeometryCollection.prototype.AddingToCollection = function (value, error) {
                var _this = this;
                if (!_super.prototype.AddingToCollection.call(this, value, error))
                    return false;
                Fayde.ReactTo(value, this, function () { return Fayde.Incite(_this); });
                Fayde.Incite(this);
                return true;
            };
            GeometryCollection.prototype.RemovedFromCollection = function (value, isValueSafe) {
                _super.prototype.RemovedFromCollection.call(this, value, isValueSafe);
                Fayde.UnreactTo(value, this);
                Fayde.Incite(this);
            };
            return GeometryCollection;
        })(Fayde.XamlObjectCollection);
        Media.GeometryCollection = GeometryCollection;
        Fayde.CoreLibrary.add(GeometryCollection);
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
/// <reference path="Geometry.ts" />
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        var EllipseGeometry = (function (_super) {
            __extends(EllipseGeometry, _super);
            function EllipseGeometry() {
                _super.apply(this, arguments);
            }
            EllipseGeometry.prototype._Build = function () {
                var rx = this.RadiusX;
                var ry = this.RadiusY;
                var center = this.Center;
                var x = center ? center.x : 0.0;
                var y = center ? center.y : 0.0;
                var p = new minerva.path.Path();
                p.ellipse(x - rx, y - ry, rx * 2.0, ry * 2.0);
                return p;
            };
            EllipseGeometry.CenterProperty = DependencyProperty.Register("Center", function () { return Point; }, EllipseGeometry, undefined, function (d, args) { return d.InvalidateGeometry(); });
            EllipseGeometry.RadiusXProperty = DependencyProperty.Register("RadiusX", function () { return Number; }, EllipseGeometry, 0.0, function (d, args) { return d.InvalidateGeometry(); });
            EllipseGeometry.RadiusYProperty = DependencyProperty.Register("RadiusY", function () { return Number; }, EllipseGeometry, 0.0, function (d, args) { return d.InvalidateGeometry(); });
            return EllipseGeometry;
        })(Media.Geometry);
        Media.EllipseGeometry = EllipseGeometry;
        Fayde.CoreLibrary.add(EllipseGeometry);
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
/// <reference path="../Core/DependencyObject.ts" />
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        var GeneralTransform = (function (_super) {
            __extends(GeneralTransform, _super);
            function GeneralTransform() {
                _super.apply(this, arguments);
            }
            GeneralTransform.prototype.Transform = function (p) {
                return new Point(p.x, p.y);
            };
            GeneralTransform.prototype.TransformBounds = function (r) {
                return r;
            };
            GeneralTransform.prototype.TryTransform = function (inPoint, outPoint) {
                return false;
            };
            return GeneralTransform;
        })(Fayde.DependencyObject);
        Media.GeneralTransform = GeneralTransform;
        Fayde.CoreLibrary.add(GeneralTransform);
        var InternalTransform = (function (_super) {
            __extends(InternalTransform, _super);
            function InternalTransform(raw) {
                _super.call(this);
                this._Raw = raw;
            }
            Object.defineProperty(InternalTransform.prototype, "Inverse", {
                get: function () {
                    return new InternalTransform(mat4.inverse(this._Raw, mat4.create()));
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(InternalTransform.prototype, "Value", {
                get: function () {
                    return Media.Matrix3D.FromRaw(this._Raw);
                },
                enumerable: true,
                configurable: true
            });
            InternalTransform.prototype.getRaw = function () {
                return this._Raw;
            };
            InternalTransform.prototype.Transform = function (p) {
                var pi = vec4.create(p.x, p.y, 0.0, 1.0);
                var po = vec4.create(0, 0, 0, 0);
                mat4.transformVec4(this._Raw, pi, po);
                if (po[3] !== 0.0) {
                    var w = 1.0 / po[3];
                    return new Point(po[0] * w, po[1] * w);
                }
                return new Point(NaN, NaN);
            };
            InternalTransform.prototype.TransformBounds = function (r) {
                if (!r)
                    return undefined;
                var copy = new minerva.Rect();
                minerva.Rect.copyTo(r, copy);
                minerva.Rect.transform4(copy, this._Raw);
                return copy;
            };
            InternalTransform.prototype.CreateMatrix3DProjection = function () {
                var projection = new Media.Matrix3DProjection();
                projection.ProjectionMatrix = this.Inverse.Value;
                return projection;
            };
            return InternalTransform;
        })(GeneralTransform);
        Media.InternalTransform = InternalTransform;
        Fayde.CoreLibrary.add(InternalTransform);
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Shapes;
    (function (Shapes) {
        (function (ShapeFlags) {
            ShapeFlags[ShapeFlags["None"] = 0] = "None";
            ShapeFlags[ShapeFlags["Empty"] = 1] = "Empty";
            ShapeFlags[ShapeFlags["Normal"] = 2] = "Normal";
            ShapeFlags[ShapeFlags["Degenerate"] = 4] = "Degenerate";
            ShapeFlags[ShapeFlags["Radii"] = 8] = "Radii";
        })(Shapes.ShapeFlags || (Shapes.ShapeFlags = {}));
        var ShapeFlags = Shapes.ShapeFlags;
        (function (PenLineCap) {
            PenLineCap[PenLineCap["Flat"] = 0] = "Flat";
            PenLineCap[PenLineCap["Square"] = 1] = "Square";
            PenLineCap[PenLineCap["Round"] = 2] = "Round";
            PenLineCap[PenLineCap["Triangle"] = 3] = "Triangle";
        })(Shapes.PenLineCap || (Shapes.PenLineCap = {}));
        var PenLineCap = Shapes.PenLineCap;
        Fayde.CoreLibrary.addEnum(PenLineCap, "PenLineCap");
        (function (PenLineJoin) {
            PenLineJoin[PenLineJoin["Miter"] = 0] = "Miter";
            PenLineJoin[PenLineJoin["Bevel"] = 1] = "Bevel";
            PenLineJoin[PenLineJoin["Round"] = 2] = "Round";
        })(Shapes.PenLineJoin || (Shapes.PenLineJoin = {}));
        var PenLineJoin = Shapes.PenLineJoin;
        Fayde.CoreLibrary.addEnum(PenLineJoin, "PenLineJoin");
        (function (FillRule) {
            FillRule[FillRule["EvenOdd"] = 0] = "EvenOdd";
            FillRule[FillRule["NonZero"] = 1] = "NonZero";
        })(Shapes.FillRule || (Shapes.FillRule = {}));
        var FillRule = Shapes.FillRule;
        Fayde.CoreLibrary.addEnum(FillRule, "FillRule");
        (function (SweepDirection) {
            SweepDirection[SweepDirection["Counterclockwise"] = 0] = "Counterclockwise";
            SweepDirection[SweepDirection["Clockwise"] = 1] = "Clockwise";
        })(Shapes.SweepDirection || (Shapes.SweepDirection = {}));
        var SweepDirection = Shapes.SweepDirection;
        Fayde.CoreLibrary.addEnum(SweepDirection, "SweepDirection");
    })(Shapes = Fayde.Shapes || (Fayde.Shapes = {}));
})(Fayde || (Fayde = {}));
/// <reference path="Geometry.ts" />
/// <reference path="../Shapes/Enums.ts" />
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        var GeometryGroup = (function (_super) {
            __extends(GeometryGroup, _super);
            function GeometryGroup() {
                var _this = this;
                _super.call(this);
                var coll = GeometryGroup.ChildrenProperty.Initialize(this);
                coll.AttachTo(this);
                Fayde.ReactTo(coll, this, function () { return _this.InvalidateGeometry(); });
            }
            GeometryGroup.prototype.ComputePathBounds = function (pars) {
                var bounds = new minerva.Rect();
                var cbounds;
                for (var enumerator = this.Children.getEnumerator(); enumerator.moveNext();) {
                    cbounds = enumerator.current.GetBounds(pars);
                    if (cbounds.width <= 0 && cbounds.height <= 0)
                        continue;
                    if (bounds.width <= 0 && bounds.height <= 0)
                        minerva.Rect.copyTo(cbounds, bounds);
                    else
                        minerva.Rect.union(bounds, cbounds);
                }
                return bounds;
            };
            GeometryGroup.prototype.Draw = function (ctx) {
                var transform = this.Transform;
                if (transform != null) {
                    ctx.save();
                    ctx.apply(transform.Value._Raw);
                }
                var enumerator = this.Children.getEnumerator();
                while (enumerator.moveNext()) {
                    enumerator.current.Draw(ctx);
                }
                if (transform != null)
                    ctx.restore();
            };
            GeometryGroup.FillRulleProperty = DependencyProperty.Register("FillRule", function () { return new Fayde.Enum(Fayde.Shapes.FillRule); }, GeometryGroup, Fayde.Shapes.FillRule.EvenOdd);
            GeometryGroup.ChildrenProperty = DependencyProperty.RegisterImmutable("Children", function () { return Media.GeometryCollection; }, GeometryGroup);
            return GeometryGroup;
        })(Media.Geometry);
        Media.GeometryGroup = GeometryGroup;
        Fayde.CoreLibrary.add(GeometryGroup);
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
/// <reference path="Brush.ts" />
/// <reference path="Enums.ts" />
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        var GradientBrush = (function (_super) {
            __extends(GradientBrush, _super);
            function GradientBrush() {
                var _this = this;
                _super.call(this);
                var coll = GradientBrush.GradientStopsProperty.Initialize(this);
                coll.AttachTo(this);
                Fayde.ReactTo(coll, this, function () { return _this.InvalidateBrush(); });
            }
            GradientBrush.prototype.CreateBrush = function (ctx, bounds) {
                var spread = this.SpreadMethod;
                switch (spread) {
                    case Media.GradientSpreadMethod.Pad:
                    default:
                        return this.CreatePad(ctx, bounds);
                    case Media.GradientSpreadMethod.Repeat:
                        return this.CreateRepeat(ctx, bounds);
                    case Media.GradientSpreadMethod.Reflect:
                        return this.CreateReflect(ctx, bounds);
                }
            };
            GradientBrush.prototype.CreatePad = function (ctx, bounds) { };
            GradientBrush.prototype.CreateRepeat = function (ctx, bounds) { };
            GradientBrush.prototype.CreateReflect = function (ctx, bounds) { };
            GradientBrush.GradientStopsProperty = DependencyProperty.RegisterImmutable("GradientStops", function () { return Media.GradientStopCollection; }, GradientBrush);
            GradientBrush.MappingModeProperty = DependencyProperty.Register("MappingMode", function () { return new Fayde.Enum(Media.BrushMappingMode); }, GradientBrush, Media.BrushMappingMode.RelativeToBoundingBox, function (d, args) { return d.InvalidateBrush(); });
            GradientBrush.SpreadMethodProperty = DependencyProperty.Register("SpreadMethod", function () { return new Fayde.Enum(Media.GradientSpreadMethod); }, GradientBrush, Media.GradientSpreadMethod.Pad, function (d, args) { return d.InvalidateBrush(); });
            return GradientBrush;
        })(Media.Brush);
        Media.GradientBrush = GradientBrush;
        Fayde.CoreLibrary.add(GradientBrush);
        Fayde.Markup.Content(GradientBrush, GradientBrush.GradientStopsProperty);
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
/// <reference path="../Core/DependencyObject.ts" />
/// <reference path="../Core/XamlObjectCollection.ts" />
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        var GradientStop = (function (_super) {
            __extends(GradientStop, _super);
            function GradientStop() {
                _super.apply(this, arguments);
            }
            GradientStop.prototype.toString = function () {
                return this.Color.toString() + " @ " + this.Offset.toString();
            };
            GradientStop.ColorProperty = DependencyProperty.Register("Color", function () { return Color; }, GradientStop, undefined, Fayde.Incite);
            GradientStop.OffsetProperty = DependencyProperty.Register("Offset", function () { return Number; }, GradientStop, 0.0, Fayde.Incite);
            return GradientStop;
        })(Fayde.DependencyObject);
        Media.GradientStop = GradientStop;
        Fayde.CoreLibrary.add(GradientStop);
        var GradientStopCollection = (function (_super) {
            __extends(GradientStopCollection, _super);
            function GradientStopCollection() {
                _super.apply(this, arguments);
            }
            GradientStopCollection.prototype.AddingToCollection = function (value, error) {
                var _this = this;
                if (!_super.prototype.AddingToCollection.call(this, value, error))
                    return false;
                Fayde.ReactTo(value, this, function () { return Fayde.Incite(_this); });
                Fayde.Incite(this);
                return true;
            };
            GradientStopCollection.prototype.RemovedFromCollection = function (value, isValueSafe) {
                if (!_super.prototype.RemovedFromCollection.call(this, value, isValueSafe))
                    return false;
                Fayde.UnreactTo(value, this);
                Fayde.Incite(this);
            };
            GradientStopCollection.prototype.getPaddedEnumerable = function () {
                var minOffset = Number.MAX_VALUE;
                var min = null;
                var maxOffset = Number.MIN_VALUE;
                var max = null;
                for (var en = this.getEnumerator(); en.moveNext();) {
                    if (en.current.Offset < minOffset) {
                        min = en.current;
                        minOffset = en.current.Offset;
                    }
                    if (en.current.Offset > maxOffset) {
                        max = en.current;
                        maxOffset = en.current.Offset;
                    }
                }
                var arr = this._ht.slice(0);
                if (!!min)
                    arr.unshift({ Offset: 0, Color: min.Color });
                if (!!max)
                    arr.push({ Offset: 1, Color: max.Color });
                return nullstone.IEnumerable_.fromArray(arr);
            };
            return GradientStopCollection;
        })(Fayde.XamlObjectCollection);
        Media.GradientStopCollection = GradientStopCollection;
        Fayde.CoreLibrary.add(GradientStopCollection);
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
/// <reference path="Geometry.ts" />
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        var LineGeometry = (function (_super) {
            __extends(LineGeometry, _super);
            function LineGeometry() {
                _super.apply(this, arguments);
            }
            LineGeometry.prototype._Build = function () {
                var p1 = this.StartPoint;
                var p2 = this.EndPoint;
                var p = new minerva.path.Path();
                p.move(p1.x, p1.y);
                p.line(p2.x, p2.y);
                return p;
            };
            LineGeometry.StartPointProperty = DependencyProperty.Register("StartPoint", function () { return Point; }, LineGeometry, undefined, function (d, args) { return d.InvalidateGeometry(); });
            LineGeometry.EndPointProperty = DependencyProperty.Register("EndPoint", function () { return Point; }, LineGeometry, undefined, function (d, args) { return d.InvalidateGeometry(); });
            return LineGeometry;
        })(Media.Geometry);
        Media.LineGeometry = LineGeometry;
        Fayde.CoreLibrary.add(LineGeometry);
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
/// <reference path="GradientBrush.ts" />
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        var LinearGradientBrush = (function (_super) {
            __extends(LinearGradientBrush, _super);
            function LinearGradientBrush() {
                _super.apply(this, arguments);
            }
            LinearGradientBrush.prototype.CreatePad = function (ctx, bounds) {
                var data = this._GetPointData(bounds);
                var grd = ctx.createLinearGradient(data.start.x, data.start.y, data.end.x, data.end.y);
                for (var en = this.GradientStops.getEnumerator(); en.moveNext();) {
                    var stop = en.current;
                    grd.addColorStop(stop.Offset, stop.Color.toString());
                }
                return grd;
            };
            LinearGradientBrush.prototype.CreateRepeat = function (ctx, bounds) {
                var data = this._GetPointData(bounds);
                return this.CreateInterpolated(ctx, Media.LinearGradient.createRepeatInterpolator(data.start, data.end, bounds));
            };
            LinearGradientBrush.prototype.CreateReflect = function (ctx, bounds) {
                var data = this._GetPointData(bounds);
                return this.CreateInterpolated(ctx, Media.LinearGradient.createReflectInterpolator(data.start, data.end, bounds));
            };
            LinearGradientBrush.prototype.CreateInterpolated = function (ctx, interpolator) {
                var grd = ctx.createLinearGradient(interpolator.x0, interpolator.y0, interpolator.x1, interpolator.y1);
                var allStops = this.GradientStops.getPaddedEnumerable();
                for (; interpolator.step();) {
                    for (var en = allStops.getEnumerator(); en.moveNext();) {
                        var stop = en.current;
                        var offset = interpolator.interpolate(stop.Offset);
                        if (offset >= 0 && offset <= 1)
                            grd.addColorStop(offset, stop.Color.toString());
                    }
                }
                return grd;
            };
            LinearGradientBrush.prototype._GetPointData = function (bounds) {
                var start = this.StartPoint;
                start = !start ? new Point(0.0, 0.0) : start.Clone();
                var end = this.EndPoint;
                end = !end ? new Point(1.0, 1.0) : end.Clone();
                if (this.MappingMode !== Media.BrushMappingMode.Absolute) {
                    start.x *= bounds.width;
                    start.y *= bounds.height;
                    end.x *= bounds.width;
                    end.y *= bounds.height;
                }
                start.x += bounds.x;
                start.y += bounds.y;
                end.x += bounds.x;
                end.y += bounds.y;
                return {
                    start: start,
                    end: end
                };
            };
            LinearGradientBrush.prototype.toString = function () {
                var ser = [];
                for (var en = this.GradientStops.getEnumerator(); en.moveNext();) {
                    ser.push(en.current.toString());
                }
                return "LinearGradientBrush(" + this.StartPoint.toString() + " --> " + this.EndPoint.toString() + " [" + ser.toString() + "])";
            };
            LinearGradientBrush.StartPointProperty = DependencyProperty.RegisterCore("StartPoint", function () { return Point; }, LinearGradientBrush, undefined, function (d, args) { return d.InvalidateBrush(); });
            LinearGradientBrush.EndPointProperty = DependencyProperty.RegisterCore("EndPoint", function () { return Point; }, LinearGradientBrush, undefined, function (d, args) { return d.InvalidateBrush(); });
            return LinearGradientBrush;
        })(Media.GradientBrush);
        Media.LinearGradientBrush = LinearGradientBrush;
        Fayde.CoreLibrary.add(LinearGradientBrush);
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        var Matrix = (function () {
            function Matrix(raw) {
                this._Inverse = null;
                this._Raw = raw || mat3.identity();
            }
            Object.defineProperty(Matrix, "Identity", {
                get: function () {
                    return new Matrix(mat3.identity());
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Matrix.prototype, "M11", {
                get: function () { return this._Raw[0]; },
                set: function (val) { this._Raw[0] = val; this._OnChanged(); },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Matrix.prototype, "M12", {
                get: function () { return this._Raw[1]; },
                set: function (val) { this._Raw[1] = val; this._OnChanged(); },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Matrix.prototype, "M21", {
                get: function () { return this._Raw[2]; },
                set: function (val) { this._Raw[2] = val; this._OnChanged(); },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Matrix.prototype, "M22", {
                get: function () { return this._Raw[3]; },
                set: function (val) { this._Raw[3] = val; this._OnChanged(); },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Matrix.prototype, "OffsetX", {
                get: function () { return this._Raw[4]; },
                set: function (val) { this._Raw[4] = val; this._OnChanged(); },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Matrix.prototype, "OffsetY", {
                get: function () { return this._Raw[5]; },
                set: function (val) { this._Raw[5] = val; this._OnChanged(); },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Matrix.prototype, "Inverse", {
                get: function () {
                    var inverse = this._Inverse;
                    if (!inverse) {
                        inverse = new Matrix();
                        inverse._Raw = mat3.inverse(this._Raw, mat3.identity());
                        if (!inverse._Raw)
                            return undefined;
                        this._Inverse = inverse;
                    }
                    return inverse;
                },
                enumerable: true,
                configurable: true
            });
            Matrix.prototype._OnChanged = function () {
                this._Inverse = null;
                Fayde.Incite(this);
            };
            Matrix.prototype.Clone = function () {
                if (!this._Raw)
                    return new Matrix();
                return new Matrix(mat3.create(this._Raw));
            };
            return Matrix;
        })();
        Media.Matrix = Matrix;
        Fayde.CoreLibrary.add(Matrix);
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        var Matrix3D = (function () {
            function Matrix3D() {
                this._Inverse = null;
                this._Listeners = [];
            }
            Matrix3D.FromRaw = function (raw) {
                var r = new Matrix3D();
                r._Raw = raw;
                return r;
            };
            Object.defineProperty(Matrix3D.prototype, "M11", {
                get: function () { return this._Raw[0]; },
                set: function (val) { this._Raw[0] = val; this._OnChanged(); },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Matrix3D.prototype, "M12", {
                get: function () { return this._Raw[1]; },
                set: function (val) { this._Raw[1] = val; this._OnChanged(); },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Matrix3D.prototype, "M13", {
                get: function () { return this._Raw[2]; },
                set: function (val) { this._Raw[2] = val; this._OnChanged(); },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Matrix3D.prototype, "M14", {
                get: function () { return this._Raw[3]; },
                set: function (val) { this._Raw[3] = val; this._OnChanged(); },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Matrix3D.prototype, "M21", {
                get: function () { return this._Raw[4]; },
                set: function (val) { this._Raw[4] = val; this._OnChanged(); },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Matrix3D.prototype, "M22", {
                get: function () { return this._Raw[5]; },
                set: function (val) { this._Raw[5] = val; this._OnChanged(); },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Matrix3D.prototype, "M23", {
                get: function () { return this._Raw[6]; },
                set: function (val) { this._Raw[6] = val; this._OnChanged(); },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Matrix3D.prototype, "M24", {
                get: function () { return this._Raw[7]; },
                set: function (val) { this._Raw[7] = val; this._OnChanged(); },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Matrix3D.prototype, "M31", {
                get: function () { return this._Raw[8]; },
                set: function (val) { this._Raw[8] = val; this._OnChanged(); },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Matrix3D.prototype, "M32", {
                get: function () { return this._Raw[9]; },
                set: function (val) { this._Raw[9] = val; this._OnChanged(); },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Matrix3D.prototype, "M33", {
                get: function () { return this._Raw[10]; },
                set: function (val) { this._Raw[10] = val; this._OnChanged(); },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Matrix3D.prototype, "M34", {
                get: function () { return this._Raw[11]; },
                set: function (val) { this._Raw[11] = val; this._OnChanged(); },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Matrix3D.prototype, "OffsetX", {
                get: function () { return this._Raw[12]; },
                set: function (val) { this._Raw[12] = val; this._OnChanged(); },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Matrix3D.prototype, "OffsetY", {
                get: function () { return this._Raw[13]; },
                set: function (val) { this._Raw[13] = val; this._OnChanged(); },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Matrix3D.prototype, "OffsetZ", {
                get: function () { return this._Raw[14]; },
                set: function (val) { this._Raw[14] = val; this._OnChanged(); },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Matrix3D.prototype, "M44", {
                get: function () { return this._Raw[15]; },
                set: function (val) { this._Raw[15] = val; this._OnChanged(); },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Matrix3D.prototype, "Inverse", {
                get: function () {
                    var inverse = this._Inverse;
                    if (!inverse) {
                        inverse = new Matrix3D();
                        inverse._Raw = mat4.inverse(this._Raw, mat4.identity());
                        if (!inverse._Raw)
                            return undefined;
                        this._Inverse = inverse;
                    }
                    return inverse;
                },
                enumerable: true,
                configurable: true
            });
            Matrix3D.prototype.Listen = function (func) {
                var listeners = this._Listeners;
                var listener = {
                    Callback: func,
                    Detach: function () {
                        var index = listeners.indexOf(listener);
                        if (index > -1)
                            listeners.splice(index, 1);
                    }
                };
                listeners.push(listener);
                return listener;
            };
            Matrix3D.prototype._OnChanged = function () {
                this._Inverse = null;
                var listeners = this._Listeners;
                var len = listeners.length;
                for (var i = 0; i < len; i++) {
                    listeners[i].Callback(this);
                }
            };
            return Matrix3D;
        })();
        Media.Matrix3D = Matrix3D;
        Fayde.CoreLibrary.add(Matrix3D);
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
/// <reference path="../Core/DependencyObject.ts" />
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        var Projection = (function (_super) {
            __extends(Projection, _super);
            function Projection() {
                _super.apply(this, arguments);
                this._ProjectionMatrix = null;
                this._ObjectWidth = 0;
                this._ObjectHeight = 0;
            }
            Object.defineProperty(Projection.prototype, "ObjectWidth", {
                get: function () {
                    return this._ObjectWidth;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Projection.prototype, "ObjectHeight", {
                get: function () {
                    return this._ObjectHeight;
                },
                enumerable: true,
                configurable: true
            });
            Projection.prototype.setObjectSize = function (objectWidth, objectHeight) {
                var w = Math.max(objectWidth, 1.0);
                var h = Math.max(objectHeight, 1.0);
                if (w !== this._ObjectWidth && h !== this._ObjectHeight) {
                    this._ObjectWidth = w;
                    this._ObjectHeight = h;
                    this._ProjectionMatrix = null;
                }
            };
            Projection.prototype.getDistanceFromXYPlane = function () {
                return NaN;
            };
            Projection.prototype.getTransform = function () {
                var m3 = this._ProjectionMatrix;
                if (!m3)
                    m3 = this._ProjectionMatrix = this.CreateProjectionMatrix();
                if (m3)
                    return mat4.create(m3._Raw);
                return mat4.identity();
            };
            Projection.prototype.CreateProjectionMatrix = function () {
                return null;
            };
            Projection.prototype.InvalidateProjection = function () {
                this._ProjectionMatrix = null;
                Fayde.Incite(this);
            };
            return Projection;
        })(Fayde.DependencyObject);
        Media.Projection = Projection;
        Fayde.CoreLibrary.add(Projection);
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
/// <reference path="Projection.ts" />
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        var Matrix3DProjection = (function (_super) {
            __extends(Matrix3DProjection, _super);
            function Matrix3DProjection() {
                _super.apply(this, arguments);
            }
            Matrix3DProjection.prototype.CreateProjectionMatrix = function () { return this.ProjectionMatrix; };
            Matrix3DProjection.ProjectionMatrixProperty = DependencyProperty.Register("ProjectionMatrix", function () { return Media.Matrix3D; }, Matrix3DProjection, undefined, function (d, args) { return d.InvalidateProjection(); });
            return Matrix3DProjection;
        })(Media.Projection);
        Media.Matrix3DProjection = Matrix3DProjection;
        Fayde.CoreLibrary.add(Matrix3DProjection);
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
/// <reference path="Geometry.ts" />
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        function ParseGeometry(val) {
            return (new MediaParser(val)).ParseGeometryImpl();
        }
        Media.ParseGeometry = ParseGeometry;
        function ParseShapePoints(val) {
            return (new MediaParser(val)).ParseShapePoints();
        }
        Media.ParseShapePoints = ParseShapePoints;
        var MediaParser = (function () {
            function MediaParser(str) {
                this.index = 0;
                this.str = str;
                this.len = str.length;
            }
            MediaParser.prototype.ParseGeometryImpl = function () {
                var cp = new Point();
                var cp1, cp2, cp3;
                var start = new Point();
                var fillRule = Fayde.Shapes.FillRule.EvenOdd;
                var cbz = false;
                var qbz = false;
                var cbzp = new Point();
                var qbzp = new Point();
                var path = new minerva.path.Path();
                while (this.index < this.len) {
                    var c;
                    while (this.index < this.len && (c = this.str.charAt(this.index)) === ' ') {
                        this.index++;
                    }
                    this.index++;
                    var relative = false;
                    switch (c) {
                        case 'f':
                        case 'F':
                            c = this.str.charAt(this.index);
                            if (c === '0')
                                fillRule = Fayde.Shapes.FillRule.EvenOdd;
                            else if (c === '1')
                                fillRule = Fayde.Shapes.FillRule.NonZero;
                            else
                                return null;
                            this.index++;
                            c = this.str.charAt(this.index);
                            break;
                        case 'm':
                            relative = true;
                        case 'M':
                            cp1 = this.ParsePoint();
                            if (cp1 == null)
                                break;
                            if (relative) {
                                cp1.x += cp.x;
                                cp1.y += cp.y;
                            }
                            path.move(cp1.x, cp1.y);
                            start.x = cp.x = cp1.x;
                            start.y = cp.y = cp1.y;
                            this.Advance();
                            while (this.MorePointsAvailable()) {
                                if ((cp1 = this.ParsePoint()) == null)
                                    break;
                                if (relative) {
                                    cp1.x += cp.x;
                                    cp1.y += cp.y;
                                }
                                path.line(cp1.x, cp1.y);
                            }
                            cp.x = cp1.x;
                            cp.y = cp1.y;
                            cbz = qbz = false;
                            break;
                        case 'l':
                            relative = true;
                        case 'L':
                            while (this.MorePointsAvailable()) {
                                if ((cp1 = this.ParsePoint()) == null)
                                    break;
                                if (relative) {
                                    cp1.x += cp.x;
                                    cp1.y += cp.y;
                                }
                                path.line(cp1.x, cp1.y);
                                cp.x = cp1.x;
                                cp.y = cp1.y;
                                this.Advance();
                            }
                            cbz = qbz = false;
                            break;
                        case 'h':
                            relative = true;
                        case 'H':
                            var x = this.ParseDouble();
                            if (x == null)
                                break;
                            if (relative)
                                x += cp.x;
                            cp = new Point(x, cp.y);
                            path.line(cp.x, cp.y);
                            cbz = qbz = false;
                            break;
                        case 'v':
                            relative = true;
                        case 'V':
                            var y = this.ParseDouble();
                            if (y == null)
                                break;
                            if (relative)
                                y += cp.y;
                            cp = new Point(cp.x, y);
                            path.line(cp.x, cp.y);
                            cbz = qbz = false;
                            break;
                        case 'c':
                            relative = true;
                        case 'C':
                            while (this.MorePointsAvailable()) {
                                if ((cp1 = this.ParsePoint()) == null)
                                    break;
                                if (relative) {
                                    cp1.x += cp.x;
                                    cp1.y += cp.y;
                                }
                                this.Advance();
                                if ((cp2 = this.ParsePoint()) == null)
                                    break;
                                if (relative) {
                                    cp2.x += cp.x;
                                    cp2.y += cp.y;
                                }
                                this.Advance();
                                if ((cp3 = this.ParsePoint()) == null)
                                    break;
                                if (relative) {
                                    cp3.x += cp.x;
                                    cp3.y += cp.y;
                                }
                                this.Advance();
                                path.cubicBezier(cp1.x, cp1.y, cp2.x, cp2.y, cp3.x, cp3.y);
                                cp1.x = cp3.x;
                                cp1.y = cp3.y;
                            }
                            cp.x = cp3.x;
                            cp.y = cp3.y;
                            cbz = true;
                            cbzp.x = cp2.x;
                            cbzp.y = cp2.y;
                            qbz = false;
                            break;
                        case 's':
                            relative = true;
                        case 'S':
                            while (this.MorePointsAvailable()) {
                                if ((cp2 = this.ParsePoint()) == null)
                                    break;
                                if (relative) {
                                    cp2.x += cp.x;
                                    cp2.y += cp.y;
                                }
                                this.Advance();
                                if ((cp3 = this.ParsePoint()) == null)
                                    break;
                                if (relative) {
                                    cp3.x += cp.x;
                                    cp3.y += cp.y;
                                }
                                if (cbz) {
                                    cp1.x = 2 * cp.x - cbzp.x;
                                    cp1.y = 2 * cp.y - cbzp.y;
                                }
                                else
                                    cp1 = cp;
                                path.cubicBezier(cp1.x, cp1.y, cp2.x, cp2.y, cp3.x, cp3.y);
                                cbz = true;
                                cbzp.x = cp2.x;
                                cbzp.y = cp2.y;
                                cp.x = cp3.x;
                                cp.y = cp3.y;
                                this.Advance();
                            }
                            qbz = false;
                            break;
                        case 'q':
                            relative = true;
                        case 'Q':
                            while (this.MorePointsAvailable()) {
                                if ((cp1 = this.ParsePoint()) == null)
                                    break;
                                if (relative) {
                                    cp1.x += cp.x;
                                    cp1.y += cp.y;
                                }
                                this.Advance();
                                if ((cp2 = this.ParsePoint()) == null)
                                    break;
                                if (relative) {
                                    cp2.x += cp.x;
                                    cp2.y += cp.y;
                                }
                                this.Advance();
                                path.quadraticBezier(cp1.x, cp1.y, cp2.x, cp2.y);
                                cp.x = cp2.x;
                                cp.y = cp2.y;
                            }
                            qbz = true;
                            qbzp.x = cp1.x;
                            qbzp.y = cp1.y;
                            cbz = false;
                            break;
                        case 't':
                            relative = true;
                        case 'T':
                            while (this.MorePointsAvailable()) {
                                if ((cp2 = this.ParsePoint()) == null)
                                    break;
                                if (relative) {
                                    cp2.x += cp.x;
                                    cp2.y += cp.y;
                                }
                                if (qbz) {
                                    cp1.x = 2 * cp.x - qbzp.x;
                                    cp1.y = 2 * cp.y - qbzp.y;
                                }
                                else
                                    cp1 = cp;
                                path.quadraticBezier(cp1.x, cp1.y, cp2.x, cp2.y);
                                qbz = true;
                                qbzp.x = cp1.x;
                                qbzp.y = cp1.y;
                                cp.x = cp2.x;
                                cp.y = cp2.y;
                                this.Advance();
                            }
                            cbz = false;
                            break;
                        case 'a':
                            relative = true;
                        case 'A':
                            while (this.MorePointsAvailable()) {
                                if ((cp1 = this.ParsePoint()) == null)
                                    break;
                                var angle = this.ParseDouble();
                                var is_large = this.ParseDouble() !== 0;
                                var sweep = minerva.SweepDirection.Counterclockwise;
                                if (this.ParseDouble() !== 0)
                                    sweep = minerva.SweepDirection.Clockwise;
                                if ((cp2 = this.ParsePoint()) == null)
                                    break;
                                if (relative) {
                                    cp2.x += cp.x;
                                    cp2.y += cp.y;
                                }
                                path.ellipticalArc(cp1.x, cp1.y, angle, is_large, sweep, cp2.x, cp2.y);
                                cp.x = cp2.x;
                                cp.y = cp2.y;
                                this.Advance();
                            }
                            cbz = qbz = false;
                            break;
                        case 'z':
                        case 'Z':
                            path.close();
                            cp.x = start.x;
                            cp.y = start.y;
                            cbz = qbz = false;
                            break;
                        default:
                            break;
                    }
                }
                var pg = new Media.PathGeometry();
                pg.OverridePath(path);
                pg.FillRule = fillRule;
                return pg;
            };
            MediaParser.prototype.ParseShapePoints = function () {
                var points = [];
                var p;
                while (this.MorePointsAvailable() && (p = this.ParsePoint()) != null) {
                    points.push(p);
                }
                return points;
            };
            MediaParser.prototype.ParsePoint = function () {
                var x = this.ParseDouble();
                if (x == null)
                    return null;
                var c;
                while (this.index < this.len && ((c = this.str.charAt(this.index)) === ' ' || c === ',')) {
                    this.index++;
                }
                if (this.index >= this.len)
                    return null;
                var y = this.ParseDouble();
                if (y == null)
                    return null;
                return new Point(x, y);
            };
            MediaParser.prototype.ParseDouble = function () {
                this.Advance();
                var isNegative = false;
                if (this.Match('-')) {
                    isNegative = true;
                    this.index++;
                }
                else if (this.Match('+')) {
                    this.index++;
                }
                if (this.Match('Infinity')) {
                    this.index += 8;
                    return isNegative ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY;
                }
                if (this.Match('NaN'))
                    return NaN;
                var temp = '';
                while (this.index < this.len) {
                    var code = this.str.charCodeAt(this.index);
                    var c = this.str[this.index];
                    if (code >= 48 && code <= 57)
                        temp += c;
                    else if (code === 46)
                        temp += c;
                    else if (c === 'E' || c === 'e') {
                        temp += c;
                        if (this.str[this.index + 1] === '-') {
                            temp += '-';
                            this.index++;
                        }
                    }
                    else
                        break;
                    this.index++;
                }
                if (temp.length === 0)
                    return null;
                var f = parseFloat(temp);
                return isNegative ? -f : f;
            };
            MediaParser.prototype.Match = function (matchStr) {
                var c1;
                var c2;
                for (var i = 0; i < matchStr.length && (this.index + i) < this.len; i++) {
                    c1 = matchStr.charAt(i);
                    c2 = this.str.charAt(this.index + i);
                    if (c1 !== c2)
                        return false;
                }
                return true;
            };
            MediaParser.prototype.Advance = function () {
                var code;
                var c;
                while (this.index < this.len) {
                    code = this.str.charCodeAt(this.index);
                    if ((code >= 65 && code <= 90) || (code >= 97 && code <= 122) || (code >= 48 && code <= 57))
                        break;
                    c = String.fromCharCode(code);
                    if (c === '.')
                        break;
                    if (c === '-')
                        break;
                    if (c === '+')
                        break;
                    this.index++;
                }
            };
            MediaParser.prototype.MorePointsAvailable = function () {
                var c;
                while (this.index < this.len && ((c = this.str.charAt(this.index)) === ',' || c === ' ')) {
                    this.index++;
                }
                if (this.index >= this.len)
                    return false;
                if (c === '.' || c === '-' || c === '+')
                    return true;
                var code = this.str.charCodeAt(this.index);
                return code >= 48 && code <= 57;
            };
            return MediaParser;
        })();
        nullstone.registerTypeConverter(Media.Geometry, function (val) {
            if (val instanceof Media.Geometry)
                return val;
            if (typeof val === "string")
                return ParseGeometry(val);
            return val;
        });
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
/// <reference path="../Core/DependencyObject.ts" />
/// <reference path="../Core/XamlObjectCollection.ts" />
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        var PathFigure = (function (_super) {
            __extends(PathFigure, _super);
            function PathFigure() {
                var _this = this;
                _super.call(this);
                this._Path = null;
                var coll = PathFigure.SegmentsProperty.Initialize(this);
                coll.AttachTo(this);
                Fayde.ReactTo(coll, this, function () { return _this.InvalidatePathFigure(); });
            }
            PathFigure.prototype._OnSegmentsSourceChanged = function (args) {
                this.Segments.SetSource(args.NewValue);
            };
            PathFigure.prototype._Build = function () {
                var p = new minerva.path.Path();
                var start = this.StartPoint;
                p.move(start.x, start.y);
                var enumerator = this.Segments.getEnumerator();
                while (enumerator.moveNext()) {
                    enumerator.current._Append(p);
                }
                if (this.IsClosed)
                    p.close();
                return p;
            };
            PathFigure.prototype.InvalidatePathFigure = function () {
                this._Path = null;
                Fayde.Incite(this);
            };
            PathFigure.prototype.MergeInto = function (rp) {
                if (!this._Path)
                    this._Path = this._Build();
                minerva.path.Path.Merge(rp, this._Path);
            };
            PathFigure.IsClosedProperty = DependencyProperty.RegisterCore("IsClosed", function () { return Boolean; }, PathFigure, false, function (d, args) { return d.InvalidatePathFigure(); });
            PathFigure.StartPointProperty = DependencyProperty.RegisterCore("StartPoint", function () { return Point; }, PathFigure, undefined, function (d, args) { return d.InvalidatePathFigure(); });
            PathFigure.IsFilledProperty = DependencyProperty.RegisterCore("IsFilled", function () { return Boolean; }, PathFigure, true, function (d, args) { return d.InvalidatePathFigure(); });
            PathFigure.SegmentsProperty = DependencyProperty.RegisterImmutable("Segments", function () { return Media.PathSegmentCollection; }, PathFigure);
            PathFigure.SegmentsSourceProperty = DependencyProperty.Register("SegmentsSource", function () { return nullstone.IEnumerable_; }, PathFigure, undefined, function (d, args) { return d._OnSegmentsSourceChanged(args); });
            return PathFigure;
        })(Fayde.DependencyObject);
        Media.PathFigure = PathFigure;
        Fayde.CoreLibrary.add(PathFigure);
        Fayde.Markup.Content(PathFigure, PathFigure.SegmentsProperty);
        var PathFigureCollection = (function (_super) {
            __extends(PathFigureCollection, _super);
            function PathFigureCollection() {
                _super.apply(this, arguments);
            }
            PathFigureCollection.prototype.AddingToCollection = function (value, error) {
                var _this = this;
                if (!_super.prototype.AddingToCollection.call(this, value, error))
                    return false;
                Fayde.ReactTo(value, this, function () { return Fayde.Incite(_this); });
                Fayde.Incite(this);
                return true;
            };
            PathFigureCollection.prototype.RemovedFromCollection = function (value, isValueSafe) {
                _super.prototype.RemovedFromCollection.call(this, value, isValueSafe);
                Fayde.UnreactTo(value, this);
                Fayde.Incite(this);
            };
            return PathFigureCollection;
        })(Fayde.XamlObjectCollection);
        Media.PathFigureCollection = PathFigureCollection;
        Fayde.CoreLibrary.add(PathFigureCollection);
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
/// <reference path="Geometry.ts" />
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        var PathGeometry = (function (_super) {
            __extends(PathGeometry, _super);
            function PathGeometry() {
                var _this = this;
                _super.call(this);
                this._OverridePath = null;
                var coll = PathGeometry.FiguresProperty.Initialize(this);
                coll.AttachTo(this);
                Fayde.ReactTo(coll, this, function () { return _this.InvalidateFigures(); });
            }
            Object.defineProperty(PathGeometry.prototype, "fillRule", {
                get: function () {
                    return this.FillRule;
                },
                enumerable: true,
                configurable: true
            });
            PathGeometry.prototype.OverridePath = function (path) {
                this._OverridePath = path;
            };
            PathGeometry.prototype._Build = function () {
                if (this._OverridePath)
                    return this._OverridePath;
                var p = new minerva.path.Path();
                var figures = this.Figures;
                if (!figures)
                    return;
                var enumerator = figures.getEnumerator();
                while (enumerator.moveNext()) {
                    enumerator.current.MergeInto(p);
                }
                return p;
            };
            PathGeometry.prototype.InvalidateFigures = function () {
                this._OverridePath = null;
                this.InvalidateGeometry();
            };
            PathGeometry.FillRuleProperty = DependencyProperty.Register("FillRule", function () { return new Fayde.Enum(Fayde.Shapes.FillRule); }, PathGeometry, Fayde.Shapes.FillRule.EvenOdd, function (d, args) { return d.InvalidateGeometry(); });
            PathGeometry.FiguresProperty = DependencyProperty.RegisterImmutable("Figures", function () { return Media.PathFigureCollection; }, PathGeometry);
            return PathGeometry;
        })(Media.Geometry);
        Media.PathGeometry = PathGeometry;
        Fayde.CoreLibrary.add(PathGeometry);
        Fayde.Markup.Content(PathGeometry, PathGeometry.FiguresProperty);
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
/// <reference path="../Core/DependencyObject.ts" />
/// <reference path="../Core/XamlObjectCollection.ts" />
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        var PathSegment = (function (_super) {
            __extends(PathSegment, _super);
            function PathSegment() {
                _super.apply(this, arguments);
            }
            PathSegment.prototype._Append = function (path) {
            };
            return PathSegment;
        })(Fayde.DependencyObject);
        Media.PathSegment = PathSegment;
        Fayde.CoreLibrary.add(PathSegment);
        var PathSegmentCollection = (function (_super) {
            __extends(PathSegmentCollection, _super);
            function PathSegmentCollection() {
                _super.apply(this, arguments);
                this._Modifying = false;
                this._Source = null;
            }
            PathSegmentCollection.prototype.AddingToCollection = function (value, error) {
                var _this = this;
                if (!this._Modifying && this._Source != null) {
                    console.warn("Cannot modify Path Segments Collection when bound to SegmentsSource.");
                    return false;
                }
                if (!_super.prototype.AddingToCollection.call(this, value, error))
                    return false;
                Fayde.ReactTo(value, this, function () { return Fayde.Incite(_this); });
                Fayde.Incite(this);
                return true;
            };
            PathSegmentCollection.prototype.RemovedFromCollection = function (value, isValueSafe) {
                _super.prototype.RemovedFromCollection.call(this, value, isValueSafe);
                Fayde.UnreactTo(value, this);
                Fayde.Incite(this);
            };
            PathSegmentCollection.prototype.SetSource = function (source) {
                var onc = Fayde.Collections.INotifyCollectionChanged_.as(this._Source);
                if (onc)
                    onc.CollectionChanged.off(this._OnSegmentsCollectionChanged, this);
                var oen = nullstone.IEnumerable_.as(this._Source);
                if (oen) {
                    this.Clear();
                }
                this._Source = source;
                var nen = nullstone.IEnumerable_.as(this._Source);
                if (nen) {
                    this._Modifying = true;
                    try {
                        for (var en = nen.getEnumerator(); en.moveNext();) {
                            this.Add(en.current);
                        }
                    }
                    finally {
                        this._Modifying = false;
                    }
                }
                var nnc = Fayde.Collections.INotifyCollectionChanged_.as(this._Source);
                if (nnc)
                    nnc.CollectionChanged.on(this._OnSegmentsCollectionChanged, this);
            };
            PathSegmentCollection.prototype._OnSegmentsCollectionChanged = function (sender, args) {
                this._Modifying = true;
                try {
                    for (var i = 0, items = args.OldItems, len = items ? items.length : 0; i < len; i++) {
                        this.RemoveAt(i);
                    }
                    for (var i = 0, items = args.NewItems, len = items ? items.length : 0; i < len; i++) {
                        this.Insert(args.NewStartingIndex + i, items[i]);
                    }
                }
                finally {
                    this._Modifying = false;
                }
            };
            return PathSegmentCollection;
        })(Fayde.XamlObjectCollection);
        Media.PathSegmentCollection = PathSegmentCollection;
        Fayde.CoreLibrary.add(PathSegmentCollection);
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
/// <reference path="PathSegment.ts" />
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        var ArcSegment = (function (_super) {
            __extends(ArcSegment, _super);
            function ArcSegment() {
                _super.apply(this, arguments);
            }
            ArcSegment.prototype._Append = function (path) {
                var size = this.Size;
                var width = size ? size.width : 0.0;
                var height = size ? size.height : 0.0;
                var endpt = this.Point;
                var ex = endpt ? endpt.x : 0.0;
                var ey = endpt ? endpt.y : 0.0;
                path.ellipticalArc(width, height, this.RotationAngle, this.IsLargeArc, this.SweepDirection, ex, ey);
            };
            ArcSegment.IsLargeArcProperty = DependencyProperty.RegisterCore("IsLargeArc", function () { return Boolean; }, ArcSegment, false, function (d, args) { return Fayde.Incite(d); });
            ArcSegment.PointProperty = DependencyProperty.Register("Point", function () { return Point; }, ArcSegment, undefined, function (d, args) { return Fayde.Incite(d); });
            ArcSegment.RotationAngleProperty = DependencyProperty.Register("RotationAngle", function () { return Number; }, ArcSegment, 0.0, function (d, args) { return Fayde.Incite(d); });
            ArcSegment.SizeProperty = DependencyProperty.Register("Size", function () { return minerva.Size; }, ArcSegment, undefined, function (d, args) { return Fayde.Incite(d); });
            ArcSegment.SweepDirectionProperty = DependencyProperty.Register("SweepDirection", function () { return new Fayde.Enum(Fayde.Shapes.SweepDirection); }, ArcSegment, Fayde.Shapes.SweepDirection.Counterclockwise, function (d, args) { return Fayde.Incite(d); });
            return ArcSegment;
        })(Media.PathSegment);
        Media.ArcSegment = ArcSegment;
        Fayde.CoreLibrary.add(ArcSegment);
        var BezierSegment = (function (_super) {
            __extends(BezierSegment, _super);
            function BezierSegment() {
                _super.apply(this, arguments);
            }
            BezierSegment.prototype._Append = function (path) {
                var p1 = this.Point1;
                var p2 = this.Point2;
                var p3 = this.Point3;
                var x1 = p1 ? p1.x : 0.0;
                var y1 = p1 ? p1.y : 0.0;
                var x2 = p2 ? p2.x : 0.0;
                var y2 = p2 ? p2.y : 0.0;
                var x3 = p3 ? p3.x : 0.0;
                var y3 = p3 ? p3.y : 0.0;
                path.cubicBezier(x1, y1, x2, y2, x3, y3);
            };
            BezierSegment.Point1Property = DependencyProperty.Register("Point1", function () { return Point; }, BezierSegment);
            BezierSegment.Point2Property = DependencyProperty.Register("Point2", function () { return Point; }, BezierSegment);
            BezierSegment.Point3Property = DependencyProperty.Register("Point3", function () { return Point; }, BezierSegment);
            return BezierSegment;
        })(Media.PathSegment);
        Media.BezierSegment = BezierSegment;
        Fayde.CoreLibrary.add(BezierSegment);
        var LineSegment = (function (_super) {
            __extends(LineSegment, _super);
            function LineSegment() {
                _super.apply(this, arguments);
            }
            LineSegment.prototype._Append = function (path) {
                var p = this.Point;
                var x = p ? p.x : 0.0;
                var y = p ? p.y : 0.0;
                path.line(x, y);
            };
            LineSegment.PointProperty = DependencyProperty.Register("Point", function () { return Point; }, LineSegment);
            return LineSegment;
        })(Media.PathSegment);
        Media.LineSegment = LineSegment;
        Fayde.CoreLibrary.add(LineSegment);
        var PolyBezierSegment = (function (_super) {
            __extends(PolyBezierSegment, _super);
            function PolyBezierSegment() {
                _super.call(this);
                PolyBezierSegment.PointsProperty.Initialize(this);
            }
            PolyBezierSegment.prototype._Append = function (path) {
                var points = this.Points;
                if (!points || (points.Count % 3) !== 0)
                    return;
                var p1;
                var p2;
                var p3;
                var enumerator = points.getEnumerator();
                while (enumerator.moveNext()) {
                    p1 = enumerator.current;
                    enumerator.moveNext();
                    p2 = enumerator.current;
                    enumerator.moveNext();
                    p3 = enumerator.current;
                    path.cubicBezier(p1.x, p1.y, p2.x, p2.y, p3.x, p3.y);
                }
            };
            PolyBezierSegment.PointsProperty = DependencyProperty.RegisterImmutable("Points", function () { return Fayde.Shapes.PointCollection; }, PolyBezierSegment);
            return PolyBezierSegment;
        })(Media.PathSegment);
        Media.PolyBezierSegment = PolyBezierSegment;
        Fayde.CoreLibrary.add(PolyBezierSegment);
        Fayde.Markup.Content(PolyBezierSegment, PolyBezierSegment.PointsProperty);
        var PolyLineSegment = (function (_super) {
            __extends(PolyLineSegment, _super);
            function PolyLineSegment() {
                _super.call(this);
                PolyLineSegment.PointsProperty.Initialize(this);
            }
            PolyLineSegment.prototype._Append = function (path) {
                var p;
                var enumerator = this.Points.getEnumerator();
                while (enumerator.moveNext()) {
                    p = enumerator.current;
                    path.line(p.x, p.y);
                }
                console.warn("PolyLineSegment._Append");
            };
            PolyLineSegment.PointsProperty = DependencyProperty.RegisterImmutable("Points", function () { return Fayde.Shapes.PointCollection; }, PolyLineSegment);
            return PolyLineSegment;
        })(Media.PathSegment);
        Media.PolyLineSegment = PolyLineSegment;
        Fayde.CoreLibrary.add(PolyLineSegment);
        Fayde.Markup.Content(PolyLineSegment, PolyLineSegment.PointsProperty);
        var PolyQuadraticBezierSegment = (function (_super) {
            __extends(PolyQuadraticBezierSegment, _super);
            function PolyQuadraticBezierSegment() {
                _super.call(this);
                PolyQuadraticBezierSegment.PointsProperty.Initialize(this);
            }
            PolyQuadraticBezierSegment.prototype._Append = function (path) {
                var points = this.Points;
                if (!points || (points.Count % 2) !== 0)
                    return;
                var x0 = path.endX;
                var y0 = path.endY;
                var x1;
                var y1;
                var x2;
                var y2;
                var x3;
                var y3;
                var enumerator = points.getEnumerator();
                while (enumerator.moveNext()) {
                    x1 = enumerator.current.x;
                    y1 = enumerator.current.y;
                    enumerator.moveNext();
                    x2 = enumerator.current.x;
                    y2 = enumerator.current.y;
                    x3 = x2;
                    y3 = y2;
                    x2 = x1 + (x2 - x1) / 3;
                    y2 = y1 + (y2 - y1) / 3;
                    x1 = x0 + 2 * (x1 - x0) / 3;
                    y1 = y0 + 2 * (y1 - y0) / 3;
                    path.cubicBezier(x1, y1, x2, y2, x3, y3);
                    x0 = x3;
                    y0 = y3;
                }
            };
            PolyQuadraticBezierSegment.PointsProperty = DependencyProperty.RegisterImmutable("Points", function () { return Fayde.Shapes.PointCollection; }, PolyQuadraticBezierSegment);
            return PolyQuadraticBezierSegment;
        })(Media.PathSegment);
        Media.PolyQuadraticBezierSegment = PolyQuadraticBezierSegment;
        Fayde.CoreLibrary.add(PolyQuadraticBezierSegment);
        Fayde.Markup.Content(PolyQuadraticBezierSegment, PolyQuadraticBezierSegment.PointsProperty);
        var QuadraticBezierSegment = (function (_super) {
            __extends(QuadraticBezierSegment, _super);
            function QuadraticBezierSegment() {
                _super.apply(this, arguments);
            }
            QuadraticBezierSegment.prototype._Append = function (path) {
                var p1 = this.Point1;
                var p2 = this.Point2;
                var x1 = p1 ? p1.x : 0.0;
                var y1 = p1 ? p1.y : 0.0;
                var x2 = p2 ? p2.x : 0.0;
                var y2 = p2 ? p2.y : 0.0;
                path.quadraticBezier(x1, y1, x2, y2);
            };
            QuadraticBezierSegment.Point1Property = DependencyProperty.Register("Point1", function () { return Point; }, QuadraticBezierSegment);
            QuadraticBezierSegment.Point2Property = DependencyProperty.Register("Point2", function () { return Point; }, QuadraticBezierSegment);
            return QuadraticBezierSegment;
        })(Media.PathSegment);
        Media.QuadraticBezierSegment = QuadraticBezierSegment;
        Fayde.CoreLibrary.add(QuadraticBezierSegment);
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
/// <reference path="Projection.ts" />
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        var FIELD_OF_VIEW = 57.0 / 180 * Math.PI;
        var CAMERA_DIST = 999.0;
        var NEAR_VAL = 1.0;
        var FAR_VAL = 65536.0;
        var XY_PLANE_Z = (NEAR_VAL * FAR_VAL / (NEAR_VAL - FAR_VAL) * (1.0 - CAMERA_DIST)) / CAMERA_DIST;
        var PI_OVER_180 = Math.PI / 180.0;
        var PlaneProjection = (function (_super) {
            __extends(PlaneProjection, _super);
            function PlaneProjection() {
                _super.apply(this, arguments);
            }
            PlaneProjection.prototype.getDistanceFromXYPlane = function () {
                var w = Math.max(this.ObjectWidth, 1.0);
                var h = Math.max(this.ObjectHeight, 1.0);
                var p = [w / 2.0, h / 2.0, 0.0, 1.0];
                var m = this.getTransform();
                mat4.transformVec4(m, p, p);
                if (p[3] === 0.0)
                    return NaN;
                return XY_PLANE_Z - (p[2] / p[3]);
            };
            PlaneProjection.prototype.CreateProjectionMatrix3D = function () {
                var rotationX = this.RotationX;
                var rotationY = this.RotationY;
                var rotationZ = this.RotationZ;
                var radiansX = (rotationX || 0.0) * PI_OVER_180;
                var radiansY = (rotationY || 0.0) * PI_OVER_180;
                var radiansZ = (rotationZ || 0.0) * PI_OVER_180;
                var globalOffsetX = this.GlobalOffsetX;
                var globalOffsetY = this.GlobalOffsetY;
                var globalOffsetZ = this.GlobalOffsetZ;
                var globalX = globalOffsetX || 0.0;
                var globalY = globalOffsetY || 0.0;
                var globalZ = globalOffsetZ || 0.0;
                var localOffsetX = this.LocalOffsetX;
                var localOffsetY = this.LocalOffsetY;
                var localOffsetZ = this.LocalOffsetZ;
                var localX = localOffsetX || 0.0;
                var localY = localOffsetY || 0.0;
                var localZ = localOffsetZ || 0.0;
                var ow = this.ObjectWidth;
                var oh = this.ObjectHeight;
                var height = 2.0 * CAMERA_DIST * Math.tan(FIELD_OF_VIEW / 2.0);
                var scale = height / oh;
                var toCenter = mat4.createTranslate(-ow * this.CenterOfRotationX, -oh * this.CenterOfRotationY, -this.CenterOfRotationZ);
                var invertY = mat4.createScale(1.0, -1.0, 1.0);
                var localOffset = mat4.createTranslate(localX, -localY, localZ);
                var rotateX = mat4.createRotateX(radiansX);
                var rotateY = mat4.createRotateX(radiansY);
                var rotateZ = mat4.createRotateX(radiansZ);
                var toCamera = mat4.createTranslate(ow * (this.CenterOfRotationX - 0.5) + globalX, -oh * (this.CenterOfRotationY - 0.5) - globalY, this.CenterOfRotationZ - CAMERA_DIST + globalZ);
                var perspective = mat4.createPerspective(FIELD_OF_VIEW, ow / oh, NEAR_VAL, FAR_VAL);
                var zoom = mat4.createScale(scale, scale, 1.0);
                var viewport = mat4.createViewport(ow, oh);
                var m = mat4.multiply(toCenter, invertY);
                mat4.multiply(m, localOffset, m);
                mat4.multiply(m, rotateX, m);
                mat4.multiply(m, rotateY, m);
                mat4.multiply(m, rotateZ, m);
                mat4.multiply(m, toCamera, m);
                mat4.multiply(m, perspective, m);
                mat4.multiply(m, zoom, m);
                mat4.multiply(m, viewport, m);
                var r = new Media.Matrix3D();
                r._Raw = m;
                return r;
            };
            PlaneProjection.CenterOfRotationXProperty = DependencyProperty.Register("CenterOfRotationX", function () { return Number; }, PlaneProjection, 0.5, function (d, args) { return d.InvalidateProjection(); });
            PlaneProjection.CenterOfRotationYProperty = DependencyProperty.Register("CenterOfRotationY", function () { return Number; }, PlaneProjection, 0.5, function (d, args) { return d.InvalidateProjection(); });
            PlaneProjection.CenterOfRotationZProperty = DependencyProperty.Register("CenterOfRotationZ", function () { return Number; }, PlaneProjection, 0.5, function (d, args) { return d.InvalidateProjection(); });
            PlaneProjection.GlobalOffsetXProperty = DependencyProperty.Register("GlobalOffsetX", function () { return Number; }, PlaneProjection, 0.0, function (d, args) { return d.InvalidateProjection(); });
            PlaneProjection.GlobalOffsetYProperty = DependencyProperty.Register("GlobalOffsetY", function () { return Number; }, PlaneProjection, 0.0, function (d, args) { return d.InvalidateProjection(); });
            PlaneProjection.GlobalOffsetZProperty = DependencyProperty.Register("GlobalOffsetZ", function () { return Number; }, PlaneProjection, 0.0, function (d, args) { return d.InvalidateProjection(); });
            PlaneProjection.LocalOffsetXProperty = DependencyProperty.Register("LocalOffsetX", function () { return Number; }, PlaneProjection, 0.0, function (d, args) { return d.InvalidateProjection(); });
            PlaneProjection.LocalOffsetYProperty = DependencyProperty.Register("LocalOffsetY", function () { return Number; }, PlaneProjection, 0.0, function (d, args) { return d.InvalidateProjection(); });
            PlaneProjection.LocalOffsetZProperty = DependencyProperty.Register("LocalOffsetZ", function () { return Number; }, PlaneProjection, 0.0, function (d, args) { return d.InvalidateProjection(); });
            PlaneProjection.RotationXProperty = DependencyProperty.Register("RotationX", function () { return Number; }, PlaneProjection, 0.0, function (d, args) { return d.InvalidateProjection(); });
            PlaneProjection.RotationYProperty = DependencyProperty.Register("RotationY", function () { return Number; }, PlaneProjection, 0.0, function (d, args) { return d.InvalidateProjection(); });
            PlaneProjection.RotationZProperty = DependencyProperty.Register("RotationZ", function () { return Number; }, PlaneProjection, 0.0, function (d, args) { return d.InvalidateProjection(); });
            return PlaneProjection;
        })(Media.Projection);
        Media.PlaneProjection = PlaneProjection;
        Fayde.CoreLibrary.add(PlaneProjection);
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
/// <reference path="GradientBrush.ts" />
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        var tmpCanvas = document.createElement('canvas');
        var tmpCtx = tmpCanvas.getContext('2d');
        var epsilon = 1E-10;
        var RadialGradientBrush = (function (_super) {
            __extends(RadialGradientBrush, _super);
            function RadialGradientBrush() {
                _super.apply(this, arguments);
            }
            RadialGradientBrush.prototype.CreatePad = function (ctx, bounds) {
                var data = this._GetPointData(bounds);
                var grd = (!data.balanced ? tmpCtx : ctx).createRadialGradient(data.x0, data.y0, 0, data.x1, data.y1, data.r1);
                for (var en = this.GradientStops.getEnumerator(); en.moveNext();) {
                    var stop = en.current;
                    grd.addColorStop(stop.Offset, stop.Color.toString());
                }
                return this.FitPattern(ctx, grd, data, bounds);
            };
            RadialGradientBrush.prototype.CreateRepeat = function (ctx, bounds) {
                var data = this._GetPointData(bounds);
                return this.CreateInterpolated(data, bounds, false);
            };
            RadialGradientBrush.prototype.CreateReflect = function (ctx, bounds) {
                var data = this._GetPointData(bounds);
                return this.CreateInterpolated(data, bounds, true);
            };
            RadialGradientBrush.prototype.CreateInterpolated = function (data, bounds, reflect) {
                tmpCanvas.width = bounds.width;
                tmpCanvas.height = bounds.height;
                tmpCtx.save();
                if (!data.balanced)
                    tmpCtx.scale(data.sx, data.sy);
                tmpCtx.globalCompositeOperation = "destination-over";
                var inverted = false;
                var allStops = this.GradientStops.getPaddedEnumerable();
                for (var extender = Media.RadialGradient.createExtender(data, bounds); extender.step(); inverted = !inverted) {
                    var grd = extender.createGradient(tmpCtx);
                    for (var en = allStops.getEnumerator(); en.moveNext();) {
                        var offset = en.current.Offset;
                        if (reflect && inverted)
                            offset = 1 - offset;
                        grd.addColorStop(offset, en.current.Color.toString());
                    }
                    tmpCtx.fillStyle = grd;
                    tmpCtx.beginPath();
                    tmpCtx.arc(extender.x1, extender.y1, extender.r1, 0, 2 * Math.PI, false);
                    tmpCtx.closePath();
                    tmpCtx.fill();
                }
                var pattern = tmpCtx.createPattern(tmpCanvas, "no-repeat");
                tmpCtx.restore();
                return pattern;
            };
            RadialGradientBrush.prototype.FitPattern = function (ctx, fill, data, bounds) {
                if (data.balanced)
                    return fill;
                tmpCanvas.width = bounds.width;
                tmpCanvas.height = bounds.height;
                tmpCtx.save();
                tmpCtx.scale(data.sx, data.sy);
                tmpCtx.fillStyle = fill;
                tmpCtx.fillRect(0, 0, data.side, data.side);
                var pattern = ctx.createPattern(tmpCanvas, "no-repeat");
                tmpCtx.restore();
                return pattern;
            };
            RadialGradientBrush.prototype._GetPointData = function (bounds) {
                var center = this.Center;
                center = !center ? new Point(0.5, 0.5) : center.Clone();
                var origin = this.GradientOrigin;
                origin = !origin ? new Point(0.5, 0.5) : origin.Clone();
                var rx = this.RadiusX;
                if (rx == null)
                    rx = 0.5;
                var ry = this.RadiusY;
                if (ry == null)
                    ry = 0.5;
                if (this.MappingMode !== Media.BrushMappingMode.Absolute) {
                    center.x *= bounds.width;
                    center.y *= bounds.height;
                    origin.x *= bounds.width;
                    origin.y *= bounds.height;
                    rx *= bounds.width;
                    ry *= bounds.height;
                }
                center.x += bounds.x;
                center.y += bounds.y;
                origin.x += bounds.x;
                origin.y += bounds.y;
                var rad = Math.max(rx, ry);
                var side = Math.max(bounds.width, bounds.height), sx = bounds.width / side, sy = bounds.height / side;
                return {
                    x0: origin.x / sx,
                    y0: origin.y / sy,
                    x1: center.x / sx,
                    y1: center.y / sy,
                    r1: rad,
                    side: side,
                    sx: bounds.width / side,
                    sy: bounds.height / side,
                    balanced: Math.abs(rx - ry) < epsilon
                };
            };
            RadialGradientBrush.CenterProperty = DependencyProperty.RegisterCore("Center", function () { return Point; }, RadialGradientBrush, undefined, function (d, args) { return d.InvalidateBrush(); });
            RadialGradientBrush.GradientOriginProperty = DependencyProperty.RegisterCore("GradientOrigin", function () { return Point; }, RadialGradientBrush, undefined, function (d, args) { return d.InvalidateBrush(); });
            RadialGradientBrush.RadiusXProperty = DependencyProperty.RegisterCore("RadiusX", function () { return Number; }, RadialGradientBrush, 0.5, function (d, args) { return d.InvalidateBrush(); });
            RadialGradientBrush.RadiusYProperty = DependencyProperty.RegisterCore("RadiusY", function () { return Number; }, RadialGradientBrush, 0.5, function (d, args) { return d.InvalidateBrush(); });
            return RadialGradientBrush;
        })(Media.GradientBrush);
        Media.RadialGradientBrush = RadialGradientBrush;
        Fayde.CoreLibrary.add(RadialGradientBrush);
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
/// <reference path="Geometry.ts" />
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        var RectangleGeometry = (function (_super) {
            __extends(RectangleGeometry, _super);
            function RectangleGeometry() {
                _super.apply(this, arguments);
            }
            RectangleGeometry.prototype._Build = function () {
                var irect = this.Rect;
                if (!irect)
                    return null;
                var radiusX = this.RadiusX;
                var radiusY = this.RadiusY;
                var p = new minerva.path.Path();
                p.roundedRect(irect.x, irect.y, irect.width, irect.height, radiusX, radiusY);
                return p;
            };
            RectangleGeometry.RectProperty = DependencyProperty.RegisterCore("Rect", function () { return Rect; }, RectangleGeometry, undefined, function (d, args) { return d.InvalidateGeometry(); });
            RectangleGeometry.RadiusXProperty = DependencyProperty.RegisterCore("RadiusX", function () { return Number; }, RectangleGeometry, 0, function (d, args) { return d.InvalidateGeometry(); });
            RectangleGeometry.RadiusYProperty = DependencyProperty.RegisterCore("RadiusY", function () { return Number; }, RectangleGeometry, 0, function (d, args) { return d.InvalidateGeometry(); });
            return RectangleGeometry;
        })(Media.Geometry);
        Media.RectangleGeometry = RectangleGeometry;
        Fayde.CoreLibrary.add(RectangleGeometry);
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
/// <reference path="Brush.ts" />
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        var SolidColorBrush = (function (_super) {
            __extends(SolidColorBrush, _super);
            function SolidColorBrush() {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i - 0] = arguments[_i];
                }
                _super.call(this);
                if (args && args.length === 1 && args[0] instanceof Color)
                    this.Color = args[0];
            }
            SolidColorBrush.prototype.isTransparent = function () {
                var color = this.Color;
                return !color || (color.A <= 0);
            };
            SolidColorBrush.FromColor = function (color) {
                var scb = new SolidColorBrush();
                scb.Color = color;
                return scb;
            };
            SolidColorBrush.prototype.setupBrush = function (ctx, bounds) {
                if (this._CachedBrush)
                    return;
                this._CachedBrush = this.CreateBrush(ctx, bounds);
            };
            SolidColorBrush.prototype.CreateBrush = function (ctx, bounds) {
                var color = this.Color;
                if (!color)
                    return "#000000";
                return color.toString();
            };
            SolidColorBrush.ColorProperty = DependencyProperty.Register("Color", function () { return Color; }, SolidColorBrush, undefined, function (d, args) { return d.InvalidateBrush(); });
            return SolidColorBrush;
        })(Media.Brush);
        Media.SolidColorBrush = SolidColorBrush;
        Fayde.CoreLibrary.add(SolidColorBrush);
        function brushConverter(val) {
            if (!val)
                return undefined;
            if (val instanceof Media.Brush)
                return val;
            var scb = new SolidColorBrush();
            scb.Color = nullstone.convertAnyToType(val, Color);
            return scb;
        }
        nullstone.registerTypeConverter(Media.Brush, brushConverter);
        nullstone.registerTypeConverter(SolidColorBrush, brushConverter);
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
/// <reference path="../Core/DependencyObject.ts" />
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        var TextOptions = (function () {
            function TextOptions() {
            }
            TextOptions.GetTextHintingMode = function (d) { return d.GetValue(TextOptions.TextHintingModeProperty); };
            TextOptions.SetTextHintingMode = function (d, value) { d.SetValue(TextOptions.TextHintingModeProperty, value); };
            TextOptions.TextHintingModeProperty = DependencyProperty.RegisterAttached("TextHintingMode", function () { return new Fayde.Enum(Media.TextHintingMode); }, TextOptions);
            return TextOptions;
        })();
        Media.TextOptions = TextOptions;
        Fayde.CoreLibrary.add(TextOptions);
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
/// <reference path="Brush.ts" />
/// <reference path="Enums.ts" />
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        function computeImageMatrix(width, height, sw, sh, stretch, alignX, alignY) {
            var sx = width / sw;
            var sy = height / sh;
            if (width === 0)
                sx = 1.0;
            if (height === 0)
                sy = 1.0;
            if (stretch === Media.Stretch.Fill) {
                return mat3.createScale(sx, sy);
            }
            var scale = 1.0;
            var dx = 0.0;
            var dy = 0.0;
            switch (stretch) {
                case Media.Stretch.Uniform:
                    scale = sx < sy ? sx : sy;
                    break;
                case Media.Stretch.UniformToFill:
                    scale = sx < sy ? sy : sx;
                    break;
                case Media.Stretch.None:
                    break;
            }
            switch (alignX) {
                case Media.AlignmentX.Left:
                    dx = 0.0;
                    break;
                case Media.AlignmentX.Center:
                    dx = (width - (scale * sw)) / 2;
                    break;
                case Media.AlignmentX.Right:
                default:
                    dx = width - (scale * sw);
                    break;
            }
            switch (alignY) {
                case Media.AlignmentY.Top:
                    dy = 0.0;
                    break;
                case Media.AlignmentY.Center:
                    dy = (height - (scale * sh)) / 2;
                    break;
                case Media.AlignmentY.Bottom:
                default:
                    dy = height - (scale * sh);
                    break;
            }
            var m = mat3.createScale(scale, scale);
            mat3.translate(m, dx, dy);
            return m;
        }
        var TileBrush = (function (_super) {
            __extends(TileBrush, _super);
            function TileBrush() {
                _super.apply(this, arguments);
            }
            TileBrush.prototype.CreateBrush = function (ctx, bounds) {
                var imgExtents = this.GetTileExtents();
                var tmpCanvas = document.createElement("canvas");
                tmpCanvas.width = bounds.width;
                tmpCanvas.height = bounds.height;
                var tmpCtx = tmpCanvas.getContext("2d");
                var mat = computeImageMatrix(bounds.width, bounds.height, imgExtents.width, imgExtents.height, this.Stretch, this.AlignmentX, this.AlignmentY);
                tmpCtx.setTransform(mat[0], mat[1], mat[2], mat[3], mat[4], mat[5]);
                this.DrawTile(tmpCtx, bounds);
                return ctx.createPattern(tmpCanvas, "no-repeat");
            };
            TileBrush.prototype.GetTileExtents = function () { return undefined; };
            TileBrush.prototype.DrawTile = function (canvasCtx, bounds) { };
            TileBrush.AlignmentXProperty = DependencyProperty.RegisterCore("AlignmentX", function () { return new Fayde.Enum(Media.AlignmentX); }, TileBrush, Media.AlignmentX.Center, function (d, args) { return d.InvalidateBrush(); });
            TileBrush.AlignmentYProperty = DependencyProperty.RegisterCore("AlignmentY", function () { return new Fayde.Enum(Media.AlignmentY); }, TileBrush, Media.AlignmentY.Center, function (d, args) { return d.InvalidateBrush(); });
            TileBrush.StretchProperty = DependencyProperty.RegisterCore("Stretch", function () { return new Fayde.Enum(Media.Stretch); }, TileBrush, Media.Stretch.Fill, function (d, args) { return d.InvalidateBrush(); });
            return TileBrush;
        })(Media.Brush);
        Media.TileBrush = TileBrush;
        Fayde.CoreLibrary.add(TileBrush);
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
/// <reference path="GeneralTransform.ts" />
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        var Transform = (function (_super) {
            __extends(Transform, _super);
            function Transform() {
                _super.call(this);
                Fayde.XamlNode.SetShareable(this.XamlNode);
            }
            Object.defineProperty(Transform.prototype, "Value", {
                get: function () {
                    var val = this._Value;
                    if (!val) {
                        this._Value = val = new Media.Matrix();
                        val._Raw = this._BuildValue();
                    }
                    return val;
                },
                enumerable: true,
                configurable: true
            });
            Transform.prototype.getRaw = function () {
                return this.Value._Raw;
            };
            Object.defineProperty(Transform.prototype, "Inverse", {
                get: function () {
                    var inverse = this.Value.Inverse;
                    if (!inverse)
                        return null;
                    var mt = new MatrixTransform();
                    mt.Matrix = inverse;
                    return mt;
                },
                enumerable: true,
                configurable: true
            });
            Transform.prototype.Transform = function (p) {
                var val = this.Value;
                var v;
                if (!val || !(v = val._Raw))
                    return new Point(p.x, p.y);
                v = mat3.transformVec2(v, vec2.create(p.x, p.y));
                return new Point(v[0], v[1]);
            };
            Transform.prototype.TransformBounds = function (r) {
                if (!r)
                    return undefined;
                var v = this.Value;
                var copy = new minerva.Rect();
                minerva.Rect.copyTo(r, copy);
                if (!v || !v._Raw)
                    return copy;
                return minerva.Rect.transform(copy, v._Raw);
            };
            Transform.prototype.TryTransform = function (inPoint, outPoint) {
                return false;
            };
            Transform.prototype.InvalidateValue = function () {
                if (this._Value !== undefined)
                    this._Value = undefined;
                Fayde.Incite(this);
            };
            Transform.prototype._BuildValue = function () {
                return undefined;
            };
            Transform.copyMatTo = function (t, mat) {
                mat3.copyTo(t.Value._Raw, mat);
            };
            return Transform;
        })(Media.GeneralTransform);
        Media.Transform = Transform;
        Fayde.CoreLibrary.add(Transform);
        var MatrixTransform = (function (_super) {
            __extends(MatrixTransform, _super);
            function MatrixTransform() {
                _super.apply(this, arguments);
            }
            MatrixTransform.prototype._BuildValue = function () {
                var m = this.Matrix;
                if (m)
                    return m._Raw;
                return mat3.identity();
            };
            MatrixTransform.prototype.Clone = function () {
                var xform = new MatrixTransform();
                xform.Matrix = this.Matrix.Clone();
                return xform;
            };
            MatrixTransform.MatrixProperty = DependencyProperty.RegisterFull("Matrix", function () { return Media.Matrix; }, MatrixTransform);
            return MatrixTransform;
        })(Transform);
        Media.MatrixTransform = MatrixTransform;
        Fayde.CoreLibrary.add(MatrixTransform);
        var reactions;
        (function (reactions) {
            Fayde.DPReaction(MatrixTransform.MatrixProperty, function (mt, ov, nv) { return mt.InvalidateValue(); });
        })(reactions || (reactions = {}));
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
/// <reference path="Transform.ts" />
/// <reference path="../Core/XamlObjectCollection.ts" />
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        var RotateTransform = (function (_super) {
            __extends(RotateTransform, _super);
            function RotateTransform() {
                _super.apply(this, arguments);
            }
            RotateTransform.prototype._BuildValue = function () {
                var cx = this.CenterX;
                var cy = this.CenterY;
                var angle = this.Angle;
                var angleRad = Math.PI / 180 * angle;
                var m = mat3.createRotate(angleRad);
                if (cx === 0 && cy === 0)
                    return m;
                mat3.multiply(mat3.createTranslate(-cx, -cy), m, m);
                mat3.translate(m, cx, cy);
                return m;
            };
            RotateTransform.AngleProperty = DependencyProperty.Register("Angle", function () { return Number; }, RotateTransform, 0, function (d, args) { return d.InvalidateValue(); });
            RotateTransform.CenterXProperty = DependencyProperty.Register("CenterX", function () { return Number; }, RotateTransform, 0, function (d, args) { return d.InvalidateValue(); });
            RotateTransform.CenterYProperty = DependencyProperty.Register("CenterY", function () { return Number; }, RotateTransform, 0, function (d, args) { return d.InvalidateValue(); });
            return RotateTransform;
        })(Media.Transform);
        Media.RotateTransform = RotateTransform;
        Fayde.CoreLibrary.add(RotateTransform);
        var ScaleTransform = (function (_super) {
            __extends(ScaleTransform, _super);
            function ScaleTransform() {
                _super.apply(this, arguments);
            }
            ScaleTransform.prototype._BuildValue = function () {
                var cx = this.CenterX;
                var cy = this.CenterY;
                var m = mat3.createScale(this.ScaleX, this.ScaleY);
                if (cx === 0 && cy === 0)
                    return m;
                mat3.multiply(mat3.createTranslate(-cx, -cy), m, m);
                mat3.translate(m, cx, cy);
                return m;
            };
            ScaleTransform.CenterXProperty = DependencyProperty.Register("CenterX", function () { return Number; }, ScaleTransform, 0, function (d, args) { return d.InvalidateValue(); });
            ScaleTransform.CenterYProperty = DependencyProperty.Register("CenterY", function () { return Number; }, ScaleTransform, 0, function (d, args) { return d.InvalidateValue(); });
            ScaleTransform.ScaleXProperty = DependencyProperty.Register("ScaleX", function () { return Number; }, ScaleTransform, 1.0, function (d, args) { return d.InvalidateValue(); });
            ScaleTransform.ScaleYProperty = DependencyProperty.Register("ScaleY", function () { return Number; }, ScaleTransform, 1.0, function (d, args) { return d.InvalidateValue(); });
            return ScaleTransform;
        })(Media.Transform);
        Media.ScaleTransform = ScaleTransform;
        Fayde.CoreLibrary.add(ScaleTransform);
        var SkewTransform = (function (_super) {
            __extends(SkewTransform, _super);
            function SkewTransform() {
                _super.apply(this, arguments);
            }
            SkewTransform.prototype._BuildValue = function () {
                var cx = this.CenterX;
                var cy = this.CenterY;
                var angleXRad = Math.PI / 180 * this.AngleX;
                var angleYRad = Math.PI / 180 * this.AngleY;
                var m = mat3.createSkew(angleXRad, angleYRad);
                if (cx === 0 && cy === 0)
                    return m;
                mat3.multiply(mat3.createTranslate(-cx, -cy), m, m);
                mat3.translate(m, cx, cy);
                return m;
            };
            SkewTransform.AngleXProperty = DependencyProperty.Register("AngleX", function () { return Number; }, SkewTransform, 0, function (d, args) { return d.InvalidateValue(); });
            SkewTransform.AngleYProperty = DependencyProperty.Register("AngleY", function () { return Number; }, SkewTransform, 0, function (d, args) { return d.InvalidateValue(); });
            SkewTransform.CenterXProperty = DependencyProperty.Register("CenterX", function () { return Number; }, SkewTransform, 0, function (d, args) { return d.InvalidateValue(); });
            SkewTransform.CenterYProperty = DependencyProperty.Register("CenterY", function () { return Number; }, SkewTransform, 0, function (d, args) { return d.InvalidateValue(); });
            return SkewTransform;
        })(Media.Transform);
        Media.SkewTransform = SkewTransform;
        Fayde.CoreLibrary.add(SkewTransform);
        var TranslateTransform = (function (_super) {
            __extends(TranslateTransform, _super);
            function TranslateTransform() {
                _super.apply(this, arguments);
            }
            TranslateTransform.prototype._BuildValue = function () {
                return mat3.createTranslate(this.X, this.Y);
            };
            TranslateTransform.XProperty = DependencyProperty.Register("X", function () { return Number; }, TranslateTransform, 0, function (d, args) { return d.InvalidateValue(); });
            TranslateTransform.YProperty = DependencyProperty.Register("Y", function () { return Number; }, TranslateTransform, 0, function (d, args) { return d.InvalidateValue(); });
            return TranslateTransform;
        })(Media.Transform);
        Media.TranslateTransform = TranslateTransform;
        Fayde.CoreLibrary.add(TranslateTransform);
        var TransformCollection = (function (_super) {
            __extends(TransformCollection, _super);
            function TransformCollection() {
                _super.apply(this, arguments);
            }
            TransformCollection.prototype.AddingToCollection = function (value, error) {
                var _this = this;
                if (!_super.prototype.AddingToCollection.call(this, value, error))
                    return false;
                Fayde.ReactTo(value, this, function () { return Fayde.Incite(_this); });
                Fayde.Incite(this);
                return true;
            };
            TransformCollection.prototype.RemovedFromCollection = function (value, isValueSafe) {
                if (!_super.prototype.RemovedFromCollection.call(this, value, isValueSafe))
                    return false;
                Fayde.UnreactTo(value, this);
                Fayde.Incite(this);
            };
            return TransformCollection;
        })(Fayde.XamlObjectCollection);
        Media.TransformCollection = TransformCollection;
        Fayde.CoreLibrary.add(TransformCollection);
        var TransformGroup = (function (_super) {
            __extends(TransformGroup, _super);
            function TransformGroup() {
                var _this = this;
                _super.call(this);
                var coll = TransformGroup.ChildrenProperty.Initialize(this);
                coll.AttachTo(this);
                Fayde.ReactTo(coll, this, function () { return _this.InvalidateValue(); });
            }
            TransformGroup.prototype._BuildValue = function () {
                var enumerator = this.Children.getEnumerator();
                var cur = mat3.identity();
                while (enumerator.moveNext()) {
                    mat3.multiply(cur, enumerator.current.Value._Raw, cur);
                }
                return cur;
            };
            TransformGroup.ChildrenProperty = DependencyProperty.RegisterImmutable("Children", function () { return TransformCollection; }, TransformGroup);
            return TransformGroup;
        })(Media.Transform);
        Media.TransformGroup = TransformGroup;
        Fayde.CoreLibrary.add(TransformGroup);
        Fayde.Markup.Content(TransformGroup, TransformGroup.ChildrenProperty);
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Navigation;
    (function (Navigation) {
        function Navigate(source, targetName, navigateUri) {
            if (!isExternalTarget(targetName)) {
                if (tryInternalNavigate(source, navigateUri, targetName))
                    return;
                if (!isUriValidForExternalNav(navigateUri))
                    throw new NotSupportedException("Navigation Failed");
            }
            var app = source.App;
            if (!app || !app.AllowNavigation)
                throw new InvalidOperationException("Navigation is now allowed.");
            var absoluteUri = getAbsoluteUri(navigateUri, app);
            if (!absoluteUri.isAbsoluteUri)
                throw new InvalidOperationException("Navigation Failed [" + absoluteUri.toString() + "]");
            launchDummyLink(targetName || "_self", absoluteUri.originalString);
        }
        Navigation.Navigate = Navigate;
        function isExternalTarget(targetName) {
            if (!targetName)
                return false;
            switch (targetName.toLowerCase()) {
                case "_blank":
                case "_media":
                case "_search":
                case "_parent":
                case "_self":
                case "_top":
                    return true;
                default:
                    return false;
            }
        }
        function tryInternalNavigate(source, navigateUri, targetName) {
            var lastSubtree = source;
            for (var en = walkUp(source); en.moveNext();) {
                var cur = en.current;
                if (cur && (Navigation.INavigate_.is(cur) || !Fayde.VisualTreeHelper.GetParent(cur))) {
                    var navigator = findNavigator(cur, lastSubtree, targetName);
                    if (navigator)
                        return navigator.Navigate(navigateUri);
                    lastSubtree = cur;
                }
            }
            return false;
        }
        function findNavigator(root, lastSubtree, targetName) {
            if (!root || root === lastSubtree)
                return null;
            var nav = Navigation.INavigate_.as(root);
            if (nav && (!targetName || targetName === root.Name))
                return nav;
            if (root instanceof Fayde.Controls.Primitives.Popup) {
                return findNavigator(root.Child, lastSubtree, targetName);
            }
            else {
                for (var i = 0, len = Fayde.VisualTreeHelper.GetChildrenCount(root); i < len; i++) {
                    var navigator = findNavigator(Fayde.VisualTreeHelper.GetChild(root, i), lastSubtree, targetName);
                    if (navigator)
                        return navigator;
                }
            }
            return null;
        }
        function walkUp(xobj) {
            var e = {
                current: xobj,
                moveNext: function () {
                    if (!e.current)
                        return false;
                    e.current = e.current.VisualParent || e.current.Parent;
                    return !!e.current;
                }
            };
            return e;
        }
        function isUriValidForExternalNav(navigateUri) {
            if (!navigateUri.isAbsoluteUri) {
                if (!!navigateUri.originalString && navigateUri.originalString[0] !== "/")
                    return false;
            }
            return true;
        }
        function getAbsoluteUri(navigateUri, app) {
            var relativeUri = navigateUri;
            if (!relativeUri.isAbsoluteUri) {
                if (!!relativeUri.originalString && relativeUri.originalString[0] !== "/")
                    throw new NotSupportedException("HyperlinkButton_GetAbsoluteUri_PageRelativeUri");
                if (!app)
                    throw new NotSupportedException("HyperlinkButton_GetAbsoluteUri_NoApplication");
                relativeUri = new Fayde.Uri(app.Address, relativeUri);
            }
            return relativeUri;
        }
        var dummyLink;
        function launchDummyLink(target, navigateUri) {
            dummyLink = dummyLink || document.createElement('a');
            dummyLink.href = navigateUri;
            dummyLink.target = target;
            dummyLink.click();
        }
    })(Navigation = Fayde.Navigation || (Fayde.Navigation = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Navigation;
    (function (Navigation) {
        var NavigationService = (function () {
            function NavigationService() {
                var _this = this;
                this.LocationChanged = new nullstone.Event();
                this.Href = window.location.href;
                this.Hash = window.location.hash;
                if (this.Href[this.Href.length - 1] === '#')
                    this.Hash = "#";
                if (this.Hash) {
                    this.Hash = this.Hash.substr(1);
                    this.Href = this.Href.substring(0, this.Href.indexOf('#'));
                }
                window.onhashchange = function () { return _this._HandleFragmentChange(); };
            }
            Object.defineProperty(NavigationService.prototype, "CurrentUri", {
                get: function () {
                    return new Fayde.Uri(this.Href + "#" + this.Hash);
                },
                enumerable: true,
                configurable: true
            });
            NavigationService.prototype.Navigate = function (uri) {
                window.location.hash = uri.toString();
                return true;
            };
            NavigationService.prototype._HandleFragmentChange = function () {
                this.Hash = window.location.hash;
                if (this.Hash) {
                    this.Hash = this.Hash.substr(1);
                }
                this.LocationChanged.raise(this, null);
            };
            return NavigationService;
        })();
        Navigation.NavigationService = NavigationService;
        Fayde.CoreLibrary.add(NavigationService);
    })(Navigation = Fayde.Navigation || (Fayde.Navigation = {}));
})(Fayde || (Fayde = {}));
/// <reference path="../Core/DependencyObject.ts" />
var Fayde;
(function (Fayde) {
    var Navigation;
    (function (Navigation) {
        var RouteMapper = (function (_super) {
            __extends(RouteMapper, _super);
            function RouteMapper() {
                _super.call(this);
                RouteMapper.RouteMappingsProperty.Initialize(this);
            }
            RouteMapper.prototype.MapUri = function (uri) {
                var mapped;
                for (var en = this.RouteMappings.getEnumerator(); en.moveNext();) {
                    mapped = en.current.MapUri(uri);
                    if (mapped) {
                        var vm = this.ViewModelProvider ? this.ViewModelProvider.ResolveViewModel(mapped) : null;
                        mapped.DataContext = vm;
                        return mapped;
                    }
                }
                return undefined;
            };
            RouteMapper.RouteMappingsProperty = DependencyProperty.RegisterImmutable("RouteMappings", function () { return Fayde.XamlObjectCollection; }, RouteMapper);
            RouteMapper.ViewModelProviderProperty = DependencyProperty.Register("ViewModelProvider", function () { return Fayde.MVVM.IViewModelProvider_; }, RouteMapper);
            return RouteMapper;
        })(Fayde.DependencyObject);
        Navigation.RouteMapper = RouteMapper;
        Fayde.CoreLibrary.add(RouteMapper);
        Fayde.Markup.Content(RouteMapper, RouteMapper.RouteMappingsProperty);
    })(Navigation = Fayde.Navigation || (Fayde.Navigation = {}));
})(Fayde || (Fayde = {}));
/// <reference path="../Core/DependencyObject.ts" />
var Fayde;
(function (Fayde) {
    var Navigation;
    (function (Navigation) {
        var RouteMapping = (function (_super) {
            __extends(RouteMapping, _super);
            function RouteMapping() {
                _super.apply(this, arguments);
            }
            RouteMapping.prototype.MapUri = function (uri) {
                var matcher = createUriMatcher(this.Uri.toString(), uri.toString());
                var result = matcher.Match();
                if (!result)
                    return undefined;
                if (!this.View)
                    throw new InvalidOperationException("RouteMapping must have a view. (" + this.Uri.toString() + ")");
                var hashParams = {};
                for (var i = 0; i < result.length; i++) {
                    var key = result[i].Identifier;
                    var value = result[i].Value;
                    hashParams[key] = value;
                }
                return new Navigation.Route(this.View, hashParams, null);
            };
            RouteMapping.ViewProperty = DependencyProperty.Register("View", function () { return Fayde.Uri; }, RouteMapping);
            RouteMapping.UriProperty = DependencyProperty.Register("Uri", function () { return Fayde.Uri; }, RouteMapping);
            return RouteMapping;
        })(Fayde.DependencyObject);
        Navigation.RouteMapping = RouteMapping;
        Fayde.CoreLibrary.add(RouteMapping);
        function createUriMatcher(matchTemplate, actual) {
            var i = 0;
            var j = 0;
            function collectTokenInfo() {
                var tokenInfo = {
                    Identifier: null,
                    Terminator: null,
                    Value: null
                };
                var index = matchTemplate.indexOf('}', i);
                if (index < 0)
                    throw new InvalidOperationException("Invalid Uri format. '{' needs a closing '}'.");
                var len = index - i + 1;
                tokenInfo.Identifier = matchTemplate.substr(i + 1, len - 2);
                if (!tokenInfo.Identifier)
                    throw new InvalidOperationException("Invalid Uri format. '{}' must contain an identifier.");
                i += len;
                tokenInfo.Terminator = (i + 1) < matchTemplate.length ? matchTemplate[i] : '\0';
                return tokenInfo;
            }
            function findTokenValue(tokenInfo) {
                if (tokenInfo.Terminator === '\0') {
                    tokenInfo.Value = actual.substr(j);
                    if (tokenInfo.Value)
                        j += tokenInfo.Value.length;
                    return tokenInfo;
                }
                tokenInfo.Value = "";
                while (j < actual.length) {
                    if (actual[j] == tokenInfo.Terminator)
                        return;
                    tokenInfo.Value += actual[j];
                    j++;
                }
            }
            return {
                Match: function () {
                    var tokens = [];
                    if (matchTemplate.length === 0) {
                        if (actual.length === 0)
                            return tokens;
                        return null;
                    }
                    while (i < matchTemplate.length && j < actual.length) {
                        if (matchTemplate[i] === "{") {
                            tokens.push(findTokenValue(collectTokenInfo()));
                            continue;
                        }
                        if (matchTemplate[i] !== actual[i])
                            return null;
                        i++;
                        j++;
                    }
                    return tokens;
                }
            };
        }
    })(Navigation = Fayde.Navigation || (Fayde.Navigation = {}));
})(Fayde || (Fayde = {}));
/// <reference path="../Core/DependencyObject.ts" />
var Fayde;
(function (Fayde) {
    var Navigation;
    (function (Navigation) {
        var UriMapper = (function (_super) {
            __extends(UriMapper, _super);
            function UriMapper() {
                _super.call(this);
                UriMapper.UriMappingsProperty.Initialize(this);
            }
            UriMapper.prototype.MapUri = function (uri) {
                var enumerator = this.UriMappings.getEnumerator();
                var mapped;
                while (enumerator.moveNext()) {
                    mapped = enumerator.current.MapUri(uri);
                    if (mapped)
                        return mapped;
                }
                return uri;
            };
            UriMapper.UriMappingsProperty = DependencyProperty.RegisterImmutable("UriMappings", function () { return Fayde.XamlObjectCollection; }, UriMapper);
            return UriMapper;
        })(Fayde.DependencyObject);
        Navigation.UriMapper = UriMapper;
        Fayde.CoreLibrary.add(UriMapper);
        Fayde.Markup.Content(UriMapper, UriMapper.UriMappingsProperty);
    })(Navigation = Fayde.Navigation || (Fayde.Navigation = {}));
})(Fayde || (Fayde = {}));
/// <reference path="../Core/DependencyObject.ts" />
var Fayde;
(function (Fayde) {
    var Navigation;
    (function (Navigation) {
        var UriMapping = (function (_super) {
            __extends(UriMapping, _super);
            function UriMapping() {
                _super.apply(this, arguments);
            }
            UriMapping.prototype.MapUri = function (uri) {
                var matcher = createUriMatcher(this.Uri.toString(), this.MappedUri.toString(), uri.toString());
                var result = matcher.Match();
                if (!result)
                    return undefined;
                return new Fayde.Uri(result);
            };
            UriMapping.MappedUriProperty = DependencyProperty.Register("MappedUri", function () { return Fayde.Uri; }, UriMapping);
            UriMapping.UriProperty = DependencyProperty.Register("Uri", function () { return Fayde.Uri; }, UriMapping);
            return UriMapping;
        })(Fayde.DependencyObject);
        Navigation.UriMapping = UriMapping;
        Fayde.CoreLibrary.add(UriMapping);
        function createUriMatcher(matchTemplate, outputTemplate, actual) {
            var i = 0;
            var j = 0;
            function collectTokenInfo() {
                var tokenInfo = {
                    Identifier: null,
                    Terminator: null,
                    Value: null
                };
                var index = matchTemplate.indexOf('}', i);
                if (index < 0)
                    throw new InvalidOperationException("Invalid Uri format. '{' needs a closing '}'.");
                var len = index - i + 1;
                tokenInfo.Identifier = matchTemplate.substr(i + 1, len - 2);
                if (!tokenInfo.Identifier)
                    throw new InvalidOperationException("Invalid Uri format. '{}' must contain an identifier.");
                i += len;
                tokenInfo.Terminator = (i + 1) < matchTemplate.length ? matchTemplate[i] : '\0';
                return tokenInfo;
            }
            function findTokenValue(tokenInfo) {
                if (tokenInfo.Terminator === '\0') {
                    tokenInfo.Value = actual.substr(j);
                    if (tokenInfo.Value)
                        j += tokenInfo.Value.length;
                    return tokenInfo;
                }
                tokenInfo.Value = "";
                while (j < actual.length) {
                    if (actual[j] == tokenInfo.Terminator)
                        return;
                    tokenInfo.Value += actual[j];
                    j++;
                }
            }
            function buildMappedUri(tokens) {
                var cur = outputTemplate;
                var len = tokens.length;
                var token;
                for (var a = 0; a < len; a++) {
                    token = tokens[a];
                    cur = cur.replace("{" + token.Identifier + "}", token.Value);
                }
                return cur;
            }
            return {
                Match: function () {
                    var tokens = [];
                    if (matchTemplate.length === 0) {
                        if (actual.length === 0)
                            return buildMappedUri(tokens);
                        return null;
                    }
                    while (i < matchTemplate.length && j < actual.length) {
                        if (matchTemplate[i] === "{") {
                            tokens.push(findTokenValue(collectTokenInfo()));
                            continue;
                        }
                        if (matchTemplate[i] !== actual[i])
                            return null;
                        i++;
                        j++;
                    }
                    return buildMappedUri(tokens);
                }
            };
        }
    })(Navigation = Fayde.Navigation || (Fayde.Navigation = {}));
})(Fayde || (Fayde = {}));
var Color = (function () {
    function Color() {
        this.R = 0;
        this.G = 0;
        this.B = 0;
        this.A = 1.0;
    }
    Color.prototype.Add = function (color2) {
        var c = new Color();
        c.R = this.R + color2.R;
        c.G = this.G + color2.G;
        c.B = this.B + color2.B;
        c.A = this.A + color2.A;
        return c;
    };
    Color.prototype.Subtract = function (color2) {
        var c = new Color();
        c.R = this.R - color2.R;
        c.G = this.G - color2.G;
        c.B = this.B - color2.B;
        c.A = this.A - color2.A;
        return c;
    };
    Color.prototype.Multiply = function (factor) {
        var c = new Color();
        c.R = this.R * factor;
        c.G = this.G * factor;
        c.B = this.B * factor;
        c.A = this.A * factor;
        return c;
    };
    Color.prototype.Equals = function (other) {
        return this.R === other.R
            && this.G === other.G
            && this.B === other.B
            && this.A === other.A;
    };
    Color.prototype.toString = function () {
        var r = Math.round(this.R) || 0;
        var g = Math.round(this.G) || 0;
        var b = Math.round(this.B) || 0;
        var a = this.A || 0;
        return "rgba(" + r + ", " + g + ", " + b + ", " + a + ")";
    };
    Color.prototype.ToHexStringNoAlpha = function () {
        return "#" + this.R.toString(16) + this.G.toString(16) + this.B.toString(16);
    };
    Color.prototype.Clone = function () {
        return Color.FromRgba(this.R, this.G, this.B, this.A);
    };
    Color.LERP = function (start, end, p) {
        var c = new Color();
        c.R = start.R + (end.R - start.R) * p;
        c.G = start.G + (end.G - start.G) * p;
        c.B = start.B + (end.B - start.B) * p;
        c.A = start.A + (end.A - start.A) * p;
        return c;
    };
    Color.FromRgba = function (r, g, b, a) {
        var c = new Color();
        c.R = r;
        c.G = g;
        c.B = b;
        c.A = a;
        return c;
    };
    Color.FromHex = function (hex) {
        var match;
        var c = new Color();
        if ((match = Color.__AlphaRegex.exec(hex)) != null) {
            c.A = parseInt(match[1], 16) / 255.0;
            c.R = parseInt(match[2], 16);
            c.G = parseInt(match[3], 16);
            c.B = parseInt(match[4], 16);
        }
        else if ((match = Color.__NoAlphaRegex.exec(hex)) != null) {
            c.A = 1.0;
            c.R = parseInt(match[1], 16);
            c.G = parseInt(match[2], 16);
            c.B = parseInt(match[3], 16);
        }
        return c;
    };
    Color.__NoAlphaRegex = /#([0-9a-fA-F][0-9a-fA-F]){1}([0-9a-fA-F][0-9a-fA-F]){1}([0-9a-fA-F][0-9a-fA-F]){1}/;
    Color.__AlphaRegex = /#([0-9a-fA-F][0-9a-fA-F]){1}([0-9a-fA-F][0-9a-fA-F]){1}([0-9a-fA-F][0-9a-fA-F]){1}([0-9a-fA-F][0-9a-fA-F]){1}/;
    Color.KnownColors = {
        AliceBlue: Color.FromHex("#FFF0F8FF"),
        AntiqueWhite: Color.FromHex("#FFFAEBD7"),
        Aqua: Color.FromHex("#FF00FFFF"),
        Aquamarine: Color.FromHex("#FF7FFFD4"),
        Azure: Color.FromHex("#FFF0FFFF"),
        Beige: Color.FromHex("#FFF5F5DC"),
        Bisque: Color.FromHex("#FFFFE4C4"),
        Black: Color.FromHex("#FF000000"),
        BlanchedAlmond: Color.FromHex("#FFFFEBCD"),
        Blue: Color.FromHex("#FF0000FF"),
        BlueViolet: Color.FromHex("#FF8A2BE2"),
        Brown: Color.FromHex("#FFA52A2A"),
        BurlyWood: Color.FromHex("#FFDEB887"),
        CadetBlue: Color.FromHex("#FF5F9EA0"),
        Chartreuse: Color.FromHex("#FF7FFF00"),
        Chocolate: Color.FromHex("#FFD2691E"),
        Coral: Color.FromHex("#FFFF7F50"),
        CornflowerBlue: Color.FromHex("#FF6495ED"),
        Cornsilk: Color.FromHex("#FFFFF8DC"),
        Crimson: Color.FromHex("#FFDC143C"),
        Cyan: Color.FromHex("#FF00FFFF"),
        DarkBlue: Color.FromHex("#FF00008B"),
        DarkCyan: Color.FromHex("#FF008B8B"),
        DarkGoldenrod: Color.FromHex("#FFB8860B"),
        DarkGray: Color.FromHex("#FFA9A9A9"),
        DarkGreen: Color.FromHex("#FF006400"),
        DarkKhaki: Color.FromHex("#FFBDB76B"),
        DarkMagenta: Color.FromHex("#FF8B008B"),
        DarkOliveGreen: Color.FromHex("#FF556B2F"),
        DarkOrange: Color.FromHex("#FFFF8C00"),
        DarkOrchid: Color.FromHex("#FF9932CC"),
        DarkRed: Color.FromHex("#FF8B0000"),
        DarkSalmon: Color.FromHex("#FFE9967A"),
        DarkSeaGreen: Color.FromHex("#FF8FBC8F"),
        DarkSlateBlue: Color.FromHex("#FF483D8B"),
        DarkSlateGray: Color.FromHex("#FF2F4F4F"),
        DarkTurquoise: Color.FromHex("#FF00CED1"),
        DarkViolet: Color.FromHex("#FF9400D3"),
        DeepPink: Color.FromHex("#FFFF1493"),
        DeepSkyBlue: Color.FromHex("#FF00BFFF"),
        DimGray: Color.FromHex("#FF696969"),
        DodgerBlue: Color.FromHex("#FF1E90FF"),
        Firebrick: Color.FromHex("#FFB22222"),
        FloralWhite: Color.FromHex("#FFFFFAF0"),
        ForestGreen: Color.FromHex("#FF228B22"),
        Fuchsia: Color.FromHex("#FFFF00FF"),
        Gainsboro: Color.FromHex("#FFDCDCDC"),
        GhostWhite: Color.FromHex("#FFF8F8FF"),
        Gold: Color.FromHex("#FFFFD700"),
        Goldenrod: Color.FromHex("#FFDAA520"),
        Gray: Color.FromHex("#FF808080"),
        Green: Color.FromHex("#FF008000"),
        GreenYellow: Color.FromHex("#FFADFF2F"),
        Honeydew: Color.FromHex("#FFF0FFF0"),
        HotPink: Color.FromHex("#FFFF69B4"),
        IndianRed: Color.FromHex("#FFCD5C5C"),
        Indigo: Color.FromHex("#FF4B0082"),
        Ivory: Color.FromHex("#FFFFFFF0"),
        Khaki: Color.FromHex("#FFF0E68C"),
        Lavender: Color.FromHex("#FFE6E6FA"),
        LavenderBlush: Color.FromHex("#FFFFF0F5"),
        LawnGreen: Color.FromHex("#FF7CFC00"),
        LemonChiffon: Color.FromHex("#FFFFFACD"),
        LightBlue: Color.FromHex("#FFADD8E6"),
        LightCoral: Color.FromHex("#FFF08080"),
        LightCyan: Color.FromHex("#FFE0FFFF"),
        LightGoldenrodYellow: Color.FromHex("#FFFAFAD2"),
        LightGray: Color.FromHex("#FFD3D3D3"),
        LightGreen: Color.FromHex("#FF90EE90"),
        LightPink: Color.FromHex("#FFFFB6C1"),
        LightSalmon: Color.FromHex("#FFFFA07A"),
        LightSeaGreen: Color.FromHex("#FF20B2AA"),
        LightSkyBlue: Color.FromHex("#FF87CEFA"),
        LightSlateGray: Color.FromHex("#FF778899"),
        LightSteelBlue: Color.FromHex("#FFB0C4DE"),
        LightYellow: Color.FromHex("#FFFFFFE0"),
        Lime: Color.FromHex("#FF00FF00"),
        LimeGreen: Color.FromHex("#FF32CD32"),
        Linen: Color.FromHex("#FFFAF0E6"),
        Magenta: Color.FromHex("#FFFF00FF"),
        Maroon: Color.FromHex("#FF800000"),
        MediumAquamarine: Color.FromHex("#FF66CDAA"),
        MediumBlue: Color.FromHex("#FF0000CD"),
        MediumOrchid: Color.FromHex("#FFBA55D3"),
        MediumPurple: Color.FromHex("#FF9370DB"),
        MediumSeaGreen: Color.FromHex("#FF3CB371"),
        MediumSlateBlue: Color.FromHex("#FF7B68EE"),
        MediumSpringGreen: Color.FromHex("#FF00FA9A"),
        MediumTurquoise: Color.FromHex("#FF48D1CC"),
        MediumVioletRed: Color.FromHex("#FFC71585"),
        MidnightBlue: Color.FromHex("#FF191970"),
        MintCream: Color.FromHex("#FFF5FFFA"),
        MistyRose: Color.FromHex("#FFFFE4E1"),
        Moccasin: Color.FromHex("#FFFFE4B5"),
        NavajoWhite: Color.FromHex("#FFFFDEAD"),
        Navy: Color.FromHex("#FF000080"),
        OldLace: Color.FromHex("#FFFDF5E6"),
        Olive: Color.FromHex("#FF808000"),
        OliveDrab: Color.FromHex("#FF6B8E23"),
        Orange: Color.FromHex("#FFFFA500"),
        OrangeRed: Color.FromHex("#FFFF4500"),
        Orchid: Color.FromHex("#FFDA70D6"),
        PaleGoldenrod: Color.FromHex("#FFEEE8AA"),
        PaleGreen: Color.FromHex("#FF98FB98"),
        PaleTurquoise: Color.FromHex("#FFAFEEEE"),
        PaleVioletRed: Color.FromHex("#FFDB7093"),
        PapayaWhip: Color.FromHex("#FFFFEFD5"),
        PeachPuff: Color.FromHex("#FFFFDAB9"),
        Peru: Color.FromHex("#FFCD853F"),
        Pink: Color.FromHex("#FFFFC0CB"),
        Plum: Color.FromHex("#FFDDA0DD"),
        PowderBlue: Color.FromHex("#FFB0E0E6"),
        Purple: Color.FromHex("#FF800080"),
        Red: Color.FromHex("#FFFF0000"),
        RosyBrown: Color.FromHex("#FFBC8F8F"),
        RoyalBlue: Color.FromHex("#FF4169E1"),
        SaddleBrown: Color.FromHex("#FF8B4513"),
        Salmon: Color.FromHex("#FFFA8072"),
        SandyBrown: Color.FromHex("#FFF4A460"),
        SeaGreen: Color.FromHex("#FF2E8B57"),
        SeaShell: Color.FromHex("#FFFFF5EE"),
        Sienna: Color.FromHex("#FFA0522D"),
        Silver: Color.FromHex("#FFC0C0C0"),
        SkyBlue: Color.FromHex("#FF87CEEB"),
        SlateBlue: Color.FromHex("#FF6A5ACD"),
        SlateGray: Color.FromHex("#FF708090"),
        Snow: Color.FromHex("#FFFFFAFA"),
        SpringGreen: Color.FromHex("#FF00FF7F"),
        SteelBlue: Color.FromHex("#FF4682B4"),
        Tan: Color.FromHex("#FFD2B48C"),
        Teal: Color.FromHex("#FF008080"),
        Thistle: Color.FromHex("#FFD8BFD8"),
        Tomato: Color.FromHex("#FFFF6347"),
        Transparent: Color.FromHex("#00FFFFFF"),
        Turquoise: Color.FromHex("#FF40E0D0"),
        Violet: Color.FromHex("#FFEE82EE"),
        Wheat: Color.FromHex("#FFF5DEB3"),
        White: Color.FromHex("#FFFFFFFF"),
        WhiteSmoke: Color.FromHex("#FFF5F5F5"),
        Yellow: Color.FromHex("#FFFFFF00"),
        YellowGreen: Color.FromHex("#FF9ACD32")
    };
    return Color;
})();
Fayde.CoreLibrary.addPrimitive(Color);
nullstone.registerTypeConverter(Color, function (val) {
    if (!val)
        return undefined;
    if (val instanceof Color)
        return val;
    val = val.toString();
    if (val[0] !== "#") {
        var color = Color.KnownColors[val];
        if (!color)
            throw new NotSupportedException("Unknown Color: " + val);
        return color;
    }
    return Color.FromHex(val);
});
var CornerRadius = (function (_super) {
    __extends(CornerRadius, _super);
    function CornerRadius() {
        _super.apply(this, arguments);
    }
    CornerRadius.prototype.Clone = function () {
        return new CornerRadius(this.topLeft, this.topRight, this.bottomRight, this.bottomLeft);
    };
    return CornerRadius;
})(minerva.CornerRadius);
Fayde.CoreLibrary.addPrimitive(CornerRadius);
nullstone.registerTypeConverter(CornerRadius, function (val) {
    if (!val)
        return new CornerRadius();
    if (val instanceof CornerRadius)
        return val;
    if (typeof val === "number")
        return new CornerRadius(val, val, val, val);
    var tokens = Fayde.splitCommaList(val.toString());
    var topLeft, topRight, bottomRight, bottomLeft;
    if (tokens.length === 1) {
        topLeft = topRight = bottomRight = bottomLeft = parseFloat(tokens[0]);
    }
    else if (tokens.length === 4) {
        topLeft = parseFloat(tokens[0]);
        topRight = parseFloat(tokens[1]);
        bottomRight = parseFloat(tokens[2]);
        bottomLeft = parseFloat(tokens[3]);
    }
    else {
        throw new Exception("Cannot parse CornerRadius value '" + val + "'");
    }
    return new CornerRadius(topLeft, topRight, bottomRight, bottomLeft);
});
var DurationType;
(function (DurationType) {
    DurationType[DurationType["Automatic"] = 0] = "Automatic";
    DurationType[DurationType["Forever"] = 1] = "Forever";
    DurationType[DurationType["TimeSpan"] = 2] = "TimeSpan";
})(DurationType || (DurationType = {}));
var Duration = (function () {
    function Duration(ts) {
        this._Type = DurationType.TimeSpan;
        this._TimeSpan = ts;
    }
    Duration.prototype.Clone = function () {
        var dur = new Duration();
        dur._Type = this._Type;
        dur._TimeSpan = this._TimeSpan;
        return dur;
    };
    Object.defineProperty(Duration.prototype, "Type", {
        get: function () { return this._Type; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Duration.prototype, "TimeSpan", {
        get: function () {
            if (this._Type === DurationType.TimeSpan)
                return this._TimeSpan;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Duration.prototype, "HasTimeSpan", {
        get: function () { return this._Type === DurationType.TimeSpan; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Duration.prototype, "IsForever", {
        get: function () { return this._Type === DurationType.Forever; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Duration.prototype, "IsAutomatic", {
        get: function () { return this._Type === DurationType.Automatic; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Duration.prototype, "IsZero", {
        get: function () { return this._Type === DurationType.TimeSpan && this._TimeSpan.Ticks === 0; },
        enumerable: true,
        configurable: true
    });
    Duration.Automatic = (function () { var d = new Duration(); d._Type = DurationType.Automatic; return d; })();
    Duration.Forever = (function () { var d = new Duration(); d._Type = DurationType.Forever; return d; })();
    return Duration;
})();
Fayde.CoreLibrary.addPrimitive(Duration);
nullstone.registerTypeConverter(Duration, function (val) {
    if (val instanceof Duration)
        return val;
    if (!val || val.toString().toLowerCase() === "automatic")
        return Duration.Automatic;
    if (val.toString().toLowerCase() === "forever")
        return Duration.Forever;
    var ts = nullstone.convertAnyToType(val, TimeSpan);
    return new Duration(ts);
});
var FontFamily = (function () {
    function FontFamily(FamilyNames) {
        this.FamilyNames = FamilyNames;
    }
    FontFamily.prototype.toString = function () {
        return this.FamilyNames;
    };
    FontFamily.prototype.Clone = function () {
        return new FontFamily(this.FamilyNames);
    };
    return FontFamily;
})();
Fayde.CoreLibrary.addPrimitive(FontFamily);
nullstone.registerTypeConverter(FontFamily, function (val) {
    if (!val)
        return new FontFamily(minerva.Font.DEFAULT_FAMILY);
    return new FontFamily(val.toString());
});
var KeyTime = (function () {
    function KeyTime() {
        this._IsPaced = false;
        this._IsUniform = false;
        this._TimeSpan = null;
        this._Percent = null;
        this.IsValid = true;
    }
    KeyTime.CreateUniform = function () {
        var kt = new KeyTime();
        kt._IsUniform = true;
        return kt;
    };
    KeyTime.CreateTimeSpan = function (ts) {
        var kt = new KeyTime();
        kt._TimeSpan = ts;
        return kt;
    };
    KeyTime.prototype.Clone = function () {
        var kt = new KeyTime();
        kt._TimeSpan = this._TimeSpan;
        kt._IsPaced = this._IsPaced;
        kt._IsUniform = this._IsUniform;
        kt._Percent = this._Percent;
        return kt;
    };
    Object.defineProperty(KeyTime.prototype, "IsPaced", {
        get: function () { return this._IsPaced; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(KeyTime.prototype, "IsUniform", {
        get: function () { return this._IsUniform; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(KeyTime.prototype, "HasTimeSpan", {
        get: function () { return this._TimeSpan != null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(KeyTime.prototype, "TimeSpan", {
        get: function () { return this._TimeSpan; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(KeyTime.prototype, "HasPercent", {
        get: function () { return this._Percent != null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(KeyTime.prototype, "Percent", {
        get: function () { return this._Percent; },
        enumerable: true,
        configurable: true
    });
    return KeyTime;
})();
Fayde.CoreLibrary.addPrimitive(KeyTime);
nullstone.registerTypeConverter(KeyTime, function (val) {
    if (!val || val.toString().toLowerCase() === "uniform")
        return KeyTime.CreateUniform();
    var ts = nullstone.convertAnyToType(val, TimeSpan);
    return KeyTime.CreateTimeSpan(ts);
});
var Length = (function () {
    function Length() {
    }
    return Length;
})();
Fayde.CoreLibrary.addPrimitive(Length);
nullstone.registerTypeConverter(Length, function (val) {
    if (!val || val.toString().toLowerCase() === "auto")
        return Number.NaN;
    if (typeof val === "number")
        return val;
    return parseFloat(val.toString());
});
var Rect = (function (_super) {
    __extends(Rect, _super);
    function Rect() {
        _super.apply(this, arguments);
    }
    Rect.prototype.Clone = function () {
        return new Rect(this.x, this.y, this.width, this.height);
    };
    return Rect;
})(minerva.Rect);
Fayde.CoreLibrary.addPrimitive(Rect);
nullstone.registerTypeConverter(Rect, function (val) {
    if (!val)
        return new Rect();
    if (val instanceof Rect)
        return val;
    var tokens = Fayde.splitCommaList(val.toString());
    if (tokens.length === 4) {
        return new Rect(parseFloat(tokens[0]), parseFloat(tokens[1]), parseFloat(tokens[2]), parseFloat(tokens[3]));
    }
    throw new Error("Cannot parse Rect value '" + val + "'");
});
var Size = (function (_super) {
    __extends(Size, _super);
    function Size() {
        _super.apply(this, arguments);
    }
    Size.prototype.Clone = function () {
        return new Size(this.width, this.height);
    };
    return Size;
})(minerva.Size);
Fayde.CoreLibrary.addPrimitive(Size);
nullstone.registerTypeConverter(Size, function (val) {
    if (!val)
        return new Size();
    if (val instanceof Size)
        return val;
    if (val instanceof minerva.Size)
        return new Size(val.width, val.height);
    var tokens = Fayde.splitCommaList(val.toString());
    if (tokens.length === 2) {
        var w = parseFloat(tokens[0]);
        var h = parseFloat(tokens[1]);
        return new Size(w, h);
    }
    throw new Exception("Cannot parse Size value '" + val + "'");
});
var Thickness = (function (_super) {
    __extends(Thickness, _super);
    function Thickness() {
        _super.apply(this, arguments);
    }
    Thickness.prototype.Clone = function () {
        return new Thickness(this.left, this.top, this.right, this.bottom);
    };
    Thickness.prototype.toString = function () {
        var l = this.left || 0;
        var t = this.top || 0;
        var r = this.right || 0;
        var b = this.bottom || 0;
        return [l, t, r, b].join(',');
    };
    return Thickness;
})(minerva.Thickness);
Fayde.CoreLibrary.addPrimitive(Thickness);
nullstone.registerTypeConverter(Thickness, function (val) {
    if (!val)
        return new Thickness();
    if (typeof val === "number")
        return new Thickness(val, val, val, val);
    if (val instanceof Thickness) {
        var t = val;
        return new Thickness(t.left, t.top, t.right, t.bottom);
    }
    var tokens = Fayde.splitCommaList(val.toString());
    var left, top, right, bottom;
    if (tokens.length === 1) {
        left = top = right = bottom = parseFloat(tokens[0]);
    }
    else if (tokens.length === 2) {
        left = right = parseFloat(tokens[0]);
        top = bottom = parseFloat(tokens[1]);
    }
    else if (tokens.length === 4) {
        left = parseFloat(tokens[0]);
        top = parseFloat(tokens[1]);
        right = parseFloat(tokens[2]);
        bottom = parseFloat(tokens[3]);
    }
    else {
        throw new Exception("Cannot parse Thickness value '" + val + "'");
    }
    return new Thickness(left, top, right, bottom);
});
var Fayde;
(function (Fayde) {
    function splitCommaList(str) {
        var tokens = [];
        for (var i = 0, arr = str.split(' ').join(',').split(','); i < arr.length; i++) {
            var cur = arr[i];
            if (cur)
                tokens.push(cur);
        }
        return tokens;
    }
    Fayde.splitCommaList = splitCommaList;
})(Fayde || (Fayde = {}));
var BError = (function () {
    function BError() {
    }
    BError.prototype.ThrowException = function () {
        var ex;
        switch (this.Number) {
            case BError.Attach:
                ex = new AttachException(this.Message, this.Data);
                break;
            case BError.Argument:
                ex = new ArgumentException(this.Message);
                break;
            case BError.InvalidOperation:
                ex = new InvalidOperationException(this.Message);
                break;
            case BError.XamlParse:
                ex = new XamlParseException(this.Message);
                break;
            default:
                ex = new Exception(this.Message);
                break;
        }
        throw ex;
    };
    BError.Argument = 2;
    BError.InvalidOperation = 3;
    BError.XamlParse = 5;
    BError.Attach = 6;
    return BError;
})();
var Fayde;
(function (Fayde) {
    function Bootstrap(onLoaded) {
        var url = document.body.getAttribute("fayde-app");
        if (!url) {
            console.warn("No application specified.");
            return;
        }
        var canvas = document.getElementsByTagName("canvas")[0];
        if (!canvas)
            document.body.appendChild(canvas = document.createElement("canvas"));
        bootstrap(url, canvas, onLoaded);
    }
    Fayde.Bootstrap = Bootstrap;
    function bootstrap(url, canvas, onLoaded) {
        var app;
        function run() {
            perfex.phases.start('ResolveConfig');
            Fayde.LoadConfigJson(function (config, err) {
                if (err)
                    console.warn('Could not load fayde configuration file.', err);
                resolveApp();
            });
        }
        function resolveApp() {
            perfex.phases.start('ResolveApp');
            Fayde.Application.GetAsync(url)
                .then(resolveTheme, finishError);
        }
        function resolveTheme(res) {
            perfex.phases.start('ResolveTheme');
            app = Fayde.Application.Current = res;
            Fayde.ThemeManager.LoadAsync(app.ThemeName)
                .then(startApp, finishError);
        }
        function finishError(err) {
            console.error("An error occurred retrieving the application.", err);
        }
        function startApp() {
            perfex.phases.start('StartApp');
            app.Attach(canvas);
            app.Start();
            loaded();
        }
        function loaded() {
            onLoaded && onLoaded(app);
            perfex.phases.start('Running');
        }
        run();
    }
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var jsonFile = 'fayde.json';
    function LoadConfigJson(onComplete) {
        require(['text!' + jsonFile], function (jsontext) { return configure(jsontext, onComplete); }, function (err) { return onComplete(err); });
    }
    Fayde.LoadConfigJson = LoadConfigJson;
    function configure(jsontext, onComplete) {
        var json;
        try {
            json = JSON.parse(jsontext);
        }
        catch (err) {
            return onComplete(null, err);
        }
        if (json) {
            libs.configure(json.libs || {});
            themes.configure(json.themes || {});
            debug.configure(json.debug || {});
        }
        onComplete(json);
    }
    var libs;
    (function (libs_1) {
        function configure(json) {
            var libs = [];
            for (var libName in json) {
                libs.push(getLibConfig(libName, json[libName]));
            }
            for (var i = 0; i < libs.length; i++) {
                setupLibraryConfig(libs[i]);
            }
        }
        libs_1.configure = configure;
        function getLibConfig(libName, libJson) {
            return {
                name: libName,
                path: libJson.path,
                base: libJson.base,
                deps: libJson.deps,
                exports: libJson.exports,
                useMin: libJson.useMin
            };
        }
        function setupLibraryConfig(lib) {
            var uri = new Fayde.Uri(lib.name);
            if (uri.scheme !== "http")
                uri = new Fayde.Uri("lib://" + lib.name);
            var library = Fayde.TypeManager.resolveLibrary(uri.toString());
            if (!!lib.path)
                library.sourcePath = lib.path;
            if (!!lib.base)
                library.basePath = lib.base;
            if (!!lib.exports)
                library.exports = lib.exports;
            if (!!lib.deps)
                library.deps = lib.deps;
            library.useMin = (lib.useMin === true);
            library.$configModule();
        }
    })(libs || (libs = {}));
    var themes;
    (function (themes) {
        function configure(json) {
            for (var libName in json) {
                var co = json[libName];
                var path = co === "none" ? null : (co.path ? co.path : undefined);
                Fayde.ThemeConfig.Set(libName, path);
            }
        }
        themes.configure = configure;
    })(themes || (themes = {}));
    var debug;
    (function (debug) {
        function configure(json) {
            if (toBoolean(json.warnMissingThemes))
                Fayde.Theme.WarnMissing = true;
            if (toBoolean(json.warnBrokenPath))
                Fayde.Data.WarnBrokenPath = true;
        }
        debug.configure = configure;
        function toBoolean(val) {
            return val === "true"
                || val === true;
        }
    })(debug || (debug = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Render;
    (function (Render) {
        Render.Debug = false;
        Render.DebugIndent = 0;
    })(Render = Fayde.Render || (Fayde.Render = {}));
    var Layout;
    (function (Layout) {
        Layout.Debug = false;
        Layout.DebugIndent = 0;
    })(Layout = Fayde.Layout || (Fayde.Layout = {}));
    var Media;
    (function (Media) {
        var Animation;
        (function (Animation) {
            Animation.Log = false;
            Animation.LogApply = false;
        })(Animation = Media.Animation || (Media.Animation = {}));
        var VSM;
        (function (VSM) {
            VSM.Debug = false;
        })(VSM = Media.VSM || (Media.VSM = {}));
    })(Media = Fayde.Media || (Fayde.Media = {}));
    var Data;
    (function (Data) {
        Data.Debug = false;
        Data.IsCounterEnabled = false;
        Data.DataContextCounter = 0;
    })(Data = Fayde.Data || (Fayde.Data = {}));
    Fayde.IsInspectionOn = false;
})(Fayde || (Fayde = {}));
var NumberEx;
(function (NumberEx) {
    var epsilon = 1.192093E-07;
    var adjustment = 10;
    function AreClose(val1, val2) {
        if (val1 === val2)
            return true;
        var softdiff = (Math.abs(val1) + Math.abs(val2) + adjustment) * epsilon;
        var diff = val1 - val2;
        return -softdiff < diff && diff < softdiff;
    }
    NumberEx.AreClose = AreClose;
    function IsLessThanClose(val1, val2) {
        return val1 > val2 || !AreClose(val1, val2);
    }
    NumberEx.IsLessThanClose = IsLessThanClose;
    function IsGreaterThanClose(val1, val2) {
        return val1 > val2 || !AreClose(val1, val2);
    }
    NumberEx.IsGreaterThanClose = IsGreaterThanClose;
})(NumberEx || (NumberEx = {}));
var StringEx;
(function (StringEx) {
    function Format(format) {
        var items = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            items[_i - 1] = arguments[_i];
        }
        var args = arguments;
        return format.replace(/{(\d+)}/g, function (match) {
            var matches = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                matches[_i - 1] = arguments[_i];
            }
            var i = parseInt(matches[0]);
            return typeof items[i] != 'undefined'
                ? items[i]
                : match;
        });
    }
    StringEx.Format = Format;
})(StringEx || (StringEx = {}));
var TimelineProfile = (function () {
    function TimelineProfile() {
    }
    TimelineProfile.Parse = function (isStart, name) {
        if (!isStart)
            return TimelineProfile._FinishEvent("Parse", name);
        TimelineProfile._Events.push({
            Type: "Parse",
            Name: name,
            Time: new Date().valueOf()
        });
    };
    TimelineProfile.Navigate = function (isStart, name) {
        if (!isStart)
            return TimelineProfile._FinishEvent("Navigate", name);
        TimelineProfile._Events.push({
            Type: "Navigate",
            Name: name,
            Time: new Date().valueOf(),
        });
    };
    TimelineProfile.LayoutPass = function (isStart) {
        if (!TimelineProfile.IsNextLayoutPassProfiled)
            return;
        if (!isStart) {
            TimelineProfile.IsNextLayoutPassProfiled = false;
            return TimelineProfile._FinishEvent("LayoutPass");
        }
        TimelineProfile._Events.push({
            Type: "LayoutPass",
            Name: "",
            Time: new Date().valueOf(),
        });
    };
    TimelineProfile._FinishEvent = function (type, name) {
        var evts = TimelineProfile._Events;
        var len = evts.length;
        var evt;
        for (var i = len - 1; i >= 0; i--) {
            evt = evts[i];
            if (evt.Type === type && (!name || evt.Name === name)) {
                evts.splice(i, 1);
                break;
            }
            evt = null;
        }
        if (!evt)
            return;
        TimelineProfile.Groups.push({
            Type: evt.Type,
            Data: evt.Name,
            Start: evt.Time - TimelineProfile.TimelineStart,
            Length: new Date().valueOf() - evt.Time
        });
    };
    TimelineProfile._Events = [];
    TimelineProfile.Groups = [];
    TimelineProfile.TimelineStart = 0;
    TimelineProfile.IsNextLayoutPassProfiled = true;
    return TimelineProfile;
})();
TimelineProfile.TimelineStart = new Date().valueOf();
/// <reference path="../Core/XamlObjectCollection.ts" />
var Fayde;
(function (Fayde) {
    var Shapes;
    (function (Shapes) {
        var DoubleCollection = (function (_super) {
            __extends(DoubleCollection, _super);
            function DoubleCollection() {
                _super.apply(this, arguments);
            }
            return DoubleCollection;
        })(Fayde.XamlObjectCollection);
        Shapes.DoubleCollection = DoubleCollection;
        Fayde.CoreLibrary.add(DoubleCollection);
    })(Shapes = Fayde.Shapes || (Fayde.Shapes = {}));
})(Fayde || (Fayde = {}));
/// <reference path="../Core/FrameworkElement.ts" />
var Fayde;
(function (Fayde) {
    var Shapes;
    (function (Shapes) {
        var ShapeUpdater = minerva.shapes.shape.ShapeUpdater;
        var Shape = (function (_super) {
            __extends(Shape, _super);
            function Shape() {
                _super.call(this);
                Fayde.FrameworkElement.WidthProperty.Store.ListenToChanged(this, Fayde.FrameworkElement.WidthProperty, onSizeChanged, this);
                Fayde.FrameworkElement.HeightProperty.Store.ListenToChanged(this, Fayde.FrameworkElement.HeightProperty, onSizeChanged, this);
            }
            Shape.prototype.CreateLayoutUpdater = function () {
                return new ShapeUpdater();
            };
            Shape.FillProperty = DependencyProperty.Register("Fill", function () { return Fayde.Media.Brush; }, Shape);
            Shape.StretchProperty = DependencyProperty.Register("Stretch", function () { return new Fayde.Enum(Fayde.Media.Stretch); }, Shape, Fayde.Media.Stretch.None);
            Shape.StrokeProperty = DependencyProperty.Register("Stroke", function () { return Fayde.Media.Brush; }, Shape);
            Shape.StrokeThicknessProperty = DependencyProperty.RegisterFull("StrokeThickness", function () { return Number; }, Shape, 1.0, undefined, strokeThicknessCoercer);
            Shape.StrokeDashArrayProperty = DependencyProperty.Register("StrokeDashArray", function () { return Shapes.DoubleCollection; }, Shape);
            Shape.StrokeDashCapProperty = DependencyProperty.Register("StrokeDashCap", function () { return new Fayde.Enum(Shapes.PenLineCap); }, Shape, Shapes.PenLineCap.Flat);
            Shape.StrokeDashOffsetProperty = DependencyProperty.Register("StrokeDashOffset", function () { return Number; }, Shape, 0.0);
            Shape.StrokeEndLineCapProperty = DependencyProperty.Register("StrokeEndLineCap", function () { return new Fayde.Enum(Shapes.PenLineCap); }, Shape, Shapes.PenLineCap.Flat);
            Shape.StrokeLineJoinProperty = DependencyProperty.Register("StrokeLineJoin", function () { return new Fayde.Enum(Shapes.PenLineJoin); }, Shape, Shapes.PenLineJoin.Miter);
            Shape.StrokeMiterLimitProperty = DependencyProperty.Register("StrokeMiterLimit", function () { return Number; }, Shape, 10.0);
            Shape.StrokeStartLineCapProperty = DependencyProperty.Register("StrokeStartLineCap", function () { return new Fayde.Enum(Shapes.PenLineCap); }, Shape, Shapes.PenLineCap.Flat);
            return Shape;
        })(Fayde.FrameworkElement);
        Shapes.Shape = Shape;
        Fayde.CoreLibrary.add(Shape);
        function onSizeChanged(shape, args) {
            var updater = shape.XamlNode.LayoutUpdater;
            updater.invalidateMeasure();
        }
        function strokeThicknessCoercer(dobj, propd, value) {
            if (value instanceof Thickness)
                return value.left;
            return value;
        }
        var reactions;
        (function (reactions) {
            Fayde.UIReaction(Shape.StretchProperty, function (upd, ov, nv) { return upd.invalidateMeasure(); }, false);
            Fayde.UIReaction(Shape.FillProperty, function (upd, ov, nv) { return upd.invalidateNaturalBounds(); });
            Fayde.UIReaction(Shape.StrokeProperty, function (upd, ov, nv) { return upd.invalidateNaturalBounds(); });
            Fayde.UIReaction(Shape.StrokeThicknessProperty, function (upd, ov, nv) { return upd.invalidateNaturalBounds(); }, false);
            Fayde.UIReaction(Shape.StrokeDashArrayProperty, function (upd, ov, nv) { return upd.invalidateNaturalBounds(); });
            Fayde.UIReaction(Shape.StrokeDashCapProperty, function (upd, ov, nv) { return upd.invalidateNaturalBounds(); }, false);
            Fayde.UIReaction(Shape.StrokeDashOffsetProperty, function (upd, ov, nv) { return upd.invalidateNaturalBounds(); }, false);
            Fayde.UIReaction(Shape.StrokeEndLineCapProperty, function (upd, ov, nv) { return upd.invalidateNaturalBounds(); }, false);
            Fayde.UIReaction(Shape.StrokeLineJoinProperty, function (upd, ov, nv) { return upd.invalidateNaturalBounds(); }, false);
            Fayde.UIReaction(Shape.StrokeMiterLimitProperty, function (upd, ov, nv) { return upd.invalidateNaturalBounds(); }, false);
            Fayde.UIReaction(Shape.StrokeStartLineCapProperty, function (upd, ov, nv) { return upd.invalidateNaturalBounds(); }, false);
        })(reactions || (reactions = {}));
    })(Shapes = Fayde.Shapes || (Fayde.Shapes = {}));
})(Fayde || (Fayde = {}));
/// <reference path="Shape.ts" />
var Fayde;
(function (Fayde) {
    var Shapes;
    (function (Shapes) {
        var EllipseUpdater = minerva.shapes.ellipse.EllipseUpdater;
        var Ellipse = (function (_super) {
            __extends(Ellipse, _super);
            function Ellipse() {
                _super.call(this);
                this.Stretch = Fayde.Media.Stretch.Fill;
            }
            Ellipse.prototype.CreateLayoutUpdater = function () {
                return new EllipseUpdater();
            };
            return Ellipse;
        })(Shapes.Shape);
        Shapes.Ellipse = Ellipse;
        Fayde.CoreLibrary.add(Ellipse);
    })(Shapes = Fayde.Shapes || (Fayde.Shapes = {}));
})(Fayde || (Fayde = {}));
/// <reference path="Shape.ts" />
var Fayde;
(function (Fayde) {
    var Shapes;
    (function (Shapes) {
        var LineUpdater = minerva.shapes.line.LineUpdater;
        var Line = (function (_super) {
            __extends(Line, _super);
            function Line() {
                _super.apply(this, arguments);
            }
            Line.prototype.CreateLayoutUpdater = function () {
                return new LineUpdater();
            };
            Line.X1Property = DependencyProperty.Register("X1", function () { return Number; }, Line, 0.0);
            Line.Y1Property = DependencyProperty.Register("Y1", function () { return Number; }, Line, 0.0);
            Line.X2Property = DependencyProperty.Register("X2", function () { return Number; }, Line, 0.0);
            Line.Y2Property = DependencyProperty.Register("Y2", function () { return Number; }, Line, 0.0);
            return Line;
        })(Shapes.Shape);
        Shapes.Line = Line;
        Fayde.CoreLibrary.add(Line);
        var reactions;
        (function (reactions) {
            Fayde.UIReaction(Line.X1Property, function (upd, ov, nv) { return upd.invalidatePath(); }, false);
            Fayde.UIReaction(Line.Y1Property, function (upd, ov, nv) { return upd.invalidatePath(); }, false);
            Fayde.UIReaction(Line.X2Property, function (upd, ov, nv) { return upd.invalidatePath(); }, false);
            Fayde.UIReaction(Line.Y2Property, function (upd, ov, nv) { return upd.invalidatePath(); }, false);
        })(reactions || (reactions = {}));
    })(Shapes = Fayde.Shapes || (Fayde.Shapes = {}));
})(Fayde || (Fayde = {}));
/// <reference path="Shape.ts" />
var Fayde;
(function (Fayde) {
    var Shapes;
    (function (Shapes) {
        var PathUpdater = minerva.shapes.path.PathUpdater;
        var Path = (function (_super) {
            __extends(Path, _super);
            function Path() {
                _super.apply(this, arguments);
            }
            Path.prototype.CreateLayoutUpdater = function () { return new PathUpdater(); };
            Path._DataCoercer = function (dobj, propd, value) {
                if (typeof value === "string")
                    return Fayde.Media.ParseGeometry(value);
                return value;
            };
            Path.DataProperty = DependencyProperty.RegisterFull("Data", function () { return Fayde.Media.Geometry; }, Path, undefined, undefined, Path._DataCoercer, undefined, undefined, false);
            return Path;
        })(Shapes.Shape);
        Shapes.Path = Path;
        Fayde.CoreLibrary.add(Path);
        var reactions;
        (function (reactions) {
            Fayde.UIReaction(Path.DataProperty, function (upd, ov, nv) { return upd.invalidateNaturalBounds(); });
        })(reactions || (reactions = {}));
    })(Shapes = Fayde.Shapes || (Fayde.Shapes = {}));
})(Fayde || (Fayde = {}));
/// <reference path="../Core/XamlObjectCollection.ts" />
var Fayde;
(function (Fayde) {
    var Shapes;
    (function (Shapes) {
        var PointCollection = (function () {
            function PointCollection() {
                this._ht = [];
            }
            Object.defineProperty(PointCollection.prototype, "Count", {
                get: function () {
                    return this._ht.length;
                },
                enumerable: true,
                configurable: true
            });
            PointCollection.FromData = function (data) {
                var pc = new PointCollection();
                pc._ht = pc._ht.concat(Fayde.Media.ParseShapePoints(data));
                return pc;
            };
            PointCollection.FromArray = function (data) {
                var pc = new PointCollection();
                pc._ht = pc._ht.concat(data);
                return pc;
            };
            PointCollection.prototype.GetValueAt = function (index) {
                return this._ht[index];
            };
            PointCollection.prototype.SetValueAt = function (index, value) {
                if (index < 0 || index >= this._ht.length)
                    return false;
                var removed = this._ht[index];
                var added = value;
                this._ht[index] = added;
                Fayde.Incite(this);
            };
            PointCollection.prototype.Add = function (value) {
                this._ht.push(value);
                Fayde.Incite(this);
            };
            PointCollection.prototype.AddRange = function (points) {
                this._ht.push.apply(this._ht, points);
                Fayde.Incite(this);
            };
            PointCollection.prototype.Insert = function (index, value) {
                if (index < 0)
                    return;
                var len = this._ht.length;
                if (index > len)
                    index = len;
                this._ht.splice(index, 0, value);
                Fayde.Incite(this);
            };
            PointCollection.prototype.Remove = function (value) {
                var index = this.IndexOf(value);
                if (index === -1)
                    return false;
                this.RemoveAt(index);
                Fayde.Incite(this);
                return true;
            };
            PointCollection.prototype.RemoveAt = function (index) {
                if (index < 0 || index >= this._ht.length)
                    return;
                var value = this._ht.splice(index, 1)[0];
                Fayde.Incite(this);
            };
            PointCollection.prototype.Clear = function () {
                this._ht = [];
                Fayde.Incite(this);
            };
            PointCollection.prototype.IndexOf = function (value) {
                var count = this._ht.length;
                for (var i = 0; i < count; i++) {
                    if (nullstone.equals(value, this._ht[i]))
                        return i;
                }
                return -1;
            };
            PointCollection.prototype.Contains = function (value) {
                return this.IndexOf(value) > -1;
            };
            PointCollection.prototype.getEnumerator = function (reverse) {
                return nullstone.IEnumerator_.fromArray(this._ht, reverse);
            };
            return PointCollection;
        })();
        Shapes.PointCollection = PointCollection;
        Fayde.CoreLibrary.add(PointCollection);
        nullstone.ICollection_.mark(PointCollection);
        nullstone.registerTypeConverter(PointCollection, function (val) {
            var pc = new PointCollection();
            pc.AddRange(Fayde.Media.ParseShapePoints(val));
            return pc;
        });
    })(Shapes = Fayde.Shapes || (Fayde.Shapes = {}));
})(Fayde || (Fayde = {}));
/// <reference path="Shape.ts" />
var Fayde;
(function (Fayde) {
    var Shapes;
    (function (Shapes) {
        var PolygonUpdater = minerva.shapes.polygon.PolygonUpdater;
        var Polygon = (function (_super) {
            __extends(Polygon, _super);
            function Polygon() {
                _super.call(this);
                this.Points = new Shapes.PointCollection();
            }
            Polygon.prototype.CreateLayoutUpdater = function () {
                return new PolygonUpdater();
            };
            Polygon._PointsCoercer = function (dobj, propd, value) {
                if (typeof value === "string")
                    value = Shapes.PointCollection.FromData(value);
                if (value instanceof Array)
                    value = Shapes.PointCollection.FromArray(value);
                return value;
            };
            Polygon.FillRuleProperty = DependencyProperty.RegisterCore("FillRule", function () { return new Fayde.Enum(Shapes.FillRule); }, Polygon, Shapes.FillRule.EvenOdd);
            Polygon.PointsProperty = DependencyProperty.RegisterFull("Points", function () { return Shapes.PointCollection; }, Polygon, undefined, undefined, Polygon._PointsCoercer);
            return Polygon;
        })(Shapes.Shape);
        Shapes.Polygon = Polygon;
        Fayde.CoreLibrary.add(Polygon);
        var reactions;
        (function (reactions) {
            Fayde.UIReaction(Polygon.FillRuleProperty, function (upd, ov, nv) { return upd.invalidateFillRule(); }, false);
            Fayde.UIReaction(Polygon.PointsProperty, function (upd, ov, nv) {
                upd.assets.points = nv._ht;
                upd.invalidatePath();
            }, true, false);
        })(reactions || (reactions = {}));
    })(Shapes = Fayde.Shapes || (Fayde.Shapes = {}));
})(Fayde || (Fayde = {}));
/// <reference path="Shape.ts" />
var Fayde;
(function (Fayde) {
    var Shapes;
    (function (Shapes) {
        var PolylineUpdater = minerva.shapes.polyline.PolylineUpdater;
        var Polyline = (function (_super) {
            __extends(Polyline, _super);
            function Polyline() {
                _super.call(this);
                this.Points = new Shapes.PointCollection();
            }
            Polyline.prototype.CreateLayoutUpdater = function () {
                return new PolylineUpdater();
            };
            Polyline._PointsCoercer = function (d, propd, value) {
                if (typeof value === "string")
                    value = Shapes.PointCollection.FromData(value);
                if (value instanceof Array)
                    value = Shapes.PointCollection.FromArray(value);
                return value;
            };
            Polyline.FillRuleProperty = DependencyProperty.RegisterCore("FillRule", function () { return new Fayde.Enum(Shapes.FillRule); }, Polyline, Shapes.FillRule.EvenOdd);
            Polyline.PointsProperty = DependencyProperty.RegisterFull("Points", function () { return Shapes.PointCollection; }, Polyline, undefined, undefined, Polyline._PointsCoercer);
            return Polyline;
        })(Shapes.Shape);
        Shapes.Polyline = Polyline;
        Fayde.CoreLibrary.add(Polyline);
        var reactions;
        (function (reactions) {
            Fayde.UIReaction(Polyline.FillRuleProperty, function (upd, ov, nv) { return upd.invalidateFillRule(); }, false);
            Fayde.UIReaction(Polyline.PointsProperty, function (upd, ov, nv) {
                upd.assets.points = nv._ht;
                upd.invalidatePath();
            }, true, false);
        })(reactions || (reactions = {}));
    })(Shapes = Fayde.Shapes || (Fayde.Shapes = {}));
})(Fayde || (Fayde = {}));
/// <reference path="Shape.ts" />
var Fayde;
(function (Fayde) {
    var Shapes;
    (function (Shapes) {
        var RectangleUpdater = minerva.shapes.rectangle.RectangleUpdater;
        var Rectangle = (function (_super) {
            __extends(Rectangle, _super);
            function Rectangle() {
                _super.call(this);
                this.Stretch = Fayde.Media.Stretch.Fill;
            }
            Rectangle.prototype.CreateLayoutUpdater = function () {
                return new RectangleUpdater();
            };
            Rectangle.RadiusXProperty = DependencyProperty.Register("RadiusX", function () { return Number; }, Rectangle, 0.0);
            Rectangle.RadiusYProperty = DependencyProperty.Register("RadiusY", function () { return Number; }, Rectangle, 0.0);
            return Rectangle;
        })(Shapes.Shape);
        Shapes.Rectangle = Rectangle;
        Fayde.CoreLibrary.add(Rectangle);
        var reactions;
        (function (reactions) {
            Fayde.UIReaction(Rectangle.RadiusXProperty, function (upd, ov, nv) { return upd.invalidate(); }, false);
            Fayde.UIReaction(Rectangle.RadiusYProperty, function (upd, ov, nv) { return upd.invalidate(); }, false);
        })(reactions || (reactions = {}));
    })(Shapes = Fayde.Shapes || (Fayde.Shapes = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Text;
    (function (Text) {
        var Buffer;
        (function (Buffer) {
            function cut(text, start, len) {
                if (!text)
                    return "";
                return text.slice(0, start) + text.slice(start + len);
            }
            Buffer.cut = cut;
            function insert(text, index, str) {
                if (!text)
                    return str;
                return [text.slice(0, index), str, text.slice(index)].join('');
            }
            Buffer.insert = insert;
            function replace(text, start, len, str) {
                if (!text)
                    return str;
                return [text.slice(0, start), str, text.slice(start + len)].join('');
            }
            Buffer.replace = replace;
        })(Buffer = Text.Buffer || (Text.Buffer = {}));
    })(Text = Fayde.Text || (Fayde.Text = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Text;
    (function (Text) {
        (function (EmitChangedType) {
            EmitChangedType[EmitChangedType["NOTHING"] = 0] = "NOTHING";
            EmitChangedType[EmitChangedType["SELECTION"] = 1] = "SELECTION";
            EmitChangedType[EmitChangedType["TEXT"] = 2] = "TEXT";
        })(Text.EmitChangedType || (Text.EmitChangedType = {}));
        var EmitChangedType = Text.EmitChangedType;
        var Proxy = (function () {
            function Proxy(eventsMask, maxUndoCount) {
                this.selAnchor = 0;
                this.selCursor = 0;
                this.selText = "";
                this.text = "";
                this.maxLength = 0;
                this.acceptsReturn = false;
                this.$$batch = 0;
                this.$$emit = EmitChangedType.NOTHING;
                this.$$syncing = false;
                this.$$eventsMask = eventsMask;
                this.$$history = new Text.History.Tracker(maxUndoCount);
                this.SyncSelectionStart = function (value) {
                };
                this.SyncSelectionLength = function (value) {
                };
                this.SyncText = function (value) {
                };
            }
            Proxy.prototype.setAnchorCursor = function (anchor, cursor) {
                if (this.selAnchor === anchor && this.selCursor === cursor)
                    return false;
                this.SyncSelectionStart(Math.min(anchor, cursor));
                this.SyncSelectionLength(Math.abs(cursor - anchor));
                this.selAnchor = anchor;
                this.selCursor = cursor;
                this.$$emit |= EmitChangedType.SELECTION;
                return true;
            };
            Proxy.prototype.enterText = function (newText) {
                var anchor = this.selAnchor;
                var cursor = this.selCursor;
                var length = Math.abs(cursor - anchor);
                var start = Math.min(anchor, cursor);
                if ((this.maxLength > 0 && this.text.length >= this.maxLength) || (newText === '\r') && !this.acceptsReturn)
                    return false;
                if (length > 0) {
                    this.$$history.replace(anchor, cursor, this.text, start, length, newText);
                    this.text = Text.Buffer.replace(this.text, start, length, newText);
                }
                else {
                    this.$$history.enter(anchor, cursor, start, newText);
                    this.text = Text.Buffer.insert(this.text, start, newText);
                }
                this.$$emit |= EmitChangedType.TEXT;
                cursor = start + 1;
                anchor = cursor;
                return this.setAnchorCursor(anchor, cursor);
            };
            Proxy.prototype.removeText = function (start, length) {
                if (length <= 0)
                    return false;
                this.$$history.delete(this.selAnchor, this.selCursor, this.text, start, length);
                this.text = Text.Buffer.cut(this.text, start, length);
                this.$$emit |= EmitChangedType.TEXT;
                return this.setAnchorCursor(start, start);
            };
            Proxy.prototype.undo = function () {
                var action = this.$$history.undo(this);
                if (!action)
                    return;
                var anchor = action.SelectionAnchor;
                var cursor = action.SelectionCursor;
                this.$$batch++;
                this.SyncSelectionStart(Math.min(anchor, cursor));
                this.SyncSelectionLength(Math.abs(cursor - anchor));
                this.$$emit = EmitChangedType.TEXT | EmitChangedType.SELECTION;
                this.selAnchor = anchor;
                this.selCursor = cursor;
                this.$$batch--;
                this.$syncEmit();
            };
            Proxy.prototype.redo = function () {
                var anchor = this.$$history.redo(this);
                if (anchor == null)
                    return;
                var cursor = anchor;
                this.$$batch++;
                this.SyncSelectionStart(Math.min(anchor, cursor));
                this.SyncSelectionLength(Math.abs(cursor - anchor));
                this.$$emit = EmitChangedType.TEXT | EmitChangedType.SELECTION;
                this.selAnchor = anchor;
                this.selCursor = cursor;
                this.$$batch--;
                this.$syncEmit();
            };
            Proxy.prototype.begin = function () {
                this.$$emit = EmitChangedType.NOTHING;
                this.$$batch++;
            };
            Proxy.prototype.end = function () {
                this.$$batch--;
                this.$syncEmit();
            };
            Proxy.prototype.beginSelect = function (cursor) {
                this.$$batch++;
                this.$$emit = EmitChangedType.NOTHING;
                this.SyncSelectionStart(cursor);
                this.SyncSelectionLength(0);
                this.$$batch--;
                this.$syncEmit();
            };
            Proxy.prototype.adjustSelection = function (cursor) {
                var anchor = this.selAnchor;
                this.$$batch++;
                this.$$emit = EmitChangedType.NOTHING;
                this.SyncSelectionStart(Math.min(anchor, cursor));
                this.SyncSelectionLength(Math.abs(cursor - anchor));
                this.selAnchor = anchor;
                this.selCursor = cursor;
                this.$$batch--;
                this.$syncEmit();
            };
            Proxy.prototype.selectAll = function () {
                this.select(0, this.text.length);
            };
            Proxy.prototype.clearSelection = function (start) {
                this.$$batch++;
                this.SyncSelectionStart(start);
                this.SyncSelectionLength(0);
                this.$$batch--;
            };
            Proxy.prototype.select = function (start, length) {
                start = Math.min(Math.max(0, start), this.text.length);
                length = Math.min(Math.max(0, length), this.text.length - start);
                this.$$batch++;
                this.SyncSelectionStart(start);
                this.SyncSelectionLength(length);
                this.$$batch--;
                this.$syncEmit();
                return true;
            };
            Proxy.prototype.setSelectionStart = function (value) {
                var length = Math.abs(this.selCursor - this.selAnchor);
                var start = value;
                if (start > this.text.length) {
                    this.SyncSelectionStart(this.text.length);
                    return;
                }
                if (start + length > this.text.length) {
                    this.$$batch++;
                    length = this.text.length - start;
                    this.SyncSelectionLength(length);
                    this.$$batch--;
                }
                var changed = (this.selAnchor !== start);
                this.selCursor = start + length;
                this.selAnchor = start;
                this.$$emit |= EmitChangedType.SELECTION;
                this.$syncEmit();
            };
            Proxy.prototype.setSelectionLength = function (value) {
                var start = Math.min(this.selAnchor, this.selCursor);
                var length = value;
                if (start + length > this.text.length) {
                    length = this.text.length - start;
                    this.SyncSelectionLength(length);
                    return;
                }
                var changed = (this.selCursor !== (start + length));
                this.selCursor = start + length;
                this.selAnchor = start;
                this.$$emit |= EmitChangedType.SELECTION;
                this.$syncEmit();
            };
            Proxy.prototype.setText = function (value) {
                var text = value || "";
                if (!this.$$syncing) {
                    if (this.text.length > 0) {
                        this.$$history.replace(this.selAnchor, this.selCursor, this.text, 0, this.text.length, text);
                        this.text = Text.Buffer.replace(this.text, 0, this.text.length, text);
                    }
                    else {
                        this.$$history.insert(this.selAnchor, this.selCursor, 0, text);
                        this.text = text + this.text;
                    }
                    this.$$emit |= EmitChangedType.TEXT;
                    this.clearSelection(0);
                    this.$syncEmit(false);
                }
            };
            Proxy.prototype.$syncEmit = function (syncText) {
                syncText = syncText !== false;
                if (this.$$batch !== 0 || this.$$emit === EmitChangedType.NOTHING)
                    return;
                if (syncText && (this.$$emit & EmitChangedType.TEXT))
                    this.$syncText();
                this.$$emit = EmitChangedType.NOTHING;
            };
            Proxy.prototype.$syncText = function () {
                this.$$syncing = true;
                this.SyncText(this.text);
                this.$$syncing = false;
            };
            return Proxy;
        })();
        Text.Proxy = Proxy;
    })(Text = Fayde.Text || (Fayde.Text = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Validation;
    (function (Validation) {
        function Emit(fe, binding, oldError, error) {
            if (oldError && error) {
                Validation.AddError(fe, error);
                Validation.RemoveError(fe, oldError);
                if (binding.NotifyOnValidationError) {
                    raiseBindingValidationError(fe, new Validation.ValidationErrorEventArgs(Validation.ValidationErrorEventAction.Removed, oldError));
                    raiseBindingValidationError(fe, new Validation.ValidationErrorEventArgs(Validation.ValidationErrorEventAction.Added, error));
                }
            }
            else if (oldError) {
                Validation.RemoveError(fe, oldError);
                if (binding.NotifyOnValidationError)
                    raiseBindingValidationError(fe, new Validation.ValidationErrorEventArgs(Validation.ValidationErrorEventAction.Removed, oldError));
            }
            else if (error) {
                Validation.AddError(fe, error);
                if (binding.NotifyOnValidationError)
                    raiseBindingValidationError(fe, new Validation.ValidationErrorEventArgs(Validation.ValidationErrorEventAction.Added, error));
            }
        }
        Validation.Emit = Emit;
        function raiseBindingValidationError(fe, args) {
            args.OriginalSource = fe;
            for (var cur = fe; cur && !args.Handled; cur = Fayde.VisualTreeHelper.GetParent(cur)) {
                if (cur instanceof Fayde.FrameworkElement)
                    cur.OnBindingValidationError(args);
            }
        }
    })(Validation = Fayde.Validation || (Fayde.Validation = {}));
})(Fayde || (Fayde = {}));
/// <reference path="../Collections/ObservableCollection" />
/// <reference path="../Collections/ReadOnlyObservableCollection" />
var Fayde;
(function (Fayde) {
    var Validation;
    (function (Validation_1) {
        var ObservableCollection = Fayde.Collections.ObservableCollection;
        var ReadOnlyObservableCollection = Fayde.Collections.ReadOnlyObservableCollection;
        var Validation = (function (_super) {
            __extends(Validation, _super);
            function Validation() {
                _super.apply(this, arguments);
            }
            return Validation;
        })(Fayde.DependencyObject);
        Fayde.CoreLibrary.add(Validation, "Validation");
        Validation_1.HasErrorProperty = DependencyProperty.RegisterAttached("HasError", function () { return Boolean; }, Validation);
        Validation_1.ErrorsProperty = DependencyProperty.RegisterAttached("Errors", function () { return ReadOnlyObservableCollection; }, Validation);
        var ErrorsCoreProperty = DependencyProperty.RegisterAttached("ErrorsCore", function () { return ObservableCollection; }, Validation);
        function GetErrorsCore(dobj) {
            if (!dobj)
                throw new ArgumentNullException("element");
            var result = dobj.GetValue(ErrorsCoreProperty);
            if (result == null) {
                result = new ObservableCollection();
                dobj.SetValue(ErrorsCoreProperty, result);
            }
            return result;
        }
        function GetErrors(dobj) {
            if (!dobj)
                throw new ArgumentNullException("element");
            var result = dobj.GetValue(Validation_1.ErrorsProperty);
            if (result == null) {
                result = new ReadOnlyObservableCollection(GetErrorsCore(dobj));
                dobj.SetValue(Validation_1.ErrorsProperty, result);
            }
            return result;
        }
        Validation_1.GetErrors = GetErrors;
        function GetHasError(dobj) {
            if (dobj == null)
                throw new ArgumentNullException("element");
            return dobj.GetValue(Validation_1.HasErrorProperty) === true;
        }
        Validation_1.GetHasError = GetHasError;
        function SetHasError(dobj, value) {
            dobj.SetValue(Validation_1.HasErrorProperty, value === true);
        }
        function AddError(element, error) {
            var errors = GetErrorsCore(element);
            GetErrors(element);
            errors.Add(error);
            if (errors.Count === 1)
                SetHasError(element, true);
            if (element instanceof Fayde.Controls.Control)
                element.UpdateValidationState(false);
        }
        Validation_1.AddError = AddError;
        function RemoveError(element, error) {
            var errors = GetErrorsCore(element);
            GetErrors(element);
            if (errors.Remove(error)) {
                if (errors.Count === 0) {
                    SetHasError(element, false);
                    if (element instanceof Fayde.Controls.Control)
                        element.UpdateValidationState(true);
                }
            }
        }
        Validation_1.RemoveError = RemoveError;
    })(Validation = Fayde.Validation || (Fayde.Validation = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Validation;
    (function (Validation) {
        var ValidationError = (function () {
            function ValidationError(content, exception, propertyName) {
                this.ErrorContent = content;
                this.Exception = exception;
                this.PropertyName = propertyName;
                if (this.Exception instanceof Exception)
                    this.ErrorContent = this.ErrorContent || exception.Message;
                if (this.Exception instanceof Error)
                    this.ErrorContent = this.ErrorContent || exception.message;
                Object.freeze(this);
            }
            return ValidationError;
        })();
        Validation.ValidationError = ValidationError;
    })(Validation = Fayde.Validation || (Fayde.Validation = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Validation;
    (function (Validation) {
        (function (ValidationErrorEventAction) {
            ValidationErrorEventAction[ValidationErrorEventAction["Added"] = 0] = "Added";
            ValidationErrorEventAction[ValidationErrorEventAction["Removed"] = 1] = "Removed";
        })(Validation.ValidationErrorEventAction || (Validation.ValidationErrorEventAction = {}));
        var ValidationErrorEventAction = Validation.ValidationErrorEventAction;
    })(Validation = Fayde.Validation || (Fayde.Validation = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Validation;
    (function (Validation) {
        var ValidationErrorEventArgs = (function (_super) {
            __extends(ValidationErrorEventArgs, _super);
            function ValidationErrorEventArgs(action, error) {
                _super.call(this);
                Object.defineProperties(this, {
                    "Action": {
                        value: action,
                        writable: false
                    },
                    "Error": {
                        value: error,
                        writable: false
                    }
                });
            }
            return ValidationErrorEventArgs;
        })(Fayde.RoutedEventArgs);
        Validation.ValidationErrorEventArgs = ValidationErrorEventArgs;
    })(Validation = Fayde.Validation || (Fayde.Validation = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        var Internal;
        (function (Internal) {
            var TextBoxCursorAdvancer = (function () {
                function TextBoxCursorAdvancer($textOwner) {
                    this.$textOwner = $textOwner;
                }
                TextBoxCursorAdvancer.prototype.CursorDown = function (cursor, isPage) {
                    return cursor;
                };
                TextBoxCursorAdvancer.prototype.CursorUp = function (cursor, isPage) {
                    return cursor;
                };
                TextBoxCursorAdvancer.prototype.CursorNextWord = function (cursor) {
                    return cursor;
                };
                TextBoxCursorAdvancer.prototype.CursorPrevWord = function (cursor) {
                    return cursor;
                };
                TextBoxCursorAdvancer.prototype.CursorNextChar = function (cursor) {
                    var text = this.$textOwner.text;
                    if (text && text.charAt(cursor) === '\r' && text.charAt(cursor + 1) === '\n')
                        return cursor + 2;
                    return Math.min(text.length, cursor + 1);
                };
                TextBoxCursorAdvancer.prototype.CursorPrevChar = function (cursor) {
                    var text = this.$textOwner.text;
                    if (cursor >= 2 && text && text.charAt(cursor - 2) === '\r' && text.charAt(cursor - 1) === '\n')
                        return cursor - 2;
                    return Math.max(0, cursor - 1);
                };
                TextBoxCursorAdvancer.prototype.CursorLineBegin = function (cursor) {
                    var text = this.$textOwner.text;
                    var r = text.lastIndexOf("\r", cursor);
                    var n = text.lastIndexOf("\n", cursor);
                    return Math.max(r, n, 0);
                };
                TextBoxCursorAdvancer.prototype.CursorLineEnd = function (cursor) {
                    var text = this.$textOwner.text;
                    var len = text.length;
                    var r = text.indexOf("\r", cursor);
                    if (r < 0)
                        r = len;
                    var n = text.indexOf("\n", cursor);
                    if (n < 0)
                        n = len;
                    return Math.min(r, n);
                };
                TextBoxCursorAdvancer.prototype.CursorBegin = function (cursor) {
                    return 0;
                };
                TextBoxCursorAdvancer.prototype.CursorEnd = function (cursor) {
                    return this.$textOwner.text.length;
                };
                return TextBoxCursorAdvancer;
            })();
            Internal.TextBoxCursorAdvancer = TextBoxCursorAdvancer;
            var PasswordBoxCursorAdvancer = (function () {
                function PasswordBoxCursorAdvancer($textOwner) {
                    this.$textOwner = $textOwner;
                }
                PasswordBoxCursorAdvancer.prototype.CursorDown = function (cursor, isPage) {
                    return this.CursorEnd(cursor);
                };
                PasswordBoxCursorAdvancer.prototype.CursorUp = function (cursor, isPage) {
                    return this.CursorBegin(cursor);
                };
                PasswordBoxCursorAdvancer.prototype.CursorNextWord = function (cursor) {
                    return this.CursorEnd(cursor);
                };
                PasswordBoxCursorAdvancer.prototype.CursorPrevWord = function (cursor) {
                    return this.CursorBegin(cursor);
                };
                PasswordBoxCursorAdvancer.prototype.CursorNextChar = function (cursor) {
                    var text = this.$textOwner.text;
                    if (text && text.charAt(cursor) === '\r' && text.charAt(cursor + 1) === '\n')
                        return cursor + 2;
                    return Math.min(text.length - 1, cursor + 1);
                };
                PasswordBoxCursorAdvancer.prototype.CursorPrevChar = function (cursor) {
                    var text = this.$textOwner.text;
                    if (cursor >= 2 && text && text.charAt(cursor - 2) === '\r' && text.charAt(cursor - 1) === '\n')
                        return cursor - 2;
                    return Math.max(0, cursor - 1);
                };
                PasswordBoxCursorAdvancer.prototype.CursorLineBegin = function (cursor) {
                    return this.CursorBegin(cursor);
                };
                PasswordBoxCursorAdvancer.prototype.CursorLineEnd = function (cursor) {
                    return this.CursorEnd(cursor);
                };
                PasswordBoxCursorAdvancer.prototype.CursorBegin = function (cursor) {
                    return this.$textOwner.text.length;
                };
                PasswordBoxCursorAdvancer.prototype.CursorEnd = function (cursor) {
                    return 0;
                };
                return PasswordBoxCursorAdvancer;
            })();
            Internal.PasswordBoxCursorAdvancer = PasswordBoxCursorAdvancer;
        })(Internal = Controls.Internal || (Controls.Internal = {}));
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        var Internal;
        (function (Internal) {
            var ItemContainersManager = (function () {
                function ItemContainersManager(Owner) {
                    this.Owner = Owner;
                    this._Items = [];
                    this._Containers = [];
                    this._Cache = [];
                }
                Object.defineProperty(ItemContainersManager.prototype, "IsRecycling", {
                    get: function () {
                        var dobj = this.Owner;
                        if (dobj instanceof Fayde.DependencyObject)
                            return Controls.VirtualizingPanel.GetVirtualizationMode(dobj) === Controls.VirtualizationMode.Recycling;
                        return false;
                    },
                    enumerable: true,
                    configurable: true
                });
                ItemContainersManager.prototype.IndexFromContainer = function (container) { return this._Containers.indexOf(container); };
                ItemContainersManager.prototype.ContainerFromIndex = function (index) { return this._Containers[index]; };
                ItemContainersManager.prototype.ItemFromContainer = function (container) {
                    var index = this._Containers.indexOf(container);
                    if (index < 0)
                        return null;
                    return this._Items[index];
                };
                ItemContainersManager.prototype.ContainerFromItem = function (item) {
                    if (item == null)
                        return null;
                    var index = this._Items.indexOf(item);
                    if (index < 0)
                        return null;
                    return this._Containers[index];
                };
                ItemContainersManager.prototype.OnItemsAdded = function (index, newItems) {
                    var items = this._Items;
                    var containers = this._Containers;
                    for (var i = 0, len = newItems.length; i < len; i++) {
                        items.splice(index + i, 0, newItems[i]);
                        containers.splice(index + i, 0, null);
                    }
                };
                ItemContainersManager.prototype.OnItemsRemoved = function (index, oldItems) {
                    this.DisposeContainers(index, oldItems.length);
                    this._Items.splice(index, oldItems.length);
                    this._Containers.splice(index, oldItems.length);
                };
                ItemContainersManager.prototype.DisposeContainers = function (index, count) {
                    var containers = this._Containers;
                    var items = this._Items;
                    if (index == null)
                        index = 0;
                    if (count == null)
                        count = containers.length;
                    if (this.IsRecycling) {
                        for (var i = 0, cache = this._Cache, recycling = containers.slice(index, index + count), len = recycling.length; i < len; i++) {
                            var container = recycling[i];
                            if (container)
                                cache.push(container);
                        }
                    }
                    var disposed = [];
                    var ic = this.Owner;
                    for (var i = index; i < index + count; i++) {
                        var container = containers[i];
                        if (!container)
                            continue;
                        disposed.push(container);
                        var item = items[i];
                        ic.ClearContainerForItem(container, item);
                        containers[i] = null;
                    }
                    return disposed;
                };
                ItemContainersManager.prototype.CreateGenerator = function (index, count) {
                    var generator = {
                        IsCurrentNew: false,
                        Current: undefined,
                        CurrentItem: undefined,
                        CurrentIndex: index - 1,
                        GenerateIndex: -1,
                        Generate: function () { return false; }
                    };
                    var ic = this.Owner;
                    var icm = this;
                    var containers = this._Containers;
                    var items = this._Items;
                    var cache = this._Cache;
                    generator.Generate = function () {
                        generator.GenerateIndex++;
                        generator.CurrentIndex++;
                        generator.IsCurrentNew = false;
                        if (generator.CurrentIndex < 0 || generator.GenerateIndex >= count || generator.CurrentIndex >= containers.length) {
                            generator.Current = undefined;
                            generator.CurrentItem = undefined;
                            return false;
                        }
                        generator.CurrentItem = items[generator.CurrentIndex];
                        if ((generator.Current = containers[generator.CurrentIndex]) == null) {
                            if (ic.IsItemItsOwnContainer(generator.CurrentItem)) {
                                if (generator.CurrentItem instanceof Fayde.UIElement)
                                    generator.Current = generator.CurrentItem;
                                generator.IsCurrentNew = true;
                            }
                            else if (cache.length > 0) {
                                generator.Current = cache.pop();
                                generator.IsCurrentNew = true;
                            }
                            else {
                                generator.Current = ic.GetContainerForItem();
                                generator.IsCurrentNew = true;
                            }
                            containers[generator.CurrentIndex] = generator.Current;
                        }
                        return true;
                    };
                    return generator;
                };
                ItemContainersManager.prototype.GetEnumerator = function (start, count) {
                    var carr = this._Containers;
                    var iarr = this._Items;
                    var index = (start || 0) - 1;
                    var len = count == null ? carr.length : count;
                    var i = 0;
                    var e = { moveNext: undefined, current: undefined, CurrentItem: undefined, CurrentIndex: -1 };
                    e.moveNext = function () {
                        i++;
                        index++;
                        e.CurrentIndex = index;
                        if (i > len || index >= carr.length) {
                            e.current = undefined;
                            e.CurrentItem = undefined;
                            return false;
                        }
                        e.current = carr[index];
                        e.CurrentItem = iarr[index];
                        return true;
                    };
                    return e;
                };
                return ItemContainersManager;
            })();
            Internal.ItemContainersManager = ItemContainersManager;
        })(Internal = Controls.Internal || (Controls.Internal = {}));
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        var Internal;
        (function (Internal) {
            var RangeCoercer = (function () {
                function RangeCoercer(Range, OnCoerceMaximum, OnCoerceValue) {
                    this.Range = Range;
                    this.OnCoerceMaximum = OnCoerceMaximum;
                    this.OnCoerceValue = OnCoerceValue;
                    this.InitialMax = 1;
                    this.InitialVal = 0;
                    this.RequestedMax = 1;
                    this.RequestedVal = 0;
                    this.PreCoercedMax = 1;
                    this.PreCoercedVal = 0;
                    this.CoerceDepth = 0;
                    this.PreCoercedMax = this.RequestedMax = this.InitialMax = Range.Maximum;
                    this.PreCoercedVal = this.RequestedVal = this.InitialVal = Range.Value;
                }
                Object.defineProperty(RangeCoercer.prototype, "Minimum", {
                    get: function () { return this.Range.Minimum; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(RangeCoercer.prototype, "Maximum", {
                    get: function () { return this.Range.Maximum; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(RangeCoercer.prototype, "Value", {
                    get: function () { return this.Range.Value; },
                    enumerable: true,
                    configurable: true
                });
                RangeCoercer.prototype.OnMinimumChanged = function (oldMinimum, newMinimum) {
                    if (this.CoerceDepth === 0) {
                        this.InitialMax = this.Maximum;
                        this.InitialVal = this.Value;
                    }
                    this.CoerceDepth++;
                    this.CoerceMaximum();
                    this.CoerceValue();
                    this.CoerceDepth--;
                    if (this.CoerceDepth > 0)
                        return;
                    this.Range.OnMinimumChanged(oldMinimum, newMinimum);
                    var max = this.Maximum;
                    if (!NumberEx.AreClose(this.InitialMax, max))
                        this.Range.OnMaximumChanged(this.InitialMax, max);
                    var val = this.Value;
                    if (!NumberEx.AreClose(this.InitialVal, val))
                        this.Range.OnValueChanged(this.InitialVal, val);
                };
                RangeCoercer.prototype.OnMaximumChanged = function (oldMaximum, newMaximum) {
                    if (this.CoerceDepth === 0) {
                        this.RequestedMax = newMaximum;
                        this.InitialMax = oldMaximum;
                        this.InitialVal = this.Value;
                    }
                    this.CoerceDepth++;
                    this.CoerceMaximum();
                    this.CoerceValue();
                    this.CoerceDepth--;
                    if (this.CoerceDepth !== 0)
                        return;
                    this.PreCoercedMax = newMaximum;
                    var max = this.Maximum;
                    if (!NumberEx.AreClose(this.InitialMax, max))
                        this.Range.OnMaximumChanged(this.InitialMax, max);
                    var val = this.Value;
                    if (!NumberEx.AreClose(this.InitialVal, val))
                        this.Range.OnValueChanged(this.InitialVal, val);
                };
                RangeCoercer.prototype.OnValueChanged = function (oldValue, newValue) {
                    if (this.CoerceDepth === 0) {
                        this.RequestedVal = newValue;
                        this.InitialVal = oldValue;
                    }
                    this.CoerceDepth++;
                    this.CoerceValue();
                    this.CoerceDepth--;
                    if (this.CoerceDepth !== 0)
                        return;
                    this.PreCoercedVal = newValue;
                    var val = this.Value;
                    if (!NumberEx.AreClose(this.InitialVal, val))
                        this.Range.OnValueChanged(this.InitialVal, val);
                };
                RangeCoercer.prototype.CoerceMaximum = function () {
                    var min = this.Minimum;
                    var max = this.Maximum;
                    if (!NumberEx.AreClose(this.RequestedMax, max) && this.RequestedMax >= min)
                        this.OnCoerceMaximum(this.RequestedMax);
                    else if (max < min)
                        this.OnCoerceMaximum(min);
                };
                RangeCoercer.prototype.CoerceValue = function () {
                    var min = this.Minimum;
                    var max = this.Maximum;
                    var val = this.Value;
                    if (!NumberEx.AreClose(this.RequestedVal, val) && this.RequestedVal >= min && this.RequestedVal <= max)
                        this.OnCoerceValue(this.RequestedVal);
                    else if (val < min)
                        this.OnCoerceValue(min);
                    else if (val > max)
                        this.OnCoerceValue(max);
                };
                return RangeCoercer;
            })();
            Internal.RangeCoercer = RangeCoercer;
        })(Internal = Controls.Internal || (Controls.Internal = {}));
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        var Internal;
        (function (Internal) {
            var TextBoxContentProxy = (function () {
                function TextBoxContentProxy() {
                    this.$$element = null;
                }
                TextBoxContentProxy.prototype.setElement = function (fe, view) {
                    this.$$element = fe;
                    if (!fe)
                        return;
                    if (fe instanceof Controls.ContentPresenter) {
                        fe.SetValue(Controls.ContentPresenter.ContentProperty, view);
                    }
                    else if (fe instanceof Controls.ContentControl) {
                        fe.SetValue(Controls.ContentControl.ContentProperty, view);
                    }
                    else if (fe instanceof Controls.Border) {
                        fe.SetValue(Controls.Border.ChildProperty, view);
                    }
                    else if (fe instanceof Controls.Panel) {
                        fe.Children.Add(view);
                    }
                    else {
                        console.warn("TextBox does not have a valid content element.");
                    }
                };
                TextBoxContentProxy.prototype.setHorizontalScrollBar = function (sbvis) {
                    var ce = this.$$element;
                    if (!ce)
                        return;
                    var ceType = ce.constructor;
                    var propd = DependencyProperty.GetDependencyProperty(ceType, "HorizontalScrollBarVisibility", true);
                    if (!propd)
                        return;
                    ce.SetValueInternal(propd, sbvis);
                };
                TextBoxContentProxy.prototype.setVerticalScrollBar = function (sbvis) {
                    var ce = this.$$element;
                    if (!ce)
                        return;
                    var ceType = ce.constructor;
                    var propd = DependencyProperty.GetDependencyProperty(ceType, "VerticalScrollBarVisibility", true);
                    if (!propd)
                        return;
                    ce.SetValueInternal(propd, sbvis);
                };
                return TextBoxContentProxy;
            })();
            Internal.TextBoxContentProxy = TextBoxContentProxy;
        })(Internal = Controls.Internal || (Controls.Internal = {}));
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
/// <reference path="../../Core/FrameworkElement.ts" />
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        var Internal;
        (function (Internal) {
            var TextBoxViewUpdater = minerva.controls.textboxview.TextBoxViewUpdater;
            var TextBoxViewNode = (function (_super) {
                __extends(TextBoxViewNode, _super);
                function TextBoxViewNode() {
                    _super.apply(this, arguments);
                }
                return TextBoxViewNode;
            })(Fayde.FENode);
            Internal.TextBoxViewNode = TextBoxViewNode;
            var TextBoxView = (function (_super) {
                __extends(TextBoxView, _super);
                function TextBoxView() {
                    _super.call(this);
                    this._AutoRun = new Fayde.Documents.Run();
                    this.XamlNode.LayoutUpdater.tree.onTextAttached(this._AutoRun.TextUpdater);
                    Fayde.ReactTo(this._AutoRun, this, this._InlineChanged);
                }
                TextBoxView.prototype.CreateLayoutUpdater = function () {
                    return new TextBoxViewUpdater();
                };
                TextBoxView.prototype._InlineChanged = function (obj) {
                    var updater = this.XamlNode.LayoutUpdater;
                    switch (obj.type) {
                        case 'font':
                            updater.invalidateFont(obj.full);
                            break;
                        case 'text':
                            updater.invalidateTextMetrics();
                            break;
                    }
                };
                TextBoxView.prototype.setFontProperty = function (propd, value) {
                    this._AutoRun.SetValue(propd, value);
                };
                TextBoxView.prototype.setFontAttr = function (attrName, value) {
                    var runUpdater = this._AutoRun;
                    var tu = runUpdater.TextUpdater;
                    tu.assets[attrName] = value;
                };
                TextBoxView.prototype.setCaretBrush = function (value) {
                    var updater = this.XamlNode.LayoutUpdater;
                    updater.assets.caretBrush = value;
                    updater.invalidateCaret();
                };
                TextBoxView.prototype.setIsFocused = function (isFocused) {
                    var updater = this.XamlNode.LayoutUpdater;
                    if (updater.assets.isFocused === isFocused)
                        return;
                    updater.assets.isFocused = isFocused;
                    updater.resetCaretBlinker(false);
                };
                TextBoxView.prototype.setIsReadOnly = function (isReadOnly) {
                    var updater = this.XamlNode.LayoutUpdater;
                    if (updater.assets.isReadOnly === isReadOnly)
                        return;
                    updater.assets.isReadOnly = isReadOnly;
                    updater.resetCaretBlinker(false);
                };
                TextBoxView.prototype.setTextAlignment = function (textAlignment) {
                    var lu = this.XamlNode.LayoutUpdater;
                    if (lu.assets.textAlignment === textAlignment)
                        return;
                    lu.assets.textAlignment = textAlignment;
                    lu.invalidateMeasure();
                    lu.updateBounds(true);
                    lu.invalidate();
                };
                TextBoxView.prototype.setTextWrapping = function (textWrapping) {
                    var lu = this.XamlNode.LayoutUpdater;
                    if (lu.assets.textWrapping === textWrapping)
                        return;
                    lu.assets.textWrapping = textWrapping;
                    lu.invalidateMeasure();
                    lu.updateBounds(true);
                    lu.invalidate();
                };
                TextBoxView.prototype.setSelectionStart = function (selectionStart) {
                    var lu = this.XamlNode.LayoutUpdater;
                    if (lu.assets.selectionStart === selectionStart)
                        return;
                    lu.assets.selectionStart = selectionStart;
                    lu.invalidateSelectionStart();
                };
                TextBoxView.prototype.setSelectionLength = function (selectionLength) {
                    var lu = this.XamlNode.LayoutUpdater;
                    if (lu.assets.selectionLength === selectionLength)
                        return;
                    var switching = (lu.assets.selectionLength === 0) !== (selectionLength === 0);
                    lu.assets.selectionLength = selectionLength;
                    lu.invalidateSelectionLength(switching);
                };
                TextBoxView.prototype.setText = function (text) {
                    this._AutoRun.Text = text || "";
                };
                TextBoxView.prototype.GetCursorFromPoint = function (point) {
                    return this.XamlNode.LayoutUpdater.getCursorFromPoint(point);
                };
                return TextBoxView;
            })(Fayde.FrameworkElement);
            Internal.TextBoxView = TextBoxView;
            Fayde.RegisterType(TextBoxView, Fayde.XMLNSINTERNAL);
        })(Internal = Controls.Internal || (Controls.Internal = {}));
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        var Internal;
        (function (Internal) {
            var NO_GENERATOR = {
                current: undefined,
                generate: function () {
                    return false;
                }
            };
            var VirtualizingPanelContainerOwner = (function () {
                function VirtualizingPanelContainerOwner($$panel) {
                    this.$$panel = $$panel;
                }
                Object.defineProperty(VirtualizingPanelContainerOwner.prototype, "itemCount", {
                    get: function () {
                        var panel = this.$$panel;
                        var ic = panel ? panel.ItemsControl : null;
                        return ic ? ic.Items.Count : 0;
                    },
                    enumerable: true,
                    configurable: true
                });
                VirtualizingPanelContainerOwner.prototype.createGenerator = function (index, count) {
                    var panel = this.$$panel;
                    var ic = panel ? panel.ItemsControl : null;
                    var icm = ic ? ic.ItemContainersManager : null;
                    if (!icm)
                        return NO_GENERATOR;
                    var icgen = icm.CreateGenerator(index, count);
                    var children = panel.Children;
                    return {
                        current: undefined,
                        generate: function () {
                            this.current = undefined;
                            if (!icgen.Generate())
                                return false;
                            var child = icgen.Current;
                            if (icgen.IsCurrentNew) {
                                children.Insert(icgen.GenerateIndex, child);
                                ic.PrepareContainerForItem(child, icgen.CurrentItem);
                            }
                            this.current = child.XamlNode.LayoutUpdater;
                            return true;
                        }
                    };
                };
                VirtualizingPanelContainerOwner.prototype.remove = function (index, count) {
                    var panel = this.$$panel;
                    var ic = panel ? panel.ItemsControl : null;
                    var icm = ic ? ic.ItemContainersManager : null;
                    if (!icm)
                        return;
                    var old = icm.DisposeContainers(index, count);
                    var children = panel.Children;
                    for (var i = 0, len = old.length; i < len; i++) {
                        children.Remove(old[i]);
                    }
                };
                return VirtualizingPanelContainerOwner;
            })();
            Internal.VirtualizingPanelContainerOwner = VirtualizingPanelContainerOwner;
        })(Internal = Controls.Internal || (Controls.Internal = {}));
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
/// <reference path="../../Core/RoutedEventArgs.ts" />
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        var Primitives;
        (function (Primitives) {
            var DragCompletedEventArgs = (function (_super) {
                __extends(DragCompletedEventArgs, _super);
                function DragCompletedEventArgs(horizontal, vertical, canceled) {
                    _super.call(this);
                    Object.defineProperty(this, "HorizontalChange", { value: horizontal, writable: false });
                    Object.defineProperty(this, "VerticalChange", { value: vertical, writable: false });
                    Object.defineProperty(this, "Canceled", { value: canceled, writable: false });
                }
                return DragCompletedEventArgs;
            })(Fayde.RoutedEventArgs);
            Primitives.DragCompletedEventArgs = DragCompletedEventArgs;
            Fayde.CoreLibrary.add(DragCompletedEventArgs);
            var DragDeltaEventArgs = (function (_super) {
                __extends(DragDeltaEventArgs, _super);
                function DragDeltaEventArgs(horizontal, vertical) {
                    _super.call(this);
                    Object.defineProperty(this, "HorizontalChange", { value: horizontal, writable: false });
                    Object.defineProperty(this, "VerticalChange", { value: vertical, writable: false });
                }
                return DragDeltaEventArgs;
            })(Fayde.RoutedEventArgs);
            Primitives.DragDeltaEventArgs = DragDeltaEventArgs;
            Fayde.CoreLibrary.add(DragDeltaEventArgs);
            var DragStartedEventArgs = (function (_super) {
                __extends(DragStartedEventArgs, _super);
                function DragStartedEventArgs(horizontal, vertical) {
                    _super.call(this);
                    Object.defineProperty(this, "HorizontalOffset", { value: horizontal, writable: false });
                    Object.defineProperty(this, "VerticalOffset", { value: vertical, writable: false });
                }
                return DragStartedEventArgs;
            })(Fayde.RoutedEventArgs);
            Primitives.DragStartedEventArgs = DragStartedEventArgs;
            Fayde.CoreLibrary.add(DragStartedEventArgs);
        })(Primitives = Controls.Primitives || (Controls.Primitives = {}));
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
/// <reference path="../../Core/FrameworkElement" />
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        var Primitives;
        (function (Primitives) {
            var OverlayUpdater = minerva.controls.overlay.OverlayUpdater;
            var DEFAULT_MASK_BRUSH = "#33000000";
            var OverlayNode = (function (_super) {
                __extends(OverlayNode, _super);
                function OverlayNode() {
                    _super.apply(this, arguments);
                    this._Layer = null;
                    this._Mask = null;
                }
                OverlayNode.prototype.EnsureLayer = function () {
                    if (!this._Layer) {
                        this._Layer = new Controls.Panel();
                        this.LayoutUpdater.setLayer(this._Layer.XamlNode.LayoutUpdater);
                    }
                    return this._Layer;
                };
                OverlayNode.prototype.EnsureMask = function () {
                    if (!this._Mask) {
                        this._Mask = new Controls.Border();
                        this._Mask.MouseLeftButtonDown.on(this._OnMaskMouseDown, this);
                        this.UpdateMask();
                    }
                    return this._Mask;
                };
                OverlayNode.prototype._OnMaskMouseDown = function (sender, args) {
                    this.XObject.SetCurrentValue(Overlay.IsOpenProperty, false);
                };
                OverlayNode.prototype.UpdateMask = function () {
                    var mask = this._Mask;
                    if (mask) {
                        var mb = this.XObject.MaskBrush;
                        if (mb === undefined)
                            mb = nullstone.convertAnyToType(DEFAULT_MASK_BRUSH, Fayde.Media.Brush);
                        this._Mask.Background = mb;
                    }
                };
                OverlayNode.prototype.OnIsAttachedChanged = function (newIsAttached) {
                    _super.prototype.OnIsAttachedChanged.call(this, newIsAttached);
                    this.RegisterInitiator(this.VisualParentNode.XObject);
                    if (newIsAttached) {
                        this.EnsureLayer().Children.Insert(0, this.EnsureMask());
                    }
                    if (!newIsAttached && this.XObject.IsOpen)
                        this.XObject.IsOpen = false;
                };
                OverlayNode.prototype.RegisterInitiator = function (initiator) {
                    if (!(initiator instanceof Fayde.UIElement))
                        return;
                    this.LayoutUpdater.setInitiator(initiator.XamlNode.LayoutUpdater);
                };
                return OverlayNode;
            })(Fayde.FENode);
            Primitives.OverlayNode = OverlayNode;
            var Overlay = (function (_super) {
                __extends(Overlay, _super);
                function Overlay() {
                    _super.call(this);
                    this.Opened = new nullstone.Event();
                    this.Closed = new nullstone.Event();
                    this._ContentControlForUri = null;
                    this._IgnoreClose = false;
                    this.DefaultStyleKey = Overlay;
                    this.InitBindings();
                }
                Overlay.prototype.CreateNode = function () {
                    return new OverlayNode(this);
                };
                Overlay.prototype.CreateLayoutUpdater = function () {
                    return new OverlayUpdater();
                };
                Overlay.prototype.InitBindings = function () {
                    this.SetBinding(Overlay.VisualViewModelProperty, new Fayde.Data.Binding("OverlayDataContext"));
                    var binding = new Fayde.Data.Binding("IsOpen");
                    binding.Mode = Fayde.Data.BindingMode.TwoWay;
                    this.SetBinding(Overlay.IsOpenProperty, binding);
                    this.SetBinding(Overlay.ClosedCommandProperty, new Fayde.Data.Binding("ClosedCommand"));
                };
                Overlay.prototype._OnVisualChanged = function (args) {
                    if (this.VisualUri != null)
                        throw new Error("Cannot set Visual if VisualUri is set.");
                    var layer = this.XamlNode.EnsureLayer();
                    if (args.OldValue)
                        layer.Children.Remove(args.OldValue);
                    if (args.NewValue)
                        layer.Children.Add(args.NewValue);
                };
                Overlay.prototype._OnVisualUriChanged = function (args) {
                    if (this.Visual != null)
                        throw new Error("Cannot set VisualUri if Visual is set.");
                    if (args.NewValue)
                        this._SetVisualUri(args.NewValue);
                    else
                        this._ClearVisualUri();
                };
                Overlay.prototype._OnVisualViewModelChanged = function (args) {
                    var cc;
                    var visual;
                    if (!!(cc = this._ContentControlForUri))
                        cc.DataContext = args.NewValue;
                    else if (!!(visual = this.Visual))
                        visual.DataContext = args.NewValue;
                };
                Overlay.prototype._SetVisualUri = function (uri) {
                    var cc = this._ContentControlForUri;
                    if (!cc) {
                        var layer = this.XamlNode.EnsureLayer();
                        cc = this._ContentControlForUri = new Controls.ContentControl();
                        cc.SetValue(OverlayOwnerProperty, this);
                        layer.Children.Add(cc);
                    }
                    cc.ContentUri = uri;
                    var vm = this.VisualViewModel;
                    if (vm !== undefined)
                        cc.DataContext = vm;
                };
                Overlay.prototype._ClearVisualUri = function () {
                    var cc = this._ContentControlForUri;
                    if (!cc)
                        return;
                    var layer = this.XamlNode.EnsureLayer();
                    layer.Children.Remove(cc);
                    cc.ContentUri = null;
                    cc.DataContext = undefined;
                };
                Overlay.prototype._OnIsOpenChanged = function (args) {
                    var ov = args.OldValue || false;
                    var nv = args.NewValue || false;
                    if (ov === nv)
                        return;
                    if (nv === true) {
                        this._DoOpen();
                    }
                    else {
                        this._DoClose();
                    }
                };
                Overlay.prototype._DoOpen = function () {
                    var upd = this.XamlNode.LayoutUpdater;
                    minerva.controls.overlay.reactTo.isOpen(upd, false, true);
                    this.Opened.raise(this, null);
                };
                Overlay.prototype._DoClose = function (result) {
                    var upd = this.XamlNode.LayoutUpdater;
                    minerva.controls.overlay.reactTo.isOpen(upd, true, false);
                    if (result === undefined)
                        result = this._GetDialogResult();
                    var parameter = {
                        Result: result,
                        Data: this.VisualViewModel
                    };
                    var cmd = this.ClosedCommand;
                    if (cmd && (!cmd.CanExecute || cmd.CanExecute(parameter)))
                        cmd.Execute(parameter);
                    this.Closed.raise(this, new Primitives.OverlayClosedEventArgs(parameter.Result, parameter.Data));
                };
                Overlay.prototype.Open = function () {
                    this.IsOpen = true;
                };
                Overlay.prototype.Close = function (result) {
                    if (this.IsOpen !== true)
                        return;
                    this._IgnoreClose = true;
                    try {
                        this.SetCurrentValue(Overlay.IsOpenProperty, false);
                    }
                    finally {
                        this._IgnoreClose = false;
                    }
                    this._DoClose(result);
                };
                Overlay.prototype._GetDialogResult = function () {
                    var visual = this.Visual || this._ContentControlForUri;
                    if (!visual)
                        return undefined;
                    var dialog = Fayde.VisualTreeHelper.GetChildrenCount(visual) > 0 ? Fayde.VisualTreeHelper.GetChild(visual, 0) : null;
                    return (dialog instanceof Controls.Dialog) ? dialog.DialogResult : null;
                };
                Overlay.FindOverlay = function (visual) {
                    for (var en = Fayde.VisualTreeEnum.GetAncestors(visual).getEnumerator(); en.moveNext();) {
                        var owner = en.current.GetValue(OverlayOwnerProperty);
                        if (owner instanceof Overlay)
                            return owner;
                    }
                    return undefined;
                };
                Overlay.VisualProperty = DependencyProperty.Register("Visual", function () { return Fayde.UIElement; }, Overlay, undefined, function (d, args) { return d._OnVisualChanged(args); });
                Overlay.VisualUriProperty = DependencyProperty.Register("VisualUri", function () { return Fayde.Uri; }, Overlay, undefined, function (d, args) { return d._OnVisualUriChanged(args); });
                Overlay.VisualViewModelProperty = DependencyProperty.Register("VisualViewModel", function () { return Object; }, Overlay, undefined, function (d, args) { return d._OnVisualViewModelChanged(args); });
                Overlay.IsOpenProperty = DependencyProperty.Register("IsOpen", function () { return Boolean; }, Overlay, undefined, function (d, args) { return d._OnIsOpenChanged(args); });
                Overlay.MaskBrushProperty = DependencyProperty.Register("MaskBrush", function () { return Fayde.Media.Brush; }, Overlay);
                Overlay.ClosedCommandProperty = DependencyProperty.Register("ClosedCommand", function () { return Fayde.Input.ICommand_; }, Overlay);
                return Overlay;
            })(Fayde.FrameworkElement);
            Primitives.Overlay = Overlay;
            Fayde.CoreLibrary.add(Overlay);
            Fayde.Markup.Content(Overlay, Overlay.VisualProperty);
            var reactions;
            (function (reactions) {
                Fayde.DPReaction(Overlay.MaskBrushProperty, function (overlay, ov, nv) {
                    overlay.XamlNode.UpdateMask();
                });
            })(reactions || (reactions = {}));
            var OverlayOwnerProperty = DependencyProperty.RegisterAttached("OverlayOwner", function () { return Overlay; }, Overlay);
        })(Primitives = Controls.Primitives || (Controls.Primitives = {}));
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        var Primitives;
        (function (Primitives) {
            var OverlayClosedEventArgs = (function () {
                function OverlayClosedEventArgs(result, data) {
                    Object.defineProperties(this, {
                        "Result": {
                            value: result,
                            writable: false
                        },
                        "Data": {
                            value: data,
                            writable: false
                        }
                    });
                }
                return OverlayClosedEventArgs;
            })();
            Primitives.OverlayClosedEventArgs = OverlayClosedEventArgs;
        })(Primitives = Controls.Primitives || (Controls.Primitives = {}));
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        var Primitives;
        (function (Primitives) {
            var ScrollData = (function () {
                function ScrollData() {
                    this.canHorizontallyScroll = false;
                    this.canVerticallyScroll = false;
                    this.offsetX = 0;
                    this.offsetY = 0;
                    this.cachedOffsetX = 0;
                    this.cachedOffsetY = 0;
                    this.viewportWidth = 0;
                    this.viewportHeight = 0;
                    this.extentWidth = 0;
                    this.extentHeight = 0;
                    this.maxDesiredWidth = 0;
                    this.maxDesiredHeight = 0;
                    this.scrollOwner = null;
                }
                ScrollData.prototype.invalidate = function () {
                    if (this.scrollOwner)
                        this.scrollOwner.InvalidateScrollInfo();
                };
                return ScrollData;
            })();
            Primitives.ScrollData = ScrollData;
        })(Primitives = Controls.Primitives || (Controls.Primitives = {}));
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
/// <reference path="../../Core/RoutedEventArgs.ts" />
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        var Primitives;
        (function (Primitives) {
            (function (ScrollEventType) {
                ScrollEventType[ScrollEventType["SmallDecrement"] = 0] = "SmallDecrement";
                ScrollEventType[ScrollEventType["SmallIncrement"] = 1] = "SmallIncrement";
                ScrollEventType[ScrollEventType["LargeDecrement"] = 2] = "LargeDecrement";
                ScrollEventType[ScrollEventType["LargeIncrement"] = 3] = "LargeIncrement";
                ScrollEventType[ScrollEventType["ThumbPosition"] = 4] = "ThumbPosition";
                ScrollEventType[ScrollEventType["ThumbTrack"] = 5] = "ThumbTrack";
                ScrollEventType[ScrollEventType["First"] = 6] = "First";
                ScrollEventType[ScrollEventType["Last"] = 7] = "Last";
                ScrollEventType[ScrollEventType["EndScroll"] = 8] = "EndScroll";
            })(Primitives.ScrollEventType || (Primitives.ScrollEventType = {}));
            var ScrollEventType = Primitives.ScrollEventType;
            Fayde.CoreLibrary.addEnum(ScrollEventType, "ScrollEventType");
            var ScrollEventArgs = (function (_super) {
                __extends(ScrollEventArgs, _super);
                function ScrollEventArgs(scrollEventType, value) {
                    _super.call(this);
                    Object.defineProperty(this, "ScrollEventType", { value: scrollEventType, writable: false });
                    Object.defineProperty(this, "Value", { value: value, writable: false });
                }
                return ScrollEventArgs;
            })(Fayde.RoutedEventArgs);
            Primitives.ScrollEventArgs = ScrollEventArgs;
            Fayde.CoreLibrary.add(ScrollEventArgs);
        })(Primitives = Controls.Primitives || (Controls.Primitives = {}));
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
/// <reference path="../../Core/RoutedEventArgs.ts" />
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        var Primitives;
        (function (Primitives) {
            var SelectionChangedEventArgs = (function (_super) {
                __extends(SelectionChangedEventArgs, _super);
                function SelectionChangedEventArgs(oldValues, newValues) {
                    _super.call(this);
                    Object.defineProperty(this, "OldValues", { value: oldValues.slice(0), writable: false });
                    Object.defineProperty(this, "NewValues", { value: newValues.slice(0), writable: false });
                }
                return SelectionChangedEventArgs;
            })(Fayde.RoutedEventArgs);
            Primitives.SelectionChangedEventArgs = SelectionChangedEventArgs;
            Fayde.CoreLibrary.add(SelectionChangedEventArgs);
        })(Primitives = Controls.Primitives || (Controls.Primitives = {}));
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Controls;
    (function (Controls) {
        var Primitives;
        (function (Primitives) {
            var SelectorSelection = (function () {
                function SelectorSelection(owner) {
                    this._SelectedItems = [];
                    this._SelectedItem = null;
                    this._IsUpdating = false;
                    this._AnchorIndex = -1;
                    this.Mode = Controls.SelectionMode.Single;
                    this._Owner = owner;
                    this._Owner.SelectedItems.CollectionChanged.on(this._HandleOwnerSelectionChanged, this);
                }
                Object.defineProperty(SelectorSelection.prototype, "IsUpdating", {
                    get: function () { return this._IsUpdating; },
                    enumerable: true,
                    configurable: true
                });
                SelectorSelection.prototype._HandleOwnerSelectionChanged = function (sender, e) {
                    if (this._IsUpdating)
                        return;
                    if (this.Mode === Controls.SelectionMode.Single)
                        throw new InvalidOperationException("SelectedItems cannot be modified directly when in Single select mode");
                    try {
                        var items = this._SelectedItems;
                        this._IsUpdating = true;
                        switch (e.Action) {
                            case Fayde.Collections.CollectionChangedAction.Add:
                                if (items.indexOf(e.NewItems[0]) < 0)
                                    this.AddToSelected(e.NewItems[0]);
                                break;
                            case Fayde.Collections.CollectionChangedAction.Remove:
                                if (items.indexOf(e.OldItems[0]) > -1)
                                    this.RemoveFromSelected(e.OldItems[0]);
                                break;
                            case Fayde.Collections.CollectionChangedAction.Replace:
                                if (items.indexOf(e.OldItems[0]) > -1)
                                    this.RemoveFromSelected(e.OldItems[0]);
                                if (items.indexOf(e.NewItems[0]) < 0)
                                    this.AddToSelected(e.NewItems[0]);
                                break;
                            case Fayde.Collections.CollectionChangedAction.Reset:
                                var ownerItems = this._Owner.SelectedItems;
                                var item;
                                var enumerator = ownerItems.getEnumerator();
                                while (enumerator.moveNext()) {
                                    item = enumerator.current;
                                    if (ownerItems.Contains(item))
                                        continue;
                                    if (items.indexOf(item) > -1)
                                        this.RemoveFromSelected(item);
                                }
                                enumerator = ownerItems.getEnumerator();
                                while (enumerator.moveNext()) {
                                    item = enumerator.current;
                                    if (items.indexOf(item) < 0)
                                        this.AddToSelected(item);
                                }
                                break;
                        }
                        this._Owner._SelectedItemsIsInvalid = true;
                    }
                    finally {
                        this._IsUpdating = false;
                    }
                };
                SelectorSelection.prototype.RepopulateSelectedItems = function () {
                    if (!this._IsUpdating) {
                        try {
                            this._IsUpdating = true;
                            var si = this._Owner.SelectedItems;
                            si.Clear();
                            si.AddRange(this._SelectedItems);
                        }
                        finally {
                            this._IsUpdating = false;
                        }
                    }
                };
                SelectorSelection.prototype.ClearSelection = function (ignoreSelectedValue) {
                    if (ignoreSelectedValue === undefined)
                        ignoreSelectedValue = false;
                    if (this._SelectedItems.length === 0) {
                        this.UpdateSelectorProperties(null, -1, ignoreSelectedValue ? this._Owner.SelectedValue : null);
                        return;
                    }
                    try {
                        this._IsUpdating = true;
                        var oldSelection = this._SelectedItems.slice(0);
                        this._SelectedItems = [];
                        this._SelectedItem = null;
                        this.UpdateSelectorProperties(null, -1, ignoreSelectedValue ? this._Owner.SelectedValue : null);
                        this._Owner._SelectedItemsIsInvalid = true;
                        this._Owner._RaiseSelectionChanged(oldSelection, []);
                    }
                    finally {
                        this._IsUpdating = false;
                    }
                };
                SelectorSelection.prototype.Select = function (item) {
                    if (!this._Owner.Items.Contains(item))
                        return;
                    var selIndex = this._SelectedItems.indexOf(item);
                    try {
                        this._IsUpdating = true;
                        switch (this.Mode) {
                            case Controls.SelectionMode.Single:
                                return this._SelectSingle(item, selIndex);
                            case Controls.SelectionMode.Extended:
                                return this._SelectExtended(item, selIndex);
                            case Controls.SelectionMode.Multiple:
                                return this._SelectMultiple(item, selIndex);
                            default:
                                throw new NotSupportedException("SelectionMode " + this.Mode + " is not supported.");
                        }
                    }
                    finally {
                        this._IsUpdating = false;
                    }
                };
                SelectorSelection.prototype._SelectSingle = function (item, selIndex) {
                    if (selIndex === -1)
                        return this.ReplaceSelection(item);
                };
                SelectorSelection.prototype._SelectExtended = function (item, selIndex) {
                    var itemsIndex = this._Owner.Items.IndexOf(item);
                    if (Fayde.Input.Keyboard.HasShift()) {
                        var items = this._Owner.Items;
                        var aIndex = this._AnchorIndex;
                        if (aIndex === -1)
                            aIndex = items.IndexOf(this._SelectedItem);
                        aIndex = Math.max(aIndex, 0);
                        var oIndex = items.IndexOf(item);
                        return this.SelectRange(Math.min(aIndex, oIndex), Math.max(aIndex, oIndex));
                    }
                    this._AnchorIndex = selIndex;
                    if (Fayde.Input.Keyboard.HasControl()) {
                        if (selIndex > -1)
                            return this.RemoveFromSelected(item);
                        return this.AddToSelected(item);
                    }
                    return this.ReplaceSelection(item);
                };
                SelectorSelection.prototype._SelectMultiple = function (item, selIndex) {
                    return (selIndex > -1) ? this.RemoveFromSelected(item) : this.AddToSelected(item);
                };
                SelectorSelection.prototype.SelectRange = function (startIndex, endIndex) {
                    var ownerItems = this._Owner.Items;
                    var oldSelectedItems = this._SelectedItems;
                    this._SelectedItems = ownerItems.GetRange(startIndex, endIndex);
                    var toUnselect = except(oldSelectedItems, this._SelectedItems);
                    var toSelect = except(this._SelectedItems, oldSelectedItems);
                    if (this._SelectedItems.indexOf(this._SelectedItem) === -1) {
                        this._SelectedItem = this._SelectedItems[0];
                        this.UpdateSelectorProperties(this._SelectedItem, this._SelectedItem == null ? -1 : ownerItems.IndexOf(this._SelectedItem), this._Owner._GetValueFromItem(this._SelectedItem));
                    }
                    this._Owner._SelectedItemsIsInvalid = true;
                    this._Owner._RaiseSelectionChanged(toUnselect, toSelect);
                };
                SelectorSelection.prototype.SelectAll = function (items) {
                    try {
                        this._IsUpdating = true;
                        if (this.Mode === Controls.SelectionMode.Single)
                            throw new NotSupportedException("Cannot call SelectAll when in Single select mode");
                        var selectedItems = this._SelectedItems;
                        var select = except(items, selectedItems);
                        if (select.length === 0)
                            return;
                        var owner = this._Owner;
                        selectedItems.push(select);
                        if (this._SelectedItem == null) {
                            this._SelectedItem = select[0];
                            this.UpdateSelectorProperties(this._SelectedItem, owner.Items.IndexOf(this._SelectedItem), owner._GetValueFromItem(this._SelectedItem));
                        }
                        owner._SelectedItemsIsInvalid = true;
                        owner._RaiseSelectionChanged([], select);
                    }
                    finally {
                        this._IsUpdating = false;
                    }
                };
                SelectorSelection.prototype.SelectOnly = function (item) {
                    if (this._SelectedItem === item && this._SelectedItems.length === 1)
                        return;
                    try {
                        this._IsUpdating = true;
                        this.ReplaceSelection(item);
                    }
                    finally {
                        this._IsUpdating = false;
                    }
                };
                SelectorSelection.prototype.Unselect = function (item) {
                    if (this._SelectedItems.indexOf(item) < 0)
                        return;
                    try {
                        this._IsUpdating = true;
                        this.RemoveFromSelected(item);
                    }
                    finally {
                        this._IsUpdating = false;
                    }
                };
                SelectorSelection.prototype.AddToSelected = function (item) {
                    this._SelectedItems.push(item);
                    var owner = this._Owner;
                    if (this._SelectedItems.length === 1) {
                        this._SelectedItem = item;
                        this.UpdateSelectorProperties(item, owner.Items.IndexOf(item), owner._GetValueFromItem(item));
                    }
                    owner._SelectedItemsIsInvalid = true;
                    owner._RaiseSelectionChanged([], [item]);
                };
                SelectorSelection.prototype.RemoveFromSelected = function (item) {
                    var selectedItems = this._SelectedItems;
                    var index = selectedItems.indexOf(item);
                    if (index > -1)
                        selectedItems.splice(index, 1);
                    var owner = this._Owner;
                    if (this._SelectedItem === item) {
                        var newItem = selectedItems[0];
                        this._SelectedItem = newItem;
                        this.UpdateSelectorProperties(newItem, newItem == null ? -1 : owner.Items.IndexOf(newItem), owner._GetValueFromItem(item));
                    }
                    owner._SelectedItemsIsInvalid = true;
                    owner._RaiseSelectionChanged([item], []);
                };
                SelectorSelection.prototype.ReplaceSelection = function (item) {
                    var owner = this._Owner;
                    if (!this.UpdateCollectionView(item)) {
                        this.UpdateSelectorProperties(this._SelectedItem, owner.Items.IndexOf(this._SelectedItem), owner._GetValueFromItem(this._SelectedItem));
                        return;
                    }
                    var oldItems = this._SelectedItems.slice(0);
                    var newItems = [];
                    var itemIndex = oldItems.indexOf(item);
                    if (itemIndex > -1) {
                        oldItems.splice(itemIndex, 1);
                    }
                    else {
                        newItems.push(item);
                    }
                    this._SelectedItems = [item];
                    this._SelectedItem = item;
                    this.UpdateSelectorProperties(item, owner.Items.IndexOf(item), owner._GetValueFromItem(item));
                    if (newItems.length !== 0 || oldItems.length !== 0) {
                        owner._SelectedItemsIsInvalid = true;
                        owner._RaiseSelectionChanged(oldItems, newItems);
                    }
                };
                SelectorSelection.prototype.UpdateSelectorProperties = function (item, index, value) {
                    var owner = this._Owner;
                    if (owner.SelectedItem !== item)
                        owner.SelectedItem = item;
                    if (owner.SelectedIndex !== index)
                        owner.SelectedIndex = index;
                    if (owner.SelectedValue !== value)
                        owner.SelectedValue = value;
                    this.UpdateCollectionView(item);
                };
                SelectorSelection.prototype.UpdateCollectionView = function (item) {
                    var icv = Fayde.Data.ICollectionView_.as(this._Owner.ItemsSource);
                    if (icv) {
                        icv.MoveCurrentTo(item);
                        return item === icv.CurrentItem;
                    }
                    return true;
                };
                return SelectorSelection;
            })();
            Primitives.SelectorSelection = SelectorSelection;
            Fayde.CoreLibrary.add(SelectorSelection);
            function except(arr1, arr2) {
                var r = [];
                var c;
                for (var i = 0, len = arr1.length; i < len; i++) {
                    c = arr1[i];
                    if (arr2.indexOf(c) < 0)
                        r.push(c);
                }
                return r;
            }
        })(Primitives = Controls.Primitives || (Controls.Primitives = {}));
    })(Controls = Fayde.Controls || (Fayde.Controls = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Providers;
    (function (Providers) {
        (function (StyleIndex) {
            StyleIndex[StyleIndex["VisualTree"] = 0] = "VisualTree";
            StyleIndex[StyleIndex["ApplicationResources"] = 1] = "ApplicationResources";
            StyleIndex[StyleIndex["Theme"] = 2] = "Theme";
            StyleIndex[StyleIndex["Count"] = 3] = "Count";
        })(Providers.StyleIndex || (Providers.StyleIndex = {}));
        var StyleIndex = Providers.StyleIndex;
        (function (StyleMask) {
            StyleMask[StyleMask["None"] = 0] = "None";
            StyleMask[StyleMask["VisualTree"] = 1] = "VisualTree";
            StyleMask[StyleMask["ApplicationResources"] = 2] = "ApplicationResources";
            StyleMask[StyleMask["Theme"] = 4] = "Theme";
            StyleMask[StyleMask["All"] = 7] = "All";
        })(Providers.StyleMask || (Providers.StyleMask = {}));
        var StyleMask = Providers.StyleMask;
        var ImplicitStyleBroker = (function () {
            function ImplicitStyleBroker() {
            }
            ImplicitStyleBroker.Set = function (fe, mask, styles) {
                if (!styles)
                    styles = getImplicitStyles(fe, mask);
                if (styles) {
                    var error = new BError();
                    var len = StyleIndex.Count;
                    for (var i = 0; i < len; i++) {
                        var style = styles[i];
                        if (!style)
                            continue;
                        if (!style.Validate(fe, error)) {
                            error.ThrowException();
                            return;
                        }
                    }
                }
                ImplicitStyleBroker.SetImpl(fe, mask, styles);
            };
            ImplicitStyleBroker.SetImpl = function (fe, mask, styles) {
                if (!styles)
                    return;
                var oldStyles = fe.XamlNode._ImplicitStyles;
                var newStyles = [null, null, null];
                if (oldStyles) {
                    newStyles[StyleIndex.Theme] = oldStyles[StyleIndex.Theme];
                    newStyles[StyleIndex.ApplicationResources] = oldStyles[StyleIndex.ApplicationResources];
                    newStyles[StyleIndex.VisualTree] = oldStyles[StyleIndex.VisualTree];
                }
                if (mask & StyleMask.Theme)
                    newStyles[StyleIndex.Theme] = styles[StyleIndex.Theme];
                if (mask & StyleMask.ApplicationResources)
                    newStyles[StyleIndex.ApplicationResources] = styles[StyleIndex.ApplicationResources];
                if (mask & StyleMask.VisualTree)
                    newStyles[StyleIndex.VisualTree] = styles[StyleIndex.VisualTree];
                ImplicitStyleBroker.ApplyStyles(fe, mask, styles);
            };
            ImplicitStyleBroker.Clear = function (fe, mask) {
                var holder = fe.XamlNode;
                var oldStyles = holder._ImplicitStyles;
                if (!oldStyles)
                    return;
                var newStyles = oldStyles.slice(0);
                if (mask & StyleMask.Theme)
                    newStyles[StyleIndex.Theme] = null;
                if (mask & StyleMask.ApplicationResources)
                    newStyles[StyleIndex.ApplicationResources] = null;
                if (mask & StyleMask.VisualTree)
                    newStyles[StyleIndex.VisualTree] = null;
                ImplicitStyleBroker.ApplyStyles(fe, holder._StyleMask & ~mask, newStyles);
            };
            ImplicitStyleBroker.ApplyStyles = function (fe, mask, styles) {
                var holder = fe.XamlNode;
                var oldStyles = holder._ImplicitStyles;
                var isChanged = !oldStyles || mask !== holder._StyleMask;
                if (!isChanged) {
                    for (var i = 0; i < StyleIndex.Count; i++) {
                        if (styles[i] !== oldStyles[i]) {
                            isChanged = true;
                            break;
                        }
                    }
                }
                if (!isChanged)
                    return;
                Providers.SwapStyles(fe, Fayde.MultipleStylesWalker(oldStyles), Fayde.MultipleStylesWalker(styles), true);
                holder._ImplicitStyles = styles;
                holder._StyleMask = mask;
            };
            return ImplicitStyleBroker;
        })();
        Providers.ImplicitStyleBroker = ImplicitStyleBroker;
        function getImplicitStyles(fe, mask) {
            var styles = [];
            if ((mask & StyleMask.Theme) != 0) {
                styles[StyleIndex.Theme] = getThemeStyle(fe);
            }
            if ((mask & StyleMask.ApplicationResources) != 0) {
                var app = Fayde.Application.Current;
                if (app)
                    styles[StyleIndex.ApplicationResources] = getAppResourcesStyle(app, fe);
            }
            if ((mask & StyleMask.VisualTree) != 0)
                styles[StyleIndex.VisualTree] = getVisualTreeStyle(fe);
            return styles;
        }
        function getThemeStyle(fe) {
            if (fe instanceof Fayde.Controls.Control) {
                var style = fe.GetDefaultStyle();
                if (style)
                    return style;
            }
            return Fayde.ThemeManager.FindStyle(fe.DefaultStyleKey);
        }
        function getAppResourcesStyle(app, fe) {
            return app.Resources.Get(fe.DefaultStyleKey);
        }
        function getVisualTreeStyle(fe) {
            var key = fe.DefaultStyleKey;
            var cur = fe;
            var isControl = cur instanceof Fayde.Controls.Control;
            var curNode = fe.XamlNode;
            var rd;
            while (curNode) {
                cur = curNode.XObject;
                if (cur.TemplateOwner && !fe.TemplateOwner) {
                    cur = cur.TemplateOwner;
                    curNode = cur.XamlNode;
                    continue;
                }
                if (!isControl && cur === fe.TemplateOwner)
                    break;
                rd = cur.Resources;
                if (rd) {
                    var style = rd.Get(key);
                    if (style)
                        return style;
                }
                curNode = curNode.VisualParentNode;
            }
            return undefined;
        }
    })(Providers = Fayde.Providers || (Fayde.Providers = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Providers;
    (function (Providers) {
        var LocalStyleBroker = (function () {
            function LocalStyleBroker() {
            }
            LocalStyleBroker.Set = function (fe, newStyle) {
                var holder = fe.XamlNode;
                if (newStyle)
                    newStyle.Seal();
                Providers.SwapStyles(fe, Fayde.SingleStyleWalker(holder._LocalStyle), Fayde.SingleStyleWalker(newStyle), false);
                holder._LocalStyle = newStyle;
            };
            return LocalStyleBroker;
        })();
        Providers.LocalStyleBroker = LocalStyleBroker;
    })(Providers = Fayde.Providers || (Fayde.Providers = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Providers;
    (function (Providers) {
        function SwapStyles(fe, oldWalker, newWalker, isImplicit) {
            var arr = fe._PropertyStorage;
            var oldSetter = oldWalker.Step();
            var newSetter = newWalker.Step();
            var storage;
            var value;
            var propd;
            while (oldSetter || newSetter) {
                if (oldSetter && newSetter) {
                    switch (Fayde.Setter.Compare(oldSetter, newSetter)) {
                        case 0:
                            value = newSetter.ConvertedValue;
                            propd = newSetter.Property;
                            oldSetter = oldWalker.Step();
                            newSetter = newWalker.Step();
                            break;
                        case -1:
                            value = undefined;
                            propd = oldSetter.Property;
                            oldSetter = oldWalker.Step();
                            break;
                        case 1:
                            value = newSetter.ConvertedValue;
                            propd = newSetter.Property;
                            newSetter = newWalker.Step();
                            break;
                    }
                }
                else if (newSetter) {
                    value = newSetter.ConvertedValue;
                    propd = newSetter.Property;
                    newSetter = newWalker.Step();
                }
                else {
                    value = undefined;
                    propd = oldSetter.Property;
                    oldSetter = oldWalker.Step();
                }
                storage = arr[propd._ID];
                if (!storage)
                    storage = arr[propd._ID] = propd.Store.CreateStorage(fe, propd);
                if (isImplicit)
                    propd.Store.SetImplicitStyle(storage, value);
                else
                    propd.Store.SetLocalStyleValue(storage, value);
            }
        }
        Providers.SwapStyles = SwapStyles;
    })(Providers = Fayde.Providers || (Fayde.Providers = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Data;
    (function (Data) {
        var lookupNamespaces;
        function lookupType(name) {
            if (!lookupNamespaces) {
                lookupNamespaces = [
                    Fayde,
                    Fayde.Controls,
                    Fayde.Media,
                    Fayde.Controls.Primitives,
                    Fayde.Shapes,
                    window];
            }
            var len = lookupNamespaces.length;
            for (var i = 0; i < len; i++) {
                var potentialType = lookupNamespaces[i][name];
                if (typeof potentialType === "function")
                    return potentialType;
            }
            return eval(name);
        }
        function handlePeriod(data) {
            if (data.tickOpen)
                return true;
            if (data.res != null) {
                var value = null;
                if ((value = data.lu.GetValue(data.res)) == null)
                    return false;
                if (!(value instanceof Fayde.DependencyObject))
                    return false;
                var newLu = value;
                if (data.promotedValues && data.promotedValues[value._ID] == null && !(value instanceof Fayde.UIElement)) {
                    var clonedValue = Fayde.Clone(value);
                    if (clonedValue instanceof Fayde.DependencyObject) {
                        newLu = clonedValue;
                        data.lu.SetCurrentValue(data.res, clonedValue);
                        clonedValue = data.lu.GetValue(data.res);
                        data.promotedValues[clonedValue._ID] = clonedValue;
                    }
                }
                data.lu = newLu;
            }
            data.expressionFound = false;
            data.prop = data.path.substr(data.index);
            return true;
        }
        function handleLeftBracket(data) {
            if (data.index >= data.end)
                return;
            var hasLeadingZeroes = false;
            while (data.path.charAt(data.index) === '0') {
                hasLeadingZeroes = true;
                data.index++;
            }
            data.i = parseInt(data.path.substr(data.index), 10);
            if (!isNaN(data.i))
                data.index += data.i.toString().length;
            if (isNaN(data.i) && hasLeadingZeroes)
                data.i = 0;
            if (data.path.charAt(data.index) !== ']' || data.path.charAt(data.index + 1) !== '.')
                return true;
            data.prop = data.path = data.path.substr(data.index + 2);
            data.index = 0;
            data.end = data.path.length;
            var value = null;
            if (data.expressionFound) {
                data.expressionFound = false;
                if ((value = data.lu.GetValue(data.res)) == null)
                    return false;
            }
            if (value instanceof Fayde.XamlObjectCollection) {
                data.collection = value;
            }
            else {
                data.collection = null;
                return false;
            }
            if ((value = data.collection.GetValueAt(data.i)) == null)
                return false;
            if (value instanceof Fayde.DependencyObject) {
                data.lu = value;
            }
            else {
                data.lu = null;
                return false;
            }
            return true;
        }
        function handleDefault(data) {
            var explicitType = false;
            data.expressionFound = true;
            var start = data.index - 1;
            var c;
            while (data.index < data.end) {
                c = data.path.charAt(data.index);
                if (!((c !== '.' || data.tickOpen) && (!data.parenOpen || c !== ')') && c !== '['))
                    break;
                data.index++;
                if (c === '\'') {
                    data.tickOpen = !data.tickOpen;
                    if (!data.tickOpen)
                        break;
                }
            }
            if (data.index === data.end) {
                data.type = data.lu.constructor;
            }
            else {
                c = data.path.charAt(data.index);
                if (c === '.') {
                    if ((data.index - start) === 11 && data.path.substr(start, 11).toLowerCase() === "textelement") {
                        data.type = Fayde.Controls.TextBlock;
                        data.explicitType = true;
                    }
                    else {
                        var s = data.index;
                        if (data.path.charAt(data.index - 1) === '\'' && !data.tickOpen) {
                            s = data.index - 1;
                        }
                        var name = data.path.slice(start, s);
                        data.type = lookupType(name);
                        data.explicitType = true;
                        if (!data.type)
                            data.type = data.lu.constructor;
                    }
                    data.index++;
                    start = data.index;
                    while (data.index < data.end) {
                        c = data.path.charAt(data.index);
                        if (!((!data.parenOpen || c !== ')') && (c !== '.' || data.tickOpen)))
                            break;
                        data.index++;
                        if (c === '\'') {
                            data.tickOpen = !data.tickOpen;
                            if (!data.tickOpen)
                                break;
                        }
                    }
                    if (data.index === start)
                        return false;
                }
                else {
                    data.type = data.lu.constructor;
                    data.explicitType = false;
                }
                c = data.path.charAt(data.index);
                if ((c !== ')' && data.parenOpen) || data.type == null)
                    return false;
            }
            name = data.path.slice(start, data.index);
            if ((data.res = DependencyProperty.GetDependencyProperty(data.type, name)) == null && data.lu)
                data.res = DependencyProperty.GetDependencyProperty(data.lu.constructor, name);
            if (data.res == null)
                return false;
            if (!data.res.IsAttached && !(data.lu instanceof data.type)) {
                if ((data.res = DependencyProperty.GetDependencyProperty(data.lu.constructor, name)) == null)
                    return false;
            }
            if (data.res.IsAttached && data.explicitType && !data.parenOpen)
                return false;
            return true;
        }
        var PropertyPath = (function () {
            function PropertyPath(path, expandedPath) {
                this._Propd = null;
                this._Path = path;
                this._ExpandedPath = expandedPath;
            }
            PropertyPath.CreateFromParameter = function (parameter) {
                var p = new PropertyPath();
                if (parameter instanceof DependencyProperty)
                    p._Propd = parameter;
                p._Path = null;
                if (parameter instanceof String)
                    p._Path = parameter;
                return p;
            };
            PropertyPath.prototype.TryResolveDependencyProperty = function (refobj, promotedValues) {
                if (this._Propd)
                    return this._Propd;
                var ov = refobj.Value;
                var propd = PropertyPath.ResolvePropertyPath(refobj, this, promotedValues);
                if (ov === refobj.Value)
                    this._Propd = propd;
                return propd;
            };
            Object.defineProperty(PropertyPath.prototype, "Path", {
                get: function () { return this._Path; },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PropertyPath.prototype, "ExpandedPath", {
                get: function () { return this._ExpandedPath; },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PropertyPath.prototype, "ParsePath", {
                get: function () {
                    if (this._Propd)
                        return "(0)";
                    if (this._ExpandedPath)
                        return this._ExpandedPath;
                    return this._Path;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PropertyPath.prototype, "HasDependencyProperty", {
                get: function () { return this._Propd != null; },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PropertyPath.prototype, "DependencyProperty", {
                get: function () { return this._Propd; },
                enumerable: true,
                configurable: true
            });
            PropertyPath.ResolvePropertyPath = function (refobj, propertyPath, promotedValues) {
                var path = propertyPath.Path;
                var expanded = propertyPath.ExpandedPath;
                if (expanded != null)
                    path = expanded;
                var data = {
                    index: 0,
                    i: 0,
                    end: path.length,
                    path: path,
                    parenOpen: false,
                    tickOpen: false,
                    prop: path,
                    res: null,
                    cloned: false,
                    expressionFound: false,
                    lu: refobj.Value,
                    collection: null,
                    promotedValues: promotedValues,
                    explicitType: false,
                    type: null,
                };
                var success;
                while (data.index < data.end) {
                    success = true;
                    var c = data.path.charAt(data.index);
                    data.index++;
                    if (c === '(') {
                        data.parenOpen = true;
                    }
                    else if (c === ')') {
                        data.parenOpen = false;
                    }
                    else if (c === '\'') {
                        if (!propertyPath.ExpandedPath)
                            console.warn("The ' character is not legal in property paths.");
                        else
                            data.tickOpen = !data.tickOpen;
                    }
                    else if (c === '.') {
                        success = handlePeriod(data);
                    }
                    else if (c === '[') {
                        success = handleLeftBracket(data);
                    }
                    else {
                        success = handleDefault(data);
                    }
                    if (!success) {
                        refobj.Value = null;
                        return null;
                    }
                }
                refobj.Value = data.lu;
                return data.res;
            };
            PropertyPath.prototype.Clone = function () {
                return new PropertyPath(this._Path, this._ExpandedPath);
            };
            return PropertyPath;
        })();
        Data.PropertyPath = PropertyPath;
        Fayde.CoreLibrary.add(PropertyPath);
        nullstone.registerTypeConverter(PropertyPath, function (val) {
            if (!val)
                return new PropertyPath();
            if (val instanceof PropertyPath)
                return val;
            return new PropertyPath(val.toString());
        });
    })(Data = Fayde.Data || (Fayde.Data = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Data;
    (function (Data) {
        (function (PropertyNodeType) {
            PropertyNodeType[PropertyNodeType["None"] = 0] = "None";
            PropertyNodeType[PropertyNodeType["AttachedProperty"] = 1] = "AttachedProperty";
            PropertyNodeType[PropertyNodeType["Indexed"] = 2] = "Indexed";
            PropertyNodeType[PropertyNodeType["Property"] = 3] = "Property";
        })(Data.PropertyNodeType || (Data.PropertyNodeType = {}));
        var PropertyNodeType = Data.PropertyNodeType;
        var PropertyPathParser = (function () {
            function PropertyPathParser(path) {
                this.Path = path;
            }
            PropertyPathParser.prototype.Step = function (data) {
                var type = PropertyNodeType.None;
                var path = this.Path;
                if (path.length === 0) {
                    data.typeName = null;
                    data.propertyName = null;
                    data.index = null;
                    return type;
                }
                var end = 0;
                if (path.charAt(0) === '(') {
                    type = PropertyNodeType.AttachedProperty;
                    end = path.indexOf(')');
                    if (end === -1)
                        throw new ArgumentException("Invalid property path. Attached property is missing the closing bracket");
                    var tickOpen = path.indexOf('\'');
                    var tickClose = 0;
                    var typeOpen;
                    var typeClose;
                    var propOpen;
                    var propClose;
                    typeOpen = path.indexOf('\'');
                    if (typeOpen > 0) {
                        typeOpen++;
                        typeClose = path.indexOf('\'', typeOpen + 1);
                        if (typeClose < 0)
                            throw new Exception("Invalid property path, Unclosed type name '" + path + "'.");
                        propOpen = path.indexOf('.', typeClose);
                        if (propOpen < 0)
                            throw new Exception("Invalid properth path, No property indexer found '" + path + "'.");
                        propOpen++;
                    }
                    else {
                        typeOpen = 1;
                        typeClose = path.indexOf('.', typeOpen);
                        if (typeClose < 0)
                            throw new Exception("Invalid property path, No property indexer found on '" + path + "'.");
                        propOpen = typeClose + 1;
                    }
                    propClose = end;
                    data.typeName = path.slice(typeOpen, typeClose);
                    data.propertyName = path.slice(propOpen, propClose);
                    data.index = null;
                    if (path.length > (end + 1) && path.charAt(end + 1) === '.')
                        end++;
                    path = path.substr(end + 1);
                }
                else if (path.charAt(0) === '[') {
                    type = PropertyNodeType.Indexed;
                    end = path.indexOf(']');
                    data.typeName = null;
                    data.propertyName = null;
                    data.index = parseInt(path.substr(1, end - 1));
                    path = path.substr(end + 1);
                    if (path.charAt(0) === '.')
                        path = path.substr(1);
                }
                else {
                    type = PropertyNodeType.Property;
                    end = indexOfAny(path, ['.', '[']);
                    if (end === -1) {
                        data.propertyName = path;
                        path = "";
                    }
                    else {
                        data.propertyName = path.substr(0, end);
                        if (path.charAt(end) === '.')
                            path = path.substr(end + 1);
                        else
                            path = path.substr(end);
                    }
                    data.typeName = null;
                    data.index = null;
                }
                this.Path = path;
                return type;
            };
            return PropertyPathParser;
        })();
        Data.PropertyPathParser = PropertyPathParser;
        function indexOfAny(str, carr, start) {
            if (!carr)
                return -1;
            if (!start)
                start = 0;
            for (var cur = start; cur < str.length; cur++) {
                var c = str.charAt(cur);
                for (var i = 0; i < carr.length; i++) {
                    if (c === carr[i])
                        return cur;
                }
            }
            return -1;
        }
    })(Data = Fayde.Data || (Fayde.Data = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Data;
    (function (Data) {
        var PropertyPathWalker = (function () {
            function PropertyPathWalker(path, bindDirectlyToSource, bindsToView, isDataContextBound) {
                bindDirectlyToSource = bindDirectlyToSource !== false;
                bindsToView = bindsToView === true;
                this.IsDataContextBound = isDataContextBound === true;
                this.Path = path;
                this.IsDataContextBound = isDataContextBound;
                var lastCVNode = null;
                if (!path || path === ".") {
                    lastCVNode = new CollectionViewNode(bindDirectlyToSource, bindsToView);
                    this.Node = lastCVNode;
                    this.FinalNode = lastCVNode;
                }
                else {
                    var data = {
                        typeName: undefined,
                        propertyName: undefined,
                        index: undefined
                    };
                    var type;
                    var parser = new Data.PropertyPathParser(path);
                    while ((type = parser.Step(data)) !== Data.PropertyNodeType.None) {
                        var isViewProperty = false;
                        var node = lastCVNode = new CollectionViewNode(bindDirectlyToSource, isViewProperty);
                        switch (type) {
                            case Data.PropertyNodeType.AttachedProperty:
                            case Data.PropertyNodeType.Property:
                                node.Next = new StandardPropertyPathNode(data.typeName, data.propertyName);
                                break;
                            case Data.PropertyNodeType.Indexed:
                                node.Next = new IndexedPropertyPathNode(data.index);
                                break;
                            default:
                                break;
                        }
                        if (this.FinalNode)
                            this.FinalNode.Next = node;
                        else
                            this.Node = node;
                        this.FinalNode = node.Next;
                    }
                }
                lastCVNode.BindToView = lastCVNode.BindToView || bindsToView;
                this.FinalNode.Listen(this);
            }
            Object.defineProperty(PropertyPathWalker.prototype, "IsPathBroken", {
                get: function () {
                    var path = this.Path;
                    if (this.IsDataContextBound && (!path || path.length < 1))
                        return false;
                    var node = this.Node;
                    while (node) {
                        if (node.IsBroken)
                            return true;
                        node = node.Next;
                    }
                    return false;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PropertyPathWalker.prototype, "FinalPropertyName", {
                get: function () {
                    var final = this.FinalNode;
                    if (final instanceof StandardPropertyPathNode)
                        return final.PropertyInfo ? final.PropertyInfo.name : "";
                    var lastName = "";
                    for (var cur = this.Node; cur; cur = cur.Next) {
                        if (cur instanceof StandardPropertyPathNode)
                            lastName = cur.PropertyInfo ? cur.PropertyInfo.name : "";
                    }
                    return lastName;
                },
                enumerable: true,
                configurable: true
            });
            PropertyPathWalker.prototype.GetValue = function (item) {
                this.Update(item);
                var o = this.FinalNode.Value;
                return o;
            };
            PropertyPathWalker.prototype.Update = function (source) {
                this.Source = source;
                this.Node.SetSource(source);
            };
            PropertyPathWalker.prototype.Listen = function (listener) {
                this._Listener = listener;
            };
            PropertyPathWalker.prototype.Unlisten = function (listener) {
                if (this._Listener === listener)
                    this._Listener = null;
            };
            PropertyPathWalker.prototype.IsBrokenChanged = function (node) {
                this.ValueInternal = node.Value;
                var listener = this._Listener;
                if (listener)
                    listener.IsBrokenChanged();
            };
            PropertyPathWalker.prototype.ValueChanged = function (node) {
                this.ValueInternal = node.Value;
                var listener = this._Listener;
                if (listener)
                    listener.ValueChanged();
            };
            PropertyPathWalker.prototype.GetContext = function () {
                var context = null;
                var cur = this.Node;
                var final = this.FinalNode;
                while (cur && cur !== final) {
                    context = cur;
                    cur = cur.Next;
                }
                if (!context)
                    return undefined;
                return context.Value;
            };
            return PropertyPathWalker;
        })();
        Data.PropertyPathWalker = PropertyPathWalker;
        var PropertyPathNode = (function () {
            function PropertyPathNode() {
            }
            Object.defineProperty(PropertyPathNode.prototype, "IsBroken", {
                get: function () {
                    return this._IsBroken;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PropertyPathNode.prototype, "Source", {
                get: function () {
                    return this._Source;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PropertyPathNode.prototype, "Value", {
                get: function () {
                    return this._Value;
                },
                enumerable: true,
                configurable: true
            });
            PropertyPathNode.prototype.Listen = function (listener) {
                this._NodeListener = listener;
            };
            PropertyPathNode.prototype.Unlisten = function (listener) {
                if (this._NodeListener === listener)
                    this._NodeListener = null;
            };
            PropertyPathNode.prototype.OnSourceChanged = function (oldSource, newSource) {
            };
            PropertyPathNode.prototype.OnSourcePropertyChanged = function (o, e) {
            };
            PropertyPathNode.prototype.UpdateValue = function () {
                throw new Exception("No override for abstract method: PropertyPathNode.UpdateValue");
            };
            PropertyPathNode.prototype.SetValue = function (value) {
                throw new Exception("No override for abstract method: PropertyPathNode.SetValue");
            };
            PropertyPathNode.prototype.GetSource = function () {
                return this._Source;
            };
            PropertyPathNode.prototype.SetSource = function (value) {
                if (value == null || value !== this._Source) {
                    var oldSource = this._Source;
                    var npc = Fayde.INotifyPropertyChanged_.as(oldSource);
                    if (npc)
                        npc.PropertyChanged.off(this.OnSourcePropertyChanged, this);
                    this._Source = value;
                    npc = Fayde.INotifyPropertyChanged_.as(this._Source);
                    if (npc)
                        npc.PropertyChanged.on(this.OnSourcePropertyChanged, this);
                    this.OnSourceChanged(oldSource, this._Source);
                    this.UpdateValue();
                    if (this.Next)
                        this.Next.SetSource(this._Value);
                }
            };
            PropertyPathNode.prototype.UpdateValueAndIsBroken = function (newValue, isBroken) {
                var emitBrokenChanged = this._IsBroken !== isBroken;
                var emitValueChanged = !nullstone.equals(this.Value, newValue);
                this._IsBroken = isBroken;
                this._Value = newValue;
                if (emitValueChanged) {
                    var listener = this._NodeListener;
                    if (listener)
                        listener.ValueChanged(this);
                }
                else if (emitBrokenChanged) {
                    var listener = this._NodeListener;
                    if (listener)
                        listener.IsBrokenChanged(this);
                }
            };
            PropertyPathNode.prototype._CheckIsBroken = function () {
                return !this.Source || (!this.PropertyInfo && !this.DependencyProperty);
            };
            return PropertyPathNode;
        })();
        var StandardPropertyPathNode = (function (_super) {
            __extends(StandardPropertyPathNode, _super);
            function StandardPropertyPathNode(typeName, propertyName) {
                _super.call(this);
                this._STypeName = typeName;
                this._PropertyName = propertyName;
            }
            StandardPropertyPathNode.prototype.SetValue = function (value) {
                if (this.DependencyProperty)
                    this.Source.SetValue(this.DependencyProperty, value);
                else if (this.PropertyInfo)
                    this.PropertyInfo.setValue(this.Source, value);
            };
            StandardPropertyPathNode.prototype.UpdateValue = function () {
                if (this.DependencyProperty) {
                    this.ValueType = this.DependencyProperty.GetTargetType();
                    this.UpdateValueAndIsBroken(this.Source.GetValue(this.DependencyProperty), this._CheckIsBroken());
                }
                else if (this.PropertyInfo) {
                    this.ValueType = null;
                    try {
                        this.UpdateValueAndIsBroken(this.PropertyInfo.getValue(this.Source), this._CheckIsBroken());
                    }
                    catch (err) {
                        this.UpdateValueAndIsBroken(null, this._CheckIsBroken());
                    }
                }
                else {
                    this.ValueType = null;
                    this.UpdateValueAndIsBroken(null, this._CheckIsBroken());
                }
            };
            StandardPropertyPathNode.prototype.OnSourceChanged = function (oldSource, newSource) {
                _super.prototype.OnSourceChanged.call(this, oldSource, newSource);
                var oldDO;
                var newDO;
                if (oldSource instanceof Fayde.DependencyObject)
                    oldDO = oldSource;
                if (newSource instanceof Fayde.DependencyObject)
                    newDO = newSource;
                var listener = this._DPListener;
                if (listener) {
                    listener.Detach();
                    this._DPListener = listener = null;
                }
                this.DependencyProperty = null;
                this.PropertyInfo = null;
                if (!this.Source)
                    return;
                var type = this.Source.constructor;
                var typeName = this._STypeName;
                if (typeName) {
                    if (typeName.indexOf(":") > -1)
                        console.warn("[Not supported] Cannot resolve type name outside of default namespace.", typeName);
                    var oresolve = { type: undefined, isPrimitive: false };
                    if (Fayde.CoreLibrary.resolveType(null, typeName, oresolve))
                        type = oresolve.type;
                }
                if (newDO) {
                    var propd = DependencyProperty.GetDependencyProperty(type, this._PropertyName, true);
                    if (propd) {
                        this.DependencyProperty = propd;
                        this._DPListener = listener = propd.Store.ListenToChanged(newDO, propd, this.OnPropertyChanged, this);
                    }
                }
                if (!this.DependencyProperty || !this.DependencyProperty.IsAttached) {
                    this.PropertyInfo = nullstone.PropertyInfo.find(this.Source, this._PropertyName);
                }
            };
            StandardPropertyPathNode.prototype.OnPropertyChanged = function (sender, args) {
                try {
                    this.UpdateValue();
                    if (this.Next)
                        this.Next.SetSource(this.Value);
                }
                catch (err) {
                }
            };
            StandardPropertyPathNode.prototype.OnSourcePropertyChanged = function (sender, e) {
                if (e.PropertyName === this._PropertyName && this.PropertyInfo) {
                    this.UpdateValue();
                    var next = this.Next;
                    if (next)
                        next.SetSource(this.Value);
                }
            };
            return StandardPropertyPathNode;
        })(PropertyPathNode);
        var CollectionViewNode = (function (_super) {
            __extends(CollectionViewNode, _super);
            function CollectionViewNode(bindsDirectlyToSource, bindToView) {
                _super.call(this);
                this.BindsDirectlyToSource = bindsDirectlyToSource === true;
                this.BindToView = bindToView === true;
            }
            CollectionViewNode.prototype.OnSourceChanged = function (oldSource, newSource) {
                _super.prototype.OnSourceChanged.call(this, oldSource, newSource);
                this.DisconnectViewHandlers();
                this.ConnectViewHandlers(newSource, newSource);
            };
            CollectionViewNode.prototype.ViewChanged = function (sender, e) {
                this.DisconnectViewHandlers(true);
                this.ConnectViewHandlers(null, e.NewValue);
                this.ViewCurrentChanged(this, null);
            };
            CollectionViewNode.prototype.ViewCurrentChanged = function (sender, e) {
                this.UpdateValue();
                if (this.Next)
                    this.Next.SetSource(this.Value);
            };
            CollectionViewNode.prototype.SetValue = function () {
                throw new NotSupportedException("SetValue");
            };
            CollectionViewNode.prototype.UpdateValue = function () {
                var src = this.Source;
                if (!this.BindsDirectlyToSource) {
                    var view;
                    if (src instanceof Data.CollectionViewSource)
                        src = view = src.View;
                    else
                        view = Data.ICollectionView_.as(src);
                    if (view && !this.BindToView)
                        src = view.CurrentItem;
                }
                this.ValueType = src == null ? null : src.constructor;
                this.UpdateValueAndIsBroken(src, this._CheckIsBroken());
            };
            CollectionViewNode.prototype._CheckIsBroken = function () {
                return this.Source == null;
            };
            CollectionViewNode.prototype.ConnectViewHandlers = function (source, view) {
                if (source instanceof Data.CollectionViewSource) {
                    this._ViewPropertyListener = Data.CollectionViewSource.ViewProperty.Store.ListenToChanged(source, Data.CollectionViewSource.ViewProperty, this.ViewChanged, this);
                    view = source.View;
                }
                this._View = Data.ICollectionView_.as(view);
                if (this._View)
                    this._View.CurrentChanged.on(this.ViewCurrentChanged, this);
            };
            CollectionViewNode.prototype.DisconnectViewHandlers = function (onlyView) {
                if (!onlyView)
                    onlyView = false;
                if (this._ViewPropertyListener && !onlyView) {
                    this._ViewPropertyListener.Detach();
                    this._ViewPropertyListener = null;
                }
                if (this._View) {
                    this._View.CurrentChanged.off(this.ViewCurrentChanged, this);
                }
            };
            return CollectionViewNode;
        })(PropertyPathNode);
        var IndexedPropertyPathNode = (function (_super) {
            __extends(IndexedPropertyPathNode, _super);
            function IndexedPropertyPathNode(index) {
                _super.call(this);
                this._IsBroken = false;
                var val = parseInt(index, 10);
                if (!isNaN(val))
                    index = val;
                Object.defineProperty(this, "Index", { value: index, writable: false });
            }
            IndexedPropertyPathNode.prototype.UpdateValue = function () {
                if (this.PropertyInfo == null) {
                    this._IsBroken = true;
                    this.ValueType = null;
                    this.UpdateValueAndIsBroken(null, this._IsBroken);
                    return;
                }
                try {
                    var newVal = this.PropertyInfo.getValue(this.Source, this.Index);
                    this._IsBroken = false;
                    this.ValueType = this.PropertyInfo.propertyType;
                    this.UpdateValueAndIsBroken(newVal, this._IsBroken);
                }
                catch (err) {
                    this._IsBroken = true;
                    this.ValueType = null;
                    this.UpdateValueAndIsBroken(null, this._IsBroken);
                }
            };
            IndexedPropertyPathNode.prototype.SetValue = function (value) {
                if (this.PropertyInfo)
                    this.PropertyInfo.setValue(this.Source, this.Index, value);
            };
            IndexedPropertyPathNode.prototype._CheckIsBroken = function () {
                return this._IsBroken || _super.prototype._CheckIsBroken.call(this);
            };
            IndexedPropertyPathNode.prototype.OnSourcePropertyChanged = function (o, e) {
                this.UpdateValue();
                if (this.Next != null)
                    this.Next.SetSource(this.Value);
            };
            IndexedPropertyPathNode.prototype.OnSourceChanged = function (oldSource, newSource) {
                _super.prototype.OnSourceChanged.call(this, oldSource, newSource);
                var cc = Fayde.Collections.INotifyCollectionChanged_.as(oldSource);
                if (cc)
                    cc.CollectionChanged.off(this.CollectionChanged, this);
                cc = Fayde.Collections.INotifyCollectionChanged_.as(newSource);
                if (cc)
                    cc.CollectionChanged.on(this.CollectionChanged, this);
                this._GetIndexer();
            };
            IndexedPropertyPathNode.prototype._GetIndexer = function () {
                this.PropertyInfo = null;
                if (this._Source != null) {
                    this.PropertyInfo = nullstone.IndexedPropertyInfo.find(this._Source);
                }
            };
            IndexedPropertyPathNode.prototype.CollectionChanged = function (o, e) {
                this.UpdateValue();
                if (this.Next)
                    this.Next.SetSource(this.Value);
            };
            return IndexedPropertyPathNode;
        })(PropertyPathNode);
    })(Data = Fayde.Data || (Fayde.Data = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Input;
    (function (Input) {
        var TouchInternal;
        (function (TouchInternal) {
            var ActiveTouchBase = (function () {
                function ActiveTouchBase(touchHandler) {
                    var _this = this;
                    this.InputList = [];
                    this._IsEmitting = false;
                    this._PendingCapture = null;
                    this._PendingReleaseCapture = false;
                    this._Captured = null;
                    this._CapturedInputList = null;
                    Object.defineProperty(this, "Device", { value: this.CreateTouchDevice(), writable: false });
                    this._FinishReleaseCaptureFunc = function () { return touchHandler.HandleTouches(Input.TouchInputType.NoOp, [_this], false, true); };
                }
                ActiveTouchBase.prototype.Capture = function (uie) {
                    var uin = uie.XamlNode;
                    if (this._Captured === uin || this._PendingCapture === uin)
                        return true;
                    if (!this._IsEmitting)
                        return false;
                    this._PendingCapture = uin;
                    return true;
                };
                ActiveTouchBase.prototype.ReleaseCapture = function (uie) {
                    var uin = uie.XamlNode;
                    if (this._Captured !== uin && this._PendingCapture !== uin)
                        return;
                    if (this._IsEmitting)
                        this._PendingReleaseCapture = true;
                    else
                        this._PerformReleaseCapture();
                };
                ActiveTouchBase.prototype._PerformCapture = function (uin) {
                    this._Captured = uin;
                    var newInputList = [];
                    while (uin != null) {
                        newInputList.push(uin);
                        uin = uin.VisualParentNode;
                    }
                    this._CapturedInputList = newInputList;
                    this._PendingCapture = null;
                };
                ActiveTouchBase.prototype._PerformReleaseCapture = function () {
                    var oldCaptured = this._Captured;
                    this._Captured = null;
                    this._PendingReleaseCapture = false;
                    oldCaptured._EmitLostTouchCapture(new Input.TouchEventArgs(this.Device));
                    this._FinishReleaseCaptureFunc();
                };
                ActiveTouchBase.prototype.Emit = function (type, newInputList, emitLeave, emitEnter) {
                    if (this._IsEmitting)
                        return;
                    this._IsEmitting = true;
                    var handled = false;
                    var indices = { Index1: -1, Index2: -1 };
                    findFirstCommonElement(this.InputList, newInputList, indices);
                    if (emitLeave !== false)
                        this._EmitList(Input.TouchInputType.TouchLeave, this.InputList, indices.Index1);
                    if (emitEnter !== false)
                        this._EmitList(Input.TouchInputType.TouchEnter, newInputList, indices.Index2);
                    var handled = false;
                    if (type !== Input.TouchInputType.NoOp)
                        handled = this._EmitList(type, this._Captured ? this._CapturedInputList : newInputList);
                    this.InputList = newInputList;
                    if (this._PendingCapture)
                        this._PerformCapture(this._PendingCapture);
                    if (this._PendingReleaseCapture)
                        this._PerformReleaseCapture();
                    this._IsEmitting = false;
                    return handled;
                };
                ActiveTouchBase.prototype._EmitList = function (type, list, endIndex) {
                    var handled = false;
                    if (endIndex === 0)
                        return handled;
                    if (!endIndex || endIndex === -1)
                        endIndex = list.length;
                    var args = new Input.TouchEventArgs(this.Device);
                    var node = list[0];
                    if (node && args instanceof Fayde.RoutedEventArgs)
                        args.Source = node.XObject;
                    for (var i = 0; i < endIndex; i++) {
                        node = list[i];
                        if (type === Input.TouchInputType.TouchLeave)
                            args.Source = node.XObject;
                        if (node._EmitTouchEvent(type, args))
                            handled = true;
                        if (type === Input.TouchInputType.TouchLeave)
                            args = new Input.TouchEventArgs(this.Device);
                    }
                    return handled;
                };
                ActiveTouchBase.prototype.GetTouchPoint = function (relativeTo) {
                    if (!relativeTo)
                        return this.CreateTouchPoint(this.Position.Clone());
                    if (!(relativeTo instanceof Fayde.UIElement))
                        throw new ArgumentException("Specified relative object must be a UIElement.");
                    var p = this.Position.Clone();
                    minerva.core.Updater.transformPoint(relativeTo.XamlNode.LayoutUpdater, p);
                    return this.CreateTouchPoint(p);
                };
                ActiveTouchBase.prototype.CreateTouchPoint = function (p) {
                    return new Input.TouchPoint(p, 0);
                };
                ActiveTouchBase.prototype.CreateTouchDevice = function () {
                    var _this = this;
                    var d = {
                        Identifier: null,
                        Captured: null,
                        Capture: function (uie) { return _this.Capture(uie); },
                        ReleaseCapture: function (uie) { return _this.ReleaseCapture(uie); },
                        GetTouchPoint: function (relativeTo) { return _this.GetTouchPoint(relativeTo); }
                    };
                    Object.defineProperty(d, "Identifier", { get: function () { return _this.Identifier; } });
                    Object.defineProperty(d, "Captured", { get: function () { return _this._Captured ? _this._Captured.XObject : null; } });
                    return d;
                };
                return ActiveTouchBase;
            })();
            TouchInternal.ActiveTouchBase = ActiveTouchBase;
            function findFirstCommonElement(list1, list2, outObj) {
                var i = list1.length - 1;
                var j = list2.length - 1;
                outObj.Index1 = -1;
                outObj.Index2 = -1;
                while (i >= 0 && j >= 0) {
                    if (list1[i] !== list2[j])
                        return;
                    outObj.Index1 = i--;
                    outObj.Index2 = j--;
                }
            }
        })(TouchInternal = Input.TouchInternal || (Input.TouchInternal = {}));
    })(Input = Fayde.Input || (Fayde.Input = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Input;
    (function (Input) {
        var TouchInternal;
        (function (TouchInternal) {
            var TouchInteropBase = (function () {
                function TouchInteropBase() {
                    this.CanvasOffset = null;
                    this.ActiveTouches = [];
                }
                Object.defineProperty(TouchInteropBase.prototype, "CoordinateOffset", {
                    get: function () {
                        return {
                            left: window.pageXOffset + this.CanvasOffset.left,
                            top: window.pageYOffset + this.CanvasOffset.top
                        };
                    },
                    enumerable: true,
                    configurable: true
                });
                TouchInteropBase.prototype.Register = function (input, canvas) {
                    this.Input = input;
                    this.CanvasOffset = this._CalcOffset(canvas);
                };
                TouchInteropBase.prototype._CalcOffset = function (canvas) {
                    var left = 0;
                    var top = 0;
                    var cur = canvas;
                    if (cur.offsetParent) {
                        do {
                            left += cur.offsetLeft;
                            top += cur.offsetTop;
                        } while (cur = cur.offsetParent);
                    }
                    return { left: left, top: top };
                };
                TouchInteropBase.prototype.HandleTouches = function (type, touches, emitLeave, emitEnter) {
                    var touch;
                    var handled = false;
                    while (touch = touches.shift()) {
                        var inputList = this.Input.HitTestPoint(touch.Position);
                        if (inputList)
                            handled = handled || touch.Emit(type, inputList, emitLeave, emitEnter);
                    }
                    return handled;
                };
                return TouchInteropBase;
            })();
            TouchInternal.TouchInteropBase = TouchInteropBase;
        })(TouchInternal = Input.TouchInternal || (Input.TouchInternal = {}));
    })(Input = Fayde.Input || (Fayde.Input = {}));
})(Fayde || (Fayde = {}));
/// <reference path="ActiveTouchBase.ts" />
/// <reference path="TouchInteropBase.ts" />
var Fayde;
(function (Fayde) {
    var Input;
    (function (Input) {
        var TouchInternal;
        (function (TouchInternal) {
            var NonPointerActiveTouch = (function (_super) {
                __extends(NonPointerActiveTouch, _super);
                function NonPointerActiveTouch() {
                    _super.apply(this, arguments);
                }
                NonPointerActiveTouch.prototype.Init = function (t, offset) {
                    this.TouchObject = t;
                    this.Identifier = t.identifier;
                    this.Position = new Point(t.clientX + offset.left, t.clientY + offset.top);
                };
                NonPointerActiveTouch.prototype.CreateTouchPoint = function (p) {
                    var to = this.TouchObject;
                    return new Input.TouchPoint(p, to.force);
                };
                return NonPointerActiveTouch;
            })(TouchInternal.ActiveTouchBase);
            var NonPointerTouchInterop = (function (_super) {
                __extends(NonPointerTouchInterop, _super);
                function NonPointerTouchInterop() {
                    _super.apply(this, arguments);
                }
                NonPointerTouchInterop.prototype.Register = function (input, canvas) {
                    var _this = this;
                    _super.prototype.Register.call(this, input, canvas);
                    canvas.addEventListener("touchstart", function (e) { return _this._HandleTouchStart(window.event ? window.event : e); });
                    canvas.addEventListener("touchend", function (e) { return _this._HandleTouchEnd(window.event ? window.event : e); });
                    canvas.addEventListener("touchmove", function (e) { return _this._HandleTouchMove(window.event ? window.event : e); });
                    canvas.addEventListener("touchenter", function (e) { return _this._HandleTouchEnter(window.event ? window.event : e); });
                    canvas.addEventListener("touchleave", function (e) { return _this._HandleTouchLeave(window.event ? window.event : e); });
                };
                NonPointerTouchInterop.prototype._HandleTouchStart = function (e) {
                    e.preventDefault();
                    Fayde.Engine.Inspection.Kill();
                    var newTouches = this.TouchArrayFromList(e.changedTouches);
                    this.ActiveTouches = this.ActiveTouches.concat(newTouches);
                    this.Input.SetIsUserInitiatedEvent(true);
                    this.HandleTouches(Input.TouchInputType.TouchDown, newTouches);
                    this.Input.SetIsUserInitiatedEvent(false);
                };
                NonPointerTouchInterop.prototype._HandleTouchEnd = function (e) {
                    var oldTouches = this.TouchArrayFromList(e.changedTouches);
                    this.Input.SetIsUserInitiatedEvent(true);
                    this.HandleTouches(Input.TouchInputType.TouchUp, oldTouches);
                    this.Input.SetIsUserInitiatedEvent(false);
                    removeFromArray(this.ActiveTouches, oldTouches);
                };
                NonPointerTouchInterop.prototype._HandleTouchMove = function (e) {
                    var touches = this.TouchArrayFromList(e.changedTouches);
                    this.HandleTouches(Input.TouchInputType.TouchMove, touches);
                };
                NonPointerTouchInterop.prototype._HandleTouchEnter = function (e) {
                    var touches = this.TouchArrayFromList(e.changedTouches);
                    this.HandleTouches(Input.TouchInputType.TouchEnter, touches);
                };
                NonPointerTouchInterop.prototype._HandleTouchLeave = function (e) {
                    var touches = this.TouchArrayFromList(e.changedTouches);
                    this.HandleTouches(Input.TouchInputType.TouchLeave, touches);
                };
                NonPointerTouchInterop.prototype.TouchArrayFromList = function (list) {
                    var len = list.length;
                    var touches = [];
                    var curto;
                    var cur;
                    for (var i = 0; i < len; i++) {
                        var curto = list.item(i);
                        cur = this.FindTouchInList(curto.identifier) || new NonPointerActiveTouch(this);
                        cur.Init(curto, this.CoordinateOffset);
                        touches.push(cur);
                    }
                    return touches;
                };
                NonPointerTouchInterop.prototype.FindTouchInList = function (identifier) {
                    var at = this.ActiveTouches;
                    var len = at.length;
                    for (var i = 0; i < len; i++) {
                        if (at[i].Identifier === identifier)
                            return at[i];
                    }
                    return null;
                };
                return NonPointerTouchInterop;
            })(TouchInternal.TouchInteropBase);
            TouchInternal.NonPointerTouchInterop = NonPointerTouchInterop;
            function removeFromArray(arr, toRemove) {
                var len = toRemove.length;
                for (var i = 0; i < len; i++) {
                    var index = arr.indexOf(toRemove[i]);
                    if (index > -1)
                        arr.splice(index, 1);
                }
            }
        })(TouchInternal = Input.TouchInternal || (Input.TouchInternal = {}));
    })(Input = Fayde.Input || (Fayde.Input = {}));
})(Fayde || (Fayde = {}));
/// <reference path="ActiveTouchBase.ts" />
/// <reference path="TouchInteropBase.ts" />
var Fayde;
(function (Fayde) {
    var Input;
    (function (Input) {
        var TouchInternal;
        (function (TouchInternal) {
            var PointerActiveTouch = (function (_super) {
                __extends(PointerActiveTouch, _super);
                function PointerActiveTouch() {
                    _super.apply(this, arguments);
                }
                PointerActiveTouch.prototype.Init = function (t, offset) {
                    this.TouchObject = t;
                    this.Identifier = t.pointerId;
                    this.Position = new Point(t.clientX + offset.left, t.clientY + offset.top);
                };
                PointerActiveTouch.prototype.CreateTouchPoint = function (p) {
                    var to = this.TouchObject;
                    return new Input.TouchPoint(p, to.pressure);
                };
                return PointerActiveTouch;
            })(TouchInternal.ActiveTouchBase);
            var PointerTouchInterop = (function (_super) {
                __extends(PointerTouchInterop, _super);
                function PointerTouchInterop() {
                    _super.apply(this, arguments);
                }
                PointerTouchInterop.prototype.Register = function (input, canvas) {
                    var _this = this;
                    _super.prototype.Register.call(this, input, canvas);
                    canvas.style.msTouchAction = "none";
                    canvas.style.touchAction = "none";
                    canvas.addEventListener("selectstart", function (e) { e.preventDefault(); });
                    if (navigator.msPointerEnabled) {
                        canvas.addEventListener("MSPointerDown", function (e) { return _this._HandlePointerDown(window.event ? window.event : e); });
                        canvas.addEventListener("MSPointerUp", function (e) { return _this._HandlePointerUp(window.event ? window.event : e); });
                        canvas.addEventListener("MSPointerMove", function (e) { return _this._HandlePointerMove(window.event ? window.event : e); });
                        canvas.addEventListener("MSPointerEnter", function (e) { return _this._HandlePointerEnter(window.event ? window.event : e); });
                        canvas.addEventListener("MSPointerLeave", function (e) { return _this._HandlePointerLeave(window.event ? window.event : e); });
                    }
                    else {
                        canvas.addEventListener("pointerdown", function (e) { return _this._HandlePointerDown(window.event ? window.event : e); });
                        canvas.addEventListener("pointerup", function (e) { return _this._HandlePointerUp(window.event ? window.event : e); });
                        canvas.addEventListener("pointermove", function (e) { return _this._HandlePointerMove(window.event ? window.event : e); });
                        canvas.addEventListener("pointerenter", function (e) { return _this._HandlePointerEnter(window.event ? window.event : e); });
                        canvas.addEventListener("pointerleave", function (e) { return _this._HandlePointerLeave(window.event ? window.event : e); });
                    }
                };
                PointerTouchInterop.prototype._HandlePointerDown = function (e) {
                    if (e.pointerType !== "touch")
                        return;
                    e.preventDefault();
                    Fayde.Engine.Inspection.Kill();
                    var cur = this.GetActiveTouch(e);
                    this.Input.SetIsUserInitiatedEvent(true);
                    this.HandleTouches(Input.TouchInputType.TouchDown, [cur]);
                    this.Input.SetIsUserInitiatedEvent(false);
                };
                PointerTouchInterop.prototype._HandlePointerUp = function (e) {
                    if (e.pointerType !== "touch")
                        return;
                    var cur = this.GetActiveTouch(e);
                    this.Input.SetIsUserInitiatedEvent(true);
                    this.HandleTouches(Input.TouchInputType.TouchUp, [cur]);
                    this.Input.SetIsUserInitiatedEvent(false);
                    var index = this.ActiveTouches.indexOf(cur);
                    if (index > -1)
                        this.ActiveTouches.splice(index, 1);
                };
                PointerTouchInterop.prototype._HandlePointerMove = function (e) {
                    if (e.pointerType !== "touch")
                        return;
                    var cur = this.GetActiveTouch(e);
                    this.HandleTouches(Input.TouchInputType.TouchMove, [cur]);
                };
                PointerTouchInterop.prototype._HandlePointerEnter = function (e) {
                    if (e.pointerType !== "touch")
                        return;
                    var cur = this.GetActiveTouch(e);
                    this.HandleTouches(Input.TouchInputType.TouchEnter, [cur]);
                };
                PointerTouchInterop.prototype._HandlePointerLeave = function (e) {
                    if (e.pointerType !== "touch")
                        return;
                    var cur = this.GetActiveTouch(e);
                    this.HandleTouches(Input.TouchInputType.TouchLeave, [cur]);
                };
                PointerTouchInterop.prototype.GetActiveTouch = function (e) {
                    var existing = this.FindTouchInList(e.pointerId);
                    var cur = existing || new PointerActiveTouch(this);
                    if (!existing)
                        this.ActiveTouches.push(cur);
                    cur.Init(e, this.CoordinateOffset);
                    return cur;
                };
                PointerTouchInterop.prototype.FindTouchInList = function (identifier) {
                    var at = this.ActiveTouches;
                    var len = at.length;
                    for (var i = 0; i < len; i++) {
                        if (at[i].Identifier === identifier)
                            return at[i];
                    }
                    return null;
                };
                return PointerTouchInterop;
            })(TouchInternal.TouchInteropBase);
            TouchInternal.PointerTouchInterop = PointerTouchInterop;
        })(TouchInternal = Input.TouchInternal || (Input.TouchInternal = {}));
    })(Input = Fayde.Input || (Fayde.Input = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Markup;
    (function (Markup) {
        var Internal;
        (function (Internal) {
            function createActiveObject(app, namescope, bindingSource) {
                return {
                    obj: null,
                    xo: null,
                    dobj: null,
                    rd: null,
                    coll: null,
                    arr: null,
                    type: null,
                    set: function (obj) {
                        this.obj = obj;
                        this.type = obj ? obj.constructor : null;
                        this.rd = (obj instanceof Fayde.ResourceDictionary) ? obj : null;
                        if (this.rd) {
                            this.rd.App = app;
                        }
                        this.dobj = (obj instanceof Fayde.DependencyObject) ? obj : null;
                        var xo = this.xo = (obj instanceof Fayde.XamlObject) ? obj : null;
                        if (xo) {
                            xo.XamlNode.DocNameScope = namescope;
                            xo.TemplateOwner = bindingSource;
                            xo.App = app;
                        }
                        if (obj instanceof Fayde.Application) {
                            app = obj;
                        }
                        this.coll = nullstone.ICollection_.as(obj);
                        this.arr = (typeof obj === "array") ? obj : null;
                    },
                    setName: function (name) {
                        if (this.xo) {
                            var xnode = this.xo.XamlNode;
                            namescope.RegisterName(name, xnode);
                            xnode.Name = name;
                        }
                    },
                    getApp: function () {
                        return app;
                    }
                };
            }
            Internal.createActiveObject = createActiveObject;
        })(Internal = Markup.Internal || (Markup.Internal = {}));
    })(Markup = Fayde.Markup || (Fayde.Markup = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Markup;
    (function (Markup) {
        var Internal;
        (function (Internal) {
            function createObjectActor(pactor) {
                var arr = [];
                return {
                    start: function () {
                        var nstate = {};
                        pactor.init(nstate);
                        arr.push(nstate);
                    },
                    end: function () {
                        arr.pop();
                        pactor.init(arr[arr.length - 1]);
                    }
                };
            }
            Internal.createObjectActor = createObjectActor;
        })(Internal = Markup.Internal || (Markup.Internal = {}));
    })(Markup = Fayde.Markup || (Fayde.Markup = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Markup;
    (function (Markup) {
        var Internal;
        (function (Internal) {
            function createPropertyActor(cur, extractType, extractDP) {
                var state = {
                    visited: undefined,
                    coll: undefined,
                    arr: undefined,
                    propd: undefined,
                    prop: undefined,
                    eprop: undefined,
                    incontent: undefined,
                    content: {
                        count: 0,
                        coll: undefined,
                        arr: undefined,
                        rd: undefined,
                        propd: undefined,
                        app: undefined
                    }
                };
                function verify(ownerType, name) {
                    var otype = ownerType || cur.type;
                    state.visited = state.visited || [];
                    var tvisited = state.visited[otype];
                    if (!tvisited) {
                        tvisited = state.visited[otype] = [];
                    }
                    else {
                        if (tvisited.indexOf(name) > -1)
                            throw new XamlParseException("Cannot set [" + otype.name + "][" + name + "] more than once.");
                    }
                    tvisited.push(name);
                }
                function verifyContent() {
                    verify(cur.type, state.propd.Name);
                }
                function prepare(ownerType, name) {
                    if (state.coll || state.arr || state.propd || state.prop || state.eprop)
                        return true;
                    if (cur.dobj) {
                        var otype = ownerType || cur.type;
                        state.propd = DependencyProperty.GetDependencyProperty(otype, name, true);
                        if (!state.propd) {
                            var ev = cur.dobj[name];
                            if (ev instanceof nullstone.Event)
                                state.eprop = name;
                            else
                                state.prop = name;
                            return true;
                        }
                        if (state.propd.IsImmutable) {
                            var co = cur.dobj.GetValue(state.propd);
                            state.coll = nullstone.ICollection_.as(co);
                            state.arr = (typeof co === "array") ? co : null;
                        }
                        else {
                            var tt = state.propd.GetTargetType();
                            if (nullstone.ICollection_.is(tt.prototype))
                                cur.dobj.SetValue(state.propd, state.coll = new tt());
                            else if (tt === Array)
                                cur.dobj.SetValue(state.propd, state.arr = []);
                        }
                        return true;
                    }
                    else if (cur.rd && name === "MergedDictionaries") {
                        state.coll = cur.rd.MergedDictionaries;
                        return true;
                    }
                    else if (cur.obj) {
                        if (ownerType && cur.type !== ownerType)
                            throw new XamlParseException("Cannot set Attached Property on object that is not a DependencyObject.");
                        state.prop = name;
                        return true;
                    }
                    return false;
                }
                function prepareContent() {
                    var content = state.content = state.content || {};
                    if (content.coll || content.arr || content.rd || content.propd)
                        return true;
                    var propd = content.propd = Markup.Content.Get(cur.type);
                    if (!propd) {
                        content.coll = nullstone.ICollection_.as(cur.obj);
                        content.arr = (typeof cur.obj === "array") ? cur.obj : null;
                        content.rd = cur.rd;
                        content.app = (cur.obj instanceof Fayde.Application) ? cur.obj : null;
                        if (content.coll || content.arr || content.rd || content.app)
                            return true;
                        throw new XamlParseException("Cannot set content for object of type '" + cur.type.name + "'.");
                    }
                    if (!propd.IsImmutable)
                        return true;
                    var co = cur.dobj.GetValue(propd);
                    if (!co)
                        return false;
                    content.coll = nullstone.ICollection_.as(co);
                    content.arr = (typeof co === "array") ? co : null;
                    return true;
                }
                function addContentObject(obj, key) {
                    if (cur.rd) {
                        key = key || getFallbackKey(obj);
                        if (!key)
                            throw new XamlParseException("Items in a ResourceDictionary must have a x:Key.");
                        cur.rd.Set(key, obj);
                    }
                    else if (cur.coll) {
                        cur.coll.Add(obj);
                    }
                    else if (cur.arr) {
                        cur.arr.push(obj);
                    }
                    else if (cur.dobj) {
                        if (state.content.coll) {
                            state.content.coll.Add(obj);
                        }
                        else if (state.content.arr) {
                            state.content.arr.push(obj);
                        }
                        else if (state.content.rd) {
                            key = key || getFallbackKey(obj);
                            if (!key)
                                throw new XamlParseException("Items in a ResourceDictionary must have a x:Key.");
                            state.content.rd.Set(obj, key);
                        }
                        else if (state.content.app) {
                            state.content.app.$$SetRootVisual(obj);
                        }
                        else {
                            if (state.content.count > 0)
                                throw new XamlParseException("Cannot set content more than once.");
                            cur.dobj.SetValue(state.content.propd, obj);
                        }
                    }
                    state.content.count++;
                }
                function addObject(obj, key) {
                    if (state.coll) {
                        state.coll.Add(obj);
                    }
                    else if (state.arr) {
                        state.arr.push(obj);
                    }
                    else if (state.propd) {
                        cur.dobj.SetValue(state.propd, convert(state.propd, obj));
                    }
                    else if (state.prop) {
                        cur.obj[state.prop] = obj;
                    }
                    else if (state.eprop) {
                        subscribeEvent(state.eprop, obj);
                    }
                }
                function setAttrObject(ownerType, name, obj) {
                    if (cur.dobj) {
                        var otype = ownerType || cur.type;
                        var propd = DependencyProperty.GetDependencyProperty(otype, name, true);
                        if (!propd) {
                            var ev = cur.dobj[name];
                            if (ev instanceof nullstone.Event) {
                                subscribeEvent(name, obj);
                            }
                            else {
                                cur.dobj[name] = obj;
                            }
                            return true;
                        }
                        if (propd.IsImmutable) {
                            return merge(convert(propd, obj), cur.dobj.GetValue(propd));
                        }
                        else {
                            cur.dobj.SetValue(propd, convert(propd, obj));
                            return true;
                        }
                    }
                    else if (cur.obj) {
                        var ev = cur.obj[name];
                        if (ev instanceof nullstone.Event) {
                            subscribeEvent(name, obj);
                        }
                        else {
                            cur.obj[name] = obj;
                        }
                        return true;
                    }
                    return false;
                }
                function merge(src, target) {
                    var sarr;
                    var scoll = nullstone.ICollection_.as(src);
                    if (scoll) {
                        sarr = nullstone.IEnumerable_.toArray(scoll);
                        scoll.Clear();
                    }
                    else if (typeof src === "array") {
                        sarr = src.slice(0);
                        src.length = 0;
                    }
                    else {
                        return false;
                    }
                    var sen = nullstone.IEnumerator_.fromArray(sarr);
                    var tcoll = nullstone.ICollection_.as(target);
                    var tarr = typeof target === "array" ? target : null;
                    if (tcoll) {
                        while (sen.moveNext()) {
                            tcoll.Add(sen.current);
                        }
                    }
                    else if (tarr) {
                        while (sen.moveNext()) {
                            tarr.push(sen.current);
                        }
                    }
                    else {
                        return false;
                    }
                    return true;
                }
                function getFallbackKey(obj) {
                    if (obj instanceof Fayde.XamlObject) {
                        var name = obj.XamlNode.Name;
                        if (name)
                            return name;
                    }
                    return getImplicitKey(obj);
                }
                function getImplicitKey(obj) {
                    if (obj instanceof Fayde.DataTemplate) {
                        var dt = obj.DataType;
                        if (!dt)
                            throw new XamlParseException("A DataTemplate in a ResourceDictionary must have x:Key or DataType.");
                        return dt;
                    }
                    else if (obj instanceof Fayde.Style) {
                        var tt = obj.TargetType;
                        if (!tt)
                            throw new XamlParseException("A Style in a ResourceDictionary must have x:Key or TargetType.");
                        return tt;
                    }
                }
                function convert(propd, obj) {
                    var tt = propd.GetTargetType();
                    var val = obj;
                    if (typeof val === "string") {
                        if (tt === Fayde.IType_)
                            return extractType(val);
                        else if (propd === Fayde.Setter.PropertyProperty)
                            return extractDP(val);
                    }
                    else if (val instanceof Fayde.Expression) {
                        return val;
                    }
                    return nullstone.convertAnyToType(val, tt);
                }
                function subscribeEvent(name, ebe) {
                    if (!(ebe instanceof Fayde.EventBindingExpression))
                        throw new XamlParseException("Cannot subscribe to event '" + name + "' without {EventBinding}.");
                    ebe.Init(name);
                    ebe.OnAttached(cur.dobj);
                }
                return {
                    init: function (nstate) {
                        state = nstate;
                    },
                    start: function (ownerType, name) {
                        verify(ownerType, name);
                        prepare(ownerType, name);
                    },
                    startContent: function () {
                        if (prepareContent()) {
                            if (state.content.count === 0)
                                verifyContent();
                            state.incontent = true;
                        }
                    },
                    end: function () {
                        state.incontent = false;
                        state.coll = state.arr = state.propd = state.prop = state.eprop = undefined;
                    },
                    addObject: function (obj, key) {
                        if (state.incontent) {
                            addContentObject(obj, key);
                            state.content.count++;
                        }
                        else {
                            addObject(obj, key);
                        }
                    },
                    setContentText: function (text) {
                        if (!cur.dobj)
                            return;
                        var tcprop = Markup.TextContent.Get(cur.type);
                        if (tcprop) {
                            verify(cur.type, tcprop.Name);
                            cur.dobj.SetValue(tcprop, text);
                            return;
                        }
                        var cprop = Markup.Content.Get(cur.type);
                        if (cprop) {
                            verify(cur.type, cprop.Name);
                            cur.dobj.SetValue(cprop, convert(cprop, text));
                        }
                    },
                    setObject: function (ownerType, name, obj) {
                        verify(ownerType, name);
                        setAttrObject(ownerType, name, obj);
                    },
                    isNewResources: function () {
                        if (state.coll instanceof Fayde.ResourceDictionaryCollection)
                            return true;
                        return !cur.rd;
                    }
                };
            }
            Internal.createPropertyActor = createPropertyActor;
        })(Internal = Markup.Internal || (Markup.Internal = {}));
    })(Markup = Fayde.Markup || (Fayde.Markup = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Markup;
    (function (Markup) {
        var Internal;
        (function (Internal) {
            function createResourcesActor(cur, resources) {
                var stack = [];
                return {
                    start: function () {
                        if (cur.rd)
                            stack.push(cur.rd);
                    },
                    end: function () {
                        if (cur.rd)
                            stack.pop();
                    },
                    get: function () {
                        var res = (resources) ? resources.concat(stack) : stack.slice(0);
                        if (cur.dobj instanceof Fayde.FrameworkElement) {
                            var crd = cur.dobj.ReadLocalValue(Fayde.FrameworkElement.ResourcesProperty);
                            if (crd !== DependencyProperty.UnsetValue)
                                res.push(crd);
                        }
                        return res;
                    }
                };
            }
            Internal.createResourcesActor = createResourcesActor;
        })(Internal = Markup.Internal || (Markup.Internal = {}));
    })(Markup = Fayde.Markup || (Fayde.Markup = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        var Animation;
        (function (Animation) {
            (function (EasingMode) {
                EasingMode[EasingMode["EaseOut"] = 0] = "EaseOut";
                EasingMode[EasingMode["EaseIn"] = 1] = "EaseIn";
                EasingMode[EasingMode["EaseInOut"] = 2] = "EaseInOut";
            })(Animation.EasingMode || (Animation.EasingMode = {}));
            var EasingMode = Animation.EasingMode;
            Fayde.CoreLibrary.addEnum(EasingMode, "EasingMode");
            (function (FillBehavior) {
                FillBehavior[FillBehavior["HoldEnd"] = 0] = "HoldEnd";
                FillBehavior[FillBehavior["Stop"] = 1] = "Stop";
            })(Animation.FillBehavior || (Animation.FillBehavior = {}));
            var FillBehavior = Animation.FillBehavior;
            Fayde.CoreLibrary.addEnum(FillBehavior, "FillBehavior");
        })(Animation = Media.Animation || (Media.Animation = {}));
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        var Animation;
        (function (Animation) {
            var RepeatBehavior = (function () {
                function RepeatBehavior() {
                    this._Duration = null;
                    this._Count = null;
                    this.IsForever = false;
                }
                RepeatBehavior.FromRepeatDuration = function (duration) {
                    var rb = new RepeatBehavior();
                    rb._Duration = duration;
                    return rb;
                };
                RepeatBehavior.FromIterationCount = function (count) {
                    var rb = new RepeatBehavior();
                    rb._Count = count;
                    return rb;
                };
                Object.defineProperty(RepeatBehavior.prototype, "HasCount", {
                    get: function () { return this._Count != null; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(RepeatBehavior.prototype, "Count", {
                    get: function () { return this._Count; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(RepeatBehavior.prototype, "HasDuration", {
                    get: function () { return this._Duration != null; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(RepeatBehavior.prototype, "Duration", {
                    get: function () { return this._Duration; },
                    enumerable: true,
                    configurable: true
                });
                RepeatBehavior.prototype.Clone = function () {
                    var rb = new RepeatBehavior();
                    rb._Duration = this._Duration;
                    rb._Count = this._Count;
                    rb.IsForever = this.IsForever;
                    return rb;
                };
                RepeatBehavior.Forever = (function () { var rb = new RepeatBehavior(); rb.IsForever = true; return rb; })();
                return RepeatBehavior;
            })();
            Animation.RepeatBehavior = RepeatBehavior;
            Fayde.CoreLibrary.add(RepeatBehavior);
            nullstone.registerTypeConverter(RepeatBehavior, function (val) {
                if (!val || val.toLowerCase() === "forever")
                    return RepeatBehavior.Forever;
                if (val[val.length - 1] === "x") {
                    var d = parseInt(val.substr(0, val.length - 1));
                    return RepeatBehavior.FromIterationCount(d);
                }
                var duration = new Duration(nullstone.convertAnyToType(val, TimeSpan));
                return RepeatBehavior.FromRepeatDuration(duration);
            });
        })(Animation = Media.Animation || (Media.Animation = {}));
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
/// <reference path="../../Core/DependencyObject.ts" />
/// <reference path="../../Core/XamlObjectCollection.ts" />
/// <reference path="Enums.ts" />
/// <reference path="RepeatBehavior.ts" />
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        var Animation;
        (function (Animation) {
            var Timeline = (function (_super) {
                __extends(Timeline, _super);
                function Timeline() {
                    _super.apply(this, arguments);
                    this.Completed = new nullstone.Event();
                    this._IsPaused = false;
                    this._BeginPauseTime = 0;
                    this._TicksPaused = 0;
                    this._IsFirstUpdate = true;
                    this._HasBegun = false;
                    this._BeginTicks = undefined;
                    this._InitialStep = undefined;
                    this._HasCompleted = false;
                    this.ManualTarget = undefined;
                }
                Object.defineProperty(Timeline.prototype, "HasManualTarget", {
                    get: function () {
                        return this.ManualTarget !== undefined;
                    },
                    enumerable: true,
                    configurable: true
                });
                Timeline.prototype.Reset = function () {
                    this._TicksPaused = 0;
                    this._IsFirstUpdate = true;
                    this._BeginTicks = undefined;
                    this._HasBegun = false;
                    this._HasCompleted = false;
                };
                Timeline.prototype.Pause = function () {
                    if (this._IsPaused)
                        return;
                    this._BeginPauseTime = new Date().getTime();
                    this._IsPaused = true;
                };
                Timeline.prototype.Resume = function () {
                    if (!this._IsPaused)
                        return;
                    this._IsPaused = false;
                    var nowTime = new Date().getTime();
                    this._TicksPaused = nowTime - this._BeginPauseTime;
                };
                Timeline.prototype.Stop = function () {
                    this.Reset();
                };
                Timeline.prototype.OnCompleted = function () {
                    this._HasCompleted = true;
                    var fill = this.FillBehavior;
                    switch (fill) {
                        case Animation.FillBehavior.HoldEnd:
                            this.HoldEnd();
                            break;
                        case Animation.FillBehavior.Stop:
                            this.Stop();
                            break;
                    }
                    this.Completed.raise(this, null);
                };
                Timeline.prototype.Update = function (nowTime) {
                    var clockData = this.CreateClockData(nowTime);
                    if (!clockData || this._IsPaused || this._HasCompleted)
                        return;
                    this.UpdateInternal(clockData);
                    if (clockData.Completed)
                        this.OnCompleted();
                };
                Timeline.prototype.UpdateInternal = function (clockData) {
                };
                Timeline.prototype.HoldEnd = function () {
                };
                Timeline.prototype.CreateClockData = function (nowTime) {
                    if (this._IsFirstUpdate) {
                        this._InitialStep = nowTime;
                        this._HasBegun = false;
                        this._IsFirstUpdate = false;
                    }
                    if (!this._HasBegun) {
                        if (!this.IsAfterBeginTime(nowTime))
                            return null;
                        this._BeginTicks = nowTime;
                        this._HasBegun = true;
                    }
                    var elapsedTicks = nowTime - this._BeginTicks - this._TicksPaused;
                    var currentTimeTicks = elapsedTicks;
                    var progress = 0.0;
                    var completed = false;
                    var duration = this.GetNaturalDuration();
                    if (duration.IsAutomatic) {
                        progress = 1.0;
                        completed = true;
                    }
                    else if (duration.HasTimeSpan) {
                        var d = duration.TimeSpan.Ticks;
                        if (d === 0) {
                            progress = 1.0;
                        }
                        else if (this.AutoReverse === true) {
                            d = d / 2;
                            progress = 1 - (Math.abs((elapsedTicks % (d + d)) - d) / d);
                        }
                        else {
                            progress = (elapsedTicks / d) - Math.floor(elapsedTicks / d);
                        }
                        var repeat = this.RepeatBehavior || Timeline.DEFAULT_REPEAT_BEHAVIOR;
                        if (repeat.IsForever) {
                        }
                        else if (repeat.HasCount) {
                            if ((d === 0) || (Math.floor(elapsedTicks / d) >= repeat.Count)) {
                                progress = 1.0;
                                completed = true;
                            }
                        }
                        else if (repeat.HasDuration) {
                            if (elapsedTicks >= repeat.Duration.TimeSpan.Ticks) {
                                progress = 1.0;
                                completed = true;
                            }
                        }
                        if (d !== 0)
                            currentTimeTicks = progress * d;
                    }
                    return {
                        CurrentTime: new TimeSpan(currentTimeTicks),
                        Progress: progress,
                        Completed: completed
                    };
                };
                Timeline.prototype.IsAfterBeginTime = function (nowTime) {
                    var beginTime = this.BeginTime;
                    if (beginTime == null)
                        return true;
                    var beginTicks = beginTime.Ticks;
                    if (beginTicks <= 0)
                        return true;
                    var elapsedTicks = nowTime - this._InitialStep;
                    if (elapsedTicks < beginTicks)
                        return false;
                    return true;
                };
                Timeline.prototype.GetNaturalDuration = function () {
                    var d = this.Duration;
                    if (!d || d.IsAutomatic)
                        return this.GetNaturalDurationCore();
                    return d;
                };
                Timeline.prototype.GetNaturalDurationCore = function () {
                    return Duration.Automatic;
                };
                Timeline.prototype.GenerateFrom = function () {
                    return undefined;
                };
                Timeline.prototype.GenerateTo = function (isEntering) {
                    return undefined;
                };
                Timeline.DEFAULT_REPEAT_BEHAVIOR = Animation.RepeatBehavior.FromIterationCount(1);
                Timeline.AutoReverseProperty = DependencyProperty.Register("AutoReverse", function () { return Boolean; }, Timeline, false);
                Timeline.BeginTimeProperty = DependencyProperty.Register("BeginTime", function () { return TimeSpan; }, Timeline);
                Timeline.DurationProperty = DependencyProperty.Register("Duration", function () { return Duration; }, Timeline);
                Timeline.RepeatBehaviorProperty = DependencyProperty.Register("RepeatBehavior", function () { return Animation.RepeatBehavior; }, Timeline);
                Timeline.SpeedRatioProperty = DependencyProperty.Register("SpeedRatio", function () { return Number; }, Timeline, 1.0);
                Timeline.FillBehaviorProperty = DependencyProperty.Register("FillBehavior", function () { return new Fayde.Enum(Animation.FillBehavior); }, Timeline, Animation.FillBehavior.HoldEnd);
                return Timeline;
            })(Fayde.DependencyObject);
            Animation.Timeline = Timeline;
            Fayde.CoreLibrary.add(Timeline);
            var TimelineCollection = (function (_super) {
                __extends(TimelineCollection, _super);
                function TimelineCollection() {
                    _super.apply(this, arguments);
                }
                return TimelineCollection;
            })(Fayde.XamlObjectCollection);
            Animation.TimelineCollection = TimelineCollection;
            Fayde.CoreLibrary.add(TimelineCollection);
        })(Animation = Media.Animation || (Media.Animation = {}));
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
/// <reference path="Timeline.ts" />
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        var Animation;
        (function (Animation) {
            var AnimationBase = (function (_super) {
                __extends(AnimationBase, _super);
                function AnimationBase() {
                    _super.call(this);
                    this._IsHolding = false;
                }
                AnimationBase.prototype.Resolve = function (target, propd) { return true; };
                AnimationBase.prototype.HoldEnd = function () { this._IsHolding = true; };
                AnimationBase.prototype.Stop = function () {
                    var animStorage = this._AnimStorage;
                    if (!animStorage)
                        return;
                    if (Animation.AnimationStore.Detach(animStorage) || animStorage.IsDisabled)
                        return;
                    Animation.AnimationStore.ApplyStop(animStorage);
                };
                AnimationBase.prototype.UpdateInternal = function (clockData) {
                    if (this._IsHolding)
                        return;
                    var animStorage = this._AnimStorage;
                    if (!animStorage || animStorage.IsDisabled)
                        return;
                    var oldValue = animStorage.CurrentValue;
                    animStorage.CurrentValue = this.GetCurrentValue(animStorage.BaseValue, animStorage.StopValue !== undefined ? animStorage.StopValue : animStorage.BaseValue, clockData);
                    if (Animation.Log)
                        console.log(getLogMessage("AnimationBase.UpdateInternal", this, oldValue, animStorage.CurrentValue));
                    if (oldValue === animStorage.CurrentValue || animStorage.CurrentValue === undefined)
                        return;
                    Animation.AnimationStore.ApplyCurrent(animStorage);
                };
                AnimationBase.prototype.GetNaturalDurationCore = function () { return Duration.Automatic; };
                AnimationBase.prototype.GetCurrentValue = function (defaultOriginalValue, defaultDestinationValue, clockData) { return undefined; };
                AnimationBase.prototype._Hookup = function (promotedValues, error) {
                    this._IsHolding = false;
                    this.Reset();
                    var resolution = Animation.Storyboard.ResolveTarget(this);
                    if (!resolution.Target) {
                        console.warn("Could not resolve storyboard target.", Animation.Storyboard.GetTargetName(this));
                    }
                    var refobj = { Value: resolution.Target };
                    var targetProperty = resolution.Property.TryResolveDependencyProperty(refobj, promotedValues);
                    resolution.Target = refobj.Value;
                    if (!targetProperty) {
                        error.Number = BError.XamlParse;
                        var name = Animation.Storyboard.GetTargetName(this);
                        error.Message = "Could not resolve property for storyboard. (" + name + ")->[" + resolution.Property.Path.toString() + "]";
                        return false;
                    }
                    if (!this.Resolve(resolution.Target, targetProperty)) {
                        error.Number = BError.InvalidOperation;
                        error.Message = "Storyboard value could not be converted to the correct type";
                        return false;
                    }
                    this._AnimStorage = Animation.AnimationStore.Create(resolution.Target, targetProperty);
                    this._AnimStorage.Animation = this;
                    Animation.AnimationStore.Attach(this._AnimStorage);
                    return true;
                };
                return AnimationBase;
            })(Animation.Timeline);
            Animation.AnimationBase = AnimationBase;
            Fayde.CoreLibrary.add(AnimationBase);
            function getLogMessage(action, anim, oldValue, newValue) {
                var msg = "ANIMATION:" + action + ":" + anim._ID + "[" + anim.constructor.name + "]";
                msg += ";" + (oldValue === undefined ? "(undefined)" : (oldValue === null ? "(null)" : oldValue.toString()));
                msg += "->" + (newValue === undefined ? "(undefined)" : (newValue === null ? "(null)" : newValue.toString()));
                return msg;
            }
        })(Animation = Media.Animation || (Media.Animation = {}));
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        var Animation;
        (function (Animation) {
            var AnimationStore = (function () {
                function AnimationStore() {
                }
                AnimationStore.Create = function (target, propd) {
                    var baseValue = target.GetValue(propd);
                    if (baseValue === undefined) {
                        var targetType = propd.GetTargetType();
                        if (targetType === Number)
                            baseValue = 0;
                        else if (targetType === String)
                            baseValue = "";
                        else
                            baseValue = new targetType();
                    }
                    return {
                        ID: createId(),
                        Animation: undefined,
                        PropStorage: Fayde.Providers.GetStorage(target, propd),
                        IsDisabled: false,
                        BaseValue: baseValue,
                        CurrentValue: undefined,
                        StopValue: undefined,
                    };
                };
                AnimationStore.Attach = function (animStorage) {
                    var storage = animStorage.PropStorage;
                    var list = storage.Animations;
                    if (!list)
                        storage.Animations = list = [];
                    var prevStorage = list[list.length - 1];
                    list.push(animStorage);
                    if (prevStorage) {
                        animStorage.StopValue = prevStorage.StopValue;
                        prevStorage.IsDisabled = true;
                    }
                    else {
                        animStorage.StopValue = storage.Local;
                    }
                };
                AnimationStore.Detach = function (animStorage) {
                    var storage = animStorage.PropStorage;
                    var list = storage.Animations;
                    if (!list)
                        return false;
                    var len = list.length;
                    if (len < 1)
                        return false;
                    var i = list.lastIndexOf(animStorage);
                    if (i === (len - 1)) {
                        list.pop();
                        if (len > 1) {
                            var last = list[len - 2];
                            if (last.IsDisabled) {
                                last.IsDisabled = false;
                                AnimationStore.ApplyCurrent(last);
                                return true;
                            }
                        }
                    }
                    else {
                        list.splice(i, 1);
                        list[i].StopValue = animStorage.StopValue;
                    }
                    return false;
                };
                AnimationStore.ApplyCurrent = function (animStorage) {
                    var val = animStorage.CurrentValue;
                    if (val === undefined)
                        return;
                    if (Animation.LogApply)
                        console.log(getLogMessage("ApplyCurrent", animStorage, val));
                    var storage = animStorage.PropStorage;
                    storage.Property.Store.SetLocalValue(storage, animStorage.CurrentValue);
                };
                AnimationStore.ApplyStop = function (animStorage) {
                    var val = animStorage.StopValue;
                    if (Animation.LogApply)
                        console.log(getLogMessage("ApplyStop", animStorage, val));
                    var storage = animStorage.PropStorage;
                    storage.Property.Store.SetLocalValue(storage, val);
                };
                return AnimationStore;
            })();
            Animation.AnimationStore = AnimationStore;
            function getLogMessage(action, animStorage, val) {
                var anim = animStorage.Animation;
                var name = Animation.Storyboard.GetTargetName(animStorage.Animation);
                if (anim.HasManualTarget)
                    name = anim.ManualTarget.Name;
                var prop = Animation.Storyboard.GetTargetProperty(anim);
                var msg = "ANIMATION:" + action + ":" + animStorage.ID + "[" + name + "](" + prop.Path + ")->";
                msg += val === undefined ? "(undefined)" : (val === null ? "(null)" : val.toString());
                return msg;
            }
            var lastId = 0;
            function createId() {
                return lastId++;
            }
        })(Animation = Media.Animation || (Media.Animation = {}));
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
/// <reference path="AnimationBase.ts" />
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        var Animation;
        (function (Animation) {
            var AnimationUsingKeyFrames = (function (_super) {
                __extends(AnimationUsingKeyFrames, _super);
                function AnimationUsingKeyFrames() {
                    _super.call(this);
                    var coll = AnimationUsingKeyFrames.KeyFramesProperty.Initialize(this);
                    coll.AttachTo(this);
                }
                AnimationUsingKeyFrames.prototype.Resolve = function (target, propd) {
                    var keyFrames = this.KeyFrames;
                    var sortedList = Animation.KeyFrameCollection.ResolveKeyFrames(this, keyFrames);
                    var count = sortedList.length;
                    for (var j = 0; j < count; j++) {
                        if (!sortedList[j].KeyTime.IsValid)
                            return false;
                    }
                    return true;
                };
                AnimationUsingKeyFrames.prototype.GetCurrentValue = function (defaultOriginValue, defaultDestinationValue, clockData) {
                    var keyFrames = this.KeyFrames;
                    var prevFrameRef = { Value: null };
                    var currentKeyFrame = keyFrames.GetKeyFrameForTime(clockData.CurrentTime, prevFrameRef);
                    var prevFrame = prevFrameRef.Value;
                    if (!currentKeyFrame)
                        return null;
                    var baseValue;
                    var keyStartTime;
                    var keyEndTime = currentKeyFrame._ResolvedKeyTime;
                    if (!prevFrame) {
                        baseValue = defaultOriginValue;
                        keyStartTime = new TimeSpan();
                    }
                    else {
                        if (prevFrame instanceof Animation.ObjectKeyFrame) {
                            baseValue = prevFrame.ConvertedValue;
                        }
                        else {
                            baseValue = prevFrame.Value;
                        }
                        keyStartTime = prevFrame._ResolvedKeyTime;
                    }
                    var progress;
                    if (clockData.CurrentTime.CompareTo(keyEndTime) >= 0) {
                        progress = 1.0;
                    }
                    else {
                        var keyDuration = keyEndTime.Ticks - keyStartTime.Ticks;
                        if (keyDuration <= 0)
                            progress = 1.0;
                        else
                            progress = (clockData.CurrentTime.Ticks - keyStartTime.Ticks) / keyDuration;
                    }
                    return currentKeyFrame.InterpolateValue(baseValue, progress);
                };
                AnimationUsingKeyFrames.prototype.GetNaturalDurationCore = function () {
                    var keyFrames = this.KeyFrames;
                    var sortedList = Animation.KeyFrameCollection.ResolveKeyFrames(this, keyFrames);
                    var len = sortedList.length;
                    var ts;
                    if (len > 0)
                        ts = sortedList[len - 1]._ResolvedKeyTime;
                    else
                        ts = new TimeSpan();
                    return new Duration(ts);
                };
                AnimationUsingKeyFrames.prototype.AddKeyFrame = function (kf) { this.KeyFrames.Add(kf); };
                AnimationUsingKeyFrames.prototype.RemoveKeyFrame = function (kf) { this.KeyFrames.Remove(kf); };
                AnimationUsingKeyFrames.KeyFramesProperty = DependencyProperty.RegisterImmutable("KeyFrames", function () { return Animation.KeyFrameCollection; }, AnimationUsingKeyFrames);
                return AnimationUsingKeyFrames;
            })(Animation.AnimationBase);
            Animation.AnimationUsingKeyFrames = AnimationUsingKeyFrames;
            Fayde.CoreLibrary.add(AnimationUsingKeyFrames);
            Fayde.Markup.Content(AnimationUsingKeyFrames, AnimationUsingKeyFrames.KeyFramesProperty);
        })(Animation = Media.Animation || (Media.Animation = {}));
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
/// <reference path="../../Core/Triggers.ts" />
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        var Animation;
        (function (Animation) {
            var BeginStoryboard = (function (_super) {
                __extends(BeginStoryboard, _super);
                function BeginStoryboard() {
                    _super.apply(this, arguments);
                }
                BeginStoryboard.prototype.Fire = function () {
                    var sb = this.Storyboard;
                    if (sb)
                        sb.Begin();
                };
                BeginStoryboard.StoryboardProperty = DependencyProperty.RegisterCore("Storyboard", function () { return Animation.Storyboard; }, BeginStoryboard);
                return BeginStoryboard;
            })(Fayde.TriggerAction);
            Animation.BeginStoryboard = BeginStoryboard;
            Fayde.CoreLibrary.add(BeginStoryboard);
            Fayde.Markup.Content(BeginStoryboard, BeginStoryboard.StoryboardProperty);
        })(Animation = Media.Animation || (Media.Animation = {}));
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
/// <reference path="AnimationBase.ts" />
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        var Animation;
        (function (Animation) {
            var ColorAnimation = (function (_super) {
                __extends(ColorAnimation, _super);
                function ColorAnimation() {
                    _super.call(this);
                    this._FromCached = null;
                    this._ToCached = null;
                    this._ByCached = null;
                    this._EasingCached = undefined;
                }
                ColorAnimation.prototype.GetCurrentValue = function (defaultOriginalValue, defaultDestinationValue, clockData) {
                    var start = new Color();
                    if (this._FromCached)
                        start = this._FromCached;
                    else if (defaultOriginalValue instanceof Color)
                        start = defaultOriginalValue;
                    var end = start;
                    if (this._ToCached)
                        end = this._ToCached;
                    else if (this._ByCached)
                        end = start.Add(this._ByCached);
                    else if (defaultDestinationValue instanceof Color)
                        end = defaultDestinationValue;
                    var easingFunc = this._EasingCached;
                    if (easingFunc)
                        clockData.Progress = easingFunc.Ease(clockData.Progress);
                    return Color.LERP(start, end, clockData.Progress);
                };
                ColorAnimation.prototype._FromChanged = function (args) {
                    this._FromCached = args.NewValue;
                };
                ColorAnimation.prototype._ToChanged = function (args) {
                    this._ToCached = args.NewValue;
                };
                ColorAnimation.prototype._ByChanged = function (args) {
                    this._ByCached = args.NewValue;
                };
                ColorAnimation.prototype._EasingChanged = function (args) {
                    this._EasingCached = args.NewValue;
                };
                ColorAnimation.prototype.GenerateFrom = function () {
                    return new ColorAnimation();
                };
                ColorAnimation.prototype.GenerateTo = function (isEntering) {
                    var val = this.From != null ? this.From : this.To;
                    if (val == null)
                        return null;
                    var ca = new ColorAnimation();
                    ca.To = val;
                    return ca;
                };
                ColorAnimation.ByProperty = DependencyProperty.Register("By", function () { return Color; }, ColorAnimation, null, function (d, args) { return d._ByChanged(args); });
                ColorAnimation.EasingFunctionProperty = DependencyProperty.Register("EasingFunction", function () { return Animation.EasingFunctionBase; }, ColorAnimation, undefined, function (d, args) { return d._EasingChanged(args); });
                ColorAnimation.FromProperty = DependencyProperty.Register("From", function () { return Color; }, ColorAnimation, null, function (d, args) { return d._FromChanged(args); });
                ColorAnimation.ToProperty = DependencyProperty.Register("To", function () { return Color; }, ColorAnimation, null, function (d, args) { return d._ToChanged(args); });
                return ColorAnimation;
            })(Animation.AnimationBase);
            Animation.ColorAnimation = ColorAnimation;
            Fayde.CoreLibrary.add(ColorAnimation);
        })(Animation = Media.Animation || (Media.Animation = {}));
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
/// <reference path="AnimationUsingKeyFrames.ts" />
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        var Animation;
        (function (Animation) {
            var ColorAnimationUsingKeyFrames = (function (_super) {
                __extends(ColorAnimationUsingKeyFrames, _super);
                function ColorAnimationUsingKeyFrames() {
                    _super.apply(this, arguments);
                }
                ColorAnimationUsingKeyFrames.prototype.GenerateFrom = function () {
                    return new Animation.ColorAnimation();
                };
                ColorAnimationUsingKeyFrames.prototype.GenerateTo = function (isEntering) {
                    var kfs = this.KeyFrames;
                    if (kfs.Count === 0)
                        return null;
                    var val = (kfs.GetValueAt(isEntering ? 0 : kfs.Count - 1)).Value;
                    if (val == null)
                        return null;
                    var ca = new Animation.ColorAnimation();
                    ca.To = val;
                    return ca;
                };
                return ColorAnimationUsingKeyFrames;
            })(Animation.AnimationUsingKeyFrames);
            Animation.ColorAnimationUsingKeyFrames = ColorAnimationUsingKeyFrames;
            Fayde.CoreLibrary.add(ColorAnimationUsingKeyFrames);
        })(Animation = Media.Animation || (Media.Animation = {}));
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
/// <reference path="../../Core/DependencyObject.ts" />
/// <reference path="../../Core/XamlObjectCollection.ts" />
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        var Animation;
        (function (Animation) {
            var KeyFrame = (function (_super) {
                __extends(KeyFrame, _super);
                function KeyFrame() {
                    _super.apply(this, arguments);
                    this._ResolvedKeyTime = null;
                    this._Resolved = false;
                }
                KeyFrame.prototype.CoerceKeyTime = function (dobj, propd, value, coerced, error) {
                    if (!value)
                        coerced.Value = this.KeyTime;
                    else
                        coerced.Value = value;
                    return true;
                };
                KeyFrame.prototype.InterpolateValue = function (baseValue, keyFrameProgress) {
                    return undefined;
                };
                KeyFrame.prototype.CompareToTimeSpan = function (otherTs) {
                    return this._ResolvedKeyTime.CompareTo(otherTs);
                };
                KeyFrame.prototype.Listen = function (listener) { this._Listener = listener; };
                KeyFrame.prototype.Unlisten = function (listener) { if (this._Listener === listener)
                    this._Listener = null; };
                KeyFrame.prototype.InvalidateKeyFrame = function () {
                    var listener = this._Listener;
                    if (listener)
                        listener.KeyFrameChanged(this);
                };
                KeyFrame.Comparer = function (kf1, kf2) {
                    var ts1 = kf1._ResolvedKeyTime;
                    var ts2 = kf2._ResolvedKeyTime;
                    return ts1.CompareTo(ts2);
                };
                KeyFrame.ResolveKeyFrames = function (animation, arr) {
                    var totalInterpolationTime;
                    var hasTimeSpanKeyFrame = false;
                    var highestKeyTimeTimeSpan = new TimeSpan();
                    var keyFrame;
                    var len = arr.length;
                    var i;
                    for (i = 0; i < len; i++) {
                        keyFrame = arr[i];
                        keyFrame._ResolvedKeyTime = new TimeSpan();
                        keyFrame._Resolved = false;
                    }
                    var keyTime;
                    for (i = 0; i < len; i++) {
                        keyFrame = arr[i];
                        keyTime = keyFrame.KeyTime;
                        if (keyTime.HasTimeSpan) {
                            hasTimeSpanKeyFrame = true;
                            var ts = keyTime.TimeSpan;
                            if (ts.CompareTo(highestKeyTimeTimeSpan) > 0)
                                highestKeyTimeTimeSpan = ts;
                            keyFrame._ResolvedKeyTime = ts;
                            keyFrame._Resolved = true;
                        }
                    }
                    var dur = animation.Duration;
                    if (dur && dur.HasTimeSpan) {
                        totalInterpolationTime = dur.TimeSpan;
                    }
                    else if (hasTimeSpanKeyFrame) {
                        totalInterpolationTime = highestKeyTimeTimeSpan;
                    }
                    else {
                        totalInterpolationTime = new TimeSpan(TimeSpan._TicksPerSecond);
                    }
                    for (i = 0; i < len; i++) {
                        keyFrame = arr[i];
                        keyTime = keyFrame.KeyTime;
                        if (keyTime.HasPercent) {
                            keyFrame._ResolvedKeyTime = totalInterpolationTime.Multiply(keyTime.Percent);
                            keyFrame._Resolved = true;
                        }
                    }
                    if (len > 0) {
                        keyFrame = arr[len - 1];
                        keyTime = keyFrame.KeyTime;
                        if (keyTime.IsPaced || keyTime.IsUniform) {
                            keyFrame._ResolvedKeyTime = totalInterpolationTime;
                            keyFrame._Resolved = true;
                        }
                    }
                    if (len > 0) {
                        keyFrame = arr[len - 1];
                        keyTime = keyFrame.KeyTime;
                        if (!keyFrame._Resolved && keyTime.IsPaced) {
                            keyFrame._ResolvedKeyTime = new TimeSpan();
                            keyFrame._Resolved = true;
                        }
                    }
                    return arr;
                };
                KeyFrame.KeyTimeProperty = DependencyProperty.Register("KeyTime", function () { return KeyTime; }, KeyFrame, undefined, function (d, args) { return d.InvalidateKeyFrame(); });
                return KeyFrame;
            })(Fayde.DependencyObject);
            Animation.KeyFrame = KeyFrame;
            Fayde.CoreLibrary.add(KeyFrame);
            var KeyFrameCollection = (function (_super) {
                __extends(KeyFrameCollection, _super);
                function KeyFrameCollection() {
                    _super.apply(this, arguments);
                    this._Resolved = false;
                    this._SortedList = [];
                }
                KeyFrameCollection.prototype.GetKeyFrameForTime = function (t, prevFrameRef) {
                    var currentKeyFrame = null;
                    var previousKeyFrame = null;
                    var i;
                    var sortedList = this._SortedList;
                    if (sortedList.length == 0) {
                        prevFrameRef.Value = null;
                        return null;
                    }
                    var keyFrame;
                    var valuePropd;
                    for (i = 0; i < sortedList.length; i++) {
                        keyFrame = sortedList[i];
                        if (keyFrame.CompareToTimeSpan(t) >= 0 || (i + 1) >= sortedList.length)
                            break;
                    }
                    for (; i >= 0; i--) {
                        keyFrame = sortedList[i];
                        valuePropd = DependencyProperty.GetDependencyProperty(keyFrame.constructor, "Value");
                        if (keyFrame.GetValue(valuePropd) !== undefined) {
                            currentKeyFrame = keyFrame;
                            break;
                        }
                    }
                    for (i--; i >= 0; i--) {
                        keyFrame = sortedList[i];
                        valuePropd = DependencyProperty.GetDependencyProperty(keyFrame.constructor, "Value");
                        if (keyFrame.GetValue(valuePropd) !== undefined) {
                            previousKeyFrame = keyFrame;
                            break;
                        }
                    }
                    prevFrameRef.Value = previousKeyFrame;
                    return currentKeyFrame;
                };
                KeyFrameCollection.prototype.Clear = function () {
                    this._Resolved = false;
                    this._SortedList = [];
                    return _super.prototype.Clear.call(this);
                };
                KeyFrameCollection.prototype.AddingToCollection = function (value, error) {
                    if (!_super.prototype.AddingToCollection.call(this, value, error))
                        return false;
                    this._Resolved = false;
                    value.Listen(this);
                    return true;
                };
                KeyFrameCollection.prototype.RemovedFromCollection = function (value, isValueSafe) {
                    _super.prototype.RemovedFromCollection.call(this, value, isValueSafe);
                    this._Resolved = false;
                    value.Unlisten(this);
                };
                KeyFrameCollection.prototype.KeyFrameChanged = function (source) {
                    this._Resolved = false;
                };
                KeyFrameCollection.ResolveKeyFrames = function (animation, coll) {
                    if (coll._Resolved)
                        return coll._SortedList;
                    coll._SortedList = KeyFrame.ResolveKeyFrames(animation, coll._ht).slice(0);
                    coll._SortedList.sort(KeyFrame.Comparer);
                    coll._Resolved = true;
                    return coll._SortedList;
                };
                return KeyFrameCollection;
            })(Fayde.XamlObjectCollection);
            Animation.KeyFrameCollection = KeyFrameCollection;
            Fayde.CoreLibrary.add(KeyFrameCollection);
        })(Animation = Media.Animation || (Media.Animation = {}));
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
/// <reference path="KeyFrame.ts" />
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        var Animation;
        (function (Animation) {
            var ColorKeyFrame = (function (_super) {
                __extends(ColorKeyFrame, _super);
                function ColorKeyFrame() {
                    _super.apply(this, arguments);
                }
                ColorKeyFrame.ValueProperty = DependencyProperty.Register("Value", function () { return Color; }, ColorKeyFrame);
                return ColorKeyFrame;
            })(Animation.KeyFrame);
            Animation.ColorKeyFrame = ColorKeyFrame;
            Fayde.CoreLibrary.add(ColorKeyFrame);
            var DiscreteColorKeyFrame = (function (_super) {
                __extends(DiscreteColorKeyFrame, _super);
                function DiscreteColorKeyFrame() {
                    _super.apply(this, arguments);
                }
                DiscreteColorKeyFrame.prototype.InterpolateValue = function (baseValue, keyFrameProgress) {
                    if (keyFrameProgress >= 1.0)
                        return this.Value;
                    return baseValue;
                };
                return DiscreteColorKeyFrame;
            })(ColorKeyFrame);
            Animation.DiscreteColorKeyFrame = DiscreteColorKeyFrame;
            Fayde.CoreLibrary.add(DiscreteColorKeyFrame);
            var EasingColorKeyFrame = (function (_super) {
                __extends(EasingColorKeyFrame, _super);
                function EasingColorKeyFrame() {
                    _super.apply(this, arguments);
                }
                EasingColorKeyFrame.prototype.InterpolateValue = function (baseValue, keyFrameProgress) {
                    if (keyFrameProgress >= 1.0)
                        return this.Value;
                    var start = baseValue;
                    var end = this.Value;
                    var easingFunction = this.EasingFunction;
                    if (easingFunction)
                        keyFrameProgress = easingFunction.Ease(keyFrameProgress);
                    return Color.LERP(start, end, keyFrameProgress);
                };
                EasingColorKeyFrame.EasingFunctionProperty = DependencyProperty.Register("EasingFunction", function () { return Animation.EasingFunctionBase; }, EasingColorKeyFrame);
                return EasingColorKeyFrame;
            })(ColorKeyFrame);
            Animation.EasingColorKeyFrame = EasingColorKeyFrame;
            Fayde.CoreLibrary.add(EasingColorKeyFrame);
            var LinearColorKeyFrame = (function (_super) {
                __extends(LinearColorKeyFrame, _super);
                function LinearColorKeyFrame() {
                    _super.apply(this, arguments);
                }
                LinearColorKeyFrame.prototype.InterpolateValue = function (baseValue, keyFrameProgress) {
                    return Color.LERP(baseValue, this.Value, keyFrameProgress);
                };
                return LinearColorKeyFrame;
            })(ColorKeyFrame);
            Animation.LinearColorKeyFrame = LinearColorKeyFrame;
            Fayde.CoreLibrary.add(LinearColorKeyFrame);
            var SplineColorKeyFrame = (function (_super) {
                __extends(SplineColorKeyFrame, _super);
                function SplineColorKeyFrame() {
                    _super.apply(this, arguments);
                }
                SplineColorKeyFrame.prototype.InterpolateValue = function (baseValue, keyFrameProgress) {
                    if (keyFrameProgress >= 1.0)
                        return this.Value;
                    var start = baseValue;
                    var end = this.Value;
                    var splineProgress = keyFrameProgress;
                    var keySpline = this.KeySpline;
                    if (keySpline)
                        splineProgress = keySpline.GetSplineProgress(keyFrameProgress);
                    return Color.LERP(start, end, splineProgress);
                };
                SplineColorKeyFrame.KeySplineProperty = DependencyProperty.Register("KeySpline", function () { return Animation.KeySpline; }, SplineColorKeyFrame);
                return SplineColorKeyFrame;
            })(ColorKeyFrame);
            Animation.SplineColorKeyFrame = SplineColorKeyFrame;
            Fayde.CoreLibrary.add(SplineColorKeyFrame);
        })(Animation = Media.Animation || (Media.Animation = {}));
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        var Animation;
        (function (Animation) {
            var Curves = (function () {
                function Curves() {
                }
                Curves.QuadraticArrayYForX = function (arr, x, count) {
                    for (var i = 0; i < count; i++) {
                        if (x < arr[i].c2.x)
                            return Curves.QuadraticYForX(x, arr[i]);
                    }
                    return 0.0;
                };
                Curves.QuadraticYForX = function (x, src) {
                    var l = src.c2.x - src.c0.x;
                    if (l <= 0)
                        return 0.0;
                    x = (x - src.c0.x) / l;
                    return ((1 - x) * (1 - x)) * src.c0.y + ((2 * x) * (1 - x) * src.c1.y) + ((x * x) * src.c2.y);
                };
                Curves.SubdivideCubicAtLevel = function (b, lvl, src) {
                    Curves.RecursiveSubdivide(b, lvl, 1, 0, src);
                };
                Curves.RecursiveSubdivide = function (b, lvl, currentlvl, pos, src) {
                    var data = { b1: null, b2: null };
                    Curves.SubdivideCubic(data, src);
                    var b1 = data.b1;
                    var b2 = data.b2;
                    if (currentlvl === lvl) {
                        b[pos] = b1;
                        b[pos + 1] = b2;
                        return pos + 2;
                    }
                    pos = Curves.RecursiveSubdivide(b, lvl, currentlvl + 1, pos, b1);
                    pos = Curves.RecursiveSubdivide(b, lvl, currentlvl + 1, pos, b2);
                    return pos;
                };
                Curves.SubdivideCubic = function (data, src) {
                    var p01 = { x: 0, y: 0 }, p012 = { x: 0, y: 0 }, p0123 = { x: 0, y: 0 };
                    var p12 = { x: 0, y: 0 }, p123 = { x: 0, y: 0 };
                    var p23 = { x: 0, y: 0 };
                    Curves.HalfLerpPoint(p01, src.c0, src.c1);
                    Curves.HalfLerpPoint(p12, src.c1, src.c2);
                    Curves.HalfLerpPoint(p23, src.c2, src.c3);
                    Curves.HalfLerpPoint(p012, p01, p12);
                    Curves.HalfLerpPoint(p123, p12, p23);
                    Curves.HalfLerpPoint(p0123, p012, p123);
                    data.b1 = {
                        c0: src.c0,
                        c1: p01,
                        c2: p012,
                        c3: p0123
                    };
                    data.b2 = {
                        c0: p0123,
                        c1: p123,
                        c2: p23,
                        c3: src.c3
                    };
                };
                Curves.HalfLerpPoint = function (p, p1, p2) {
                    p.x = p1.x + (p2.x - p1.x) * 0.5;
                    p.y = p1.y + (p2.y - p1.y) * 0.5;
                };
                Curves.ConvertCubicsToQuadratics = function (srcArray, count) {
                    var destArray = [];
                    for (var i = 0; i < count; i++) {
                        destArray.push(Curves.QuadraticFromCubic(srcArray[i]));
                    }
                    return destArray;
                };
                Curves.QuadraticFromCubic = function (src) {
                    return {
                        c0: {
                            x: src.c0.x,
                            y: src.c0.y
                        },
                        c1: {
                            x: (src.c1.x + src.c2.x) / 2.0,
                            y: (src.c1.y + src.c2.y) / 2.0
                        },
                        c2: {
                            x: src.c3.x,
                            y: src.c3.y
                        }
                    };
                };
                return Curves;
            })();
            Animation.Curves = Curves;
        })(Animation = Media.Animation || (Media.Animation = {}));
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
/// <reference path="AnimationBase.ts" />
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        var Animation;
        (function (Animation) {
            var DoubleAnimation = (function (_super) {
                __extends(DoubleAnimation, _super);
                function DoubleAnimation() {
                    _super.call(this);
                    this._FromCached = null;
                    this._ToCached = null;
                    this._ByCached = null;
                    this._EasingCached = undefined;
                }
                DoubleAnimation.prototype.GetCurrentValue = function (defaultOriginalValue, defaultDestinationValue, clockData) {
                    var start = 0.0;
                    if (this._FromCached != null)
                        start = this._FromCached;
                    else if (defaultOriginalValue != null && typeof defaultOriginalValue === "number")
                        start = defaultOriginalValue;
                    var end = start;
                    if (this._ToCached != null)
                        end = this._ToCached;
                    else if (this._ByCached != null)
                        end = start + this._ByCached;
                    else if (defaultDestinationValue != null && typeof defaultDestinationValue === "number")
                        end = defaultDestinationValue;
                    var easingFunc = this._EasingCached;
                    if (easingFunc != null)
                        clockData.Progress = easingFunc.Ease(clockData.Progress);
                    return start + ((end - start) * clockData.Progress);
                };
                DoubleAnimation.prototype._FromChanged = function (args) {
                    this._FromCached = args.NewValue;
                };
                DoubleAnimation.prototype._ToChanged = function (args) {
                    this._ToCached = args.NewValue;
                };
                DoubleAnimation.prototype._ByChanged = function (args) {
                    this._ByCached = args.NewValue;
                };
                DoubleAnimation.prototype._EasingChanged = function (args) {
                    this._EasingCached = args.NewValue;
                };
                DoubleAnimation.prototype.GenerateFrom = function () {
                    return new DoubleAnimation();
                };
                DoubleAnimation.prototype.GenerateTo = function (isEntering) {
                    var val = (this.From != null) ? this.From : this.To;
                    if (val == null)
                        return null;
                    var da = new DoubleAnimation();
                    da.To = val;
                    return da;
                };
                DoubleAnimation.ByProperty = DependencyProperty.Register("By", function () { return Number; }, DoubleAnimation, null, function (d, args) { return d._ByChanged(args); });
                DoubleAnimation.EasingFunctionProperty = DependencyProperty.Register("EasingFunction", function () { return Animation.EasingFunctionBase; }, DoubleAnimation, undefined, function (d, args) { return d._EasingChanged(args); });
                DoubleAnimation.FromProperty = DependencyProperty.Register("From", function () { return Number; }, DoubleAnimation, null, function (d, args) { return d._FromChanged(args); });
                DoubleAnimation.ToProperty = DependencyProperty.Register("To", function () { return Number; }, DoubleAnimation, null, function (d, args) { return d._ToChanged(args); });
                return DoubleAnimation;
            })(Animation.AnimationBase);
            Animation.DoubleAnimation = DoubleAnimation;
            Fayde.CoreLibrary.add(DoubleAnimation);
        })(Animation = Media.Animation || (Media.Animation = {}));
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
/// <reference path="AnimationUsingKeyFrames.ts" />
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        var Animation;
        (function (Animation) {
            var DoubleAnimationUsingKeyFrames = (function (_super) {
                __extends(DoubleAnimationUsingKeyFrames, _super);
                function DoubleAnimationUsingKeyFrames() {
                    _super.apply(this, arguments);
                }
                DoubleAnimationUsingKeyFrames.prototype.GenerateFrom = function () {
                    return new Animation.DoubleAnimation();
                };
                DoubleAnimationUsingKeyFrames.prototype.GenerateTo = function (isEntering) {
                    var kfs = this.KeyFrames;
                    if (kfs.Count === 0)
                        return null;
                    var val = (kfs.GetValueAt(isEntering ? 0 : kfs.Count - 1)).Value;
                    if (val == null)
                        return null;
                    var da = new Animation.DoubleAnimation();
                    da.To = val;
                    return da;
                };
                return DoubleAnimationUsingKeyFrames;
            })(Animation.AnimationUsingKeyFrames);
            Animation.DoubleAnimationUsingKeyFrames = DoubleAnimationUsingKeyFrames;
            Fayde.CoreLibrary.add(DoubleAnimationUsingKeyFrames);
        })(Animation = Media.Animation || (Media.Animation = {}));
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
/// <reference path="KeyFrame.ts" />
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        var Animation;
        (function (Animation) {
            var DoubleKeyFrame = (function (_super) {
                __extends(DoubleKeyFrame, _super);
                function DoubleKeyFrame() {
                    _super.apply(this, arguments);
                }
                DoubleKeyFrame.ValueProperty = DependencyProperty.Register("Value", function () { return Number; }, DoubleKeyFrame);
                return DoubleKeyFrame;
            })(Animation.KeyFrame);
            Animation.DoubleKeyFrame = DoubleKeyFrame;
            Fayde.CoreLibrary.add(DoubleKeyFrame);
            var DiscreteDoubleKeyFrame = (function (_super) {
                __extends(DiscreteDoubleKeyFrame, _super);
                function DiscreteDoubleKeyFrame() {
                    _super.apply(this, arguments);
                }
                DiscreteDoubleKeyFrame.prototype.InterpolateValue = function (baseValue, keyFrameProgress) {
                    if (keyFrameProgress >= 1.0)
                        return this.Value;
                    return baseValue;
                };
                return DiscreteDoubleKeyFrame;
            })(DoubleKeyFrame);
            Animation.DiscreteDoubleKeyFrame = DiscreteDoubleKeyFrame;
            Fayde.CoreLibrary.add(DiscreteDoubleKeyFrame);
            var EasingDoubleKeyFrame = (function (_super) {
                __extends(EasingDoubleKeyFrame, _super);
                function EasingDoubleKeyFrame() {
                    _super.apply(this, arguments);
                }
                EasingDoubleKeyFrame.prototype.InterpolateValue = function (baseValue, keyFrameProgress) {
                    if (keyFrameProgress >= 1.0)
                        return this.Value;
                    var start = baseValue;
                    var end = this.Value;
                    var easingFunction = this.EasingFunction;
                    if (easingFunction)
                        keyFrameProgress = easingFunction.Ease(keyFrameProgress);
                    if (isNaN(start))
                        start = 0;
                    if (isNaN(end))
                        end = 0;
                    return start + (end - start) * keyFrameProgress;
                };
                EasingDoubleKeyFrame.EasingFunctionProperty = DependencyProperty.Register("EasingFunction", function () { return Animation.EasingFunctionBase; }, EasingDoubleKeyFrame);
                return EasingDoubleKeyFrame;
            })(DoubleKeyFrame);
            Animation.EasingDoubleKeyFrame = EasingDoubleKeyFrame;
            Fayde.CoreLibrary.add(EasingDoubleKeyFrame);
            var LinearDoubleKeyFrame = (function (_super) {
                __extends(LinearDoubleKeyFrame, _super);
                function LinearDoubleKeyFrame() {
                    _super.apply(this, arguments);
                }
                LinearDoubleKeyFrame.prototype.InterpolateValue = function (baseValue, keyFrameProgress) {
                    var start = baseValue;
                    var end = this.Value;
                    if (isNaN(start))
                        start = 0;
                    if (isNaN(end))
                        end = 0;
                    return start + (end - start) * keyFrameProgress;
                };
                return LinearDoubleKeyFrame;
            })(DoubleKeyFrame);
            Animation.LinearDoubleKeyFrame = LinearDoubleKeyFrame;
            Fayde.CoreLibrary.add(LinearDoubleKeyFrame);
            var SplineDoubleKeyFrame = (function (_super) {
                __extends(SplineDoubleKeyFrame, _super);
                function SplineDoubleKeyFrame() {
                    _super.apply(this, arguments);
                }
                SplineDoubleKeyFrame.prototype.InterpolateValue = function (baseValue, keyFrameProgress) {
                    if (keyFrameProgress >= 1.0)
                        return this.Value;
                    var start = baseValue;
                    var end = this.Value;
                    var splineProgress = keyFrameProgress;
                    var keySpline = this.KeySpline;
                    if (keySpline)
                        splineProgress = keySpline.GetSplineProgress(keyFrameProgress);
                    if (isNaN(start))
                        start = 0;
                    if (isNaN(end))
                        end = 0;
                    return start + (end - start) * splineProgress;
                };
                SplineDoubleKeyFrame.KeySplineProperty = DependencyProperty.Register("KeySpline", function () { return Animation.KeySpline; }, SplineDoubleKeyFrame);
                return SplineDoubleKeyFrame;
            })(DoubleKeyFrame);
            Animation.SplineDoubleKeyFrame = SplineDoubleKeyFrame;
            Fayde.CoreLibrary.add(SplineDoubleKeyFrame);
        })(Animation = Media.Animation || (Media.Animation = {}));
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
/// <reference path="../../Core/DependencyObject.ts" />
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        var Animation;
        (function (Animation) {
            var EasingFunctionBase = (function (_super) {
                __extends(EasingFunctionBase, _super);
                function EasingFunctionBase() {
                    _super.apply(this, arguments);
                }
                EasingFunctionBase.prototype.Ease = function (normalizedTime) {
                    var easingMode = this.EasingMode;
                    switch (easingMode) {
                        case Animation.EasingMode.EaseIn:
                            return this.EaseInCore(normalizedTime);
                        case Animation.EasingMode.EaseOut:
                            return this.EaseInCore(1.0 - normalizedTime);
                        case Animation.EasingMode.EaseInOut:
                            return normalizedTime <= 0.5 ?
                                this.EaseInCore(normalizedTime * 2) * 0.5 :
                                1.0 - this.EaseInCore(((1.0 - normalizedTime) * 2) * 0.5);
                        default:
                            return 0.0;
                    }
                };
                EasingFunctionBase.prototype.EaseInCore = function (t) {
                    return t;
                };
                EasingFunctionBase.EasingModeProperty = DependencyProperty.Register("EasingMode", function () { return new Fayde.Enum(Animation.EasingMode); }, EasingFunctionBase);
                return EasingFunctionBase;
            })(Fayde.DependencyObject);
            Animation.EasingFunctionBase = EasingFunctionBase;
        })(Animation = Media.Animation || (Media.Animation = {}));
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
/// <reference path="EasingFunctionBase.ts" />
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        var Animation;
        (function (Animation) {
            var BackEase = (function (_super) {
                __extends(BackEase, _super);
                function BackEase() {
                    _super.apply(this, arguments);
                }
                BackEase.prototype.EaseInCore = function (t) {
                    var a = this.Amplitude;
                    return (t * t * t) - (t * a * Math.sin(t * Math.PI));
                };
                BackEase.AmplitudeProperty = DependencyProperty.Register("Amplitude", function () { return Number; }, BackEase);
                return BackEase;
            })(Animation.EasingFunctionBase);
            Animation.BackEase = BackEase;
            Fayde.CoreLibrary.add(BackEase);
            var BounceEase = (function (_super) {
                __extends(BounceEase, _super);
                function BounceEase() {
                    _super.apply(this, arguments);
                }
                BounceEase.prototype.EaseInCore = function (t) {
                    t = 1 - t;
                    var bounces = this.Bounces;
                    var bounciness = this.Bounciness;
                    var r = -1;
                    var period = 2;
                    for (var i = 0; i <= bounces; i++) {
                        r += (period * Math.pow(1 + (bounciness / 2), -i));
                    }
                    var x1 = -1.0;
                    var x2 = 0;
                    var r_sq = r * r;
                    var val = 100;
                    var p = 0;
                    while (val > 0.0) {
                        x2 = x1 + period * Math.pow(1 + (bounciness / 2), -p++);
                        val = r_sq * (t - x1 / r) * (t - x2 / r);
                        x1 = x2;
                    }
                    return -val;
                };
                BounceEase.BouncesProperty = DependencyProperty.Register("Bounces", function () { return Number; }, BounceEase, 3);
                BounceEase.BouncinessProperty = DependencyProperty.Register("Bounciness", function () { return Number; }, BounceEase, 2);
                return BounceEase;
            })(Animation.EasingFunctionBase);
            Animation.BounceEase = BounceEase;
            Fayde.CoreLibrary.add(BounceEase);
            var CircleEase = (function (_super) {
                __extends(CircleEase, _super);
                function CircleEase() {
                    _super.apply(this, arguments);
                }
                CircleEase.prototype.EaseInCore = function (t) {
                    return 1 - Math.sqrt(1 - (t * t));
                };
                return CircleEase;
            })(Animation.EasingFunctionBase);
            Animation.CircleEase = CircleEase;
            Fayde.CoreLibrary.add(CircleEase);
            var CubicEase = (function (_super) {
                __extends(CubicEase, _super);
                function CubicEase() {
                    _super.apply(this, arguments);
                }
                CubicEase.prototype.EaseInCore = function (t) {
                    return t * t * t;
                };
                return CubicEase;
            })(Animation.EasingFunctionBase);
            Animation.CubicEase = CubicEase;
            Fayde.CoreLibrary.add(CubicEase);
            var ElasticEase = (function (_super) {
                __extends(ElasticEase, _super);
                function ElasticEase() {
                    _super.apply(this, arguments);
                }
                ElasticEase.prototype.EaseInCore = function (t) {
                    var period = 1.0 / (this.Oscillations + .25);
                    var offset = period / 4;
                    t = t - 1;
                    return t * -Math.pow(2.0, this.Springiness * t) * Math.sin(((t - offset) * Math.PI * 2) / period);
                };
                ElasticEase.OscillationsProperty = DependencyProperty.Register("Oscillations", function () { return Number; }, ElasticEase);
                ElasticEase.SpringinessProperty = DependencyProperty.Register("Springiness", function () { return Number; }, ElasticEase);
                return ElasticEase;
            })(Animation.EasingFunctionBase);
            Animation.ElasticEase = ElasticEase;
            Fayde.CoreLibrary.add(ElasticEase);
            var ExponentialEase = (function (_super) {
                __extends(ExponentialEase, _super);
                function ExponentialEase() {
                    _super.apply(this, arguments);
                }
                ExponentialEase.prototype.EaseInCore = function (t) {
                    var e = this.Exponent;
                    return (Math.exp(e * t) - 1) / (Math.exp(e) - 1);
                };
                ExponentialEase.ExponentProperty = DependencyProperty.Register("Exponent", function () { return Number; }, ExponentialEase);
                return ExponentialEase;
            })(Animation.EasingFunctionBase);
            Animation.ExponentialEase = ExponentialEase;
            Fayde.CoreLibrary.add(ExponentialEase);
            var PowerEase = (function (_super) {
                __extends(PowerEase, _super);
                function PowerEase() {
                    _super.apply(this, arguments);
                }
                PowerEase.prototype.EaseInCore = function (t) {
                    return Math.pow(t, this.Power);
                };
                PowerEase.PowerProperty = DependencyProperty.Register("Power", function () { return Number; }, PowerEase);
                return PowerEase;
            })(Animation.EasingFunctionBase);
            Animation.PowerEase = PowerEase;
            Fayde.CoreLibrary.add(PowerEase);
            var QuadraticEase = (function (_super) {
                __extends(QuadraticEase, _super);
                function QuadraticEase() {
                    _super.apply(this, arguments);
                }
                QuadraticEase.prototype.EaseInCore = function (t) {
                    return t * t;
                };
                return QuadraticEase;
            })(Animation.EasingFunctionBase);
            Animation.QuadraticEase = QuadraticEase;
            Fayde.CoreLibrary.add(QuadraticEase);
            var QuarticEase = (function (_super) {
                __extends(QuarticEase, _super);
                function QuarticEase() {
                    _super.apply(this, arguments);
                }
                QuarticEase.prototype.EaseInCore = function (t) {
                    return t * t * t * t;
                };
                return QuarticEase;
            })(Animation.EasingFunctionBase);
            Animation.QuarticEase = QuarticEase;
            Fayde.CoreLibrary.add(QuarticEase);
            var QuinticEase = (function (_super) {
                __extends(QuinticEase, _super);
                function QuinticEase() {
                    _super.apply(this, arguments);
                }
                QuinticEase.prototype.EaseInCore = function (t) {
                    return t * t * t * t * t;
                };
                return QuinticEase;
            })(Animation.EasingFunctionBase);
            Animation.QuinticEase = QuinticEase;
            Fayde.CoreLibrary.add(QuinticEase);
            var SineEase = (function (_super) {
                __extends(SineEase, _super);
                function SineEase() {
                    _super.apply(this, arguments);
                }
                SineEase.prototype.EaseInCore = function (t) {
                    return 1 - (Math.sin(1 - t) * (Math.PI / 2));
                };
                return SineEase;
            })(Animation.EasingFunctionBase);
            Animation.SineEase = SineEase;
            Fayde.CoreLibrary.add(SineEase);
        })(Animation = Media.Animation || (Media.Animation = {}));
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
/// <reference path="../../Core/DependencyObject.ts" />
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        var Animation;
        (function (Animation) {
            var KeySpline = (function (_super) {
                __extends(KeySpline, _super);
                function KeySpline() {
                    _super.apply(this, arguments);
                    this._QuadraticsArray = null;
                }
                KeySpline.prototype.GetSplineProgress = function (linearProgress) {
                    if (linearProgress >= 1.0)
                        return 1.0;
                    if (linearProgress <= 0.0)
                        return 0.0;
                    if (!this._QuadraticsArray)
                        this._RegenerateQuadratics();
                    return Animation.Curves.QuadraticArrayYForX(this._QuadraticsArray, linearProgress, KeySpline.TOTAL_COUNT);
                };
                KeySpline.prototype.InvalidateControlPoints = function () {
                    this._QuadraticsArray = null;
                };
                KeySpline.prototype._RegenerateQuadratics = function () {
                    var c1 = this.ControlPoint1 || new Point(0, 0);
                    var c2 = this.ControlPoint2 || new Point(1.0, 1.0);
                    var src = {
                        c0: { x: 0.0, y: 0.0 },
                        c1: { x: c1.x, y: c1.y },
                        c2: { x: c2.x, y: c2.y },
                        c3: { x: 1.0, y: 1.0 }
                    };
                    var carr = [];
                    Animation.Curves.SubdivideCubicAtLevel(carr, KeySpline.PRECISION_LEVEL, src);
                    this._QuadraticsArray = Animation.Curves.ConvertCubicsToQuadratics(carr, KeySpline.TOTAL_COUNT);
                };
                KeySpline.PRECISION_LEVEL = 4;
                KeySpline.TOTAL_COUNT = Math.pow(2, KeySpline.PRECISION_LEVEL);
                KeySpline.ControlPoint1Property = DependencyProperty.RegisterCore("ControlPoint1", function () { return Point; }, KeySpline, undefined, function (d, args) { return d.InvalidateControlPoints(); });
                KeySpline.ControlPoint2Property = DependencyProperty.RegisterCore("ControlPoint2", function () { return Point; }, KeySpline, undefined, function (d, args) { return d.InvalidateControlPoints(); });
                return KeySpline;
            })(Fayde.DependencyObject);
            Animation.KeySpline = KeySpline;
            Fayde.CoreLibrary.add(KeySpline);
        })(Animation = Media.Animation || (Media.Animation = {}));
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
/// <reference path="AnimationUsingKeyFrames.ts" />
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        var Animation;
        (function (Animation) {
            var ObjectAnimationUsingKeyFrames = (function (_super) {
                __extends(ObjectAnimationUsingKeyFrames, _super);
                function ObjectAnimationUsingKeyFrames() {
                    _super.apply(this, arguments);
                }
                ObjectAnimationUsingKeyFrames.prototype.Resolve = function (target, propd) {
                    for (var en = this.KeyFrames.getEnumerator(); en.moveNext();) {
                        var keyFrame = en.current;
                        var value = keyFrame.Value;
                        if (value == null) {
                            keyFrame.ConvertedValue = undefined;
                        }
                        else {
                            var cv = convertKeyFrame(propd, value);
                            if (cv === BAD_CONVERSION)
                                return false;
                            keyFrame.ConvertedValue = cv;
                        }
                    }
                    return _super.prototype.Resolve.call(this, target, propd);
                };
                return ObjectAnimationUsingKeyFrames;
            })(Animation.AnimationUsingKeyFrames);
            Animation.ObjectAnimationUsingKeyFrames = ObjectAnimationUsingKeyFrames;
            Fayde.CoreLibrary.add(ObjectAnimationUsingKeyFrames);
            var BAD_CONVERSION = {};
            function convertKeyFrame(propd, value) {
                try {
                    return nullstone.convertAnyToType(value, propd.GetTargetType());
                }
                catch (err) {
                    console.warn("Error resolving ObjectAnimation Value.");
                    return BAD_CONVERSION;
                }
            }
        })(Animation = Media.Animation || (Media.Animation = {}));
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
/// <reference path="KeyFrame.ts" />
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        var Animation;
        (function (Animation) {
            var ObjectKeyFrame = (function (_super) {
                __extends(ObjectKeyFrame, _super);
                function ObjectKeyFrame() {
                    _super.apply(this, arguments);
                    this.ConvertedValue = undefined;
                }
                ObjectKeyFrame.ValueProperty = DependencyProperty.Register("Value", function () { return Object; }, ObjectKeyFrame);
                return ObjectKeyFrame;
            })(Animation.KeyFrame);
            Animation.ObjectKeyFrame = ObjectKeyFrame;
            Fayde.CoreLibrary.add(ObjectKeyFrame);
            var DiscreteObjectKeyFrame = (function (_super) {
                __extends(DiscreteObjectKeyFrame, _super);
                function DiscreteObjectKeyFrame() {
                    _super.apply(this, arguments);
                }
                DiscreteObjectKeyFrame.prototype.InterpolateValue = function (baseValue, keyFrameProgress) {
                    if (keyFrameProgress >= 1.0)
                        return this.ConvertedValue;
                    return baseValue;
                };
                return DiscreteObjectKeyFrame;
            })(ObjectKeyFrame);
            Animation.DiscreteObjectKeyFrame = DiscreteObjectKeyFrame;
            Fayde.CoreLibrary.add(DiscreteObjectKeyFrame);
        })(Animation = Media.Animation || (Media.Animation = {}));
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
/// <reference path="AnimationBase.ts" />
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        var Animation;
        (function (Animation) {
            var PointAnimation = (function (_super) {
                __extends(PointAnimation, _super);
                function PointAnimation() {
                    _super.call(this);
                    this._FromCached = null;
                    this._ToCached = null;
                    this._ByCached = null;
                    this._EasingCached = undefined;
                }
                PointAnimation.prototype.GetCurrentValue = function (defaultOriginalValue, defaultDestinationValue, clockData) {
                    var start = new Point();
                    if (this._FromCached != null)
                        start = this._FromCached;
                    else if (defaultOriginalValue instanceof Point)
                        start = defaultOriginalValue;
                    var end = start;
                    if (this._ToCached != null)
                        end = this._ToCached;
                    else if (this._ByCached != null)
                        end = new Point(start.x + this._ByCached.x, start.y + this._ByCached.y);
                    else if (defaultDestinationValue instanceof Point)
                        end = defaultDestinationValue;
                    var easingFunc = this._EasingCached;
                    if (easingFunc != null)
                        clockData.Progress = easingFunc.Ease(clockData.Progress);
                    return Point.LERP(start, end, clockData.Progress);
                };
                PointAnimation.prototype._FromChanged = function (args) {
                    this._FromCached = args.NewValue;
                };
                PointAnimation.prototype._ToChanged = function (args) {
                    this._ToCached = args.NewValue;
                };
                PointAnimation.prototype._ByChanged = function (args) {
                    this._ByCached = args.NewValue;
                };
                PointAnimation.prototype._EasingChanged = function (args) {
                    this._EasingCached = args.NewValue;
                };
                PointAnimation.prototype.GenerateFrom = function () {
                    return new PointAnimation();
                };
                PointAnimation.prototype.GenerateTo = function (isEntering) {
                    var val = (this.From != null) ? this.From : this.To;
                    if (val == null)
                        return null;
                    var pa = new PointAnimation();
                    pa.To = val;
                    return pa;
                };
                PointAnimation.ByProperty = DependencyProperty.Register("By", function () { return Point; }, PointAnimation, null, function (d, args) { return d._ByChanged(args); });
                PointAnimation.EasingFunctionProperty = DependencyProperty.Register("EasingFunction", function () { return Animation.EasingFunctionBase; }, PointAnimation, undefined, function (d, args) { return d._EasingChanged(args); });
                PointAnimation.FromProperty = DependencyProperty.Register("From", function () { return Point; }, PointAnimation, null, function (d, args) { return d._FromChanged(args); });
                PointAnimation.ToProperty = DependencyProperty.Register("To", function () { return Point; }, PointAnimation, null, function (d, args) { return d._ToChanged(args); });
                return PointAnimation;
            })(Animation.AnimationBase);
            Animation.PointAnimation = PointAnimation;
            Fayde.CoreLibrary.add(PointAnimation);
        })(Animation = Media.Animation || (Media.Animation = {}));
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
/// <reference path="AnimationUsingKeyFrames.ts" />
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        var Animation;
        (function (Animation) {
            var PointAnimationUsingKeyFrames = (function (_super) {
                __extends(PointAnimationUsingKeyFrames, _super);
                function PointAnimationUsingKeyFrames() {
                    _super.apply(this, arguments);
                }
                PointAnimationUsingKeyFrames.prototype.GenerateFrom = function () {
                    return new Animation.PointAnimation();
                };
                PointAnimationUsingKeyFrames.prototype.GenerateTo = function (isEntering) {
                    var kfs = this.KeyFrames;
                    if (kfs.Count === 0)
                        return null;
                    var val = (kfs.GetValueAt(isEntering ? 0 : kfs.Count - 1)).Value;
                    if (val == null)
                        return null;
                    var pa = new Animation.PointAnimation();
                    pa.To = val;
                    return pa;
                };
                return PointAnimationUsingKeyFrames;
            })(Animation.AnimationUsingKeyFrames);
            Animation.PointAnimationUsingKeyFrames = PointAnimationUsingKeyFrames;
            Fayde.CoreLibrary.add(PointAnimationUsingKeyFrames);
        })(Animation = Media.Animation || (Media.Animation = {}));
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
/// <reference path="KeyFrame.ts" />
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        var Animation;
        (function (Animation) {
            var PointKeyFrame = (function (_super) {
                __extends(PointKeyFrame, _super);
                function PointKeyFrame() {
                    _super.apply(this, arguments);
                }
                PointKeyFrame.ValueProperty = DependencyProperty.Register("Value", function () { return Point; }, PointKeyFrame);
                return PointKeyFrame;
            })(Animation.KeyFrame);
            Animation.PointKeyFrame = PointKeyFrame;
            Fayde.CoreLibrary.add(PointKeyFrame);
            var DiscretePointKeyFrame = (function (_super) {
                __extends(DiscretePointKeyFrame, _super);
                function DiscretePointKeyFrame() {
                    _super.apply(this, arguments);
                }
                DiscretePointKeyFrame.prototype.InterpolateValue = function (baseValue, keyFrameProgress) {
                    if (keyFrameProgress >= 1.0)
                        return this.Value;
                    return baseValue;
                };
                return DiscretePointKeyFrame;
            })(PointKeyFrame);
            Animation.DiscretePointKeyFrame = DiscretePointKeyFrame;
            Fayde.CoreLibrary.add(DiscretePointKeyFrame);
            var EasingPointKeyFrame = (function (_super) {
                __extends(EasingPointKeyFrame, _super);
                function EasingPointKeyFrame() {
                    _super.apply(this, arguments);
                }
                EasingPointKeyFrame.prototype.InterpolateValue = function (baseValue, keyFrameProgress) {
                    if (keyFrameProgress >= 1.0)
                        return this.Value;
                    var start = baseValue;
                    var end = this.Value;
                    var easingFunction = this.EasingFunction;
                    if (easingFunction)
                        keyFrameProgress = easingFunction.Ease(keyFrameProgress);
                    return Point.LERP(start, end, keyFrameProgress);
                };
                EasingPointKeyFrame.EasingFunctionProperty = DependencyProperty.Register("EasingFunction", function () { return Animation.EasingFunctionBase; }, EasingPointKeyFrame);
                return EasingPointKeyFrame;
            })(PointKeyFrame);
            Animation.EasingPointKeyFrame = EasingPointKeyFrame;
            Fayde.CoreLibrary.add(EasingPointKeyFrame);
            var LinearPointKeyFrame = (function (_super) {
                __extends(LinearPointKeyFrame, _super);
                function LinearPointKeyFrame() {
                    _super.apply(this, arguments);
                }
                LinearPointKeyFrame.prototype.InterpolateValue = function (baseValue, keyFrameProgress) {
                    return Point.LERP(baseValue, this.Value, keyFrameProgress);
                };
                return LinearPointKeyFrame;
            })(PointKeyFrame);
            Animation.LinearPointKeyFrame = LinearPointKeyFrame;
            Fayde.CoreLibrary.add(LinearPointKeyFrame);
            var SplinePointKeyFrame = (function (_super) {
                __extends(SplinePointKeyFrame, _super);
                function SplinePointKeyFrame() {
                    _super.apply(this, arguments);
                }
                SplinePointKeyFrame.prototype.InterpolateValue = function (baseValue, keyFrameProgress) {
                    if (keyFrameProgress >= 1.0)
                        return this.Value;
                    var start = baseValue;
                    var end = this.Value;
                    var splineProgress = keyFrameProgress;
                    var keySpline = this.KeySpline;
                    if (keySpline)
                        splineProgress = keySpline.GetSplineProgress(keyFrameProgress);
                    if (isNaN(start.x))
                        start.x = 0;
                    if (isNaN(start.y))
                        start.y = 0;
                    if (isNaN(end.x))
                        end.x = 0;
                    if (isNaN(end.y))
                        end.y = 0;
                    return Point.LERP(start, end, splineProgress);
                };
                SplinePointKeyFrame.KeySplineProperty = DependencyProperty.Register("KeySpline", function () { return Animation.KeySpline; }, SplinePointKeyFrame);
                return SplinePointKeyFrame;
            })(PointKeyFrame);
            Animation.SplinePointKeyFrame = SplinePointKeyFrame;
            Fayde.CoreLibrary.add(SplinePointKeyFrame);
        })(Animation = Media.Animation || (Media.Animation = {}));
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
/// <reference path="Timeline.ts" />
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        var Animation;
        (function (Animation) {
            var Storyboard = (function (_super) {
                __extends(Storyboard, _super);
                function Storyboard() {
                    _super.call(this);
                    var coll = Storyboard.ChildrenProperty.Initialize(this);
                    coll.AttachTo(this);
                }
                Storyboard.GetTargetName = function (d) {
                    return d.GetValue(Storyboard.TargetNameProperty);
                };
                Storyboard.SetTargetName = function (d, value) {
                    return d.SetValue(Storyboard.TargetNameProperty, value);
                };
                Storyboard.GetTargetProperty = function (d) {
                    return d.GetValue(Storyboard.TargetPropertyProperty);
                };
                Storyboard.SetTargetProperty = function (d, value) {
                    return d.SetValue(Storyboard.TargetPropertyProperty, value);
                };
                Storyboard.ResolveTarget = function (timeline) {
                    var res = {
                        Target: undefined,
                        Property: undefined
                    };
                    if (timeline.HasManualTarget) {
                        res.Target = timeline.ManualTarget;
                    }
                    else {
                        var targetName = Storyboard.GetTargetName(timeline);
                        if (targetName)
                            res.Target = timeline.FindName(targetName, true);
                    }
                    res.Property = Storyboard.GetTargetProperty(timeline);
                    return res;
                };
                Storyboard.SetTarget = function (timeline, target) {
                    timeline.ManualTarget = target;
                };
                Storyboard.prototype.Begin = function () {
                    if (Animation.Log)
                        console.log(getLogMessage("Storyboard.Begin", this, true));
                    this.Reset();
                    var error = new BError();
                    var promotedValues = [];
                    var enumerator = this.Children.getEnumerator();
                    while (enumerator.moveNext()) {
                        var animation = enumerator.current;
                        if (!animation._Hookup(promotedValues, error))
                            error.ThrowException();
                    }
                    Fayde.Application.Current.RegisterStoryboard(this);
                };
                Storyboard.prototype.Pause = function () {
                    _super.prototype.Pause.call(this);
                    for (var en = this.Children.getEnumerator(); en.moveNext();) {
                        en.current.Pause();
                    }
                };
                Storyboard.prototype.Resume = function () {
                    _super.prototype.Resume.call(this);
                    for (var en = this.Children.getEnumerator(); en.moveNext();) {
                        en.current.Resume();
                    }
                };
                Storyboard.prototype.Stop = function () {
                    if (Animation.Log)
                        console.log(getLogMessage("Storyboard.Stop", this, false));
                    _super.prototype.Stop.call(this);
                    Fayde.Application.Current.UnregisterStoryboard(this);
                    for (var en = this.Children.getEnumerator(); en.moveNext();) {
                        en.current.Stop();
                    }
                };
                Storyboard.prototype.UpdateInternal = function (clockData) {
                    if (Animation.Log)
                        console.log(getLogMessage("Storyboard.UpdateInternal", this, false, clockData));
                    for (var en = this.Children.getEnumerator(); en.moveNext();) {
                        en.current.Update(clockData.CurrentTime.Ticks);
                    }
                };
                Storyboard.prototype.GetNaturalDurationCore = function () {
                    var fullTicks = 0;
                    for (var en = this.Children.getEnumerator(); en.moveNext();) {
                        var timeline = en.current;
                        var dur = timeline.GetNaturalDuration();
                        if (dur.IsAutomatic)
                            continue;
                        if (dur.IsForever)
                            return Duration.Forever;
                        var spanTicks = dur.TimeSpan.Ticks;
                        var repeat = timeline.RepeatBehavior || Animation.Timeline.DEFAULT_REPEAT_BEHAVIOR;
                        if (repeat.IsForever)
                            return Duration.Forever;
                        if (repeat.HasCount)
                            spanTicks = spanTicks * repeat.Count;
                        if (timeline.AutoReverse)
                            spanTicks *= 2;
                        if (repeat.HasDuration)
                            spanTicks = repeat.Duration.TimeSpan.Ticks;
                        if (spanTicks !== 0)
                            spanTicks = spanTicks / timeline.SpeedRatio;
                        var bt = timeline.BeginTime;
                        if (bt)
                            spanTicks += bt.Ticks;
                        if (fullTicks === 0 || fullTicks <= spanTicks)
                            fullTicks = spanTicks;
                    }
                    if (!fullTicks)
                        return Duration.Automatic;
                    return new Duration(new TimeSpan(fullTicks));
                };
                Storyboard.TargetNameProperty = DependencyProperty.RegisterAttached("TargetName", function () { return String; }, Storyboard);
                Storyboard.TargetPropertyProperty = DependencyProperty.RegisterAttached("TargetProperty", function () { return Fayde.Data.PropertyPath; }, Storyboard);
                Storyboard.ChildrenProperty = DependencyProperty.RegisterImmutable("Children", function () { return Animation.TimelineCollection; }, Storyboard);
                return Storyboard;
            })(Animation.Timeline);
            Animation.Storyboard = Storyboard;
            Fayde.CoreLibrary.add(Storyboard);
            Fayde.Markup.Content(Storyboard, Storyboard.ChildrenProperty);
            function getLogMessage(action, storyboard, full, clockData) {
                var anims = [];
                var cur = "";
                var enumerator = storyboard.Children.getEnumerator();
                var animation;
                while (enumerator.moveNext()) {
                    animation = enumerator.current;
                    cur = "";
                    cur += "(";
                    cur += animation.constructor.name;
                    cur += ":";
                    cur += Storyboard.GetTargetName(animation);
                    cur += ":";
                    var path = Storyboard.GetTargetProperty(animation);
                    cur += path ? path.Path : "";
                    cur += ")";
                    anims.push(cur);
                }
                var msg = "ANIMATION:" + action + ":" + storyboard._ID;
                if (clockData)
                    msg += "(" + (clockData.Progress * 100).toFixed(0) + "%)";
                if (full)
                    msg += "->[" + anims.join(",") + "]";
                return msg;
            }
        })(Animation = Media.Animation || (Media.Animation = {}));
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
/// <reference path="../../Core/DependencyObject.ts" />
/// <reference path="../GeneralTransform.ts" />
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        var Effects;
        (function (Effects) {
            var Effect = (function (_super) {
                __extends(Effect, _super);
                function Effect() {
                    _super.apply(this, arguments);
                }
                Effect.prototype.PreRender = function (ctx) {
                };
                Effect.prototype.PostRender = function (ctx) {
                };
                Effect.prototype.GetPadding = function (thickness) {
                    return false;
                };
                Effect.EffectMappingProperty = DependencyProperty.Register("EffectMapping", function () { return Media.GeneralTransform; }, Effect);
                return Effect;
            })(Fayde.DependencyObject);
            Effects.Effect = Effect;
            Fayde.CoreLibrary.add(Effect);
            var reactions;
            (function (reactions) {
                Fayde.DPReaction(Effect.EffectMappingProperty, function (dobj, ov, nv) { return Fayde.Incite(dobj); });
            })(reactions || (reactions = {}));
        })(Effects = Media.Effects || (Media.Effects = {}));
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
/// <reference path="Effect.ts" />
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        var Effects;
        (function (Effects) {
            var BlurEffect = (function (_super) {
                __extends(BlurEffect, _super);
                function BlurEffect() {
                    _super.apply(this, arguments);
                }
                BlurEffect.RadiusProperty = DependencyProperty.Register("Radius", function () { return Number; }, BlurEffect, undefined, Fayde.Incite);
                return BlurEffect;
            })(Effects.Effect);
            Effects.BlurEffect = BlurEffect;
            Fayde.CoreLibrary.add(BlurEffect);
        })(Effects = Media.Effects || (Media.Effects = {}));
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
/// <reference path="Effect.ts" />
/// <reference path="../../Primitives/Color.ts" />
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        var Effects;
        (function (Effects) {
            var DropShadowEffect = (function (_super) {
                __extends(DropShadowEffect, _super);
                function DropShadowEffect() {
                    _super.apply(this, arguments);
                }
                DropShadowEffect.prototype.GetPadding = function (thickness) {
                    var radius = Math.min(this.BlurRadius, DropShadowEffect.MAX_BLUR_RADIUS);
                    var depth = Math.min(Math.max(0, this.ShadowDepth), DropShadowEffect.MAX_SHADOW_DEPTH);
                    var direction = this.Direction * Math.PI / 180.0;
                    var width = Math.ceil(radius);
                    var offsetX = Math.cos(direction) * depth;
                    var offsetY = Math.sin(direction) * depth;
                    var left = -offsetX + width;
                    var top = offsetY + width;
                    var right = offsetX + width;
                    var bottom = -offsetY + width;
                    var l = left < 1.0 ? 1.0 : Math.ceil(left);
                    var t = top < 1.0 ? 1.0 : Math.ceil(top);
                    var r = right < 1.0 ? 1.0 : Math.ceil(right);
                    var b = bottom < 1.0 ? 1.0 : Math.ceil(bottom);
                    var changed = thickness.left !== l
                        || thickness.top !== t
                        || thickness.right !== r
                        || thickness.bottom !== b;
                    thickness.left = l;
                    thickness.top = t;
                    thickness.right = r;
                    thickness.bottom = b;
                    return changed;
                };
                DropShadowEffect.prototype.PreRender = function (ctx) {
                    var color = this.Color;
                    var opacity = color.A * this.Opacity;
                    var radius = Math.min(this.BlurRadius, DropShadowEffect.MAX_BLUR_RADIUS);
                    var depth = Math.min(Math.max(0, this.ShadowDepth), DropShadowEffect.MAX_SHADOW_DEPTH);
                    var direction = this.Direction * Math.PI / 180.0;
                    var offsetX = Math.cos(direction) * depth;
                    var offsetY = -Math.sin(direction) * depth;
                    var raw = ctx.raw;
                    raw.shadowColor = "rgba(" + color.R + "," + color.G + "," + color.B + "," + opacity + ")";
                    raw.shadowBlur = radius;
                    raw.shadowOffsetX = offsetX;
                    raw.shadowOffsetY = offsetY;
                };
                DropShadowEffect.MAX_BLUR_RADIUS = 20;
                DropShadowEffect.MAX_SHADOW_DEPTH = 300;
                DropShadowEffect.BlurRadiusProperty = DependencyProperty.Register("BlurRadius", function () { return Number; }, DropShadowEffect, 5.0, Fayde.Incite);
                DropShadowEffect.ColorProperty = DependencyProperty.Register("Color", function () { return Color; }, DropShadowEffect, Color.KnownColors.Black, Fayde.Incite);
                DropShadowEffect.DirectionProperty = DependencyProperty.Register("Direction", function () { return Number; }, DropShadowEffect, 315.0, Fayde.Incite);
                DropShadowEffect.OpacityProperty = DependencyProperty.Register("Opacity", function () { return Number; }, DropShadowEffect, 1.0, Fayde.Incite);
                DropShadowEffect.ShadowDepthProperty = DependencyProperty.Register("ShadowDepth", function () { return Number; }, DropShadowEffect, 5.0, Fayde.Incite);
                return DropShadowEffect;
            })(Effects.Effect);
            Effects.DropShadowEffect = DropShadowEffect;
            Fayde.CoreLibrary.add(DropShadowEffect);
        })(Effects = Media.Effects || (Media.Effects = {}));
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
/// <reference path="../../Core/DependencyObject.ts"/>
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        var Imaging;
        (function (Imaging) {
            var ImageSource = (function (_super) {
                __extends(ImageSource, _super);
                function ImageSource() {
                    _super.apply(this, arguments);
                }
                Object.defineProperty(ImageSource.prototype, "pixelWidth", {
                    get: function () {
                        return 0;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ImageSource.prototype, "pixelHeight", {
                    get: function () {
                        return 0;
                    },
                    enumerable: true,
                    configurable: true
                });
                ImageSource.prototype.lock = function () {
                };
                ImageSource.prototype.unlock = function () {
                };
                Object.defineProperty(ImageSource.prototype, "image", {
                    get: function () {
                        return undefined;
                    },
                    enumerable: true,
                    configurable: true
                });
                return ImageSource;
            })(Fayde.DependencyObject);
            Imaging.ImageSource = ImageSource;
            Fayde.CoreLibrary.add(ImageSource);
        })(Imaging = Media.Imaging || (Media.Imaging = {}));
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
/// <reference path="ImageSource.ts"/>
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        var Imaging;
        (function (Imaging) {
            function intGreaterThanZeroValidator(instance, propd, value) {
                if (typeof value !== "number")
                    return false;
                return value > 0;
            }
            var BitmapSource = (function (_super) {
                __extends(BitmapSource, _super);
                function BitmapSource() {
                    _super.apply(this, arguments);
                    this._Listener = null;
                }
                Object.defineProperty(BitmapSource.prototype, "pixelWidth", {
                    get: function () {
                        return this.GetValue(BitmapSource.PixelWidthProperty);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(BitmapSource.prototype, "pixelHeight", {
                    get: function () {
                        return this.GetValue(BitmapSource.PixelHeightProperty);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(BitmapSource.prototype, "image", {
                    get: function () {
                        return this._Image;
                    },
                    enumerable: true,
                    configurable: true
                });
                BitmapSource.prototype.ResetImage = function () {
                    var _this = this;
                    this._Image = new Image();
                    this._Image.onerror = function (e) { return _this._OnErrored(e); };
                    this._Image.onload = function (e) { return _this._OnLoad(e); };
                    this.PixelWidth = 0;
                    this.PixelHeight = 0;
                    var listener = this._Listener;
                    if (listener)
                        listener.ImageChanged(this);
                };
                BitmapSource.prototype.UriSourceChanged = function (oldValue, newValue) {
                    if (!this._Image || !newValue)
                        this.ResetImage();
                    this._Image.src = Fayde.TypeManager.resolveResource(newValue);
                    var listener = this._Listener;
                    if (listener)
                        listener.ImageChanged(this);
                };
                BitmapSource.prototype.Listen = function (listener) {
                    this._Listener = listener;
                };
                BitmapSource.prototype.Unlisten = function (listener) {
                    if (this._Listener === listener)
                        this._Listener = null;
                };
                BitmapSource.prototype._OnErrored = function (e) {
                    console.info("Failed to load: " + this._Image.src.toString());
                    var listener = this._Listener;
                    if (listener)
                        listener.OnImageErrored(this, e);
                };
                BitmapSource.prototype._OnLoad = function (e) {
                    this.PixelWidth = this._Image.naturalWidth;
                    this.PixelHeight = this._Image.naturalHeight;
                    var listener = this._Listener;
                    if (listener) {
                        listener.OnImageLoaded(this, e);
                        listener.ImageChanged(this);
                    }
                };
                BitmapSource.PixelWidthProperty = DependencyProperty.RegisterFull("PixelWidth", function () { return Number; }, BitmapSource, 0, undefined, undefined, undefined, intGreaterThanZeroValidator);
                BitmapSource.PixelHeightProperty = DependencyProperty.RegisterFull("PixelHeight", function () { return Number; }, BitmapSource, 0, undefined, undefined, undefined, intGreaterThanZeroValidator);
                return BitmapSource;
            })(Imaging.ImageSource);
            Imaging.BitmapSource = BitmapSource;
            Fayde.CoreLibrary.add(BitmapSource);
        })(Imaging = Media.Imaging || (Media.Imaging = {}));
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
/// <reference path="BitmapSource.ts"/>
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        var Imaging;
        (function (Imaging) {
            var BitmapImage = (function (_super) {
                __extends(BitmapImage, _super);
                function BitmapImage(uri) {
                    _super.call(this);
                    this.ImageFailed = new nullstone.Event();
                    this.ImageOpened = new nullstone.Event();
                    this._BackingBuffer = null;
                    if (uri)
                        this.UriSource = uri;
                }
                BitmapImage.prototype._UriSourceChanged = function (args) {
                    var uri = args.NewValue;
                    if (Fayde.Uri.isNullOrEmpty(uri))
                        this.ResetImage();
                    else
                        this.UriSourceChanged(args.OldValue, uri);
                };
                BitmapImage.prototype._OnErrored = function (e) {
                    _super.prototype._OnErrored.call(this, e);
                    this.ImageFailed.raise(this, null);
                };
                BitmapImage.prototype._OnLoad = function (e) {
                    _super.prototype._OnLoad.call(this, e);
                    this.ImageOpened.raise(this, null);
                };
                BitmapImage.prototype.SetSource = function (buffer) {
                    this._BackingBuffer = buffer;
                    this.UriSource = Imaging.encodeImage(buffer);
                };
                BitmapImage.UriSourceProperty = DependencyProperty.RegisterFull("UriSource", function () { return Fayde.Uri; }, BitmapImage, undefined, function (bi, args) { return bi._UriSourceChanged(args); }, undefined, true);
                return BitmapImage;
            })(Imaging.BitmapSource);
            Imaging.BitmapImage = BitmapImage;
            Fayde.CoreLibrary.add(BitmapImage);
            nullstone.registerTypeConverter(Imaging.ImageSource, function (val) {
                if (!val)
                    return null;
                if (val instanceof Imaging.ImageSource)
                    return val;
                if (val instanceof ArrayBuffer) {
                    var bi = new BitmapImage();
                    bi.SetSource(val);
                    return bi;
                }
                var bi = new BitmapImage();
                bi.UriSource = nullstone.convertAnyToType(val, Fayde.Uri);
                return bi;
            });
        })(Imaging = Media.Imaging || (Media.Imaging = {}));
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
/// <reference path="../TileBrush.ts"/>
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        var Imaging;
        (function (Imaging) {
            var ImageBrush = (function (_super) {
                __extends(ImageBrush, _super);
                function ImageBrush() {
                    _super.apply(this, arguments);
                    this.ImageFailed = new nullstone.Event();
                    this.ImageOpened = new nullstone.Event();
                }
                ImageBrush._SourceCoercer = function (d, propd, value) {
                    if (typeof value === "string")
                        return new Media.Imaging.BitmapImage(new Fayde.Uri(value));
                    if (value instanceof Fayde.Uri)
                        return new Media.Imaging.BitmapImage(value);
                    return value;
                };
                ImageBrush.prototype.setupBrush = function (ctx, bounds) {
                    var source = this.ImageSource;
                    if (source && source.image)
                        _super.prototype.setupBrush.call(this, ctx, bounds);
                };
                ImageBrush.prototype.GetTileExtents = function () {
                    var source = this.ImageSource;
                    return new minerva.Rect(0, 0, source.pixelWidth, source.pixelHeight);
                };
                ImageBrush.prototype.DrawTile = function (canvasCtx, bounds) {
                    var source = this.ImageSource;
                    canvasCtx.rect(0, 0, source.pixelWidth, source.pixelHeight);
                    canvasCtx.fillStyle = canvasCtx.createPattern(source.image, "no-repeat");
                    canvasCtx.fill();
                };
                ImageBrush.prototype._ImageSourceChanged = function (args) {
                    var oldSrc;
                    if ((oldSrc = args.OldValue) && (oldSrc instanceof Imaging.BitmapSource))
                        oldSrc.Unlisten(this);
                    var newSrc;
                    if ((newSrc = args.NewValue) && (newSrc instanceof Imaging.BitmapSource))
                        newSrc.Listen(this);
                    this.InvalidateBrush();
                };
                ImageBrush.prototype.OnImageErrored = function (source, e) { this.ImageFailed.raise(this, null); };
                ImageBrush.prototype.OnImageLoaded = function (source, e) { this.ImageOpened.raise(this, null); };
                ImageBrush.prototype.ImageChanged = function (source) {
                    this.InvalidateBrush();
                };
                ImageBrush.ImageSourceProperty = DependencyProperty.RegisterFull("ImageSource", function () { return Imaging.ImageSource; }, ImageBrush, undefined, function (d, args) { return d._ImageSourceChanged(args); }, ImageBrush._SourceCoercer);
                return ImageBrush;
            })(Media.TileBrush);
            Imaging.ImageBrush = ImageBrush;
            Fayde.CoreLibrary.add(ImageBrush);
        })(Imaging = Media.Imaging || (Media.Imaging = {}));
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        var Imaging;
        (function (Imaging) {
            function encodeImage(buffer) {
                var bytes = new Uint8Array(buffer);
                var data = convertToBase64(bytes);
                var type = getImageType(bytes);
                return new Fayde.Uri("data:" + type + ";base64," + data);
            }
            Imaging.encodeImage = encodeImage;
            function getImageType(bytes) {
                if (isJpg(bytes))
                    return "image/jpeg";
                if (isPng(bytes))
                    return "image/png";
                return "image/jpeg";
            }
            function convertToBase64(bytes) {
                var arr = [];
                for (var i = 0; i < bytes.byteLength; i++) {
                    arr.push(String.fromCharCode(bytes[i]));
                }
                return window.btoa(arr.join(''));
            }
            function isJpg(bytes) {
                return bytes[0] === 0xFF
                    && bytes[1] === 0xD8
                    && bytes[bytes.length - 2] === 0xFF
                    && bytes[bytes.length - 1] === 0xD9;
            }
            function isPng(bytes) {
                return bytes[0] === 0x89
                    && bytes[1] === 0x50
                    && bytes[2] === 0x4E
                    && bytes[3] === 0x47
                    && bytes[4] === 0x0D
                    && bytes[5] === 0x0A
                    && bytes[6] === 0x1A
                    && bytes[7] === 0x0A;
            }
        })(Imaging = Media.Imaging || (Media.Imaging = {}));
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        var LinearGradient;
        (function (LinearGradient) {
            function createRepeatInterpolator(start, end, bounds) {
                var first = { x: start.x, y: start.y };
                var last = { x: end.x, y: end.y };
                var dir = { x: end.x - start.x, y: end.y - start.y };
                LinearGradient.calcMetrics(dir, first, last, bounds);
                var numSteps = (last.x - first.x) / dir.x;
                var stepSize = 1.0 / numSteps;
                var cur = -stepSize;
                return {
                    x0: first.x,
                    y0: first.y,
                    x1: last.x,
                    y1: last.y,
                    step: function () {
                        cur += stepSize;
                        return cur < 1;
                    },
                    interpolate: function (offset) {
                        return cur + (offset / numSteps);
                    }
                };
            }
            LinearGradient.createRepeatInterpolator = createRepeatInterpolator;
            function createReflectInterpolator(start, end, bounds) {
                var first = { x: start.x, y: start.y };
                var last = { x: end.x, y: end.y };
                var dir = { x: end.x - start.x, y: end.y - start.y };
                LinearGradient.calcMetrics(dir, first, last, bounds);
                var numSteps = (last.x - first.x) / dir.x;
                var stepSize = 1.0 / numSteps;
                var cur = -stepSize;
                var inverted = Math.round((start.x - first.x) / dir.x) % 2 === 0;
                return {
                    x0: first.x,
                    y0: first.y,
                    x1: last.x,
                    y1: last.y,
                    step: function () {
                        inverted = !inverted;
                        cur += stepSize;
                        return cur < 1;
                    },
                    interpolate: function (offset) {
                        var norm = offset / numSteps;
                        return !inverted ? cur + norm : cur + (stepSize - norm);
                    }
                };
            }
            LinearGradient.createReflectInterpolator = createReflectInterpolator;
        })(LinearGradient = Media.LinearGradient || (Media.LinearGradient = {}));
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        var LinearGradient;
        (function (LinearGradient) {
            function calcMetrics(dir, first, last, bounds) {
                if (dir.y === 0) {
                    if (dir.x < 0)
                        W(dir, first, last, bounds);
                    else if (dir.x !== 0)
                        E(dir, first, last, bounds);
                }
                else if (dir.x === 0) {
                    if (dir.y < 0)
                        N(dir, first, last, bounds);
                    else if (dir.y !== 0)
                        S(dir, first, last, bounds);
                }
                else if (dir.x < 0 && dir.y < 0) {
                    NW(dir, first, last, bounds);
                }
                else if (dir.x < 0 && dir.y > 0) {
                    SW(dir, first, last, bounds);
                }
                else if (dir.x > 0 && dir.y < 0) {
                    NE(dir, first, last, bounds);
                }
                else if (dir.x > 0 && dir.y > 0) {
                    SE(dir, first, last, bounds);
                }
            }
            LinearGradient.calcMetrics = calcMetrics;
            function E(dir, first, last, bounds) {
                var maxX = bounds.x + bounds.width;
                while (first.x >= bounds.x)
                    first.x -= dir.x;
                while (last.x <= maxX)
                    last.x += dir.x;
            }
            function W(dir, first, last, bounds) {
                var maxX = bounds.x + bounds.width;
                while (first.x <= maxX)
                    first.x -= dir.x;
                while (last.x >= bounds.x)
                    last.x += dir.x;
            }
            function S(dir, first, last, bounds) {
                var maxY = bounds.y + bounds.height;
                while (first.y >= bounds.y)
                    first.y -= dir.y;
                while (last.y <= maxY)
                    last.y += dir.y;
            }
            function N(dir, first, last, bounds) {
                var maxY = bounds.y + bounds.height;
                while (first.y <= maxY)
                    first.y -= dir.y;
                while (last.y >= bounds.y)
                    last.y += dir.y;
            }
            function NW(dir, first, last, bounds) {
                var maxX = bounds.x + bounds.width;
                var maxY = bounds.y + bounds.height;
                while (first.x <= maxX && first.y <= maxY) {
                    first.x -= dir.x;
                    first.y -= dir.y;
                }
                while (last.x >= bounds.x && last.y >= bounds.y) {
                    last.x += dir.x;
                    last.y += dir.y;
                }
            }
            function SW(dir, first, last, bounds) {
                var maxX = bounds.x + bounds.width;
                var maxY = bounds.y + bounds.height;
                while (first.x <= maxX && first.y >= bounds.y) {
                    first.x -= dir.x;
                    first.y -= dir.y;
                }
                while (last.x >= bounds.x && last.y <= maxY) {
                    last.x += dir.x;
                    last.y += dir.y;
                }
            }
            function NE(dir, first, last, bounds) {
                var maxX = bounds.x + bounds.width;
                var maxY = bounds.y + bounds.height;
                while (first.x >= bounds.x && first.y <= maxY) {
                    first.x -= dir.x;
                    first.y -= dir.y;
                }
                while (last.x <= maxX && last.y >= bounds.y) {
                    last.x += dir.x;
                    last.y += dir.y;
                }
            }
            function SE(dir, first, last, bounds) {
                var maxX = bounds.x + bounds.width;
                var maxY = bounds.y + bounds.height;
                while (first.x >= bounds.x && first.y >= bounds.y) {
                    first.x -= dir.x;
                    first.y -= dir.y;
                }
                while (last.x <= maxX && last.y <= maxY) {
                    last.x += dir.x;
                    last.y += dir.y;
                }
            }
        })(LinearGradient = Media.LinearGradient || (Media.LinearGradient = {}));
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        var RadialGradient;
        (function (RadialGradient) {
            function createExtender(data, bounds) {
                var started = false;
                var dx = data.x1 - data.x0;
                var dy = data.y1 - data.y0;
                var rstep = data.r1;
                var reached = false;
                var ext = {
                    x0: data.x0,
                    y0: data.y0,
                    r0: 0,
                    x1: data.x1,
                    y1: data.y1,
                    r1: data.r1,
                    step: function () {
                        if (!started) {
                            started = true;
                            return true;
                        }
                        ext.x0 = ext.x1;
                        ext.y0 = ext.y1;
                        ext.r0 += rstep;
                        ext.r1 += rstep;
                        ext.x1 += dx;
                        ext.y1 += dy;
                        if (reached)
                            return false;
                        reached = exceedBounds(ext.x1, ext.y1, ext.r1, bounds);
                        return true;
                    },
                    createGradient: function (ctx) {
                        return ctx.createRadialGradient(ext.x0, ext.y0, ext.r0, ext.x1, ext.y1, ext.r1);
                    }
                };
                return ext;
            }
            RadialGradient.createExtender = createExtender;
            function exceedBounds(cx, cy, radius, bounds) {
                var ne = len(cx, cy, bounds.x, bounds.y);
                var nw = len(cx, cy, bounds.x + bounds.width, bounds.y);
                var sw = len(cx, cy, bounds.x + bounds.width, bounds.y + bounds.height);
                var se = len(cx, cy, bounds.x, bounds.y + bounds.height);
                return Math.max(ne, nw, sw, se) < radius;
            }
            function len(x1, y1, x2, y2) {
                var dx = x2 - x1;
                var dy = y2 - y1;
                return Math.sqrt((dx * dx) + (dy * dy));
            }
        })(RadialGradient = Media.RadialGradient || (Media.RadialGradient = {}));
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
/// <reference path="../../Core/DependencyObject.ts" />
/// <reference path="../../Core/XamlObjectCollection.ts" />
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        var VSM;
        (function (VSM) {
            var VisualState = (function (_super) {
                __extends(VisualState, _super);
                function VisualState() {
                    _super.apply(this, arguments);
                }
                VisualState.StoryboardProperty = DependencyProperty.Register("Storyboard", function () { return Media.Animation.Storyboard; }, VisualState);
                return VisualState;
            })(Fayde.DependencyObject);
            VSM.VisualState = VisualState;
            Fayde.CoreLibrary.add(VisualState);
            Fayde.Markup.Content(VisualState, VisualState.StoryboardProperty);
            var VisualStateCollection = (function (_super) {
                __extends(VisualStateCollection, _super);
                function VisualStateCollection() {
                    _super.apply(this, arguments);
                }
                return VisualStateCollection;
            })(Fayde.XamlObjectCollection);
            VSM.VisualStateCollection = VisualStateCollection;
            Fayde.CoreLibrary.add(VisualStateCollection);
        })(VSM = Media.VSM || (Media.VSM = {}));
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
/// <reference path="../../Core/DependencyObject.ts" />
/// <reference path="../../Core/XamlObjectCollection.ts" />
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        var VSM;
        (function (VSM) {
            var VisualStateChangedEventArgs = (function () {
                function VisualStateChangedEventArgs(oldState, newState, control) {
                    Object.defineProperty(this, "OldState", { value: oldState, writable: false });
                    Object.defineProperty(this, "NewState", { value: newState, writable: false });
                    Object.defineProperty(this, "Control", { value: control, writable: false });
                }
                return VisualStateChangedEventArgs;
            })();
            VSM.VisualStateChangedEventArgs = VisualStateChangedEventArgs;
            var VisualStateGroup = (function (_super) {
                __extends(VisualStateGroup, _super);
                function VisualStateGroup() {
                    _super.call(this);
                    this._CurrentStoryboards = [];
                    this.CurrentStateChanging = new nullstone.Event();
                    this.CurrentStateChanged = new nullstone.Event();
                    this.CurrentState = null;
                    VisualStateGroup.StatesProperty.Initialize(this);
                    VisualStateGroup.TransitionsProperty.Initialize(this);
                }
                Object.defineProperty(VisualStateGroup.prototype, "CurrentStoryboards", {
                    get: function () {
                        return this._CurrentStoryboards.slice(0);
                    },
                    enumerable: true,
                    configurable: true
                });
                VisualStateGroup.prototype.GetState = function (stateName) {
                    var enumerator = this.States.getEnumerator();
                    var state;
                    while (enumerator.moveNext()) {
                        state = enumerator.current;
                        if (state.Name === stateName)
                            return state;
                    }
                    return null;
                };
                VisualStateGroup.prototype.StartNewThenStopOld = function (element, newStoryboards) {
                    var i;
                    var storyboard;
                    var res = element.Resources;
                    for (i = 0; i < newStoryboards.length; i++) {
                        storyboard = newStoryboards[i];
                        if (storyboard == null)
                            continue;
                        res.Set(storyboard._ID, storyboard);
                        try {
                            storyboard.Begin();
                        }
                        catch (err) {
                            for (var j = 0; j <= i; j++) {
                                if (newStoryboards[j] != null)
                                    res.Set(newStoryboards[j]._ID, undefined);
                            }
                            console.warn(err);
                        }
                    }
                    this.StopCurrentStoryboards(element);
                    var curStoryboards = this._CurrentStoryboards;
                    for (i = 0; i < newStoryboards.length; i++) {
                        if (newStoryboards[i] == null)
                            continue;
                        curStoryboards.push(newStoryboards[i]);
                    }
                };
                VisualStateGroup.prototype.StopCurrentStoryboards = function (element) {
                    var curStoryboards = this._CurrentStoryboards;
                    var storyboard;
                    for (var en = nullstone.IEnumerator_.fromArray(curStoryboards); en.moveNext();) {
                        storyboard = en.current;
                        if (!storyboard)
                            continue;
                        element.Resources.Set(storyboard._ID, undefined);
                        storyboard.Stop();
                    }
                    this._CurrentStoryboards = [];
                };
                VisualStateGroup.prototype.Deactivate = function () {
                    for (var en = nullstone.IEnumerator_.fromArray(this._CurrentStoryboards); en.moveNext();) {
                        en.current && en.current.Pause();
                    }
                };
                VisualStateGroup.prototype.Activate = function () {
                    for (var en = nullstone.IEnumerator_.fromArray(this._CurrentStoryboards); en.moveNext();) {
                        en.current && en.current.Resume();
                    }
                };
                VisualStateGroup.prototype.RaiseCurrentStateChanging = function (element, oldState, newState, control) {
                    this.CurrentStateChanging.raise(this, new VisualStateChangedEventArgs(oldState, newState, control));
                };
                VisualStateGroup.prototype.RaiseCurrentStateChanged = function (element, oldState, newState, control) {
                    this.CurrentStateChanged.raise(this, new VisualStateChangedEventArgs(oldState, newState, control));
                };
                VisualStateGroup.StatesProperty = DependencyProperty.RegisterImmutable("States", function () { return VSM.VisualStateCollection; }, VisualStateGroup);
                VisualStateGroup.TransitionsProperty = DependencyProperty.RegisterImmutable("Transitions", function () { return Fayde.XamlObjectCollection; }, VisualStateGroup);
                return VisualStateGroup;
            })(Fayde.DependencyObject);
            VSM.VisualStateGroup = VisualStateGroup;
            Fayde.CoreLibrary.add(VisualStateGroup);
            Fayde.Markup.Content(VisualStateGroup, VisualStateGroup.StatesProperty);
            var VisualStateGroupCollection = (function (_super) {
                __extends(VisualStateGroupCollection, _super);
                function VisualStateGroupCollection() {
                    _super.apply(this, arguments);
                }
                return VisualStateGroupCollection;
            })(Fayde.XamlObjectCollection);
            VSM.VisualStateGroupCollection = VisualStateGroupCollection;
            Fayde.CoreLibrary.add(VisualStateGroupCollection);
        })(VSM = Media.VSM || (Media.VSM = {}));
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
/// <reference path="../../Core/DependencyObject.ts" />
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        var VSM;
        (function (VSM) {
            var VisualStateManager = (function (_super) {
                __extends(VisualStateManager, _super);
                function VisualStateManager() {
                    _super.apply(this, arguments);
                }
                VisualStateManager.GetVisualStateGroups = function (d) { return d.GetValue(VisualStateManager.VisualStateGroupsProperty); };
                VisualStateManager.SetVisualStateGroups = function (d, value) { d.SetValue(VisualStateManager.VisualStateGroupsProperty, value); };
                VisualStateManager.GetCustomVisualStateManager = function (d) { return d.GetValue(VisualStateManager.CustomVisualStateManagerProperty); };
                VisualStateManager.SetCustomVisualStateManager = function (d, value) { d.SetValue(VisualStateManager.CustomVisualStateManagerProperty, value); };
                VisualStateManager.GoToState = function (control, stateName, useTransitions) {
                    if (!control)
                        throw new ArgumentException("control");
                    if (!stateName)
                        throw new ArgumentException("stateName");
                    var root = VisualStateManager._GetTemplateRoot(control);
                    if (!root)
                        return false;
                    var groups = VisualStateManager.GetVisualStateGroups(root);
                    if (!groups)
                        return false;
                    var data = { group: null, state: null };
                    if (!VisualStateManager._TryGetState(groups, stateName, data))
                        return false;
                    var customVsm = VisualStateManager.GetCustomVisualStateManager(root);
                    if (customVsm) {
                        return customVsm.GoToStateCore(control, root, stateName, data.group, data.state, useTransitions);
                    }
                    else if (data.state != null) {
                        return VisualStateManager.GoToStateInternal(control, root, data.group, data.state, useTransitions);
                    }
                    return false;
                };
                VisualStateManager.prototype.GoToStateCore = function (control, element, stateName, group, state, useTransitions) {
                    return VisualStateManager.GoToStateInternal(control, element, group, state, useTransitions);
                };
                VisualStateManager.GoToStateInternal = function (control, element, group, state, useTransitions) {
                    var lastState = group.CurrentState;
                    if (lastState === state)
                        return true;
                    if (VSM.Debug && window.console) {
                        console.log("VSM:GoToState:[" + control._ID + "]" + (lastState ? lastState.Name : "()") + "-->" + state.Name);
                    }
                    var transition = useTransitions ? VisualStateManager._GetTransition(element, group, lastState, state) : null;
                    var storyboard;
                    if (transition == null || (transition.GeneratedDuration.IsZero && ((storyboard = transition.Storyboard) == null || storyboard.Duration.IsZero))) {
                        if (transition != null && storyboard != null) {
                            group.StartNewThenStopOld(element, [storyboard, state.Storyboard]);
                        }
                        else {
                            group.StartNewThenStopOld(element, [state.Storyboard]);
                        }
                        group.RaiseCurrentStateChanging(element, lastState, state, control);
                        group.RaiseCurrentStateChanged(element, lastState, state, control);
                    }
                    else {
                        var dynamicTransition = genDynamicTransAnimations(element, group, state, transition);
                        transition.DynamicStoryboardCompleted = false;
                        var dynamicCompleted = function (sender, e) {
                            if (transition.Storyboard == null || transition.ExplicitStoryboardCompleted === true) {
                                group.StartNewThenStopOld(element, [state.Storyboard]);
                                group.RaiseCurrentStateChanged(element, lastState, state, control);
                            }
                            transition.DynamicStoryboardCompleted = true;
                        };
                        var eventClosure = {};
                        dynamicTransition.Completed.on(dynamicCompleted, eventClosure);
                        if (transition.Storyboard != null && transition.ExplicitStoryboardCompleted === true) {
                            var transitionCompleted = function (sender, e) {
                                if (transition.DynamicStoryboardCompleted === true) {
                                    group.StartNewThenStopOld(element, [state.Storyboard]);
                                    group.RaiseCurrentStateChanged(element, lastState, state, control);
                                }
                                transition.Storyboard.Completed.off(transitionCompleted, eventClosure);
                                transition.ExplicitStoryboardCompleted = true;
                            };
                            transition.ExplicitStoryboardCompleted = false;
                            transition.Storyboard.Completed.on(transitionCompleted, eventClosure);
                        }
                        group.StartNewThenStopOld(element, [transition.Storyboard, dynamicTransition]);
                        group.RaiseCurrentStateChanging(element, lastState, state, control);
                    }
                    group.CurrentState = state;
                    return true;
                };
                VisualStateManager.DestroyStoryboards = function (control, root) {
                    if (!root)
                        return false;
                    var groups = VisualStateManager.GetVisualStateGroups(root);
                    if (!groups)
                        return false;
                    var enumerator = groups.getEnumerator();
                    while (enumerator.moveNext()) {
                        enumerator.current.StopCurrentStoryboards(root);
                    }
                };
                VisualStateManager.Deactivate = function (control, root) {
                    if (!root)
                        return false;
                    var groups = VisualStateManager.GetVisualStateGroups(root);
                    if (!groups)
                        return false;
                    for (var en = groups.getEnumerator(); en.moveNext();) {
                        en.current.Deactivate();
                    }
                };
                VisualStateManager.Activate = function (control, root) {
                    if (!root)
                        return false;
                    var groups = VisualStateManager.GetVisualStateGroups(root);
                    if (!groups)
                        return false;
                    for (var en = groups.getEnumerator(); en.moveNext();) {
                        en.current.Activate();
                    }
                };
                VisualStateManager._GetTemplateRoot = function (control) {
                    if (control instanceof Fayde.Controls.UserControl)
                        return control.XamlNode.TemplateRoot;
                    var enumerator = control.XamlNode.GetVisualTreeEnumerator();
                    var node = null;
                    if (enumerator.moveNext()) {
                        node = enumerator.current;
                        if (!(node instanceof Fayde.FENode))
                            node = null;
                    }
                    return (node) ? node.XObject : null;
                };
                VisualStateManager.GetGroup = function (control, name) {
                    var root = VisualStateManager._GetTemplateRoot(control);
                    if (!root)
                        return null;
                    var groups = VisualStateManager.GetVisualStateGroups(root);
                    if (!groups)
                        return null;
                    var enumerator = groups.getEnumerator();
                    while (enumerator.moveNext()) {
                        if (enumerator.current.Name === name)
                            return enumerator.current;
                    }
                    return null;
                };
                VisualStateManager._TryGetState = function (groups, stateName, data) {
                    var enumerator = groups.getEnumerator();
                    while (enumerator.moveNext()) {
                        data.group = enumerator.current;
                        data.state = data.group.GetState(stateName);
                        if (data.state)
                            return true;
                    }
                    data.group = null;
                    data.state = null;
                    return false;
                };
                VisualStateManager._GetTransition = function (element, group, from, to) {
                    if (!element)
                        throw new ArgumentException("element");
                    if (!group)
                        throw new ArgumentException("group");
                    if (!to)
                        throw new ArgumentException("to");
                    var best = null;
                    var defaultTransition = null;
                    var bestScore = -1;
                    var enumerator = group.Transitions.getEnumerator();
                    var transition;
                    while (enumerator.moveNext()) {
                        transition = enumerator.current;
                        if (!defaultTransition && transition.IsDefault) {
                            defaultTransition = transition;
                            continue;
                        }
                        var score = -1;
                        var transFromState = group.GetState(transition.From);
                        var transToState = group.GetState(transition.To);
                        if (from === transFromState)
                            score += 1;
                        else if (transFromState != null)
                            continue;
                        if (to === transToState)
                            score += 2;
                        else if (transToState != null)
                            continue;
                        if (score > bestScore) {
                            bestScore = score;
                            best = transition;
                        }
                    }
                    if (best != null)
                        return best;
                    return defaultTransition;
                };
                VisualStateManager.VisualStateGroupsProperty = DependencyProperty.RegisterAttachedCore("VisualStateGroups", function () { return VSM.VisualStateGroupCollection; }, VisualStateManager);
                VisualStateManager.CustomVisualStateManagerProperty = DependencyProperty.RegisterAttachedCore("CustomVisualStateManager", function () { return VisualStateManager; }, VisualStateManager);
                return VisualStateManager;
            })(Fayde.DependencyObject);
            VSM.VisualStateManager = VisualStateManager;
            Fayde.CoreLibrary.add(VisualStateManager);
            var Storyboard = Media.Animation.Storyboard;
            function genDynamicTransAnimations(root, group, state, transition) {
                var dynamic = new Media.Animation.Storyboard();
                if (transition != null) {
                    dynamic.Duration = transition.GeneratedDuration;
                }
                else {
                    dynamic.Duration = new Duration(new TimeSpan());
                }
                var currentAnimations = flattenTimelines(group.CurrentStoryboards);
                var transitionAnimations = flattenTimelines([transition != null ? transition.Storyboard : null]);
                var newStateAnimations = flattenTimelines([state.Storyboard]);
                for (var i = 0, len = transitionAnimations.length; i < len; i++) {
                    removeTuple(transitionAnimations[i], currentAnimations);
                    removeTuple(transitionAnimations[i], newStateAnimations);
                }
                var tuple;
                for (var i = 0, len = newStateAnimations.length; i < len; i++) {
                    tuple = newStateAnimations[i];
                    var toAnimation = genToAnimation(root, tuple.timeline, true);
                    if (toAnimation != null) {
                        ensureTarget(root, tuple.timeline, toAnimation);
                        toAnimation.Duration = dynamic.Duration;
                        dynamic.Children.Add(toAnimation);
                    }
                    removeTuple(tuple, currentAnimations);
                }
                for (var i = 0, len = currentAnimations.length; i < len; i++) {
                    tuple = currentAnimations[i];
                    var fromAnimation = tuple.timeline.GenerateFrom();
                    if (fromAnimation != null) {
                        ensureTarget(root, tuple.timeline, fromAnimation);
                        fromAnimation.Duration = dynamic.Duration;
                        var propertyName = Media.Animation.Storyboard.GetTargetProperty(tuple.timeline);
                        Media.Animation.Storyboard.SetTargetProperty(fromAnimation, propertyName);
                        dynamic.Children.Add(fromAnimation);
                    }
                }
                return dynamic;
            }
            function ensureTarget(root, source, dest) {
                if (source.ManualTarget != null) {
                    Storyboard.SetTarget(dest, source.ManualTarget);
                }
                else {
                    var targetName = Storyboard.GetTargetName(source);
                    if (targetName)
                        Storyboard.SetTargetName(dest, targetName);
                }
            }
            function genToAnimation(root, timeline, isEntering) {
                var result = timeline.GenerateTo(isEntering);
                if (!result)
                    return null;
                var targetName = Storyboard.GetTargetName(timeline);
                Storyboard.SetTargetName(result, targetName);
                if (targetName) {
                    var target = root.FindName(targetName);
                    if (target instanceof Fayde.DependencyObject)
                        Storyboard.SetTarget(result, target);
                }
                Storyboard.SetTargetProperty(result, Storyboard.GetTargetProperty(timeline));
                return result;
            }
            function flattenTimelines(storyboards) {
                var tuples = [];
                for (var i = 0, len = storyboards.length; i < len; i++) {
                    flattenTimeline(function (tp) { return tuples.push(tp); }, storyboards[i], null, null);
                }
                return tuples;
            }
            function flattenTimeline(callback, timeline, targetObject, targetPropertyPath) {
                if (!timeline)
                    return;
                var resolution = Storyboard.ResolveTarget(timeline);
                if (resolution.Target)
                    targetObject = resolution.Target;
                if (resolution.Property)
                    targetPropertyPath = resolution.Property;
                if (timeline instanceof Storyboard) {
                    for (var i = 0, children = timeline.Children, len = children.Count; i < len; i++) {
                        flattenTimeline(callback, children.GetValueAt(i), targetObject, targetPropertyPath);
                    }
                }
                else {
                    if (targetPropertyPath && targetObject) {
                        var oto = { Value: targetObject };
                        var propd = Fayde.Data.PropertyPath.ResolvePropertyPath(oto, targetPropertyPath, []);
                        if (propd && oto.Value)
                            callback({ dobj: oto.Value, propd: propd, timeline: timeline });
                    }
                }
            }
            function removeTuple(tuple, list) {
                for (var i = 0, len = list.length; i < len; i++) {
                    var l = list[i];
                    if (l.dobj === tuple.dobj && l.propd === tuple.propd)
                        return list.splice(i, 1);
                }
            }
        })(VSM = Media.VSM || (Media.VSM = {}));
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
/// <reference path="../../Core/DependencyObject.ts" />
var Fayde;
(function (Fayde) {
    var Media;
    (function (Media) {
        var VSM;
        (function (VSM) {
            var VisualTransition = (function (_super) {
                __extends(VisualTransition, _super);
                function VisualTransition() {
                    _super.apply(this, arguments);
                    this.From = null;
                    this.To = null;
                    this._GeneratedDuration = null;
                    this.DynamicStoryboardCompleted = true;
                    this.ExplicitStoryboardCompleted = true;
                }
                Object.defineProperty(VisualTransition.prototype, "GeneratedDuration", {
                    get: function () { return this._GeneratedDuration; },
                    set: function (value) { this._GeneratedDuration = nullstone.convertAnyToType(value, Duration); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(VisualTransition.prototype, "IsDefault", {
                    get: function () { return this.From == null && this.To == null; },
                    enumerable: true,
                    configurable: true
                });
                VisualTransition.StoryboardProperty = DependencyProperty.Register("Storyboard", function () { return Media.Animation.Storyboard; }, VisualTransition);
                return VisualTransition;
            })(Fayde.DependencyObject);
            VSM.VisualTransition = VisualTransition;
            Fayde.Markup.Content(VisualTransition, VisualTransition.StoryboardProperty);
            Fayde.CoreLibrary.add(VisualTransition);
        })(VSM = Media.VSM || (Media.VSM = {}));
    })(Media = Fayde.Media || (Fayde.Media = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Text;
    (function (Text) {
        var History;
        (function (History) {
            var DeleteAction = (function () {
                function DeleteAction(selectionAnchor, selectionCursor, buffer, start, length) {
                    this.SelectionAnchor = selectionAnchor;
                    this.SelectionCursor = selectionCursor;
                    this.Start = start;
                    this.Text = buffer.substr(start, length);
                }
                DeleteAction.prototype.Undo = function (bo) {
                    bo.text = Text.Buffer.insert(bo.text, this.Start, this.Text);
                };
                DeleteAction.prototype.Redo = function (bo) {
                    bo.text = Text.Buffer.cut(bo.text, this.Start, this.Text.length);
                    return this.Start;
                };
                return DeleteAction;
            })();
            History.DeleteAction = DeleteAction;
        })(History = Text.History || (Text.History = {}));
    })(Text = Fayde.Text || (Fayde.Text = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Text;
    (function (Text) {
        var History;
        (function (History) {
            var InsertAction = (function () {
                function InsertAction(selectionAnchor, selectionCursor, start, inserted, isAtomic) {
                    this.SelectionAnchor = selectionAnchor;
                    this.SelectionCursor = selectionCursor;
                    this.Start = start;
                    this.Text = inserted;
                    this.IsGrowable = isAtomic !== true;
                }
                InsertAction.prototype.Undo = function (bo) {
                    bo.text = Text.Buffer.cut(bo.text, this.Start, this.Text.length);
                };
                InsertAction.prototype.Redo = function (bo) {
                    bo.text = Text.Buffer.insert(bo.text, this.Start, this.Text);
                    return this.Start + this.Text.length;
                };
                InsertAction.prototype.Insert = function (start, text) {
                    if (!this.IsGrowable || start !== (this.Start + this.Text.length))
                        return false;
                    this.Text += text;
                    return true;
                };
                return InsertAction;
            })();
            History.InsertAction = InsertAction;
        })(History = Text.History || (Text.History = {}));
    })(Text = Fayde.Text || (Fayde.Text = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Text;
    (function (Text) {
        var History;
        (function (History) {
            var ReplaceAction = (function () {
                function ReplaceAction(selectionAnchor, selectionCursor, buffer, start, length, inserted) {
                    this.SelectionAnchor = selectionAnchor;
                    this.SelectionCursor = selectionCursor;
                    this.Start = start;
                    this.Length = length;
                    this.Deleted = buffer.substr(start, length);
                    this.Inserted = inserted;
                }
                ReplaceAction.prototype.Undo = function (bo) {
                    bo.text = Text.Buffer.cut(bo.text, this.Start, this.Inserted.length);
                    bo.text = Text.Buffer.insert(bo.text, this.Start, this.Deleted);
                };
                ReplaceAction.prototype.Redo = function (bo) {
                    bo.text = Text.Buffer.cut(bo.text, this.Start, this.Length);
                    bo.text = Text.Buffer.insert(bo.text, this.Start, this.Inserted);
                    return this.Start + this.Inserted.length;
                };
                return ReplaceAction;
            })();
            History.ReplaceAction = ReplaceAction;
        })(History = Text.History || (Text.History = {}));
    })(Text = Fayde.Text || (Fayde.Text = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    var Text;
    (function (Text) {
        var History;
        (function (History) {
            var Tracker = (function () {
                function Tracker(maxUndoCount) {
                    this.$$undo = [];
                    this.$$redo = [];
                    this.$$maxUndoCount = maxUndoCount;
                }
                Object.defineProperty(Tracker.prototype, "canUndo", {
                    get: function () {
                        return this.$$undo.length > 0;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Tracker.prototype, "canRedo", {
                    get: function () {
                        return this.$$redo.length > 0;
                    },
                    enumerable: true,
                    configurable: true
                });
                Tracker.prototype.undo = function (bufferholder) {
                    if (this.$$undo.length < 1)
                        return null;
                    var action = this.$$undo.pop();
                    if (this.$$redo.push(action) > this.$$maxUndoCount)
                        this.$$redo.shift();
                    action.Undo(bufferholder);
                    return action;
                };
                Tracker.prototype.redo = function (bufferholder) {
                    if (this.$$redo.length < 1)
                        return;
                    var action = this.$$redo.pop();
                    if (this.$$undo.push(action) > this.$$maxUndoCount)
                        this.$$undo.shift();
                    return action.Redo(bufferholder);
                };
                Tracker.prototype.enter = function (anchor, cursor, start, newText) {
                    var action = this.$$undo[this.$$undo.length - 1];
                    if (!(action instanceof History.InsertAction) || !action.Insert(start, newText))
                        return this.insert(anchor, cursor, start, newText);
                    if (this.$$redo.length > 0)
                        this.$$redo = [];
                };
                Tracker.prototype.insert = function (anchor, cursor, start, newText) {
                    this.$doAction(new History.InsertAction(anchor, cursor, start, newText));
                };
                Tracker.prototype.replace = function (anchor, cursor, text, start, length, newText) {
                    this.$doAction(new History.ReplaceAction(anchor, cursor, text, start, length, newText));
                };
                Tracker.prototype.delete = function (anchor, cursor, text, start, length) {
                    this.$doAction(new Text.History.DeleteAction(anchor, cursor, text, start, length));
                };
                Tracker.prototype.$doAction = function (action) {
                    this.$$undo.push(action);
                    if (this.$$undo.length > this.$$maxUndoCount)
                        this.$$undo.shift();
                    this.$$redo = [];
                };
                return Tracker;
            })();
            History.Tracker = Tracker;
        })(History = Text.History || (Text.History = {}));
    })(Text = Fayde.Text || (Fayde.Text = {}));
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    function debugLayers() {
        var arr = [];
        var app = Fayde.Application.Current;
        for (var walker = app.MainSurface.walkLayers(); walker.step();) {
            arr.push(sexify(walker.current));
        }
        return arr;
    }
    Fayde.debugLayers = debugLayers;
    function sexify(updater) {
        var node = updater.getAttachedValue("$node");
        var xobj = node.XObject;
        var ctor = new Function("return function " + xobj.constructor.name + "() { }")();
        var obj = new ctor();
        obj.assets = updater.assets;
        obj.dirtyFlags = sexyflags(updater.assets.dirtyFlags);
        obj.uiFlags = sexyuiflags(updater.assets.uiFlags);
        obj.children = [];
        obj.id = xobj._ID;
        obj.node = node;
        for (var walker = updater.tree.walk(); walker.step();) {
            obj.children.push(sexify(walker.current));
        }
        return obj;
    }
    Fayde.sexify = sexify;
    function sexyflags(flags) {
        var all = Object.keys(minerva.DirtyFlags)
            .map(function (i) { return parseInt(i); })
            .filter(function (key) { return !isNaN(key); })
            .filter(isPowerOf2)
            .sort(function (a, b) { return (a === b) ? 0 : (a < b ? -1 : 1); })
            .reverse();
        var remaining = flags;
        return all
            .filter(function (cur) {
            if ((remaining & cur) === 0)
                return false;
            remaining &= ~cur;
            return true;
        })
            .map(function (cur) { return minerva.DirtyFlags[cur]; })
            .join("|");
    }
    function sexyuiflags(flags) {
        var all = Object.keys(minerva.UIFlags)
            .map(function (i) { return parseInt(i); })
            .filter(function (key) { return !isNaN(key); })
            .filter(isPowerOf2)
            .sort(function (a, b) { return (a === b) ? 0 : (a < b ? -1 : 1); })
            .reverse();
        var remaining = flags;
        return all
            .filter(function (cur) {
            if ((remaining & cur) === 0)
                return false;
            remaining &= ~cur;
            return true;
        })
            .map(function (cur) { return minerva.UIFlags[cur]; })
            .join("|");
    }
    function isPowerOf2(num) {
        var y = Math.log2(num);
        return Math.abs(Math.round(y) - y) < 0.000001;
    }
    function debugLayersRaw() {
        var app = Fayde.Application.Current;
        var output = "";
        for (var walker = app.MainSurface.walkLayers(); walker.step();) {
            output += stringify(walker.current);
        }
        return output;
    }
    Fayde.debugLayersRaw = debugLayersRaw;
    function stringify(updater, level) {
        if (level === void 0) { level = 0; }
        var node = updater.getAttachedValue("$node");
        var xobj = node.XObject;
        var output = "";
        for (var i = 0; i < level; i++) {
            output += "\t";
        }
        output += xobj.constructor.name;
        output += "[" + xobj._ID + "]";
        var ns = node.NameScope;
        var nsr = !ns ? "^" : (ns.IsRoot ? "+" : "-");
        output += " [" + nsr + node.Name + "]";
        output += "\n";
        for (var walker = updater.tree.walk(); walker.step();) {
            output += stringify(walker.current, level + 1);
        }
        return output;
    }
    function getById(id) {
        var app = Fayde.Application.Current;
        for (var walker = app.MainSurface.walkLayers(); walker.step();) {
            for (var subwalker = walker.current.walkDeep(); subwalker.step();) {
                var upd = subwalker.current;
                var node = upd.getAttachedValue("$node");
                var xobj = node.XObject;
                if (xobj._ID === id) {
                    return {
                        obj: xobj,
                        node: node,
                        updater: upd,
                        flags: sexyflags(upd.assets.dirtyFlags),
                        uiflags: sexyuiflags(upd.assets.uiFlags)
                    };
                }
            }
        }
    }
    Fayde.getById = getById;
    function debugLayersFlatten() {
        var arr = [];
        var app = Fayde.Application.Current;
        for (var walker = app.MainSurface.walkLayers(); walker.step();) {
            for (var subwalker = walker.current.walkDeep(); subwalker.step();) {
                arr.push(subwalker.current);
            }
        }
        return arr;
    }
    Fayde.debugLayersFlatten = debugLayersFlatten;
})(Fayde || (Fayde = {}));

//# sourceMappingURL=fayde.js.map
{"version":3,"sources":["_version.ts","polyfill/Array_isArray.ts","enumerable.ts","ex.js","polyfill/Enumerable_iterator.ts","map/map.es5.ts","anonymous.ts","append.ts","apply.ts","array.ts","concat.ts","distinct.ts","except.ts","fromJson.ts","groupBy.ts","intersect.ts","join.ts","list.ts","orderBy.ts","prepend.ts","range.ts","reverse.ts","round.ts","select.ts","selector.ts","skip.ts","take.ts","traverse.ts","union.ts","where.ts","wrap.ts","zip.ts"],"names":["exjs","Object","prototype","toString","call","arg","exjs.Enumerable","exjs.Enumerable.getEnumerator","exjs.Enumerable.aggregate","exjs.Enumerable.all","exjs.Enumerable.any","exjs.Enumerable.append","exjs.Enumerable.apply","exjs.Enumerable.at","exjs.Enumerable.average","t","Error","exjs.Enumerable.concat","exjs.Enumerable.count","exjs.Enumerable.difference","f2","s2","exjs.Enumerable.distinct","exjs.Enumerable.except","exjs.Enumerable.first","exjs.Enumerable.firstIndex","exjs.Enumerable.forEach","exjs.Enumerable.groupBy","exjs.Enumerable.intersect","exjs.Enumerable.join","exjs.Enumerable.last","exjs.Enumerable.lastIndex","exjs.Enumerable.max","exjs.Enumerable.min","exjs.Enumerable.orderBy","exjs.Enumerable.orderByDescending","exjs.Enumerable.prepend","exjs.Enumerable.reverse","exjs.Enumerable.select","exjs.Enumerable.selectMany","exjs.Enumerable.skip","exjs.Enumerable.skipWhile","exjs.Enumerable.standardDeviation","exjs.Enumerable.sum","exjs.Enumerable.take","exjs.Enumerable.takeWhile","exjs.Enumerable.traverse","exjs.Enumerable.traverseUnique","exjs.Enumerable.toArray","exjs.Enumerable.toMap","exjs.Enumerable.toList","exjs.Enumerable.union","exjs.Enumerable.where","exjs.Enumerable.zip","Symbol","exjs.iteratorFromEnumerable","exjs.iteratorFromEnumerable.next","iteratorFromEnumerable","this","exjs.Map","exjs.Map.constructor","get","exjs.Map.size","enumerable","configurable","exjs.Map.clear","exjs.Map.delete","exjs.Map.entries","exjs.Map.forEach","exjs.Map.get","exjs.Map.has","exjs.Map.keys","exjs.Map.set","exjs.Map.values","m","Map","en","getEnumerator","moveNext","set","keySelector","current","valueSelector","_global","window","global","exjs.anonymous","exjs.appendEnumerator","stage","firstit","prev","e","secondit","items","undefined","_this","_i","arguments","length","Enumerable","appendEnumerator","exjs.applyEnumerator","action","i","applyEnumerator","__extends","d","b","__","constructor","p","hasOwnProperty","create","exjs.arrayEnumerator","index","len","arr","exjs.en","exjs.ArrayEnumerable","exjs.ArrayEnumerable.constructor","arrayEnumerator","slice","exjs.concatEnumerator","s","second","Array","concatEnumerator","exjs.distinctEnumerator","comparer","visited","indexOf","push","hit","distinctEnumerator","exjs.exceptEnumerator","f","x","exceptEnumerator","Function","fromJson","o","mappingOverrides","mapSubProperty","j","mapping","rv","mapped","key","$jsonMappings","exjs.groupByEnumerator","grps","createGroups","exjs.createGroups","k1","k2","exjs.Group","exjs.Group.constructor","exjs.Group._add","groupByEnumerator","exjs.intersectEnumerator","distinct","intersectEnumerator","exjs.joinEnumerator","ins","inner","toArray","cur","outerKeySelector","innerKeySelector","resultSelector","joinEnumerator","exjs.___","l","List","enumerator","exjs.List","exjs.List.constructor","exjs.List.toString","exjs.List.toLocaleString","exjs.List.pop","exjs.List.push","exjs.List.shift","exjs.List.slice","exjs.List.sort","exjs.List.splice","exjs.List.unshift","exjs.List.indexOf","exjs.List.lastIndexOf","exjs.List.every","exjs.List.some","exjs.List.forEach","exjs.List.map","exjs.List.filter","exjs.List.reduce","exjs.List.reduceRight","exjs.List.remove","exjs.List.removeWhere","list","removeWhere","item","any","removed","predicate","splice","reverse","exjs.orderByEnumerable","exjs.OrderedEnumerable","exjs.OrderedEnumerable.constructor","exjs.OrderedEnumerable.getEnumerator","source","sort","sorter","exjs.OrderedEnumerable.thenBy","exjs.OrderedEnumerable.thenByDescending","exjs.ThenEnumerable","exjs.ThenEnumerable.constructor","orderByEnumerable","exjs.prependEnumerator","prependEnumerator","exjs.rangeEnumerator","increment","end","exjs.range","exjs.reverseEnumerator","a","reverseEnumerator","exjs.round","exjs.selectEnumerator","selector","exjs.selectManyEnumerator","active","selectorEnumerator","selectEnumerator","selectManyEnumerator","exjs.selectorEnumerator","exjs.skipEnumerator","count","exjs.skipWhileEnumerator","skipEnumerator","skipWhileEnumerator","exjs.takeEnumerator","exjs.takeWhileEnumerator","takeEnumerator","takeWhileEnumerator","exjs.traverseEnumerator","exjs.traverseEnumerator.moveNext","exjs.traverseUniqueEnumerator","exjs.traverseUniqueEnumerator.moveNext","traverseEnumerator","existing","matcher","traverseUniqueEnumerator","some","exjs.unionEnumerator","unionEnumerator","exjs.whereEnumerator","c","filter","whereEnumerator","wrapEnumerator","enu","exjs.wrapEnumerator","wrapped","ex","exjs.zipEnumerator","zipEnumerator"],"mappings":"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","file":"ex.min.js","sourcesContent":["module exjs {\r\n    export var version = '0.4.0';\r\n}",null,"module exjs {\r\n    export interface IProjectionFunc<T, TResult> {\r\n        (t: T): TResult;\r\n    }\r\n    export interface IProjectionIndexFunc<T, TResult> {\r\n        (t: T, index: number): TResult;\r\n    }\r\n    export interface IEnumerable<T> {\r\n        getEnumerator(): IEnumerator<T>;\r\n    }\r\n    export interface IEnumerableEx<T> extends IEnumerable<T> {\r\n        aggregate<TAccumulate>(seed: TAccumulate, accumulator: (acc: TAccumulate, cur: T) => TAccumulate): TAccumulate;\r\n        all(predicate: IProjectionFunc<T, boolean>): boolean;\r\n        all(predicate: IProjectionIndexFunc<T, boolean>): boolean;\r\n        any(predicate?: IProjectionFunc<T, boolean>): boolean;\r\n        any(predicate?: IProjectionIndexFunc<T, boolean>): boolean;\r\n        append(...items: T[]): IEnumerableEx<T>;\r\n        apply<T>(action: IProjectionFunc<T, any>): IEnumerableEx<T>;\r\n        apply<T>(action: IProjectionIndexFunc<T, any>): IEnumerableEx<T>;\r\n        at(index: number): T;\r\n        average(selector?: (t: T) => number): number;\r\n        concat(second: IEnumerable<T>): IEnumerableEx<T>;\r\n        concat(second: T[]): IEnumerableEx<T>;\r\n        count(predicate?: (t: T) => boolean): number;\r\n        difference(second: IEnumerable<T>, comparer?: (f: T, s: T) => boolean): IDifference<T>;\r\n        difference(second: T[], comparer?: (f: T, s: T) => boolean): IDifference<T>;\r\n        distinct(comparer?: (f: T, s: T) => boolean): IEnumerableEx<T>;\r\n        except(second: IEnumerable<T>, comparer?: (f: T, s: T) => boolean): IEnumerableEx<T>;\r\n        except(second: T[], comparer?: (f: T, s: T) => boolean): IEnumerableEx<T>;\r\n        first(match?: (t: T) => boolean): T;\r\n        firstIndex(match?: (t: T) => boolean): number;\r\n        forEach (action: (t: T) => any);\r\n        groupBy<TKey>(keySelector: (t: T) => TKey, comparer?: (k1: TKey, k2: TKey) => boolean): IEnumerableEx<IGrouping<TKey, T>>;\r\n        intersect(second: IEnumerable<T>, comparer?: (f: T, s: T) => boolean): IEnumerableEx<T>;\r\n        intersect(second: T[], comparer?: (f: T, s: T) => boolean): IEnumerableEx<T>;\r\n        join<TInner, TKey, TResult>(inner: IEnumerable<TInner>, outerKeySelector: (t: T) => TKey, innerKeySelector: (t: TInner) => TKey, resultSelector: (o: T, i: TInner) => TResult, comparer?: (k1: TKey, k2: TKey) => boolean): IEnumerableEx<TResult>;\r\n        join<TInner, TKey, TResult>(inner: TInner[], outerKeySelector: (t: T) => TKey, innerKeySelector: (t: TInner) => TKey, resultSelector: (o: T, i: TInner) => TResult, comparer?: (k1: TKey, k2: TKey) => boolean): IEnumerableEx<TResult>;\r\n        last(match?: (t: T) => boolean): T;\r\n        lastIndex(match?: (t: T) => boolean): number;\r\n        max(selector?: (t: T) => number): number;\r\n        min(selector?: (t: T) => number): number;\r\n        orderBy<TKey>(keySelector: (t: T) => TKey, comparer?: (f: TKey, s: TKey) => number): IOrderedEnumerable<T>;\r\n        orderByDescending<TKey>(keySelector: (t: T) => TKey, comparer?: (f: TKey, s: TKey) => number): IOrderedEnumerable<T>;\r\n        prepend(...items: T[]): IEnumerableEx<T>;\r\n        reverse(): IEnumerableEx<T>;\r\n        select<TResult>(selector: IProjectionFunc<T, TResult>): IEnumerableEx<TResult>;\r\n        select<TResult>(selector: IProjectionIndexFunc<T, TResult>): IEnumerableEx<TResult>;\r\n        selectMany<TResult>(selector: (t: T) => IEnumerable<TResult>): IEnumerableEx<TResult>;\r\n        selectMany<TResult>(selector: (t: T) => TResult[]): IEnumerableEx<TResult>;\r\n        skip(count: number): IEnumerableEx<T>;\r\n        skipWhile(predicate: IProjectionFunc<T, boolean>): IEnumerableEx<T>;\r\n        skipWhile(predicate: IProjectionIndexFunc<T, boolean>): IEnumerableEx<T>;\r\n        standardDeviation(selector?: (t: T) => number): number;\r\n        sum(selector?: (t: T) => number): number;\r\n        take(count: number): IEnumerableEx<T>;\r\n        takeWhile(predicate: IProjectionFunc<T, boolean>): IEnumerableEx<T>;\r\n        takeWhile(predicate: IProjectionIndexFunc<T, boolean>): IEnumerableEx<T>;\r\n        toArray(): T[];\r\n        toList(): IList<T>;\r\n        toMap<TKey, TValue>(keySelector: (t: T) => TKey, valueSelector: (t: T) => TValue): IMap<TKey, TValue>;\r\n        //toDictionary();\r\n        traverse (selector: (t: T) => T[]): IEnumerableEx<T>;\r\n        traverse (selector: (t: T) => IEnumerable<T>): IEnumerableEx<T>;\r\n        traverseUnique (selector: (t: T) => T[], matcher?: (t1: T, t2: T) => boolean): IEnumerableEx<T>;\r\n        traverseUnique (selector: (t: T) => IEnumerable<T>, matcher?: (t1: T, t2: T) => boolean): IEnumerableEx<T>;\r\n        union(second: IEnumerable<T>, comparer?: (f: T, s: T) => boolean): IEnumerableEx<T>;\r\n        union(second: T[], comparer?: (f: T, s: T) => boolean): IEnumerableEx<T>;\r\n        where(filter: (t: T) => boolean): IEnumerableEx<T>;\r\n        zip<TSecond, TResult>(second: IEnumerable<TSecond>, resultSelector: (f: T, s: TSecond) => TResult): IEnumerableEx<TResult>;\r\n        zip<TSecond, TResult>(second: TSecond[], resultSelector: (f: T, s: TSecond) => TResult): IEnumerableEx<TResult>;\r\n    }\r\n    export interface IEnumerator<T> {\r\n        current: T;\r\n        moveNext(): boolean;\r\n    }\r\n\r\n    export interface IOrderedEnumerable<T> extends IEnumerableEx<T> {\r\n        thenBy<TKey>(keySelector: (t: T) => TKey, comparer?: (f: TKey, s: TKey) => number): IOrderedEnumerable<T>;\r\n        thenByDescending<TKey>(keySelector: (t: T) => TKey, comparer?: (f: TKey, s: TKey) => number): IOrderedEnumerable<T>;\r\n    }\r\n\r\n    export interface IGrouping<TKey, TElement> extends IEnumerableEx<TElement> {\r\n        key: TKey;\r\n    }\r\n\r\n    export interface IDifference<T> {\r\n        intersection: IEnumerableEx<T>;\r\n        aNotB: IEnumerableEx<T>;\r\n        bNotA: IEnumerableEx<T>;\r\n    }\r\n\r\n    export interface IList<T> extends IEnumerableEx<T> {\r\n        //Array<T> methods\r\n        toString(): string;\r\n        toLocaleString(): string;\r\n        pop(): T;\r\n        push(...items: T[]): number;\r\n        shift(): T;\r\n        slice(start: number, end?: number): T[];\r\n        sort(compareFn?: (a: T, b: T) => number): T[];\r\n        splice(start: number): T[];\r\n        splice(start: number, deleteCount: number, ...items: T[]): T[];\r\n        unshift(...items: T[]): number;\r\n        indexOf(searchElement: T, fromIndex?: number): number;\r\n        lastIndexOf(searchElement: T, fromIndex?: number): number;\r\n        every(callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg?: any): boolean;\r\n        some(callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg?: any): boolean;\r\n        forEach(callbackfn: (value: T, index: number, array: T[]) => void, thisArg?: any): void;\r\n        map<U>(callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): U[];\r\n        filter(callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg?: any): T[];\r\n        reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue?: T): T;\r\n        reduce<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U;\r\n        reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue?: T): T;\r\n        reduceRight<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U;\r\n        length: number;\r\n        [n: number]: T;\r\n\r\n        //List<T> methods\r\n        /**\r\n         * Removes item from list.\r\n         * @param item - item to remove\r\n         */\r\n        remove(item: T): boolean;\r\n        /**\r\n         * Removes items that match predicate.\r\n         * Returns items that were removed.\r\n         * @param predicate - function to match items that should be removed (index parameter is based on original list)\r\n         */\r\n        removeWhere(predicate: (t: T, index?: number) => boolean): IEnumerableEx<T>;\r\n    }\r\n\r\n    export class Enumerable<T> implements IEnumerableEx<T> {\r\n        constructor () {\r\n        }\r\n\r\n        getEnumerator (): IEnumerator<T> {\r\n            return {\r\n                moveNext: function () {\r\n                    return false;\r\n                },\r\n                current: undefined\r\n            };\r\n        }\r\n\r\n        aggregate<TAccumulate>(seed: TAccumulate, accumulator: (acc: TAccumulate, cur: T) => TAccumulate): TAccumulate {\r\n            var active = seed;\r\n            for (var enumerator = this.getEnumerator(); enumerator.moveNext();) {\r\n                active = accumulator(active, enumerator.current);\r\n            }\r\n            return active;\r\n        }\r\n\r\n        all (predicate: IProjectionIndexFunc<T, boolean>): boolean {\r\n            if (predicate) {\r\n                var e = this.getEnumerator();\r\n                var i = 0;\r\n                while (e.moveNext()) {\r\n                    if (!predicate(e.current, i))\r\n                        return false;\r\n                    i++;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n\r\n        any (predicate?: IProjectionIndexFunc<T, boolean>): boolean {\r\n            var e = this.getEnumerator();\r\n            var i = 0;\r\n            while (e.moveNext()) {\r\n                if (!predicate)\r\n                    return true;\r\n                if (predicate(e.current, i))\r\n                    return true;\r\n                i++;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        append(...items: T[]): IEnumerableEx<T> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        apply<T>(action: IProjectionIndexFunc<T, any>): IEnumerableEx<T> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        at (index: number): T {\r\n            var e = this.getEnumerator();\r\n            var i = 0;\r\n            while (e.moveNext()) {\r\n                if (i === index)\r\n                    return e.current;\r\n                i++;\r\n            }\r\n            return undefined;\r\n        }\r\n\r\n        average (selector?: (t: T) => number): number {\r\n            var count = 0;\r\n            var total = 0;\r\n            selector = selector || function (t: T): number {\r\n                    if (typeof t !== \"number\") throw new Error(\"Object is not a number.\");\r\n                    return <number><any>t;\r\n                };\r\n            var e = this.getEnumerator();\r\n            while (e.moveNext()) {\r\n                total += selector(e.current);\r\n                count++;\r\n            }\r\n            if (count === 0) return 0;\r\n            return total / count;\r\n        }\r\n\r\n        concat (second: IEnumerable<T>): IEnumerableEx<T>;\r\n        concat (second: T[]): IEnumerableEx<T>;\r\n        concat (second: any): IEnumerableEx<T> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        count (predicate?: (t: T) => boolean): number {\r\n            var count = 0;\r\n            var e = this.getEnumerator();\r\n            while (e.moveNext()) {\r\n                if (!predicate || predicate(e.current))\r\n                    count++;\r\n            }\r\n            return count;\r\n        }\r\n\r\n        difference (second: IEnumerable<T>, comparer?: (f: T, s: T) => boolean): IDifference<T>;\r\n        difference (second: T[], comparer?: (f: T, s: T) => boolean): IDifference<T>;\r\n        difference (second: any, comparer?: (f: T, s: T) => boolean): IDifference<T> {\r\n            comparer = comparer || function (f2: T, s2: T) {\r\n                    return f2 === s2;\r\n                };\r\n            if (second instanceof Array)\r\n                second = second.en();\r\n            return {\r\n                intersection: this.intersect(second, comparer).toArray().en(),\r\n                aNotB: this.except(second, comparer).toArray().en(),\r\n                bNotA: second.except(this, comparer).toArray().en()\r\n            };\r\n        }\r\n\r\n        distinct (comparer?: (f: T, s: T) => boolean): IEnumerableEx<T> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        except (second: IEnumerable<T>, comparer?: (f: T, s: T) => boolean): IEnumerableEx<T>;\r\n        except (second: T[], comparer?: (f: T, s: T) => boolean): IEnumerableEx<T>;\r\n        except (second: any, comparer?: (f: T, s: T) => boolean): IEnumerableEx<T> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        first (match?: (t: T) => boolean): T {\r\n            var e = this.getEnumerator();\r\n            while (e.moveNext()) {\r\n                if (!match || match(e.current))\r\n                    return e.current;\r\n            }\r\n            return undefined;\r\n        }\r\n\r\n        firstIndex (match?: (t: T) => boolean): number {\r\n            for (var e = this.getEnumerator(), i = 0; e.moveNext(); i++) {\r\n                if (!match || match(e.current))\r\n                    return i;\r\n            }\r\n            return -1;\r\n        }\r\n\r\n        forEach (action: (t: T) => any) {\r\n            for (var en = this.getEnumerator(); en.moveNext();) {\r\n                action(en.current);\r\n            }\r\n        }\r\n\r\n        groupBy<TKey>(keySelector: (t: T) => TKey, comparer?: (k1: TKey, k2: TKey) => boolean): IEnumerableEx<IGrouping<TKey, T>> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        intersect (second: IEnumerable<T>, comparer?: (f: T, s: T) => boolean): IEnumerableEx<T>;\r\n        intersect (second: T[], comparer?: (f: T, s: T) => boolean): IEnumerableEx<T>;\r\n        intersect (second: any, comparer?: (f: T, s: T) => boolean): IEnumerableEx<T> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        join<TInner, TKey, TResult>(inner: IEnumerable<TInner>, outerKeySelector: (t: T) => TKey, innerKeySelector: (t: TInner) => TKey, resultSelector: (o: T, i: TInner) => TResult, comparer?: (k1: TKey, k2: TKey) => boolean): IEnumerableEx<TResult>;\r\n        join<TInner, TKey, TResult>(inner: TInner[], outerKeySelector: (t: T) => TKey, innerKeySelector: (t: TInner) => TKey, resultSelector: (o: T, i: TInner) => TResult, comparer?: (k1: TKey, k2: TKey) => boolean): IEnumerableEx<TResult>;\r\n        join<TInner, TKey, TResult>(inner: any, outerKeySelector: (t: T) => TKey, innerKeySelector: (t: TInner) => TKey, resultSelector: (o: T, i: TInner) => TResult, comparer?: (k1: TKey, k2: TKey) => boolean): IEnumerableEx<TResult> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        last (match?: (t: T) => boolean): T {\r\n            var e = this.getEnumerator();\r\n            var l: T;\r\n            while (e.moveNext()) {\r\n                if (!match || match(e.current))\r\n                    l = e.current;\r\n            }\r\n            return l;\r\n        }\r\n\r\n        lastIndex (match?: (t: T) => boolean): number {\r\n            var j = -1;\r\n            for (var e = this.getEnumerator(), i = 0; e.moveNext(); i++) {\r\n                if (!match || match(e.current))\r\n                    j = i;\r\n            }\r\n            return j;\r\n        }\r\n\r\n        max (selector?: (t: T) => number): number {\r\n            var e = this.getEnumerator();\r\n            if (!e.moveNext())\r\n                return 0;\r\n            selector = selector || function (t: T): number {\r\n                    if (typeof t !== \"number\") throw new Error(\"Object is not a number.\");\r\n                    return <number><any>t;\r\n                };\r\n            var max = selector(e.current);\r\n            while (e.moveNext()) {\r\n                max = Math.max(max, selector(e.current));\r\n            }\r\n            return max;\r\n        }\r\n\r\n        min (selector?: (t: T) => number): number {\r\n            var e = this.getEnumerator();\r\n            if (!e.moveNext())\r\n                return 0;\r\n            selector = selector || function (t: T): number {\r\n                    if (typeof t !== \"number\") throw new Error(\"Object is not a number.\");\r\n                    return <number><any>t;\r\n                };\r\n            var min = selector(e.current);\r\n            while (e.moveNext()) {\r\n                min = Math.min(min, selector(e.current));\r\n            }\r\n            return min;\r\n        }\r\n\r\n        orderBy<TKey>(keySelector: (t: T) => TKey, comparer?: (f: TKey, s: TKey) => number): IOrderedEnumerable<T> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        orderByDescending<TKey>(keySelector: (t: T) => TKey, comparer?: (f: TKey, s: TKey) => number): IOrderedEnumerable<T> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        prepend(...items: T[]): IEnumerableEx<T> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        reverse(): IEnumerableEx<T> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        select<TResult>(selector: IProjectionIndexFunc<T, TResult>): IEnumerableEx<TResult> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        selectMany<TResult>(selector: (t: T) => IEnumerable<TResult>): IEnumerableEx<TResult>;\r\n        selectMany<TResult>(selector: (t: T) => TResult[]): IEnumerableEx<TResult>;\r\n        selectMany<TResult>(selector: (t: T) => any): IEnumerableEx<TResult> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        skip (count: number): IEnumerableEx<T> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        skipWhile (predicate: IProjectionIndexFunc<T, boolean>): IEnumerableEx<T> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        standardDeviation (selector?: (t: T) => number): number {\r\n            var avg = this.average(selector);\r\n            var sum = 0;\r\n            var count = 0;\r\n            selector = selector || function (t: T): number {\r\n                    if (typeof t !== \"number\") throw new Error(\"Object is not a number.\");\r\n                    return <number><any>t;\r\n                };\r\n            var e = this.getEnumerator();\r\n            while (e.moveNext()) {\r\n                var diff = selector(e.current) - avg;\r\n                sum += (diff * diff);\r\n                count++;\r\n            }\r\n            return Math.sqrt(sum / count);\r\n        }\r\n\r\n        sum (selector?: (t: T) => number): number {\r\n            var sum = 0;\r\n            selector = selector || function (t: T): number {\r\n                    if (typeof t !== \"number\") throw new Error(\"Object is not a number.\");\r\n                    return <number><any>t;\r\n                };\r\n            var e = this.getEnumerator();\r\n            while (e.moveNext()) {\r\n                sum += selector(e.current);\r\n            }\r\n            return sum;\r\n        }\r\n\r\n        take (count: number): IEnumerableEx<T> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        takeWhile (predicate: IProjectionIndexFunc<T, boolean>): IEnumerableEx<T> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        traverse (selector: (t: T) => T[]): IEnumerableEx<T>;\r\n        traverse (selector: (t: T) => IEnumerable<T>): IEnumerableEx<T>;\r\n        traverse (selector: any): IEnumerableEx<T> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        traverseUnique (selector: (t: T) => T[], uniqueMatch?: (t1: T, t2: T) => boolean): IEnumerableEx<T>;\r\n        traverseUnique (selector: (t: T) => IEnumerable<T>, matcher?: (t1: T, t2: T) => boolean): IEnumerableEx<T>;\r\n        traverseUnique (selector: any, matcher?: (t1: T, t2: T) => boolean): IEnumerableEx<T> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        toArray (): T[] {\r\n            var arr: T[] = [];\r\n            var enumerator = this.getEnumerator();\r\n            while (enumerator.moveNext()) {\r\n                arr.push(enumerator.current);\r\n            }\r\n            return arr;\r\n        }\r\n\r\n        toMap<TKey, TValue>(keySelector: (t: T) => TKey, valueSelector: (t: T) => TValue): IMap<TKey, TValue> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        toList (): IList<T> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        //toDictionary() {\r\n        //}\r\n\r\n        union (second: IEnumerable<T>, comparer?: (f: T, s: T) => boolean): IEnumerableEx<T>;\r\n        union (second: T[], comparer?: (f: T, s: T) => boolean): IEnumerableEx<T>;\r\n        union (second: any, comparer?: (f: T, s: T) => boolean): IEnumerableEx<T> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        where (filter: (t: T) => boolean): IEnumerableEx<T> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        zip<TSecond, TResult>(second: IEnumerable<TSecond>, resultSelector: (f: T, s: TSecond) => TResult): IEnumerableEx<TResult>;\r\n        zip<TSecond, TResult>(second: TSecond[], resultSelector: (f: T, s: TSecond) => TResult): IEnumerableEx<TResult>;\r\n        zip<TSecond, TResult>(second: any, resultSelector: (f: T, s: TSecond) => TResult): IEnumerableEx<TResult> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n    }\r\n}","var exjs;\n(function (exjs) {\n    exjs.version = '0.4.0';\n})(exjs || (exjs = {}));\nvar exjs;\n(function (exjs) {\n    if (!Array.isArray) {\n        Array.isArray = function (arg) {\n            return Object.prototype.toString.call(arg) === '[object Array]';\n        };\n    }\n})(exjs || (exjs = {}));\nvar exjs;\n(function (exjs) {\n    var Enumerable = (function () {\n        function Enumerable() {\n        }\n        Enumerable.prototype.getEnumerator = function () {\n            return {\n                moveNext: function () {\n                    return false;\n                },\n                current: undefined\n            };\n        };\n        Enumerable.prototype.aggregate = function (seed, accumulator) {\n            var active = seed;\n            for (var enumerator = this.getEnumerator(); enumerator.moveNext();) {\n                active = accumulator(active, enumerator.current);\n            }\n            return active;\n        };\n        Enumerable.prototype.all = function (predicate) {\n            if (predicate) {\n                var e = this.getEnumerator();\n                var i = 0;\n                while (e.moveNext()) {\n                    if (!predicate(e.current, i))\n                        return false;\n                    i++;\n                }\n            }\n            return true;\n        };\n        Enumerable.prototype.any = function (predicate) {\n            var e = this.getEnumerator();\n            var i = 0;\n            while (e.moveNext()) {\n                if (!predicate)\n                    return true;\n                if (predicate(e.current, i))\n                    return true;\n                i++;\n            }\n            return false;\n        };\n        Enumerable.prototype.append = function () {\n            var items = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                items[_i - 0] = arguments[_i];\n            }\n            throw new Error(\"Not implemented\");\n        };\n        Enumerable.prototype.apply = function (action) {\n            throw new Error(\"Not implemented\");\n        };\n        Enumerable.prototype.at = function (index) {\n            var e = this.getEnumerator();\n            var i = 0;\n            while (e.moveNext()) {\n                if (i === index)\n                    return e.current;\n                i++;\n            }\n            return undefined;\n        };\n        Enumerable.prototype.average = function (selector) {\n            var count = 0;\n            var total = 0;\n            selector = selector || function (t) {\n                if (typeof t !== \"number\")\n                    throw new Error(\"Object is not a number.\");\n                return t;\n            };\n            var e = this.getEnumerator();\n            while (e.moveNext()) {\n                total += selector(e.current);\n                count++;\n            }\n            if (count === 0)\n                return 0;\n            return total / count;\n        };\n        Enumerable.prototype.concat = function (second) {\n            throw new Error(\"Not implemented\");\n        };\n        Enumerable.prototype.count = function (predicate) {\n            var count = 0;\n            var e = this.getEnumerator();\n            while (e.moveNext()) {\n                if (!predicate || predicate(e.current))\n                    count++;\n            }\n            return count;\n        };\n        Enumerable.prototype.difference = function (second, comparer) {\n            comparer = comparer || function (f2, s2) {\n                return f2 === s2;\n            };\n            if (second instanceof Array)\n                second = second.en();\n            return {\n                intersection: this.intersect(second, comparer).toArray().en(),\n                aNotB: this.except(second, comparer).toArray().en(),\n                bNotA: second.except(this, comparer).toArray().en()\n            };\n        };\n        Enumerable.prototype.distinct = function (comparer) {\n            throw new Error(\"Not implemented\");\n        };\n        Enumerable.prototype.except = function (second, comparer) {\n            throw new Error(\"Not implemented\");\n        };\n        Enumerable.prototype.first = function (match) {\n            var e = this.getEnumerator();\n            while (e.moveNext()) {\n                if (!match || match(e.current))\n                    return e.current;\n            }\n            return undefined;\n        };\n        Enumerable.prototype.firstIndex = function (match) {\n            for (var e = this.getEnumerator(), i = 0; e.moveNext(); i++) {\n                if (!match || match(e.current))\n                    return i;\n            }\n            return -1;\n        };\n        Enumerable.prototype.forEach = function (action) {\n            for (var en = this.getEnumerator(); en.moveNext();) {\n                action(en.current);\n            }\n        };\n        Enumerable.prototype.groupBy = function (keySelector, comparer) {\n            throw new Error(\"Not implemented\");\n        };\n        Enumerable.prototype.intersect = function (second, comparer) {\n            throw new Error(\"Not implemented\");\n        };\n        Enumerable.prototype.join = function (inner, outerKeySelector, innerKeySelector, resultSelector, comparer) {\n            throw new Error(\"Not implemented\");\n        };\n        Enumerable.prototype.last = function (match) {\n            var e = this.getEnumerator();\n            var l;\n            while (e.moveNext()) {\n                if (!match || match(e.current))\n                    l = e.current;\n            }\n            return l;\n        };\n        Enumerable.prototype.lastIndex = function (match) {\n            var j = -1;\n            for (var e = this.getEnumerator(), i = 0; e.moveNext(); i++) {\n                if (!match || match(e.current))\n                    j = i;\n            }\n            return j;\n        };\n        Enumerable.prototype.max = function (selector) {\n            var e = this.getEnumerator();\n            if (!e.moveNext())\n                return 0;\n            selector = selector || function (t) {\n                if (typeof t !== \"number\")\n                    throw new Error(\"Object is not a number.\");\n                return t;\n            };\n            var max = selector(e.current);\n            while (e.moveNext()) {\n                max = Math.max(max, selector(e.current));\n            }\n            return max;\n        };\n        Enumerable.prototype.min = function (selector) {\n            var e = this.getEnumerator();\n            if (!e.moveNext())\n                return 0;\n            selector = selector || function (t) {\n                if (typeof t !== \"number\")\n                    throw new Error(\"Object is not a number.\");\n                return t;\n            };\n            var min = selector(e.current);\n            while (e.moveNext()) {\n                min = Math.min(min, selector(e.current));\n            }\n            return min;\n        };\n        Enumerable.prototype.orderBy = function (keySelector, comparer) {\n            throw new Error(\"Not implemented\");\n        };\n        Enumerable.prototype.orderByDescending = function (keySelector, comparer) {\n            throw new Error(\"Not implemented\");\n        };\n        Enumerable.prototype.prepend = function () {\n            var items = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                items[_i - 0] = arguments[_i];\n            }\n            throw new Error(\"Not implemented\");\n        };\n        Enumerable.prototype.reverse = function () {\n            throw new Error(\"Not implemented\");\n        };\n        Enumerable.prototype.select = function (selector) {\n            throw new Error(\"Not implemented\");\n        };\n        Enumerable.prototype.selectMany = function (selector) {\n            throw new Error(\"Not implemented\");\n        };\n        Enumerable.prototype.skip = function (count) {\n            throw new Error(\"Not implemented\");\n        };\n        Enumerable.prototype.skipWhile = function (predicate) {\n            throw new Error(\"Not implemented\");\n        };\n        Enumerable.prototype.standardDeviation = function (selector) {\n            var avg = this.average(selector);\n            var sum = 0;\n            var count = 0;\n            selector = selector || function (t) {\n                if (typeof t !== \"number\")\n                    throw new Error(\"Object is not a number.\");\n                return t;\n            };\n            var e = this.getEnumerator();\n            while (e.moveNext()) {\n                var diff = selector(e.current) - avg;\n                sum += (diff * diff);\n                count++;\n            }\n            return Math.sqrt(sum / count);\n        };\n        Enumerable.prototype.sum = function (selector) {\n            var sum = 0;\n            selector = selector || function (t) {\n                if (typeof t !== \"number\")\n                    throw new Error(\"Object is not a number.\");\n                return t;\n            };\n            var e = this.getEnumerator();\n            while (e.moveNext()) {\n                sum += selector(e.current);\n            }\n            return sum;\n        };\n        Enumerable.prototype.take = function (count) {\n            throw new Error(\"Not implemented\");\n        };\n        Enumerable.prototype.takeWhile = function (predicate) {\n            throw new Error(\"Not implemented\");\n        };\n        Enumerable.prototype.traverse = function (selector) {\n            throw new Error(\"Not implemented\");\n        };\n        Enumerable.prototype.traverseUnique = function (selector, matcher) {\n            throw new Error(\"Not implemented\");\n        };\n        Enumerable.prototype.toArray = function () {\n            var arr = [];\n            var enumerator = this.getEnumerator();\n            while (enumerator.moveNext()) {\n                arr.push(enumerator.current);\n            }\n            return arr;\n        };\n        Enumerable.prototype.toMap = function (keySelector, valueSelector) {\n            throw new Error(\"Not implemented\");\n        };\n        Enumerable.prototype.toList = function () {\n            throw new Error(\"Not implemented\");\n        };\n        Enumerable.prototype.union = function (second, comparer) {\n            throw new Error(\"Not implemented\");\n        };\n        Enumerable.prototype.where = function (filter) {\n            throw new Error(\"Not implemented\");\n        };\n        Enumerable.prototype.zip = function (second, resultSelector) {\n            throw new Error(\"Not implemented\");\n        };\n        return Enumerable;\n    })();\n    exjs.Enumerable = Enumerable;\n})(exjs || (exjs = {}));\n/// <reference path=\"../enumerable.ts\" />\nvar Symbol;\nvar exjs;\n(function (exjs) {\n    if (Symbol && Symbol.iterator) {\n        exjs.Enumerable.prototype[Symbol.iterator] = function () {\n            return iteratorFromEnumerable(this);\n        };\n    }\n    function iteratorFromEnumerable(enu) {\n        var en;\n        return {\n            next: function () {\n                var res = {\n                    done: true,\n                    value: undefined\n                };\n                if (!enu)\n                    return res;\n                en = en || enu.getEnumerator();\n                if (!en)\n                    return res;\n                res.done = !en.moveNext();\n                res.value = en.current;\n                return res;\n            }\n        };\n    }\n})(exjs || (exjs = {}));\n/// <reference path=\"../enumerable.ts\" />\nvar exjs;\n(function (exjs) {\n    var Map = (function () {\n        function Map(enumerable) {\n            this._keys = [];\n            this._values = [];\n            var enu;\n            if (enumerable instanceof Array) {\n                enu = enumerable.en();\n            }\n            else if (enumerable && enumerable.getEnumerator instanceof Function) {\n                enu = enumerable;\n            }\n            if (!enu)\n                return;\n            for (var en = enu.getEnumerator(); en && en.moveNext();) {\n                this.set(en.current[0], en.current[1]);\n            }\n        }\n        Object.defineProperty(Map.prototype, \"size\", {\n            get: function () {\n                return this._keys.length;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Map.prototype.clear = function () {\n            this._keys.length = 0;\n            this._values.length = 0;\n        };\n        Map.prototype.delete = function (key) {\n            var index = this._keys.indexOf(key);\n            if (!(index > -1))\n                return false;\n            this._keys.splice(index, 1);\n            this._values.splice(index, 1);\n            return true;\n        };\n        Map.prototype.entries = function () {\n            var _this = this;\n            return exjs.range(0, this.size).select(function (i) { return [_this._keys[i], _this._values[i]]; });\n        };\n        Map.prototype.forEach = function (callbackFn, thisArg) {\n            if (thisArg == null)\n                thisArg = this;\n            for (var i = 0, keys = this._keys, vals = this._values, len = keys.length; i < len; i++) {\n                callbackFn.call(thisArg, vals[i], keys[i], this);\n            }\n        };\n        Map.prototype.get = function (key) {\n            var index = this._keys.indexOf(key);\n            return this._values[index];\n        };\n        Map.prototype.has = function (key) {\n            return this._keys.indexOf(key) > -1;\n        };\n        Map.prototype.keys = function () {\n            return this._keys.en();\n        };\n        Map.prototype.set = function (key, value) {\n            var index = this._keys.indexOf(key);\n            if (index > -1) {\n                this._values[index] = value;\n            }\n            else {\n                this._keys.push(key);\n                this._values.push(value);\n            }\n            return undefined;\n        };\n        Map.prototype.values = function () {\n            return this._values.en();\n        };\n        return Map;\n    })();\n    exjs.Map = Map;\n    exjs.Enumerable.prototype.toMap = function (keySelector, valueSelector) {\n        var m = new Map();\n        for (var en = this.getEnumerator(); en.moveNext();) {\n            m.set(keySelector(en.current), valueSelector(en.current));\n        }\n        return m;\n    };\n    if (exjs.List)\n        exjs.List.prototype.toMap = exjs.Enumerable.prototype.toMap;\n})(exjs || (exjs = {}));\n(function (_global) {\n    if (!_global.Map)\n        _global.Map = exjs.Map;\n})(typeof window === \"undefined\" ? global : window);\nvar exjs;\n(function (exjs) {\n    function anonymous(iterator) {\n        var enumerable = new exjs.Enumerable();\n        enumerable.getEnumerator = function () {\n            var enumerator = {\n                current: undefined,\n                moveNext: function () { return iterator(enumerator); }\n            };\n            return enumerator;\n        };\n        return enumerable;\n    }\n    exjs.anonymous = anonymous;\n})(exjs || (exjs = {}));\n/// <reference path=\"enumerable.ts\" />\nvar exjs;\n(function (exjs) {\n    function appendEnumerator(prev, items) {\n        var stage = 1;\n        var firstit;\n        var secondit;\n        var e = {\n            current: undefined,\n            moveNext: function () {\n                if (stage < 2) {\n                    firstit = firstit || prev.getEnumerator();\n                    if (firstit.moveNext()) {\n                        e.current = firstit.current;\n                        return true;\n                    }\n                    stage++;\n                }\n                secondit = secondit || items.en().getEnumerator();\n                if (secondit.moveNext()) {\n                    e.current = secondit.current;\n                    return true;\n                }\n                e.current = undefined;\n                return false;\n            }\n        };\n        return e;\n    }\n    exjs.Enumerable.prototype.append = function () {\n        var _this = this;\n        var items = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            items[_i - 0] = arguments[_i];\n        }\n        var e = new exjs.Enumerable();\n        e.getEnumerator = function () { return appendEnumerator(_this, items); };\n        return e;\n    };\n    if (exjs.List)\n        exjs.List.prototype.append = exjs.Enumerable.prototype.append;\n})(exjs || (exjs = {}));\n/// <reference path=\"enumerable.ts\" />\nvar exjs;\n(function (exjs) {\n    function applyEnumerator(prev, action) {\n        var t;\n        var i = 0;\n        var e = {\n            current: undefined,\n            moveNext: function () {\n                if (!t)\n                    t = prev.getEnumerator();\n                if (!t.moveNext())\n                    return false;\n                action(e.current = t.current, i);\n                i++;\n                return true;\n            }\n        };\n        return e;\n    }\n    exjs.Enumerable.prototype.apply = function (action) {\n        var _this = this;\n        var e = new exjs.Enumerable();\n        e.getEnumerator = function () { return applyEnumerator(_this, action); };\n        return e;\n    };\n    if (exjs.List)\n        exjs.List.prototype.apply = exjs.Enumerable.prototype.apply;\n})(exjs || (exjs = {}));\n/// <reference path=\"enumerable.ts\" />\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar exjs;\n(function (exjs) {\n    function arrayEnumerator(arr) {\n        var len = arr.length;\n        var e = { moveNext: undefined, current: undefined };\n        var index = -1;\n        e.moveNext = function () {\n            index++;\n            if (index >= len) {\n                e.current = undefined;\n                return false;\n            }\n            e.current = arr[index];\n            return true;\n        };\n        return e;\n    }\n    var ArrayEnumerable = (function (_super) {\n        __extends(ArrayEnumerable, _super);\n        function ArrayEnumerable(arr) {\n            _super.call(this);\n            this.getEnumerator = function () {\n                return arrayEnumerator(arr);\n            };\n            this.toArray = function () {\n                return arr.slice(0);\n            };\n        }\n        return ArrayEnumerable;\n    })(exjs.Enumerable);\n    function en() {\n        if (this && Array.isArray(this))\n            return new ArrayEnumerable(this);\n        return new exjs.Enumerable();\n    }\n    try {\n        Object.defineProperty(Array.prototype, \"en\", {\n            value: en,\n            enumerable: false,\n            writable: false,\n            configurable: false\n        });\n    }\n    catch (e) {\n        Array.prototype.en = en;\n    }\n})(exjs || (exjs = {}));\n/// <reference path=\"enumerable.ts\" />\nvar exjs;\n(function (exjs) {\n    function concatEnumerator(prev, second) {\n        var t;\n        var s = false;\n        var e = {\n            current: undefined,\n            moveNext: function () {\n                if (!t)\n                    t = prev.getEnumerator();\n                e.current = undefined;\n                if (t.moveNext()) {\n                    e.current = t.current;\n                    return true;\n                }\n                if (s)\n                    return false;\n                s = true;\n                t = second.getEnumerator();\n                if (!t.moveNext())\n                    return false;\n                e.current = t.current;\n                return true;\n            }\n        };\n        return e;\n    }\n    exjs.Enumerable.prototype.concat = function (second) {\n        var _this = this;\n        var en = second instanceof Array ? second.en() : second;\n        var e = new exjs.Enumerable();\n        e.getEnumerator = function () { return concatEnumerator(_this, en); };\n        return e;\n    };\n    if (exjs.List)\n        exjs.List.prototype.concat = exjs.Enumerable.prototype.concat;\n})(exjs || (exjs = {}));\n/// <reference path=\"enumerable.ts\" />\nvar exjs;\n(function (exjs) {\n    function distinctEnumerator(prev, comparer) {\n        var t;\n        var visited = [];\n        var e = {\n            current: undefined,\n            moveNext: function () {\n                if (!t)\n                    t = prev.getEnumerator();\n                e.current = undefined;\n                if (!comparer) {\n                    while (t.moveNext()) {\n                        if (visited.indexOf(t.current) < 0) {\n                            visited.push(e.current = t.current);\n                            return true;\n                        }\n                    }\n                    return false;\n                }\n                while (t.moveNext()) {\n                    for (var i = 0, len = visited.length, hit = false; i < len && !hit; i++) {\n                        hit = !!comparer(visited[i], t.current);\n                    }\n                    if (!hit) {\n                        visited.push(e.current = t.current);\n                        return true;\n                    }\n                }\n                return false;\n            }\n        };\n        return e;\n    }\n    exjs.Enumerable.prototype.distinct = function (comparer) {\n        var _this = this;\n        var e = new exjs.Enumerable();\n        e.getEnumerator = function () { return distinctEnumerator(_this, comparer); };\n        return e;\n    };\n    if (exjs.List)\n        exjs.List.prototype.distinct = exjs.Enumerable.prototype.distinct;\n})(exjs || (exjs = {}));\n/// <reference path=\"enumerable.ts\" />\nvar exjs;\n(function (exjs) {\n    function exceptEnumerator(prev, second, comparer) {\n        comparer = comparer || function (f, s) {\n            return f === s;\n        };\n        var t;\n        var e = {\n            current: undefined,\n            moveNext: function () {\n                if (!t)\n                    t = prev.getEnumerator();\n                e.current = undefined;\n                while (t.moveNext()) {\n                    for (var hit = false, x = second.getEnumerator(); x.moveNext() && !hit;) {\n                        hit = comparer(t.current, x.current);\n                    }\n                    if (!hit) {\n                        e.current = t.current;\n                        return true;\n                    }\n                }\n                return false;\n            }\n        };\n        return e;\n    }\n    exjs.Enumerable.prototype.except = function (second, comparer) {\n        var _this = this;\n        var en = second instanceof Array ? second.en() : second;\n        var e = new exjs.Enumerable();\n        e.getEnumerator = function () { return exceptEnumerator(_this, en, comparer); };\n        return e;\n    };\n    if (exjs.List)\n        exjs.List.prototype.except = exjs.Enumerable.prototype.except;\n})(exjs || (exjs = {}));\nFunction.prototype.fromJson = function (o, mappingOverrides) {\n    var rv = new this();\n    if (o == null)\n        return rv;\n    var mapped = [];\n    for (var key in mappingOverrides) {\n        var j = mapSubProperty(o[key], mappingOverrides[key]);\n        if (j === undefined)\n            continue;\n        rv[key] = j;\n        mapped.push(key);\n    }\n    for (var key in this.$jsonMappings) {\n        if (mapped.indexOf(key) > -1)\n            continue;\n        var j = mapSubProperty(o[key], this.$jsonMappings[key]);\n        if (j === undefined)\n            continue;\n        rv[key] = j;\n        mapped.push(key);\n    }\n    for (var key in o) {\n        if (mapped.indexOf(key) > -1)\n            continue;\n        rv[key] = o[key];\n    }\n    return rv;\n    function mapSubProperty(j, mapping) {\n        if (j == null)\n            return j;\n        if (mapping instanceof Function)\n            return mapping(j);\n        if (mapping instanceof Array) {\n            mapping = mapping[0];\n            if (!(mapping instanceof Function) || !(j instanceof Array))\n                return undefined;\n            var arr = [];\n            for (var i = 0; i < j.length; i++) {\n                arr.push(mapping(j[i]));\n            }\n            return arr;\n        }\n        return undefined;\n    }\n};\n/// <reference path=\"enumerable.ts\" />\n/// <reference path=\"array.ts\" />\nvar exjs;\n(function (exjs) {\n    function groupByEnumerator(prev, keySelector, comparer) {\n        var grps;\n        var i = 0;\n        var e = {\n            current: undefined,\n            moveNext: function () {\n                if (!grps)\n                    grps = createGroups(prev, keySelector, comparer);\n                e.current = undefined;\n                if (i >= grps.length)\n                    return false;\n                e.current = grps[i];\n                i++;\n                return true;\n            }\n        };\n        return e;\n    }\n    function createGroups(prev, keySelector, comparer) {\n        comparer = comparer || function (k1, k2) {\n            return k1 === k2;\n        };\n        var grps = [];\n        var keys = [];\n        var e = prev.getEnumerator();\n        var key;\n        while (e.moveNext()) {\n            key = keySelector(e.current);\n            var index = -1;\n            for (var i = 0, len = keys.length; i < len; i++) {\n                if (comparer(key, keys[i])) {\n                    index = i;\n                    break;\n                }\n            }\n            var grp;\n            if (index < 0) {\n                keys.push(key);\n                grps.push(grp = new Group(key));\n            }\n            else {\n                grp = grps[index];\n            }\n            grp._add(e.current);\n        }\n        return grps;\n    }\n    var Group = (function (_super) {\n        __extends(Group, _super);\n        function Group(key) {\n            var _this = this;\n            _super.call(this);\n            this.key = key;\n            this._arr = [];\n            this.getEnumerator = function () { return _this._arr.en().getEnumerator(); };\n        }\n        Group.prototype._add = function (e) {\n            this._arr.push(e);\n        };\n        return Group;\n    })(exjs.Enumerable);\n    exjs.Enumerable.prototype.groupBy = function (keySelector, comparer) {\n        var _this = this;\n        var e = new exjs.Enumerable();\n        e.getEnumerator = function () { return groupByEnumerator(_this, keySelector, comparer); };\n        return e;\n    };\n    if (exjs.List)\n        exjs.List.prototype.groupBy = exjs.Enumerable.prototype.groupBy;\n})(exjs || (exjs = {}));\n/// <reference path=\"enumerable.ts\" />\nvar exjs;\n(function (exjs) {\n    function intersectEnumerator(prev, second, comparer) {\n        comparer = comparer || function (f, s) { return f === s; };\n        var t;\n        var e = {\n            current: undefined,\n            moveNext: function () {\n                if (!t)\n                    t = exjs.en(prev).distinct().getEnumerator();\n                e.current = undefined;\n                while (t.moveNext()) {\n                    for (var hit = false, x = second.getEnumerator(); x.moveNext() && !hit;) {\n                        hit = comparer(t.current, x.current);\n                    }\n                    if (hit) {\n                        e.current = t.current;\n                        return true;\n                    }\n                }\n                return false;\n            }\n        };\n        return e;\n    }\n    exjs.Enumerable.prototype.intersect = function (second, comparer) {\n        var _this = this;\n        var en = second instanceof Array ? second.en() : second;\n        var e = new exjs.Enumerable();\n        e.getEnumerator = function () { return intersectEnumerator(_this, en, comparer); };\n        return e;\n    };\n    if (exjs.List)\n        exjs.List.prototype.intersect = exjs.Enumerable.prototype.intersect;\n})(exjs || (exjs = {}));\n/// <reference path=\"enumerable.ts\" />\nvar exjs;\n(function (exjs) {\n    function joinEnumerator(prev, inner, outerKeySelector, innerKeySelector, resultSelector, comparer) {\n        comparer = comparer || function (k1, k2) {\n            return k1 === k2;\n        };\n        var s;\n        var ins;\n        var j = 0;\n        var e = {\n            current: undefined,\n            moveNext: function () {\n                e.current = undefined;\n                if (!s) {\n                    s = prev.getEnumerator();\n                    if (!s.moveNext())\n                        return false;\n                    ins = exjs.en(inner).toArray();\n                }\n                var cur;\n                do {\n                    for (; j < ins.length; j++) {\n                        cur = ins[j];\n                        if (comparer(outerKeySelector(s.current), innerKeySelector(cur))) {\n                            j++;\n                            e.current = resultSelector(s.current, cur);\n                            return true;\n                        }\n                    }\n                    j = 0;\n                } while (s.moveNext());\n                return false;\n            }\n        };\n        return e;\n    }\n    exjs.Enumerable.prototype.join = function (inner, outerKeySelector, innerKeySelector, resultSelector, comparer) {\n        var _this = this;\n        var en = inner instanceof Array ? inner.en() : inner;\n        var e = new exjs.Enumerable();\n        e.getEnumerator = function () { return joinEnumerator(_this, en, outerKeySelector, innerKeySelector, resultSelector, comparer); };\n        return e;\n    };\n    if (exjs.List)\n        exjs.List.prototype.join = exjs.Enumerable.prototype.join;\n})(exjs || (exjs = {}));\n/// <reference path=\"enumerable.ts\" />\n/// <reference path=\"fromJson.ts\" />\nvar exjs;\n(function (exjs) {\n    exjs.Enumerable.prototype.toList = function () {\n        var l = new List();\n        var enumerator = this.getEnumerator();\n        while (enumerator.moveNext()) {\n            l.push(enumerator.current);\n        }\n        return l;\n    };\n    var List = (function (_super) {\n        __extends(List, _super);\n        function List() {\n            _super.apply(this, arguments);\n        }\n        List.prototype.toString = function () { throw new Error(\"Not implemented\"); };\n        List.prototype.toLocaleString = function () { throw new Error(\"Not implemented\"); };\n        List.prototype.pop = function () { throw new Error(\"Not implemented\"); };\n        List.prototype.push = function () {\n            var items = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                items[_i - 0] = arguments[_i];\n            }\n            throw new Error(\"Not implemented\");\n        };\n        List.prototype.shift = function () { throw new Error(\"Not implemented\"); };\n        List.prototype.slice = function (start, end) { throw new Error(\"Not implemented\"); };\n        List.prototype.sort = function (compareFn) { throw new Error(\"Not implemented\"); };\n        List.prototype.splice = function () { throw new Error(\"Not implemented\"); };\n        List.prototype.unshift = function () {\n            var items = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                items[_i - 0] = arguments[_i];\n            }\n            throw new Error(\"Not implemented\");\n        };\n        List.prototype.indexOf = function (searchElement, fromIndex) { throw new Error(\"Not implemented\"); };\n        List.prototype.lastIndexOf = function (searchElement, fromIndex) { throw new Error(\"Not implemented\"); };\n        List.prototype.every = function (callbackfn, thisArg) { throw new Error(\"Not implemented\"); };\n        List.prototype.some = function (callbackfn, thisArg) { throw new Error(\"Not implemented\"); };\n        List.prototype.forEach = function (callbackfn, thisArg) { throw new Error(\"Not implemented\"); };\n        List.prototype.map = function (callbackfn, thisArg) { throw new Error(\"Not implemented\"); };\n        List.prototype.filter = function (callbackfn, thisArg) { throw new Error(\"Not implemented\"); };\n        List.prototype.reduce = function (callbackfn, initialValue) { throw new Error(\"Not implemented\"); };\n        List.prototype.reduceRight = function (callbackfn, initialValue) { throw new Error(\"Not implemented\"); };\n        List.prototype.remove = function (item) { throw new Error(\"Not implemented\"); };\n        List.prototype.removeWhere = function (predicate) { throw new Error(\"Not implemented\"); };\n        return List;\n    })(exjs.Enumerable);\n    exjs.List = List;\n    for (var p in Array)\n        if (Array.hasOwnProperty(p))\n            List[p] = Array[p];\n    function __() { this.constructor = List; }\n    __.prototype = Array.prototype;\n    List.prototype = new __();\n    for (var key in exjs.Enumerable.prototype) {\n        if (key === \"getEnumerator\")\n            continue;\n        List.prototype[key] = exjs.Enumerable.prototype[key];\n    }\n    List.prototype.getEnumerator = function () {\n        var list = this;\n        var len = list.length;\n        var e = { moveNext: undefined, current: undefined };\n        var index = -1;\n        e.moveNext = function () {\n            index++;\n            if (index >= len) {\n                e.current = undefined;\n                return false;\n            }\n            e.current = list[index];\n            return true;\n        };\n        return e;\n    };\n    List.prototype.remove = function (item) {\n        return this.removeWhere(function (t) { return t === item; }).any();\n    };\n    List.prototype.removeWhere = function (predicate) {\n        var removed = [];\n        var cur;\n        for (var i = this.length - 1; i >= 0; i--) {\n            cur = this[i];\n            if (predicate(cur, i) === true) {\n                this.splice(i, 1);\n                removed.push(cur);\n            }\n        }\n        return removed.en().reverse();\n    };\n})(exjs || (exjs = {}));\n/// <reference path=\"enumerable.ts\" />\nvar exjs;\n(function (exjs) {\n    function orderByEnumerable(source, keySelector, isDescending, comparer) {\n        return new OrderedEnumerable(source, keySelector, isDescending, comparer);\n    }\n    var OrderedEnumerable = (function (_super) {\n        __extends(OrderedEnumerable, _super);\n        function OrderedEnumerable(source, keySelector, isDescending, keyComparer) {\n            _super.call(this);\n            this.Source = source;\n            keyComparer = keyComparer || function (f, s) {\n                return f > s ? 1 : (f < s ? -1 : 0);\n            };\n            var factor = (isDescending === true) ? -1 : 1;\n            this.Sorter = function (a, b) { return factor * keyComparer(keySelector(a), keySelector(b)); };\n        }\n        OrderedEnumerable.prototype.getEnumerator = function () {\n            var source = this.Source;\n            var sorter = this.Sorter;\n            var arr;\n            var i = 0;\n            var e = {\n                current: undefined,\n                moveNext: function () {\n                    if (!arr) {\n                        arr = exjs.en(source).toArray();\n                        arr.sort(sorter);\n                    }\n                    e.current = undefined;\n                    if (i >= arr.length)\n                        return false;\n                    e.current = arr[i];\n                    i++;\n                    return true;\n                }\n            };\n            return e;\n        };\n        OrderedEnumerable.prototype.thenBy = function (keySelector, comparer) {\n            return new ThenEnumerable(this, keySelector, false, comparer);\n        };\n        OrderedEnumerable.prototype.thenByDescending = function (keySelector, comparer) {\n            return new ThenEnumerable(this, keySelector, true, comparer);\n        };\n        return OrderedEnumerable;\n    })(exjs.Enumerable);\n    var ThenEnumerable = (function (_super) {\n        __extends(ThenEnumerable, _super);\n        function ThenEnumerable(source, keySelector, isDescending, keyComparer) {\n            _super.call(this, source, keySelector, isDescending, keyComparer);\n            var parentSorter = source.Sorter;\n            var thisSorter = this.Sorter;\n            this.Sorter = function (a, b) { return parentSorter(a, b) || thisSorter(a, b); };\n        }\n        return ThenEnumerable;\n    })(OrderedEnumerable);\n    var fn = exjs.Enumerable.prototype;\n    fn.orderBy = function (keySelector, comparer) {\n        return orderByEnumerable(this, keySelector, false, comparer);\n    };\n    fn.orderByDescending = function (keySelector, comparer) {\n        return orderByEnumerable(this, keySelector, true, comparer);\n    };\n    if (exjs.List) {\n        exjs.List.prototype.orderBy = exjs.Enumerable.prototype.orderBy;\n        exjs.List.prototype.orderByDescending = exjs.Enumerable.prototype.orderByDescending;\n    }\n})(exjs || (exjs = {}));\n/// <reference path=\"enumerable.ts\" />\nvar exjs;\n(function (exjs) {\n    function prependEnumerator(prev, items) {\n        var stage = 1;\n        var firstit;\n        var secondit;\n        var e = {\n            current: undefined,\n            moveNext: function () {\n                if (stage < 2) {\n                    firstit = firstit || items.en().getEnumerator();\n                    if (firstit.moveNext()) {\n                        e.current = firstit.current;\n                        return true;\n                    }\n                    stage++;\n                }\n                secondit = secondit || prev.getEnumerator();\n                if (secondit.moveNext()) {\n                    e.current = secondit.current;\n                    return true;\n                }\n                e.current = undefined;\n                return false;\n            }\n        };\n        return e;\n    }\n    exjs.Enumerable.prototype.prepend = function () {\n        var _this = this;\n        var items = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            items[_i - 0] = arguments[_i];\n        }\n        var e = new exjs.Enumerable();\n        e.getEnumerator = function () { return prependEnumerator(_this, items); };\n        return e;\n    };\n    if (exjs.List)\n        exjs.List.prototype.prepend = exjs.Enumerable.prototype.prepend;\n})(exjs || (exjs = {}));\n/// <reference path=\"enumerable.ts\" />\nvar exjs;\n(function (exjs) {\n    function rangeEnumerator(start, end, increment) {\n        var i = start - increment;\n        var e = {\n            current: undefined,\n            moveNext: function () {\n                i += increment;\n                if (i >= end)\n                    return false;\n                e.current = i;\n                return true;\n            }\n        };\n        return e;\n    }\n    function range(start, end, increment) {\n        start = start || 0;\n        end = end || 0;\n        if (start > end)\n            throw new Error(\"Start cannot be greater than end.\");\n        if (increment == null)\n            increment = 1;\n        var e = new exjs.Enumerable();\n        e.getEnumerator = function () { return rangeEnumerator(start, end, increment); };\n        return e;\n    }\n    exjs.range = range;\n})(exjs || (exjs = {}));\n/// <reference path=\"enumerable.ts\" />\nvar exjs;\n(function (exjs) {\n    function reverseEnumerator(prev) {\n        var a;\n        var i = 0;\n        var e = {\n            current: undefined,\n            moveNext: function () {\n                if (!a) {\n                    a = exjs.en(prev).toArray();\n                    i = a.length;\n                }\n                i--;\n                e.current = a[i];\n                return i >= 0;\n            }\n        };\n        return e;\n    }\n    exjs.Enumerable.prototype.reverse = function () {\n        var _this = this;\n        var e = new exjs.Enumerable();\n        e.getEnumerator = function () { return reverseEnumerator(_this); };\n        return e;\n    };\n    if (exjs.List)\n        exjs.List.prototype.reverse = exjs.Enumerable.prototype.reverse;\n})(exjs || (exjs = {}));\nvar exjs;\n(function (exjs) {\n    function round(value, digits) {\n        digits = digits || 0;\n        if (digits === 0)\n            return Math.round(value);\n        var shift = Math.pow(10, digits);\n        return Math.round(value * shift) / shift;\n    }\n    exjs.round = round;\n})(exjs || (exjs = {}));\n/// <reference path=\"enumerable.ts\" />\n/// <reference path=\"array.ts\" />\nvar exjs;\n(function (exjs) {\n    function selectEnumerator(prev, selector) {\n        var t;\n        var i = 0;\n        var e = {\n            current: undefined,\n            moveNext: function () {\n                if (!t)\n                    t = prev.getEnumerator();\n                if (!t.moveNext())\n                    return false;\n                e.current = selector(t.current, i);\n                i++;\n                return true;\n            }\n        };\n        return e;\n    }\n    function selectManyEnumerator(prev, selector) {\n        var t;\n        var active;\n        var e = {\n            current: undefined,\n            moveNext: function () {\n                e.current = undefined;\n                if (!t)\n                    t = prev.getEnumerator();\n                while (!active || !active.moveNext()) {\n                    if (!t.moveNext())\n                        return false;\n                    active = exjs.selectorEnumerator(selector(t.current));\n                }\n                e.current = active.current;\n                return true;\n            }\n        };\n        return e;\n    }\n    exjs.Enumerable.prototype.select = function (selector) {\n        var _this = this;\n        var e = new exjs.Enumerable();\n        e.getEnumerator = function () { return selectEnumerator(_this, selector); };\n        return e;\n    };\n    exjs.Enumerable.prototype.selectMany = function (selector) {\n        var _this = this;\n        var e = new exjs.Enumerable();\n        e.getEnumerator = function () { return selectManyEnumerator(_this, selector); };\n        return e;\n    };\n    if (exjs.List) {\n        exjs.List.prototype.select = exjs.Enumerable.prototype.select;\n        exjs.List.prototype.selectMany = exjs.Enumerable.prototype.selectMany;\n    }\n})(exjs || (exjs = {}));\nvar exjs;\n(function (exjs) {\n    function selectorEnumerator(obj) {\n        if (Array.isArray(obj))\n            return obj.en().getEnumerator();\n        if (obj != null && typeof obj.getEnumerator === \"function\")\n            return obj.getEnumerator();\n        return null;\n    }\n    exjs.selectorEnumerator = selectorEnumerator;\n})(exjs || (exjs = {}));\n/// <reference path=\"enumerable.ts\" />\nvar exjs;\n(function (exjs) {\n    function skipEnumerator(prev, count) {\n        var t;\n        var e = {\n            current: undefined,\n            moveNext: function () {\n                if (!t) {\n                    t = prev.getEnumerator();\n                    for (var i = 0; i < count; i++) {\n                        if (!t.moveNext())\n                            return false;\n                    }\n                }\n                if (!t.moveNext()) {\n                    e.current = undefined;\n                    return false;\n                }\n                e.current = t.current;\n                return true;\n            }\n        };\n        return e;\n    }\n    function skipWhileEnumerator(prev, predicate) {\n        var t;\n        var e = {\n            current: undefined,\n            moveNext: function () {\n                if (!t) {\n                    t = prev.getEnumerator();\n                    for (var i = 0; t.moveNext(); i++) {\n                        if (!predicate(e.current = t.current, i))\n                            return true;\n                    }\n                    e.current = undefined;\n                    return false;\n                }\n                if (!t.moveNext()) {\n                    e.current = undefined;\n                    return false;\n                }\n                e.current = t.current;\n                return true;\n            }\n        };\n        return e;\n    }\n    exjs.Enumerable.prototype.skip = function (count) {\n        var _this = this;\n        var e = new exjs.Enumerable();\n        e.getEnumerator = function () { return skipEnumerator(_this, count); };\n        return e;\n    };\n    exjs.Enumerable.prototype.skipWhile = function (predicate) {\n        var _this = this;\n        var e = new exjs.Enumerable();\n        e.getEnumerator = function () { return skipWhileEnumerator(_this, predicate); };\n        return e;\n    };\n    if (exjs.List) {\n        exjs.List.prototype.skip = exjs.Enumerable.prototype.skip;\n        exjs.List.prototype.skipWhile = exjs.Enumerable.prototype.skipWhile;\n    }\n})(exjs || (exjs = {}));\n/// <reference path=\"enumerable.ts\" />\nvar exjs;\n(function (exjs) {\n    function takeEnumerator(prev, count) {\n        var t;\n        var i = 0;\n        var e = {\n            current: undefined,\n            moveNext: function () {\n                if (!t)\n                    t = prev.getEnumerator();\n                i++;\n                if (i > count)\n                    return false;\n                e.current = undefined;\n                if (!t.moveNext())\n                    return false;\n                e.current = t.current;\n                return true;\n            }\n        };\n        return e;\n    }\n    function takeWhileEnumerator(prev, predicate) {\n        var t;\n        var i = 0;\n        var e = {\n            current: undefined,\n            moveNext: function () {\n                if (!t)\n                    t = prev.getEnumerator();\n                if (!t.moveNext() || !predicate(t.current, i)) {\n                    e.current = undefined;\n                    return false;\n                }\n                i++;\n                e.current = t.current;\n                return true;\n            }\n        };\n        return e;\n    }\n    exjs.Enumerable.prototype.take = function (count) {\n        var _this = this;\n        var e = new exjs.Enumerable();\n        e.getEnumerator = function () { return takeEnumerator(_this, count); };\n        return e;\n    };\n    exjs.Enumerable.prototype.takeWhile = function (predicate) {\n        var _this = this;\n        var e = new exjs.Enumerable();\n        e.getEnumerator = function () { return takeWhileEnumerator(_this, predicate); };\n        return e;\n    };\n    if (exjs.List) {\n        exjs.List.prototype.take = exjs.Enumerable.prototype.take;\n        exjs.List.prototype.takeWhile = exjs.Enumerable.prototype.takeWhile;\n    }\n})(exjs || (exjs = {}));\n/// <reference path=\"enumerable.ts\" />\nvar exjs;\n(function (exjs) {\n    function traverseEnumerator(prev, selector) {\n        var started = false;\n        var enstack = [];\n        var t;\n        var e = {\n            current: undefined,\n            moveNext: function () {\n                if (!started) {\n                    t = prev.getEnumerator();\n                    started = true;\n                }\n                else if (t == null) {\n                    return false;\n                }\n                else {\n                    enstack.push(t);\n                    t = exjs.selectorEnumerator(selector(e.current));\n                }\n                while (!t || !t.moveNext()) {\n                    if (enstack.length < 1)\n                        break;\n                    t = enstack.pop();\n                }\n                e.current = t == null ? undefined : t.current;\n                return e.current !== undefined;\n            }\n        };\n        return e;\n    }\n    function traverseUniqueEnumerator(prev, selector, turnstile) {\n        var started = false;\n        var enstack = [];\n        var t;\n        var e = {\n            current: undefined,\n            moveNext: function () {\n                if (!started) {\n                    t = prev.getEnumerator();\n                    started = true;\n                }\n                else if (t == null) {\n                    return false;\n                }\n                else {\n                    enstack.push(t);\n                    t = exjs.selectorEnumerator(selector(e.current));\n                }\n                do {\n                    while (!t || !t.moveNext()) {\n                        if (enstack.length < 1)\n                            break;\n                        t = enstack.pop();\n                    }\n                    e.current = t == null ? undefined : t.current;\n                } while (turnstile(e.current));\n                return e.current !== undefined;\n            }\n        };\n        return e;\n    }\n    exjs.Enumerable.prototype.traverse = function (selector) {\n        var _this = this;\n        var e = new exjs.Enumerable();\n        e.getEnumerator = function () { return traverseEnumerator(_this, selector); };\n        return e;\n    };\n    exjs.Enumerable.prototype.traverseUnique = function (selector, matcher) {\n        var _this = this;\n        var existing = [];\n        var e = new exjs.Enumerable();\n        if (matcher) {\n            e.getEnumerator = function () { return traverseUniqueEnumerator(_this, selector, function (x) {\n                if (existing.some(function (e) { return matcher(x, e); }))\n                    return true;\n                existing.push(x);\n                return false;\n            }); };\n        }\n        else {\n            e.getEnumerator = function () { return traverseUniqueEnumerator(_this, selector, function (x) {\n                if (existing.indexOf(x) > -1)\n                    return true;\n                existing.push(x);\n                return false;\n            }); };\n        }\n        return e;\n    };\n    if (exjs.List) {\n        exjs.List.prototype.traverse = exjs.Enumerable.prototype.traverse;\n        exjs.List.prototype.traverseUnique = exjs.Enumerable.prototype.traverseUnique;\n    }\n})(exjs || (exjs = {}));\n/// <reference path=\"enumerable.ts\" />\nvar exjs;\n(function (exjs) {\n    function unionEnumerator(prev, second, comparer) {\n        comparer = comparer || function (f, s) {\n            return f === s;\n        };\n        var t;\n        var visited = [];\n        var s;\n        var e = {\n            current: undefined,\n            moveNext: function () {\n                if (!t)\n                    t = exjs.en(prev).distinct().getEnumerator();\n                e.current = undefined;\n                if (!s && t.moveNext()) {\n                    visited.push(e.current = t.current);\n                    return true;\n                }\n                s = s || exjs.en(second).distinct().getEnumerator();\n                while (s.moveNext()) {\n                    for (var i = 0, hit = false, len = visited.length; i < len && !hit; i++) {\n                        hit = comparer(visited[i], s.current);\n                    }\n                    if (!hit) {\n                        e.current = s.current;\n                        return true;\n                    }\n                }\n                return false;\n            }\n        };\n        return e;\n    }\n    exjs.Enumerable.prototype.union = function (second, comparer) {\n        var _this = this;\n        var en = second instanceof Array ? second.en() : second;\n        var e = new exjs.Enumerable();\n        e.getEnumerator = function () { return unionEnumerator(_this, en, comparer); };\n        return e;\n    };\n    if (exjs.List)\n        exjs.List.prototype.union = exjs.Enumerable.prototype.union;\n})(exjs || (exjs = {}));\n/// <reference path=\"enumerable.ts\" />\nvar exjs;\n(function (exjs) {\n    function whereEnumerator(prev, filter) {\n        var t;\n        var e = {\n            current: undefined,\n            moveNext: function () {\n                if (!t)\n                    t = prev.getEnumerator();\n                var c;\n                while (t.moveNext()) {\n                    if (filter(c = t.current)) {\n                        e.current = c;\n                        return true;\n                    }\n                }\n                return false;\n            }\n        };\n        return e;\n    }\n    exjs.Enumerable.prototype.where = function (filter) {\n        var _this = this;\n        var e = new exjs.Enumerable();\n        e.getEnumerator = function () { return whereEnumerator(_this, filter); };\n        return e;\n    };\n    if (exjs.List)\n        exjs.List.prototype.where = exjs.Enumerable.prototype.where;\n})(exjs || (exjs = {}));\nvar exjs;\n(function (exjs) {\n    function en(enu) {\n        var x = new exjs.Enumerable();\n        x.getEnumerator = function () {\n            return wrapEnumerator(enu);\n        };\n        return x;\n    }\n    exjs.en = en;\n    function wrapEnumerator(enu) {\n        var wrapped = enu.getEnumerator();\n        var x = { current: undefined, moveNext: undefined };\n        x.moveNext = function () {\n            if (wrapped.moveNext()) {\n                x.current = wrapped.current;\n                return true;\n            }\n            x.current = undefined;\n            return false;\n        };\n        return x;\n    }\n})(exjs || (exjs = {}));\nvar ex = exjs.en;\n/// <reference path=\"enumerable.ts\" />\nvar exjs;\n(function (exjs) {\n    function zipEnumerator(prev, second, resultSelector) {\n        var s;\n        var t;\n        var e = {\n            current: undefined,\n            moveNext: function () {\n                if (!s)\n                    s = prev.getEnumerator();\n                if (!t)\n                    t = second.getEnumerator();\n                e.current = undefined;\n                if (!s.moveNext() || !t.moveNext())\n                    return false;\n                e.current = resultSelector(s.current, t.current);\n                return true;\n            }\n        };\n        return e;\n    }\n    exjs.Enumerable.prototype.zip = function (second, resultSelector) {\n        var _this = this;\n        var en = second instanceof Array ? second.en() : second;\n        var e = new exjs.Enumerable();\n        e.getEnumerator = function () { return zipEnumerator(_this, en, resultSelector); };\n        return e;\n    };\n    if (exjs.List)\n        exjs.List.prototype.zip = exjs.Enumerable.prototype.zip;\n})(exjs || (exjs = {}));\n",null,"/// <reference path=\"../enumerable.ts\" />\r\n\r\ndeclare var global;\r\n\r\nmodule exjs {\r\n    export class Map<TKey, TValue> implements IMap<TKey, TValue> {\r\n        private _keys: TKey[] = [];\r\n        private _values: TValue[] = [];\r\n\r\n        get size(): number {\r\n            return this._keys.length;\r\n        }\r\n\r\n        constructor();\r\n        constructor(enumerable: any[][]);\r\n        constructor(enumerable: IEnumerable<any[]>);\r\n        constructor(enumerable?: any) {\r\n            var enu: IEnumerable<any[]>;\r\n            if (enumerable instanceof Array) {\r\n                enu = (<Array<any[]>>enumerable).en();\r\n            } else if (enumerable && enumerable.getEnumerator instanceof Function) {\r\n                enu = <IEnumerable<any[]>>enumerable;\r\n            }\r\n\r\n            if (!enu)\r\n                return;\r\n            for (var en = enu.getEnumerator(); en && en.moveNext();) {\r\n                this.set(en.current[0], en.current[1]);\r\n            }\r\n        }\r\n\r\n        clear() {\r\n            this._keys.length = 0;\r\n            this._values.length = 0;\r\n        }\r\n\r\n        delete(key: TKey): boolean {\r\n            var index = this._keys.indexOf(key);\r\n            if (!(index > -1))\r\n                return false;\r\n            this._keys.splice(index, 1);\r\n            this._values.splice(index, 1);\r\n            return true;\r\n        }\r\n\r\n        entries(): IEnumerableEx<any[]> {\r\n            return exjs.range(0, this.size).select(i => [this._keys[i], this._values[i]]);\r\n        }\r\n\r\n        forEach(callbackFn: (value: TValue, key: TKey, map?: IMap<TKey, TValue>) => void, thisArg?: any) {\r\n            if (thisArg == null)\r\n                thisArg = this;\r\n            for (var i = 0, keys = this._keys, vals = this._values, len = keys.length; i < len; i++) {\r\n                callbackFn.call(thisArg, vals[i], keys[i], this);\r\n            }\r\n        }\r\n\r\n        get(key: TKey): TValue {\r\n            var index = this._keys.indexOf(key);\r\n            return this._values[index];\r\n        }\r\n\r\n        has(key: TKey): boolean {\r\n            return this._keys.indexOf(key) > -1;\r\n        }\r\n\r\n        keys(): IEnumerableEx<TKey> {\r\n            return this._keys.en();\r\n        }\r\n\r\n        set(key: TKey, value: TValue): any {\r\n            var index = this._keys.indexOf(key);\r\n            if (index > -1) {\r\n                this._values[index] = value;\r\n            } else {\r\n                this._keys.push(key);\r\n                this._values.push(value);\r\n            }\r\n            return undefined;\r\n        }\r\n\r\n        values(): IEnumerableEx<TValue> {\r\n            return this._values.en();\r\n        }\r\n    }\r\n\r\n    Enumerable.prototype.toMap = function<T, TKey, TValue> (keySelector: (t: T) => TKey, valueSelector: (t: T) => TValue): Map<TKey, TValue> {\r\n        var m = new Map<TKey, TValue>();\r\n        for (var en = this.getEnumerator(); en.moveNext();) {\r\n            m.set(keySelector(en.current), valueSelector(en.current));\r\n        }\r\n        return m;\r\n    };\r\n    if (List)\r\n        List.prototype.toMap = Enumerable.prototype.toMap;\r\n}\r\n\r\n(function (_global) {\r\n    if (!_global.Map)\r\n        _global.Map = exjs.Map;\r\n})(typeof window === \"undefined\" ? global : window);\r\n","module exjs {\n    export function anonymous<T>(iterator: (en: IEnumerator<T>) => boolean): IEnumerableEx<T> {\n        var enumerable = new Enumerable<T>();\n        enumerable.getEnumerator = () => {\n            var enumerator = {\n                current: undefined,\n                moveNext: () => iterator(enumerator)\n            };\n            return enumerator;\n        };\n        return enumerable;\n    }\n}","/// <reference path=\"enumerable.ts\" />\n\nmodule exjs {\n    function appendEnumerator<T>(prev: IEnumerable<T>, items: T[]): IEnumerator<T> {\n        var stage = 1;\n        var firstit: IEnumerator<T>;\n        var secondit: IEnumerator<T>;\n        var e = {\n            current: undefined,\n            moveNext: function (): boolean {\n                if (stage < 2) {\n                    firstit = firstit || prev.getEnumerator();\n                    if (firstit.moveNext()) {\n                        e.current = firstit.current;\n                        return true;\n                    }\n                    stage++;\n                }\n\n                secondit = secondit || items.en().getEnumerator();\n                if (secondit.moveNext()) {\n                    e.current = secondit.current;\n                    return true;\n                }\n                e.current = undefined;\n                return false;\n            }\n        };\n        return e;\n    }\n\n    Enumerable.prototype.append = function<T>(...items: T[]): IEnumerableEx<T> {\n        var e = new Enumerable<T>();\n        e.getEnumerator = () => appendEnumerator<T>(<IEnumerable<T>>this, items);\n        return e;\n    };\n    if (List)\n        List.prototype.append = Enumerable.prototype.append;\n}","/// <reference path=\"enumerable.ts\" />\r\n\r\nmodule exjs {\r\n    function applyEnumerator<T>(prev: IEnumerable<T>, action: IProjectionIndexFunc<T, any>): IEnumerator<T> {\r\n        var t: IEnumerator<T>;\r\n        var i = 0;\r\n        var e = {\r\n            current: undefined,\r\n            moveNext: function (): boolean {\r\n                if (!t) t = prev.getEnumerator();\r\n                if (!t.moveNext()) return false;\r\n                action(e.current = t.current, i);\r\n                i++;\r\n                return true;\r\n            }\r\n        };\r\n        return e;\r\n    }\r\n\r\n    Enumerable.prototype.apply = function<T>(action: IProjectionIndexFunc<T, any>): IEnumerableEx<T> {\r\n        var e = new Enumerable<T>();\r\n        e.getEnumerator = () => applyEnumerator(<IEnumerable<T>>this, action);\r\n        return e;\r\n    };\r\n    if (List)\r\n        List.prototype.apply = Enumerable.prototype.apply;\r\n}","/// <reference path=\"enumerable.ts\" />\r\n\r\ninterface Array<T> {\r\n    en(): exjs.IEnumerableEx<T>;\r\n}\r\n\r\nmodule exjs {\r\n    function arrayEnumerator<T>(arr: T[]): IEnumerator<T> {\r\n        var len = arr.length;\r\n        var e = {moveNext: undefined, current: undefined};\r\n        var index = -1;\r\n        e.moveNext = function () {\r\n            index++;\r\n            if (index >= len) {\r\n                e.current = undefined;\r\n                return false;\r\n            }\r\n            e.current = arr[index];\r\n            return true;\r\n        };\r\n        return e;\r\n    }\r\n\r\n    class ArrayEnumerable<T> extends Enumerable<T> {\r\n        constructor(arr: T[]) {\r\n            super();\r\n\r\n            this.getEnumerator = function () {\r\n                return arrayEnumerator(arr);\r\n            };\r\n            this.toArray = function () {\r\n                return arr.slice(0);\r\n            };\r\n        }\r\n    }\r\n\r\n    function en<T>(): IEnumerableEx<T> {\r\n        if (this && Array.isArray(this))\r\n            return new ArrayEnumerable<T>(this);\r\n        return new Enumerable<T>();\r\n    }\r\n\r\n    try {\r\n        Object.defineProperty(Array.prototype, \"en\", {\r\n            value: en,\r\n            enumerable: false,\r\n            writable: false,\r\n            configurable: false\r\n        });\r\n    } catch (e) {\r\n        //IE8 supports Object.defineProperty only for DOM objects\r\n        (<any>Array.prototype).en = en;\r\n    }\r\n}","/// <reference path=\"enumerable.ts\" />\r\n\r\nmodule exjs {\r\n    function concatEnumerator<T>(prev: IEnumerable<T>, second: IEnumerable<T>): IEnumerator<T> {\r\n        var t: IEnumerator<T>;\r\n        var s = false;\r\n        var e = {\r\n            current: undefined,\r\n            moveNext: function (): boolean {\r\n                if (!t) t = prev.getEnumerator();\r\n                e.current = undefined;\r\n                if (t.moveNext()) {\r\n                    e.current = t.current;\r\n                    return true;\r\n                }\r\n                if (s) return false;\r\n                s = true;\r\n                t = second.getEnumerator();\r\n                if (!t.moveNext())\r\n                    return false;\r\n                e.current = t.current;\r\n                return true;\r\n            }\r\n        };\r\n        return e;\r\n    }\r\n\r\n    Enumerable.prototype.concat = function<T>(second: any): IEnumerableEx<T> {\r\n        var en: IEnumerable<T> = second instanceof Array ? second.en() : second;\r\n        var e = new Enumerable<T>();\r\n        e.getEnumerator = () => concatEnumerator<T>(<IEnumerable<T>>this, en);\r\n        return e;\r\n    };\r\n    if (List)\r\n        List.prototype.concat = Enumerable.prototype.concat;\r\n}","/// <reference path=\"enumerable.ts\" />\r\n\r\nmodule exjs {\r\n    function distinctEnumerator<T>(prev: IEnumerable<T>, comparer?: (f: T, s: T) => boolean): IEnumerator<T> {\r\n        var t: IEnumerator<T>;\r\n        var visited = [];\r\n        var e = {\r\n            current: undefined,\r\n            moveNext: function (): boolean {\r\n                if (!t) t = prev.getEnumerator();\r\n                e.current = undefined;\r\n                if (!comparer) {\r\n                    while (t.moveNext()) {\r\n                        if (visited.indexOf(t.current) < 0) {\r\n                            visited.push(e.current = t.current);\r\n                            return true;\r\n                        }\r\n                    }\r\n                    return false;\r\n                }\r\n\r\n                while (t.moveNext()) {\r\n                    for (var i = 0, len = visited.length, hit = false; i < len && !hit; i++) {\r\n                        hit = !!comparer(visited[i], t.current);\r\n                    }\r\n                    if (!hit) {\r\n                        visited.push(e.current = t.current);\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n        };\r\n        return e;\r\n    }\r\n\r\n    Enumerable.prototype.distinct = function<T>(comparer?: (f: T, s: T) => boolean): IEnumerableEx<T> {\r\n        var e = new Enumerable<T>();\r\n        e.getEnumerator = () => distinctEnumerator(<IEnumerable<T>>this, comparer);\r\n        return e;\r\n    };\r\n    if (List)\r\n        List.prototype.distinct = Enumerable.prototype.distinct;\r\n}","/// <reference path=\"enumerable.ts\" />\r\n\r\nmodule exjs {\r\n    function exceptEnumerator<T>(prev: IEnumerable<T>, second: IEnumerable<T>, comparer?: (f: T, s: T) => boolean): IEnumerator<T> {\r\n        comparer = comparer || function (f: T, s: T) {\r\n            return f === s;\r\n        };\r\n        var t: IEnumerator<T>;\r\n        var e = {\r\n            current: undefined,\r\n            moveNext: function (): boolean {\r\n                if (!t) t = prev.getEnumerator();\r\n                e.current = undefined;\r\n                while (t.moveNext()) {\r\n                    for (var hit = false, x = second.getEnumerator(); x.moveNext() && !hit;) {\r\n                        hit = comparer(t.current, x.current);\r\n                    }\r\n                    if (!hit) {\r\n                        e.current = t.current;\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n        };\r\n        return e;\r\n    }\r\n\r\n    Enumerable.prototype.except = function<T>(second: any, comparer?: (f: T, s: T) => boolean): IEnumerableEx<T> {\r\n        var en: IEnumerable<T> = second instanceof Array ? second.en() : second;\r\n        var e = new Enumerable<T>();\r\n        e.getEnumerator = () => exceptEnumerator(<IEnumerable<T>>this, en, comparer);\r\n        return e;\r\n    };\r\n    if (List)\r\n        List.prototype.except = Enumerable.prototype.except;\r\n} ","interface Function {\r\n    fromJson<T>(o: any, mappingOverrides?: any): T;\r\n}\r\n\r\nFunction.prototype.fromJson = function<T>(o: any, mappingOverrides?: any): T {\r\n    var rv = new this();\r\n    if (o == null)\r\n        return rv;\r\n\r\n    var mapped: string[] = [];\r\n\r\n    for (var key in mappingOverrides) {\r\n        var j = mapSubProperty(o[key], mappingOverrides[key]);\r\n        if (j === undefined)\r\n            continue;\r\n        rv[key] = j;\r\n        mapped.push(key);\r\n    }\r\n\r\n    for (var key in this.$jsonMappings) {\r\n        if (mapped.indexOf(key) > -1)\r\n            continue;\r\n        var j = mapSubProperty(o[key], this.$jsonMappings[key]);\r\n        if (j === undefined)\r\n            continue;\r\n        rv[key] = j;\r\n        mapped.push(key);\r\n    }\r\n\r\n    for (var key in o) {\r\n        if (mapped.indexOf(key) > -1)\r\n            continue;\r\n        rv[key] = o[key];\r\n    }\r\n\r\n    return rv;\r\n\r\n    function mapSubProperty(j: any, mapping: any): any {\r\n        if (j == null)\r\n            return j;\r\n        if (mapping instanceof Function)\r\n            return mapping(j);\r\n        if (mapping instanceof Array) {\r\n            mapping = mapping[0];\r\n            if (!(mapping instanceof Function) || !(j instanceof Array))\r\n                return undefined;\r\n            var arr = [];\r\n            for (var i = 0; i < j.length; i++) {\r\n                arr.push(mapping(j[i]));\r\n            }\r\n            return arr;\r\n        }\r\n        return undefined;\r\n    }\r\n};","/// <reference path=\"enumerable.ts\" />\r\n/// <reference path=\"array.ts\" />\r\n\r\nmodule exjs {\r\n    function groupByEnumerator<T, TKey>(prev: IEnumerable<T>, keySelector: (t: T) => TKey, comparer?: (k1: TKey, k2: TKey) => boolean): IEnumerator<IGrouping<TKey, T>> {\r\n        var grps: IGrouping<TKey, T>[];\r\n        var i = 0;\r\n        var e = {\r\n            current: undefined,\r\n            moveNext: function (): boolean {\r\n                if (!grps) grps = createGroups<TKey, T>(prev, keySelector, comparer);\r\n                e.current = undefined;\r\n                if (i >= grps.length)\r\n                    return false;\r\n                e.current = grps[i];\r\n                i++;\r\n                return true;\r\n            }\r\n        };\r\n        return e;\r\n    }\r\n\r\n    function createGroups<TKey, TElement>(prev: IEnumerable<TElement>, keySelector: (t: TElement) => TKey, comparer?: (k1: TKey, k2: TKey) => boolean): IGrouping<TKey, TElement>[] {\r\n        comparer = comparer || function (k1, k2) {\r\n            return k1 === k2;\r\n        };\r\n        var grps: Group<TKey, TElement>[] = [];\r\n        var keys: TKey[] = [];\r\n\r\n        var e = prev.getEnumerator();\r\n        var key: TKey;\r\n        while (e.moveNext()) {\r\n            key = keySelector(e.current);\r\n            var index = -1;\r\n            for (var i = 0, len = keys.length; i < len; i++) {\r\n                if (comparer(key, keys[i])) {\r\n                    index = i;\r\n                    break;\r\n                }\r\n            }\r\n            var grp: Group<TKey, TElement>;\r\n            if (index < 0) {\r\n                keys.push(key);\r\n                grps.push(grp = new Group<TKey, TElement>(key));\r\n            } else {\r\n                grp = grps[index];\r\n            }\r\n            grp._add(e.current);\r\n        }\r\n\r\n        return grps;\r\n    }\r\n\r\n    class Group<TKey, TElement> extends Enumerable<TElement> implements IGrouping<TKey, TElement> {\r\n        private _arr: TElement[] = [];\r\n\r\n        constructor (public key: TKey) {\r\n            super();\r\n            this.getEnumerator = () => this._arr.en().getEnumerator();\r\n        }\r\n\r\n        _add (e: TElement) {\r\n            this._arr.push(e);\r\n        }\r\n    }\r\n\r\n    Enumerable.prototype.groupBy = function<T, TKey>(keySelector: (t: T) => TKey, comparer?: (k1: TKey, k2: TKey) => boolean): IEnumerableEx<IGrouping<TKey, T>> {\r\n        var e = new Enumerable<IGrouping<TKey, T>>();\r\n        e.getEnumerator = () => groupByEnumerator<T, TKey>(<IEnumerable<T>>this, keySelector, comparer);\r\n        return e;\r\n    };\r\n    if (List)\r\n        List.prototype.groupBy = Enumerable.prototype.groupBy;\r\n}","/// <reference path=\"enumerable.ts\" />\r\n\r\nmodule exjs {\r\n    function intersectEnumerator<T>(prev: IEnumerable<T>, second: IEnumerable<T>, comparer?: (f: T, s: T) => boolean): IEnumerator<T> {\r\n        comparer = comparer || function (f: T, s: T) { return f === s; };\r\n        var t: IEnumerator<T>;\r\n        var e = {\r\n            current: undefined,\r\n            moveNext: function (): boolean {\r\n                if (!t) t = en(prev).distinct().getEnumerator();\r\n                e.current = undefined;\r\n                while (t.moveNext()) {\r\n                    for (var hit = false, x = second.getEnumerator(); x.moveNext() && !hit;) {\r\n                        hit = comparer(t.current, x.current);\r\n                    }\r\n                    if (hit) {\r\n                        e.current = t.current;\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n        };\r\n        return e;\r\n    }\r\n\r\n    Enumerable.prototype.intersect = function<T>(second: any, comparer?: (f: T, s: T) => boolean): IEnumerableEx<T> {\r\n        var en: IEnumerable<T> = second instanceof Array ? second.en() : second;\r\n        var e = new Enumerable<T>();\r\n        e.getEnumerator = () => intersectEnumerator(<IEnumerable<T>>this, en, comparer);\r\n        return e;\r\n    };\r\n    if (List)\r\n        List.prototype.intersect = Enumerable.prototype.intersect;\r\n}  ","/// <reference path=\"enumerable.ts\" />\r\n\r\nmodule exjs {\r\n    function joinEnumerator<TOuter, TInner, TKey, TResult>(prev: IEnumerable<TOuter>, inner: IEnumerable<TInner>, outerKeySelector: (t: TOuter) => TKey, innerKeySelector: (t: TInner) => TKey, resultSelector: (tout: TOuter, tin: TInner) => TResult, comparer?: (k1: TKey, k2: TKey) => boolean): IEnumerator<TResult> {\r\n        comparer = comparer || function (k1, k2) {\r\n            return k1 === k2;\r\n        };\r\n        var s: IEnumerator<TOuter>;\r\n        var ins: TInner[];\r\n        var j = 0;\r\n        var e = {\r\n            current: undefined,\r\n            moveNext: function (): boolean {\r\n                e.current = undefined;\r\n                if (!s) {\r\n                    s = prev.getEnumerator();\r\n                    if (!s.moveNext())\r\n                        return false;\r\n                    ins = en(inner).toArray();\r\n                }\r\n\r\n                var cur: TInner;\r\n                do {\r\n                    for (; j < ins.length; j++) {\r\n                        cur = ins[j];\r\n                        if (comparer(outerKeySelector(s.current), innerKeySelector(cur))) {\r\n                            j++;\r\n                            e.current = resultSelector(s.current, cur);\r\n                            return true;\r\n                        }\r\n                    }\r\n                    j = 0;\r\n                } while (s.moveNext());\r\n                return false;\r\n            }\r\n        };\r\n        return e;\r\n    }\r\n\r\n    Enumerable.prototype.join = function<T,TInner,TKey,TResult>(inner: any, outerKeySelector: (t: T) => TKey, innerKeySelector: (t: TInner) => TKey, resultSelector: (o: T, i: TInner) => TResult, comparer?: (k1: TKey, k2: TKey) => boolean): IEnumerableEx<TResult> {\r\n        var en: IEnumerable<TInner> = inner instanceof Array ? inner.en() : inner;\r\n        var e = new Enumerable<TResult>();\r\n        e.getEnumerator = () => joinEnumerator<T, TInner, TKey, TResult>(<IEnumerable<T>>this, en, outerKeySelector, innerKeySelector, resultSelector, comparer);\r\n        return e;\r\n    };\r\n    if (List)\r\n        List.prototype.join = Enumerable.prototype.join;\r\n}","/// <reference path=\"enumerable.ts\" />\r\n/// <reference path=\"fromJson.ts\" />\r\n\r\nmodule exjs {\r\n    Enumerable.prototype.toList = function<T>() {\r\n        var l = new List<T>();\r\n\r\n        var enumerator = this.getEnumerator();\r\n        while (enumerator.moveNext()) {\r\n            l.push(enumerator.current);\r\n        }\r\n\r\n        return <IList<T>>l;\r\n    };\r\n\r\n    export class List<T> extends Enumerable<T> implements IList<T> {\r\n        //Array<T> methods\r\n        toString (): string { throw new Error(\"Not implemented\"); }\r\n        toLocaleString (): string { throw new Error(\"Not implemented\"); }\r\n        pop (): T { throw new Error(\"Not implemented\"); }\r\n        push (...items: T[]): number { throw new Error(\"Not implemented\"); }\r\n        shift (): T { throw new Error(\"Not implemented\"); }\r\n        slice (start: number, end?: number): T[] { throw new Error(\"Not implemented\"); }\r\n        sort (compareFn?: (a: T, b: T) => number): T[] { throw new Error(\"Not implemented\"); }\r\n\r\n        splice (start: number): T[];\r\n        splice (start: number, deleteCount: number, ...items: T[]): T[];\r\n        splice (): T[] { throw new Error(\"Not implemented\"); }\r\n\r\n        unshift (...items: T[]): number { throw new Error(\"Not implemented\"); }\r\n        indexOf (searchElement: T, fromIndex?: number): number { throw new Error(\"Not implemented\"); }\r\n        lastIndexOf (searchElement: T, fromIndex?: number): number { throw new Error(\"Not implemented\"); }\r\n        every (callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg?: any): boolean { throw new Error(\"Not implemented\"); }\r\n        some (callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg?: any): boolean { throw new Error(\"Not implemented\"); }\r\n        forEach (callbackfn: (value: T, index: number, array: T[]) => void, thisArg?: any): void { throw new Error(\"Not implemented\"); }\r\n        map<U>(callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): U[] { throw new Error(\"Not implemented\"); }\r\n        filter (callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg?: any): T[] { throw new Error(\"Not implemented\"); }\r\n        reduce<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U { throw new Error(\"Not implemented\"); }\r\n        reduceRight<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U { throw new Error(\"Not implemented\"); }\r\n        length: number;\r\n        [n: number]: T;\r\n\r\n        //List<T> methods\r\n        remove(item: T): boolean { throw new Error(\"Not implemented\"); }\r\n        removeWhere(predicate: (t: T, index?: number) => boolean): IEnumerableEx<T> { throw new Error(\"Not implemented\"); }\r\n    }\r\n\r\n    for (var p in Array) if (Array.hasOwnProperty(p)) List[p] = Array[p];\r\n    function __ () { this.constructor = List; }\r\n    __.prototype = Array.prototype;\r\n    List.prototype = new __();\r\n    for (var key in Enumerable.prototype) {\r\n        if (key === \"getEnumerator\")\r\n            continue;\r\n        List.prototype[key] = Enumerable.prototype[key];\r\n    }\r\n\r\n    List.prototype.getEnumerator = function<T>(): IEnumerator<T> {\r\n        var list = this;\r\n        var len = list.length;\r\n        var e = { moveNext: undefined, current: undefined };\r\n        var index = -1;\r\n        e.moveNext = function () {\r\n            index++;\r\n            if (index >= len) {\r\n                e.current = undefined;\r\n                return false;\r\n            }\r\n            e.current = list[index];\r\n            return true;\r\n        };\r\n        return e;\r\n    };\r\n    List.prototype.remove = function<T>(item: T): boolean {\r\n        return this.removeWhere(t => t === item).any();\r\n    };\r\n    List.prototype.removeWhere = function<T>(predicate: (t: T, index?: number) => boolean): IEnumerableEx<T> {\r\n        var removed = [];\r\n        var cur: T;\r\n        for (var i = this.length - 1; i >= 0; i--) {\r\n            cur = this[i];\r\n            if (predicate(cur, i) === true) {\r\n                this.splice(i, 1);\r\n                removed.push(cur);\r\n            }\r\n        }\r\n        return removed.en().reverse();\r\n    };\r\n}","/// <reference path=\"enumerable.ts\" />\r\n\r\nmodule exjs {\r\n    function orderByEnumerable<T, TKey>(source: IEnumerable<T>, keySelector: (t: T) => TKey, isDescending: boolean, comparer?: (f: TKey, s: TKey) => number): IOrderedEnumerable<T> {\r\n        return new OrderedEnumerable<T, TKey>(source, keySelector, isDescending, comparer);\r\n    }\r\n\r\n    class OrderedEnumerable<T, TKey> extends Enumerable<T> implements IOrderedEnumerable<T> {\r\n        Source: IEnumerable<T>;\r\n        Sorter: (a: T, b: T) => number;\r\n\r\n        constructor (source: IEnumerable<T>, keySelector: (t: T) => TKey, isDescending: boolean, keyComparer: (f: TKey, s: TKey) => number) {\r\n            super();\r\n\r\n            this.Source = source;\r\n            keyComparer = keyComparer || function (f: TKey, s: TKey) {\r\n                return f > s ? 1 : (f < s ? -1 : 0);\r\n            };\r\n            var factor = (isDescending === true) ? -1 : 1;\r\n            this.Sorter = (a, b) => factor * keyComparer(keySelector(a), keySelector(b));\r\n        }\r\n\r\n        getEnumerator (): IEnumerator<T> {\r\n            var source = this.Source;\r\n            var sorter = this.Sorter;\r\n            var arr: T[];\r\n            var i = 0;\r\n            var e = {\r\n                current: undefined,\r\n                moveNext: function (): boolean {\r\n                    if (!arr) {\r\n                        arr = en(source).toArray();\r\n                        arr.sort(sorter);\r\n                    }\r\n                    e.current = undefined;\r\n                    if (i >= arr.length)\r\n                        return false;\r\n                    e.current = arr[i];\r\n                    i++;\r\n                    return true;\r\n                }\r\n            };\r\n            return e;\r\n        }\r\n\r\n        thenBy<TInnerKey>(keySelector: (t: T) => TInnerKey, comparer?: (f: TInnerKey, s: TInnerKey) => number): IOrderedEnumerable<T> {\r\n            return new ThenEnumerable<T, TKey, TInnerKey>(this, keySelector, false, comparer);\r\n        }\r\n\r\n        thenByDescending<TInnerKey>(keySelector: (t: T) => TInnerKey, comparer?: (f: TInnerKey, s: TInnerKey) => number): IOrderedEnumerable<T> {\r\n            return new ThenEnumerable<T, TKey, TInnerKey>(this, keySelector, true, comparer);\r\n        }\r\n    }\r\n\r\n    class ThenEnumerable<T, TParentKey, TKey> extends OrderedEnumerable<T, TKey> {\r\n        constructor (source: OrderedEnumerable<T, TParentKey>, keySelector: (t: T) => TKey, isDescending: boolean, keyComparer: (f: TKey, s: TKey) => number) {\r\n            super(source, keySelector, isDescending, keyComparer);\r\n\r\n            var parentSorter = source.Sorter;\r\n            var thisSorter = this.Sorter;\r\n            this.Sorter = (a, b) => parentSorter(a, b) || thisSorter(a, b);\r\n        }\r\n    }\r\n\r\n    var fn = Enumerable.prototype;\r\n    fn.orderBy = function<T,TKey>(keySelector: (t: T) => TKey, comparer?: (f: TKey, s: TKey) => number): IOrderedEnumerable<T> {\r\n        return orderByEnumerable(<IEnumerable<T>>this, keySelector, false, comparer);\r\n    };\r\n    fn.orderByDescending = function<T,TKey>(keySelector: (t: T) => TKey, comparer?: (f: TKey, s: TKey) => number): IOrderedEnumerable<T> {\r\n        return orderByEnumerable(<IEnumerable<T>>this, keySelector, true, comparer);\r\n    };\r\n    if (List) {\r\n        List.prototype.orderBy = Enumerable.prototype.orderBy;\r\n        List.prototype.orderByDescending = Enumerable.prototype.orderByDescending;\r\n    }\r\n} ","/// <reference path=\"enumerable.ts\" />\n\nmodule exjs {\n    function prependEnumerator<T>(prev: IEnumerable<T>, items: T[]): IEnumerator<T> {\n        var stage = 1;\n        var firstit: IEnumerator<T>;\n        var secondit: IEnumerator<T>;\n        var e = {\n            current: undefined,\n            moveNext: function (): boolean {\n                if (stage < 2) {\n                    firstit = firstit || items.en().getEnumerator();\n                    if (firstit.moveNext()) {\n                        e.current = firstit.current;\n                        return true;\n                    }\n                    stage++;\n                }\n\n                secondit = secondit || prev.getEnumerator();\n                if (secondit.moveNext()) {\n                    e.current = secondit.current;\n                    return true;\n                }\n                e.current = undefined;\n                return false;\n            }\n        };\n        return e;\n    }\n\n    Enumerable.prototype.prepend = function<T>(...items: T[]): IEnumerableEx<T> {\n        var e = new Enumerable<T>();\n        e.getEnumerator = () => prependEnumerator<T>(<IEnumerable<T>>this, items);\n        return e;\n    };\n    if (List)\n        List.prototype.prepend = Enumerable.prototype.prepend;\n}","/// <reference path=\"enumerable.ts\" />\r\n\r\nmodule exjs {\r\n    function rangeEnumerator (start: number, end: number, increment: number): IEnumerator<number> {\r\n        var i = start - increment;\r\n        var e = {\r\n            current: undefined,\r\n            moveNext: function (): boolean {\r\n                i += increment;\r\n                if (i >= end)\r\n                    return false;\r\n                e.current = i;\r\n                return true;\r\n            }\r\n        };\r\n        return e;\r\n    }\r\n\r\n    export function range (start: number, end: number, increment?: number): IEnumerableEx<number> {\r\n        start = start || 0;\r\n        end = end || 0;\r\n        if (start > end)\r\n            throw new Error(\"Start cannot be greater than end.\");\r\n        if (increment == null)\r\n            increment = 1;\r\n        var e = new Enumerable<number>();\r\n        e.getEnumerator = () => rangeEnumerator(start, end, increment);\r\n        return e;\r\n    }\r\n}","/// <reference path=\"enumerable.ts\" />\r\n\r\nmodule exjs {\r\n    function reverseEnumerator<T>(prev: IEnumerable<T>): IEnumerator<T> {\r\n        var a: T[];\r\n        var i = 0;\r\n        var e = {\r\n            current: undefined,\r\n            moveNext: function (): boolean {\r\n                if (!a) {\r\n                    a = en(prev).toArray();\r\n                    i = a.length;\r\n                }\r\n                i--;\r\n                e.current = a[i];\r\n                return i >= 0;\r\n            }\r\n        };\r\n        return e;\r\n    }\r\n\r\n    Enumerable.prototype.reverse = function<T>(): IEnumerableEx<T> {\r\n        var e = new Enumerable<T>();\r\n        e.getEnumerator = () => reverseEnumerator(<IEnumerable<T>>this);\r\n        return e;\r\n    };\r\n    if (List)\r\n        List.prototype.reverse = Enumerable.prototype.reverse;\r\n}","module exjs {\r\n    export function round(value: number, digits?: number) {\r\n        digits = digits || 0;\r\n        if (digits === 0)\r\n            return Math.round(value);\r\n        var shift = Math.pow(10, digits);\r\n        return Math.round(value * shift) / shift;\r\n    }\r\n}","/// <reference path=\"enumerable.ts\" />\r\n/// <reference path=\"array.ts\" />\r\n\r\nmodule exjs {\r\n    function selectEnumerator<T, TResult>(prev: IEnumerable<T>, selector: IProjectionIndexFunc<T, TResult>): IEnumerator<TResult> {\r\n        var t: IEnumerator<T>;\r\n        var i = 0;\r\n        var e = {\r\n            current: undefined,\r\n            moveNext: function (): boolean {\r\n                if (!t) t = prev.getEnumerator();\r\n                if (!t.moveNext()) return false;\r\n                e.current = selector(t.current, i);\r\n                i++;\r\n                return true;\r\n            }\r\n        };\r\n        return e;\r\n    }\r\n\r\n    function selectManyEnumerator<T, TResult>(prev: IEnumerable<T>, selector: (t: T) => any): IEnumerator<TResult> {\r\n        var t: IEnumerator<T>;\r\n        var active: IEnumerator<TResult>;\r\n        var e = {\r\n            current: undefined,\r\n            moveNext: function (): boolean {\r\n                e.current = undefined;\r\n                if (!t) t = prev.getEnumerator();\r\n                while (!active || !active.moveNext()) {\r\n                    if (!t.moveNext())\r\n                        return false;\r\n                    active = selectorEnumerator<T, TResult>(selector(t.current));\r\n                }\r\n                e.current = active.current;\r\n                return true;\r\n            }\r\n        };\r\n        return e;\r\n    }\r\n\r\n    Enumerable.prototype.select = function<T,TResult>(selector: IProjectionIndexFunc<T, TResult>): IEnumerableEx<TResult> {\r\n        var e = new Enumerable<TResult>();\r\n        e.getEnumerator = () => selectEnumerator(<IEnumerable<T>>this, selector);\r\n        return e;\r\n    };\r\n    Enumerable.prototype.selectMany = function<T,TResult>(selector: (t: T) => any): IEnumerableEx<TResult> {\r\n        var e = new Enumerable<TResult>();\r\n        e.getEnumerator = () => selectManyEnumerator<T, TResult>(<IEnumerable<T>>this, selector);\r\n        return e;\r\n    };\r\n    if (List) {\r\n        List.prototype.select = Enumerable.prototype.select;\r\n        List.prototype.selectMany = Enumerable.prototype.selectMany;\r\n    }\r\n}","module exjs {\r\n    export function selectorEnumerator<T, TResult>(en: IEnumerable<T>): IEnumerator<TResult>;\r\n    export function selectorEnumerator<T, TResult>(arr: T[]): IEnumerator<TResult>;\r\n    export function selectorEnumerator<T, TResult>(obj: any) {\r\n        if (Array.isArray(obj))\r\n            return (<T[]>obj).en().getEnumerator();\r\n        if (obj != null && typeof obj.getEnumerator === \"function\")\r\n            return obj.getEnumerator();\r\n        return null;\r\n    }\r\n}","/// <reference path=\"enumerable.ts\" />\r\n\r\nmodule exjs {\r\n    function skipEnumerator<T>(prev: IEnumerable<T>, count: number): IEnumerator<T> {\r\n        var t: IEnumerator<T>;\r\n        var e = {\r\n            current: undefined,\r\n            moveNext: function (): boolean {\r\n                if (!t) {\r\n                    t = prev.getEnumerator();\r\n                    for (var i = 0; i < count; i++) {\r\n                        if (!t.moveNext()) return false;\r\n                    }\r\n                }\r\n\r\n                if (!t.moveNext()) {\r\n                    e.current = undefined;\r\n                    return false;\r\n                }\r\n\r\n                e.current = t.current;\r\n                return true;\r\n            }\r\n        };\r\n        return e;\r\n    }\r\n\r\n    function skipWhileEnumerator<T>(prev: IEnumerable<T>, predicate: IProjectionIndexFunc<T, boolean>): IEnumerator<T> {\r\n        var t: IEnumerator<T>;\r\n        var e = {\r\n            current: undefined,\r\n            moveNext: function (): boolean {\r\n                if (!t) {\r\n                    t = prev.getEnumerator();\r\n                    for (var i = 0; t.moveNext(); i++) {\r\n                        if (!predicate(e.current = t.current, i))\r\n                            return true;\r\n                    }\r\n                    e.current = undefined;\r\n                    return false;\r\n                }\r\n\r\n                if (!t.moveNext()) {\r\n                    e.current = undefined;\r\n                    return false;\r\n                }\r\n\r\n                e.current = t.current;\r\n                return true;\r\n            }\r\n        };\r\n        return e;\r\n    }\r\n\r\n    Enumerable.prototype.skip = function<T>(count: number): IEnumerableEx<T> {\r\n        var e = new Enumerable<T>();\r\n        e.getEnumerator = () => skipEnumerator(<IEnumerable<T>>this, count);\r\n        return e;\r\n    };\r\n    Enumerable.prototype.skipWhile = function<T>(predicate: IProjectionIndexFunc<T, boolean>): IEnumerableEx<T> {\r\n        var e = new Enumerable<T>();\r\n        e.getEnumerator = () => skipWhileEnumerator(<IEnumerable<T>>this, predicate);\r\n        return e;\r\n    };\r\n    if (List) {\r\n        List.prototype.skip = Enumerable.prototype.skip;\r\n        List.prototype.skipWhile = Enumerable.prototype.skipWhile;\r\n    }\r\n}","/// <reference path=\"enumerable.ts\" />\r\n\r\nmodule exjs {\r\n    function takeEnumerator<T>(prev: IEnumerable<T>, count: number): IEnumerator<T> {\r\n        var t: IEnumerator<T>;\r\n        var i = 0;\r\n        var e = {\r\n            current: undefined,\r\n            moveNext: function (): boolean {\r\n                if (!t) t = prev.getEnumerator();\r\n                i++;\r\n                if (i > count)\r\n                    return false;\r\n                e.current = undefined;\r\n                if (!t.moveNext())\r\n                    return false;\r\n                e.current = t.current;\r\n                return true;\r\n            }\r\n        };\r\n        return e;\r\n    }\r\n\r\n    function takeWhileEnumerator<T>(prev: IEnumerable<T>, predicate: IProjectionIndexFunc<T, boolean>): IEnumerator<T> {\r\n        var t: IEnumerator<T>;\r\n        var i = 0;\r\n        var e = {\r\n            current: undefined,\r\n            moveNext: function (): boolean {\r\n                if (!t) t = prev.getEnumerator();\r\n\r\n                if (!t.moveNext() || !predicate(t.current, i)) {\r\n                    e.current = undefined;\r\n                    return false;\r\n                }\r\n                i++;\r\n\r\n                e.current = t.current;\r\n                return true;\r\n            }\r\n        };\r\n        return e;\r\n    }\r\n\r\n    Enumerable.prototype.take = function<T>(count: number): IEnumerableEx<T> {\r\n        var e = new Enumerable<T>();\r\n        e.getEnumerator = () => takeEnumerator(<IEnumerable<T>>this, count);\r\n        return e;\r\n    };\r\n    Enumerable.prototype.takeWhile = function<T>(predicate: IProjectionIndexFunc<T, boolean>): IEnumerableEx<T> {\r\n        var e = new Enumerable<T>();\r\n        e.getEnumerator = () => takeWhileEnumerator(<IEnumerable<T>>this, predicate);\r\n        return e;\r\n    };\r\n    if (List) {\r\n        List.prototype.take = Enumerable.prototype.take;\r\n        List.prototype.takeWhile = Enumerable.prototype.takeWhile;\r\n    }\r\n}","/// <reference path=\"enumerable.ts\" />\r\n\r\nmodule exjs {\r\n    function traverseEnumerator<T>(prev: IEnumerable<T>, selector: (t: T) => IEnumerable<T>): IEnumerator<T> {\r\n        var started = false;\r\n        var enstack: IEnumerator<T>[] = [];\r\n        var t: IEnumerator<T>;\r\n        var e = {\r\n            current: undefined,\r\n            moveNext (): boolean {\r\n                if (!started) {\r\n                    t = prev.getEnumerator();\r\n                    started = true;\r\n                } else if (t == null) {\r\n                    return false;\r\n                } else {\r\n                    enstack.push(t);\r\n                    t = selectorEnumerator<T, T>(selector(e.current));\r\n                }\r\n\r\n                while (!t || !t.moveNext()) {\r\n                    if (enstack.length < 1)\r\n                        break;\r\n                    t = enstack.pop();\r\n                }\r\n\r\n                e.current = t == null ? undefined : t.current;\r\n                return e.current !== undefined;\r\n            }\r\n        };\r\n        return e;\r\n    }\r\n\r\n    function traverseUniqueEnumerator<T>(prev: IEnumerable<T>, selector: (t: T)=>IEnumerable<T>, turnstile: (t: T) => boolean): IEnumerator<T> {\r\n        var started = false;\r\n        var enstack: IEnumerator<T>[] = [];\r\n        var t: IEnumerator<T>;\r\n        var e = {\r\n            current: undefined,\r\n            moveNext (): boolean {\r\n                if (!started) {\r\n                    t = prev.getEnumerator();\r\n                    started = true;\r\n                } else if (t == null) {\r\n                    return false;\r\n                } else {\r\n                    enstack.push(t);\r\n                    t = selectorEnumerator<T, T>(selector(e.current));\r\n                }\r\n\r\n                do {\r\n                    while (!t || !t.moveNext()) {\r\n                        if (enstack.length < 1)\r\n                            break;\r\n                        t = enstack.pop();\r\n                    }\r\n                    e.current = t == null ? undefined : t.current;\r\n                } while (turnstile(e.current));\r\n\r\n                return e.current !== undefined;\r\n            }\r\n        };\r\n        return e;\r\n    }\r\n\r\n    Enumerable.prototype.traverse = function<T>(selector: any): IEnumerableEx<T> {\r\n        var e = new Enumerable<T>();\r\n        e.getEnumerator = () => traverseEnumerator(<IEnumerable<T>>this, selector);\r\n        return e;\r\n    };\r\n    Enumerable.prototype.traverseUnique = function<T>(selector: any, matcher?: (t1: T, t2: T) => boolean): IEnumerableEx<T> {\r\n        var existing: T[] = [];\r\n        var e = new Enumerable<T>();\r\n        if (matcher) {\r\n            e.getEnumerator = () => traverseUniqueEnumerator(<IEnumerable<T>>this, selector, (x: T) => {\r\n                if (existing.some(e => matcher(x, e)))\r\n                    return true;\r\n                existing.push(x);\r\n                return false;\r\n            });\r\n        } else {\r\n            e.getEnumerator = () => traverseUniqueEnumerator(<IEnumerable<T>>this, selector, (x: T) => {\r\n                if (existing.indexOf(x) > -1)\r\n                    return true;\r\n                existing.push(x);\r\n                return false;\r\n            });\r\n        }\r\n        return e;\r\n    };\r\n    if (List) {\r\n        List.prototype.traverse = Enumerable.prototype.traverse;\r\n        List.prototype.traverseUnique = Enumerable.prototype.traverseUnique;\r\n    }\r\n}","/// <reference path=\"enumerable.ts\" />\r\n\r\nmodule exjs {\r\n    function unionEnumerator<T>(prev: IEnumerable<T>, second: IEnumerable<T>, comparer?: (f: T, s: T) => boolean): IEnumerator<T> {\r\n        comparer = comparer || function (f: T, s: T) {\r\n            return f === s;\r\n        };\r\n        var t: IEnumerator<T>;\r\n        var visited: T[] = [];\r\n        var s: IEnumerator<T>;\r\n        var e = {\r\n            current: undefined,\r\n            moveNext: function (): boolean {\r\n                if (!t) t = en(prev).distinct().getEnumerator();\r\n                e.current = undefined;\r\n                if (!s && t.moveNext()) {\r\n                    visited.push(e.current = t.current);\r\n                    return true;\r\n                }\r\n                s = s || en(second).distinct().getEnumerator();\r\n                while (s.moveNext()) {\r\n                    for (var i = 0, hit = false, len = visited.length; i < len && !hit; i++) {\r\n                        hit = comparer(visited[i], s.current);\r\n                    }\r\n                    if (!hit) {\r\n                        e.current = s.current;\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n        };\r\n        return e;\r\n    }\r\n\r\n    Enumerable.prototype.union = function<T>(second: any, comparer?: (f: T, s: T) => boolean): IEnumerableEx<T> {\r\n        var en:IEnumerable<T> = second instanceof Array ? second.en() : second;\r\n        var e = new Enumerable<T>();\r\n        e.getEnumerator = () => unionEnumerator(<IEnumerable<T>>this, en, comparer);\r\n        return e;\r\n    };\r\n    if (List)\r\n        List.prototype.union = Enumerable.prototype.union;\r\n}","/// <reference path=\"enumerable.ts\" />\r\n\r\nmodule exjs {\r\n    function whereEnumerator<T>(prev: IEnumerable<T>, filter: (t: T) => boolean): IEnumerator<T> {\r\n        var t: IEnumerator<T>;\r\n        var e = {\r\n            current: undefined,\r\n            moveNext: function (): boolean {\r\n                if (!t) t = prev.getEnumerator();\r\n                var c: T;\r\n                while (t.moveNext()) {\r\n                    if (filter(c = t.current)) {\r\n                        e.current = c;\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n        };\r\n        return e;\r\n    }\r\n\r\n    Enumerable.prototype.where = function<T>(filter: (t: T) => boolean): IEnumerableEx<T> {\r\n        var e = new Enumerable<T>();\r\n        e.getEnumerator = () => whereEnumerator(<IEnumerable<T>>this, filter);\r\n        return e;\r\n    };\r\n    if (List)\r\n        List.prototype.where = Enumerable.prototype.where;\r\n}","module exjs {\r\n    export function en<T>(enu: IEnumerable<T>): IEnumerableEx<T> {\r\n        var x = new Enumerable<T>();\r\n        x.getEnumerator = function (): IEnumerator<T> {\r\n            return wrapEnumerator<T>(enu);\r\n        };\r\n        return <IEnumerableEx<T>>x;\r\n    }\r\n\r\n    function wrapEnumerator<T>(enu: IEnumerable<T>): IEnumerator<T> {\r\n        var wrapped = enu.getEnumerator();\r\n        var x = <IEnumerator<T>>{ current: undefined, moveNext: undefined };\r\n        x.moveNext = function (): boolean {\r\n            if (wrapped.moveNext()) {\r\n                x.current = wrapped.current;\r\n                return true;\r\n            }\r\n            x.current = undefined;\r\n            return false;\r\n        };\r\n        return x;\r\n    }\r\n}\r\nvar ex = exjs.en;","/// <reference path=\"enumerable.ts\" />\r\n\r\nmodule exjs {\r\n    function zipEnumerator<T, TSecond, TResult>(prev: IEnumerable<T>, second: IEnumerable<TSecond>, resultSelector: (f: T, s: TSecond) => TResult): IEnumerator<TResult> {\r\n        var s: IEnumerator<T>;\r\n        var t: IEnumerator<TSecond>;\r\n        var e = {\r\n            current: undefined,\r\n            moveNext: function (): boolean {\r\n                if (!s) s = prev.getEnumerator();\r\n                if (!t) t = second.getEnumerator();\r\n                e.current = undefined;\r\n                if (!s.moveNext() || !t.moveNext())\r\n                    return false;\r\n                e.current = resultSelector(s.current, t.current);\r\n                return true;\r\n            }\r\n        };\r\n        return e;\r\n    }\r\n\r\n    Enumerable.prototype.zip = function<T, TSecond,TResult>(second: any, resultSelector: (f: T, s: TSecond) => TResult): IEnumerableEx<TResult> {\r\n        var en: IEnumerable<TSecond> = second instanceof Array ? second.en() : second;\r\n        var e = new Enumerable<TResult>();\r\n        e.getEnumerator = () => zipEnumerator<T, TSecond, TResult>(<IEnumerable<T>>this, en, resultSelector);\r\n        return e;\r\n    };\r\n    if (List)\r\n        List.prototype.zip = Enumerable.prototype.zip;\r\n}"],"sourceRoot":"/source/"}